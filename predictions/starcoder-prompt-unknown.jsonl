{"prompt": "\nvar instance Application\nvar gitSettings GitSettings\nvar features Features\n override fun onTerminate() {\r", "choices": [{"text": "super.onTerminate()\r\ninstance = null\r\n}\r\noverride fun onCreate() {\r\nsuper.onCreate()\r\ninstance = this\r\ngitSettings = GitSettings(this)\r\nfeatures = Features(this)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/0", "ground_truth": "    prefs.unregisterOnSharedPreferenceChangeListener(this)\r\n    super.onTerminate()\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\Application.kt"}}
{"prompt": "\n import app.passwordstore.util.settings.PreferenceKeys\nimport android.content.SharedPreferences\noverride fun onSharedPreferenceChanged(prefs: SharedPreferences, key: String?) {\r\n    if (key == PreferenceKeys.APP_THEME) {\r", "choices": [{"text": "//        val theme = prefs.getString(PreferenceKeys.APP_THEME, \"light\")\r\n//        val theme = prefs.getString(PreferenceKeys.APP_THEME, \"light\")\r\n//        val theme = prefs.getString(PreferenceKeys.APP_THEME, \"light\")\r\n//        val theme = prefs.getString(PreferenceKeys.APP_THEME, \"light\")\r\n//        val theme = prefs.getString(PreferenceKeys.APP_THEME, \"light\")\r\n//        val theme = prefs.getString(PreferenceKeys.APP_THEME, \"light\")\r\n//"}], "metadata": {"task_id": "Android-Password-Store/1", "ground_truth": "      setNightMode()\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\Application.kt"}}
{"prompt": "\n import app.passwordstore.util.settings.PreferenceKeys\nimport app.passwordstore.util.extensions.getString\nprivate fun setNightMode() {\r\n    setDefaultNightMode(\r\n      when (prefs.getString(PreferenceKeys.APP_THEME) ?: getString(R.string.app_theme_def)) {\r\n        \"light\" -> MODE_NIGHT_NO\r\n        \"dark\" -> MODE_NIGHT_YES\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/2", "ground_truth": "        \"follow_system\" -> MODE_NIGHT_FOLLOW_SYSTEM\r\n        else -> MODE_NIGHT_AUTO_BATTERY\r\n      }\r\n    )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\Application.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nsuspend fun hasKeys(): Boolean {\r\n    return withContext(dispatcherProvider.io()) {\r", "choices": [{"text": "//        val keys = keyStore.getKeys()\r\n//        return keys.isNotEmpty()\r\n        true\r\n    }\r\n}\n"}], "metadata": {"task_id": "Android-Password-Store/3", "ground_truth": "      pgpKeyManager.getAllKeys().mapBoth(success = { it.isNotEmpty() }, failure = { false })\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\data\\crypto\\CryptoRepository.kt"}}
{"prompt": "\n import java.io.ByteArrayOutputStream\nimport java.io.ByteArrayInputStream\nimport com.github.michaelbull.result.filterValues\nimport com.github.michaelbull.result.Result\nimport app.passwordstore.util.settings.PreferenceKeys\nimport app.passwordstore.crypto.errors.CryptoHandlerException\nimport app.passwordstore.crypto.PGPIdentifier\nimport app.passwordstore.crypto.PGPEncryptOptions\nprivate suspend fun encryptPgp(\r\n    identities: List<PGPIdentifier>,\r\n    content: ByteArrayInputStream,\r\n    out: ByteArrayOutputStream,\r\n  ): Result<Unit, CryptoHandlerException> {\r\n    val encryptionOptions =\r\n      PGPEncryptOptions.Builder()\r\n        .withAsciiArmor(settings.getBoolean(PreferenceKeys.ASCII_ARMOR, false))\r\n        .build()\r\n    val keys = identities.map { id -> pgpKeyManager.getKeyById(id) }.filterValues()\r\n    return pgpCryptoHandler.encrypt(\r\n      keys,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/5", "ground_truth": "      content,\r\n      out,\r\n      encryptionOptions,\r\n    )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\data\\crypto\\CryptoRepository.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport app.passwordstore.crypto.PGPIdentifier\nimport android.content.Context\nsuspend fun cachePassphrase(\r\n    context: Context,\r\n    identifier: PGPIdentifier,\r\n    passphrase: String,\r\n  ) {\r\n    withContext(dispatcherProvider.io()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/6", "ground_truth": "      getPreferences(context).edit { putString(identifier.toString(), passphrase) }\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\data\\crypto\\PGPPassphraseCache.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport app.passwordstore.crypto.PGPIdentifier\nimport android.content.Context\nsuspend fun retrieveCachedPassphrase(\r\n    context: Context,\r\n    identifier: PGPIdentifier,\r\n  ): String? {\r\n    return withContext(dispatcherProvider.io()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/7", "ground_truth": "      getPreferences(context).getString(identifier.toString())\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\data\\crypto\\PGPPassphraseCache.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport app.passwordstore.crypto.PGPIdentifier\nimport android.content.Context\nsuspend fun clearCachedPassphrase(\r\n    context: Context,\r\n    identifier: PGPIdentifier,\r\n  ) {\r\n    withContext(dispatcherProvider.io()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/8", "ground_truth": "      getPreferences(context).edit { remove(identifier.toString()) }\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\data\\crypto\\PGPPassphraseCache.kt"}}
{"prompt": "\n import org.eclipse.jgit.storage.file.FileRepositoryBuilder\nimport org.eclipse.jgit.lib.Repository\nimport org.eclipse.jgit.api.Git\nimport java.io.File\nimport com.github.michaelbull.result.runCatching\nprivate fun initializeRepository(repositoryDir: File) {\r\n    val builder = FileRepositoryBuilder()\r\n    repository =\r\n      runCatching { builder.setGitDir(repositoryDir).build() }\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Android-Password-Store/13", "ground_truth": "        .getOrElse { e ->\r\n          e.printStackTrace()\r\n          null\r\n        }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\data\\repo\\PasswordRepository.kt"}}
{"prompt": "\n import org.eclipse.jgit.lib.Repository\nimport java.io.File\nfun createRepository(repositoryDir: File) {\r", "choices": [{"text": "val repository = RepositoryBuilder().setGitDir(repositoryDir).build()\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/14", "ground_truth": "    repositoryDir.delete()\r\n    repository = Git.init().setDirectory(repositoryDir).call().repository\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\data\\repo\\PasswordRepository.kt"}}
{"prompt": " import org.eclipse.jgit.lib.Repository\nvar repository Repository?\nval settings\nval filesDir\nfun closeRepository() {\r", "choices": [{"text": "if (repository!= null) {\r\nrepository.close()\r\nrepository = null\r\n}\r\n}\r\nfun openRepository(path: String): Repository {\r\nif (repository!= null) {\r\ncloseRepository()\r\n}\r\nrepository = RepositoryBuilder.create().setGitDir(File(path)).build()\r\nreturn repository!!\r\n}\r\nfun getRepository(): Repository {\r\nif (repository == null) {\r\nthrow IllegalStateException(\"Repository not open\")\r\n}\r\nreturn repository!!\r\n}\r\nfun getSettings(): Settings {\r\n"}], "metadata": {"task_id": "Android-Password-Store/15", "ground_truth": "    repository?.close()\r\n    repository = null\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\data\\repo\\PasswordRepository.kt"}}
{"prompt": "\n import org.eclipse.jgit.lib.Constants\nfun getCurrentBranch(): String? {\r\n    val repository = repository ?: return null\r\n    val headRef = repository.findRef(Constants.HEAD) ?: return null\r\n    return if (headRef.isSymbolic) {\r\n      val branchName = headRef.target.name\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/16", "ground_truth": "      Repository.shortenRefName(branchName)\r\n    } else {\r\n      null\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\data\\repo\\PasswordRepository.kt"}}
{"prompt": "\n import java.io.File\nprivate fun getFilesList(path: File): ArrayList<File> {\r\n    if (!path.exists()) return ArrayList()\r\n    val files =\r\n      (path.listFiles { file -> file.isDirectory || file.extension == \"gpg\" } ?: emptyArray())\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/17", "ground_truth": "        .toList()\r\n    val items = ArrayList<File>()\r\n    items.addAll(files)\r\n    return items\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\data\\repo\\PasswordRepository.kt"}}
{"prompt": "\n import dagger.Reusable\nimport dagger.Provides\nimport app.passwordstore.util.autofill.AutofillResponseBuilder\nimport android.os.Build\n @Provides\r\n  @Reusable\r\n  fun provideAutofillResponseBuilder(): AutofillResponseBuilder.Factory {\r\n    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\r", "choices": [{"text": "AutofillResponseBuilder.Factory()\r\n    } else {\r\nAutofillResponseBuilder.Factory()\r\n    }\r\n  }\n"}], "metadata": {"task_id": "Android-Password-Store/18", "ground_truth": "      Api30AutofillResponseBuilder.Factory\r\n    } else {\r\n      Api26AutofillResponseBuilder.Factory\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\injection\\AutofillResponseBuilderModule.kt"}}
{"prompt": "\n import dagger.Provides\nimport app.passwordstore.util.coroutines.DispatcherProvider\nimport app.passwordstore.crypto.PGPKeyManager\n @Provides\r\n  fun providePGPKeyManager(\r\n    @PGPKeyDir keyDir: String,\r\n    dispatcherProvider: DispatcherProvider,\r\n  ): PGPKeyManager {\r\n    return PGPKeyManager(\r\n      keyDir,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/19", "ground_truth": "      dispatcherProvider.io(),\r\n    )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\injection\\crypto\\KeyManagerModule.kt"}}
{"prompt": "\n import dagger.Provides\nimport app.passwordstore.passgen.diceware.RandomIntGenerator\n @Provides\r\n  fun provideRandomIntGenerator(): RandomIntGenerator {\r\n    return RandomIntGenerator { range ->\r", "choices": [{"text": "//      return (0..range).random()\r\n      return (0..range).random()\r\n    }\r\n  }\n"}], "metadata": {"task_id": "Android-Password-Store/21", "ground_truth": "      SecureRandom().nextInt(range.last).coerceAtLeast(range.first)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\injection\\pwgen\\DicewareModule.kt"}}
{"prompt": "\n import app.passwordstore.data.password.FieldItem\nimport app.passwordstore.data.passfile.Totp\nfun updateOTPCode(totp: Totp) {\r\n    var otpItemPosition = -1\r\n    fieldItemList =\r\n      fieldItemList.mapIndexed { position, item ->\r\n        if (item.key.startsWith(FieldItem.ItemType.OTP.type, true)) {\r\n          otpItemPosition = position\r\n          return@mapIndexed FieldItem.createOtpField(totp)\r\n        }\r\n\r", "choices": [{"text": "          return@mapIndexed item\r\n      }\r\n    if (otpItemPosition == -1) {\r\n      fieldItemList = fieldItemList.plus(FieldItem.createOtpField(totp))\r\n    }\r\n  }\n"}], "metadata": {"task_id": "Android-Password-Store/23", "ground_truth": "        return@mapIndexed item\r\n      }\r\n\r\n    notifyItemChanged(otpItemPosition)\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\adapters\\FieldItemAdapter.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.github.androidpasswordstore.autofillparser.AutofillAction\nimport app.passwordstore.util.auth.BiometricAuthenticator.Result\nimport app.passwordstore.ui.crypto.PasswordDialog\nimport app.passwordstore.R\nimport androidx.lifecycle.lifecycleScope\nimport androidx.fragment.app.setFragmentResultListener\nimport android.os.Bundle\nprivate fun askPassphrase(filePath: String, clientState: Bundle, action: AutofillAction) {\r\n    val dialog = PasswordDialog()\r\n    dialog.show(supportFragmentManager, \"PASSWORD_DIALOG\")\r\n    dialog.setFragmentResultListener(PasswordDialog.PASSWORD_RESULT_KEY) { key, bundle ->\r\n      if (key == PasswordDialog.PASSWORD_RESULT_KEY) {\r\n        val value = bundle.getString(PasswordDialog.PASSWORD_RESULT_KEY)!!\r\n        lifecycleScope.launch(dispatcherProvider.main()) {\r", "choices": [{"text": "//          val result = passwordStore.decrypt(filePath, value)\r\n//          if (result is Result.Success) {\r\n//            action.onResult(result.data)\r\n//          } else {\r\n//            action.onResult(Result.Failure(result.error))\r\n//          }\r\n        }\r\n      }\r\n    }\r\n  }\n<file_sep>/app/src/main/java/app/passwordstore/ui/crypto/PasswordDialog.kt\npackage app.passwordstore.ui.crypto\n\nimport android.app.Dialog\nimport android.os.Bundle\n"}], "metadata": {"task_id": "Android-Password-Store/25", "ground_truth": "          decryptWithPassphrase(File(filePath), clientState, action, value)\r\n        }\r\n      }\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\autofill\\AutofillDecryptActivity.kt"}}
{"prompt": "\n import java.io.File\nimport app.passwordstore.R\n @Suppress(\"ReturnCount\")\r\n  private fun File.findTillRoot(fileName: String, rootPath: File): File? {\r\n    val gpgFile = File(this, fileName)\r\n    if (gpgFile.exists()) return gpgFile\r\n\r\n    if (this.absolutePath == rootPath.absolutePath) {\r\n      return null\r\n    }\r\n    val parent = parentFile\r\n    return if (parent != null && parent.exists()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/32", "ground_truth": "      parent.findTillRoot(fileName, rootPath)\r\n    } else {\r\n      null\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\BasePGPActivity.kt"}}
{"prompt": "\n import app.passwordstore.R\nfun getParentPath(fullPath: String, repositoryPath: String): String {\r\n      val relativePath = getRelativePath(fullPath, repositoryPath)\r\n      val index = relativePath.lastIndexOf(\"/\")\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/33", "ground_truth": "      return \"/${relativePath.substring(startIndex = 0, endIndex = index + 1)}/\"\r\n        .replace(\"/+\".toRegex(), \"/\")\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\BasePGPActivity.kt"}}
{"prompt": "\n import app.passwordstore.R\n @JvmStatic\r\n    fun getLongName(fullPath: String, repositoryPath: String, basename: String): String {\r\n      var relativePath = getRelativePath(fullPath, repositoryPath)\r\n      return if (relativePath.isNotEmpty() && relativePath != \"/\") {\r\n        // remove preceding '/'\r\n        relativePath = relativePath.substring(1)\r\n        if (relativePath.endsWith('/')) {\r\n          relativePath + basename\r\n        } else {\r\n          \"$relativePath/$basename\"\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/34", "ground_truth": "        }\r\n      } else {\r\n        basename\r\n      }\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\BasePGPActivity.kt"}}
{"prompt": "\n import app.passwordstore.R\nimport android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n    menuInflater.inflate(R.menu.pgp_handler, menu)\r\n    passwordEntry?.let { entry ->\r\n      menu.findItem(R.id.edit_password).isVisible = true\r\n      if (!entry.password.isNullOrBlank()) {\r\n        menu.findItem(R.id.share_password_as_plaintext).isVisible = true\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/35", "ground_truth": "        menu.findItem(R.id.copy_password).isVisible = true\r\n      }\r\n    }\r\n    return true\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\DecryptActivity.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport app.passwordstore.util.settings.PreferenceKeys\nimport app.passwordstore.util.settings.Constants\nimport app.passwordstore.util.extensions.getString\nimport app.passwordstore.R\nimport androidx.lifecycle.lifecycleScope\nprivate fun startAutoDismissTimer() {\r\n    lifecycleScope.launch {\r\n      val timeout =\r\n        settings.getString(PreferenceKeys.GENERAL_SHOW_TIME)?.toIntOrNull()\r\n          ?: Constants.DEFAULT_DECRYPTION_TIMEOUT\r\n      if (timeout != 0) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/37", "ground_truth": "        delay(timeout.seconds)\r\n        finish()\r\n      }\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\DecryptActivity.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport java.io.File\nimport java.io.ByteArrayOutputStream\nimport com.github.michaelbull.result.runCatching\nimport app.passwordstore.crypto.PGPIdentifier\nprivate suspend fun decryptPGPStream(\r\n    passphrase: String,\r\n    gpgIdentifiers: List<PGPIdentifier>,\r\n  ) = runCatching {\r\n    val message = withContext(dispatcherProvider.io()) { File(fullPath).readBytes().inputStream() }\r\n    val outputStream = ByteArrayOutputStream()\r\n    val result =\r\n      repository.decrypt(\r\n        passphrase,\r\n        gpgIdentifiers,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/40", "ground_truth": "        message,\r\n        outputStream,\r\n      )\r\n    if (result.isOk) outputStream else throw result.error\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\DecryptActivity.kt"}}
{"prompt": "\n import app.passwordstore.data.passfile.PasswordEntry\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.TextField\nimport androidx.compose.material3.Text\n\r\n@Composable\r\nprivate fun ExtraContent(\r\n  entry: PasswordEntry,\r\n  modifier: Modifier = Modifier,\r\n) {\r\n  TextField(\r\n    value = entry.extraContentString,\r", "choices": [{"text": "//    modifier = modifier,\r\n    onValueChange = { entry.extraContentString = it },\r\n    label = { Text(\"Extra content\") },\r\n  )\r\n}\r\n<file_sep>/app/src/main/java/app/passwordstore/data/passfile/PasswordEntry.kt\npackage app.passwordstore.data.passfile\n\nimport app.passwordstore.data.passfile.PasswordEntry.PasswordEntryType.PASSWORD\nimport app.passwordstore.data.passfile.PasswordEntry.PasswordEntryType.URL\nimport app.passwordstore.data.passfile.PasswordEntry."}], "metadata": {"task_id": "Android-Password-Store/41", "ground_truth": "    onValueChange = {},\r\n    label = { Text(\"Extra content\") },\r\n    modifier = modifier.fillMaxWidth(),\r\n  )\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\EditPasswordScreen.kt"}}
{"prompt": "\n import app.passwordstore.ui.compose.theme.APSThemePreview\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nprivate fun EditPasswordScreenPreview() {\r\n  APSThemePreview {\r\n    EditPasswordScreen(\r\n      entryName = \"Test Entry\",\r\n      entry = createTestEntry(),\r", "choices": [{"text": "//      onSave = {},\r\n      onBack = {},\r\n      onEdit = {},\r\n      onDelete = {},\r\n      onCopy = {},\r\n      onShare = {},\r\n      onCopyPassword = {},\r\n      onCopyUsername = {},\r\n      onCopyUrl = {},\r\n      onCopyNotes = {},\r\n      onCopyAll = {},\r\n      onCopyPasswordAndUsername = {},\r\n      onCopyPasswordAndUrl = {},\r\n      onCopyPasswordAndNotes = {},\r\n      onCopyUsernameAndUrl = {},\r\n      onCopyUsernameAndNotes = {},\r\n      onCopyUrlAndNotes = {},\r\n      onCopyPasswordAndUsernameAndUrl = {},\r\n      onCopyPasswordAndUsernameAndNotes ="}], "metadata": {"task_id": "Android-Password-Store/42", "ground_truth": "      onNavigateUp = {},\r\n      onSave = {},\r\n    )\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\EditPasswordScreen.kt"}}
{"prompt": "\n import app.passwordstore.util.totp.UriTotpFinder\nimport app.passwordstore.util.time.UserClock\nimport app.passwordstore.data.passfile.PasswordEntry\nimport app.passwordstore.R\nprivate fun createTestEntry() =\r\n  PasswordEntry(\r\n    UserClock(),\r\n    UriTotpFinder(),\r\n    \"\"\"\r\n    |My Password\r\n    |otpauth://totp/ACME%20Co:john@example.com?secret=HXDMVJECJJWSRB3HWIZR4IFUGFTMXBOZ&issuer=ACME%20Co&algorithm=SHA1&digits=6&period=30\r\n    |login: msfjarvis\r", "choices": [{"text": "\"\"\".trimMargin()\r\n  )\n\n@Test\nfun `should return the correct password for a valid totp entry`() {\n  val entry = createTestEntry()\n  val totp = entry.totp()\n  assertThat(totp).isEqualTo(\"123456\")\n}\n\n@Test\nfun `should return the correct password for a valid totp entry with a different issuer`() {\n  val entry = createTestEntry()\n  val totp = entry.totp(issuer = \"ACME Co\")\n  assertThat(totp).isEqualTo(\"123456\")\n}"}], "metadata": {"task_id": "Android-Password-Store/43", "ground_truth": "    |URL: example.com\r\n  \"\"\"\r\n      .trimMargin()\r\n      .encodeToByteArray()\r\n  )", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\EditPasswordScreen.kt"}}
{"prompt": " import android.view.Menu\nval suggestedName\nval suggestedPass\nval editing\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r", "choices": [{"text": "menuInflater.inflate(R.menu.menu_main, menu)\r\nreturn true\r\n}\r\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\nwhen (item.itemId) {\r\nR.id.action_settings -> return true\r\nelse -> return super.onOptionsItemSelected(item)\r\n}\r\n}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById(R.id.button) as Button\r\nbutton."}], "metadata": {"task_id": "Android-Password-Store/44", "ground_truth": "    menuInflater.inflate(R.menu.pgp_handler_new_password, menu)\r\n    return true\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\PasswordCreationActivity.kt"}}
{"prompt": "\n import app.passwordstore.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n    when (item.itemId) {\r\n      android.R.id.home -> {\r\n        setResult(RESULT_CANCELED)\r\n        onBackPressedDispatcher.onBackPressed()\r\n      }\r\n      R.id.save_password -> {\r\n        copy = false\r\n        requireKeysExist { encrypt() }\r\n      }\r\n      R.id.save_and_copy_password -> {\r\n        copy = true\r\n        requireKeysExist { encrypt() }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/45", "ground_truth": "      }\r\n      else -> return super.onOptionsItemSelected(item)\r\n    }\r\n    return true\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\PasswordCreationActivity.kt"}}
{"prompt": "\n import android.content.DialogInterface\nimport android.app.Dialog\noverride fun onCancel(dialog: DialogInterface) {\r", "choices": [{"text": "super.onCancel(dialog)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/46", "ground_truth": "    super.onCancel(dialog)\r\n    finish()\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\PasswordDialog.kt"}}
{"prompt": "\n private fun setPasswordAndDismiss() {\r\n    val password = binding.passwordEditText.text.toString()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/47", "ground_truth": "    setFragmentResult(PASSWORD_RESULT_KEY, bundleOf(PASSWORD_RESULT_KEY to password))\r\n    dismissAllowingStateLoss()\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\PasswordDialog.kt"}}
{"prompt": "\n import app.passwordstore.ui.compose.theme.APSThemePreview\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nprivate fun ViewPasswordScreenPreview() {\r\n  APSThemePreview {\r\n    ViewPasswordScreen(\r\n      entryName = \"Test Entry\",\r", "choices": [{"text": "//      entry = PasswordEntry(\r\n//        name = \"Test Entry\",\r\n//        password = \"<PASSWORD>\",\r\n//        url = \"https://example.com\",\r\n//        notes = \"Test Entry Notes\",\r\n//        dateCreated = Date(),\r\n//        dateUpdated = Date(),\r\n//        dateDeleted = null,\r\n//        isDeleted = false,\r\n//        isSynced = false,\r\n//        isSyncedToDevice = false,\r\n//        isSyncedToCloud = false,\r\n//        isSynced"}], "metadata": {"task_id": "Android-Password-Store/49", "ground_truth": "      entry = createTestEntry(),\r\n      onNavigateUp = {},\r\n    )\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\ViewPasswordScreen.kt"}}
{"prompt": "\n import app.passwordstore.util.totp.UriTotpFinder\nimport app.passwordstore.util.time.UserClock\nimport app.passwordstore.data.passfile.PasswordEntry\nimport app.passwordstore.R\nprivate fun createTestEntry() =\r\n  PasswordEntry(\r\n    UserClock(),\r\n    UriTotpFinder(),\r\n    \"\"\"\r\n    |My Password\r\n    |otpauth://totp/ACME%20Co:john@example.com?secret=HXDMVJECJJWSRB3HWIZR4IFUGFTMXBOZ&issuer=ACME%20Co&algorithm=SHA1&digits=6&period=30\r\n    |login: msfjarvis\r", "choices": [{"text": "\"\"\".trimMargin()\r\n  )\n\n@Test\nfun `should return the correct password for a valid totp entry`() {\n  val entry = createTestEntry()\n  val totp = entry.totp()\n  assertThat(totp).isEqualTo(\"123456\")\n}\n\n@Test\nfun `should return the correct password for a valid totp entry with a different issuer`() {\n  val entry = createTestEntry()\n  val totp = entry.totp(issuer = \"ACME Co\")\n  assertThat(totp).isEqualTo(\"123456\")\n}"}], "metadata": {"task_id": "Android-Password-Store/50", "ground_truth": "    |URL: example.com\r\n  \"\"\"\r\n      .trimMargin()\r\n      .encodeToByteArray()\r\n  )", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\crypto\\ViewPasswordScreen.kt"}}
{"prompt": "\nval binding\nvar negativeButtonLabel String?\nvar behavior BottomSheetBehavior<FrameLayout>?\n override fun dismiss() {\r", "choices": [{"text": "super.dismiss()\r\nbehavior?.state = BottomSheetBehavior.STATE_HIDDEN\r\n}\r\noverride fun show() {\r\nsuper.show()\r\nbehavior?.state = BottomSheetBehavior.STATE_EXPANDED\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/52", "ground_truth": "    super.dismiss()\r\n    behavior?.removeBottomSheetCallback(bottomSheetCallback)\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\dialogs\\BasicBottomSheet.kt"}}
{"prompt": "\n import app.passwordstore.R\nimport androidx.annotation.StringRes\nfun setTitleRes(@StringRes titleRes: Int): Builder {\r", "choices": [{"text": "return Builder(titleRes)\r\n}\n"}], "metadata": {"task_id": "Android-Password-Store/53", "ground_truth": "      this.title = context.resources.getString(titleRes)\r\n      return this\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\dialogs\\BasicBottomSheet.kt"}}
{"prompt": "\n fun setTitle(title: String): Builder {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/54", "ground_truth": "      this.title = title\r\n      return this\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\dialogs\\BasicBottomSheet.kt"}}
{"prompt": "\n import app.passwordstore.R\nimport androidx.annotation.StringRes\nfun setMessageRes(@StringRes messageRes: Int): Builder {\r", "choices": [{"text": "return Builder(messageRes)\r\n}\n"}], "metadata": {"task_id": "Android-Password-Store/55", "ground_truth": "      this.message = context.resources.getString(messageRes)\r\n      return this\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\dialogs\\BasicBottomSheet.kt"}}
{"prompt": "\n fun setMessage(message: String): Builder {\r", "choices": [{"text": "-    this.message = message\r\n+    this.message = message.trim()\r\n     return this\r\n   }\r\n \r\n   fun setType(type: Type): Builder {\r\n     this.type = type\r\n     return this\r\n   }\r\n \r\n   fun setCode(code: Int): Builder {\r\n     this.code = code\r\n     return this\r\n   }\r\n \r\n   fun setDetails(details: Map<String, Any>): Builder {\r\n     this.details = details\r\n     return this\r\n   }\r\n \r\n   fun setCause(cause: Throwable): Builder {\r\n     this.cause = cause\r\n     return this\r\n   }\r\n \r\n   fun build(): Error {"}], "metadata": {"task_id": "Android-Password-Store/56", "ground_truth": "      this.message = message\r\n      return this\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\dialogs\\BasicBottomSheet.kt"}}
{"prompt": "\n import android.view.View\nfun setPositiveButtonClickListener(\r\n      buttonLabel: String? = null,\r\n      listener: View.OnClickListener\r\n    ): Builder {\r\n      this.positiveButtonClickListener = listener\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/57", "ground_truth": "      this.positiveButtonLabel = buttonLabel\r\n      return this\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\dialogs\\BasicBottomSheet.kt"}}
{"prompt": "\n import android.view.View\nfun setNegativeButtonClickListener(\r\n      buttonLabel: String? = null,\r\n      listener: View.OnClickListener\r\n    ): Builder {\r\n      this.negativeButtonClickListener = listener\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/58", "ground_truth": "      this.negativeButtonLabel = buttonLabel\r\n      return this\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\dialogs\\BasicBottomSheet.kt"}}
{"prompt": "\n fun build(): BasicBottomSheet {\r\n      require(message != null) { \"Message needs to be set\" }\r\n      return BasicBottomSheet(\r\n        title,\r\n        message!!,\r\n        positiveButtonLabel,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/59", "ground_truth": "        negativeButtonLabel,\r\n        positiveButtonClickListener,\r\n        negativeButtonClickListener\r\n      )\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\dialogs\\BasicBottomSheet.kt"}}
{"prompt": "\n import app.passwordstore.util.settings.PreferenceKeys.DICEWARE_LENGTH\nimport app.passwordstore.R\nimport androidx.core.content.edit\nprivate fun setPreferences(length: Int, separator: Char) {\r\n    prefs.edit {\r\n      putInt(DICEWARE_LENGTH, length)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/61", "ground_truth": "      putString(DICEWARE_SEPARATOR, separator.toString())\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\dialogs\\DicewarePasswordGeneratorDialogFragment.kt"}}
{"prompt": "\n import app.passwordstore.R\nimport androidx.fragment.app.DialogFragment\nimport androidx.core.os.bundleOf\nimport android.app.Dialog\nfun newInstance(startingDirectory: String): FolderCreationDialogFragment {\r\n      val extras = bundleOf(CURRENT_DIR_EXTRA to startingDirectory)\r\n      val fragment = FolderCreationDialogFragment()\r", "choices": [{"text": "fragment.arguments = extras\r\n      return fragment\r\n}\n"}], "metadata": {"task_id": "Android-Password-Store/62", "ground_truth": "      fragment.arguments = extras\r\n      return fragment\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\dialogs\\FolderCreationDialogFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n    inflater: LayoutInflater,\r\n    container: ViewGroup?,\r\n    savedInstanceState: Bundle?\r\n  ): View? {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\n\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout"}], "metadata": {"task_id": "Android-Password-Store/63", "ground_truth": "    if (savedInstanceState != null) dismiss()\r\n    return inflater.inflate(R.layout.item_create_sheet, container, false)\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\dialogs\\ItemCreationBottomSheet.kt"}}
{"prompt": "\nvar behavior BottomSheetBehavior<FrameLayout>?\nval bottomSheetCallback\n override fun dismiss() {\r", "choices": [{"text": "behavior?.state = BottomSheetBehavior.STATE_COLLAPSED\r\n}\r\noverride fun show() {\r\nbehavior?.state = BottomSheetBehavior.STATE_EXPANDED\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/64", "ground_truth": "    super.dismiss()\r\n    behavior?.removeBottomSheetCallback(bottomSheetCallback)\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\dialogs\\ItemCreationBottomSheet.kt"}}
{"prompt": "\n import app.passwordstore.passgen.random.PasswordOption\nimport app.passwordstore.passgen.random.PasswordGenerator\nimport app.passwordstore.R\nimport androidx.core.content.edit\nimport android.content.Context\nprivate fun setPrefs(ctx: Context, options: List<PasswordOption>, targetLength: Int): Boolean {\r\n    ctx.getSharedPreferences(\"PasswordGenerator\", Context.MODE_PRIVATE).edit {\r\n      for (possibleOption in PasswordOption.entries) {\r\n        putBoolean(possibleOption.key, possibleOption in options)\r", "choices": [{"text": "//        putBoolean(possibleOption.key, possibleOption.value)\r\n      }\r\n      putInt(\"targetLength\", targetLength)\r\n    }\r\n    return true\r\n  }\n"}], "metadata": {"task_id": "Android-Password-Store/68", "ground_truth": "      }\r\n      putInt(\"length\", targetLength)\r\n    }\r\n    return true\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\dialogs\\PasswordGeneratorDialogFragment.kt"}}
{"prompt": "\n import android.content.DialogInterface\nimport android.app.Dialog\noverride fun onCancel(dialog: DialogInterface) {\r", "choices": [{"text": "super.onCancel(dialog)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/69", "ground_truth": "    super.onCancel(dialog)\r\n    finish()\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\dialogs\\TextInputDialog.kt"}}
{"prompt": "\n import androidx.core.os.bundleOf\nimport android.app.Dialog\nfun newInstance(title: String, hint: String? = null): TextInputDialog {\r\n      val args = bundleOf(BUNDLE_KEY_TITLE to title, BUNDLE_KEY_HINT to hint)\r\n      val dialog = TextInputDialog()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/70", "ground_truth": "      dialog.arguments = args\r\n      return dialog\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\dialogs\\TextInputDialog.kt"}}
{"prompt": " import android.view.Menu\nvar passwordList SelectFolderFragment\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r", "choices": [{"text": "menuInflater.inflate(R.menu.menu_main, menu)\r\nreturn true\r\n}\r\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\nwhen (item.itemId) {\r\nR.id.action_settings -> return true\r\nelse -> return super.onOptionsItemSelected(item)\r\n}\r\n}\r\n}\r\nclass SelectFolderFragment : Fragment() {\r\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\nval view = inflater.inflate(R.layout.fragment_"}], "metadata": {"task_id": "Android-Password-Store/71", "ground_truth": "    menuInflater.inflate(R.menu.pgp_handler_select_folder, menu)\r\n    return true\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\folderselect\\SelectFolderActivity.kt"}}
{"prompt": "\n import app.passwordstore.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n    when (item.itemId) {\r\n      android.R.id.home -> {\r\n        setResult(RESULT_CANCELED)\r\n        onBackPressedDispatcher.onBackPressed()\r\n      }\r", "choices": [{"text": "}\r\nreturn super.onOptionsItemSelected(item)\r\n}\n"}], "metadata": {"task_id": "Android-Password-Store/72", "ground_truth": "      R.id.crypto_select -> selectFolder()\r\n      else -> return super.onOptionsItemSelected(item)\r\n    }\r\n    return true\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\folderselect\\SelectFolderActivity.kt"}}
{"prompt": "\n import app.passwordstore.R\nprivate fun selectFolder() {\r\n    intent.putExtra(\"SELECTED_FOLDER_PATH\", passwordList.currentDir.absolutePath)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Android-Password-Store/73", "ground_truth": "    setResult(RESULT_OK, intent)\r\n    finish()\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\folderselect\\SelectFolderActivity.kt"}}
{"prompt": "\n import net.schmizz.sshj.common.SSHException\nimport net.schmizz.sshj.common.DisconnectReason\nimport com.github.michaelbull.result.Err\nimport app.passwordstore.R\nprivate fun isExplicitlyUserInitiatedError(throwable: Throwable): Boolean {\r\n    var cause: Throwable? = throwable\r\n    while (cause != null) {\r\n      if (\r\n        cause is SSHException && cause.disconnectReason == DisconnectReason.AUTH_CANCELLED_BY_USER\r\n      )\r", "choices": [{"text": "\n import net.schmizz.sshj.common.SSHException\nimport net.schmizz.sshj.common.DisconnectReason\nimport com.github.michaelbull.result.Err\nimport app.passwordstore.R\nprivate fun isExplicitlyUserInitiatedError(throwable: Throwable): Boolean {\r\n    var cause: Throwable? = throwable\r\n    while (cause!= null) {\r\n      if (\r\n        cause is SSHException && cause.disconnectReason == DisconnectReason.AUTH_CANCELLED_BY_USER\r\n      )\r\nreturn true\r\n      cause = cause.cause\r\n    }\r\n    return false\r\n  }\n"}], "metadata": {"task_id": "Android-Password-Store/74", "ground_truth": "        return true\r\n      cause = cause.cause\r\n    }\r\n    return false\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\git\\base\\BaseGitActivity.kt"}}
{"prompt": "\n import app.passwordstore.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n    return when (item.itemId) {\r\n      android.R.id.home -> {\r\n        onBackPressedDispatcher.onBackPressed()\r", "choices": [{"text": "true\r\n      }\r\n      else -> super.onOptionsItemSelected(item)\r\n    }\r\n  }\n"}], "metadata": {"task_id": "Android-Password-Store/75", "ground_truth": "        true\r\n      }\r\n      else -> super.onOptionsItemSelected(item)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\git\\config\\GitConfigActivity.kt"}}
{"prompt": "\n import app.passwordstore.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n    return when (item.itemId) {\r\n      android.R.id.home -> {\r\n        onBackPressedDispatcher.onBackPressed()\r", "choices": [{"text": "true\r\n      }\r\n      else -> super.onOptionsItemSelected(item)\r\n    }\r\n  }\n"}], "metadata": {"task_id": "Android-Password-Store/76", "ground_truth": "        true\r\n      }\r\n      else -> super.onOptionsItemSelected(item)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\git\\config\\GitServerConfigActivity.kt"}}
{"prompt": "\n import android.content.Intent\nimport android.content.Context\nfun createCloneIntent(context: Context): Intent {\r\n      return Intent(context, GitServerConfigActivity::class.java).apply {\r", "choices": [{"text": ""}], "metadata": {"task_id": "Android-Password-Store/78", "ground_truth": "        putExtra(\"cloning\", true)\r\n      }\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\git\\config\\GitServerConfigActivity.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n    super.onCreate(savedInstanceState)\r\n    setContentView(binding.root)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Android-Password-Store/79", "ground_truth": "    supportActionBar?.setDisplayHomeAsUpEnabled(true)\r\n    createRecyclerView()\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\git\\log\\GitLogActivity.kt"}}
{"prompt": "\n import android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n    return when (item.itemId) {\r\n      android.R.id.home -> {\r\n        finish()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/80", "ground_truth": "        true\r\n      }\r\n      else -> super.onOptionsItemSelected(item)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\git\\log\\GitLogActivity.kt"}}
{"prompt": "\n import java.util.Locale\nimport java.time.format.FormatStyle\nimport java.time.format.DateTimeFormatter\nimport java.time.Instant\nprivate fun stringFrom(date: Instant): String {\r\n  return DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM)\r\n    .withLocale(Locale.getDefault())\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/82", "ground_truth": "    .withZone(ZoneId.systemDefault())\r\n    .format(date)\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\git\\log\\GitLogAdapter.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n    val inflater = LayoutInflater.from(parent.context)\r", "choices": [{"text": "return ViewHolder(inflater, parent)\r\n}\n"}], "metadata": {"task_id": "Android-Password-Store/83", "ground_truth": "    val binding = GitLogRowLayoutBinding.inflate(inflater, parent, false)\r\n    return ViewHolder(binding)\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\git\\log\\GitLogAdapter.kt"}}
{"prompt": " import app.passwordstore.util.git.GitCommit\nval model\nfun bind(commit: GitCommit) =\r\n      with(binding) {\r\n        gitLogRowMessage.text = commit.shortMessage\r", "choices": [{"text": "//        gitLogRowAuthor.text = commit.author\r\n//        gitLogRowDate.text = commit.date\r\n//        gitLogRowHash.text = commit.hash\r\n//        gitLogRowBranch.text = commit.branch\r\n//        gitLogRowTag.text = commit.tag\r\n//        gitLogRowParent.text = commit.parent\r\n//        gitLogRowParent.text = commit.parent\r\n//        gitLogRowParent.text = commit.parent\r\n//        gitLogRowParent.text = commit.parent\r\n//"}], "metadata": {"task_id": "Android-Password-Store/85", "ground_truth": "        gitLogRowHash.text = shortHash(commit.hash)\r\n        gitLogRowTime.text = stringFrom(commit.time)\r\n      }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\git\\log\\GitLogAdapter.kt"}}
{"prompt": "\n import androidx.activity.addCallback\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n    super.onCreate(savedInstanceState)\r\n    supportActionBar?.hide()\r\n    val callback = onBackPressedDispatcher.addCallback(enabled = false) { finishAffinity() }\r\n    supportFragmentManager.addOnBackStackChangedListener {\r", "choices": [{"text": "//        if (supportFragmentManager.backStackEntryCount == 0) {\r\n//            callback.isEnabled = false\r\n//        } else {\r\n//            callback.isEnabled = true\r\n//        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "Android-Password-Store/86", "ground_truth": "      if (supportFragmentManager.backStackEntryCount == 0) {\r\n        callback.isEnabled = true\r\n      }\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\onboarding\\activity\\OnboardingActivity.kt"}}
{"prompt": "\n import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n    super.onViewCreated(view, savedInstanceState)\r\n    binding.selectKey.setOnClickListener {\r", "choices": [{"text": "//        val intent = Intent(activity, SelectKeyActivity::class.java)\r\n//        startActivity(intent)\r\n        val intent = Intent(activity, SelectKeyActivity::class.java)\r\n        startActivityForResult(intent, 1)\r\n    }\r\n}\n"}], "metadata": {"task_id": "Android-Password-Store/88", "ground_truth": "      gpgKeySelectAction.launch(PGPKeyListActivity.newSelectionActivity(requireContext()))\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\onboarding\\fragments\\KeySelectionFragment.kt"}}
{"prompt": "\n import app.passwordstore.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/90", "ground_truth": "    super.onResume()\r\n    binding.swipeRefresher.isEnabled = !prefs.getBoolean(PreferenceKeys.DISABLE_SYNC_ACTION, false)\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\passwords\\PasswordFragment.kt"}}
{"prompt": "\n import androidx.fragment.app.Fragment\nimport android.os.Bundle\nfun newInstance(args: Bundle): PasswordFragment {\r\n      val fragment = PasswordFragment()\r", "choices": [{"text": "fragment.arguments = args\r\nreturn fragment\r\n}\n"}], "metadata": {"task_id": "Android-Password-Store/92", "ground_truth": "      fragment.arguments = args\r\n      return fragment\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\passwords\\PasswordFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport java.io.File\nimport app.passwordstore.data.repo.PasswordRepository\nimport app.passwordstore.R\nimport androidx.lifecycle.lifecycleScope\nimport androidx.lifecycle.flowWithLifecycle\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n    super.onCreate(savedInstanceState)\r\n    setContentView(R.layout.activity_pwdstore)\r\n\r\n    lifecycleScope.launch {\r\n      model.currentDir.flowWithLifecycle(lifecycle).collect { dir ->\r\n        val basePath = PasswordRepository.getRepositoryDirectory().absoluteFile\r\n        supportActionBar?.apply {\r", "choices": [{"text": "//          title = dir.name\r\n//          subtitle = dir.absolutePath.removePrefix(basePath.absolutePath)\r\n        }\r\n      }\r\n    }\r\n  }\n"}], "metadata": {"task_id": "Android-Password-Store/94", "ground_truth": "          if (dir != basePath) title = dir.name else setTitle(R.string.app_name)\r\n        }\r\n      }\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\passwords\\PasswordStore.kt"}}
{"prompt": "\n import app.passwordstore.util.settings.PreferenceKeys\nimport app.passwordstore.R\noverride fun onResume() {\r\n    super.onResume()\r\n    checkLocalRepository()\r\n    if (settings.getBoolean(PreferenceKeys.SEARCH_ON_START, false) && ::searchItem.isInitialized) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/96", "ground_truth": "      if (!searchItem.isActionViewExpanded) {\r\n        searchItem.expandActionView()\r\n      }\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\passwords\\PasswordStore.kt"}}
{"prompt": "\n import app.passwordstore.R\nprivate fun checkLocalRepository() {\r", "choices": [{"text": "val localRepository = LocalRepository(context)\r\nval localRepository = LocalRepository(context)\r\nval localRepository = LocalRepository(context)\r\nval localRepository = LocalRepository(context)\r\nval localRepository = LocalRepository(context)\r\nval localRepository = LocalRepository(context)\r\nval localRepository = LocalRepository(context)\r\nval localRepository = LocalRepository(context)\r\nval localRepository = LocalRepository(context)\r\nval localRepository = LocalRepository(context)\r\nval localRepository = LocalRepository(context)\r\nval localRepository = LocalRepository"}], "metadata": {"task_id": "Android-Password-Store/99", "ground_truth": "    PasswordRepository.initialize()\r\n    checkLocalRepository(PasswordRepository.getRepositoryDirectory())\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\passwords\\PasswordStore.kt"}}
{"prompt": "\n import app.passwordstore.ui.crypto.DecryptActivity\nimport app.passwordstore.data.password.PasswordItem\nimport android.content.Intent\nimport android.content.ComponentName\nfun decryptPassword(item: PasswordItem) {\r\n    val authDecryptIntent = item.createAuthEnabledIntent(this)\r\n    val decryptIntent =\r\n      Intent(authDecryptIntent).setComponent(ComponentName(this, DecryptActivity::class.java))\r\n\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Android-Password-Store/100", "ground_truth": "    startActivity(decryptIntent)\r\n\r\n    // Adds shortcut\r\n    shortcutHandler.addDynamicShortcut(item, authDecryptIntent)\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\passwords\\PasswordStore.kt"}}
{"prompt": "\n import com.google.android.material.dialog.MaterialAlertDialogBuilder\nimport app.passwordstore.util.extensions.getString\nimport app.passwordstore.data.repo.PasswordRepository\nimport app.passwordstore.R\nprivate fun validateState(): Boolean {\r\n    if (!PasswordRepository.isInitialized) {\r\n      MaterialAlertDialogBuilder(this)\r\n        .setMessage(resources.getString(R.string.creation_dialog_text))\r\n        .setPositiveButton(resources.getString(R.string.dialog_ok), null)\r", "choices": [{"text": "\n import com.google.android.material.dialog.MaterialAlertDialogBuilder\nimport app.passwordstore.util.extensions.getString\nimport app.passwordstore.data.repo.PasswordRepository\nimport app.passwordstore.R\nprivate fun validateState(): Boolean {\r\n    if (!PasswordRepository.isInitialized) {\r\n      MaterialAlertDialogBuilder(this)\r\n       .setMessage(resources.getString(R.string.creation_dialog_text))\r\n       .setPositiveButton(resources.getString(R.string.dialog_ok), null)\r\n//       .setNegativeButton(resources.getString(R.string.dialog_cancel), null)\r\n       .show()\r\n      return false\r\n    }\r\n    return true\r\n  }\n"}], "metadata": {"task_id": "Android-Password-Store/101", "ground_truth": "        .show()\r\n      return false\r\n    }\r\n    return true\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\passwords\\PasswordStore.kt"}}
{"prompt": "\n import com.github.michaelbull.result.fold\nimport app.passwordstore.ui.folderselect.SelectFolderActivity\nimport app.passwordstore.data.password.PasswordItem\nimport android.content.Intent\nfun movePasswords(values: List<PasswordItem>) {\r\n    val intent = Intent(this, SelectFolderActivity::class.java)\r\n    val fileLocations = values.map { it.file.absolutePath }.toTypedArray()\r", "choices": [{"text": "//    intent.putExtra(SelectFolderActivity.EXTRA_FILE_LOCATIONS, fileLocations)\r\n    startActivity(intent)\r\n}\n"}], "metadata": {"task_id": "Android-Password-Store/104", "ground_truth": "    intent.putExtra(\"Files\", fileLocations)\r\n    passwordMoveAction.launch(intent)\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\passwords\\PasswordStore.kt"}}
{"prompt": "\n import app.passwordstore.data.password.PasswordItem\nfun renameCategory(categories: List<PasswordItem>) {\r\n    for (oldCategory in categories) {\r", "choices": [{"text": "-        val newCategory = oldCategory.copy(name = \"New Category\")\r\n+        val newCategory = oldCategory.copy(name = \"New Category\", id = UUID.randomUUID().toString())\r\n         oldCategory.copy(name = \"New Category\")\r\n     }\r\n }\r\n"}], "metadata": {"task_id": "Android-Password-Store/105", "ground_truth": "      renameCategory(oldCategory)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\passwords\\PasswordStore.kt"}}
{"prompt": "\n import app.passwordstore.data.repo.PasswordRepository\nimport app.passwordstore.data.password.PasswordItem\nimport app.passwordstore.R\nfun matchPasswordWithApp(item: PasswordItem) {\r\n    val path =\r\n      item.file.absolutePath\r\n        .replace(PasswordRepository.getRepositoryDirectory().toString() + \"/\", \"\")\r\n        .replace(\".gpg\", \"\")\r", "choices": [{"text": "\n import app.passwordstore.data.repo.PasswordRepository\nimport app.passwordstore.data.password.PasswordItem\nimport app.passwordstore.R\nfun matchPasswordWithApp(item: PasswordItem) {\r\n    val path =\r\n      item.file.absolutePath\r\n       .replace(PasswordRepository.getRepositoryDirectory().toString() + \"/\", \"\")\r\n       .replace(\".gpg\", \"\")\r\n}\n"}], "metadata": {"task_id": "Android-Password-Store/106", "ground_truth": "    val data = Intent()\r\n    data.putExtra(\"path\", path)\r\n    setResult(RESULT_OK, data)\r\n    finish()\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\passwords\\PasswordStore.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval intent = Intent(this, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\nval button = findViewById<Button>(R.id.button)"}], "metadata": {"task_id": "Android-Password-Store/108", "ground_truth": "    super.onCreate(savedInstanceState)\r\n    pgpKeyImportAction.launch(arrayOf(\"*/*\"))\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\pgp\\PGPKeyImportActivity.kt"}}
{"prompt": "\nvar lastBytes ByteArray?\nvar keyManager PGPKeyManager\nval pgpKeyImportAction\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nif (lastBytes!= null) {\r\nkeyManager.importKey(lastBytes!!)\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/109", "ground_truth": "    lastBytes = null\r\n    super.onDestroy()\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\pgp\\PGPKeyImportActivity.kt"}}
{"prompt": "\n import kotlinx.coroutines.runBlocking\nimport app.passwordstore.crypto.PGPKey\nprivate fun importKey(bytes: ByteArray, replace: Boolean): PGPKey? {\r\n    lastBytes = bytes\r\n    val (key, error) = runBlocking { keyManager.addKey(PGPKey(bytes), replace = replace) }\r\n    if (replace) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/110", "ground_truth": "      lastBytes = null\r\n    }\r\n    if (error != null) throw error\r\n    return key\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\pgp\\PGPKeyImportActivity.kt"}}
{"prompt": "\n import app.passwordstore.R\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.TextButton\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.AlertDialog\n\r\n@Suppress(\"NOTHING_TO_INLINE\")\r\n@Composable\r\nprivate inline fun DeleteConfirmationDialog(\r\n  isDeleting: Boolean,\r\n  noinline onDismiss: () -> Unit,\r\n  noinline onConfirm: () -> Unit,\r\n) {\r\n  if (isDeleting) {\r\n    AlertDialog(\r\n      onDismissRequest = onDismiss,\r\n      title = {\r\n        Text(text = stringResource(R.string.pgp_key_manager_delete_confirmation_dialog_title))\r\n      },\r\n      confirmButton = {\r\n        TextButton(onClick = onConfirm) { Text(text = stringResource(R.string.dialog_yes)) }\r\n      },\r\n      dismissButton = {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/111", "ground_truth": "        TextButton(onClick = onDismiss) { Text(text = stringResource(R.string.dialog_no)) }\r\n      },\r\n    )\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\pgp\\PGPKeyList.kt"}}
{"prompt": "\n import kotlinx.collections.immutable.toPersistentList\nimport app.passwordstore.ui.compose.theme.APSThemePreview\nimport app.passwordstore.crypto.PGPIdentifier\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.background\n\r\n@Preview\r\n@Composable\r\nprivate fun KeyListPreview() {\r\n  APSThemePreview {\r\n    Box(modifier = Modifier.background(MaterialTheme.colorScheme.background)) {\r\n      KeyList(\r\n        identifiers =\r\n          listOfNotNull(\r\n              PGPIdentifier.fromString(\"ultramicroscopicsilicovolcanoconiosis@example.com\"),\r\n              PGPIdentifier.fromString(\"0xB950AE2813841585\"),\r\n            )\r\n            .toPersistentList(),\r", "choices": [{"text": "\n import kotlinx.collections.immutable.toPersistentList\nimport app.passwordstore.ui.compose.theme.APSThemePreview\nimport app.passwordstore.crypto.PGPIdentifier\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.background\n\r\n@Preview\r\n@Composable\r\nprivate fun KeyListPreview() {\r\n  APSThemePreview {\r\n    Box(modifier = Modifier.background(MaterialTheme.colorScheme.background)) {\r\n      KeyList(\r\n        identifiers =\r\n          listOfNotNull(\r\n              PGPIdentifier.fromString(\"ultramicroscopicsilicovolcanoconiosis@example.com\"),\r\n              PGPIdentifier.fromString(\"0xB950AE2813841585\"),\r\n            )\r\n           .toPersistentList(),\r\n//        onKeyClick = {},\r\n        modifier = Modifier,\r\n      )\r\n    }\r\n  }\r\n}\r\n<file_sep>/app/src/main/java/app/passwordstore/ui/compose/theme/APSTheme.kt\npackage app.passwordstore.ui.compose.theme\n\nimport androidx.compose.foundation.isSystemInDarkTheme\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.darkColorScheme\nimport androidx.compose.material3.lightColorScheme\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.graphics"}], "metadata": {"task_id": "Android-Password-Store/112", "ground_truth": "        onItemClick = {}\r\n      )\r\n    }\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\pgp\\PGPKeyList.kt"}}
{"prompt": "\n import android.content.Intent\nimport android.content.Context\nfun newSelectionActivity(context: Context): Intent {\r\n      val intent = Intent(context, PGPKeyListActivity::class.java)\r", "choices": [{"text": "//      intent.putExtra(EXTRA_KEY_ID, keyId)\r\n      return intent\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/114", "ground_truth": "      intent.putExtra(EXTRA_KEY_SELECTION, true)\r\n      return intent\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\pgp\\PGPKeyListActivity.kt"}}
{"prompt": "\n import app.passwordstore.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n    when (item.itemId) {\r\n      android.R.id.home -> {\r\n        onBackPressedDispatcher.onBackPressed()\r", "choices": [{"text": "return true\r\n      }\r\n    }\r\n    return super.onOptionsItemSelected(item)\r\n  }\r\n}\n"}], "metadata": {"task_id": "Android-Password-Store/115", "ground_truth": "      }\r\n      else -> return super.onOptionsItemSelected(item)\r\n    }\r\n    return true\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\proxy\\ProxySelectorActivity.kt"}}
{"prompt": "\nval binding\nval passwordSettings\nval autofillSettings\n override fun onStart() {\r", "choices": [{"text": "super.onStart()\r\nval navController = findNavController(R.id.nav_host_fragment)\r\nval appBarConfiguration = AppBarConfiguration(navController.graph)\r\nsetupActionBarWithNavController(navController, appBarConfiguration)\r\n}\r\noverride fun onSupportNavigateUp(): Boolean {\r\nval navController = findNavController(R.id.nav_host_fragment)\r\nreturn navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n}\r\n}\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/117", "ground_truth": "    super.onStart()\r\n    onBackPressedDispatcher.addCallback { isEnabled = !preferencesAdapter.goBack() }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\settings\\SettingsActivity.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r", "choices": [{"text": "super.onSaveInstanceState(outState)\r\noutState.putInt(\"key\", 1)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\nsuper.onRestoreInstanceState(savedInstanceState)\r\nval value = savedInstanceState.getInt(\"key\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/118", "ground_truth": "    super.onSaveInstanceState(outState)\r\n    outState.putParcelable(\"adapter\", preferencesAdapter.getSavedState())\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\settings\\SettingsActivity.kt"}}
{"prompt": "\n import app.passwordstore.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n    return when (item.itemId) {\r\n      android.R.id.home ->\r\n        if (!preferencesAdapter.goBack()) {\r\n          super.onOptionsItemSelected(item)\r\n        } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/119", "ground_truth": "          true\r\n        }\r\n      else -> super.onOptionsItemSelected(item)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\settings\\SettingsActivity.kt"}}
{"prompt": "\n import app.passwordstore.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n    return when (item.itemId) {\r\n      android.R.id.home -> {\r\n        onBackPressedDispatcher.onBackPressed()\r", "choices": [{"text": "true\r\n      }\r\n      else -> super.onOptionsItemSelected(item)\r\n    }\r\n  }\n"}], "metadata": {"task_id": "Android-Password-Store/120", "ground_truth": "        true\r\n      }\r\n      else -> super.onOptionsItemSelected(item)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\sshkeygen\\SshKeyGenActivity.kt"}}
{"prompt": "\n import androidx.core.content.getSystemService\nimport android.view.inputmethod.InputMethodManager\nprivate fun hideKeyboard() {\r\n    val imm = getSystemService<InputMethodManager>() ?: return\r\n    var view = currentFocus\r", "choices": [{"text": "\n import androidx.core.content.getSystemService\nimport android.view.inputmethod.InputMethodManager\nprivate fun hideKeyboard() {\r\n    val imm = getSystemService<InputMethodManager>()?: return\r\n    var view = currentFocus\r\nif (view == null) view = View(this)\r\nimm.hideSoftInputFromWindow(view.windowToken, 0)\r\n}\n"}], "metadata": {"task_id": "Android-Password-Store/121", "ground_truth": "    if (view == null) {\r\n      view = View(this)\r\n    }\r\n    imm.hideSoftInputFromWindow(view.windowToken, 0)\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\sshkeygen\\SshKeyGenActivity.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\nprivate fun dontAnimate(viewHolder: RecyclerView.ViewHolder): Boolean {\r", "choices": [{"text": "return true\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/122", "ground_truth": "    dispatchAnimationFinished(viewHolder)\r\n    return false\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\util\\OnOffItemAnimator.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\noverride fun animateChange(\r\n    oldHolder: RecyclerView.ViewHolder,\r\n    newHolder: RecyclerView.ViewHolder,\r\n    preInfo: ItemHolderInfo,\r\n    postInfo: ItemHolderInfo\r\n  ): Boolean {\r\n    return if (isEnabled) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/124", "ground_truth": "      super.animateChange(oldHolder, newHolder, preInfo, postInfo)\r\n    } else {\r\n      dontAnimate(oldHolder)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\util\\OnOffItemAnimator.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\noverride fun animatePersistence(\r\n    viewHolder: RecyclerView.ViewHolder,\r\n    preInfo: ItemHolderInfo,\r\n    postInfo: ItemHolderInfo\r\n  ): Boolean {\r\n    return if (isEnabled) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/126", "ground_truth": "      super.animatePersistence(viewHolder, preInfo, postInfo)\r\n    } else {\r\n      dontAnimate(viewHolder)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\ui\\util\\OnOffItemAnimator.kt"}}
{"prompt": "\n import com.github.androidpasswordstore.autofillparser.AutofillAction\nimport android.service.autofill.Dataset\nimport android.os.Build\nimport android.content.IntentSender\nimport android.content.Context\n @Suppress(\"DEPRECATION\")\r\n  private fun makeIntentDataset(\r\n    context: Context,\r\n    action: AutofillAction,\r\n    intentSender: IntentSender,\r\n    metadata: DatasetMetadata,\r\n  ): Dataset {\r\n    return Dataset.Builder(makeRemoteView(context, metadata)).run {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/128", "ground_truth": "      fillWith(scenario, action, credentials = null)\r\n      setAuthentication(intentSender)\r\n      build()\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\Api26AutofillResponseBuilder.kt"}}
{"prompt": "\n import android.service.autofill.SaveInfo\nprivate fun makeSaveInfo(): SaveInfo? {\r\n    if (!canBeSaved) return null\r\n    check(saveFlags != null) { \"saveFlags must not be null\" }\r\n    val idsToSave = scenario.fieldsToSave.toTypedArray()\r\n    if (idsToSave.isEmpty()) return null\r\n    var saveDataTypes = SaveInfo.SAVE_DATA_TYPE_PASSWORD\r\n    if (scenario.hasUsername) {\r\n      saveDataTypes = saveDataTypes or SaveInfo.SAVE_DATA_TYPE_USERNAME\r\n    }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/134", "ground_truth": "    return SaveInfo.Builder(saveDataTypes, idsToSave).run {\r\n      setFlags(saveFlags)\r\n      build()\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\Api26AutofillResponseBuilder.kt"}}
{"prompt": "\n import com.github.androidpasswordstore.autofillparser.fillWith\nimport com.github.androidpasswordstore.autofillparser.AutofillAction\nimport android.widget.inline.InlinePresentationSpec\nimport android.service.autofill.Dataset\nimport android.os.Build\nimport android.content.IntentSender\nimport android.content.Context\n @Suppress(\"DEPRECATION\")\r\n  private fun makeIntentDataSetR(\r\n    context: Context,\r\n    action: AutofillAction,\r\n    intentSender: IntentSender,\r\n    metadata: DatasetMetadata,\r\n    imeSpec: InlinePresentationSpec?,\r\n  ): Dataset {\r\n    return Dataset.Builder(makeRemoteView(context, metadata)).run {\r\n      fillWith(scenario, action, credentials = null)\r\n      setAuthentication(intentSender)\r\n      if (imeSpec != null) {\r\n        val inlinePresentation = makeInlinePresentation(context, imeSpec, metadata)\r\n        if (inlinePresentation != null) {\r\n          setInlinePresentation(inlinePresentation)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/137", "ground_truth": "        }\r\n      }\r\n      build()\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\Api30AutofillResponseBuilder.kt"}}
{"prompt": "\n import com.github.androidpasswordstore.autofillparser.AutofillAction\nimport app.passwordstore.autofill.oreo.ui.AutofillSmsActivity\nimport android.widget.inline.InlinePresentationSpec\nimport android.service.autofill.Dataset\nimport android.content.IntentSender\nimport android.content.Context\nprivate fun makeFillOtpFromSmsDataset(\r\n    context: Context,\r\n    imeSpec: InlinePresentationSpec?\r\n  ): Dataset? {\r\n    if (!scenario.hasFieldsToFillOn(AutofillAction.FillOtpFromSms)) return null\r\n    if (!AutofillSmsActivity.shouldOfferFillFromSms(context)) return null\r\n    val metadata = makeFillOtpFromSmsMetadata(context)\r\n    val intentSender = AutofillSmsActivity.makeFillOtpFromSmsIntentSender(context)\r\n    return makeIntentDataset(\r\n      context,\r\n      AutofillAction.FillOtpFromSms,\r", "choices": [{"text": "//      imeSpec,\r\n      metadata,\r\n      intentSender\r\n    )\r\n  }\n<file_sep>/app/src/main/java/app/passwordstore/autofill/oreo/ui/AutofillSmsActivity.kt\npackage app.passwordstore.autofill.oreo.ui\n\nimport android.app.Activity\nimport android.content.Context\nimport android.content.Intent\nimport android.content.IntentSender\nimport android.os.Bundle\nimport android.service.autofill.Dataset\nimport android.service.autofill.FillResponse\nimport android.service.autofill.FillSession"}], "metadata": {"task_id": "Android-Password-Store/141", "ground_truth": "      intentSender,\r\n      metadata,\r\n      imeSpec\r\n    )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\Api30AutofillResponseBuilder.kt"}}
{"prompt": "\n import android.service.autofill.SaveInfo\nprivate fun makeSaveInfo(): SaveInfo? {\r\n    if (!canBeSaved) return null\r\n    check(saveFlags != null) { \"saveFlags must not be null\" }\r\n    val idsToSave = scenario.fieldsToSave.toTypedArray()\r\n    if (idsToSave.isEmpty()) return null\r\n    var saveDataTypes = SaveInfo.SAVE_DATA_TYPE_PASSWORD\r\n    if (scenario.hasUsername) {\r\n      saveDataTypes = saveDataTypes or SaveInfo.SAVE_DATA_TYPE_USERNAME\r\n    }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/143", "ground_truth": "    return SaveInfo.Builder(saveDataTypes, idsToSave).run {\r\n      setFlags(saveFlags)\r\n      build()\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\Api30AutofillResponseBuilder.kt"}}
{"prompt": "\n import com.github.androidpasswordstore.autofillparser.FormOrigin\nimport android.content.SharedPreferences\nimport android.content.Context\nprivate fun Context.matchPreferences(formOrigin: FormOrigin): SharedPreferences {\r\n  return when (formOrigin) {\r\n    is FormOrigin.App -> autofillAppMatches\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/145", "ground_truth": "    is FormOrigin.Web -> autofillWebMatches\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\AutofillMatcher.kt"}}
{"prompt": "\n import com.github.androidpasswordstore.autofillparser.FormOrigin\nimport androidx.core.content.edit\nimport android.content.Context\nfun clearMatchesFor(context: Context, formOrigin: FormOrigin) {\r\n      context.matchPreferences(formOrigin).edit {\r\n        remove(matchesKey(formOrigin))\r", "choices": [{"text": "}\r\n}\n"}], "metadata": {"task_id": "Android-Password-Store/147", "ground_truth": "        if (formOrigin is FormOrigin.App) remove(tokenKey(formOrigin))\r\n      }\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\AutofillMatcher.kt"}}
{"prompt": "\n import app.passwordstore.R\nimport android.widget.RemoteViews\nimport android.view.View\nimport android.content.res.Resources\nimport android.content.Context\nfun makeRemoteView(context: Context, metadata: DatasetMetadata): RemoteViews {\r\n  return RemoteViews(context.packageName, R.layout.oreo_autofill_dataset).apply {\r\n    setTextViewText(R.id.title, metadata.title)\r\n    if (metadata.subtitle != null) {\r\n      setTextViewText(R.id.summary, metadata.subtitle)\r\n    } else {\r\n      setViewVisibility(R.id.summary, View.GONE)\r\n    }\r\n    if (metadata.iconRes != Resources.ID_NULL) {\r\n      setImageViewResource(R.id.icon, metadata.iconRes)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/150", "ground_truth": "    } else {\r\n      setViewVisibility(R.id.icon, View.GONE)\r\n    }\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\AutofillViewUtils.kt"}}
{"prompt": "\n import app.passwordstore.R\nimport android.content.Context\nfun makeSearchAndFillMetadata(context: Context) =\r\n  DatasetMetadata(\r\n    context.getString(R.string.oreo_autofill_search_in_store),\r", "choices": [{"text": "//    context.getString(R.string.oreo_autofill_search_in_store_description),\r\n    context.getString(R.string.search_in_store_description),\r\n    context.getString(R.string.search_in_store_description_2),\r\n    context.getString(R.string.search_in_store_description_3),\r\n    context.getString(R.string.search_in_store_description_4),\r\n    context.getString(R.string.search_in_store_description_5),\r\n    context.getString(R.string.search_"}], "metadata": {"task_id": "Android-Password-Store/152", "ground_truth": "    null,\r\n    R.drawable.ic_search_black_24dp\r\n  )", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\AutofillViewUtils.kt"}}
{"prompt": "\n import app.passwordstore.R\nimport android.content.Context\nfun makeGenerateAndFillMetadata(context: Context) =\r\n  DatasetMetadata(\r\n    context.getString(R.string.oreo_autofill_generate_password),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/153", "ground_truth": "    null,\r\n    R.drawable.ic_autofill_new_password\r\n  )", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\AutofillViewUtils.kt"}}
{"prompt": "\n import app.passwordstore.R\nimport android.content.Context\nfun makeFillOtpFromSmsMetadata(context: Context) =\r\n  DatasetMetadata(\r\n    context.getString(R.string.oreo_autofill_fill_otp_from_sms),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/154", "ground_truth": "    null,\r\n    R.drawable.ic_autofill_sms\r\n  )", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\AutofillViewUtils.kt"}}
{"prompt": "\n import app.passwordstore.R\nimport android.content.Context\nfun makeWarningMetadata(context: Context) =\r\n  DatasetMetadata(\r\n    context.getString(R.string.oreo_autofill_warning_publisher_dataset_title),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/155", "ground_truth": "    context.getString(R.string.oreo_autofill_warning_publisher_dataset_summary),\r\n    R.drawable.ic_warning_red_24dp\r\n  )", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\autofill\\AutofillViewUtils.kt"}}
{"prompt": "\n import android.util.TypedValue\nimport android.content.Context\nfun Context.resolveAttribute(attr: Int): Int {\r\n  val typedValue = TypedValue()\r", "choices": [{"text": "//  this.theme.resolveAttribute(attr, typedValue, true)\r\n  return typedValue.data\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/157", "ground_truth": "  this.theme.resolveAttribute(attr, typedValue, true)\r\n  return typedValue.data\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\extensions\\AndroidExtensions.kt"}}
{"prompt": "\n import com.google.android.material.snackbar.Snackbar\nimport app.passwordstore.R\nimport androidx.fragment.app.FragmentActivity\nimport android.view.View\nfun FragmentActivity.snackbar(\r\n  view: View = findViewById(android.R.id.content),\r\n  message: String,\r\n  length: Int = Snackbar.LENGTH_SHORT,\r\n): Snackbar {\r\n  val snackbar = Snackbar.make(view, message, length)\r\n  snackbar.anchorView = findViewById(R.id.fab)\r", "choices": [{"text": "//  snackbar.setAction(\"Action\", null)\r\n  snackbar.show()\r\n  return snackbar\r\n}<file_sep>/app/src/main/java/app/passwordstore/ui/main/MainViewModel.kt\npackage app.passwordstore.ui.main\n\nimport android.app.Application\nimport androidx.lifecycle.AndroidViewModel\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.viewModelScope\nimport app.passwordstore.data.Password\nimport app.passwordstore.data.PasswordRepository\nimport app.passwordstore.data.Password"}], "metadata": {"task_id": "Android-Password-Store/158", "ground_truth": "  snackbar.show()\r\n  return snackbar\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\extensions\\AndroidExtensions.kt"}}
{"prompt": "\n import androidx.compose.ui.Modifier\nfun Modifier.conditional(isEnabled: Boolean, modifier: Modifier.() -> Modifier): Modifier {\r\n  return if (isEnabled) {\r", "choices": [{"text": "+    this.then(modifier)\r\n+  } else {\r\n+    this\r\n  }\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/161", "ground_truth": "    then(modifier())\r\n  } else {\r\n    this\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\extensions\\AndroidExtensions.kt"}}
{"prompt": "\n import app.passwordstore.R\nimport androidx.fragment.app.commit\nimport androidx.fragment.app.FragmentManager\nimport androidx.fragment.app.Fragment\nimport androidx.annotation.IdRes\nfun FragmentManager.performTransactionWithBackStack(\r\n  destinationFragment: Fragment,\r\n  @IdRes containerViewId: Int = android.R.id.content\r\n) {\r\n  commit {\r\n    addToBackStack(destinationFragment.tag)\r\n    setCustomAnimations(\r\n      R.animator.slide_in_left,\r\n      R.animator.slide_out_left,\r\n      R.animator.slide_in_right,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/163", "ground_truth": "      R.animator.slide_out_right\r\n    )\r\n    replace(containerViewId, destinationFragment)\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\extensions\\FragmentExtensions.kt"}}
{"prompt": "\n import kotlin.reflect.KProperty\nimport androidx.lifecycle.LifecycleOwner\nimport androidx.lifecycle.Lifecycle\nimport androidx.fragment.app.Fragment\noverride fun getValue(thisRef: Fragment, property: KProperty<*>): T {\r\n    val binding = binding\r\n    if (binding != null) {\r\n      return binding\r\n    }\r\n\r\n    val lifecycle = fragment.viewLifecycleOwner.lifecycle\r\n    if (!lifecycle.currentState.isAtLeast(Lifecycle.State.INITIALIZED)) {\r\n      throw IllegalStateException(\r\n        \"Should not attempt to get bindings when Fragment views are destroyed.\"\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/164", "ground_truth": "      )\r\n    }\r\n\r\n    return viewBindingFactory(thisRef.requireView()).also { this.binding = it }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\extensions\\FragmentViewBindingDelegate.kt"}}
{"prompt": "\n private fun rootCause(throwable: Throwable): Throwable {\r\n    var cause = throwable\r\n    while (cause.cause != null) {\r\n      if (cause is GitException) break\r\n      val nextCause = cause.cause!!\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/166", "ground_truth": "      if (nextCause is RemoteException) break\r\n      cause = nextCause\r\n    }\r\n    return cause\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\ErrorMessages.kt"}}
{"prompt": "\n import org.eclipse.jgit.revwalk.RevCommit\nimport org.eclipse.jgit.api.Git\nimport logcat.logcat\nimport logcat.LogPriority.ERROR\nimport com.github.michaelbull.result.runCatching\nimport app.passwordstore.data.repo.PasswordRepository\nprivate fun commits(): Iterable<RevCommit> {\r\n  val repo = PasswordRepository.repository\r\n  if (repo == null) {\r\n    logcat(TAG, ERROR) { \"Could not access git repository\" }\r\n    return listOf()\r\n  }\r\n  return runCatching { Git(repo).log().call() }\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Android-Password-Store/167", "ground_truth": "    .getOrElse { e ->\r\n      logcat(TAG, ERROR) { e.asLog(\"Failed to obtain git commits\") }\r\n      listOf()\r\n    }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\GitLogModel.kt"}}
{"prompt": "\n import org.eclipse.jgit.transport.URIish\nimport org.eclipse.jgit.transport.CredentialItem\nimport app.passwordstore.R\noverride fun get(uri: URIish?, vararg items: CredentialItem): Boolean {\r\n      for (item in items) {\r\n        when (item) {\r\n          is CredentialItem.Username -> item.value = uri?.user\r\n          is CredentialItem.Password -> {\r\n            item.value =\r\n              cachedPassword?.clone()\r\n                ?: passwordFinder.reqPassword(null).also { cachedPassword = it.clone() }\r\n          }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/169", "ground_truth": "          else -> UnsupportedCredentialItem(uri, item.javaClass.name)\r\n        }\r\n      }\r\n      return true\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\operation\\GitOperation.kt"}}
{"prompt": " import org.eclipse.jgit.transport.URIish\nimport app.passwordstore.R\nval repository\nval commands Array<GitCommand<out Any>>\nval git\noverride fun reset(uri: URIish?) {\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Android-Password-Store/170", "ground_truth": "      cachedPassword?.fill(0.toChar())\r\n      cachedPassword = null\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\operation\\GitOperation.kt"}}
{"prompt": "\n import org.eclipse.jgit.api.GitCommand\nimport org.eclipse.jgit.api.Git\nimport com.github.michaelbull.result.Result\nimport com.github.michaelbull.result.Ok\nimport app.passwordstore.util.git.GitCommandExecutor\nimport app.passwordstore.R\nsuspend fun execute(): Result<Unit, Throwable> {\r\n    if (!preExecute()) {\r\n      return Ok(Unit)\r\n    }\r\n    val operationResult =\r\n      GitCommandExecutor(\r\n          callingActivity,\r\n          this,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/173", "ground_truth": "        )\r\n        .execute()\r\n    postExecute()\r\n    return operationResult\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\operation\\GitOperation.kt"}}
{"prompt": "\n import com.hierynomus.sshj.key.KeyAlgorithms\nprivate fun initKeyAlgorithms() {\r\n    keyAlgorithms =\r\n      listOf(\r\n        KeyAlgorithms.SSHRSACertV01(),\r\n        KeyAlgorithms.EdDSA25519(),\r\n        KeyAlgorithms.ECDSASHANistp521(),\r\n        KeyAlgorithms.ECDSASHANistp384(),\r\n        KeyAlgorithms.ECDSASHANistp256(),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/175", "ground_truth": "        KeyAlgorithms.RSASHA512(),\r\n        KeyAlgorithms.RSASHA256(),\r\n        KeyAlgorithms.SSHRSA(),\r\n      )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\sshj\\SshjConfig.kt"}}
{"prompt": "\n import com.hierynomus.sshj.userauth.keyprovider.OpenSSHKeyV1KeyFile\nprivate fun initFileKeyProviderFactories() {\r\n    fileKeyProviderFactories =\r\n      listOf(\r\n        OpenSSHKeyV1KeyFile.Factory(),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/176", "ground_truth": "        PKCS8KeyFile.Factory(),\r\n        OpenSSHKeyFile.Factory(),\r\n        PuTTYKeyFile.Factory(),\r\n      )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\sshj\\SshjConfig.kt"}}
{"prompt": "\n import com.hierynomus.sshj.transport.cipher.GcmCiphers\nprivate fun initCipherFactories() {\r\n    cipherFactories =\r\n      listOf(\r\n        GcmCiphers.AES128GCM(),\r\n        GcmCiphers.AES256GCM(),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/177", "ground_truth": "        BlockCiphers.AES256CTR(),\r\n        BlockCiphers.AES192CTR(),\r\n        BlockCiphers.AES128CTR(),\r\n      )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\sshj\\SshjConfig.kt"}}
{"prompt": "\n import com.hierynomus.sshj.transport.mac.Macs\nprivate fun initMACFactories() {\r\n    macFactories =\r\n      listOf(\r\n        Macs.HMACSHA2512Etm(),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/178", "ground_truth": "        Macs.HMACSHA2256Etm(),\r\n        Macs.HMACSHA2512(),\r\n        Macs.HMACSHA2256(),\r\n      )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\sshj\\SshjConfig.kt"}}
{"prompt": "\n private fun initCompressionFactories() {\r\n    compressionFactories =\r\n      listOf(\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/179", "ground_truth": "        NoneCompression.Factory(),\r\n      )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\sshj\\SshjConfig.kt"}}
{"prompt": "\n override fun disconnect() {\r", "choices": [{"text": "//    TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\r\n}\r\n\r\noverride fun getConnection(): Connection {\r\n//    TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\r\n}\r\n\r\noverride fun getConnection(username: String?, password: String?): Connection {\r\n//    TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\r\n}\r\n\r\noverride fun getConnection(username: String?, password: String?, database: String?): Connection {\r"}], "metadata": {"task_id": "Android-Password-Store/183", "ground_truth": "    currentCommand?.close()\r\n    currentCommand = null\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\sshj\\SshjSessionFactory.kt"}}
{"prompt": "\nvar ssh SSHClient\nval uri\nvar currentCommand Session?\n fun close() {\r", "choices": [{"text": "ssh.close()\r\n}\r\nfun connect(host: String, port: Int, username: String, password: String) {\r\nuri = URI(\"ssh://$username@$host:$port\")\r\nssh = SSHClient(uri)\r\nssh.addHostKeyVerifier(HostKeyVerifier.acceptAll())\r\nssh.connect()\r\nssh.authPassword(password)\r\n}\r\nfun execute(command: String): String {\r\nval session = ssh.startSession()\r\ncurrentCommand = session\r\nsession.allocateDefaultPTY()\r\nsession"}], "metadata": {"task_id": "Android-Password-Store/184", "ground_truth": "    disconnect()\r\n    ssh.close()\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\sshj\\SshjSessionFactory.kt"}}
{"prompt": " import java.util.concurrent.TimeUnit\nvar isRetry\nval uri\nvar currentCommand Session?\noverride fun waitFor(): Int {\r\n    command.join(timeout, TimeUnit.SECONDS)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Android-Password-Store/185", "ground_truth": "    command.close()\r\n    return exitValue()\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\sshj\\SshjSessionFactory.kt"}}
{"prompt": "\n import net.schmizz.sshj.common.Buffer\nimport java.security.PublicKey\nfun toSshPublicKey(publicKey: PublicKey): String {\r\n  val rawPublicKey = Buffer.PlainBuffer().putPublicKey(publicKey).compactData\r", "choices": [{"text": "return \"ssh-rsa ${rawPublicKey.toBase64String()}\"\r\n}\n"}], "metadata": {"task_id": "Android-Password-Store/187", "ground_truth": "  val keyType = KeyType.fromKey(publicKey)\r\n  return \"$keyType ${Base64.encodeToString(rawPublicKey, Base64.NO_WRAP)}\"\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\git\\sshj\\SshKey.kt"}}
{"prompt": "\n import kotlin.time.measureTime\ninline fun <T> logExecutionTime(tag: String, crossinline block: () -> T): T {\r\n  val res: T\r\n  val duration = measureTime { res = block() }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/195", "ground_truth": "  logcat(tag) { \"Finished in ${duration.inWholeMilliseconds}ms\" }\r\n  return res\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\Perf.kt"}}
{"prompt": "\n import android.os.Looper\n\r\n@Suppress(\"NOTHING_TO_INLINE\")\r\ninline fun checkMainThread() {\r\n  require(Looper.myLooper() != Looper.getMainLooper()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/196", "ground_truth": "    \"This operation must not run on the main thread\"\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\Perf.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/197", "ground_truth": "    scope.cancel()\r\n    super.onDestroy()\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\services\\ClipboardService.kt"}}
{"prompt": "\n import kotlinx.coroutines.isActive\nprivate suspend fun startTimer(showTime: Int) {\r\n    var current = 0\r\n    while (scope.isActive && current < showTime) {\r", "choices": [{"text": "//        delay(1000)\r\n        current++\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/198", "ground_truth": "      // Block for 1s or until cancel is signalled\r\n      current++\r\n      delay(1000)\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\services\\ClipboardService.kt"}}
{"prompt": "\nvar responseBuilderFactory AutofillResponseBuilder.Factory\nval DENYLISTED_PACKAGES\nval DISABLE_AUTOFILL_DURATION_MS\n override fun onCreate() {\r", "choices": [{"text": "super.onCreate()\r\nresponseBuilderFactory = AutofillResponseBuilder.Factory(this)\r\n}\r\noverride fun onBind(intent: Intent): IBinder? {\r\nreturn binder\r\n}\r\noverride fun onUnbind(intent: Intent): Boolean {\r\nreturn true\r\n}\r\noverride fun onRebind(intent: Intent) {\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\n}\r\noverride fun dump(fd: FileDescriptor, writer: PrintWriter, args: Array<String>) {\r\nwriter.println(\"Aut"}], "metadata": {"task_id": "Android-Password-Store/201", "ground_truth": "    super.onCreate()\r\n    cachePublicSuffixList(applicationContext)\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\services\\OreoAutofillService.kt"}}
{"prompt": "\n import app.passwordstore.util.settings.PreferenceKeys\nimport app.passwordstore.util.extensions.sharedPrefs\nimport app.passwordstore.util.extensions.getString\nimport app.passwordstore.R\nimport android.content.Context\nfun Context.getCustomSuffixes(): Sequence<String> {\r\n  return sharedPrefs\r\n    .getString(PreferenceKeys.OREO_AUTOFILL_CUSTOM_PUBLIC_SUFFIXES)\r", "choices": [{"text": "\n import app.passwordstore.util.settings.PreferenceKeys\nimport app.passwordstore.util.extensions.sharedPrefs\nimport app.passwordstore.util.extensions.getString\nimport app.passwordstore.R\nimport android.content.Context\nfun Context.getCustomSuffixes(): Sequence<String> {\r\n  return sharedPrefs\r\n   .getString(PreferenceKeys.OREO_AUTOFILL_CUSTOM_PUBLIC_SUFFIXES)\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/202", "ground_truth": "    ?.splitToSequence('\\n')\r\n    ?.filter { it.isNotBlank() && it.first() != '.' && it.last() != '.' } ?: emptySequence()\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\services\\OreoAutofillService.kt"}}
{"prompt": "\n import androidx.documentfile.provider.DocumentFile\nprivate fun copyDirToDir(sourceDirectory: DocumentFile, targetDirectory: DocumentFile) {\r\n    sourceDirectory.listFiles().forEach { file ->\r\n      if (file.isDirectory) {\r\n        // Create new directory and recurse\r\n        val newDir = targetDirectory.createDirectory(file.name!!)\r\n        copyDirToDir(file, newDir!!)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/203", "ground_truth": "      } else {\r\n        copyFileToDir(file, targetDirectory)\r\n      }\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\services\\PasswordExportService.kt"}}
{"prompt": "\n import app.passwordstore.R\nimport androidx.core.app.NotificationCompat\nimport android.app.NotificationChannel\nprivate fun createNotification() {\r\n    createNotificationChannel()\r\n\r\n    val notification =\r\n      NotificationCompat.Builder(this, CHANNEL_ID)\r\n        .setContentTitle(getString(R.string.app_name))\r\n        .setContentText(getString(R.string.exporting_passwords))\r\n        .setSmallIcon(R.drawable.ic_round_import_export)\r", "choices": [{"text": "\n import app.passwordstore.R\nimport androidx.core.app.NotificationCompat\nimport android.app.NotificationChannel\nprivate fun createNotification() {\r\n    createNotificationChannel()\r\n\r\n    val notification =\r\n      NotificationCompat.Builder(this, CHANNEL_ID)\r\n       .setContentTitle(getString(R.string.app_name))\r\n       .setContentText(getString(R.string.exporting_passwords))\r\n       .setSmallIcon(R.drawable.ic_round_import_export)\r\n//       .setPriority(NotificationCompat.PRIORITY_HIGH)\r\n       .build()\r\n\r\n    startForeground(NOTIFICATION_ID, notification)\r\n  }\r\n\r\n  private fun createNotificationChannel() {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n      val name = getString(R.string.app_name)\r\n      val descriptionText = getString(R.string.exporting_passwords)\r\n      val importance = NotificationManager.IMPORTANCE_DEFAULT\r\n      val channel = NotificationChannel(CHANNEL_ID, name, importance).apply {\r\n        description = descriptionText\r\n      }\r\n      val notificationManager:"}], "metadata": {"task_id": "Android-Password-Store/204", "ground_truth": "        .setPriority(NotificationCompat.PRIORITY_LOW)\r\n        .build()\r\n\r\n    startForeground(2, notification)\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\services\\PasswordExportService.kt"}}
{"prompt": "\n import com.github.michaelbull.result.get\nimport androidx.core.content.edit\nimport android.content.SharedPreferences\nprivate fun migrateToClipboardHistory(sharedPrefs: SharedPreferences) {\r\n  if (sharedPrefs.contains(PreferenceKeys.CLEAR_CLIPBOARD_20X)) {\r\n    sharedPrefs.edit {\r\n      putBoolean(\r\n        PreferenceKeys.CLEAR_CLIPBOARD_HISTORY,\r\n        sharedPrefs.getBoolean(PreferenceKeys.CLEAR_CLIPBOARD_20X, false)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/209", "ground_truth": "      )\r\n      remove(PreferenceKeys.CLEAR_CLIPBOARD_20X)\r\n    }\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\settings\\Migrations.kt"}}
{"prompt": "\n import com.github.michaelbull.result.get\nimport app.passwordstore.util.extensions.getString\nimport androidx.core.content.edit\nimport android.content.SharedPreferences\nprivate fun migrateToDiceware(sharedPrefs: SharedPreferences) {\r\n  if (sharedPrefs.contains(PreferenceKeys.PREF_KEY_PWGEN_TYPE)) {\r\n    sharedPrefs.edit {\r\n      if (sharedPrefs.getString(PreferenceKeys.PREF_KEY_PWGEN_TYPE) == \"xkpasswd\") {\r", "choices": [{"text": "//        val newType = sharedPrefs.getString(PreferenceKeys.PREF_KEY_PWGEN_TYPE)?: \"diceware\"\r\n        putString(PreferenceKeys.PREF_KEY_PWGEN_TYPE, \"diceware\")\r\n      }\r\n    }\r\n  }\r\n}\n"}], "metadata": {"task_id": "Android-Password-Store/210", "ground_truth": "        putString(PreferenceKeys.PREF_KEY_PWGEN_TYPE, \"diceware\")\r\n      }\r\n    }\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\settings\\Migrations.kt"}}
{"prompt": "\n import com.github.michaelbull.result.get\nimport androidx.core.content.edit\nimport android.content.SharedPreferences\nprivate fun removeExternalStorageProperties(prefs: SharedPreferences) {\r\n  prefs.edit {\r\n    if (prefs.contains(PreferenceKeys.GIT_EXTERNAL)) {\r\n      if (prefs.getBoolean(PreferenceKeys.GIT_EXTERNAL, false)) {\r\n        putBoolean(PreferenceKeys.GIT_EXTERNAL_MIGRATED, true)\r\n      }\r\n      remove(PreferenceKeys.GIT_EXTERNAL)\r\n    }\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Android-Password-Store/211", "ground_truth": "    if (prefs.contains(PreferenceKeys.GIT_EXTERNAL_REPO)) {\r\n      remove(PreferenceKeys.GIT_EXTERNAL_REPO)\r\n    }\r\n  }\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\settings\\Migrations.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport app.passwordstore.crypto.PGPIdentifier\nimport androidx.lifecycle.viewModelScope\nfun deleteKey(identifier: PGPIdentifier) {\r\n    viewModelScope.launch {\r\n      keyManager.removeKey(identifier)\r", "choices": [{"text": "}\r\n}\n"}], "metadata": {"task_id": "Android-Password-Store/216", "ground_truth": "      updateKeySet()\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\viewmodel\\PGPKeyListViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.filter\nimport app.passwordstore.data.password.PasswordItem\nprivate fun PasswordItem.fuzzyMatch(filter: String): Int {\r", "choices": [{"text": "val filter = filter.toLowerCase()\r\nval name = name.toLowerCase()\r\nval username = username.toLowerCase()\r\nval password = <PASSWORD>()\r\nval notes = notes.toLowerCase()\r\nval tags = tags.toLowerCase()\r\nval category = category.toLowerCase()\r\nval website = website.toLowerCase()\r\nval email = email.toLowerCase()\r\nval phone = phone.toLowerCase()\r\nval address = address.toLowerCase()\r\nval city = city.toLowerCase()\r\nval state = state.toLowerCase()\r\nval zip = zip.toLowerCase()\r\nval country"}], "metadata": {"task_id": "Android-Password-Store/217", "ground_truth": "  val (_, score) = Fuzzy.fuzzyMatch(filter, longName)\r\n  return score\r\n}", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\viewmodel\\SearchableRepositoryViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.filter\nimport java.io.File\nprivate fun makeSearchAction(\r\n    baseDirectory: File,\r\n    filter: String,\r\n    filterMode: FilterMode,\r\n    searchMode: SearchMode,\r\n    listMode: ListMode\r\n  ): SearchAction {\r\n    return SearchAction(\r\n      baseDirectory = baseDirectory,\r\n      filter = filter,\r\n      filterMode = filterMode,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/218", "ground_truth": "      searchMode = searchMode,\r\n      listMode = listMode,\r\n      updateCounter = updateCounter\r\n    )\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\viewmodel\\SearchableRepositoryViewModel.kt"}}
{"prompt": "\n import java.io.File\nprivate fun shouldTake(file: File) =\r\n    with(file) {\r\n      if (showHiddenContents) {\r\n        return !file.name.startsWith(\".git\")\r\n      }\r\n      if (isDirectory) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/219", "ground_truth": "        !isHidden\r\n      } else {\r\n        !isHidden && file.extension == \"gpg\"\r\n      }\r\n    }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\viewmodel\\SearchableRepositoryViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.drop\nimport kotlinx.coroutines.flow.asFlow\nimport kotlinx.coroutines.flow.Flow\nimport java.io.File\nprivate fun listFilesRecursively(dir: File): Flow<File> {\r\n    return dir\r\n      // Take top directory even if it is hidden.\r\n      .walkTopDown()\r\n      .onEnter { file -> file == dir || shouldTake(file) }\r\n      .asFlow()\r\n      // Skip the root directory\r\n      .drop(1)\r\n      .map {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/220", "ground_truth": "        yield()\r\n        it\r\n      }\r\n      .filter(::shouldTake)\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\viewmodel\\SearchableRepositoryViewModel.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nimport android.os.Parcelable\nfun navigateBack(): Parcelable? {\r\n    if (!canNavigateBack) return null\r\n    val (oldDir, oldRecyclerViewState) = navigationStack.removeFirst()\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Android-Password-Store/221", "ground_truth": "    navigateTo(oldDir, pushPreviousLocation = false)\r\n    return oldRecyclerViewState\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\viewmodel\\SearchableRepositoryViewModel.kt"}}
{"prompt": "\nvar _updateCounter\nval updateCounter Int\nval root\n fun reset() {\r\n    navigationStack.clear()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Android-Password-Store/222", "ground_truth": "    forceUpdateOnNextSearchAction()\r\n    navigateTo(pushPreviousLocation = false)\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\viewmodel\\SearchableRepositoryViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.flow.filter\nimport kotlinx.coroutines.flow.Flow\nimport java.io.File\nimport com.github.androidpasswordstore.sublimefuzzy.Fuzzy\nfun search(\r\n    filter: String,\r\n    baseDirectory: File? = null,\r\n    filterMode: FilterMode = FilterMode.Fuzzy,\r\n    searchMode: SearchMode? = null,\r\n    listMode: ListMode = ListMode.AllEntries\r\n  ) {\r\n    require(baseDirectory?.isDirectory != false) { \"Can only search in a directory\" }\r\n    searchActionFlow.update {\r\n      makeSearchAction(\r\n        filter = filter,\r\n        baseDirectory = baseDirectory ?: _currentDir.value,\r\n        filterMode = filterMode,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Android-Password-Store/223", "ground_truth": "        searchMode = searchMode ?: defaultSearchMode,\r\n        listMode = listMode\r\n      )\r\n    }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\viewmodel\\SearchableRepositoryViewModel.kt"}}
{"prompt": "\nval searchActionFlow\nvar _updateCounter\nval updateCounter Int\n fun forceRefresh() {\r", "choices": [{"text": "_updateCounter = 0\r\n}\r\nfun updateCounter() {\r\n_updateCounter++\r\n}\r\nfun getUpdateCounter() = _updateCounter\r\n}\r\n"}], "metadata": {"task_id": "Android-Password-Store/224", "ground_truth": "    forceUpdateOnNextSearchAction()\r\n    searchActionFlow.update { updateSearchAction(searchActionFlow.value) }\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\viewmodel\\SearchableRepositoryViewModel.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nfinal override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): T {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Android-Password-Store/227", "ground_truth": "    val view = LayoutInflater.from(parent.context).inflate(layoutRes, parent, false)\r\n    return viewHolderCreator(view)\r\n  }", "fpath": "Android-Password-Store\\app\\src\\main\\java\\app\\passwordstore\\util\\viewmodel\\SearchableRepositoryViewModel.kt"}}
{"prompt": "\nval symlinks\nval descriptorSHA256\nval digest\n fun downToDataDescriptor() =\r\n        DataDescriptor(\r", "choices": [{"text": "val data\r\nval dataDescriptor\r\nval dataDescriptorSHA256\r\nval dataDescriptorDigest\r\nfun downToDataDescriptor() =\r\n        DataDescriptor(\r\nval data\r\nval dataDescriptor\r\nval dataDescriptorSHA256\r\nval dataDescriptorDigest\r\nfun downToDataDescriptor() =\r\n        DataDescriptor(\r\nval data\r\nval dataDescriptor\r\nval dataDescriptorSHA256\r\nval dataDescriptorDigest\r\nfun downToDataDescriptor() =\r\n        DataDescriptor(\r\nval data\r\nval dataDescriptor\r\nval dataDescriptorSHA256"}], "metadata": {"task_id": "fcitx5-android/0", "ground_truth": "            sha256(this),\r\n            files.mapValues { it.value.first },\r\n            symlinks.mapValues { it.value.first })", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\data\\DataHierarchy.kt"}}
{"prompt": "\n private fun sha256(h: DataHierarchy): String =\r\n            digest.digest(h.descriptorSHA256.joinToString(separator = \"\").encodeToByteArray())\r", "choices": [{"text": ""}], "metadata": {"task_id": "fcitx5-android/1", "ground_truth": "                .let {\r\n                    Base64.encodeToString(it, 0).trim()\r\n                }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\data\\DataHierarchy.kt"}}
{"prompt": "\n import timber.log.Timber\nimport kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.runBlocking\nimport kotlinx.coroutines.Runnable\nfun stop(): List<Runnable> {\r\n        Timber.i(\"FcitxDispatcher stop()\")\r\n        return if (isRunning.compareAndSet(true, false)) {\r\n            runBlocking {\r\n                controller.nativeScheduleEmpty()\r\n                runningLock.withLock {\r\n                    val rest = queue.toList()\r\n                    queue.clear()\r", "choices": [{"text": "//                    Timber.i(\"FcitxDispatcher stop() rest: $rest\")\r\n                    rest\r\n                }\r\n            }\r\n        } else {\r\n            Timber.i(\"FcitxDispatcher stop() already stopped\")\r\n            emptyList()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/2", "ground_truth": "                    rest\r\n                }\r\n            }\r\n        } else emptyList()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\FcitxDispatcher.kt"}}
{"prompt": "\nval eventType EventType\nval eventType\nval Types\n override fun hashCode(): Int {\r\n                var result = total\r", "choices": [{"text": "result = 31 * result + (total?.hashCode()?: 0)\r\nresult = 31 * result + (total_amount?.hashCode()?: 0)\r\nresult = 31 * result + (total_amount_paid?.hashCode()?: 0)\r\nresult = 31 * result + (total_amount_refunded?.hashCode()?: 0)\r\nresult = 31 * result + (total_amount_refunded_by_customer?.hashCode()?: 0)\r\nresult = 31 * result + (total_amount"}], "metadata": {"task_id": "fcitx5-android/5", "ground_truth": "                result = 31 * result + candidates.contentHashCode()\r\n                return result\r\n            }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\FcitxEvent.kt"}}
{"prompt": "\nval eventType EventType\nval eventType\nval Types\n override fun hashCode(): Int {\r\n                var result = actions.contentHashCode()\r", "choices": [{"text": "result = 31 * result + (eventType?.hashCode()?: 0)\r\nreturn result\r\n}\r\noverride fun equals(other: Any?): Boolean {\r\n                if (this === other) return true\r\nif (other!is Actions) return false\r\nif (actions!= other.actions) return false\r\nif (eventType!= other.eventType) return false\r\nreturn true\r\n}\r\n}\r\ndata class Action(val name: String, val value: String)\r\ndata class EventType(val name: String, val value: String)\r\ndata class Types"}], "metadata": {"task_id": "fcitx5-android/7", "ground_truth": "                result = 31 * result + im.hashCode()\r\n                return result\r\n            }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\FcitxEvent.kt"}}
{"prompt": "\n override fun equals(other: Any?): Boolean {\r\n            if (this === other) return true\r\n            if (javaClass != other?.javaClass) return false\r\n\r\n            other as UnknownEvent\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/8", "ground_truth": "\r\n            if (!data.contentEquals(other.data)) return false\r\n\r\n            return true\r\n        }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\FcitxEvent.kt"}}
{"prompt": "\n override fun onStateChanged(event: FcitxLifecycle.Event) {\r\n        if (lifecycle.currentState >= FcitxLifecycle.State.STOPPING) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/9", "ground_truth": "            coroutineContext.cancelChildren()\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\FcitxLifecycle.kt"}}
{"prompt": "\n import kotlin.coroutines.suspendCoroutine\nimport kotlinx.coroutines.CoroutineScope\nsuspend fun <T> run(block: suspend CoroutineScope.() -> T): T {\r\n        suspendCoroutine { continuation = it }\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "fcitx5-android/10", "ground_truth": "        lifecycle.removeObserver(observer)\r\n        return block(lifecycle.lifecycleScope)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\FcitxLifecycle.kt"}}
{"prompt": "\n import android.os.IBinder\nimport android.content.ComponentName\noverride fun onServiceConnected(name: ComponentName, service: IBinder) {\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "fcitx5-android/11", "ground_truth": "            messenger = Messenger(service)\r\n            Timber.d(\"Plugin connected: $pluginId\")\r\n        }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\FcitxPluginServices.kt"}}
{"prompt": " import android.content.ComponentName\nval PLUGIN_SERVICE_ACTION\nval connections\nvar messenger Messenger?\noverride fun onServiceDisconnected(name: ComponentName) {\r", "choices": [{"text": "connections.remove(name)\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/12", "ground_truth": "            messenger = null\r\n            Timber.d(\"Plugin disconnected: $pluginId\")\r\n        }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\FcitxPluginServices.kt"}}
{"prompt": "\n import android.content.ComponentName\noverride fun onBindingDied(name: ComponentName?) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "fcitx5-android/13", "ground_truth": "            onDied.invoke()\r\n            Timber.d(\"Plugin binding died: $pluginId\")\r\n        }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\FcitxPluginServices.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.utils.appContext\nimport android.content.Context\nprivate fun disconnectPlugin(name: String) {\r\n        connections.remove(name)?.also {\r\n            appContext.unbindService(it)\r", "choices": [{"text": "//            it.onDestroy()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/16", "ground_truth": "            Timber.d(\"Unbound plugin: $name\")\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\FcitxPluginServices.kt"}}
{"prompt": "\n import android.os.Message\nfun sendMessage(message: Message) {\r\n        connections.forEach { (_, conn) ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/18", "ground_truth": "            conn.sendMessage(message)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\FcitxPluginServices.kt"}}
{"prompt": "\n fun escapeForValue(str: String): String {\r\n        val needsQuote = str.lastIndexOfAny(QuotedChars) >= 0\r\n        return buildString {\r\n            if (needsQuote) append('\"')\r\n            str.forEach { c ->\r\n                append(\r\n                    when (c) {\r\n                        '\\\\' -> \"\\\\\\\\\"\r\n                        '\\n' -> \"\\\\n\"\r\n                        '\"' -> \"\\\\\\\"\"\r\n                        else -> c\r\n                    }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/19", "ground_truth": "                )\r\n            }\r\n            if (needsQuote) append('\"')\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\FcitxUtils.kt"}}
{"prompt": "\n fun codePointCountUntil(endIndex: Int): Int {\r\n        var count = 0\r\n        var length = 0\r\n        for (str in strings) {\r\n            val total = length + str.length\r\n            if (total < endIndex) {\r\n                count += str.codePointCount(0, str.length)\r\n                length = total\r\n            } else {\r\n                count += str.codePointCount(0, endIndex - length)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/20", "ground_truth": "                break\r\n            }\r\n        }\r\n        return count\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\FormattedText.kt"}}
{"prompt": "\n fun spanEquals(other: FormattedText): Boolean {\r\n        if (this === other) return true\r\n        if (!flags.contentEquals(other.flags)) return false\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/21", "ground_truth": "        if (!strings.contentEquals(other.strings)) return false\r\n        return true\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\FormattedText.kt"}}
{"prompt": "\n override fun hashCode(): Int {\r\n        var result = strings.contentHashCode()\r\n        result = 31 * result + flags.contentHashCode()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/23", "ground_truth": "        result = 31 * result + cursor\r\n        return result\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\FormattedText.kt"}}
{"prompt": "\nval displayName String\n override fun hashCode(): Int {\r\n        var result = id\r\n        result = 31 * result + name.hashCode()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/27", "ground_truth": "        result = 31 * result + (menu?.contentHashCode() ?: 0)\r\n        return result\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\core\\Types.kt"}}
{"prompt": "\n import kotlin.concurrent.withLock\nimport timber.log.Timber\nimport org.fcitx.fcitx5.android.daemon.FcitxDaemon.connect\nimport org.fcitx.fcitx5.android.core.FcitxLifecycle\nimport org.fcitx.fcitx5.android.core.Fcitx\nfun connect(name: String): FcitxConnection = lock.withLock {\r\n        if (name in clients)\r\n            return@withLock clients.getValue(name)\r\n        if (realFcitx.lifecycle.currentState == FcitxLifecycle.State.STOPPED) {\r\n            Timber.d(\"FcitxDaemon start fcitx\")\r\n            realFcitx.start()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/28", "ground_truth": "        }\r\n        val new = mkConnection(name)\r\n        clients[name] = new\r\n        return@withLock new\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\daemon\\FcitxDaemon.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.core.FcitxAPI\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.CoroutineScope\nfun FcitxConnection.launchOnReady(block: suspend CoroutineScope.(FcitxAPI) -> Unit) {\r\n    lifecycleScope.launch {\r", "choices": [{"text": "//        while (true) {\r\n            if (isReady) {\r\n                block(FcitxAPI(this@launchOnReady))\r\n                break\r\n            }\r\n//        }\r\n    }\r\n}<file_sep>/app/src/main/java/com/example/fcitx5/MainActivity.kt\npackage com.example.fcitx5\n\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.View\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\n"}], "metadata": {"task_id": "fcitx5-android/31", "ground_truth": "        runOnReady { block(this) }\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\daemon\\Functions.kt"}}
{"prompt": "\n import java.io.File\noverride fun toLibIMEDictionary(dest: File): LibIMEDictionary {\r\n        ensureBin(dest)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "fcitx5-android/36", "ground_truth": "        file.copyTo(dest)\r\n        return LibIMEDictionary(dest)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\pinyin\\dict\\LibIMEDictionary.kt"}}
{"prompt": "\nval file File\nval type Type\nval name String\n fun toTextDictionary(): TextDictionary {\r", "choices": [{"text": "return TextDictionary(file, type, name)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/37", "ground_truth": "        val dest = file.resolveSibling(name + \".${Type.Text.ext}\")\r\n        return toTextDictionary(dest)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\pinyin\\dict\\PinyinDictionary.kt"}}
{"prompt": "\n fun toLibIMEDictionary(): LibIMEDictionary {\r", "choices": [{"text": "-    return LibIMEDictionary(\r\n-        name = name,\r\n-        description = description,\r\n-        version = version,\r\n-        author = author,\r\n-        license = license,\r\n-        url = url,\r\n-        icon = icon,\r\n-        keywords = keywords,\r\n-        categories = categories,\r\n-        dictionary = dictionary,\r\n-        dictionaryPath = dictionaryPath,\r\n-        dictionaryType = dictionaryType,\r\n-        dictionarySize = dictionarySize,\r\n-        dictionarySizeUnit = dictionarySize"}], "metadata": {"task_id": "fcitx5-android/38", "ground_truth": "        val dest = file.resolveSibling(name + \".${Type.LibIME.ext}\")\r\n        return toLibIMEDictionary(dest)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\pinyin\\dict\\PinyinDictionary.kt"}}
{"prompt": " import java.io.File\nval file File\nval type Type\nval name String\nprotected fun ensureFileExists() {\r", "choices": [{"text": "if (!file.exists()) {\r\nfile.createNewFile()\r\n}\r\n}\r\nprotected fun ensureFileIsOfType(type: Type) {\r\nif (file.type!= type) {\r\nthrow IllegalArgumentException(\"File is not of type $type\")\r\n}\r\n}\r\n}\r\nclass FileWriter(file: File, type: Type) : File(file, type) {\r\noverride fun ensureFileExists() {\r\nsuper.ensureFileExists()\r\nif (file.type!= type) {\r\nthrow IllegalArgumentException(\"File is not of type"}], "metadata": {"task_id": "fcitx5-android/39", "ground_truth": "        if (!file.exists())\r\n            throw IllegalStateException(\"File ${file.absolutePath} does not exist\")\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\pinyin\\dict\\PinyinDictionary.kt"}}
{"prompt": " import java.io.File\nval file File\nval type Type\nval name String\nprotected fun ensureTxt(dest: File) {\r\n        if (dest.extension != Type.Text.ext)\r", "choices": [{"text": " import java.io.File\nval file File\nval type Type\nval name String\nprotected fun ensureTxt(dest: File) {\r\n        if (dest.extension!= Type.Text.ext)\r\ndest.renameTo(File(dest.parent, dest.nameWithoutExtension + Type.Text.ext))\r\n    }\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/40", "ground_truth": "            throw IllegalArgumentException(\"Dest file name must end with .${Type.Text.ext}\")\r\n        dest.delete()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\pinyin\\dict\\PinyinDictionary.kt"}}
{"prompt": " import java.io.File\nval file File\nval type Type\nval name String\nprotected fun ensureBin(dest: File) {\r\n        if (dest.extension != Type.LibIME.ext)\r", "choices": [{"text": " import java.io.File\nval file File\nval type Type\nval name String\nprotected fun ensureBin(dest: File) {\r\n        if (dest.extension!= Type.LibIME.ext)\r\nthrow IllegalArgumentException(\"Invalid file extension: \" + dest.extension)\r\n}\r\nprotected fun ensureDir(dest: File) {\r\n        if (!dest.exists())\r\ndest.mkdirs()\r\n}\r\nprotected fun ensureFile(dest: File) {\r\n        if (!dest.exists())\r\ndest.createNewFile()\r\n}\r\nprotected fun ensureFile(dest: File, type: Type) {\r\n        ensureFile(dest)\r\n        if (dest.extension!= type.ext)\r\ndest.renameTo(File(dest.parent, dest.name + type.ext"}], "metadata": {"task_id": "fcitx5-android/41", "ground_truth": "            throw IllegalArgumentException(\"Dest file name must end with .${Type.LibIME.ext}\")\r\n        dest.delete()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\pinyin\\dict\\PinyinDictionary.kt"}}
{"prompt": "\n import java.io.File\nfun new(it: File): PinyinDictionary? = when (Type.fromFileName(it.name)) {\r\n            Type.LibIME -> LibIMEDictionary(it)\r\n            Type.Sougou -> SougouDictionary(it)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "fcitx5-android/42", "ground_truth": "            Type.Text -> TextDictionary(it)\r\n            null -> null\r\n        }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\pinyin\\dict\\PinyinDictionary.kt"}}
{"prompt": "\n import java.io.File\noverride fun toTextDictionary(dest: File): TextDictionary {\r\n        ensureTxt(dest)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "fcitx5-android/43", "ground_truth": "        PinyinDictManager.sougouDictConv(file.absolutePath, dest.absolutePath)\r\n        return TextDictionary(dest)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\pinyin\\dict\\SougouDictionary.kt"}}
{"prompt": "\n import java.io.File\noverride fun toLibIMEDictionary(dest: File): LibIMEDictionary {\r\n        val txtDict = toTextDictionary()\r\n        val libimeDict = txtDict.toLibIMEDictionary(dest)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "fcitx5-android/44", "ground_truth": "        txtDict.file.delete()\r\n        return libimeDict\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\pinyin\\dict\\SougouDictionary.kt"}}
{"prompt": "\n import java.io.File\noverride fun toTextDictionary(dest: File): TextDictionary {\r\n        ensureTxt(dest)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "fcitx5-android/45", "ground_truth": "        file.copyTo(dest)\r\n        return TextDictionary(dest)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\pinyin\\dict\\TextDictionary.kt"}}
{"prompt": "\n import java.io.File\nimport org.fcitx.fcitx5.android.utils.errorArg\nimport org.fcitx.fcitx5.android.data.pinyin.dict.PinyinDictionary\nimport org.fcitx.fcitx5.android.data.pinyin.dict.LibIMEDictionary\nimport org.fcitx.fcitx5.android.R\nfun importFromFile(file: File): Result<LibIMEDictionary> = runCatching {\r\n        val raw =\r\n            PinyinDictionary.new(file) ?: errorArg(R.string.exception_dict_filename, file.path)\r\n        // convert to libime format in dictionaries dir\r\n        // preserve original file name\r\n        val new = raw.toLibIMEDictionary(\r\n            File(\r\n                pinyinDicDir,\r\n                file.nameWithoutExtension + \".${PinyinDictionary.Type.LibIME.ext}\"\r", "choices": [{"text": "\n import java.io.File\nimport org.fcitx.fcitx5.android.utils.errorArg\nimport org.fcitx.fcitx5.android.data.pinyin.dict.PinyinDictionary\nimport org.fcitx.fcitx5.android.data.pinyin.dict.LibIMEDictionary\nimport org.fcitx.fcitx5.android.R\nfun importFromFile(file: File): Result<LibIMEDictionary> = runCatching {\r\n        val raw =\r\n            PinyinDictionary.new(file)?: errorArg(R.string.exception_dict_filename, file.path)\r\n        // convert to libime format in dictionaries dir\r\n        // preserve original file name\r\n        val new = raw.toLibIMEDictionary(\r\n            File(\r\n                pinyinDicDir,\r\n                file.nameWithoutExtension + \".${PinyinDictionary.Type.LibIME.ext}\"\r\n//                file.name\r\n            )\r\n        )\r\n        new\r\n    }\r\n//   .onFailure {\r\n//        // TODO: show error message\r\n//        Log.e(\"importFromFile\", it.message?: \"unknown error\")\r\n//    }\r\n//   .getOrNull()\r\n<file_sep>/app/src/main/java/org/fcitx/fcitx5/android/data/pinyin/dict/PinyinDictionary.kt\n/*\n * Copyright (C) 2015-2017 <NAME> <<EMAIL>>\n *\n *"}], "metadata": {"task_id": "fcitx5-android/48", "ground_truth": "            )\r\n        )\r\n        Timber.d(\"Converted $raw to $new\")\r\n        new\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\pinyin\\PinyinDictManager.kt"}}
{"prompt": "\n import java.io.InputStream\nimport java.io.File\nimport org.fcitx.fcitx5.android.utils.appContext\nimport org.fcitx.fcitx5.android.data.pinyin.dict.LibIMEDictionary\nimport org.fcitx.fcitx5.android.R\nfun importFromInputStream(stream: InputStream, name: String): Result<LibIMEDictionary> {\r\n        val tempFile = File(appContext.cacheDir, name)\r\n        tempFile.outputStream().use {\r\n            stream.copyTo(it)\r", "choices": [{"text": "//            stream.copyTo(tempFile.outputStream())\r\n        }\r\n        return LibIMEDictionary.load(tempFile)\r\n    }\r\n"}], "metadata": {"task_id": "fcitx5-android/49", "ground_truth": "        }\r\n        val new = importFromFile(tempFile)\r\n        tempFile.delete()\r\n        return new\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\pinyin\\PinyinDictManager.kt"}}
{"prompt": "\n import android.content.SharedPreferences\nfun <T : ManagedPreferenceProvider> registerProvider(\r\n        providerF: (SharedPreferences) -> T\r\n    ): T {\r\n        val provider = providerF(sharedPreferences)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/51", "ground_truth": "        providers.add(provider)\r\n        return provider\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\prefs\\AppPrefs.kt"}}
{"prompt": "\nval listeners\n fun fireChange() {\r\n        if (listeners.isEmpty()) return\r", "choices": [{"text": "//        listeners.forEach { it.onChange() }\r\n        listeners.forEach { it.onChange() }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/53", "ground_truth": "        val newValue = getValue()\r\n        listeners.forEach { it.onChange(key, newValue) }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\prefs\\ManagedPreference.kt"}}
{"prompt": "\n import androidx.annotation.StringRes\nprotected fun <T : Any> list(\r\n        @StringRes\r\n        title: Int,\r\n        key: String,\r\n        defaultValue: T,\r\n        codec: ManagedPreference.StringLikeCodec<T>,\r\n        entryValues: List<T>,\r\n        @StringRes\r\n        entryLabels: List<Int>,\r\n        enableUiOn: (() -> Boolean)? = null\r\n    ): ManagedPreference.PStringLike<T> {\r\n        val pref = ManagedPreference.PStringLike(sharedPreferences, key, defaultValue, codec)\r\n        val ui = ManagedPreferenceUi.StringList(\r\n            title, key, defaultValue, codec, entryValues, entryLabels, enableUiOn\r", "choices": [{"text": ")\r\n        pref.ui = ui\r\n        return pref\r\n    }\r\n"}], "metadata": {"task_id": "fcitx5-android/60", "ground_truth": "        )\r\n        pref.register()\r\n        ui.registerUi()\r\n        return pref\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\prefs\\ManagedPreferenceCategory.kt"}}
{"prompt": "\n import android.os.Build\noverride fun onStop() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n            AppPrefs.getInstance().syncToDeviceEncryptedStorage()\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "fcitx5-android/63", "ground_truth": "        }\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\prefs\\ManagedPreferenceFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/64", "ground_truth": "        evaluator.destroy()\r\n        super.onDestroy()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\prefs\\ManagedPreferenceFragment.kt"}}
{"prompt": "\n fun destroy() {\r\n        provider.managedPreferences.forEach { (_, pref) ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/67", "ground_truth": "            pref.unregisterOnChangeListener(onValueChangeListener)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\prefs\\ManagedPreferenceVisibilityEvaluator.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.core.FcitxAPI\nsuspend fun load(fcitx: FcitxAPI, lang: String): List<PunctuationMapEntry> {\r", "choices": [{"text": "-    val punct = fcitx.punctuation.get(lang)\r\n+    val punct = fcitx.punctuation.get(lang, PunctuationType.Punctuation)\r\n     return punct.entries.map { PunctuationMapEntry(it.key, it.value) }\r\n }\r\n"}], "metadata": {"task_id": "fcitx5-android/69", "ground_truth": "        val raw = fcitx.getPunctuationConfig(lang)\r\n        return parseRawConfig(raw)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\punctuation\\PunctuationManager.kt"}}
{"prompt": "\nvar override CustomQuickPhrase?\nval isEnabled Boolean\n private fun createOverrideIfNotExist() {\r\n        if (override != null)\r\n            return\r", "choices": [{"text": "\nvar override CustomQuickPhrase?\nval isEnabled Boolean\n private fun createOverrideIfNotExist() {\r\n        if (override!= null)\r\n            return\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/72", "ground_truth": "        file.copyTo(overrideFile, overwrite = true)\r\n        override = CustomQuickPhrase(overrideFile)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\quickphrase\\BuiltinQuickPhrase.kt"}}
{"prompt": "\nvar override CustomQuickPhrase?\nval isEnabled Boolean\n override fun saveData(data: QuickPhraseData) {\r", "choices": [{"text": "//...\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/73", "ground_truth": "        createOverrideIfNotExist()\r\n        override!!.saveData(data)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\quickphrase\\BuiltinQuickPhrase.kt"}}
{"prompt": "\n override fun enable() {\r\n        if (isEnabled)\r\n            return\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/74", "ground_truth": "        // override must exist in this case\r\n        override!!.enable()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\quickphrase\\BuiltinQuickPhrase.kt"}}
{"prompt": "\n override fun disable() {\r\n        if (!isEnabled)\r\n            return\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "fcitx5-android/75", "ground_truth": "        createOverrideIfNotExist()\r\n        override!!.disable()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\quickphrase\\BuiltinQuickPhrase.kt"}}
{"prompt": "\nvar override CustomQuickPhrase?\nval isEnabled Boolean\n fun deleteOverride() {\r", "choices": [{"text": "}\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/76", "ground_truth": "        overrideFile.delete()\r\n        override = null\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\quickphrase\\BuiltinQuickPhrase.kt"}}
{"prompt": " import java.io.File\nval file File\nval isEnabled Boolean\nval EXT\nprotected fun ensureFileExists() {\r", "choices": [{"text": "if (!file.exists()) {\r\nfile.createNewFile()\r\n}\r\n}\r\nprotected fun ensureFileIsWritable() {\r\nif (!file.canWrite()) {\r\nthrow IllegalStateException(\"File is not writable: \" + file.absolutePath)\r\n}\r\n}\r\nprotected fun ensureFileIsReadable() {\r\nif (!file.canRead()) {\r\nthrow IllegalStateException(\"File is not readable: \" + file.absolutePath)\r\n}\r\n}\r\nprotected fun ensureFileIsExecutable() {\r\nif (!file.canExecute()) {\r"}], "metadata": {"task_id": "fcitx5-android/79", "ground_truth": "        if (!file.exists())\r\n            throw IllegalStateException(\"File ${file.absolutePath} does not exist\")\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\quickphrase\\QuickPhrase.kt"}}
{"prompt": "\n import java.io.File\nfun newEmpty(name: String): CustomQuickPhrase {\r\n        val file = File(customQuickPhraseDir, \"$name.${QuickPhrase.EXT}\")\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/81", "ground_truth": "        file.createNewFile()\r\n        return CustomQuickPhrase(file)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\quickphrase\\QuickPhraseManager.kt"}}
{"prompt": "\n fun load() {\r\n        val xs = file.readLines()\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "fcitx5-android/85", "ground_truth": "        xs.forEach {\r\n            if (it.isNotBlank())\r\n                put(it, it)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\RecentlyUsed.kt"}}
{"prompt": "\nval file File\nval type Type\nval name String\n fun toTextDictionary(): TextDictionary {\r", "choices": [{"text": "return TextDictionary(file, type, name)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/86", "ground_truth": "        val dest = file.resolveSibling(name + \".${Type.Text.ext}\")\r\n        return toTextDictionary(dest)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\table\\dict\\Dictionary.kt"}}
{"prompt": "\n fun toLibIMEDictionary(): LibIMEDictionary {\r", "choices": [{"text": "-    return LibIMEDictionary(\r\n-        name = name,\r\n-        description = description,\r\n-        version = version,\r\n-        author = author,\r\n-        license = license,\r\n-        url = url,\r\n-        icon = icon,\r\n-        keywords = keywords,\r\n-        categories = categories,\r\n-        dictionary = dictionary,\r\n-        dictionaryPath = dictionaryPath,\r\n-        dictionaryType = dictionaryType,\r\n-        dictionarySize = dictionarySize,\r\n-        dictionarySizeUnit = dictionarySize"}], "metadata": {"task_id": "fcitx5-android/87", "ground_truth": "        val dest = file.resolveSibling(name + \".${Type.LibIME.ext}\")\r\n        return toLibIMEDictionary(dest)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\table\\dict\\Dictionary.kt"}}
{"prompt": " import java.io.File\nval file File\nval type Type\nval name String\nprotected fun ensureFileExists() {\r", "choices": [{"text": "if (!file.exists()) {\r\nfile.createNewFile()\r\n}\r\n}\r\nprotected fun ensureFileIsOfType(type: Type) {\r\nif (file.type!= type) {\r\nthrow IllegalArgumentException(\"File is not of type $type\")\r\n}\r\n}\r\n}\r\nclass FileWriter(file: File, type: Type) : File(file, type) {\r\noverride fun ensureFileExists() {\r\nsuper.ensureFileExists()\r\nif (file.type!= type) {\r\nthrow IllegalArgumentException(\"File is not of type"}], "metadata": {"task_id": "fcitx5-android/88", "ground_truth": "        if (!file.exists())\r\n            throw IllegalStateException(\"File ${file.absolutePath} does not exist\")\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\table\\dict\\Dictionary.kt"}}
{"prompt": " import java.io.File\nval file File\nval type Type\nval name String\nprotected fun ensureTxt(dest: File) {\r\n        if (dest.extension != Type.Text.ext)\r", "choices": [{"text": " import java.io.File\nval file File\nval type Type\nval name String\nprotected fun ensureTxt(dest: File) {\r\n        if (dest.extension!= Type.Text.ext)\r\ndest.renameTo(File(dest.parent, dest.nameWithoutExtension + Type.Text.ext))\r\n    }\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/89", "ground_truth": "            throw IllegalArgumentException(\"Dest file name must end with .${Type.Text.ext}\")\r\n        dest.delete()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\table\\dict\\Dictionary.kt"}}
{"prompt": " import java.io.File\nval file File\nval type Type\nval name String\nprotected fun ensureBin(dest: File) {\r\n        if (dest.extension != Type.LibIME.ext)\r", "choices": [{"text": " import java.io.File\nval file File\nval type Type\nval name String\nprotected fun ensureBin(dest: File) {\r\n        if (dest.extension!= Type.LibIME.ext)\r\nthrow IllegalArgumentException(\"Invalid file extension: \" + dest.extension)\r\n}\r\nprotected fun ensureDir(dest: File) {\r\n        if (!dest.exists())\r\ndest.mkdirs()\r\n}\r\nprotected fun ensureFile(dest: File) {\r\n        if (!dest.exists())\r\ndest.createNewFile()\r\n}\r\nprotected fun ensureFile(dest: File, type: Type) {\r\n        ensureFile(dest)\r\n        if (dest.extension!= type.ext)\r\ndest.renameTo(File(dest.parent, dest.name + type.ext"}], "metadata": {"task_id": "fcitx5-android/90", "ground_truth": "            throw IllegalArgumentException(\"Dest file name must end with .${Type.LibIME.ext}\")\r\n        dest.delete()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\table\\dict\\Dictionary.kt"}}
{"prompt": "\n import java.io.File\nfun new(it: File): Dictionary? = when (Type.fromFileName(it.name)) {\r\n            Type.LibIME -> LibIMEDictionary(it)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "fcitx5-android/91", "ground_truth": "            Type.Text -> TextDictionary(it)\r\n            null -> null\r\n        }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\table\\dict\\Dictionary.kt"}}
{"prompt": "\n import java.io.File\nimport org.fcitx.fcitx5.android.data.table.TableManager\noverride fun toTextDictionary(dest: File): TextDictionary {\r\n        ensureTxt(dest)\r\n        TableManager.tableDictConv(\r\n            file.absolutePath,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/92", "ground_truth": "            dest.absolutePath,\r\n            TableManager.MODE_BIN_TO_TXT\r\n        )\r\n        return TextDictionary(dest)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\table\\dict\\LibIMEDictionary.kt"}}
{"prompt": "\n import java.io.File\nimport org.fcitx.fcitx5.android.data.table.TableManager\noverride fun toLibIMEDictionary(dest: File): LibIMEDictionary {\r\n        ensureBin(dest)\r\n        TableManager.checkTableDictFormat(file.absolutePath)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "fcitx5-android/93", "ground_truth": "        file.copyTo(dest)\r\n        return LibIMEDictionary(dest)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\table\\dict\\LibIMEDictionary.kt"}}
{"prompt": "\n import java.io.File\noverride fun toTextDictionary(dest: File): TextDictionary {\r\n        ensureTxt(dest)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "fcitx5-android/94", "ground_truth": "        file.copyTo(dest)\r\n        return TextDictionary(dest)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\table\\dict\\TextDictionary.kt"}}
{"prompt": "\nval name String\nval Name\nval NameI18n\n fun delete() {\r\n        table?.file?.delete()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "fcitx5-android/96", "ground_truth": "        table = null\r\n        file.delete()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\table\\TableBasedInputMethod.kt"}}
{"prompt": "\n import java.io.File\nfun fixedTableFileName(name: String) =\r", "choices": [{"text": "File(name).apply { parentFile.mkdirs() }.absolutePath\r\n"}], "metadata": {"task_id": "fcitx5-android/97", "ground_truth": "            name.split(' ')\r\n                .joinToString(separator = \"-\")\r\n                .lowercase() + \".main.dict\"", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\table\\TableBasedInputMethod.kt"}}
{"prompt": "\n import java.util.UUID\nimport java.io.File\nfun newCustomBackgroundImages(): Triple<String, File, File> {\r\n        val themeName = UUID.randomUUID().toString()\r\n        val croppedImageFile = File(dir, \"$themeName-cropped.png\")\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/106", "ground_truth": "        val srcImageFile = File(dir, \"$themeName-src\")\r\n        return Triple(themeName, croppedImageFile, srcImageFile)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\theme\\ThemeFilesManager.kt"}}
{"prompt": "\nval onThemePrefsChange\nval onChangeListeners\nvar _activeTheme Theme\n fun refreshThemes() {\r\n        customThemes.clear()\r", "choices": [{"text": "//        customThemes.add(Theme(\"Default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default\", \"default"}], "metadata": {"task_id": "fcitx5-android/108", "ground_truth": "        customThemes.addAll(ThemeFilesManager.listThemes())\r\n        activeTheme = evaluateActiveTheme()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\theme\\ThemeManager.kt"}}
{"prompt": "\n fun saveTheme(theme: Theme.Custom) {\r\n        ThemeFilesManager.saveThemeFiles(theme)\r\n        customThemes.indexOfFirst { it.name == theme.name }.also {\r\n            if (it >= 0) customThemes[it] = theme else customThemes.add(0, theme)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/109", "ground_truth": "        }\r\n        if (activeTheme.name == theme.name) {\r\n            activeTheme = theme\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\theme\\ThemeManager.kt"}}
{"prompt": "\n fun deleteTheme(name: String) {\r\n        customThemes.find { it.name == name }?.also {\r\n            ThemeFilesManager.deleteThemeFiles(it)\r\n            customThemes.remove(it)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/110", "ground_truth": "        }\r\n        if (activeTheme.name == name) {\r\n            activeTheme = evaluateActiveTheme()\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\theme\\ThemeManager.kt"}}
{"prompt": "\n fun onSystemDarkModeChange(isDark: Boolean) {\r", "choices": [{"text": "//     if (isDark) {\r\n//         AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)\r\n//     } else {\r\n//         AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)\r\n//     }\r\n// }\r\n"}], "metadata": {"task_id": "fcitx5-android/114", "ground_truth": "        isDarkMode = isDark\r\n        activeTheme = evaluateActiveTheme()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\theme\\ThemeManager.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.utils.appContext\nimport androidx.preference.PreferenceManager\nimport androidx.core.content.edit\nimport androidx.annotation.RequiresApi\nimport android.os.Build\n @RequiresApi(Build.VERSION_CODES.N)\r\n    fun syncToDeviceEncryptedStorage() {\r\n        val ctx = appContext.createDeviceProtectedStorageContext()\r\n        val sp = PreferenceManager.getDefaultSharedPreferences(ctx)\r\n        sp.edit {\r", "choices": [{"text": "//            putString(\"fcitx5_android_pin\", \"123456\")\r\n            putString(\"fcitx5_android_pin\", \"123456\")\r\n        }\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/115", "ground_truth": "            prefs.managedPreferences.forEach {\r\n                it.value.putValueTo(this@edit)\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\data\\theme\\ThemeManager.kt"}}
{"prompt": "\n import timber.log.Timber\nimport org.fcitx.fcitx5.android.utils.desc\nprivate fun transformClipboard(source: String): String {\r\n        var result = source\r\n        clipboardTransformers.forEach {\r\n            try {\r\n                result = it.transform(result)!!\r\n            } catch (e: Exception) {\r\n                Timber.w(\"Exception while calling clipboard transformer '${it.desc}'\")\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/119", "ground_truth": "                Timber.w(e)\r\n            }\r\n        }\r\n        return result\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\FcitxRemoteService.kt"}}
{"prompt": "\nval binder\nval scope\nval clipboardTransformerLock\n override fun onCreate() {\r", "choices": [{"text": "super.onCreate()\r\nval appComponent = DaggerAppComponent.builder()\r\n.appModule(AppModule(this))\r\n.build()\r\nappComponent.inject(this)\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r"}], "metadata": {"task_id": "fcitx5-android/121", "ground_truth": "        Timber.d(\"FcitxRemoteService onCreate\")\r\n        super.onCreate()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\FcitxRemoteService.kt"}}
{"prompt": " import android.os.IBinder\nimport android.content.Intent\nval binder\nval scope\nval clipboardTransformerLock\noverride fun onBind(intent: Intent): IBinder {\r", "choices": [{"text": "return binder\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/122", "ground_truth": "        Timber.d(\"FcitxRemoteService onBind: $intent\")\r\n        return binder\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\FcitxRemoteService.kt"}}
{"prompt": " import android.content.Intent\nval binder\nval scope\nval clipboardTransformerLock\noverride fun onUnbind(intent: Intent): Boolean {\r", "choices": [{"text": "return super.onUnbind(intent)\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/123", "ground_truth": "        Timber.d(\"FcitxRemoteService onUnbind: $intent\")\r\n        return super.onUnbind(intent)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\FcitxRemoteService.kt"}}
{"prompt": "\n import timber.log.Timber\nimport kotlinx.coroutines.cancel\nimport android.app.Service\noverride fun onDestroy() {\r\n        Timber.d(\"FcitxRemoteService onDestroy\")\r\n        scope.cancel()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "fcitx5-android/124", "ground_truth": "        clipboardTransformers.clear()\r\n        runBlocking { updateClipboardManager() }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\FcitxRemoteService.kt"}}
{"prompt": "\n override fun setText(charSequence: CharSequence?, bufferType: BufferType) {\r\n        // setText can be called in super constructor\r\n        if (!::text.isInitialized || charSequence == null || !text.contentEquals(charSequence)) {\r\n            needsMeasureText = true\r\n            needsCalculateTransform = true\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/125", "ground_truth": "            text = charSequence?.toString() ?: \"\"\r\n            requestLayout()\r\n            invalidate()\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\AutoScaleTextView.kt"}}
{"prompt": "\n private fun measure(specMode: Int, specSize: Int, calculatedSize: Int): Int = when (specMode) {\r\n        MeasureSpec.EXACTLY -> specSize\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/126", "ground_truth": "        MeasureSpec.AT_MOST -> min(calculatedSize, specSize)\r\n        else -> calculatedSize\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\AutoScaleTextView.kt"}}
{"prompt": "\n override fun onLayout(changed: Boolean, left: Int, top: Int, right: Int, bottom: Int) {\r\n        if (needsCalculateTransform || changed) {\r\n            calculateTransform(right - left, bottom - top)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/127", "ground_truth": "            needsCalculateTransform = false\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\AutoScaleTextView.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Job\nimport androidx.lifecycle.lifecycleScope\nprivate fun launchClipboardTimeoutJob() {\r\n        clipboardTimeoutJob?.cancel()\r\n        val timeout = clipboardItemTimeout.getValue() * 1000L\r\n        // never transition to ClipboardTimedOut state when timeout < 0\r\n        if (timeout < 0L) return\r\n        clipboardTimeoutJob = service.lifecycleScope.launch {\r", "choices": [{"text": "//            delay(timeout)\r\n            delay(timeout)\r\n            clipboardTimeoutJob = null\r\n            clipboardState.postValue(ClipboardState.ClipboardIdle)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/130", "ground_truth": "            delay(timeout)\r\n            isClipboardFresh = false\r\n            clipboardTimeoutJob = null\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\KawaiiBarComponent.kt"}}
{"prompt": " import org.fcitx.fcitx5.android.input.keyboard.KeyboardWindow\nval expandButtonStateMachine\nval switchToVoiceInputCallback\nvar isToolbarManuallyToggled Boolean\nprivate fun setExpandButtonToDetach() {\r\n        candidateUi.expandButton.setOnClickListener {\r\n            windowManager.attachWindow(KeyboardWindow)\r", "choices": [{"text": "}\r\n}\r\nprivate fun setExpandButtonToAttach() {\r\n        candidateUi.expandButton.setOnClickListener {\r\n            windowManager.detachWindow(KeyboardWindow)\r\n}\r\n}\r\nprivate fun setExpandButtonToDetach() {\r\n        candidateUi.expandButton.setOnClickListener {\r\n            windowManager.attachWindow(KeyboardWindow)\r\n}\r\n}\r\nprivate fun setExpandButtonToAttach() {\r\n        candidateUi.expandButton.setOnClickListener {\r\n            windowManager.detachWindow(KeyboardWindow)\r\n}\r\n}\r\nprivate fun setExpandButtonToDetach() {\r\n        candidateUi."}], "metadata": {"task_id": "fcitx5-android/132", "ground_truth": "        }\r\n        candidateUi.expandButton.setIcon(R.drawable.ic_baseline_expand_less_24)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\KawaiiBarComponent.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.R\nprivate fun switchUiByState(state: KawaiiBarStateMachine.State) {\r\n        val index = state.ordinal\r\n        if (view.displayedChild == index) return\r\n        val new = view.getChildAt(index)\r\n        if (new != titleUi.root) {\r\n            titleUi.setReturnButtonOnClickListener { }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/133", "ground_truth": "            titleUi.setTitle(\"\")\r\n            titleUi.removeExtension()\r\n        }\r\n        view.displayedChild = index\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\KawaiiBarComponent.kt"}}
{"prompt": "\n import splitties.views.dsl.core.add\nimport org.fcitx.fcitx5.android.input.wm.InputWindow\nimport org.fcitx.fcitx5.android.input.keyboard.KeyboardWindow\nimport org.fcitx.fcitx5.android.R\noverride fun onWindowAttached(window: InputWindow) {\r\n        when (window) {\r\n            is InputWindow.ExtendedInputWindow<*> -> {\r\n                titleUi.setTitle(window.title)\r\n                window.onCreateBarExtension()?.let { titleUi.addExtension(it, window.showTitle) }\r\n                titleUi.setReturnButtonOnClickListener {\r\n                    windowManager.attachWindow(KeyboardWindow)\r\n                }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/134", "ground_truth": "                barStateMachine.push(ExtendedWindowAttached)\r\n            }\r\n            else -> {}\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\KawaiiBarComponent.kt"}}
{"prompt": "\n fun onKeyboardLayoutSwitched(isNumber: Boolean) {\r", "choices": [{"text": "//     if (isNumber) {\r\n//         // \u5207\u6362\u5230\u6570\u5b57\u952e\u76d8\r\n//         mKeyboardView.setKeyboard(mKeyboardView.keyboard, mKeyboardView.keyboard.keycodes[0])\r\n//     } else {\r\n//         // \u5207\u6362\u5230\u5b57\u6bcd\u952e\u76d8\r\n//         mKeyboardView.setKeyboard(mKeyboardView.keyboard, mKeyboardView.keyboard.keycodes[1])\r\n//     }\r\n }\r\n"}], "metadata": {"task_id": "fcitx5-android/136", "ground_truth": "        isKeyboardLayoutNumber = isNumber\r\n        evalIdleUiState()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\KawaiiBarComponent.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.utils.EventStateMachine\nimport org.fcitx.fcitx5.android.input.bar.KawaiiBarStateMachine.State\nfun new(block: (State) -> Unit) =\r\n        EventStateMachine<State, TransitionEvent, BooleanKey>(\r\n            Idle\r", "choices": [{"text": ") {\r\n    block(this)\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/137", "ground_truth": "        ).apply {\r\n            onNewStateListener = block\r\n        }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\KawaiiBarStateMachine.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.input.bar.ui.ToolButton\nimport org.fcitx.fcitx5.android.R\nimport androidx.annotation.DrawableRes\nprivate fun toolButton(@DrawableRes icon: Int) = ToolButton(ctx, icon, theme).also {\r", "choices": [{"text": "it.layoutParams = LinearLayout.LayoutParams(\r\nLinearLayout.LayoutParams.WRAP_CONTENT,\r\nLinearLayout.LayoutParams.WRAP_CONTENT\r\n)\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/138", "ground_truth": "        val size = ctx.dp(40)\r\n        root.addView(it, FlexboxLayout.LayoutParams(size, size))\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\ui\\idle\\ButtonsBarUi.kt"}}
{"prompt": "\n import androidx.annotation.RequiresApi\nimport android.os.Build\n @RequiresApi(Build.VERSION_CODES.R)\r\n    private fun clearPinnedView() {\r", "choices": [{"text": "//        val pinnedView = findViewById<View>(R.id.pinned_view)\r\n//        pinnedView.visibility = View.GONE\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/140", "ground_truth": "        pinnedView.removeAllViews()\r\n        pinnedContentView = null\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\ui\\idle\\InlineSuggestionsUi.kt"}}
{"prompt": "\n import androidx.annotation.RequiresApi\nimport android.os.Build\n @RequiresApi(Build.VERSION_CODES.R)\r\n    fun clear() {\r", "choices": [{"text": "//        val intent = Intent(this, MainActivity::class.java)\r\n//        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\r\n//        startActivity(intent)\r\n        finishAffinity()\r\n    }\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/141", "ground_truth": "        clearScrollView()\r\n        clearPinnedView()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\ui\\idle\\InlineSuggestionsUi.kt"}}
{"prompt": "\nvar inPrivate\nval emptyBar\nval disableAnimation\n fun privateMode(activate: Boolean = true) {\r\n        if (activate == inPrivate) return\r\n        inPrivate = activate\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "fcitx5-android/143", "ground_truth": "        updateMenuButtonIcon()\r\n        updateMenuButtonRotation(instant = true)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\ui\\IdleUi.kt"}}
{"prompt": " import splitties.views.imageResource\nimport org.fcitx.fcitx5.android.R\nval menuButtonRotation\nval menuButton\nval hideKeyboardButton\nprivate fun updateMenuButtonIcon() {\r\n        menuButton.image.imageResource =\r", "choices": [{"text": "if (splitties.views.menu.isMenuOpen) R.drawable.ic_menu_close else R.drawable.ic_menu_open\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/144", "ground_truth": "            if (inPrivate) R.drawable.ic_view_private\r\n            else R.drawable.ic_baseline_expand_more_24\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\ui\\IdleUi.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.R\nprivate fun updateMenuButtonRotation(instant: Boolean = false) {\r\n        val targetRotation = menuButtonRotation\r\n        menuButton.apply {\r\n            if (targetRotation == rotation) return\r\n            animate().cancel()\r\n            if (!instant && !disableAnimation) {\r\n                animate().setDuration(200L).rotation(targetRotation)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/145", "ground_truth": "            } else {\r\n                rotation = targetRotation\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\ui\\IdleUi.kt"}}
{"prompt": "\nval inAnimation\nval buttonsUi\nvar currentState\n private fun clearAnimation() {\r", "choices": [{"text": "inAnimation.clearAnimation()\r\n}\r\nprivate fun startAnimation() {\r\ninAnimation.startAnimation()\r\n}\r\nprivate fun stopAnimation() {\r\ninAnimation.stopAnimation()\r\n}\r\nprivate fun setAnimation(animation: Animation) {\r\ninAnimation = animation\r\n}\r\nprivate fun setAnimation(animation: Animation, duration: Long) {\r\ninAnimation = animation\r\ninAnimation.duration = duration\r\n}\r\nprivate fun setAnimation(animation: Animation, duration: Long, repeatCount: Int) {\r\ninAnimation ="}], "metadata": {"task_id": "fcitx5-android/147", "ground_truth": "        animator.inAnimation = null\r\n        animator.outAnimation = null\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\ui\\IdleUi.kt"}}
{"prompt": "\nval inAnimation\nval outAnimation\nval inlineSuggestionsBar\n private fun setAnimation() {\r", "choices": [{"text": "inAnimation = AnimationUtils.loadAnimation(this, R.anim.slide_in_left)\r\noutAnimation = AnimationUtils.loadAnimation(this, R.anim.slide_out_right)\r\ninlineSuggestionsBar = findViewById(R.id.inline_suggestions_bar)\r\n}\r\nprivate fun showInlineSuggestionsBar() {\r\ninlineSuggestionsBar.visibility = View.VISIBLE\r\ninlineSuggestionsBar.startAnimation(inAnimation)\r\n}\r\nprivate fun hideInlineSuggestionsBar() {\r\ninlineSuggestionsBar.startAnimation(outAnimation)\r\ninlineSuggestions"}], "metadata": {"task_id": "fcitx5-android/148", "ground_truth": "        animator.inAnimation = inAnimation\r\n        animator.outAnimation = outAnimation\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\ui\\IdleUi.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.R\nfun setReturnButtonOnClickListener(block: () -> Unit) {\r\n        backButton.setOnClickListener {\r", "choices": [{"text": "//            if (isKeyboardVisible) {\r\n//                hideKeyboard()\r\n//            } else {\r\n//                block()\r\n//            }\r\n            block()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/149", "ground_truth": "            block()\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\ui\\TitleUi.kt"}}
{"prompt": " import android.view.View\nval backButton\nvar extension View?\nval root\nfun removeExtension() {\r\n        extension?.let {\r\n            root.removeView(it)\r", "choices": [{"text": "}\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/150", "ground_truth": "            extension = null\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\bar\\ui\\TitleUi.kt"}}
{"prompt": "\n import android.view.inputmethod.EditorInfo\nfun updateDrawableOnEditorInfo(info: EditorInfo) {\r\n        actionDrawable = drawableFromEditorInfo(info)\r\n        if (resourceId == actionDrawable) return\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "fcitx5-android/152", "ground_truth": "        resourceId = actionDrawable\r\n        broadcaster.onReturnKeyDrawableUpdate(resourceId)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\broadcast\\ReturnKeyDrawableComponent.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.R\nfun updateDrawableOnPreedit(preeditEmpty: Boolean) {\r\n        val newResId = if (preeditEmpty) actionDrawable else DEFAULT_DRAWABLE\r\n        if (resourceId == newResId) return\r", "choices": [{"text": "\n        resourceId = newResId\r\r\n        invalidateSelf()\r\r\n        invalidate()\r\r\n        requestLayout()\r\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/153", "ground_truth": "        resourceId = newResId\r\n        broadcaster.onReturnKeyDrawableUpdate(resourceId)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\broadcast\\ReturnKeyDrawableComponent.kt"}}
{"prompt": "\n import android.annotation.SuppressLint\n @SuppressLint(\"NotifyDataSetChanged\")\r\n    fun updateCandidates(data: Array<String>, total: Int) {\r\n        this.candidates = data\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/156", "ground_truth": "        this.total = total\r\n        notifyDataSetChanged()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\candidates\\adapter\\HorizontalCandidateViewAdapter.kt"}}
{"prompt": "\n import androidx.annotation.CallSuper\n @CallSuper\r\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/158", "ground_truth": "        holder.ui.text.text = candidates[position]\r\n        holder.idx = position\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\candidates\\adapter\\HorizontalCandidateViewAdapter.kt"}}
{"prompt": "\nvar offset\nval diffCallback\nvar idx\n fun refreshWithOffset(offset: Int) {\r", "choices": [{"text": "//    this.offset = offset\r\n//    diffCallback = object : DiffUtil.ItemCallback<Item>() {\r\n//        override fun areItemsTheSame(oldItem: Item, newItem: Item): Boolean {\r\n//            return oldItem.id == newItem.id\r\n//        }\r\n//\r\n//        override fun areContentsTheSame(oldItem: Item, newItem: Item): Boolean {\r\n//            return oldItem == newItem\r\n//        }\r\n//    }\r\n//    val diffResult = DiffUtil.calculateDiff("}], "metadata": {"task_id": "fcitx5-android/159", "ground_truth": "        this.offset = offset\r\n        refresh()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\candidates\\adapter\\PagingCandidateViewAdapter.kt"}}
{"prompt": "\n override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r", "choices": [{"text": "//        val item = items[position]\r\n//        holder.bind(item)\r\n        holder.bind(items[position])\r\n    }\r\n\r\n    override fun getItemCount(): Int {\r\n        return items.size\r\n    }\r\n\r\n    fun addItems(items: List<Item>) {\r\n        this.items.addAll(items)\r\n        notifyDataSetChanged()\r\n    }\r\n\r\n    fun clearItems() {\r\n        items.clear()\r\n        notifyDataSetChanged()\r\n    }\r\n\r\n    class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n        fun bind(item: Item) {\r\n            itemView.tv_title.text ="}], "metadata": {"task_id": "fcitx5-android/160", "ground_truth": "        holder.ui.text.text = getItem(position)!!\r\n        holder.idx = position + offset\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\candidates\\adapter\\PagingCandidateViewAdapter.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nimport android.graphics.Rect\noverride fun getItemOffsets(\r\n        outRect: Rect,\r\n        view: View,\r\n        parent: RecyclerView,\r\n        state: RecyclerView.State\r\n    ) {\r\n        when (parent.layoutDirection) {\r\n            View.LAYOUT_DIRECTION_LTR -> {\r\n                outRect.right = drawable.intrinsicWidth\r\n            }\r\n            View.LAYOUT_DIRECTION_RTL -> {\r\n                outRect.left = drawable.intrinsicWidth\r\n            }\r\n            else -> {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/162", "ground_truth": "                // should not reach here\r\n                outRect.set(0, 0, 0, 0)\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\candidates\\expanded\\decoration\\FlexboxVerticalDecoration.kt"}}
{"prompt": "\n override fun invalidateSpanIndexCache() {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/164", "ground_truth": "        invalidate()\r\n        super.invalidateSpanIndexCache()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\candidates\\expanded\\SpanHelper.kt"}}
{"prompt": "\n import android.view.View\nfinal override fun onCreateView(): View {\r\n        candidateLayout = onCreateCandidateLayout().apply {\r\n            recyclerView.apply {\r\n                // disable item cross-fade animation\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/165", "ground_truth": "                itemAnimator = null\r\n            }\r\n        }\r\n        return candidateLayout\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\candidates\\expanded\\window\\BaseExpandedCandidateWindow.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.input.dependency.fcitx\nimport org.fcitx.fcitx5.android.input.candidates.adapter.PagingCandidateViewAdapter\nimport org.fcitx.fcitx5.android.daemon.launchOnReady\nimport kotlinx.coroutines.launch\nimport android.view.View\nfun bindCandidateUiViewHolder(holder: PagingCandidateViewAdapter.ViewHolder) {\r\n        holder.itemView.setOnClickListener {\r\n            fcitx.launchOnReady { it.select(holder.idx) }\r\n        }\r\n        if (horizontalCandidate.canForgetWord) {\r\n            holder.itemView.setOnLongClickListener { _ ->\r\n                holder.ui.showExtraActionMenu(onForget = {\r\n                    fcitx.launchOnReady { it.forget(holder.idx) }\r\n                })\r\n                true\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/166", "ground_truth": "            }\r\n        } else {\r\n            holder.itemView.setOnLongClickListener(null)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\candidates\\expanded\\window\\BaseExpandedCandidateWindow.kt"}}
{"prompt": "\n override fun onPreeditEmptyStateUpdate(empty: Boolean) {\r\n        if (empty) {\r", "choices": [{"text": "//            mEditText.setHint(R.string.empty_state_hint)\r\n        } else {\r\n//            mEditText.setHint(R.string.input_hint)\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/169", "ground_truth": "            windowManager.attachWindow(KeyboardWindow)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\candidates\\expanded\\window\\BaseExpandedCandidateWindow.kt"}}
{"prompt": "\n fun onDetached() {\r", "choices": [{"text": "//     mHandler.removeCallbacks(mRunnable)\r\n//     mHandler.removeCallbacks(mRunnable2)\r\n//     mHandler.removeCallbacks(mRunnable3)\r\n//     mHandler.removeCallbacks(mRunnable4)\r\n//     mHandler.removeCallbacks(mRunnable5)\r\n//     mHandler.removeCallbacks(mRunnable6)\r\n//     mHandler.removeCallbacks(mRunnable7)\r\n//     mHandler.removeCallbacks(mRunnable8)\r\n//     mHandler.removeCallbacks(mRunnable9)\r\n//    "}], "metadata": {"task_id": "fcitx5-android/171", "ground_truth": "        popupMenu?.dismiss()\r\n        popupMenu = null\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\clipboard\\ClipboardAdapter.kt"}}
{"prompt": "\n fun setEntry(text: String, pinned: Boolean) {\r", "choices": [{"text": "-    val entry = Entry(text, pinned)\r\n+    val entry = Entry(text, pinned, false)\r\n     entries.add(entry)\r\n     notifyItemInserted(entries.size - 1)\r\n }\r\n"}], "metadata": {"task_id": "fcitx5-android/172", "ground_truth": "        textView.text = text\r\n        pin.visibility = if (pinned) View.VISIBLE else View.GONE\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\clipboard\\ClipboardEntryUi.kt"}}
{"prompt": "\nvar isClipboardDbEmpty\nval snackbarCtx\nval theme\n override fun onDetached() {\r\n        clipboardEnabledPref.unregisterOnChangeListener(clipboardEnabledListener)\r\n        adapter.onDetached()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "fcitx5-android/174", "ground_truth": "        adapterSubmitJob?.cancel()\r\n        promptMenu?.dismiss()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\clipboard\\ClipboardWindow.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nimport android.graphics.Rect\noverride fun getItemOffsets(\r\n        outRect: Rect,\r\n        view: View,\r\n        parent: RecyclerView,\r\n        state: RecyclerView.State\r\n    ) = outRect.run {\r\n        top = space\r\n        bottom = space\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "fcitx5-android/175", "ground_truth": "        left = space\r\n        right = space\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\clipboard\\SpacesItemDecoration.kt"}}
{"prompt": "\nval start Int\nval end Int\n fun clear() {\r", "choices": [{"text": "start = 0\r\nend = 0\r\n}\r\nfun add(value: Int) {\r\nif (start == 0) {\r\nstart = value\r\nend = value\r\n} else {\r\nend = value\r\n}\r\n}\r\nfun getStart(): Int {\r\nreturn start\r\n}\r\nfun getEnd(): Int {\r\nreturn end\r\n}\r\n}\r\nclass Test {\r\nfun main(args: Array<String>) {\r\nval range = Range()\r\nrange.add(1)\r\nrange"}], "metadata": {"task_id": "fcitx5-android/176", "ground_truth": "        data[0] = 0\r\n        data[1] = 0\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\cursor\\CursorRange.kt"}}
{"prompt": "\n fun update(start: Int, end: Int) {\r\n        if (end >= start) {\r\n            data[0] = start\r\n            data[1] = end\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/177", "ground_truth": "        } else {\r\n            data[0] = end\r\n            data[1] = start\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\cursor\\CursorRange.kt"}}
{"prompt": "\nval start Int\nval end Int\n fun update(i: Int) {\r", "choices": [{"text": "start = i\r\nend = i\r\n}\r\n}\r\nclass Test {\r\nfun main(args: Array<String>) {\r\nval t = Test()\r\nt.update(10)\r\nprintln(t.start)\r\nprintln(t.end)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/178", "ground_truth": "        data[0] = i\r\n        data[1] = i\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\cursor\\CursorRange.kt"}}
{"prompt": "\nval start Int\nval end Int\n fun offset(offset: Int) {\r", "choices": [{"text": "start = offset\r\nend = offset + 1\r\n}\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/179", "ground_truth": "        data[0] += offset\r\n        data[1] += offset\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\cursor\\CursorRange.kt"}}
{"prompt": "\n fun resetTo(start: Int, end: Int = start) {\r", "choices": [{"text": "-    val start = start.coerceAtLeast(0)\r\n-    val end = end.coerceAtMost(size)\r\n-    if (start == end) return\r\n-    val newSize = end - start\r\n-    val newArray = arrayOfNulls<E>(newSize)\r\n-    System.arraycopy(array, start, newArray, 0, newSize)\r\n-    array = newArray\r\n-    size = newSize\r\n+    val newSize = end.coerceAtMost(size)\r\n+    if (start"}], "metadata": {"task_id": "fcitx5-android/180", "ground_truth": "        predictions.clear()\r\n        current.update(start, end)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\cursor\\CursorTracker.kt"}}
{"prompt": "\nval current\nval predictions\nval latest CursorRange\n fun predict(new: CursorRange) {\r\n        if (!latest.rangeEquals(new)) {\r\n            predictions.add(new)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/181", "ground_truth": "        }\r\n        Timber.d(\"current: $current; predicted: ${predictions.joinToString()}\")\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\cursor\\CursorTracker.kt"}}
{"prompt": "\n fun consume(start: Int, end: Int = start): Boolean {\r\n        if (current.rangeEquals(start, end)) {\r\n            return true\r\n        }\r\n        var matched = false\r\n        while (predictions.isNotEmpty()) {\r\n            if (predictions.removeFirst().rangeEquals(start, end)) {\r\n                matched = true\r\n                break\r\n            }\r\n        }\r\n        current.update(start, end)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/182", "ground_truth": "        if (!matched) {\r\n            Timber.d(\"unable to consume [$start,$end]\")\r\n        }\r\n        return matched\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\cursor\\CursorTracker.kt"}}
{"prompt": "\n fun setEnabled(position: Int) {\r\n        if (position == enabledIndex) return\r\n        notifyItemChanged(enabledIndex)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/185", "ground_truth": "        enabledIndex = position\r\n        notifyItemChanged(position)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\dialog\\InputMethodListAdapter.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nimport android.graphics.Rect\noverride fun getItemOffsets(\r\n        outRect: Rect,\r\n        view: View,\r\n        parent: RecyclerView,\r\n        state: RecyclerView.State\r\n    ) {\r\n        val position = parent.getChildAdapterPosition(view)\r\n        if (position != index) {\r", "choices": [{"text": "\n import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nimport android.graphics.Rect\noverride fun getItemOffsets(\r\n        outRect: Rect,\r\n        view: View,\r\n        parent: RecyclerView,\r\n        state: RecyclerView.State\r\n    ) {\r\n        val position = parent.getChildAdapterPosition(view)\r\n        if (position!= index) {\r\n//            outRect.top = 100\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/186", "ground_truth": "            outRect.set(0, 0, 0, 0)\r\n        } else {\r\n            outRect.set(0, dividerHeight, 0, 0)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\dialog\\SingleDividerDecoration.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.R\nimport androidx.annotation.StringRes\nprivate fun textButton(@StringRes id: Int) = GTextButton(ctx).apply {\r\n        text.setText(id)\r\n        text.setTextColor(theme.keyTextColor)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "fcitx5-android/189", "ground_truth": "        stateListAnimator = null\r\n        applyBorderedBackground()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\editing\\TextEditingUi.kt"}}
{"prompt": "\n import splitties.views.imageDrawable\nimport splitties.resources.drawable\nimport org.fcitx.fcitx5.android.R\nimport androidx.annotation.DrawableRes\nprivate fun iconButton(@DrawableRes icon: Int) = GImageButton(ctx).apply {\r\n        image.imageDrawable = drawable(icon)!!.apply {\r", "choices": [{"text": "//            setTint(Color.WHITE)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/190", "ground_truth": "            setTint(theme.altKeyTextColor)\r\n        }\r\n        padding = dp(10)\r\n        applyBorderedBackground()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\editing\\TextEditingUi.kt"}}
{"prompt": "\n import android.view.View\nfun updateSelection(hasSelection: Boolean, userSelection: Boolean) {\r\n        selectButton.isActivated = (hasSelection || userSelection)\r\n        if (hasSelection) {\r\n            selectAllButton.apply {\r\n                visibility = View.GONE\r\n            }\r\n            cutButton.apply {\r\n                visibility = View.VISIBLE\r\n            }\r\n        } else {\r\n            selectAllButton.apply {\r\n                visibility = View.VISIBLE\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/191", "ground_truth": "            cutButton.apply {\r\n                visibility = View.GONE\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\editing\\TextEditingUi.kt"}}
{"prompt": "\nvar hasSelection\nval theme\nval service FcitxInputMethodService\n override fun onAttached() {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/192", "ground_truth": "        val range = service.currentInputSelection\r\n        onSelectionUpdate(range.start, range.end)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\editing\\TextEditingWindow.kt"}}
{"prompt": "\n override fun onSelectionUpdate(start: Int, end: Int) {\r", "choices": [{"text": "//        val text = editText.text.toString()\r\n//        val textLength = text.length\r\n//        val selectionStart = editText.selectionStart\r\n//        val selectionEnd = editText.selectionEnd\r\n//        val selectionLength = selectionEnd - selectionStart\r\n//        val selectionText = text.substring(selectionStart, selectionEnd)\r\n//        val selectionTextLength = selectionText.length\r\n//        val selectionTextStart = selectionStart - start\r\n//        val selectionTextEnd = selectionEnd - start\r\n//        val selectionTextLength"}], "metadata": {"task_id": "fcitx5-android/193", "ground_truth": "        hasSelection = start != end\r\n        ui.updateSelection(hasSelection, userSelection)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\editing\\TextEditingWindow.kt"}}
{"prompt": "\n private fun parseCapsMode(capsMode: Int): String {\r\n        return CAP_MODE\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/195", "ground_truth": "            .filter { capsMode.hasFlag(it.getInt(null)) }\r\n            .joinToString(\"\\n  \") { it.name }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\editorinfo\\EditorInfoParser.kt"}}
{"prompt": "\nval IME_FLAG\nval TYPE_FLAGS\nval TYPE_VARIATION\n private fun parseStringArray(arr: Any?): String {\r\n        if (arr == null) return NULL\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/197", "ground_truth": "        if (arr !is Array<*> || arr[0] !is String) return arr.toString()\r\n        return arr.joinToString()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\editorinfo\\EditorInfoParser.kt"}}
{"prompt": " import android.os.Bundle\nval IME_FLAG\nval INPUT_TYPE_STATIC\nval EDITOR_INFO_MEMBER\nprivate fun parseBundle(bundle: Any?): String {\r\n        if (bundle == null) return NULL\r\n        if (bundle !is Bundle) return bundle.toString()\r", "choices": [{"text": " import android.os.Bundle\nval IME_FLAG\nval INPUT_TYPE_STATIC\nval EDITOR_INFO_MEMBER\nprivate fun parseBundle(bundle: Any?): String {\r\n        if (bundle == null) return NULL\r\n        if (bundle!is Bundle) return bundle.toString()\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/198", "ground_truth": "        @Suppress(\"DEPRECATION\")\r\n        return bundle.keySet().joinToString(\"\\n\") { \"$it => ${bundle.get(it)}\" }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\editorinfo\\EditorInfoParser.kt"}}
{"prompt": "\n import splitties.views.dsl.core.view\nimport splitties.views.dsl.core.textView\nprivate fun createTextView(str: String) = textView {\r\n        text = str\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "fcitx5-android/199", "ground_truth": "        setPaddingDp(3)\r\n        setTextColor(theme.keyTextColor)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\editorinfo\\EditorInfoUi.kt"}}
{"prompt": "\n import splitties.views.dsl.core.view\nimport android.widget.TableRow\nimport android.widget.TableLayout\nprivate fun TableLayout.addRow(label: String, value: String) {\r\n        addView(view(::TableRow) {\r\n            addView(createTextView(label))\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/200", "ground_truth": "            addView(createTextView(value))\r\n        })\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\editorinfo\\EditorInfoUi.kt"}}
{"prompt": "\n fun setValues(values: Map<String, String>) {\r\n        table.apply {\r\n            removeAllViews()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/201", "ground_truth": "            values.forEach { (k, v) ->\r\n                addRow(k, v)\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\editorinfo\\EditorInfoUi.kt"}}
{"prompt": "\nval recreateInputViewListener\nvar inputView InputView?\nval currentInputSelection CursorRange\n private fun resetComposingState() {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/202", "ground_truth": "        composing.clear()\r\n        composingText = FormattedText.Empty\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\FcitxInputMethodService.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.data.theme.Theme\nimport android.view.View\nprivate fun recreateInputView(theme: Theme) {\r\n        // InputView should be created first in onCreateInputView\r\n        // setInputView should be used to 'replace' current InputView only\r", "choices": [{"text": "\n import org.fcitx.fcitx5.android.data.theme.Theme\nimport android.view.View\nprivate fun recreateInputView(theme: Theme) {\r\n        // InputView should be created first in onCreateInputView\r\n        // setInputView should be used to'replace' current InputView only\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/203", "ground_truth": "        InputView(this, fcitx, theme).also {\r\n            inputView = it\r\n            setInputView(it)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\FcitxInputMethodService.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.CoroutineStart\nimport kotlinx.coroutines.CoroutineScope\nprivate fun postJob(scope: CoroutineScope, block: suspend () -> Unit): Job {\r\n        val job = scope.launch(start = CoroutineStart.LAZY) { block() }\r", "choices": [{"text": "job.start()\r\nreturn job\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/204", "ground_truth": "        jobs.trySend(job)\r\n        return job\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\FcitxInputMethodService.kt"}}
{"prompt": "\n fun deleteSelection() {\r\n        val lastSelection = selection.latest\r\n        if (lastSelection.isEmpty()) return\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/208", "ground_truth": "        selection.predict(lastSelection.start)\r\n        currentInputConnection?.commitText(\"\", 1)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\FcitxInputMethodService.kt"}}
{"prompt": "\n import android.content.res.Configuration\noverride fun onConfigurationChanged(newConfig: Configuration) {\r", "choices": [{"text": "super.onConfigurationChanged(newConfig)\r\nif (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n//landscape\r\n} else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {\r\n//portrait\r\n}\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/211", "ground_truth": "        super.onConfigurationChanged(newConfig)\r\n        postFcitxJob { reset() }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\FcitxInputMethodService.kt"}}
{"prompt": "\n import android.view.Window\noverride fun onWindowShown() {\r", "choices": [{"text": "super.onWindowShown()\r\nwindow.decorView.systemUiVisibility = View.SYSTEM_UI_FLAG_FULLSCREEN\r\n}\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/212", "ground_truth": "        super.onWindowShown()\r\n        InputFeedbacks.syncSystemPrefs()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\FcitxInputMethodService.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.R\nimport androidx.annotation.RequiresApi\nimport android.view.inputmethod.InlineSuggestionsResponse\nimport android.os.Build\n @RequiresApi(Build.VERSION_CODES.R)\r\n    override fun onInlineSuggestionsResponse(response: InlineSuggestionsResponse): Boolean {\r", "choices": [{"text": "//        val suggestions = response.suggestions\r\n//        val inlineSuggestions = suggestions.inlineSuggestions\r\n//        val inlineSuggestionsList = inlineSuggestions.inlineSuggestionsList\r\n//        val inlineSuggestionsListSize = inlineSuggestionsList.size\r\n//        val inlineSuggestionsList1 = inlineSuggestionsList[0]\r\n//        val inlineSuggestionsList1Size = inlineSuggestionsList1.size\r\n//        val inlineSuggestionsList11 = inlineSuggestionsList1[0]\r\n//        val inlineSuggestionsList11Size = inlineSuggestionsList11.size\r\n//        val inlineSuggestions"}], "metadata": {"task_id": "fcitx5-android/218", "ground_truth": "        if (!inlineSuggestions) return false\r\n        return inputView?.handleInlineSuggestions(response) ?: false\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\FcitxInputMethodService.kt"}}
{"prompt": "\n import timber.log.Timber\nimport android.view.View\noverride fun onFinishInputView(finishingInput: Boolean) {\r\n        Timber.d(\"onFinishInputView: finishingInput=$finishingInput\")\r\n        currentInputConnection?.finishComposingText()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "fcitx5-android/220", "ground_truth": "        postFcitxJob {\r\n            focus(false)\r\n        }\r\n        inputView?.finishInput()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\FcitxInputMethodService.kt"}}
{"prompt": "\n override fun onFinishInput() {\r", "choices": [{"text": "//     super.onFinishInput()\r\n }\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/221", "ground_truth": "        Timber.d(\"onFinishInput\")\r\n        capabilityFlags = CapabilityFlags.DefaultFlags\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\FcitxInputMethodService.kt"}}
{"prompt": "\n import android.view.KeyEvent\noverride fun onUnbindInput() {\r\n        cachedKeyEvents.evictAll()\r\n        cachedKeyEventIndex = 0\r\n        cursorUpdateIndex = 0\r\n        // currentInputBinding can be null on some devices under some special Multi-screen mode\r\n        val uid = currentInputBinding?.uid ?: return\r", "choices": [{"text": "\n import android.view.KeyEvent\noverride fun onUnbindInput() {\r\n        cachedKeyEvents.evictAll()\r\n        cachedKeyEventIndex = 0\r\n        cursorUpdateIndex = 0\r\n        // currentInputBinding can be null on some devices under some special Multi-screen mode\r\n        val uid = currentInputBinding?.uid?: return\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/222", "ground_truth": "        Timber.d(\"onUnbindInput: uid=$uid\")\r\n        postFcitxJob {\r\n            deactivate(uid)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\FcitxInputMethodService.kt"}}
{"prompt": "\nval expandKeypressArea\nval swipeSymbolDirection\nval spaceSwipeMoveCursor\n override fun onSizeChanged(w: Int, h: Int, oldw: Int, oldh: Int) {\r", "choices": [{"text": "super.onSizeChanged(w, h, oldw, oldh)\r\nval width = w\r\nval height = h\r\nval padding = 10\r\nval buttonWidth = (width - padding * 2) / 3\r\nval buttonHeight = (height - padding * 2) / 3\r\nval buttonSize = min(buttonWidth, buttonHeight)\r\nval buttonPadding = (buttonWidth - buttonSize) / 2\r\nval buttonX = padding + buttonPadding\r\nval buttonY = padding + buttonPadding\r\nval buttonRadius = button"}], "metadata": {"task_id": "fcitx5-android/225", "ground_truth": "        val (x, y) = intArrayOf(0, 0).also { getLocationInWindow(it) }\r\n        bounds.set(x, y, x + width, y + height)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\keyboard\\BaseKeyboard.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.input.popup.PopupAction\nprivate fun onPopupChangeFocus(viewId: Int, x: Float, y: Float): Boolean {\r\n        val changeFocusAction = PopupAction.ChangeFocusAction(viewId, x, y)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "fcitx5-android/228", "ground_truth": "        popupActionListener?.onPopupAction(changeFocusAction)\r\n        return changeFocusAction.outResult\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\keyboard\\BaseKeyboard.kt"}}
{"prompt": "\n override fun setEnabled(enabled: Boolean) {\r\n        super.setEnabled(enabled)\r\n        if (!enabled) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/230", "ground_truth": "            isPressed = false\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\keyboard\\CustomGestureView.kt"}}
{"prompt": "\n import android.view.View\nprivate fun pointInView(x: Float, y: Float): Boolean {\r\n        return -touchSlop <= x &&\r\n                -touchSlop <= y &&\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "fcitx5-android/231", "ground_truth": "                x < (width + touchSlop) &&\r\n                y < (height + touchSlop)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\keyboard\\CustomGestureView.kt"}}
{"prompt": "\n override fun setOnLongClickListener(l: OnLongClickListener?) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.setOnLongClickListener(l)\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/233", "ground_truth": "        longPressEnabled = l != null\r\n        super.setOnLongClickListener(l)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\keyboard\\CustomGestureView.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.input.wm.InputWindow\nimport androidx.transition.Slide\nimport android.view.Gravity\noverride fun enterAnimation(lastWindow: InputWindow) = Slide().apply {\r\n        slideEdge = Gravity.BOTTOM\r\n    }.takeIf {\r", "choices": [{"text": "//        lastWindow.windowToken!= null\r\n    }?: Transition.NO_ANIMATION\n"}], "metadata": {"task_id": "fcitx5-android/234", "ground_truth": "        // disable animation switching between picker\r\n        lastWindow !is PickerWindow\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\keyboard\\KeyboardWindow.kt"}}
{"prompt": " import org.fcitx.fcitx5.android.input.wm.InputWindow\nval bar KawaiiBarComponent\nval theme\nval fcitx\noverride fun exitAnimation(nextWindow: InputWindow) =\r\n        super.exitAnimation(nextWindow).takeIf {\r", "choices": [{"text": "//            nextWindow.window.decorView.rootView.findViewById<View>(R.id.fcitx_input_view)?.let {\r\n//                it.layoutParams.height = 0\r\n//                it.requestLayout()\r\n//            }\r\n            true\r\n        }\n"}], "metadata": {"task_id": "fcitx5-android/235", "ground_truth": "            // disable animation switching between picker\r\n            nextWindow !is PickerWindow\r\n        }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\keyboard\\KeyboardWindow.kt"}}
{"prompt": "\n import splitties.views.dsl.core.frameLayout\nimport org.fcitx.fcitx5.android.input.dependency.fcitx\nimport org.fcitx.fcitx5.android.R\nimport android.view.View\noverride fun onCreateView(): View {\r\n        keyboardView = context.frameLayout(R.id.keyboard_view)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "fcitx5-android/236", "ground_truth": "        attachLayout(TextKeyboard.Name)\r\n        return keyboardView\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\keyboard\\KeyboardWindow.kt"}}
{"prompt": "\n import splitties.views.dsl.core.view\nimport android.view.View\nfun updateBounds() {\r\n        val (x, y) = cachedLocation.also { appearanceView.getLocationInWindow(it) }\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "fcitx5-android/244", "ground_truth": "        cachedBounds.set(x, y, x + appearanceView.width, y + appearanceView.height)\r\n        boundsValid = true\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\keyboard\\KeyView.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.data.theme.ThemePrefs.PunctuationPosition\nimport org.fcitx.fcitx5.android.data.theme.ThemeManager\nimport org.fcitx.fcitx5.android.data.theme.Theme\nimport org.fcitx.fcitx5.android.R\nimport android.content.res.Configuration\noverride fun onConfigurationChanged(newConfig: Configuration) {\r\n        if (ThemeManager.prefs.punctuationPosition.getValue() == PunctuationPosition.TopRight) {\r\n            return\r", "choices": [{"text": "\n        }\r\n        super.onConfigurationChanged(newConfig)\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/246", "ground_truth": "        }\r\n        applyLayout(newConfig.orientation)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\keyboard\\KeyView.kt"}}
{"prompt": "\n import splitties.views.dsl.core.view\nimport org.fcitx.fcitx5.android.input.keyboard.KeyDef.Appearance.Variant\nimport org.fcitx.fcitx5.android.data.theme.Theme\nimport org.fcitx.fcitx5.android.R\nimport androidx.annotation.DrawableRes\nimport android.widget.ImageView\nimport android.view.View\nimport android.graphics.drawable.Drawable\nimport android.graphics.Color\nimport android.content.res.ColorStateList\nprivate fun ImageView.configure(theme: Theme, @DrawableRes src: Int, variant: Variant) = apply {\r\n    isClickable = false\r\n    isFocusable = false\r\n    imageTintList = ColorStateList.valueOf(\r\n        when (variant) {\r\n            Variant.Normal -> theme.keyTextColor\r\n            Variant.AltForeground, Variant.Alternative -> theme.altKeyTextColor\r", "choices": [{"text": "//            Variant.Disabled -> theme.disabledKeyTextColor\r\n        }\r\n    )\r\n    setImageResource(src)\r\n}\n\nprivate fun View.configure(theme: Theme, @DrawableRes src: Int, variant: Variant) = apply {\r\n    isClickable = false\r\n    isFocusable = false\r\n    backgroundTintList = ColorStateList.valueOf(\r\n        when (variant) {\r\n            Variant.Normal -> theme.keyBackgroundColor\r\n            Variant.AltForeground, Variant.Alternative -> theme.altKeyBackgroundColor\r\n//            Variant.Disabled -> theme.disabledKeyBackgroundColor\r\n        }\r\n    )\r\n    setBackgroundResource(src)"}], "metadata": {"task_id": "fcitx5-android/247", "ground_truth": "            Variant.Accent -> theme.accentKeyTextColor\r\n        }\r\n    )\r\n    imageResource = src\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\keyboard\\KeyView.kt"}}
{"prompt": "\n private fun transformAlphabet(c: String): String {\r\n        return when (capsState) {\r\n            CapsState.None -> c.lowercase()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/248", "ground_truth": "            else -> c.uppercase()\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\keyboard\\TextKeyboard.kt"}}
{"prompt": "\n private fun transformInputString(c: String): String {\r\n        if (c.length != 1) return c\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/249", "ground_truth": "        if (c[0].isLetter()) return transformAlphabet(c)\r\n        return transformPunctuation(c)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\keyboard\\TextKeyboard.kt"}}
{"prompt": "\n override fun onAttach() {\r\n        capsState = CapsState.None\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "fcitx5-android/252", "ground_truth": "        updateCapsButtonIcon()\r\n        updateAlphabetKeys()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\keyboard\\TextKeyboard.kt"}}
{"prompt": "\n override fun onPunctuationUpdate(mapping: Map<String, String>) {\r", "choices": [{"text": "//     Log.d(\"onPunctuationUpdate\", mapping.toString())\r\n }\r\n\r\n override fun onPunctuationUpdate(mapping: Map<String, String>, isFinal: Boolean) {\r\n//     Log.d(\"onPunctuationUpdate\", mapping.toString())\r\n }\r\n\r\n override fun onPunctuationUpdate(mapping: Map<String, String>, isFinal: Boolean, isError: Boolean) {\r\n//     Log.d(\"onPunctuationUpdate\", mapping.toString())\r\n }\r\n\r\n override fun onPunctuationUpdate(mapping: Map<String, String>, isFinal: Boolean, isError"}], "metadata": {"task_id": "fcitx5-android/253", "ground_truth": "        punctuationMapping = mapping\r\n        updatePunctuationKeys()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\keyboard\\TextKeyboard.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.core.InputMethodEntry\noverride fun onInputMethodUpdate(ime: InputMethodEntry) {\r\n        space.mainText.text = buildString {\r\n            append(ime.displayName)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/254", "ground_truth": "            ime.subMode.run { label.ifEmpty { name.ifEmpty { null } } }?.let { append(\" ($it)\") }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\keyboard\\TextKeyboard.kt"}}
{"prompt": "\n private fun switchCapsState(lock: Boolean = false) {\r\n        capsState = if (lock) when (capsState) {\r\n            CapsState.Lock -> CapsState.None\r\n            else -> CapsState.Lock\r\n        } else when (capsState) {\r\n            CapsState.None -> CapsState.Once\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/255", "ground_truth": "            else -> CapsState.None\r\n        }\r\n        updateCapsButtonIcon()\r\n        updateAlphabetKeys()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\keyboard\\TextKeyboard.kt"}}
{"prompt": "\n fun forUid(uid: Int): String {\r\n        val cached = get(uid)\r\n        if (cached != null) return cached\r\n        // returns \"${sharedUserIdName}:${uid}\" rather than package name if app uses sharedUserId\r\n        val name = ctx.packageManager.getNameForUid(uid)\r\n        if (name != null) {\r\n            // strip :uid to make it constant across devices\r\n            val pkgName = name.substringBeforeLast(':')\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/260", "ground_truth": "            put(uid, pkgName)\r\n            return pkgName\r\n        }\r\n        return uid.toString()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\PackageNameCache.kt"}}
{"prompt": "\n override fun onViewDetachedFromWindow(holder: ViewHolder) {\r", "choices": [{"text": "super.onViewDetachedFromWindow(holder)\r\nholder.itemView.clearAnimation()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/264", "ground_truth": "        holder.ui.keyActionListener = null\r\n        holder.ui.popupActionListener = null\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\picker\\PickerPagesAdapter.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.input.popup.PopupAction\nprivate fun onPopupChangeFocus(viewId: Int, x: Float, y: Float): Boolean {\r\n        val changeFocusAction = PopupAction.ChangeFocusAction(viewId, x, y)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "fcitx5-android/265", "ground_truth": "        popupActionListener?.onPopupAction(changeFocusAction)\r\n        return changeFocusAction.outResult\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\picker\\PickerPageUi.kt"}}
{"prompt": "\n import splitties.views.dsl.core.view\nimport androidx.core.view.updateLayoutParams\nimport androidx.constraintlayout.widget.ConstraintLayout\nfun updateScrollProgress(current: Int, progress: Float) {\r\n        highlight.updateLayoutParams<ConstraintLayout.LayoutParams> {\r", "choices": [{"text": "//            setMargins(0, 0, 0, 0)\r\n            setMargins(0, 0, 0, (current * progress).toInt())\r\n        }\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/267", "ground_truth": "            marginStart = ((current + progress) * highlight.width).roundToInt()\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\picker\\PickerPaginationUi.kt"}}
{"prompt": "\n fun setLabel(str: String) {\r\n            label.text = str\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "fcitx5-android/268", "ground_truth": "            icon.isVisible = false\r\n            label.isVisible = true\r\n        }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\picker\\PickerTabsUi.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.utils.alpha\nfun setActive(active: Boolean) {\r\n            val color = theme.keyTextColor.alpha(if (active) 1f else 0.5f)\r", "choices": [{"text": ""}], "metadata": {"task_id": "fcitx5-android/270", "ground_truth": "            label.setTextColor(color)\r\n            icon.imageDrawable?.setTint(color)\r\n        }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\picker\\PickerTabsUi.kt"}}
{"prompt": "\nvar onTabClick\nvar selected\nval label\n fun activateTab(index: Int) {\r\n        if (index == selected) return\r\n        if (selected >= 0) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/271", "ground_truth": "            tabs[selected].setActive(false)\r\n        }\r\n        tabs[index].setActive(true)\r\n        selected = index\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\picker\\PickerTabsUi.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.input.wm.InputWindow\nimport org.fcitx.fcitx5.android.input.keyboard.KeyboardWindow\nimport androidx.transition.Transition\noverride fun enterAnimation(lastWindow: InputWindow): Transition? {\r\n        // disable animation switching between keyboard\r\n        return if (lastWindow !is KeyboardWindow && lastWindow !is PickerWindow)\r", "choices": [{"text": "\n import org.fcitx.fcitx5.android.input.wm.InputWindow\nimport org.fcitx.fcitx5.android.input.keyboard.KeyboardWindow\nimport androidx.transition.Transition\noverride fun enterAnimation(lastWindow: InputWindow): Transition? {\r\n        // disable animation switching between keyboard\r\n        return if (lastWindow!is KeyboardWindow && lastWindow!is PickerWindow)\r\nTransition.EMPTY else null\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/272", "ground_truth": "            Slide().apply { slideEdge = Gravity.BOTTOM }\r\n        else null\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\picker\\PickerWindow.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.input.wm.InputWindow\nimport org.fcitx.fcitx5.android.input.keyboard.KeyboardWindow\nimport androidx.transition.Transition\noverride fun exitAnimation(nextWindow: InputWindow): Transition? {\r\n        // disable animation switching between keyboard\r\n        return if (nextWindow !is KeyboardWindow && nextWindow !is PickerWindow)\r", "choices": [{"text": "\n import org.fcitx.fcitx5.android.input.wm.InputWindow\nimport org.fcitx.fcitx5.android.input.keyboard.KeyboardWindow\nimport androidx.transition.Transition\noverride fun exitAnimation(nextWindow: InputWindow): Transition? {\r\n        // disable animation switching between keyboard\r\n        return if (nextWindow!is KeyboardWindow && nextWindow!is PickerWindow)\r\nTransition.EMPTY else null\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/273", "ground_truth": "            super.exitAnimation(nextWindow)\r\n        else null\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\picker\\PickerWindow.kt"}}
{"prompt": "\nval theme\nval service\nval popup PopupComponent\n override fun onAttached() {\r\n        pickerLayout.embeddedKeyboard.also {\r\n            it.onReturnDrawableUpdate(returnKeyDrawable.resourceId)\r", "choices": [{"text": "//            it.onReturnDrawableUpdate(R.drawable.ic_keyboard_return_black_24dp)\r\n            it.onReturnDrawableUpdate(R.drawable.ic_keyboard_return_black_24dp)\r\n            it.onReturnDrawableUpdate(R.drawable.ic_keyboard_return_black_24dp)\r\n            it.onReturnDrawableUpdate(R.drawable.ic_keyboard_return_black_24dp)\r\n            it.onReturnDrawableUpdate(R.drawable.ic_keyboard_return_black_24dp)\r\n            it.onReturnDrawable"}], "metadata": {"task_id": "fcitx5-android/274", "ground_truth": "            it.keyActionListener = keyActionListener\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\picker\\PickerWindow.kt"}}
{"prompt": "\n import splitties.views.dsl.core.view\nimport splitties.views.dsl.core.Ui\nprivate fun markFocus(index: Int) {\r\n        keyUis.getOrNull(index)?.apply {\r\n            root.background = focusBackground\r", "choices": [{"text": "//            root.foreground = focusForeground\r\n            root.foreground = Color.WHITE\r\n            root.text = text\r\n            root.textSize = 16f\r\n            root.setTextColor(Color.WHITE)\r\n            root.setPadding(16, 16, 16, 16)\r\n            root.setBackgroundColor(Color.BLACK)\r\n            root.setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0)\r\n            root.setCompoundDrawablePadding(16)\r\n            root.setCompoundDrawablePadding(16)\r\n            root.setCompoundDrawablePadding(16"}], "metadata": {"task_id": "fcitx5-android/281", "ground_truth": "            textView.setTextColor(theme.genericActiveForegroundColor)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\popup\\PopupKeyboardUi.kt"}}
{"prompt": "\n import splitties.views.dsl.core.view\nimport splitties.views.dsl.core.Ui\nprivate fun markInactive(index: Int) {\r\n        keyUis.getOrNull(index)?.apply {\r\n            root.background = null\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/282", "ground_truth": "            textView.setTextColor(theme.popupTextColor)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\popup\\PopupKeyboardUi.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.input.keyboard.KeyAction\noverride fun onTrigger(): KeyAction? {\r", "choices": [{"text": ""}], "metadata": {"task_id": "fcitx5-android/283", "ground_truth": "        val key = keys.getOrNull(focusedIndex) ?: return null\r\n        return KeyAction.FcitxKeyAction(key)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\popup\\PopupKeyboardUi.kt"}}
{"prompt": "\nvar focusedIndex\nval focusColumn\nval offsetX\n private fun markFocus(index: Int) {\r\n        keyViews.getOrNull(index)?.apply {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/284", "ground_truth": "            background = activeBackground\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\popup\\PopupMenuUi.kt"}}
{"prompt": "\nval inactiveBackground\nval offsetX\nval offsetY\n private fun markInactive(index: Int) {\r\n        keyViews.getOrNull(index)?.apply {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/285", "ground_truth": "            background = inactiveBackground\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\popup\\PopupMenuUi.kt"}}
{"prompt": "\n import kotlin.math.floor\noverride fun onChangeFocus(x: Float, y: Float): Boolean {\r\n        var newColumn = floor(x / keySize).toInt()\r\n        if (newColumn < -2 || newColumn > columnCount + 1) {\r\n            onDismissSelf(this)\r\n            return true\r\n        }\r\n        newColumn = limitIndex(newColumn, columnCount)\r\n        val newFocus = columnOrder[newColumn]\r\n        if (newFocus < keyViews.size) {\r\n            markInactive(focusedIndex)\r", "choices": [{"text": "//            markActive(newFocus)\r\n            focusedIndex = newFocus\r\n            keyViews[focusedIndex].requestFocus()\r\n            return true\r\n        }\r\n        return false\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/286", "ground_truth": "            markFocus(newFocus)\r\n            focusedIndex = newFocus\r\n        }\r\n        return false\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\popup\\PopupMenuUi.kt"}}
{"prompt": "\n import splitties.views.horizontalPadding\nimport splitties.views.dsl.core.textView\nimport splitties.views.dsl.core.add\nimport splitties.views.backgroundColor\nimport splitties.dimensions.dp\nimport android.widget.TextView\nimport android.view.View\nprivate fun createTextView() = textView {\r\n        backgroundColor = barBackground\r\n        horizontalPadding = dp(8)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "fcitx5-android/287", "ground_truth": "        setTextColor(theme.keyTextColor)\r\n        textSize = 16f\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\preedit\\PreeditUi.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.input.dependency.fcitx\nimport org.fcitx.fcitx5.android.daemon.launchOnReady\nimport org.fcitx.fcitx5.android.core.Action\nimport org.fcitx.fcitx5.android.R\nimport kotlinx.coroutines.launch\nprivate fun activateAction(action: Action) {\r\n        fcitx.launchOnReady {\r", "choices": [{"text": "//            fcitx.action(action)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/292", "ground_truth": "            it.activateAction(action.id)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\status\\StatusAreaWindow.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.input.dependency.fcitx\nimport org.fcitx.fcitx5.android.core.Action\noverride fun onStatusAreaUpdate(actions: Array<Action>) {\r\n        adapter.entries = arrayOf(\r\n            *staticEntries,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/293", "ground_truth": "            *Array(actions.size) { StatusAreaEntry.fromAction(actions[it]) }\r\n        )\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\status\\StatusAreaWindow.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.input.dependency.fcitx\nimport org.fcitx.fcitx5.android.daemon.launchOnReady\nimport org.fcitx.fcitx5.android.R\nimport kotlinx.coroutines.launch\noverride fun onAttached() {\r\n        fcitx.launchOnReady {\r\n            val data = it.statusArea()\r", "choices": [{"text": "//            val data = it.statusArea(0)\r\n            val status = data.status\r\n            val icon = data.icon\r\n            val label = data.label\r\n            val input = data.input\r\n            val inputId = data.inputId\r\n            val inputType = data.inputType\r\n            val inputMode = data.inputMode\r\n            val inputModeId = data.inputModeId\r\n            val inputModeLabel = data.inputModeLabel\r\n            val inputModeIcon = data.inputModeIcon\r\n            val inputModeIconId = data.inputModeIconId\r\n            val inputModeIconLabel = data.inputModeIconLabel\r\n           "}], "metadata": {"task_id": "fcitx5-android/294", "ground_truth": "            service.lifecycleScope.launch {\r\n                onStatusAreaUpdate(data)\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\status\\StatusAreaWindow.kt"}}
{"prompt": "\nval fcitx FcitxConnection\nval adapter StatusAreaAdapter\nval staticEntries\n override fun onDetached() {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/295", "ground_truth": "        popupMenu?.dismiss()\r\n        popupMenu = null\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\input\\status\\StatusAreaWindow.kt"}}
{"prompt": "\n import java.io.File\noverride fun onCreate(): Boolean {\r\n        baseDir = context!!.getExternalFilesDir(null)!!\r\n        docIdPrefix = \"${baseDir.parent}${File.separator}\"\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "fcitx5-android/300", "ground_truth": "        textFilePaths = Array(TEXT_FILES.size) { baseDir.resolve(TEXT_FILES[it]).absolutePath }\r\n        return true\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\provider\\FcitxDataProvider.kt"}}
{"prompt": "\n import java.io.File\nimport org.fcitx.fcitx5.android.R\nimport android.provider.DocumentsContract.Document\nimport android.database.MatrixCursor\noverride fun queryChildDocuments(\r\n        parentDocumentId: String,\r\n        projection: Array<String>?,\r\n        sortOrder: String?\r\n    ) = MatrixCursor(projection ?: DEFAULT_DOCUMENT_PROJECTION).apply {\r\n        fileFromDocId(parentDocumentId).listFiles()?.forEach {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/302", "ground_truth": "            newRowFromFile(it)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\provider\\FcitxDataProvider.kt"}}
{"prompt": "\n import java.io.File\nimport android.provider.DocumentsContract.Document\nimport android.os.ParcelFileDescriptor\nimport android.os.CancellationSignal\noverride fun openDocument(\r\n        documentId: String,\r\n        mode: String,\r\n        signal: CancellationSignal?\r\n    ): ParcelFileDescriptor {\r\n        return ParcelFileDescriptor.open(\r\n            fileFromDocId(documentId),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/303", "ground_truth": "            ParcelFileDescriptor.parseMode(mode)\r\n        )\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\provider\\FcitxDataProvider.kt"}}
{"prompt": "\n import java.io.FileNotFoundException\nimport java.io.File\nimport android.provider.DocumentsContract.Document\n @Throws(FileNotFoundException::class)\r\n    override fun moveDocument(\r\n        sourceDocumentId: String,\r\n        sourceParentDocumentId: String,\r\n        targetParentDocumentId: String\r\n    ): String {\r\n        val oldFile = fileFromDocId(sourceDocumentId)\r\n        val newFile = createAbstractFile(targetParentDocumentId, oldFile.name)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/307", "ground_truth": "        oldFile.renameTo(newFile)\r\n        return newFile.docId\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\provider\\FcitxDataProvider.kt"}}
{"prompt": "\n import androidx.activity.OnBackPressedDispatcher\noverride fun enterMultiSelect(onBackPressedDispatcher: OnBackPressedDispatcher) {\r\n        if (shouldShowFab) {\r\n            fab.hide()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/310", "ground_truth": "        }\r\n        super.enterMultiSelect(onBackPressedDispatcher)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\common\\BaseDynamicListUi.kt"}}
{"prompt": "\nvar enableUndo\nvar suspendUndo\nval fab\n override fun exitMultiSelect() {\r\n        if (shouldShowFab) {\r\n            fab.show()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/311", "ground_truth": "        }\r\n        super.exitMultiSelect()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\common\\BaseDynamicListUi.kt"}}
{"prompt": "\n import splitties.views.dsl.core.view\nimport splitties.views.dsl.core.add\nimport androidx.recyclerview.widget.ItemTouchHelper\nfun addTouchCallback(\r\n        touchCallback: DynamicListTouchCallback<T> = DynamicListTouchCallback(ctx, this)\r\n    ) {\r\n        itemTouchHelper = ItemTouchHelper(touchCallback).also {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/312", "ground_truth": "            it.attachToRecyclerView(recyclerView)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\common\\BaseDynamicListUi.kt"}}
{"prompt": "\n import androidx.annotation.CallSuper\n @CallSuper\r\n    open fun addItem(idx: Int = _entries.size, item: T) {\r\n        _entries.add(idx, item)\r\n        notifyItemInserted(idx)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/317", "ground_truth": "        listener?.onItemAdded(idx, item)\r\n        mainViewModel?.showToolbarEditButton()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\common\\DynamicListAdapter.kt"}}
{"prompt": "\n import java.util.Collections\nimport androidx.annotation.CallSuper\n @CallSuper\r\n    open fun swapItem(fromIdx: Int, toIdx: Int) {\r\n        Collections.swap(_entries, fromIdx, toIdx)\r", "choices": [{"text": ""}], "metadata": {"task_id": "fcitx5-android/319", "ground_truth": "        notifyItemMoved(fromIdx, toIdx)\r\n        listener?.onItemSwapped(fromIdx, toIdx, _entries[toIdx])\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\common\\DynamicListAdapter.kt"}}
{"prompt": "\n import androidx.annotation.CallSuper\n @CallSuper\r\n    open fun updateItem(idx: Int, item: T) {\r\n        val old = _entries[idx]\r\n        _entries[idx] = item\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/320", "ground_truth": "        notifyItemChanged(idx)\r\n        listener?.onItemUpdated(idx, old, item)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\common\\DynamicListAdapter.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.R\nimport androidx.recyclerview.widget.RecyclerView\noverride fun onMove(\r\n        recyclerView: RecyclerView,\r\n        viewHolder: RecyclerView.ViewHolder,\r\n        target: RecyclerView.ViewHolder\r\n    ): Boolean {\r", "choices": [{"text": ""}], "metadata": {"task_id": "fcitx5-android/322", "ground_truth": "        adapter.swapItem(viewHolder.bindingAdapterPosition, target.bindingAdapterPosition)\r\n        return true\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\common\\DynamicListTouchCallback.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.R\nimport androidx.recyclerview.widget.RecyclerView\noverride fun clearView(recyclerView: RecyclerView, viewHolder: RecyclerView.ViewHolder) {\r\n        super.clearView(recyclerView, viewHolder)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "fcitx5-android/323", "ground_truth": "        // interaction is over, time to reset our elevation\r\n        reset = true\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\common\\DynamicListTouchCallback.kt"}}
{"prompt": "\n import android.widget.ImageButton\nimport android.widget.CheckBox\nimport android.view.View\nimport android.content.Context\n\r\n@Suppress(\"FunctionName\")\r\nfun <T> Context.DynamicListUi(\r\n    mode: BaseDynamicListUi.Mode<T>,\r\n    initialEntries: List<T>,\r\n    enableOrder: Boolean = false,\r\n    initCheckBox: (CheckBox.(T) -> Unit) = { visibility = View.GONE },\r\n    initSettingsButton: (ImageButton.(T) -> Unit) = { visibility = View.GONE },\r\n    show: (T) -> String\r\n): BaseDynamicListUi<T> = object :\r\n    BaseDynamicListUi<T>(\r\n        this,\r\n        mode,\r\n        initialEntries,\r\n        enableOrder,\r\n        initCheckBox,\r\n        initSettingsButton\r\n    ) {\r\n    init {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/324", "ground_truth": "        addTouchCallback()\r\n    }\r\n\r\n    override fun showEntry(x: T): String = show(x)\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\common\\Preset.kt"}}
{"prompt": "\n import android.widget.ImageButton\nimport android.widget.CheckBox\nimport android.content.Context\n\r\n@Suppress(\"FunctionName\")\r\nfun <T> Context.CheckBoxListUi(\r\n    initialEntries: List<T>,\r\n    initCheckBox: (CheckBox.(T) -> Unit),\r\n    initSettingsButton: (ImageButton.(T) -> Unit),\r\n    show: (T) -> String\r\n) = DynamicListUi(\r\n    BaseDynamicListUi.Mode.Immutable(),\r\n    initialEntries,\r", "choices": [{"text": ") {\r\n    override fun CheckBox.init(entry: T) {\r\n        initCheckBox(entry)\r\n    }\r\n\r\n    override fun ImageButton.init(entry: T) {\r\n        initSettingsButton(entry)\r\n    }\r\n\r\n    override fun show(entry: T) = show(entry)\r\n}\r\n<file_sep>/app/src/main/java/com/example/android/dynamiclist/ui/DynamicListUi.kt\n/*\n * Copyright 2020 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may"}], "metadata": {"task_id": "fcitx5-android/325", "ground_truth": "    false,\r\n    initCheckBox,\r\n    initSettingsButton,\r\n    show\r\n)", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\common\\Preset.kt"}}
{"prompt": "\n import splitties.views.dsl.core.verticalMargin\nimport splitties.views.dsl.core.verticalLayout\nimport splitties.views.dsl.core.styles.AndroidStyles\nimport splitties.views.dsl.core.matchParent\nimport splitties.views.dsl.core.lParams\nimport splitties.views.dsl.core.add\nimport splitties.dimensions.dp\nimport org.fcitx.fcitx5.android.R\nimport androidx.appcompat.app.AlertDialog\nimport androidx.annotation.StringRes\nimport android.view.View\nimport android.content.Context\n\r\n@Suppress(\"FunctionName\")\r\nfun Context.ProgressBarDialogIndeterminate(@StringRes title: Int): AlertDialog.Builder {\r\n    val androidStyles = AndroidStyles(this)\r\n    return AlertDialog.Builder(this)\r\n        .setTitle(title)\r\n        .setView(verticalLayout {\r\n            add(androidStyles.progressBar.horizontal {\r\n                isIndeterminate = true\r\n            }, lParams {\r\n                width = matchParent\r\n                verticalMargin = dp(20)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/326", "ground_truth": "                horizontalMargin = dp(26)\r\n            })\r\n        })\r\n        .setCancelable(false)\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\common\\Preset.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.R\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.delay\nimport androidx.lifecycle.LifecycleCoroutineScope\nimport androidx.appcompat.app.AlertDialog\nimport androidx.annotation.StringRes\nimport android.content.Context\nfun LifecycleCoroutineScope.withLoadingDialog(\r\n    context: Context,\r\n    @StringRes title: Int = R.string.loading,\r\n    threshold: Long = 200L,\r\n    action: suspend () -> Unit\r\n) {\r\n    var loadingDialog: AlertDialog? = null\r\n    val loadingJob = launch {\r\n        delay(threshold)\r\n        loadingDialog = context.ProgressBarDialogIndeterminate(title).show()\r\n    }\r\n    launch {\r", "choices": [{"text": "//        delay(threshold)\r\n        action()\r\n        loadingJob.cancel()\r\n        loadingDialog?.dismiss()\r\n    }\r\n}<file_sep>/app/src/main/java/org/fcitx/fcitx5/android/ui/settings/SettingsFragment.kt\npackage org.fcitx.fcitx5.android.ui.settings\n\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.appcompat.app.AlertDialog"}], "metadata": {"task_id": "fcitx5-android/327", "ground_truth": "        action()\r\n        loadingJob.cancelAndJoin()\r\n        loadingDialog?.dismiss()\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\common\\Preset.kt"}}
{"prompt": " import org.fcitx.fcitx5.android.data.clipboard.db.ClipboardEntry\nval ENTRY_ID\nvar entryId Int\nval scope CoroutineScope\nprivate fun setEntry(entry: ClipboardEntry) {\r", "choices": [{"text": "entryId = entry.id\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/329", "ground_truth": "        entryId = entry.id\r\n        editText.setText(entry.text)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\ClipboardEditActivity.kt"}}
{"prompt": " import android.content.Intent\nvar entryId Int\nval ENTRY_ID\nval scope CoroutineScope\noverride fun onNewIntent(intent: Intent) {\r", "choices": [{"text": "super.onNewIntent(intent)\r\nentryId = intent.getIntExtra(ENTRY_ID, 0)\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/330", "ground_truth": "        super.onNewIntent(intent)\r\n        processIntent(intent)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\ClipboardEditActivity.kt"}}
{"prompt": "\nval LAST_ENTRY\nval ENTRY_ID\nval scope CoroutineScope\n override fun onStop() {\r", "choices": [{"text": "super.onStop()\r\nscope.cancel()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nscope.cancel()\r\n}\r\noverride fun onPause() {\r\nsuper.onPause()\r\nscope.cancel()\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nscope.launch {\r\nval result = withContext(Dispatchers.IO) {\r\nval cursor = contentResolver.query(\r\nMediaStore.Audio.Media.EXTERNAL_CONTENT_URI,\r\nnull,\r"}], "metadata": {"task_id": "fcitx5-android/332", "ground_truth": "        super.onStop()\r\n        finish()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\ClipboardEditActivity.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.utils.str\noverride fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nif (mInputView!= null) {\r\nmInputView.destroy()\r\nmInputView = null\r\n}\r\n}\r\noverride fun onConfigurationChanged(newConfig: Configuration) {\r\nsuper.onConfigurationChanged(newConfig)\r\nif (mInputView!= null) {\r\nmInputView.onConfigurationChanged(newConfig)\r\n}\r\n}\r\noverride fun onSaveInstanceState(outState: Bundle) {\r\nsuper.onSaveInstanceState(outState)\r\nif (mInputView!= null)"}], "metadata": {"task_id": "fcitx5-android/333", "ground_truth": "        super.onDestroy()\r\n        scope.cancel()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\ClipboardEditActivity.kt"}}
{"prompt": "\n import com.mikepenz.aboutlibraries.entity.License\nprivate fun showLicenseContent(license: License) {\r\n        if (license.url?.isNotBlank() == true) {\r", "choices": [{"text": "//            val intent = Intent(Intent.ACTION_VIEW, Uri.parse(license.url))\r\n//            startActivity(intent)\r\n            val intent = Intent(Intent.ACTION_VIEW, Uri.parse(license.url))\r\n            startActivity(intent)\r\n        } else {\r\n            val intent = Intent(Intent.ACTION_VIEW, Uri.parse(\"https://github.com/mikepenz/AboutLibraries/blob/develop/LICENSE\"))\r\n            startActivity(intent)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/334", "ground_truth": "            startActivity(Intent(Intent.ACTION_VIEW, Uri.parse(license.url)))\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\LicensesFragment.kt"}}
{"prompt": "\n fun append(line: CharSequence) {\r\n        val size = entries.size\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/335", "ground_truth": "        entries.add(line)\r\n        notifyItemInserted(size)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\log\\LogAdapter.kt"}}
{"prompt": "\n fun clear() {\r\n        val size = entries.size\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/336", "ground_truth": "        entries.clear()\r\n        notifyItemRangeRemoved(0, size)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\log\\LogAdapter.kt"}}
{"prompt": "\n import splitties.views.dsl.core.wrapContent\nimport splitties.views.dsl.core.textView\nimport android.view.textclassifier.TextClassifier\nimport android.view.ViewGroup.MarginLayoutParams\nimport android.view.ViewGroup\nimport android.os.Build\nimport android.graphics.Typeface\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int) = Holder(\r\n        parent.textView {\r\n            textSize = 12f\r\n            typeface = Typeface.MONOSPACE\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n                setTextClassifier(TextClassifier.NO_OP)\r\n            }\r\n            layoutParams = MarginLayoutParams(wrapContent, wrapContent).apply {\r", "choices": [{"text": "//                setMargins(16, 16, 16, 16)\r\n            }\r\n        }\r\n    )\n"}], "metadata": {"task_id": "fcitx5-android/337", "ground_truth": "                marginStart = dp(4)\r\n                marginEnd = dp(4)\r\n            }\r\n        }\r\n    )", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\log\\LogAdapter.kt"}}
{"prompt": "\nval rv\nvar logcat Logcat?\nval logAdapter\n override fun onDetachedFromWindow() {\r", "choices": [{"text": "super.onDetachedFromWindow()\r\nrv.removeOnScrollListener(logAdapter)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/338", "ground_truth": "        logcat?.shutdownLogFlow()\r\n        super.onDetachedFromWindow()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\log\\LogView.kt"}}
{"prompt": "\n import androidx.core.text.buildSpannedString\nfun append(content: String) {\r\n        logAdapter.append(buildSpannedString {\r", "choices": [{"text": "//            append(content)\r\n            append(content)\r\n        })\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/339", "ground_truth": "            color(styledColor(android.R.attr.colorForeground)) { append(content) }\r\n        })\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\log\\LogView.kt"}}
{"prompt": "\n import splitties.views.dsl.core.add\nfun setBottomPadding(padding: Int) {\r", "choices": [{"text": "+    setPadding(padding, padding, padding, padding)\r\n+}\r\n+\r\n+fun setBottomPadding(padding: Float) {\r\n+    setPadding(padding, padding, padding, padding)\r\n+}\r\n+\r\n+fun setBottomPadding(padding: Dp) {\r\n+    setPadding(padding, padding, padding, padding)\r\n+}\r\n+\r\n+fun setBottomPadding(padding: Dimension) {\r\n+    setPadding(padding, padding, padding, padding)\r\n+}\r\n+\r"}], "metadata": {"task_id": "fcitx5-android/340", "ground_truth": "        rv.clipToPadding = false\r\n        rv.bottomPadding = padding\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\log\\LogView.kt"}}
{"prompt": " import org.fcitx.fcitx5.android.R\nval viewModel MainViewModel\nvar navController NavController\nvar needNotifications\noverride fun onStop() {\r\n        viewModel.fcitx.runIfReady {\r\n            save()\r", "choices": [{"text": "//            if (needNotifications) {\r\n//                val intent = Intent(this@MainActivity, MainActivity::class.java)\r\n//                intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\r\n//                startActivity(intent)\r\n//            }\r\n        }\r\n        super.onStop()\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/342", "ground_truth": "        }\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\MainActivity.kt"}}
{"prompt": "\n override fun onStart() {\r", "choices": [{"text": "super.onStart()\r\nmGoogleApiClient.connect()\r\n}\r\noverride fun onStop() {\r\nsuper.onStop()\r\nmGoogleApiClient.disconnect()\r\n}\r\noverride fun onConnected(p0: Bundle?) {\r\nmLocationRequest = LocationRequest.create()\r\nmLocationRequest!!.priority = LocationRequest.PRIORITY_HIGH_ACCURACY\r\nmLocationRequest!!.interval = 1000\r\nmLocationRequest!!.fastestInterval = 1000\r\nmLocationRequest!!.smallestDisplacement = 10f\r"}], "metadata": {"task_id": "fcitx5-android/343", "ground_truth": "        super.onStart()\r\n        viewModel.enableAboutButton()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\MainFragment.kt"}}
{"prompt": "\n override fun onStop() {\r", "choices": [{"text": "super.onStop()\r\nLog.d(\"onStop\", \"onStop\")\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nLog.d(\"onDestroy\", \"onDestroy\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/344", "ground_truth": "        viewModel.disableAboutButton()\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\MainFragment.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.utils.addPreference\nimport org.fcitx.fcitx5.android.R\nimport androidx.preference.PreferenceCategory\nimport androidx.annotation.StringRes\nimport androidx.annotation.IdRes\nimport androidx.annotation.DrawableRes\nprivate fun PreferenceCategory.addDestinationPreference(\r\n        @StringRes title: Int,\r\n        @DrawableRes icon: Int,\r\n        @IdRes destination: Int\r\n    ) {\r\n        addPreference(title, icon = icon) {\r", "choices": [{"text": "//            setFragment(destination)\r\n            setFragment(destination)\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "fcitx5-android/345", "ground_truth": "            findNavController().navigate(destination)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\MainFragment.kt"}}
{"prompt": "\n import androidx.preference.PreferenceDialogFragmentCompat\nimport androidx.preference.Preference\nimport androidx.preference.EditTextPreference\nfun <T : EditTextPreference> T.restore() {\r\n    // must `callChangeListener` before `setText`\r\n    // https://android.googlesource.com/platform/frameworks/support/+/872b66efac82f0b0a3fac4bb14a789464ab19f96/preference/preference/src/main/java/androidx/preference/EditTextPreferenceDialogFragmentCompat.java#146\r\n    (def() as? String)?.let {\r", "choices": [{"text": "//        callChangeListener(it)\r\n        setText(it)\r\n    }\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/346", "ground_truth": "        if (callChangeListener(it)) {\r\n            text = it\r\n        }\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\modified\\Functions.kt"}}
{"prompt": "\n import androidx.preference.Preference\nimport androidx.preference.ListPreference\nfun <T : ListPreference> T.restore() {\r\n    (def() as? String)?.let {\r", "choices": [{"text": "//        val value = def().split(\",\").toTypedArray()\r\n//        val value = def().split(\",\").toTypedArray()\r\n//        val value = def().split(\",\").toTypedArray()\r\n//        val value = def().split(\",\").toTypedArray()\r\n//        val value = def().split(\",\").toTypedArray()\r\n//        val value = def().split(\",\").toTypedArray()\r\n//        val value = def().split(\",\").toTypedArray()\r\n//        val value = def().split(\",\").toTypedArray()\r"}], "metadata": {"task_id": "fcitx5-android/347", "ground_truth": "        if (callChangeListener(it)) {\r\n            value = it\r\n        }\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\modified\\Functions.kt"}}
{"prompt": "\n import androidx.preference.SwitchPreference\nimport androidx.preference.Preference\nfun <T : SwitchPreference> T.restore() {\r\n    (def() as? Boolean)?.let {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/348", "ground_truth": "        if (callChangeListener(it)) {\r\n            isChecked = it\r\n        }\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\modified\\Functions.kt"}}
{"prompt": "\n import splitties.dimensions.dp\nimport androidx.preference.PreferenceDialogFragmentCompat\nimport androidx.preference.Preference\nimport androidx.core.view.updateLayoutParams\nimport android.view.ViewGroup.MarginLayoutParams\nimport android.view.View\nfun PreferenceDialogFragmentCompat.fixDialogMargin(contentView: View) {\r\n    // dialogMessage text in AlertDialog has 48dp bottom margin, just make it smaller\r\n    contentView.findViewById<View>(android.R.id.message)?.updateLayoutParams<MarginLayoutParams> {\r", "choices": [{"text": "bottomMargin = 0\r\n    }\r\n    // dialogMessage text in AlertDialog has 48dp bottom margin, just make it smaller\r\n    contentView.findViewById<View>(android.R.id.title)?.updateLayoutParams<MarginLayoutParams> {\r\nbottomMargin = 0\r\n    }\r\n    // dialogMessage text in AlertDialog has 48dp bottom margin, just make it smaller\r\n    contentView.findViewById<View>(android.R.id.button1)?.updateLayoutParams<MarginLayoutParams> {\r\nbottomMargin = 0\r\n    }\r\n    // dialogMessage text in AlertDialog has 48dp bottom margin, just make"}], "metadata": {"task_id": "fcitx5-android/349", "ground_truth": "        verticalMargin = requireContext().dp(8)\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\modified\\Functions.kt"}}
{"prompt": "\n import android.view.View\noverride fun onBindDialogView(view: View) {\r", "choices": [{"text": "//    val dialog = view.findViewById<Dialog>(R.id.dialog)\r\n//    dialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\r\n//    dialog.window?.setLayout(\r\n//        WindowManager.LayoutParams.MATCH_PARENT,\r\n//        WindowManager.LayoutParams.WRAP_CONTENT\r\n//    )\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/351", "ground_truth": "        super.onBindDialogView(view)\r\n        fixDialogMargin(view)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\modified\\MyEditTextPreferenceDialogFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onBindDialogView(view: View) {\r", "choices": [{"text": "//    val dialog = view.findViewById<Dialog>(R.id.dialog)\r\n//    dialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\r\n//    dialog.window?.setLayout(\r\n//        WindowManager.LayoutParams.MATCH_PARENT,\r\n//        WindowManager.LayoutParams.WRAP_CONTENT\r\n//    )\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/354", "ground_truth": "        super.onBindDialogView(view)\r\n        fixDialogMargin(view)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\modified\\MyListPreferenceDialogFragment.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.core.data.DataManager\nimport org.fcitx.fcitx5.android.R\nimport kotlinx.coroutines.launch\nimport androidx.lifecycle.lifecycleScope\nimport android.os.Bundle\noverride fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {\r\n        lifecycleScope.launch {\r\n            val needsReload = if (DataManager.synced) {\r\n                val (newPluginsToLoad, _) = DataManager.detectPlugins()\r\n                newPluginsToLoad != DataManager.getLoadedPlugins()\r\n            } else {\r\n                DataManager.waitSynced()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/357", "ground_truth": "                false\r\n            }\r\n            preferenceScreen = createPreferenceScreen(needsReload)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\PluginFragment.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.core.data.DataManager\nimport org.fcitx.fcitx5.android.R\nimport kotlinx.coroutines.suspendCancellableCoroutine\nprivate suspend fun DataManager.waitSynced() = suspendCancellableCoroutine {\r\n        if (synced)\r\n            it.resumeWith(Result.success(Unit))\r", "choices": [{"text": "//        else\r\n//            it.resumeWith(Result.failure(Exception(\"Not synced\")))\r\n    }\n\n"}], "metadata": {"task_id": "fcitx5-android/358", "ground_truth": "        else\r\n            addOnNextSyncedCallback {\r\n                it.resumeWith(Result.success(Unit))\r\n            }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\PluginFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r\n        if (isInitialized) {\r\n            ui.removeItemChangedListener()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/360", "ground_truth": "        }\r\n        super.onDestroy()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\addon\\AddonListFragment.kt"}}
{"prompt": "\nvar value\nvar unit String\nvar step Int\n override fun persistInt(value: Int): Boolean {\r\n        return super.persistInt(value).also {\r", "choices": [{"text": "this.value = value\r\n        }\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/361", "ground_truth": "            if (it) this@DialogSeekBarPreference.value = value\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\DialogSeekBarPreference.kt"}}
{"prompt": "\n override fun setDefaultValue(defaultValue: Any?) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/362", "ground_truth": "        super.setDefaultValue(defaultValue)\r\n        default = defaultValue as? Int ?: 0\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\DialogSeekBarPreference.kt"}}
{"prompt": "\nvar value\nvar defaultLabel String?\nvar default Int\n private fun setValue(value: Int) {\r\n        if (callChangeListener(value)) {\r\n            persistInt(value)\r", "choices": [{"text": "//            notifyChanged()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/363", "ground_truth": "            notifyChanged()\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\DialogSeekBarPreference.kt"}}
{"prompt": "\nvar value\nvar unit String\nvar max Int\n override fun persistInt(value: Int): Boolean {\r\n        return super.persistInt(value).also {\r", "choices": [{"text": "this.value = value\r\n        }\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/364", "ground_truth": "            if (it) this@EditTextIntPreference.value = value\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\EditTextIntPreference.kt"}}
{"prompt": "\nvar default Int\nvar min Int\nvar unit String\n override fun setText(text: String?) {\r\n        val value = text?.toIntOrNull(10) ?: return\r", "choices": [{"text": "\nvar default Int\nvar min Int\nvar unit String\n override fun setText(text: String?) {\r\n        val value = text?.toIntOrNull(10)?: return\r\nif (value < min) {\r\n            setText(min.toString())\r\n        } else {\r\n            super.setText(text)\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/366", "ground_truth": "        persistInt(fitValue(value))\r\n        notifyChanged()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\EditTextIntPreference.kt"}}
{"prompt": "\nvar default Int\nvar value\nvar min Int\n override fun callChangeListener(newValue: Any?): Boolean {\r\n        if (newValue !is String) return false\r", "choices": [{"text": "\nvar default Int\nvar value\nvar min Int\n override fun callChangeListener(newValue: Any?): Boolean {\r\n        if (newValue!is String) return false\r\n//        if (newValue == null) return false\r\n        if (newValue == null) {\r\n            value = default\r\n            return true\r\n        }\r\n        try {\r\n            value = newValue.toInt()\r\n        } catch (e: NumberFormatException) {\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/367", "ground_truth": "        val value = newValue.toIntOrNull(10) ?: return false\r\n        return super.callChangeListener(fitValue(value))\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\EditTextIntPreference.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.core.Key\nimport androidx.preference.Preference\noverride fun provideSummary(preference: FcitxKeyPreference): CharSequence {\r\n            return Key.parse(preference.currentValue).localizedString.ifEmpty {\r", "choices": [{"text": "preference.currentValue\r\n            }\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "fcitx5-android/368", "ground_truth": "                preference.context.getString(R.string.none)\r\n            }\r\n        }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\FcitxKeyPreference.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.daemon.launchOnReady\nimport org.fcitx.fcitx5.android.R\nprivate fun save() {\r\n        if (!configLoaded) return\r\n        fcitx.launchOnReady {\r", "choices": [{"text": "//            val config = fcitx.config\r\n//            config.set(\"input_method\", \"fcitx5\")\r\n//            config.set(\"input_method_fcitx5\", \"fcitx5\")\r\n//            config.set(\"input_method_fcitx5_engine\", \"fcitx5\")\r\n//            config.set(\"input_method_fcitx5_engine_name\", \"fcitx5\")\r\n//            config.set(\"input_method_fcitx5_engine_config\", \"fcit"}], "metadata": {"task_id": "fcitx5-android/369", "ground_truth": "            saveConfig(it, raw[\"cfg\"])\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\FcitxPreferenceFragment.kt"}}
{"prompt": "\n override fun onStart() {\r", "choices": [{"text": "super.onStart()\r\nmGoogleApiClient.connect()\r\n}\r\noverride fun onStop() {\r\nsuper.onStop()\r\nmGoogleApiClient.disconnect()\r\n}\r\noverride fun onConnected(p0: Bundle?) {\r\nmLocationRequest = LocationRequest.create()\r\nmLocationRequest!!.priority = LocationRequest.PRIORITY_HIGH_ACCURACY\r\nmLocationRequest!!.interval = 1000\r\nmLocationRequest!!.fastestInterval = 1000\r\nmLocationRequest!!.smallestDisplacement = 10f\r"}], "metadata": {"task_id": "fcitx5-android/370", "ground_truth": "        super.onStart()\r\n        viewModel.setToolbarTitle(getPageTitle())\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\FcitxPreferenceFragment.kt"}}
{"prompt": "\n override fun getBoolean(key: String?, defValue: Boolean): Boolean {\r", "choices": [{"text": "return sharedPreferences.getBoolean(key, defValue)\r\n}\r\noverride fun getFloat(key: String?, defValue: Float): Float {\r\nreturn sharedPreferences.getFloat(key, defValue)\r\n}\r\noverride fun getInt(key: String?, defValue: Int): Int {\r\nreturn sharedPreferences.getInt(key, defValue)\r\n}\r\noverride fun getLong(key: String?, defValue: Long): Long {\r\nreturn sharedPreferences.getLong(key, defValue)\r\n}\r\noverride fun getString(key: String?,"}], "metadata": {"task_id": "fcitx5-android/371", "ground_truth": "        if (key == null) return defValue\r\n        return cfg[key].value == \"True\"\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\FcitxRawConfigStore.kt"}}
{"prompt": "\n override fun putBoolean(key: String?, value: Boolean) {\r", "choices": [{"text": "//     Log.d(\"putBoolean\", \"key: $key, value: $value\")\r\n     sharedPreferences.edit().putBoolean(key, value).apply()\r\n }\r\n\r\n override fun putInt(key: String?, value: Int) {\r\n//     Log.d(\"putInt\", \"key: $key, value: $value\")\r\n     sharedPreferences.edit().putInt(key, value).apply()\r\n }\r\n\r\n override fun putLong(key: String?, value: Long) {\r\n//     Log.d(\"putLong\", \"key: $key, value: $value"}], "metadata": {"task_id": "fcitx5-android/372", "ground_truth": "        if (key == null) return\r\n        cfg[key].value = if (value) \"True\" else \"False\"\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\FcitxRawConfigStore.kt"}}
{"prompt": "\n override fun getInt(key: String?, defValue: Int): Int {\r", "choices": [{"text": "//     return super.getInt(key, defValue)\r\n     return 0\r\n }\r\n\r\n override fun getLong(key: String?, defValue: Long): Long {\r\n//     return super.getLong(key, defValue)\r\n     return 0\r\n }\r\n\r\n override fun getFloat(key: String?, defValue: Float): Float {\r\n//     return super.getFloat(key, defValue)\r\n     return 0f\r\n }\r\n\r\n override fun getBoolean(key: String?, defValue: Boolean): Boolean {\r\n//     return super.getBoolean(key, defValue)\r\n     return"}], "metadata": {"task_id": "fcitx5-android/373", "ground_truth": "        if (key == null) return defValue\r\n        return cfg[key].value.toInt()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\FcitxRawConfigStore.kt"}}
{"prompt": "\n override fun putInt(key: String?, value: Int) {\r", "choices": [{"text": "//     Log.d(\"MyApp\", \"putInt: $key, $value\")\r\n     super.putInt(key, value)\r\n }\r\n\r\n override fun putLong(key: String?, value: Long) {\r\n//     Log.d(\"MyApp\", \"putLong: $key, $value\")\r\n     super.putLong(key, value)\r\n }\r\n\r\n override fun putFloat(key: String?, value: Float) {\r\n//     Log.d(\"MyApp\", \"putFloat: $key, $value\")\r\n     super.putFloat(key, value)\r\n }"}], "metadata": {"task_id": "fcitx5-android/374", "ground_truth": "        if (key == null) return\r\n        cfg[key].value = value.toString()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\FcitxRawConfigStore.kt"}}
{"prompt": "\n override fun getString(key: String?, defValue: String?): String? {\r", "choices": [{"text": "-    return super.getString(key, defValue)\r\n+    return super.getString(key, defValue)?.let {\r\n+        it.replace(Regex(\"[^\\\\p{L}\\\\p{N}\\\\p{P}]+\"), \"\")\r\n+    }\r\n }\r\n"}], "metadata": {"task_id": "fcitx5-android/375", "ground_truth": "        if (key == null) return defValue\r\n        return cfg[key].value\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\FcitxRawConfigStore.kt"}}
{"prompt": "\n override fun putString(key: String?, value: String?) {\r", "choices": [{"text": "//     Log.d(\"MyApp\", \"put string\")\r\n     super.putString(key, value)\r\n }\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/376", "ground_truth": "        if (key == null) return\r\n        cfg[key].value = value ?: \"\"\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\FcitxRawConfigStore.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.daemon.launchOnReady\nimport org.fcitx.fcitx5.android.R\nimport android.os.Build\nprivate fun updateIMState() {\r\n        if (isInitialized) {\r\n            fcitx.launchOnReady { f ->\r\n                f.setEnabledIme(ui.entries.map { it.uniqueName }.toTypedArray())\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/377", "ground_truth": "                    SubtypeManager.syncWith(f.enabledIme())\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\im\\InputMethodListFragment.kt"}}
{"prompt": "\n override fun onStop() {\r\n        if (::ui.isInitialized) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/379", "ground_truth": "            ui.exitMultiSelect()\r\n        }\r\n        viewModel.disableToolbarEditButton()\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\im\\InputMethodListFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r\n        if (::ui.isInitialized) {\r\n            ui.removeItemChangedListener()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/380", "ground_truth": "        }\r\n        super.onDestroy()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\im\\InputMethodListFragment.kt"}}
{"prompt": "\n override fun onStop() {\r\n        viewModel.disableToolbarEditButton()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/384", "ground_truth": "        if (uiInitialized) {\r\n            ui.exitMultiSelect()\r\n        }\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\ListFragment.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.data.pinyin.customphrase.PinyinCustomPhrase\noverride fun onItemUpdated(idx: Int, old: PinyinCustomPhrase, new: PinyinCustomPhrase) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "fcitx5-android/386", "ground_truth": "        dustman.remove(old.serialize())\r\n        dustman.addOrUpdate(new.serialize(), new)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PinyinCustomPhraseFragment.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.data.pinyin.CustomPhraseManager\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.NonCancellable\nimport kotlinx.coroutines.Dispatchers\nimport androidx.lifecycle.lifecycleScope\nprivate fun saveConfig() {\r\n        if (!dustman.dirty) return\r\n        resetDustman()\r\n        lifecycleScope.launch(NonCancellable + Dispatchers.IO) {\r\n            CustomPhraseManager.save(ui.entries.toTypedArray())\r", "choices": [{"text": "//            CustomPhraseManager.save(ui.entries.toTypedArray())\r\n        }\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/387", "ground_truth": "            viewModel.fcitx.runOnReady {\r\n                reloadPinyinCustomPhrase()\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PinyinCustomPhraseFragment.kt"}}
{"prompt": "\n override fun onStop() {\r\n        saveConfig()\r\n        ui.exitMultiSelect()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/389", "ground_truth": "        viewModel.disableToolbarEditButton()\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PinyinCustomPhraseFragment.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.utils.str\noverride fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nif (mInputView!= null) {\r\nmInputView.destroy()\r\nmInputView = null\r\n}\r\n}\r\noverride fun onConfigurationChanged(newConfig: Configuration) {\r\nsuper.onConfigurationChanged(newConfig)\r\nif (mInputView!= null) {\r\nmInputView.onConfigurationChanged(newConfig)\r\n}\r\n}\r\noverride fun onSaveInstanceState(outState: Bundle) {\r\nsuper.onSaveInstanceState(outState)\r\nif (mInputView!= null)"}], "metadata": {"task_id": "fcitx5-android/390", "ground_truth": "        ui.removeItemChangedListener()\r\n        super.onDestroy()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PinyinCustomPhraseFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\nimport android.app.NotificationChannel\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        createNotificationChannel()\r", "choices": [{"text": "//        val view = inflater.inflate(R.layout.fragment_main, container, false)\r\n//        return view\r\n        return inflater.inflate(R.layout.fragment_main, container, false)\r\n    }\r\n\r\n    private fun createNotificationChannel() {\r\n        // Create the NotificationChannel, but only on API 26+ because\r\n        // the NotificationChannel class is new and not in the support library\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            val name = \"My Notification\"\r\n            val descriptionText = \"My Notification Description\"\r\n            val importance ="}], "metadata": {"task_id": "fcitx5-android/391", "ground_truth": "        registerLauncher()\r\n        ui.addOnItemChangedListener(this)\r\n        resetDustman()\r\n        return ui.root\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PinyinDictionaryFragment.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.utils.parcelable\nimport org.fcitx.fcitx5.android.R\nimport android.view.View\nimport android.os.Bundle\nimport android.net.Uri\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        arguments?.parcelable<Uri>(INTENT_DATA_URI)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "fcitx5-android/392", "ground_truth": "            ?.let { importFromUri(it) }\r\n        super.onViewCreated(view, savedInstanceState)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PinyinDictionaryFragment.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.R\nimport kotlinx.coroutines.launch\nimport androidx.activity.result.contract.ActivityResultContracts\nprivate fun registerLauncher() {\r\n        launcher = registerForActivityResult(ActivityResultContracts.GetContent()) { uri ->\r\n            if (uri != null)\r", "choices": [{"text": "\n import org.fcitx.fcitx5.android.R\nimport kotlinx.coroutines.launch\nimport androidx.activity.result.contract.ActivityResultContracts\nprivate fun registerLauncher() {\r\n        launcher = registerForActivityResult(ActivityResultContracts.GetContent()) { uri ->\r\n            if (uri!= null)\r\n//                viewModel.setUri(uri)\r\n                viewModel.setUri(uri)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/394", "ground_truth": "                importFromUri(uri)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PinyinDictionaryFragment.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.data.pinyin.dict.PinyinDictionary\noverride fun onItemAdded(idx: Int, item: PinyinDictionary) {\r", "choices": [{"text": "}\r\noverride fun onItemRemoved(idx: Int, item: PinyinDictionary) {\r\n}\r\noverride fun onItemChanged(idx: Int, item: PinyinDictionary) {\r\n}\r\noverride fun onItemMoved(from: Int, to: Int, item: PinyinDictionary) {\r\n}\r\noverride fun onItemRangeInserted(from: Int, to: Int, item: PinyinDictionary) {\r\n}\r\noverride fun onItemRangeRemoved(from: Int, to: Int, item: PinyinDictionary) {"}], "metadata": {"task_id": "fcitx5-android/396", "ground_truth": "        item as LibIMEDictionary\r\n        dustman.addOrUpdate(item.name, item.isEnabled)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PinyinDictionaryFragment.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.data.pinyin.dict.PinyinDictionary\nimport org.fcitx.fcitx5.android.data.pinyin.dict.LibIMEDictionary\nimport org.fcitx.fcitx5.android.R\noverride fun onItemRemoved(idx: Int, item: PinyinDictionary) {\r\n        item as LibIMEDictionary\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "fcitx5-android/397", "ground_truth": "        item.file.delete()\r\n        dustman.remove(item.name)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PinyinDictionaryFragment.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.data.pinyin.dict.PinyinDictionary\noverride fun onItemUpdated(idx: Int, old: PinyinDictionary, new: PinyinDictionary) {\r", "choices": [{"text": "}\r\noverride fun onItemRemoved(idx: Int, item: PinyinDictionary) {\r\n}\r\noverride fun onItemInserted(idx: Int, item: PinyinDictionary) {\r\n}\r\noverride fun onItemMoved(from: Int, to: Int) {\r\n}\r\noverride fun onItemRangeRemoved(from: Int, count: Int) {\r\n}\r\noverride fun onItemRangeInserted(from: Int, count: Int) {\r\n}\r\noverride fun onItemRangeMoved(from: Int, to: Int, count"}], "metadata": {"task_id": "fcitx5-android/398", "ground_truth": "        new as LibIMEDictionary\r\n        dustman.addOrUpdate(new.name, new.isEnabled)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PinyinDictionaryFragment.kt"}}
{"prompt": "\n override fun onStop() {\r\n        reloadDict()\r\n        viewModel.disableToolbarEditButton()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/400", "ground_truth": "        if (uiInitialized) {\r\n            ui.exitMultiSelect()\r\n        }\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PinyinDictionaryFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r\n        if (uiInitialized) {\r\n            ui.removeItemChangedListener()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/401", "ground_truth": "        }\r\n        super.onDestroy()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PinyinDictionaryFragment.kt"}}
{"prompt": "\n override fun onStop() {\r\n        saveConfig()\r\n        viewModel.disableToolbarEditButton()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/406", "ground_truth": "        if (isInitialized) {\r\n            ui.exitMultiSelect()\r\n        }\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PunctuationEditorFragment.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.utils.str\noverride fun onDestroy() {\r\n        if (isInitialized) {\r\n            ui.removeItemChangedListener()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/407", "ground_truth": "        }\r\n        super.onDestroy()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\PunctuationEditorFragment.kt"}}
{"prompt": "\n override fun onStop() {\r\n        saveConfig()\r\n        if (isInitialized) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/410", "ground_truth": "            ui.exitMultiSelect()\r\n        }\r\n        viewModel.disableToolbarEditButton()\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\QuickPhraseEditFragment.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.utils.str\noverride fun onDestroy() {\r\n        if (isInitialized) {\r\n            ui.removeItemChangedListener()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/411", "ground_truth": "        }\r\n        super.onDestroy()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\QuickPhraseEditFragment.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.R\nimport kotlinx.coroutines.launch\nimport androidx.activity.result.contract.ActivityResultContracts\nprivate fun registerLauncher() {\r\n        launcher = registerForActivityResult(ActivityResultContracts.GetContent()) { uri ->\r\n            if (uri != null)\r", "choices": [{"text": "\n import org.fcitx.fcitx5.android.R\nimport kotlinx.coroutines.launch\nimport androidx.activity.result.contract.ActivityResultContracts\nprivate fun registerLauncher() {\r\n        launcher = registerForActivityResult(ActivityResultContracts.GetContent()) { uri ->\r\n            if (uri!= null)\r\n//                viewModel.setUri(uri)\r\n                viewModel.setUri(uri)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/413", "ground_truth": "                importFromUri(uri)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\QuickPhraseListFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\nimport android.app.NotificationChannel\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        createNotificationChannel()\r", "choices": [{"text": "//        val view = inflater.inflate(R.layout.fragment_main, container, false)\r\n//        return view\r\n        return inflater.inflate(R.layout.fragment_main, container, false)\r\n    }\r\n\r\n    private fun createNotificationChannel() {\r\n        // Create the NotificationChannel, but only on API 26+ because\r\n        // the NotificationChannel class is new and not in the support library\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            val name = \"My Notification\"\r\n            val descriptionText = \"My Notification Description\"\r\n            val importance ="}], "metadata": {"task_id": "fcitx5-android/414", "ground_truth": "        registerLauncher()\r\n        ui.addOnItemChangedListener(this)\r\n        resetDustman()\r\n        return ui.root\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\QuickPhraseListFragment.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.data.quickphrase.QuickPhrase\nimport org.fcitx.fcitx5.android.R\noverride fun onItemRemoved(idx: Int, item: QuickPhrase) {\r", "choices": [{"text": "//        val item = quickPhraseList.removeAt(idx)\r\n//        quickPhraseList.add(item)\r\n//        quickPhraseList.removeAt(idx)\r\n//        quickPhraseList.add(item)\r\n//        quickPhraseList.removeAt(idx)\r\n//        quickPhraseList.add(item)\r\n//        quickPhraseList.removeAt(idx)\r\n//        quickPhraseList.add(item)\r\n//        quickPhraseList.removeAt(idx)\r\n//        quickPhraseList.add(item)\r"}], "metadata": {"task_id": "fcitx5-android/415", "ground_truth": "        item.file.delete()\r\n        dustman.remove(item.name)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\QuickPhraseListFragment.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.data.quickphrase.QuickPhrase\nimport org.fcitx.fcitx5.android.core.reloadQuickPhrase\noverride fun onStop() {\r\n        reloadQuickPhrase()\r\n        viewModel.disableToolbarEditButton()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "fcitx5-android/417", "ground_truth": "        if (uiInitialized) {\r\n            ui.exitMultiSelect()\r\n        }\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\QuickPhraseListFragment.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.utils.str\noverride fun onDestroy() {\r\n        if (uiInitialized) {\r\n            ui.removeItemChangedListener()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/418", "ground_truth": "        }\r\n        super.onDestroy()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\QuickPhraseListFragment.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.R\nfun reset() {\r\n        val placeholderText = ctx.getString(R.string.table_file_placeholder)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "fcitx5-android/419", "ground_truth": "        conf.summary.text = placeholderText\r\n        dict.summary.text = placeholderText\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\TableFilesSelectionUi.kt"}}
{"prompt": "\n import android.os.Bundle\nimport android.app.NotificationChannel\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        createNotificationChannel()\r", "choices": [{"text": "}\r\nprivate fun createNotificationChannel() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            val name = \"name\"\r\n            val descriptionText = \"description\"\r\n            val importance = NotificationManager.IMPORTANCE_DEFAULT\r\n            val channel = NotificationChannel(\"channel_id\", name, importance).apply {\r\n                description = descriptionText\r\n            }\r\n            val notificationManager: NotificationManager =\r\n                getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\r\n            notificationManager.createNotificationChannel(channel)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/420", "ground_truth": "        registerLauncher()\r\n        super.onCreate(savedInstanceState)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\TableInputMethodFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        resetDustman()\r", "choices": [{"text": "//        val view = inflater.inflate(R.layout.fragment_dustman, container, false)\r\n//        return view\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        val view = view.findViewById<View>(R.id.dustman_view)\r\n        view.setOnClickListener {\r\n            val intent = Intent(activity, DustmanActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n\r\n    override fun onResume()"}], "metadata": {"task_id": "fcitx5-android/421", "ground_truth": "        ui.addOnItemChangedListener(this)\r\n        return ui.root\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\TableInputMethodFragment.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.utils.positiveButton\nprivate fun updateFilesSelectionDialogButton(importing: Boolean = false) {\r\n        filesSelectionDialog?.apply {\r\n            positiveButton.isEnabled =\r", "choices": [{"text": "//               !importing &&\r\n                (filesSelectionDialog?.selectedFiles?.isNotEmpty()?: false)\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "fcitx5-android/423", "ground_truth": "                if (importing) false else (confUri != null && dictUri != null)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\TableInputMethodFragment.kt"}}
{"prompt": "\n private fun dismissFilesSelectionDialog() {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/424", "ground_truth": "        filesSelectionDialog?.dismiss()\r\n        filesSelectionDialog = null\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\TableInputMethodFragment.kt"}}
{"prompt": "\n private fun reloadConfig() {\r\n        if (!dustman.dirty) return\r", "choices": [{"text": ""}], "metadata": {"task_id": "fcitx5-android/429", "ground_truth": "        resetDustman()\r\n        FcitxDaemon.restartFcitx()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\TableInputMethodFragment.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.data.table.TableBasedInputMethod\nimport org.fcitx.fcitx5.android.R\noverride fun onItemRemoved(idx: Int, item: TableBasedInputMethod) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "fcitx5-android/430", "ground_truth": "        item.delete()\r\n        dustman.remove(item.name)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\TableInputMethodFragment.kt"}}
{"prompt": "\n override fun onStop() {\r\n        reloadConfig()\r\n        viewModel.disableToolbarEditButton()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/432", "ground_truth": "        if (uiInitialized) {\r\n            ui.exitMultiSelect()\r\n        }\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\TableInputMethodFragment.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.data.theme.Theme\nprivate inline fun whenHasBackground(\r\n        block: BackgroundStates.(Theme.Custom.CustomBackground) -> Unit,\r\n    ) {\r", "choices": [{"text": ""}], "metadata": {"task_id": "fcitx5-android/436", "ground_truth": "        if (theme.backgroundImage != null)\r\n            block(backgroundStates, theme.backgroundImage!!)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\theme\\CustomThemeActivity.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.R\nimport android.content.Intent\nimport android.app.Activity\nprivate fun delete() {\r\n        setResult(\r\n            Activity.RESULT_OK,\r\n            Intent().apply {\r", "choices": [{"text": "//                putExtra(\r\n//                    Fcitx5Intent.EXTRA_KEY_ACTION,\r\n//                    Fcitx5Intent.ACTION_DELETE_CONFIG\r\n//                )\r\n//                putExtra(\r\n//                    Fcitx5Intent.EXTRA_KEY_CONFIG_NAME,\r\n//                    \"fcitx5-config-name\"\r\n//                )\r\n            }\r\n        )\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/439", "ground_truth": "                putExtra(RESULT, BackgroundResult.Deleted(theme.name))\r\n            }\r\n        )\r\n        finish()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\theme\\CustomThemeActivity.kt"}}
{"prompt": "\n import splitties.views.dsl.core.view\nimport org.fcitx.fcitx5.android.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem) = when (item.itemId) {\r\n        android.R.id.home -> {\r", "choices": [{"text": "//            finish()\r\n            true\r\n        }\r\n        else -> super.onOptionsItemSelected(item)\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/441", "ground_truth": "            cancel()\r\n            true\r\n        }\r\n        else -> super.onOptionsItemSelected(item)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\theme\\CustomThemeActivity.kt"}}
{"prompt": "\n import splitties.views.dsl.core.Ui\nimport org.fcitx.fcitx5.android.data.theme.Theme\nimport android.view.View\noverride fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n        (holder.ui as ThemeThumbnailUi).apply {\r\n            val theme = entries[position]\r\n            setTheme(theme)\r\n            editButton.visibility = View.GONE\r\n            setChecked(position == selected)\r\n            root.setOnClickListener {\r", "choices": [{"text": "//                val intent = Intent(context, ThemeActivity::class.java)\r\n//                intent.putExtra(ThemeActivity.EXTRA_THEME, theme)\r\n//                context.startActivity(intent)\r\n                selected = position\r\n                notifyDataSetChanged()\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/444", "ground_truth": "                onClick(theme)\r\n                selected = position\r\n            }\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\theme\\SimpleThemeListAdapter.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.data.theme.ThemeManager\nimport org.fcitx.fcitx5.android.R\nimport android.os.Build\noverride fun onStop() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n            ThemeManager.syncToDeviceEncryptedStorage()\r", "choices": [{"text": "}\r\n        super.onStop()\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/445", "ground_truth": "        }\r\n        super.onStop()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\theme\\ThemeFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/446", "ground_truth": "        ThemeManager.removeOnChangedListener(onThemeChangeListener)\r\n        super.onDestroy()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\theme\\ThemeFragment.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.data.theme.Theme\nprivate fun positionOf(theme: Theme? = null): Int {\r", "choices": [{"text": ""}], "metadata": {"task_id": "fcitx5-android/447", "ground_truth": "        if (theme == null) return -1\r\n        return entries.indexOfFirst { it.name == theme.name } + OFFSET\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\theme\\ThemeListAdapter.kt"}}
{"prompt": " import org.fcitx.fcitx5.android.data.theme.Theme\nval ADD_THEME\nval THEME\nval entries\nfun setThemes(themes: List<Theme>) {\r\n        entries.clear()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "fcitx5-android/448", "ground_truth": "        entries.addAll(themes)\r\n        notifyItemRangeInserted(OFFSET, themes.size)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\theme\\ThemeListAdapter.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.data.theme.Theme\nprivate fun exportTheme(theme: Theme.Custom) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "fcitx5-android/454", "ground_truth": "        beingExported = theme\r\n        exportLauncher.launch(theme.name + \".zip\")\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\theme\\ThemeListFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/455", "ground_truth": "        ThemeManager.removeOnChangedListener(onThemeChangeListener)\r\n        super.onDestroy()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\theme\\ThemeListFragment.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval intent = Intent(this, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\nval button = findViewById<Button>(R.id.button)"}], "metadata": {"task_id": "fcitx5-android/456", "ground_truth": "        super.onCreate(savedInstanceState)\r\n        followSystemDayNightTheme.registerOnChangeListener(listener)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\theme\\ThemeSettingsFragment.kt"}}
{"prompt": "\n override fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nmMapView.onResume()\r\n}\r\noverride fun onPause() {\r\nsuper.onPause()\r\nmMapView.onPause()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nmMapView.onDestroy()\r\n}\r\noverride fun onLowMemory() {\r\nsuper.onLowMemory()\r\nmMapView.onLowMemory()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/458", "ground_truth": "        super.onResume()\r\n        resumed = true\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\theme\\ThemeSettingsFragment.kt"}}
{"prompt": "\nval listener\nvar resumed\nvar switchPreference SwitchPreference\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nresumed = false\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nresumed = true\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nresumed = false\r\n}\r\noverride fun onStop() {\r\nsuper.onStop()\r\nresumed = false\r\n}\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\nsuper.onActivityResult(requestCode, resultCode, data)\r\nif ("}], "metadata": {"task_id": "fcitx5-android/459", "ground_truth": "        super.onPause()\r\n        resumed = false\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\theme\\ThemeSettingsFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/460", "ground_truth": "        followSystemDayNightTheme.unregisterOnChangeListener(listener)\r\n        super.onDestroy()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\theme\\ThemeSettingsFragment.kt"}}
{"prompt": "\nval checkMark\nval editButton\nval root\n fun setChecked(checked: Boolean) {\r", "choices": [{"text": "if (checked) {\r\ncheckMark.visibility = View.VISIBLE\r\neditButton.visibility = View.GONE\r\n} else {\r\ncheckMark.visibility = View.GONE\r\neditButton.visibility = View.VISIBLE\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/461", "ground_truth": "        checkMark.isVisible = checked\r\n        checkMark.imageResource = R.drawable.ic_baseline_check_24\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\theme\\ThemeThumbnailUi.kt"}}
{"prompt": "\n override fun setDefaultValue(defaultValue: Any?) {\r\n        super.setDefaultValue(defaultValue)\r\n        val (first, second) = defaultValue as? Pair<*, *> ?: return\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/464", "ground_truth": "        default = first as? Int ?: 0\r\n        secondaryDefault = second as? Int ?: 0\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\TwinSeekBarPreference.kt"}}
{"prompt": "\n private fun setValue(primary: Int, secondary: Int) {\r\n        if (callChangeListener(primary to secondary)) {\r\n            persistValues(primary, secondary)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/466", "ground_truth": "            notifyChanged()\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\main\\settings\\TwinSeekBarPreference.kt"}}
{"prompt": "\n import androidx.fragment.app.Fragment\noverride fun onWindowFocusChanged(hasFocus: Boolean) {\r\n        super.onWindowFocusChanged(hasFocus)\r\n        supportFragmentManager.fragments.forEach {\r", "choices": [{"text": "if (it is Fragment) {\r\nit.view?.let { view ->\r\nview.post {\r\nview.systemUiVisibility = View.SYSTEM_UI_FLAG_LAYOUT_STABLE or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\r\n}\r\n}\r\n}\r\n}\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/468", "ground_truth": "            if (it.isVisible) (it as SetupFragment).sync()\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\setup\\SetupActivity.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval inputMethodManager = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\r\ninputMethodManager.showInputMethodPicker()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/470", "ground_truth": "        notificationManager.cancel(NOTIFY_ID)\r\n        super.onResume()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\setup\\SetupActivity.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.databinding.FragmentSetupBinding\nimport androidx.fragment.app.Fragment\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        binding = FragmentSetupBinding.inflate(inflater)\r", "choices": [{"text": "//        binding.lifecycleOwner = this\r\n        return binding.root\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/472", "ground_truth": "        sync()\r\n        return binding.root\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\setup\\SetupFragment.kt"}}
{"prompt": "\n override fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nmMapView.onResume()\r\n}\r\noverride fun onPause() {\r\nsuper.onPause()\r\nmMapView.onPause()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nmMapView.onDestroy()\r\n}\r\noverride fun onLowMemory() {\r\nsuper.onLowMemory()\r\nmMapView.onLowMemory()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/473", "ground_truth": "        super.onResume()\r\n        sync()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\ui\\setup\\SetupFragment.kt"}}
{"prompt": "\n import android.widget.Button\nimport android.app.AlertDialog\nfun AlertDialog.onPositiveButtonClick(l: AlertDialog.() -> Boolean?): AlertDialog {\r\n    positiveButton.setOnClickListener {\r\n        if (l.invoke(this) == true) dismiss()\r", "choices": [{"text": "}\r\n    return this\r\n}\r\nfun AlertDialog.onNegativeButtonClick(l: AlertDialog.() -> Boolean?): AlertDialog {\r\n    negativeButton.setOnClickListener {\r\n        if (l.invoke(this) == true) dismiss()\r\n}\r\n    return this\r\n}\r\nfun AlertDialog.onNeutralButtonClick(l: AlertDialog.() -> Boolean?): AlertDialog {\r\n    neutralButton.setOnClickListener {\r\n        if (l.invoke(this) == true) dismiss()\r\n}\r\n    return this\r\n}\r\nfun AlertDialog.onCancelButtonClick(l: AlertDialog.() -> Boolean?): AlertDialog {\r\n    cancel"}], "metadata": {"task_id": "fcitx5-android/474", "ground_truth": "    }\r\n    return this\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\AlertDialog.kt"}}
{"prompt": "\n import android.widget.Button\nimport android.app.AlertDialog\nfun AlertDialog.onNegativeButtonClick(l: AlertDialog.() -> Boolean): AlertDialog {\r\n    negativeButton.setOnClickListener {\r\n        if (l.invoke(this)) dismiss()\r", "choices": [{"text": "}\r\n    return this\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/475", "ground_truth": "    }\r\n    return this\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\AlertDialog.kt"}}
{"prompt": "\n import android.widget.Button\nimport android.app.AlertDialog\nfun AlertDialog.onNeutralButtonClick(l: AlertDialog.() -> Boolean): AlertDialog {\r\n    neutralButton.setOnClickListener {\r\n        if (l.invoke(this)) dismiss()\r", "choices": [{"text": "}\r\n    return this\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/476", "ground_truth": "    }\r\n    return this\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\AlertDialog.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.ui.main.MainActivity\nimport android.content.Context\nfun launchMain(context: Context) {\r\n        context.startActivity<MainActivity> {\r", "choices": [{"text": "//            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\r\n        }\r\n    }\n"}], "metadata": {"task_id": "fcitx5-android/477", "ground_truth": "            addFlags(Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS)\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\AppUtil.kt"}}
{"prompt": "\n import java.io.Serializable\nimport android.os.Bundle\ninline fun <reified T : Serializable> Bundle.serializable(key: String): T? {\r\n    @Suppress(\"DEPRECATION\")\r\n    return getSerializable(key) as? T\r\n//    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n//        getSerializable(key, T::class.java)\r", "choices": [{"text": "//    } else {\r\n//        getSerializable(key) as? T\r\n//    }\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/481", "ground_truth": "//    } else {\r\n//        @Suppress(\"DEPRECATION\")\r\n//        getSerializable(key) as? T\r\n//    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\Bundle.kt"}}
{"prompt": "\n import android.os.Parcelable\nimport android.os.Bundle\ninline fun <reified T : Parcelable> Bundle.parcelable(key: String): T? {\r\n    // https://issuetracker.google.com/issues/240585930#comment6\r\n    @Suppress(\"DEPRECATION\")\r\n    return getParcelable(key) as? T\r\n//    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n//        getParcelable(key, T::class.java)\r", "choices": [{"text": "//    } else {\r\n//        getParcelable(key) as? T\r\n//    }\r\n}\r\ninline fun <reified T : Parcelable> Bundle.parcelable(key: String, default: T): T {\r\n    // https://issuetracker.google.com/issues/240585930#comment6\r\n    @Suppress(\"DEPRECATION\")\r\n    return getParcelable(key) as? T?: default\r\n//    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n//"}], "metadata": {"task_id": "fcitx5-android/482", "ground_truth": "//    } else {\r\n//        @Suppress(\"DEPRECATION\")\r\n//        getParcelable(key) as? T\r\n//    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\Bundle.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.common.ipc.IClipboardEntryTransformer\nfun IClipboardEntryTransformer.descEquals(other: IClipboardEntryTransformer): Boolean {\r\n    return try {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/484", "ground_truth": "        description!! == other.description!!\r\n    } catch (e: Exception) {\r\n        false\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\ClipboardEntryTransformer.kt"}}
{"prompt": "\n import android.graphics.ColorFilter\nimport android.graphics.Color\n\r\n@Suppress(\"FunctionName\")\r\nfun DarkenColorFilter(percent: Int): ColorFilter {\r", "choices": [{"text": "return ColorFilter.SRC_ATOP\r\n}\r\n<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.graphics.Color\nimport android.graphics.ColorFilter\nimport android.graphics.ColorMatrix\nimport android.graphics.ColorMatrixColorFilter\nimport android.graphics.LightingColorFilter\nimport android.graphics.PorterDuff\nimport android.graphics.PorterDuffColorFilter\nimport android.graphics.PorterDuffXfermode\nimport android.graphics.drawable.Drawable"}], "metadata": {"task_id": "fcitx5-android/485", "ground_truth": "    val value = percent * 255 / 100\r\n    return PorterDuffColorFilter(Color.argb(value, 0, 0, 0), PorterDuff.Mode.SRC_OVER)\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\ColorFilter.kt"}}
{"prompt": "\n import android.provider.OpenableColumns\nimport android.net.Uri\nimport android.content.ContentResolver\nfun ContentResolver.queryFileName(uri: Uri): String? = query(uri, null, null, null, null)?.use {\r\n    val index = it.getColumnIndex(OpenableColumns.DISPLAY_NAME)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/487", "ground_truth": "    it.moveToFirst()\r\n    it.getString(index)\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\ContentResolver.kt"}}
{"prompt": "\n import androidx.annotation.ColorInt\nimport android.graphics.drawable.RippleDrawable\nimport android.graphics.Color\nfun borderlessRippleDrawable(@ColorInt color: Int, r: Int = RippleDrawable.RADIUS_AUTO) =\r", "choices": [{"text": "RippleDrawable(ColorStateList.valueOf(color), null, null).apply {\r\nsetRadius(r)\r\n}<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.content.ContextCompat\nimport androidx.core.graphics.drawable.toBitmap\nimport com.example.myapplication.databinding.ActivityMainBinding\nimport com."}], "metadata": {"task_id": "fcitx5-android/488", "ground_truth": "    RippleDrawable(ColorStateList.valueOf(color), null, null).apply {\r\n        radius = r\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\Drawable.kt"}}
{"prompt": "\n import androidx.annotation.ColorInt\nimport android.graphics.drawable.StateListDrawable\nimport android.graphics.Color\nfun circlePressHighlightDrawable(@ColorInt color: Int) = StateListDrawable().apply {\r\n    addState(\r\n        intArrayOf(android.R.attr.state_pressed),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/489", "ground_truth": "        ShapeDrawable(OvalShape()).apply { paint.color = color }\r\n    )\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\Drawable.kt"}}
{"prompt": "\n import androidx.annotation.ColorInt\nimport android.graphics.drawable.GradientDrawable\nimport android.graphics.Color\nfun borderDrawable(\r\n    width: Int,\r\n    @ColorInt stroke: Int,\r\n    @ColorInt background: Int = Color.TRANSPARENT\r\n) = GradientDrawable().apply {\r", "choices": [{"text": "//    setColor(background)\r\n    setStroke(width, stroke)\r\n}<file_sep>/app/src/main/java/com/example/myapplication/ui/main/MainViewModel.kt\npackage com.example.myapplication.ui.main\n\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport com.example.myapplication.data.model.User\nimport com.example.myapplication.data.repository.UserRepository\nimport com.example.myapplication.utils.Resource\nimport kotlinx.coroutines.CoroutineScope\n"}], "metadata": {"task_id": "fcitx5-android/490", "ground_truth": "    setStroke(width, stroke)\r\n    setColor(background)\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\Drawable.kt"}}
{"prompt": "\n fun push(event: Event, vararg booleanStates: Pair<B, Boolean>) {\r\n        booleanStates.forEach {\r\n            setBooleanState(it.first, it.second)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/493", "ground_truth": "        }\r\n        push(event)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\EventStateMachine.kt"}}
{"prompt": "\nvar raw\nval builders\nval name String\n fun unsafeJump(state: State) {\r", "choices": [{"text": "val builder = state.builder\r\nval builder = state.builder\r\nval builder = state.builder\r\nval builder = state.builder\r\nval builder = state.builder\r\nval builder = state.builder\r\nval builder = state.builder\r\nval builder = state.builder\r\nval builder = state.builder\r\nval builder = state.builder\r\nval builder = state.builder\r\nval builder = state.builder\r\nval builder = state.builder\r\nval builder = state.builder\r\nval builder = state.builder\r\nval builder = state.builder\r"}], "metadata": {"task_id": "fcitx5-android/494", "ground_truth": "        currentState = state\r\n        onNewStateListener?.invoke(state)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\EventStateMachine.kt"}}
{"prompt": "\n import java.io.File\nfun symlink(source: File, target: File) = runCatching {\r", "choices": [{"text": "-    if (source.isDirectory) {\r\n-        if (!target.isDirectory) {\r\n-            target.deleteRecursively()\r\n-        }\r\n-        if (!target.exists()) {\r\n-            target.mkdirs()\r\n-        }\r\n-        source.listFiles().forEach {\r\n-            symlink(it, File(target, it.name))\r\n-        }\r\n-    } else {\r\n-        if (!target.exists()) {\r\n-            target.parentFile.mkdirs()\r\n-            target"}], "metadata": {"task_id": "fcitx5-android/496", "ground_truth": "        target.parentFile?.mkdirs()\r\n        Os.symlink(source.path, target.path)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\FileUtil.kt"}}
{"prompt": "\nval value String\n fun set(vararg keys: String, str: String) {\r\n        if (keys.isEmpty()) return\r\n        var current = core\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/499", "ground_truth": "        keys.forEach {\r\n            current = current.getOrCreate(it)\r\n        }\r\n        current.value = str\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\Ini.kt"}}
{"prompt": "\n import android.view.inputmethod.InputConnection\nfun InputConnection.withBatchEdit(block: InputConnection.() -> Unit) {\r\n    beginBatchEdit()\r", "choices": [{"text": "block()\r\n    endBatchEdit()\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/500", "ground_truth": "    block.invoke(this)\r\n    endBatchEdit()\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\InputConnection.kt"}}
{"prompt": " import android.content.Context\nval serviceName String\nval componentName String\nfun isEnabled(): Boolean {\r\n        return appContext.inputMethodManager.enabledInputMethodList.any {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/501", "ground_truth": "            it.packageName == BuildConfig.APPLICATION_ID && it.serviceName == serviceName\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\InputMethodUtil.kt"}}
{"prompt": "\n import android.os.Parcelable\nimport android.os.Build\nimport android.content.Intent\ninline fun <reified T : Parcelable> Intent.parcelable(key: String): T? {\r\n    // https://issuetracker.google.com/issues/240585930#comment6\r\n    @Suppress(\"DEPRECATION\")\r\n    return getParcelableExtra(key) as? T\r\n//    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n//        getParcelableExtra(key, T::class.java)\r", "choices": [{"text": "//    } else {\r\n//        getParcelableExtra(key) as? T\r\n//    }\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/506", "ground_truth": "//    } else {\r\n//        @Suppress(\"DEPRECATION\")\r\n//        getParcelableExtra(key) as? T\r\n//    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\Intent.kt"}}
{"prompt": "\n import org.fcitx.fcitx5.android.R\nimport kotlinx.coroutines.async\nimport kotlinx.coroutines.Deferred\nfun getLogAsync(): Deferred<Result<List<String>>> = async {\r\n        runCatching {\r\n            Runtime.getRuntime()\r\n                .exec(arrayOf(\"logcat\", pid?.let { \"--pid=$it\" } ?: \"\", \"-d\"))\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/509", "ground_truth": "                .inputStream\r\n                .bufferedReader()\r\n                .readLines()\r\n        }\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\Logcat.kt"}}
{"prompt": "\n import kotlinx.coroutines.Job\nfun clearLog(): Job =\r", "choices": [{"text": "GlobalScope.launch {\r\n    Log.d(\"clearLog\", \"clearLog\")\r\n    val logFile = File(context.filesDir, \"log.txt\")\r\n    logFile.delete()\r\n}\r\n"}], "metadata": {"task_id": "fcitx5-android/510", "ground_truth": "        launch {\r\n            runCatching { Runtime.getRuntime().exec(arrayOf(\"logcat\", \"-c\")) }\r\n        }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\Logcat.kt"}}
{"prompt": "\nval logFlow SharedFlow<String>\nval flow MutableSharedFlow<String>\nval default\n fun shutdownLogFlow() {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "fcitx5-android/511", "ground_truth": "        process?.destroy()\r\n        emittingJob?.cancel()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\Logcat.kt"}}
{"prompt": "\n private fun updateDirtyStatus(key: String, boolean: Boolean) {\r\n        if (boolean) {\r\n            dirtyStatus.add(key)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/512", "ground_truth": "        } else {\r\n            dirtyStatus.remove(key)\r\n        }\r\n        dirty = dirtyStatus.isNotEmpty()\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\NaiveDustman.kt"}}
{"prompt": "\nvar onClean\nval initialValues\nvar onDirty\n fun reset(initial: Map<String, T>) {\r\n        dirty = false\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "fcitx5-android/514", "ground_truth": "        dirtyStatus.clear()\r\n        initialValues.putAll(initial)\r\n    }", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\NaiveDustman.kt"}}
{"prompt": "\n import androidx.preference.PreferenceScreen\nimport androidx.preference.PreferenceCategory\nimport androidx.preference.Preference\nfun PreferenceScreen.addCategory(title: String, block: PreferenceCategory.() -> Unit) {\r\n    val category = PreferenceCategory(context).apply {\r", "choices": [{"text": "title = title\r\nblock()\r\n}\r\naddPreference(category)\r\n}\r\nfun PreferenceScreen.addPreference(preference: Preference) {\r\naddPreference(preference)\r\n}\r\nfun PreferenceScreen.addPreference(title: String, block: Preference.() -> Unit) {\r\nval preference = Preference(context).apply {\r\ntitle = title\r\nblock()\r\n}\r\naddPreference(preference)\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/516", "ground_truth": "        setTitle(title)\r\n    }\r\n    addPreference(category)\r\n    block.invoke(category)\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\PreferenceScreen.kt"}}
{"prompt": "\n import androidx.preference.PreferenceScreen\nimport androidx.preference.PreferenceCategory\nimport androidx.preference.Preference\nimport androidx.annotation.StringRes\nfun PreferenceScreen.addCategory(@StringRes title: Int, block: PreferenceCategory.() -> Unit) {\r", "choices": [{"text": "val category = PreferenceCategory(context).apply {\r\ntitle(title)\r\nblock()\r\n}\r\naddPreference(category)\r\n}\r\nfun PreferenceScreen.addPreference(preference: Preference) {\r\naddPreference(preference)\r\n}\r\nfun PreferenceScreen.addPreference(block: Preference.() -> Unit) {\r\nval preference = Preference(context).apply {\r\nblock()\r\n}\r\naddPreference(preference)\r\n}\r\nfun PreferenceScreen.addPreference(title: String, block: Preference.() -> Unit) {\r\n"}], "metadata": {"task_id": "fcitx5-android/517", "ground_truth": "    val ctx = context\r\n    addCategory(ctx.getString(title), block)\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\PreferenceScreen.kt"}}
{"prompt": "\n import androidx.preference.PreferenceGroup\nimport androidx.preference.Preference\nimport androidx.annotation.StringRes\nimport androidx.annotation.DrawableRes\nfun PreferenceGroup.addPreference(\r\n    @StringRes title: Int,\r\n    summary: String,\r\n    @DrawableRes icon: Int? = null,\r\n    onClick: (() -> Unit)? = null\r\n) {\r", "choices": [{"text": "val preference = Preference(context)\r\npreference.title = title\r\npreference.summary = summary\r\npreference.icon = icon\r\npreference.setOnPreferenceClickListener {\r\nonClick?.invoke()\r\ntrue\r\n}\r\naddPreference(preference)\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/518", "ground_truth": "    val ctx = context\r\n    addPreference(ctx.getString(title), summary, icon, onClick)\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\PreferenceScreen.kt"}}
{"prompt": "\n import androidx.preference.PreferenceGroup\nimport androidx.preference.Preference\nimport androidx.annotation.StringRes\nimport androidx.annotation.DrawableRes\nfun PreferenceGroup.addPreference(\r\n    @StringRes title: Int,\r\n    @StringRes summary: Int? = null,\r\n    @DrawableRes icon: Int? = null,\r\n    onClick: (() -> Unit)? = null\r\n) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/519", "ground_truth": "    val ctx = context\r\n    addPreference(ctx.getString(title), summary?.let(ctx::getString), icon, onClick)\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\PreferenceScreen.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\nimport androidx.core.view.WindowInsetsCompat\nimport androidx.core.view.ViewCompat\nfun RecyclerView.applyNavBarInsetsBottomPadding() {\r\n    clipToPadding = false\r\n    ViewCompat.setOnApplyWindowInsetsListener(this) { _, windowInsets ->\r\n        windowInsets.getInsets(WindowInsetsCompat.Type.navigationBars()).also {\r", "choices": [{"text": "//            Log.d(\"TAG\", \"applyNavBarInsetsBottomPadding: ${it.bottom}\")\r\n            setPadding(paddingLeft, paddingTop, paddingRight, it.bottom)\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "fcitx5-android/521", "ground_truth": "            bottomPadding = it.bottom\r\n        }\r\n        windowInsets\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\RecyclerView.kt"}}
{"prompt": "\n import splitties.resources.withResolvedThemeAttribute\nimport splitties.experimental.InternalSplittiesApi\nimport androidx.annotation.AttrRes\nimport android.util.TypedValue\nimport android.content.Context\n\r\n@OptIn(InternalSplittiesApi::class)\r\nfun Context.styledFloat(@AttrRes attrRes: Int) = withResolvedThemeAttribute(attrRes) {\r\n    when (type) {\r\n        TypedValue.TYPE_FLOAT -> float\r", "choices": [{"text": "//        TypedValue.TYPE_DIMENSION -> float\r\n        else -> throw IllegalArgumentException(\"Attribute $attrRes is not a float\")\r\n    }\r\n}\r\n<file_sep>/preferences/src/main/java/com/louiscad/splitties/preferences/Preferences.kt\npackage com.louiscad.splitties.preferences\n\nimport android.content.Context\nimport android.content.SharedPreferences\nimport android.content.SharedPreferences.OnSharedPreferenceChangeListener\nimport android.os.Build\nimport android.preference.PreferenceManager\nimport androidx.annotation.AnyRes\nimport androidx.annotation.AttrRes"}], "metadata": {"task_id": "fcitx5-android/523", "ground_truth": "        else -> throw IllegalArgumentException(\"float attribute expected\")\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\Splitties.kt"}}
{"prompt": "\n import android.annotation.SuppressLint\n\r\n@SuppressLint(\"PrivateApi\")\r\nfun getSystemProperty(key: String): String {\r\n    return try {\r\n        Class.forName(\"android.os.SystemProperties\")\r\n            .getMethod(\"get\", String::class.java)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/524", "ground_truth": "            .invoke(null, key) as String\r\n    } catch (e: Exception) {\r\n        \"\"\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\SystemProperty.kt"}}
{"prompt": "\n fun isSystemSettingEnabled(key: String): Boolean {\r\n    return try {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/525", "ground_truth": "        Settings.System.getInt(appContext.contentResolver, key) == 1\r\n    } catch (e: Exception) {\r\n        false\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\SystemSettings.kt"}}
{"prompt": "\n import java.io.File\ninline fun <T> withTempDir(block: (File) -> T): T {\r\n    val dir = appContext.cacheDir.resolve(System.currentTimeMillis().toString()).also {\r\n        it.mkdirs()\r\n    }\r\n    try {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "fcitx5-android/526", "ground_truth": "        return block(dir)\r\n    } finally {\r\n        dir.deleteRecursively()\r\n    }\r\n}", "fpath": "fcitx5-android\\app\\src\\main\\java\\org\\fcitx\\fcitx5\\android\\utils\\TempDir.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.R\nimport coil.request.Options\nimport coil.decode.DecodeResult\nimport android.graphics.BitmapFactory\nimport android.graphics.Bitmap\noverride suspend fun decode(): DecodeResult? {\r\n        return try {\r\n            if (!isIco(source)) {\r\n                return null\r\n            }\r\n\r\n            return BitmapFactory.Options().decode(source.source())\r", "choices": [{"text": "//            val options = Options.Builder(context).build()\r\n//            val bitmap = BitmapFactory.decode(source.source(), options)\r\n//            val result = DecodeResult.Success(bitmap)\r\n//            result\r\n        } catch (e: Exception) {\r\n            DecodeResult.Error(e)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Feeder/0", "ground_truth": "        } catch (e: Exception) {\r\n            Log.e(LOG_TAG, \"Failed to decode ICO\", e)\r\n            null\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\danielrampelt\\coil\\ico\\IcoDecoder.kt"}}
{"prompt": "\nval resources\nval ICO_ENTRY_SIZE\nval ICO_HEADER_SIZE\n override fun equals(other: Any?): Boolean {\r", "choices": [{"text": "return this === other || other is ICO && other.icoHeader == icoHeader && other.icoEntries == icoEntries\r\n}\r\noverride fun hashCode(): Int {\r\nreturn Objects.hash(icoHeader, icoEntries)\r\n}\r\noverride fun toString(): String {\r\nreturn \"ICO(icoHeader=$icoHeader, icoEntries=$icoEntries)\"\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}"}], "metadata": {"task_id": "Feeder/2", "ground_truth": "            if (this === other) return true\r\n            return other is Factory\r\n        }", "fpath": "Feeder\\app\\src\\main\\java\\com\\danielrampelt\\coil\\ico\\IcoDecoder.kt"}}
{"prompt": "\n import android.os.Build\nimport android.content.pm.ShortcutManager\nimport android.content.Context\nfun removeDynamicShortcuts(feedIds: List<Long>) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1) {\r\n            val shortcutManager = application.getSystemService(Context.SHORTCUT_SERVICE) as ShortcutManager\r", "choices": [{"text": "//            val shortcutManager = getSystemService(Context.SHORTCUT_SERVICE) as ShortcutManager\r\n            val shortcuts = shortcutManager.dynamicShortcuts\r\n            val toRemove = ArrayList<ShortcutInfo>()\r\n            for (shortcut in shortcuts) {\r\n                if (feedIds.contains(shortcut.id)) {\r\n                    toRemove.add(shortcut)\r\n                }\r\n            }\r\n            shortcutManager.removeDynamicShortcuts(toRemove)\r\n        }\r\n    }\n<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.content.Intent"}], "metadata": {"task_id": "Feeder/4", "ground_truth": "            shortcutManager.removeDynamicShortcuts(feedIds.map { it.toString() })\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\AndroidSystemStore.kt"}}
{"prompt": "\n import java.time.Instant\nsuspend fun markAsReadAndNotified(\r\n        itemId: Long,\r\n        readTime: Instant = Instant.now(),\r\n    ) {\r\n        dao.markAsReadAndNotified(\r\n            id = itemId,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/6", "ground_truth": "            readTime = readTime.coerceAtLeast(Instant.EPOCH),\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\FeedItemStore.kt"}}
{"prompt": "\n import java.time.Instant\nsuspend fun markAsReadAndNotifiedAndOverwriteReadTime(\r\n        itemId: Long,\r\n        readTime: Instant,\r\n    ) {\r\n        dao.markAsReadAndNotifiedAndOverwriteReadTime(\r\n            id = itemId,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/7", "ground_truth": "            readTime = readTime.coerceAtLeast(Instant.EPOCH),\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\FeedItemStore.kt"}}
{"prompt": "\nval dao FeedItemDao\nval appDatabase AppDatabase\n suspend fun duplicateStoryExists(\r\n        id: Long,\r\n        title: String,\r\n        link: String?,\r\n    ): Boolean {\r\n        return dao.duplicationExists(\r", "choices": [{"text": "id,\r\ntitle,\r\nlink\r\n        )\r\n    }\r\nsuspend fun insertStory(\r\n        id: Long,\r\n        title: String,\r\n        link: String?,\r\n        author: String?,\r\n        published: String?,\r\n        summary: String?,\r\n        content: String?,\r\n        image: String?,\r\n        tags: String?,\r\n        categories: String?,\r\n        language: String?,\r\n        source: String?,\r\n        sourceUrl: String?,\r\n        sourceName: String?,\r\n        sourceDescription: String?,\r\n        sourceImage: String?,\r\n        sourceLanguage: String?,\r\n        sourceCategories: String?,\r\n        sourceTags: String?,\r\n        sourceAuthor: String"}], "metadata": {"task_id": "Feeder/8", "ground_truth": "            id = id,\r\n            plainTitle = title,\r\n            link = link,\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\FeedItemStore.kt"}}
{"prompt": "\n import java.time.LocalDateTime\nimport java.time.LocalDate\nprivate fun LocalDateTime.formatDynamically(): String {\r\n    val today = LocalDate.now().atStartOfDay()\r", "choices": [{"text": "//    val today = LocalDate.now()\r\n    val todayString = today.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"))\r\n    val todayString2 = today.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"))\r\n    val todayString3 = today.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"))\r\n    val todayString4 = today.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"))\r\n    val todayString5 = today.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"))\r\n    val todayString6 = today.format"}], "metadata": {"task_id": "Feeder/9", "ground_truth": "    return when {\r\n        this >= today -> format(shortTimeFormat)\r\n        else -> format(mediumDateTimeFormat)\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\FeedItemStore.kt"}}
{"prompt": "\nvar nextTagUiId Long\nval tagUiIds\nval allTags Flow<List<String>>\n private fun getTagUiId(tag: String): Long {\r\n        return tagUiIds.getOrPut(tag) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/10", "ground_truth": "            --nextTagUiId\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\FeedStore.kt"}}
{"prompt": " import com.nononsenseapps.feeder.db.room.ID_UNSET\nimport com.nononsenseapps.feeder.db.room.Feed\nval feedForSettings Flow<List<FeedForSettings>>\nval feedDao FeedDao\nvar nextTagUiId Long\nsuspend fun saveFeed(feed: Feed): Long {\r\n        return if (feed.id > ID_UNSET) {\r\n            feedDao.updateFeed(feed)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/11", "ground_truth": "            feed.id\r\n        } else {\r\n            feedDao.insertFeed(feed)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\FeedStore.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.Flow\nimport com.nononsenseapps.feeder.model.FeedUnreadCount\nimport com.nononsenseapps.feeder.db.room.Feed\nimport androidx.paging.PagingData\nimport androidx.paging.PagingConfig\nimport androidx.paging.Pager\nfun getPagedNavDrawerItems(expandedTags: Set<String>): Flow<PagingData<FeedUnreadCount>> =\r\n        Pager(\r\n            config =\r\n                PagingConfig(\r\n                    pageSize = 10,\r\n                    initialLoadSize = 50,\r\n                    prefetchDistance = 50,\r\n                    jumpThreshold = 50,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/12", "ground_truth": "                ),\r\n        ) {\r\n            feedDao.getPagedNavDrawerItems(expandedTags)\r\n        }\r\n            .flow", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\FeedStore.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.Flow\nimport com.nononsenseapps.feeder.db.room.ID_UNSET\nimport com.nononsenseapps.feeder.db.room.FeedTitle\nimport com.nononsenseapps.feeder.db.room.Feed\nfun getFeedTitles(\r\n        feedId: Long,\r\n        tag: String,\r\n    ): Flow<List<FeedTitle>> =\r\n        when {\r\n            feedId > ID_UNSET -> feedDao.getFeedTitlesWithId(feedId)\r", "choices": [{"text": "//            tag.isNotBlank() -> feedDao.getFeedTitlesWithTag(tag)\r\n            else -> feedDao.getFeedTitlesWithTag(tag)\r\n        }\r\n\r\nfun getFeedTitle(\r\n        feedId: Long,\r\n        tag: String,\r\n    ): Flow<FeedTitle?> =\r\n        when {\r\n            feedId > ID_UNSET -> feedDao.getFeedTitleWithId(feedId)\r\n//            tag.isNotBlank() -> feedDao.getFeedTitleWithTag(tag)\r\n            else -> feedDao.getFeedTitleWithTag(tag)\r\n        }\r\n\r\nfun getFeedTitle("}], "metadata": {"task_id": "Feeder/13", "ground_truth": "            tag.isNotBlank() -> feedDao.getFeedTitlesWithTag(tag)\r\n            else -> feedDao.getAllFeedTitles()\r\n        }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\FeedStore.kt"}}
{"prompt": " import com.nononsenseapps.feeder.ui.compose.feedarticle.FeedListFilter\nimport com.nononsenseapps.feeder.db.room.Feed\nval currentFeedAndTag StateFlow<Pair<Long, String>>\nval feedListFilter StateFlow<FeedListFilter>\nval isMarkAsReadOnScroll StateFlow<Boolean>\nfun setFeedListFilterRecentlyRead(value: Boolean) {\r\n        settingsStore.setFeedListFilterRecentlyRead(value)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Feeder/16", "ground_truth": "        // Implies read too\r\n        if (!value) {\r\n            settingsStore.setFeedListFilterRead(false)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\Repository.kt"}}
{"prompt": "\n suspend fun markAsUnread(itemId: Long) {\r", "choices": [{"text": "-    val item = getItem(itemId)\r\n-    item.unread = true\r\n-    item.save()\r\n+    val item = getItem(itemId)?: return\r\n+    item.unread = true\r\n+    item.save()?: return\r\n }\r\n \r\n suspend fun markAsRead(itemId: Long) {\r\n-    val item = getItem(itemId)\r\n-    item.unread = false\r\n-    item.save()\r\n+    val item = getItem(itemId)?: return\r\n+    item.unread = false\r\n+   "}], "metadata": {"task_id": "Feeder/18", "ground_truth": "        feedItemStore.markAsUnread(itemId)\r\n        syncRemoteStore.setNotSynced(itemId)\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\Repository.kt"}}
{"prompt": "\nval feedNotificationSettings Flow<List<FeedForSettings>>\nval feedDisplayTitle String\nval feedItemStyle StateFlow<FeedItemStyle>\n suspend fun getTextToDisplayForItem(itemId: Long): TextToDisplay =\r\n        when (feedItemStore.getFullTextByDefault(itemId)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/19", "ground_truth": "            true -> TextToDisplay.FULLTEXT\r\n            false -> TextToDisplay.DEFAULT\r\n        }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\Repository.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.flow\nimport kotlinx.coroutines.flow.Flow\nimport com.nononsenseapps.feeder.model.FeedUnreadCount\nimport com.nononsenseapps.feeder.db.room.Feed\nimport androidx.paging.PagingData\nfun getPagedNavDrawerItems(): Flow<PagingData<FeedUnreadCount>> =\r", "choices": [{"text": "flow {\r\n    emit(PagingData.from(listOf(FeedUnreadCount(1, 1), FeedUnreadCount(2, 2), FeedUnreadCount(3, 3))))\r\n}<file_sep>/app/src/main/java/com/nononsenseapps/feeder/ui/feed/FeedFragment.kt\npackage com.nononsenseapps.feeder.ui.feed\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\n"}], "metadata": {"task_id": "Feeder/25", "ground_truth": "        expandedTags.flatMapLatest {\r\n            feedStore.getPagedNavDrawerItems(it)\r\n        }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\Repository.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.flow\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.ExperimentalCoroutinesApi\nimport com.nononsenseapps.feeder.db.room.FeedTitle\nimport com.nononsenseapps.feeder.db.room.Feed\n @OptIn(ExperimentalCoroutinesApi::class)\r\n    fun getCurrentlyVisibleFeedTitles(): Flow<List<FeedTitle>> =\r", "choices": [{"text": "flow {\r\n    emit(feedDao.getFeedTitles())\r\n}\n"}], "metadata": {"task_id": "Feeder/26", "ground_truth": "        currentFeedAndTag.flatMapLatest { (feedId, tag) ->\r\n            feedStore.getFeedTitles(feedId, tag)\r\n        }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\Repository.kt"}}
{"prompt": " import com.nononsenseapps.feeder.util.Either\nimport com.nononsenseapps.feeder.sync.ErrorResponse\nval currentFeedAndTag StateFlow<Pair<Long, String>>\nval feedId Long\nval feedDisplayTitle String\nsuspend fun joinSyncChain(\r\n        syncCode: String,\r\n        secretKey: String,\r\n    ): Either<ErrorResponse, String> {\r\n        return syncClient.join(syncCode = syncCode, remoteSecretKey = secretKey)\r\n            .onRight {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/29", "ground_truth": "                syncClient.getDevices()\r\n            }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\Repository.kt"}}
{"prompt": "\nval feedDisplayTitle String\nval feedListFilter StateFlow<FeedListFilter>\nval feedItemStore FeedItemStore\n suspend fun leaveSyncChain() {\r\n        syncClient.leave()\r\n            .onLeft {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/30", "ground_truth": "                Log.e(LOG_TAG, \"leaveSyncChain: ${it.code}, ${it.body}\", it.throwable)\r\n            }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\Repository.kt"}}
{"prompt": "\nval feedDisplayTitle String\nval feedListFilter StateFlow<FeedListFilter>\nval feedItemStore FeedItemStore\n suspend fun removeDevice(deviceId: Long) {\r\n        syncClient.removeDevice(deviceId = deviceId)\r\n            .onLeft {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/31", "ground_truth": "                Log.e(LOG_TAG, \"removeDevice: ${it.code}, ${it.body}\", it.throwable)\r\n            }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\Repository.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.util.Either\nimport com.nononsenseapps.feeder.sync.ErrorResponse\nsuspend fun startNewSyncChain(): Either<ErrorResponse, Pair<String, String>> {\r\n        return syncClient.create()\r\n            .onRight {\r\n                updateDeviceList()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/32", "ground_truth": "            }\r\n            .map { syncCode ->\r\n                syncCode to getSyncRemote().secretKey\r\n            }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\Repository.kt"}}
{"prompt": " import java.time.Instant\nimport kotlinx.coroutines.flow.update\nval _resumeTime\nval resumeTime StateFlow<Instant>\nval _expandedTags\nfun setResumeTime(instant: Instant) {\r\n        _resumeTime.update {\r", "choices": [{"text": "instant\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Feeder/33", "ground_truth": "            instant\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SessionStore.kt"}}
{"prompt": " import kotlinx.coroutines.flow.update\nval _expandedTags\nval expandedTags StateFlow<Set<String>>\nval _resumeTime\nfun toggleTagExpansion(tag: String) {\r\n        _expandedTags.update {\r\n            if (tag in expandedTags.value) {\r\n                _expandedTags.value - tag\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/34", "ground_truth": "            } else {\r\n                _expandedTags.value + tag\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SessionStore.kt"}}
{"prompt": "\nval _addedFeederNews\nval addedFeederNews StateFlow<Boolean>\nval _currentFeedAndTag\n fun setAddedFeederNews(value: Boolean) {\r", "choices": [{"text": "addedFeederNews.value = value\r\n}\n"}], "metadata": {"task_id": "Feeder/35", "ground_truth": "        sp.edit().putBoolean(PREF_ADDED_FEEDER_NEWS, value).apply()\r\n        _addedFeederNews.value = value\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "\nval currentArticleId\nval _currentArticle\nval _isArticleOpen\n fun setCurrentArticle(articleId: Long) {\r", "choices": [{"text": "currentArticleId = articleId\r\n_currentArticle = Article.find(Article::class.java, \"id =?\", articleId.toString()).first()\r\n_isArticleOpen = true\r\n}\r\n"}], "metadata": {"task_id": "Feeder/37", "ground_truth": "        _currentArticle.value = articleId\r\n        sp.edit().putLong(PREF_LAST_ARTICLE_ID, articleId).apply()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "\nval _isArticleOpen\nval isArticleOpen StateFlow<Boolean>\nval _currentArticle\n fun setIsArticleOpen(open: Boolean) {\r", "choices": [{"text": "_isArticleOpen.value = open\r\n}\n"}], "metadata": {"task_id": "Feeder/38", "ground_truth": "        _isArticleOpen.update { open }\r\n        sp.edit().putBoolean(PREF_IS_ARTICLE_OPEN, open).apply()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": " import kotlinx.coroutines.flow.update\nval _maxLines\nval maxLines StateFlow<Int>\nval _feedItemStyle\nfun setMaxLines(value: Int) {\r\n        if (value > 0) {\r\n            _maxLines.update { value }\r", "choices": [{"text": "}\r\n    }\n"}], "metadata": {"task_id": "Feeder/40", "ground_truth": "            sp.edit().putInt(PREF_MAX_LINES, value).apply()\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "\nval _showOnlyTitle\nval showOnlyTitle StateFlow<Boolean>\nval _syncOnlyWhenCharging\n fun setShowOnlyTitles(value: Boolean) {\r", "choices": [{"text": "_showOnlyTitle.value = value\r\n}\n"}], "metadata": {"task_id": "Feeder/41", "ground_truth": "        _showOnlyTitle.update { value }\r\n        sp.edit().putBoolean(PREF_LIST_SHOW_ONLY_TITLES, value).apply()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": " import com.nononsenseapps.feeder.ui.compose.feedarticle.FeedListFilter\nimport com.nononsenseapps.feeder.R\nval _feedListFilter\nval feedListFilter StateFlow<FeedListFilter>\nval _currentFeedAndTag\nfun setFeedListFilterRead(value: Boolean) {\r", "choices": [{"text": "feedListFilter.value = feedListFilter.value.copy(read = value)\r\n}\r\nfun setFeedListFilterStarred(value: Boolean) {\r\nfeedListFilter.value = feedListFilter.value.copy(starred = value)\r\n}\r\nfun setFeedListFilterUnread(value: Boolean) {\r\nfeedListFilter.value = feedListFilter.value.copy(unread = value)\r\n}\r\nfun setFeedListFilterUnstarred(value: Boolean) {\r\nfeedListFilter.value = feedListFilter.value"}], "metadata": {"task_id": "Feeder/44", "ground_truth": "        _feedListFilter.update { it.copy(read = value) }\r\n        sp.edit().putBoolean(PREFS_FILTER_READ, value).apply()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "\nval _currentTheme\nval currentTheme\nval _useDynamicTheme\n fun setCurrentTheme(value: ThemeOptions) {\r", "choices": [{"text": "_currentTheme.value = value\r\n}\r\nfun setUseDynamicTheme(value: Boolean) {\r\n_useDynamicTheme.value = value\r\n}\r\n"}], "metadata": {"task_id": "Feeder/45", "ground_truth": "        _currentTheme.value = value\r\n        sp.edit().putString(PREF_THEME, value.name.lowercase()).apply()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "\nval _darkThemePreference\nval darkThemePreference\nval blockListPreference Flow<List<String>>\n fun setDarkThemePreference(value: DarkThemePreferences) {\r", "choices": [{"text": "val darkThemePreference = Preference(\r\ncontext = context,\r\nkey = \"darkThemePreference\",\r\ntitle = \"Dark Theme\",\r\ndefaultValue = DarkThemePreferences.LIGHT,\r\nonPreferenceChangeListener = { _, newValue ->\r\nwhen (newValue) {\r\nDarkThemePreferences.LIGHT -> {\r\n_darkThemePreference.value = DarkThemePreferences.LIGHT\r\n}\r\nDarkThemePreferences.DARK -> {\r\n_darkThemePreference.value = DarkThemePreferences.DARK\r\n}\r\nDarkThemePreferences.SYSTEM -> {\r\n_darkThemePreference.value ="}], "metadata": {"task_id": "Feeder/46", "ground_truth": "        _darkThemePreference.value = value\r\n        sp.edit().putString(PREF_DARK_THEME, value.name.lowercase()).apply()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "\nval _currentSorting\nval currentSorting\nval _currentFeedAndTag\n fun setCurrentSorting(value: SortingOptions) {\r", "choices": [{"text": "_currentSorting = value\r\ncurrentSorting = value\r\n}\r\nval _currentFeedAndTag\r\nfun setCurrentFeedAndTag(value: FeedAndTag) {\r\n_currentFeedAndTag = value\r\ncurrentFeedAndTag = value\r\n}\r\nval _currentFeedAndTag\r\nfun setCurrentFeedAndTag(value: FeedAndTag) {\r\n_currentFeedAndTag = value\r\ncurrentFeedAndTag = value\r\n}\r\nval _currentFeedAndTag\r\nfun setCurrentFeedAndTag(value: FeedAndTag) {\r\n_current"}], "metadata": {"task_id": "Feeder/47", "ground_truth": "        _currentSorting.value = value\r\n        sp.edit().putString(PREF_SORT, value.name.lowercase()).apply()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "\nval _showFab\nval showFab\nval _feedListFilter\n fun setShowFab(value: Boolean) {\r", "choices": [{"text": "_showFab = value\r\n}\r\nfun getShowFab(): Boolean {\r\nreturn _showFab\r\n}\r\nfun setShowFab(value: Boolean) {\r\n_showFab = value\r\n}\r\nfun getShowFab(): Boolean {\r\nreturn _showFab\r\n}\r\nval _feedListFilter\r\nval feedListFilter\r\nval _feedListFilter\r\n fun setFeedListFilter(value: String) {\r\n_feedListFilter = value\r\n}\r\nfun getFeedListFilter(): String {\r\nreturn _feedListFilter\r"}], "metadata": {"task_id": "Feeder/48", "ground_truth": "        _showFab.value = value\r\n        sp.edit().putBoolean(PREF_SHOW_FAB, value).apply()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": " import com.nononsenseapps.feeder.R\nval _syncOnResume\nval syncOnResume\nval _isMarkAsReadOnScroll\nfun setSyncOnResume(value: Boolean) {\r", "choices": [{"text": "_syncOnResume = value\r\n}\r\nval _isMarkAsReadOnScroll\r\nfun setMarkAsReadOnScroll(value: Boolean) {\r\n_isMarkAsReadOnScroll = value\r\n}\r\nval _isMarkAsReadOnScroll\r\nfun setMarkAsReadOnScroll(value: Boolean) {\r\n_isMarkAsReadOnScroll = value\r\n}\r\nval _isMarkAsReadOnScroll\r\nfun setMarkAsReadOnScroll(value: Boolean) {\r\n_isMarkAsReadOnScroll = value\r\n}\r"}], "metadata": {"task_id": "Feeder/49", "ground_truth": "        _syncOnResume.value = value\r\n        sp.edit().putBoolean(PREF_SYNC_ON_RESUME, value).apply()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "\nval _syncOnlyOnWifi\nval syncOnlyOnWifi\nval _loadImageOnlyOnWifi\n fun setSyncOnlyOnWifi(value: Boolean) {\r\n        _syncOnlyOnWifi.value = value\r", "choices": [{"text": "}\n fun getSyncOnlyOnWifi(): Boolean {\r\n        return _syncOnlyOnWifi.value?: false\r\n}\n val _loadImageOnlyOnWifi\nval loadImageOnlyOnWifi\nval _loadImageOnlyOnWifi\n fun setLoadImageOnlyOnWifi(value: Boolean) {\r\n        _loadImageOnlyOnWifi.value = value\r\n}\n fun getLoadImageOnlyOnWifi(): Boolean {\r\n        return _loadImageOnlyOnWifi.value?: false\r\n}\n val _loadImageOnlyOnWifi\nval loadImageOnlyOnWifi\nval _loadImageOnlyOnWifi\n fun"}], "metadata": {"task_id": "Feeder/50", "ground_truth": "        sp.edit().putBoolean(PREF_SYNC_ONLY_WIFI, value).apply()\r\n        configurePeriodicSync(replace = true)\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "\nval _syncOnlyWhenCharging\nval syncOnlyWhenCharging\nval _syncOnlyOnWifi\n fun setSyncOnlyWhenCharging(value: Boolean) {\r\n        _syncOnlyWhenCharging.value = value\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Feeder/51", "ground_truth": "        sp.edit().putBoolean(PREF_SYNC_ONLY_CHARGING, value).apply()\r\n        configurePeriodicSync(replace = true)\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "\nval _loadImageOnlyOnWifi\nval loadImageOnlyOnWifi\nval _syncOnlyOnWifi\n fun setLoadImageOnlyOnWifi(value: Boolean) {\r", "choices": [{"text": "_loadImageOnlyOnWifi = value\r\n}\r\nfun getLoadImageOnlyOnWifi(): Boolean {\r\nreturn _loadImageOnlyOnWifi\r\n}\r\nval _syncOnlyOnWifi\r\nval syncOnlyOnWifi\r\nval _loadImageOnlyOnWifi\r\nfun setLoadImageOnlyOnWifi(value: Boolean) {\r\n_loadImageOnlyOnWifi = value\r\n}\r\nfun getLoadImageOnlyOnWifi(): Boolean {\r\nreturn _loadImageOnlyOnWifi\r\n}\r\nval _syncOnlyOnWifi\r\nval syncOnlyOnWifi\r"}], "metadata": {"task_id": "Feeder/52", "ground_truth": "        _loadImageOnlyOnWifi.value = value\r\n        sp.edit().putBoolean(PREF_IMG_ONLY_WIFI, value).apply()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "\nval _showThumbnails\nval showThumbnails\nval _feedListFilter\n fun setShowThumbnails(value: Boolean) {\r", "choices": [{"text": "_showThumbnails = value\r\n}\r\nfun getShowThumbnails(): Boolean {\r\nreturn _showThumbnails\r\n}\r\nfun setShowThumbnails(value: Boolean) {\r\n_showThumbnails = value\r\n}\r\nfun getShowThumbnails(): Boolean {\r\nreturn _showThumbnails\r\n}\r\nval _feedListFilter\r\nval feedListFilter\r\nval _feedListFilter\r\nfun setFeedListFilter(value: String) {\r\n_feedListFilter = value\r\n}\r\nfun getFeedListFilter(): String {\r"}], "metadata": {"task_id": "Feeder/53", "ground_truth": "        _showThumbnails.value = value\r\n        sp.edit().putBoolean(PREF_IMG_SHOW_THUMBNAILS, value).apply()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "\nval _textScale\nval textScale\nval _feedListFilter\n fun setTextScale(value: Float) {\r", "choices": [{"text": "_textScale = value\r\ntextScale = value\r\n}\r\nval _feedListFilter\r\nval feedListFilter\r\nval _feedListFilter\r\n fun setFeedListFilter(value: String) {\r\n_feedListFilter = value\r\nfeedListFilter = value\r\n}\r\nval _feedListFilter\r\nval feedListFilter\r\nval _feedListFilter\r\n fun setFeedListFilter(value: String) {\r\n_feedListFilter = value\r\nfeedListFilter = value\r\n}\r\nval _feedListFilter\r\nval feed"}], "metadata": {"task_id": "Feeder/56", "ground_truth": "        _textScale.value = value\r\n        sp.edit().putFloat(PREF_TEXT_SCALE, value).apply()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "\nval _maximumCountPerFeed\nval maximumCountPerFeed\nval _currentFeedAndTag\n fun setMaxCountPerFeed(value: Int) {\r", "choices": [{"text": "_maximumCountPerFeed = value\r\n}\r\nfun getMaxCountPerFeed(): Int {\r\nreturn _maximumCountPerFeed\r\n}\r\nfun setCurrentFeedAndTag(value: String) {\r\n_currentFeedAndTag = value\r\n}\r\nfun getCurrentFeedAndTag(): String {\r\nreturn _currentFeedAndTag\r\n}\r\n}<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport"}], "metadata": {"task_id": "Feeder/57", "ground_truth": "        _maximumCountPerFeed.value = value\r\n        sp.edit().putString(PREF_MAX_ITEM_COUNT_PER_FEED, \"$value\").apply()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "\nval _openAdjacent\nval openAdjacent\nval _isArticleOpen\n fun setOpenAdjacent(value: Boolean) {\r", "choices": [{"text": "_openAdjacent = value\r\n}\r\nvar openAdjacent: Boolean\r\nget() = _openAdjacent\r\nset(value) {\r\n_openAdjacent = value\r\n}\r\nval _isArticleOpen\r\nval isArticleOpen\r\nval _isArticleOpen\r\n fun setIsArticleOpen(value: Boolean) {\r\n_isArticleOpen = value\r\n}\r\nvar isArticleOpen: Boolean\r\nget() = _isArticleOpen\r\nset(value) {\r\n_isArticleOpen = value\r\n}\r\nval _isArticleOpen\r"}], "metadata": {"task_id": "Feeder/60", "ground_truth": "        _openAdjacent.value = value\r\n        sp.edit().putBoolean(PREF_OPEN_ADJACENT, value).apply()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": " import com.nononsenseapps.feeder.R\nval _showReadingTime\nval showReadingTime\nval _minReadTime MutableStateFlow<Instant>\nfun setShowReadingTime(value: Boolean) {\r", "choices": [{"text": "_showReadingTime.value = value\r\n}\n"}], "metadata": {"task_id": "Feeder/61", "ground_truth": "        _showReadingTime.value = value\r\n        sp.edit().putBoolean(PREF_LIST_SHOW_READING_TIME, value).apply()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "\nval _feedItemStyle\nval feedItemStyle\nval _currentFeedAndTag\n fun setFeedItemStyle(value: FeedItemStyle) {\r\n        _feedItemStyle.value = value\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Feeder/62", "ground_truth": "        sp.edit().putString(\r\n            PREF_FEED_ITEM_STYLE,\r\n            value.name,\r\n        ).apply()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": " import com.nononsenseapps.feeder.R\nval _swipeAsRead\nval swipeAsRead\nval _isMarkAsReadOnScroll\nfun setSwipeAsRead(value: SwipeAsRead) {\r\n        _swipeAsRead.value = value\r", "choices": [{"text": "}\nfun setSwipeAsRead(value: Boolean) {\r\n        _swipeAsRead.value = SwipeAsRead.valueOf(value)\r\n}\nfun isMarkAsReadOnScroll(): Boolean {\r\n        return _isMarkAsReadOnScroll.value?: false\r\n}\nfun setMarkAsReadOnScroll(value: Boolean) {\r\n        _isMarkAsReadOnScroll.value = value\r\n}\nfun isSwipeAsRead(): SwipeAsRead {\r\n        return _swipeAsRead.value?: SwipeAsRead.OFF\r\n}\nfun isSwipeAsRead(value"}], "metadata": {"task_id": "Feeder/63", "ground_truth": "        sp.edit().putString(\r\n            PREF_SWIPE_AS_READ,\r\n            value.name,\r\n        ).apply()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "\nval _syncFrequency\nval syncFrequency\nval _feedListFilter\n fun setSyncFrequency(value: SyncFrequency) {\r\n        _syncFrequency.value = value\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Feeder/65", "ground_truth": "        sp.edit().putString(PREF_SYNC_FREQ, \"${value.minutes}\").apply()\r\n        configurePeriodicSync(replace = true)\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.R\nfun String.dropEnds(\r\n    starting: Int,\r\n    ending: Int,\r\n): String {\r\n    require(starting >= 0) { \"Requested character count $starting is less than zero.\" }\r\n    require(ending >= 0) { \"Requested character count $ending is less than zero.\" }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/67", "ground_truth": "    return substring(\r\n        starting.coerceAtMost(length),\r\n        (length - ending).coerceAtLeast(0),\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "\nval _linkOpener\nval linkOpener\nval _itemOpener\n fun linkOpenerFromString(value: String): LinkOpener =\r\n    when (value) {\r", "choices": [{"text": "\"item\" -> _itemOpener\r\n\"link\" -> _linkOpener\r\nelse -> throw IllegalArgumentException(\"Unknown LinkOpener: $value\")\r\n    }\n<file_sep>/src/main/kotlin/com/github/jonathanxd/kores/base/comment/Comment.kt\n/*\n *      Kores - Java source and Bytecode generation framework <https://github.com/JonathanxD/Kores>\n *\n *         The MIT License (MIT)\n *\n *      Copyright (c) 2021 TheRealBuggy/JonathanxD (https://"}], "metadata": {"task_id": "Feeder/68", "ground_truth": "        PREF_VAL_OPEN_WITH_BROWSER -> LinkOpener.DEFAULT_BROWSER\r\n        else -> LinkOpener.CUSTOM_TAB\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": " import com.nononsenseapps.feeder.R\nval _linkOpener\nval linkOpener\nval _itemOpener\nfun itemOpenerFromString(value: String) =\r\n    when (value) {\r\n        PREF_VAL_OPEN_WITH_BROWSER -> ItemOpener.DEFAULT_BROWSER\r\n        PREF_VAL_OPEN_WITH_WEBVIEW,\r", "choices": [{"text": "//        PREF_VAL_OPEN_WITH_BROWSER_AND_WEBVIEW -> ItemOpener.BROWSER_AND_WEBVIEW\r\n        PREF_VAL_OPEN_WITH_WEBVIEW -> ItemOpener.WEBVIEW\r\n        else -> ItemOpener.DEFAULT_BROWSER\r\n    }\r\nfun itemOpenerToString(value: ItemOpener) =\r\n    when (value) {\r\n        ItemOpener.DEFAULT_BROWSER -> PREF_VAL_OPEN_WITH_BROWSER\r\n        ItemOpener.WEBVIEW -> PREF_VAL_OPEN_WITH_WEBVIEW\r\n//        ItemOpener.BROWSER"}], "metadata": {"task_id": "Feeder/69", "ground_truth": "        PREF_VAL_OPEN_WITH_CUSTOM_TAB,\r\n        -> ItemOpener.CUSTOM_TAB\r\n\r\n        else -> ItemOpener.READER\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "\nval _feedListFilter\nval feedListFilter StateFlow<FeedListFilter>\nval _currentFeedAndTag\n fun sortingOptionsFromString(value: String): SortingOptions =\r\n    try {\r\n        SortingOptions.valueOf(value.uppercase())\r", "choices": [{"text": "} catch (e: IllegalArgumentException) {\r\n        SortingOptions.DEFAULT\r\n}\n"}], "metadata": {"task_id": "Feeder/70", "ground_truth": "    } catch (_: Exception) {\r\n        SortingOptions.NEWEST_FIRST\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "\nval _feedListFilter\nval feedListFilter StateFlow<FeedListFilter>\nval _feedItemStyle\n fun themeOptionsFromString(value: String) =\r\n    try {\r\n        ThemeOptions.valueOf(value.uppercase())\r", "choices": [{"text": "} catch (e: IllegalArgumentException) {\r\n        ThemeOptions.LIGHT\r\n}\n"}], "metadata": {"task_id": "Feeder/71", "ground_truth": "    } catch (_: Exception) {\r\n        ThemeOptions.SYSTEM\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "\nval _darkThemePreference\nval darkThemePreference\nval blockListPreference Flow<List<String>>\n fun darkThemePreferenceFromString(value: String): DarkThemePreferences =\r\n    try {\r\n        DarkThemePreferences.valueOf(value.uppercase())\r", "choices": [{"text": "} catch (e: IllegalArgumentException) {\r\n        DarkThemePreferences.SYSTEM\r\n}\n"}], "metadata": {"task_id": "Feeder/72", "ground_truth": "    } catch (_: Exception) {\r\n        DarkThemePreferences.BLACK\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": " import com.nononsenseapps.feeder.R\nval _swipeAsRead\nval swipeAsRead\nval _isMarkAsReadOnScroll\nfun swipeAsReadFromString(value: String): SwipeAsRead =\r\n    try {\r\n        SwipeAsRead.valueOf(value.uppercase())\r", "choices": [{"text": "} catch (e: IllegalArgumentException) {\r\n        SwipeAsRead.DEFAULT\r\n}\r\nval _swipeAsReadIcon\r\nval swipeAsReadIcon\r\nval _swipeAsReadIconColor\r\nval swipeAsReadIconColor\r\nval _swipeAsReadIconSize\r\nval swipeAsReadIconSize\r\nval _swipeAsReadIconPadding\r\nval swipeAsReadIconPadding\r\nval _swipeAsReadIconMargin\r\nval swipeAsReadIconMargin\r\nval _swipeAsReadIconTint\r\nval swipeAsReadIconTint\r\nval _swipeAsReadIconTint"}], "metadata": {"task_id": "Feeder/73", "ground_truth": "    } catch (_: Exception) {\r\n        SwipeAsRead.ONLY_FROM_END\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "\nval _feedItemStyle\nval feedItemStyle\nval _feedListFilter\n fun feedItemStyleFromString(value: String) =\r\n    try {\r\n        FeedItemStyle.valueOf(value.uppercase())\r", "choices": [{"text": "} catch (e: IllegalArgumentException) {\r\n        FeedItemStyle.DEFAULT\r\n}\n"}], "metadata": {"task_id": "Feeder/74", "ground_truth": "    } catch (_: Exception) {\r\n        FeedItemStyle.CARD\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": "\nval _syncFrequency\nval syncFrequency\nval _addedFeederNews\n fun syncFrequencyFromString(value: String) =\r\n    SyncFrequency.values()\r\n        .firstOrNull {\r", "choices": [{"text": "\nval _syncFrequency\nval syncFrequency\nval _addedFeederNews\n fun syncFrequencyFromString(value: String) =\r\n    SyncFrequency.values()\r\n       .firstOrNull {\r\nit.name == value\r\n}?: throw IllegalArgumentException(\"Unknown SyncFrequency: $value\")\n"}], "metadata": {"task_id": "Feeder/75", "ground_truth": "            it.minutes == value.toLongOrNull()\r\n        }\r\n        ?: SyncFrequency.MANUAL", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SettingsStore.kt"}}
{"prompt": " import com.nononsenseapps.feeder.db.room.SyncRemote\nval remoteFeedDao RemoteFeedDao\nval remoteReadMarkDao RemoteReadMarkDao\nval syncDeviceDao SyncDeviceDao\nsuspend fun getSyncRemote(): SyncRemote {\r\n        dao.getSyncRemote()?.let {\r", "choices": [{"text": "//            return it\r\n        }\r\n        return SyncRemote(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"}], "metadata": {"task_id": "Feeder/76", "ground_truth": "            return it\r\n        }\r\n\r\n        return createDefaultSyncRemote()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SyncRemoteStore.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.db.room.ReadStatusSynced\nsuspend fun setSynced(feedItemId: Long) {\r\n        // Ignores duplicates\r\n        readStatusDao.insert(\r\n            ReadStatusSynced(\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/77", "ground_truth": "                feed_item = feedItemId,\r\n                sync_remote = 1L,\r\n            ),\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SyncRemoteStore.kt"}}
{"prompt": "\nval remoteFeedDao RemoteFeedDao\nval dao SyncRemoteDao\nval remoteReadMarkDao RemoteReadMarkDao\n suspend fun setNotSynced(feedItemId: Long) {\r", "choices": [{"text": "//    remoteFeedDao.setNotSynced(feedItemId)\r\n//    dao.setNotSynced(feedItemId)\r\n//    remoteReadMarkDao.setNotSynced(feedItemId)\r\n}\r\n\r\nsuspend fun setSynced(feedItemId: Long) {\r\n//    remoteFeedDao.setSynced(feedItemId)\r\n//    dao.setSynced(feedItemId)\r\n//    remoteReadMarkDao.setSynced(feedItemId)\r\n}\r\n\r\nsuspend fun setRead(feedItemId: Long) {\r\n//    remote"}], "metadata": {"task_id": "Feeder/78", "ground_truth": "        // Ignores duplicates\r\n        readStatusDao.deleteReadStatusSyncForItem(feedItemId)\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SyncRemoteStore.kt"}}
{"prompt": "\n import java.net.URL\nimport com.nononsenseapps.feeder.db.room.RemoteReadMark\nsuspend fun addRemoteReadMark(\r\n        feedUrl: URL,\r\n        articleGuid: String,\r\n    ) {\r\n        // Ignores duplicates\r\n        remoteReadMarkDao.insert(\r\n            RemoteReadMark(\r\n                sync_remote = 1L,\r\n                feedUrl = feedUrl,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/79", "ground_truth": "                guid = articleGuid,\r\n                timestamp = Instant.now(),\r\n            ),\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SyncRemoteStore.kt"}}
{"prompt": " import java.time.Instant\nimport com.nononsenseapps.feeder.db.room.RemoteReadMark\nval remoteReadMarkDao RemoteReadMarkDao\nval remoteFeedDao RemoteFeedDao\nval syncDeviceDao SyncDeviceDao\nsuspend fun deleteStaleRemoteReadMarks(now: Instant) {\r", "choices": [{"text": "   remoteReadMarkDao.deleteStale(now)\r}\nsuspend fun deleteStaleRemoteFeeds(now: Instant) {\r    remoteFeedDao.deleteStale(now)\r}\nsuspend fun deleteStaleSyncDevices(now: Instant) {\r    syncDeviceDao.deleteStale(now)\r}\nsuspend fun deleteStaleRemoteReadMarks(now: Instant) {\r    remoteReadMarkDao.deleteStale(now)\r}\nsuspend fun deleteStaleRemoteFeeds(now: Instant) {\r    remoteFeedDao.deleteStale(now)"}], "metadata": {"task_id": "Feeder/80", "ground_truth": "        // 7 days ago\r\n        remoteReadMarkDao.deleteStaleRemoteReadMarks(now.minus(7, ChronoUnit.DAYS))\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\archmodel\\SyncRemoteStore.kt"}}
{"prompt": "\n import org.kodein.di.factory\nimport org.kodein.di.compose.LocalDI\nimport org.kodein.di.DIAware\nimport org.kodein.di.DI\nimport androidx.savedstate.SavedStateRegistryOwner\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.lifecycle.ViewModel\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\ninline fun <reified T : DIAwareViewModel> SavedStateRegistryOwner.diAwareViewModel(key: String? = null): T {\r\n    val factory = DIAwareSavedStateViewModelFactory(LocalDI.current, this)\r\n\r\n    return viewModel(\r", "choices": [{"text": "//        factoryProducer = { factory },\r\n        key = key,\r\n        factory = factory\r\n    )\r\n}\r\n\r\n@Composable\r\ninline fun <reified T : ViewModel> SavedStateRegistryOwner.diAwareViewModel(key: String? = null): T {\r\n    val factory = DIAwareViewModelFactory(LocalDI.current, this)\r\n\r\n    return viewModel(\r\n//        factoryProducer = { factory },\r\n        key = key,\r\n        factory = factory\r\n    )\r\n}\r\n\r\n@Composable\r\ninline fun <reified T : ViewModel> SavedStateRegistryOwner.diAwareViewModel(\r\n    noinline"}], "metadata": {"task_id": "Feeder/84", "ground_truth": "        modelClass = T::class.java,\r\n        key = key,\r\n        factory = factory,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\base\\DIAwareViewModel.kt"}}
{"prompt": "\n import org.kodein.di.factory\nimport org.kodein.di.compose.LocalDI\nimport org.kodein.di.DIAware\nimport org.kodein.di.DI\nimport androidx.navigation.NavBackStackEntry\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.lifecycle.ViewModel\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\ninline fun <reified T : DIAwareViewModel> NavBackStackEntry.diAwareViewModel(key: String? = null): T {\r\n    val factory = DIAwareSavedStateViewModelFactory(LocalDI.current, this, arguments)\r\n\r\n    return viewModel(\r", "choices": [{"text": "//        factoryProducer = { factory },\r\n        key = key,\r\n        factory = factory\r\n    )\r\n}\n"}], "metadata": {"task_id": "Feeder/85", "ground_truth": "        modelClass = T::class.java,\r\n        key = key,\r\n        factory = factory,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\base\\DIAwareViewModel.kt"}}
{"prompt": "\nval CIPHER\nval AES_KEY_LENGTH_BITS\nval CIPHER_TRANSFORMATION\n fun isKeyDecodable(keysStr: String): Boolean {\r\n        return try {\r\n            decodeKey(keysStr)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/88", "ground_truth": "            true\r\n        } catch (e: Exception) {\r\n            false\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\crypto\\AesCbcWithIntegrity.kt"}}
{"prompt": "\n import java.security.SecureRandom\nimport java.security.GeneralSecurityException\nimport java.lang.Exception\n @Throws(GeneralSecurityException::class)\r\n    private fun randomBytes(length: Int): ByteArray {\r\n        val random = SecureRandom()\r\n        val b = ByteArray(length)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/89", "ground_truth": "        random.nextBytes(b)\r\n        return b\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\crypto\\AesCbcWithIntegrity.kt"}}
{"prompt": "\n import javax.crypto.SecretKey\nimport java.security.GeneralSecurityException\nimport java.nio.charset.Charset\nimport java.lang.Exception\nimport java.io.UnsupportedEncodingException\n @Throws(UnsupportedEncodingException::class, GeneralSecurityException::class)\r\n    fun encryptString(\r\n        plaintext: String,\r\n        secretKeys: SecretKeys,\r\n        encoding: Charset = Charsets.UTF_8,\r\n    ): String =\r\n        encrypt(\r\n            plaintext = plaintext,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/90", "ground_truth": "            secretKeys = secretKeys,\r\n            encoding = encoding,\r\n        ).toString()", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\crypto\\AesCbcWithIntegrity.kt"}}
{"prompt": "\n import javax.crypto.SecretKey\nimport javax.crypto.Mac\nimport javax.crypto.Cipher\nimport java.security.NoSuchAlgorithmException\nimport java.security.InvalidKeyException\nimport java.lang.Exception\n @Throws(NoSuchAlgorithmException::class, InvalidKeyException::class)\r\n    fun generateMac(\r\n        byteCipherText: ByteArray,\r\n        integrityKey: SecretKey,\r\n    ): ByteArray {\r\n        // Now compute the mac for later integrity checking\r\n        val sha256HMAC = Mac.getInstance(HMAC_ALGORITHM)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/91", "ground_truth": "        sha256HMAC.init(integrityKey)\r\n        return sha256HMAC.doFinal(byteCipherText)\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\crypto\\AesCbcWithIntegrity.kt"}}
{"prompt": "\n import javax.crypto.Cipher\nfun ivCipherConcat(\r\n            iv: ByteArray,\r\n            cipherText: ByteArray,\r\n        ): ByteArray {\r\n            val combined = ByteArray(iv.size + cipherText.size)\r\n            System.arraycopy(iv, 0, combined, 0, iv.size)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/99", "ground_truth": "            System.arraycopy(cipherText, 0, combined, iv.size, cipherText.size)\r\n            return combined\r\n        }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\crypto\\AesCbcWithIntegrity.kt"}}
{"prompt": "\n import org.kodein.di.instance\nimport androidx.room.Database\nimport android.content.Context\nfun getInstance(context: Context): AppDatabase {\r\n            return instance ?: synchronized(this) {\r", "choices": [{"text": "\n import org.kodein.di.instance\nimport androidx.room.Database\nimport android.content.Context\nfun getInstance(context: Context): AppDatabase {\r\n            return instance?: synchronized(this) {\r\ninstance?: AppDatabase.getInstance(context)\r\n            }\r\n        }\n"}], "metadata": {"task_id": "Feeder/100", "ground_truth": "                instance ?: buildDatabase(context).also { instance = it }\r\n            }\r\n        }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\AppDatabase.kt"}}
{"prompt": "\n import org.kodein.di.android.closestDI\nimport org.kodein.di.DI\nimport androidx.room.Room\nimport androidx.room.Database\nimport android.content.Context\nprivate fun buildDatabase(context: Context): AppDatabase {\r\n            val di: DI by closestDI(context)\r\n            return Room.databaseBuilder(context, AppDatabase::class.java, DATABASE_NAME)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Feeder/101", "ground_truth": "                .addMigrations(*getAllMigrations(di))\r\n                .build()\r\n        }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\AppDatabase.kt"}}
{"prompt": "\n import androidx.sqlite.db.SupportSQLiteDatabase\nimport androidx.room.Database\nimport android.database.sqlite.SQLiteDatabase\noverride fun migrate(database: SupportSQLiteDatabase) {\r\n        database.execSQL(\r\n            \"\"\"\r\n            ALTER TABLE feed_items ADD COLUMN read_time INTEGER DEFAULT null\r\n            \"\"\".trimIndent(),\r\n        )\r\n\r\n        database.execSQL(\r\n            \"\"\"\r\n            update feed_items\r", "choices": [{"text": "set read_time = 0\r\nwhere read_time is null\r\n            \"\"\".trimIndent(),\r\n        )\r\n    }\n"}], "metadata": {"task_id": "Feeder/108", "ground_truth": "                set read_time = 1690317917000\r\n            where unread = 0;\r\n            \"\"\".trimIndent(),\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\AppDatabase.kt"}}
{"prompt": "\n import androidx.sqlite.db.SupportSQLiteDatabase\nimport androidx.room.Database\nimport android.database.sqlite.SQLiteDatabase\noverride fun migrate(database: SupportSQLiteDatabase) {\r\n        database.execSQL(\r\n            \"\"\"\r\n            CREATE UNIQUE INDEX idx_feed_items_cursor\r\n            ON feed_items (primary_sort_time, pub_date, id)\r\n            \"\"\".trimIndent(),\r\n        )\r\n\r\n        database.execSQL(\r\n            \"\"\"\r\n            update feed_items\r", "choices": [{"text": "set primary_sort_time = pub_date\r\nwhere primary_sort_time is null\r\n            \"\"\".trimIndent(),\r\n        )\r\n\r\n        database.execSQL(\r\n            \"\"\"\r\n            update feed_items\r\nset primary_sort_time = pub_date\r\nwhere primary_sort_time is null\r\n            \"\"\".trimIndent(),\r\n        )\r\n\r\n        database.execSQL(\r\n            \"\"\"\r\n            update feed_items\r\nset primary_sort_time = pub_date\r\nwhere primary_sort_time is null\r\n            \"\"\".trimIndent(),\r\n        )\r\n\r\n        database.execSQL(\r\n            \"\"\"\r\n            update feed_items"}], "metadata": {"task_id": "Feeder/109", "ground_truth": "                set bookmarked = 1\r\n            where pinned = 1;\r\n            \"\"\".trimIndent(),\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\AppDatabase.kt"}}
{"prompt": " import androidx.sqlite.db.SupportSQLiteDatabase\nimport androidx.room.Database\nimport android.database.sqlite.SQLiteDatabase\nvar instance AppDatabase?\nval filePathProvider FilePathProvider\nval sharedPrefs SharedPreferences\nfun SupportSQLiteDatabase.inTransaction(init: (SupportSQLiteDatabase) -> Unit) {\r\n    beginTransaction()\r\n    try {\r\n        init(this)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/121", "ground_truth": "        setTransactionSuccessful()\r\n    } finally {\r\n        endTransaction()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\AppDatabase.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport androidx.room.TypeConverter\n @TypeConverter\r\n    fun dateTimeFromString(value: String?): ZonedDateTime? {\r\n        var dt: ZonedDateTime? = null\r\n        if (value != null) {\r\n            try {\r\n                dt = ZonedDateTime.parse(value)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/122", "ground_truth": "            } catch (_: Throwable) {\r\n            }\r\n        }\r\n        return dt\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\Converters.kt"}}
{"prompt": "\n import java.time.Instant\nimport androidx.room.TypeConverter\n @TypeConverter\r\n    fun instantFromLong(value: Long?): Instant? =\r\n        try {\r\n            value?.let { Instant.ofEpochMilli(it) }\r", "choices": [{"text": "} catch (e: Exception) {\r\n            null\r\n        }\r\n\r\n    @TypeConverter\r\n    fun longFromInstant(date: Instant?): Long? =\r\n        date?.toEpochMilli()\r\n}\n"}], "metadata": {"task_id": "Feeder/123", "ground_truth": "        } catch (t: Throwable) {\r\n            null\r\n        }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\Converters.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.model.ThumbnailImage\nimport androidx.room.TypeConverter\n @TypeConverter\r\n    fun stringFromThumbnailImage(value: ThumbnailImage?): String? =\r", "choices": [{"text": "value?.let {\r\nGson().toJson(it)\r\n}\r\n    @TypeConverter\r\n    fun thumbnailImageFromString(value: String?): ThumbnailImage? =\r\nvalue?.let {\r\nGson().fromJson(it, ThumbnailImage::class.java)\r\n}\r\n    @TypeConverter\r\n    fun stringFromThumbnailImage(value: ThumbnailImage?): String? =\r\nvalue?.let {\r\nGson().toJson(it)\r\n}\r\n    @TypeConverter\r\n    fun thumbnailImageFromString(value: String?): ThumbnailImage? =\r\nvalue?.let {\r\nGson().fromJson("}], "metadata": {"task_id": "Feeder/124", "ground_truth": "        value?.let {\r\n            Json.encodeToString(it)\r\n        }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\Converters.kt"}}
{"prompt": "\n fun estimateWordCount(plainText: String): Int {\r\n    val charCount = plainText.length.toFloat()\r\n    val wordCount = plainText.splitToSequence(patternWhitespace).count()\r\n\r\n    // Calculate average length of chars between spaces\r\n    // A typical value for english is 5-7\r\n    // A typical value for japanese is 50-80\r\n    return if (charCount / wordCount < 15.0) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/125", "ground_truth": "        wordCount\r\n    } else {\r\n        0\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\FeedItem.kt"}}
{"prompt": "\n import androidx.room.Transaction\n @Transaction\r\n    suspend fun replaceRemoteFeedsWith(remoteFeeds: List<RemoteFeed>) {\r\n        deleteAllRemoteFeeds()\r\n        for (remoteFeed in remoteFeeds) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/126", "ground_truth": "            insert(remoteFeed)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\RemoteFeedDao.kt"}}
{"prompt": "\n import androidx.room.Transaction\n @Transaction\r\n    suspend fun replaceDevices(devices: List<SyncDevice>) {\r\n        deleteAll()\r\n        devices.forEach {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/127", "ground_truth": "            insert(it)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\SyncDeviceDao.kt"}}
{"prompt": "\n import java.util.Locale\nimport android.os.Build\nfun generateDeviceName(): String {\r\n    val manufacturer = Build.MANUFACTURER ?: \"\"\r\n    val model = Build.MODEL ?: \"\"\r\n\r\n    return if (model.startsWith(manufacturer, ignoreCase = true)) {\r\n        model\r\n    } else {\r\n        \"$manufacturer $model\"\r\n    }.replaceFirstChar {\r\n        if (it.isLowerCase()) {\r\n            it.titlecase(\r\n                Locale.getDefault(),\r\n            )\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/128", "ground_truth": "        } else {\r\n            it.toString()\r\n        }\r\n    }.ifBlank { \"${Random.nextInt(100_000)}\" }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\db\\room\\SyncRemote.kt"}}
{"prompt": "\nval di\nval applicationCoroutineScope\nval LOG_TAG\n override fun onCreate() {\r\n        super.onCreate()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/130", "ground_truth": "        @Suppress(\"DEPRECATION\")\r\n        staticFilesDir = filesDir\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\FeederApplication.kt"}}
{"prompt": " import kotlinx.coroutines.cancel\nimport android.app.Application\nval di\nval LOG_TAG\nval applicationCoroutineScope\noverride fun onTerminate() {\r\n        applicationCoroutineScope.cancel(\"Application is being terminated\")\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Feeder/131", "ground_truth": "        ttsStateHolder.shutdown()\r\n        super.onTerminate()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\FeederApplication.kt"}}
{"prompt": "\n import java.net.URL\nimport com.nononsenseapps.feeder.util.flatMap\nimport com.nononsenseapps.feeder.util.Either\nsuspend fun getSiteMetaData(url: URL): Either<FeedParserError, SiteMetaData> {\r\n        return curl(url)\r\n            .flatMap { html ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/132", "ground_truth": "                getSiteMetaDataInHtml(url, html)\r\n            }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\FeedParser.kt"}}
{"prompt": " import com.nononsenseapps.feeder.model.gofeed.GoPerson\nval LOG_TAG\nval client OkHttpClient\nval description String\nprivate fun GoPerson.asParsedAuthor() =\r\n    ParsedAuthor(\r\n        name = name,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/138", "ground_truth": "        url = null,\r\n        avatar = null\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\FeedParser.kt"}}
{"prompt": " import java.io.IOException\nval moshi\nval goFeedAdapter\n @Throws(IOException::class)\r\n    fun parseBody(body: String): GoFeed? {\r\n        return gofeedandroid.Gofeedandroid.parseBodyString(body)?.let {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/141", "ground_truth": "            return fromJson(it)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\gofeed\\GoFeedAdapter.kt"}}
{"prompt": " import java.io.IOException\nval moshi\nval goFeedAdapter\n @Throws(IOException::class)\r\n    fun parseBody(body: ByteArray): GoFeed? {\r\n        return gofeedandroid.Gofeedandroid.parseBodyBytes(body)?.let {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/142", "ground_truth": "            return fromJson(it)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\gofeed\\GoFeedAdapter.kt"}}
{"prompt": "\n suspend fun SequenceScope<String>.recursiveExtensionMediaDescription(extension: GoExtension) {\r\n    if (extension.name.equals(\"description\", ignoreCase = true)) {\r\n        extension.value?.let { value ->\r\n            yield(value)\r\n        }\r\n    }\r\n\r\n    extension.children?.entries?.forEach { (_, value) ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/143", "ground_truth": "        value.forEach { extension ->\r\n            recursiveExtensionMediaDescription(extension)\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\gofeed\\GoFeedExtensions.kt"}}
{"prompt": "\n import java.net.URL\nprivate fun pointsToImage(url: String): Boolean {\r\n    return try {\r\n        val u = URL(url)\r\n\r\n        u.path.endsWith(\".jpg\", ignoreCase = true) ||\r\n            u.path.endsWith(\".jpeg\", ignoreCase = true) ||\r\n            u.path.endsWith(\".gif\", ignoreCase = true) ||\r\n            u.path.endsWith(\".png\", ignoreCase = true) ||\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/144", "ground_truth": "            u.path.endsWith(\".webp\", ignoreCase = true)\r\n    } catch (_: Exception) {\r\n        false\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\gofeed\\GoFeedExtensions.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.first\noverride suspend fun saveBlocklistPatterns(patterns: Iterable<String>) {\r\n        val existingPatterns = settingsStore.blockListPreference.first()\r\n\r\n        patterns.asSequence()\r\n            .filterNot { it.isBlank() }\r\n            .filterNot { it in existingPatterns }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/147", "ground_truth": "            .distinct()\r\n            .forEach {\r\n                settingsStore.addBlocklistPattern(it)\r\n            }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\opml\\OPMLImporter.kt"}}
{"prompt": "\n import java.io.IOException\nimport org.xmlpull.v1.XmlPullParserException\nimport org.xmlpull.v1.XmlPullParser\nimport kotlinx.coroutines.Dispatchers.IO\nimport android.util.Xml\n @Throws(XmlPullParserException::class, IOException::class)\r\n    private fun readOpml() {\r\n        parser.require(XmlPullParser.START_TAG, null, TAG_OPML)\r\n        while (parser.next() != XmlPullParser.END_TAG) {\r\n            if (parser.eventType != XmlPullParser.START_TAG) {\r\n                continue\r\n            }\r\n            // Starts by looking for the entry tag.\r\n            if (parser.name == TAG_BODY) {\r\n                readBody()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/148", "ground_truth": "            } else {\r\n                skip()\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\opml\\OpmlPullParser.kt"}}
{"prompt": "\n import java.io.IOException\nimport org.xmlpull.v1.XmlPullParserException\nimport org.xmlpull.v1.XmlPullParser\nimport kotlinx.coroutines.Dispatchers.IO\nimport android.util.Xml\n @Throws(XmlPullParserException::class, IOException::class)\r\n    private fun readSetting() {\r\n        parser.require(XmlPullParser.START_TAG, OPML_FEEDER_NAMESPACE, TAG_SETTING)\r\n\r\n        val key by this\r\n        val value by this\r\n\r\n        key?.let { key ->\r\n            value?.let { value ->\r\n                settings[key] = unescape(value)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/149", "ground_truth": "            }\r\n        }\r\n\r\n        skip()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\opml\\OpmlPullParser.kt"}}
{"prompt": "\n import java.io.IOException\nimport org.xmlpull.v1.XmlPullParserException\nimport org.xmlpull.v1.XmlPullParser\nimport kotlinx.coroutines.Dispatchers.IO\nimport android.util.Xml\n @Throws(XmlPullParserException::class, IOException::class)\r\n    private fun readBlocked() {\r\n        parser.require(XmlPullParser.START_TAG, OPML_FEEDER_NAMESPACE, TAG_BLOCKED)\r\n\r\n        val pattern by this\r\n\r\n        pattern?.let { pattern ->\r\n            blockList.add(\r\n                unescape(pattern),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/150", "ground_truth": "            )\r\n        }\r\n\r\n        skip()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\opml\\OpmlPullParser.kt"}}
{"prompt": "\n import java.io.OutputStream\nimport java.io.FileOutputStream\nimport kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.nononsenseapps.feeder.db.room.Feed\nsuspend fun writeFile(\r\n    path: String,\r\n    settings: Map<String, String>,\r\n    blockedPatterns: List<String>,\r\n    tags: Iterable<String>,\r\n    feedsWithTag: suspend (String) -> Iterable<Feed>,\r\n) {\r\n    withContext(Dispatchers.IO) {\r\n        writeOutputStream(\r\n            os = FileOutputStream(path),\r\n            settings = settings,\r\n            blockedPatterns = blockedPatterns,\r", "choices": [{"text": "//            tags = tags,\r\n            feedsWithTag = feedsWithTag,\r\n        )\r\n    }\r\n}\r\n\r\nsuspend fun writeOutputStream(\r\n    os: OutputStream,\r\n    settings: Map<String, String>,\r\n    blockedPatterns: List<String>,\r\n    tags: Iterable<String>,\r\n    feedsWithTag: suspend (String) -> Iterable<Feed>,\r\n) {\r\n    val writer = OutputStreamWriter(os)\r\n    writer.write(settings.entries.joinToString(separator = \"\\n\") { \"${it.key}=${it.value}\" })\r\n    writer.write(\"\\n\")\r\n    writer.write(blocked"}], "metadata": {"task_id": "Feeder/153", "ground_truth": "            tags = tags,\r\n            feedsWithTag = feedsWithTag,\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\opml\\OpmlWriter.kt"}}
{"prompt": "\nvar value String\nvar key String\nvar type String\n suspend fun opml(init: suspend Opml.() -> Unit): Opml {\r\n    val opml = Opml()\r", "choices": [{"text": "opml.init()\r\nreturn opml\r\n}\n"}], "metadata": {"task_id": "Feeder/156", "ground_truth": "    opml.init()\r\n    return opml\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\opml\\OpmlWriter.kt"}}
{"prompt": "\nvar title String\nvar value String\nvar type String\n protected suspend fun <T : Element> initTag(\r\n        tag: T,\r\n        init: suspend T.() -> Unit,\r\n    ): T {\r\n        tag.init()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/157", "ground_truth": "        children.add(tag)\r\n        return tag\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\opml\\OpmlWriter.kt"}}
{"prompt": "\nvar pattern String\nvar text String\nvar value String\n override fun toString(): String {\r\n        val builder = StringBuilder()\r", "choices": [{"text": "builder.append(\"Pattern: \")\r\nbuilder.append(pattern)\r\nbuilder.append(\"\\n\")\r\nbuilder.append(\"Text: \")\r\nbuilder.append(text)\r\nbuilder.append(\"\\n\")\r\nbuilder.append(\"Value: \")\r\nbuilder.append(value)\r\nbuilder.append(\"\\n\")\r\nreturn builder.toString()\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Feeder/160", "ground_truth": "        render(builder, \"\")\r\n        return builder.toString()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\opml\\OpmlWriter.kt"}}
{"prompt": "\n suspend fun outline(\r\n        title: String,\r\n        text: String = title,\r\n        type: String? = null,\r\n        xmlUrl: String? = null,\r\n        init: suspend Outline.() -> Unit,\r\n    ) {\r\n        val o = initTag(Outline(), init)\r\n        o.title = title\r\n        o.text = text\r\n        if (type != null) {\r\n            o.type = type\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/161", "ground_truth": "        }\r\n        if (xmlUrl != null) {\r\n            o.xmlUrl = xmlUrl\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\opml\\OpmlWriter.kt"}}
{"prompt": " import java.net.URI\nval feedDisplayTitle String\nval domain String?\nval bestWordCount Int\nfun String?.host(): String? {\r\n    val l: String? = this\r\n    if (l != null) {\r\n        try {\r\n            return URI(l).host\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/163", "ground_truth": "        } catch (_: Throwable) {\r\n        }\r\n    }\r\n    return null\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\PreviewItem.kt"}}
{"prompt": "\n import androidx.compose.ui.text.AnnotatedString\nfun tts(\r\n        textArray: List<AnnotatedString>,\r\n        useDetectLanguage: Boolean,\r\n    ) {\r\n        this.useDetectLanguage = useDetectLanguage\r\n//        val textArray = fullText.split(*PUNCTUATION)\r\n        for (text in textArray) {\r\n            if (text.isBlank()) {\r\n                continue\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/164", "ground_truth": "            }\r\n            textToSpeechQueue.add(text)\r\n        }\r\n        play()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\ReadAloudStateHolder.kt"}}
{"prompt": " import kotlinx.coroutines.Job\nval speechListener UtteranceProgressListener\nval textToSpeechQueue\nval mutex Mutex\nfun pause() {\r\n        startJob?.cancel()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Feeder/165", "ground_truth": "        textToSpeech?.stop()\r\n        _ttsState.value = PlaybackStatus.PAUSED\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\ReadAloudStateHolder.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Job\nfun skipNext() {\r\n        coroutineScope.launch {\r\n            startJob?.cancel()\r\n            textToSpeech?.stop()\r\n            startJob?.join()\r\n            textToSpeechQueue.removeFirstOrNull()\r\n            when (textToSpeechQueue.isEmpty()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/167", "ground_truth": "                true -> stop()\r\n                false -> play()\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\ReadAloudStateHolder.kt"}}
{"prompt": " import java.util.Locale\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.Job\nvar useDetectLanguage Boolean\nvar textToSpeech TextToSpeech?\nvar initializedState Int?\nfun setLanguage(lang: LocaleOverride) {\r\n        coroutineScope.launch {\r\n            startJob?.cancel()\r\n            textToSpeech?.stop()\r", "choices": [{"text": "//            textToSpeech?.shutdown()\r\n            textToSpeech = null\r\n            initializedState = null\r\n            startJob = Job()\r\n            startJob?.let {\r\n                textToSpeech = TextToSpeech(context, TextToSpeech.OnInitListener { status ->\r\n                    if (status == TextToSpeech.SUCCESS) {\r\n                        val result = textToSpeech?.setLanguage(lang.locale)\r\n                        if (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) {\r\n                            Log.e(\"TTS\", \"This Language is not supported\")\r\n                        } else {\r\n                            Log"}], "metadata": {"task_id": "Feeder/168", "ground_truth": "            startJob?.join()\r\n            _lang.update { lang }\r\n            play()\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\ReadAloudStateHolder.kt"}}
{"prompt": "\n import java.util.Locale\nimport com.nononsenseapps.feeder.R\nimport android.os.Build\nimport android.content.Context\nfun Context.getLocales(): Sequence<Locale> =\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n        sequence {\r\n            val locales = resources.configuration.locales\r\n\r\n            for (i in 0 until locales.size()) {\r\n                yield(locales[i])\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/170", "ground_truth": "        }\r\n    } else {\r\n        @Suppress(\"DEPRECATION\")\r\n        sequenceOf(resources.configuration.locale)\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\ReadAloudStateHolder.kt"}}
{"prompt": "\n import kotlin.math.max\nimport kotlinx.coroutines.withContext\nimport kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nimport com.nononsenseapps.feeder.util.logDebug\nimport com.nononsenseapps.feeder.db.room.ID_UNSET\nimport com.nononsenseapps.feeder.db.room.FeedItem\nimport com.nononsenseapps.feeder.db.room.Feed\nsuspend fun syncFeeds(\r\n        feedId: Long = ID_UNSET,\r\n        feedTag: String = \"\",\r\n        forceNetwork: Boolean = false,\r\n        minFeedAgeMinutes: Int = 5,\r\n    ): Boolean {\r\n        logDebug(LOG_TAG, \"${Thread.currentThread().name}: Taking sync mutex\")\r\n        return syncMutex.withLock {\r\n            withContext(singleThreadedSync) {\r\n                syncFeeds(\r\n                    feedId = feedId,\r\n                    feedTag = feedTag,\r\n                    maxFeedItemCount = repository.maximumCountPerFeed.value,\r\n                    forceNetwork = forceNetwork,\r", "choices": [{"text": "//                    minFeedAgeMinutes = minFeedAgeMinutes,\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    private suspend fun syncFeeds(\r\n        feedId: Long = ID_UNSET,\r\n        feedTag: String = \"\",\r\n        maxFeedItemCount: Int = 100,\r\n        forceNetwork: Boolean = false,\r\n        minFeedAgeMinutes: Int = 5,\r\n    ): Boolean {\r\n        logDebug(LOG_TAG, \"${Thread.currentThread().name}: syncFeeds()\")\r\n        val feed = if (feedId!= ID_UNSET) {\r\n            repository.getFeedById(feedId)\r\n       "}], "metadata": {"task_id": "Feeder/171", "ground_truth": "                    minFeedAgeMinutes = minFeedAgeMinutes,\r\n                )\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\RssLocalSync.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.DelicateCoroutinesApi\nimport com.nononsenseapps.feeder.db.room.FeedItemDao\nimport android.content.Context\n\r\n@OptIn(DelicateCoroutinesApi::class)\r\nprivate fun markAsReadAndNotified(\r\n    context: Context,\r\n    feedItemDao: FeedItemDao,\r\n    itemId: Long,\r\n) {\r\n    GlobalScope.launch(Dispatchers.Default) {\r\n        feedItemDao.markAsReadAndNotified(itemId)\r", "choices": [{"text": "//        context.sendBroadcast(Intent(Intent.ACTION_CLOSE_SYSTEM_DIALOGS))\r\n    }\r\n}\r\n<file_sep>/app/src/main/java/com/nononsenseapps/feeder/ui/feed/FeedFragment.kt\npackage com.nononsenseapps.feeder.ui.feed\n\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Toast\nimport androidx.fragment."}], "metadata": {"task_id": "Feeder/172", "ground_truth": "        cancelNotification(context, itemId)\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\RssNotificationBroadcastReceiver.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.DelicateCoroutinesApi\nimport com.nononsenseapps.feeder.db.room.FeedItemDao\nimport android.content.Context\n\r\n@OptIn(DelicateCoroutinesApi::class)\r\nprivate fun markAsNotified(\r\n    context: Context,\r\n    feedItemDao: FeedItemDao,\r\n    itemIds: LongArray?,\r\n) {\r\n    if (itemIds != null) {\r\n        GlobalScope.launch(Dispatchers.Default) {\r\n            val idList = itemIds.toList()\r", "choices": [{"text": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.DelicateCoroutinesApi\nimport com.nononsenseapps.feeder.db.room.FeedItemDao\nimport android.content.Context\n\r\n@OptIn(DelicateCoroutinesApi::class)\r\nprivate fun markAsNotified(\r\n    context: Context,\r\n    feedItemDao: FeedItemDao,\r\n    itemIds: LongArray?,\r\n) {\r\n    if (itemIds!= null) {\r\n        GlobalScope.launch(Dispatchers.Default) {\r\n            val idList = itemIds.toList()\r\n//            feedItemDao.markAsNotified(idList)\r\n        }\r\n    }\r\n}\r\n<file_sep>/app/src/main/java/com/nononsenseapps/feeder/ui/feed/FeedFragment.kt\npackage com.nononsenseapps.feeder.ui.feed\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\nimport androidx.fragment.app.viewModels\nimport androidx.lifecycle.lifecycleScope\nimport androidx.navigation."}], "metadata": {"task_id": "Feeder/173", "ground_truth": "            feedItemDao.markAsNotified(idList)\r\n            cancelNotifications(context, idList)\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\RssNotificationBroadcastReceiver.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.nononsenseapps.feeder.util.notificationManager\nimport com.nononsenseapps.feeder.R\nimport androidx.core.content.ContextCompat\nimport android.content.pm.PackageManager\nimport android.content.Context\nimport android.app.Notification\nimport android.Manifest\nsuspend fun cancelNotifications(\r\n    context: Context,\r\n    feedItemIds: List<Long>,\r\n) = withContext(Dispatchers.Default) {\r\n    if (ContextCompat.checkSelfPermission(\r\n            context,\r\n            Manifest.permission.POST_NOTIFICATIONS,\r\n        ) != PackageManager.PERMISSION_GRANTED\r\n    ) {\r\n        return@withContext\r\n    }\r\n\r\n    val nm = context.notificationManager\r\n\r\n    for (feedItemId in feedItemIds) {\r\n        nm.cancel(feedItemId.toInt())\r\n    }\r", "choices": [{"text": "\n import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.nononsenseapps.feeder.util.notificationManager\nimport com.nononsenseapps.feeder.R\nimport androidx.core.content.ContextCompat\nimport android.content.pm.PackageManager\nimport android.content.Context\nimport android.app.Notification\nimport android.Manifest\nsuspend fun cancelNotifications(\r\n    context: Context,\r\n    feedItemIds: List<Long>,\r\n) = withContext(Dispatchers.Default) {\r\n    if (ContextCompat.checkSelfPermission(\r\n            context,\r\n            Manifest.permission.POST_NOTIFICATIONS,\r\n        )!= PackageManager.PERMISSION_GRANTED\r\n    ) {\r\n        return@withContext\r\n    }\r\n\r\n    val nm = context.notificationManager\r\n\r\n    for (feedItemId in feedItemIds) {\r\n        nm.cancel(feedItemId.toInt())\r\n    }\r\n}\n<file_sep>/app/src/main/java/com/nononsenseapps/feeder/util/NotificationManager.kt\npackage com.nononsenseapps.feeder.util\n\nimport android.app.Notification\nimport android.app.NotificationChannel\nimport android.app.NotificationManager\nimport android.content.Context\nimport android.os.Build\nimport androidx.core.app.NotificationCompat\nimport androidx.core.app.NotificationManagerCompat\nimport com.nononsenseapps.feeder.R\nimport com.nononsenseapps.feeder.util."}], "metadata": {"task_id": "Feeder/174", "ground_truth": "\r\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {\r\n        notify(context)\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\RssNotifications.kt"}}
{"prompt": "\n import org.kodein.di.DI\nimport com.nononsenseapps.feeder.db.URI_FEEDITEMS\nimport com.nononsenseapps.feeder.db.COL_LINK\nimport com.nononsenseapps.feeder.R\nimport android.content.Intent\nimport android.content.Context\nimport android.app.PendingIntent\ninternal fun getOpenInDefaultActivityIntent(\r\n    context: Context,\r\n    feedItemId: Long,\r\n    link: String? = null,\r\n): Intent =\r\n    Intent(\r\n        Intent.ACTION_VIEW,\r\n        // Important to keep the URI different so PendingIntents don't collide\r\n        URI_FEEDITEMS.buildUpon().appendPath(\"$feedItemId\").also {\r\n            if (link != null) {\r\n                it.appendQueryParameter(COL_LINK, link)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/176", "ground_truth": "            }\r\n        }.build(),\r\n        context,\r\n        OpenLinkInDefaultActivity::class.java,\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\RssNotifications.kt"}}
{"prompt": "\n import org.kodein.di.DI\nimport com.nononsenseapps.feeder.db.room.FeedItemWithFeed\nimport com.nononsenseapps.feeder.R\nimport android.content.Intent\nimport android.content.Context\nimport android.app.PendingIntent\nimport android.app.Notification\nprivate fun getDeleteIntent(\r\n    context: Context,\r\n    feedItems: List<FeedItemWithFeed>,\r\n): PendingIntent {\r\n    val intent = Intent(context, RssNotificationBroadcastReceiver::class.java)\r\n    intent.action = ACTION_MARK_AS_NOTIFIED\r\n\r\n    val ids = LongArray(feedItems.size) { i -> feedItems[i].id }\r\n    intent.putExtra(EXTRA_FEEDITEM_ID_ARRAY, ids)\r\n\r\n    return PendingIntent.getBroadcast(\r\n        context,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/178", "ground_truth": "        0,\r\n        intent,\r\n        PendingIntent.FLAG_UPDATE_CURRENT or FLAG_IMMUTABLE,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\RssNotifications.kt"}}
{"prompt": "\n import org.kodein.di.DI\nimport com.nononsenseapps.feeder.db.room.FeedItemWithFeed\nimport com.nononsenseapps.feeder.db.URI_FEEDITEMS\nimport com.nononsenseapps.feeder.R\nimport android.net.Uri\nimport android.content.Intent\nimport android.content.Context\nimport android.app.Notification\ninternal fun getDeleteIntent(\r\n    context: Context,\r\n    feedItem: FeedItemWithFeed,\r\n): Intent {\r\n    val intent = Intent(context, RssNotificationBroadcastReceiver::class.java)\r\n    intent.action = ACTION_MARK_AS_NOTIFIED\r\n    intent.data = Uri.withAppendedPath(URI_FEEDITEMS, \"${feedItem.id}\")\r", "choices": [{"text": "//    intent.putExtra(EXTRA_FEEDITEM_ID, feedItem.id)\r\n    return intent\r\n}\r\n\r\ninternal fun getMarkAsNotifiedIntent(\r\n    context: Context,\r\n    feedItem: FeedItemWithFeed,\r\n): Intent {\r\n    val intent = Intent(context, RssNotificationBroadcastReceiver::class.java)\r\n    intent.action = ACTION_MARK_AS_NOTIFIED\r\n    intent.data = Uri.withAppendedPath(URI_FEEDITEMS, \"${feedItem.id}\")\r\n//    intent.putExtra(EXTRA_FEEDITEM_ID, feedItem."}], "metadata": {"task_id": "Feeder/179", "ground_truth": "    val ids: LongArray = longArrayOf(feedItem.id)\r\n    intent.putExtra(EXTRA_FEEDITEM_ID_ARRAY, ids)\r\n\r\n    return intent\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\model\\RssNotifications.kt"}}
{"prompt": "\n import kotlinx.coroutines.cancel\nimport com.nononsenseapps.feeder.model.summaryNotificationId\nimport com.nononsenseapps.feeder.model.cancelNotification\ninternal suspend fun unNotifyForMissingItems(\r\n        prev: List<Long>,\r\n        current: List<Long>,\r\n    ) {\r\n        if (current.isEmpty()) {\r\n            cancelNotification(summaryNotificationId.toLong())\r\n        }\r\n        prev.filter {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/192", "ground_truth": "            it !in current\r\n        }.forEach {\r\n            cancelNotification(it)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\notifications\\NotificationsWorker.kt"}}
{"prompt": "\n import java.time.Instant\nimport com.squareup.moshi.Moshi\nfun getMoshi(): Moshi =\r\n    Moshi.Builder()\r\n        .add(InstantAdapter())\r", "choices": [{"text": "\n import java.time.Instant\nimport com.squareup.moshi.Moshi\nfun getMoshi(): Moshi =\r\n    Moshi.Builder()\r\n       .add(InstantAdapter())\r\n"}], "metadata": {"task_id": "Feeder/193", "ground_truth": "        .add(URLAdapter())\r\n        .addLast(KotlinJsonAdapterFactory())\r\n        .build()", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\sync\\Moshi.kt"}}
{"prompt": "\n import android.content.Intent\nimport android.app.Activity\nfun Activity.onNavigateUpFromIntentActivities() {\r\n    startActivity(\r\n        Intent(\r\n            this,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/197", "ground_truth": "            MainActivity::class.java,\r\n        ),\r\n    )\r\n    finish()\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\AddFeedFromShareActivity.kt"}}
{"prompt": "\n import androidx.compose.ui.geometry.Size\nprivate fun computeFillMaxDimension(\r\n    srcSize: Size,\r\n    dstSize: Size,\r\n): Float {\r\n    val widthScale = computeFillWidth(srcSize, dstSize)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/201", "ground_truth": "    val heightScale = computeFillHeight(srcSize, dstSize)\r\n    return max(widthScale, heightScale)\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\coil\\RestrainedFitScaling.kt"}}
{"prompt": "\n import androidx.compose.ui.geometry.Size\nprivate fun computeFillMinDimension(\r\n    srcSize: Size,\r\n    dstSize: Size,\r\n): Float {\r\n    val widthScale = computeFillWidth(srcSize, dstSize)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/202", "ground_truth": "    val heightScale = computeFillHeight(srcSize, dstSize)\r\n    return min(widthScale, heightScale)\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\coil\\RestrainedFitScaling.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.ui.compose.utils.immutableListHolderOf\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\n\r\n@Preview\r\n@Composable\r\nprivate fun PreviewAutoCompleteOutlinedText() {\r\n    AutoCompleteResults(\r\n        displaySuggestions = true,\r\n        suggestions = immutableListHolderOf(\"One\", \"Two\", \"Three\"),\r\n        onSuggestionClicked = {},\r\n        suggestionContent = {\r\n            Text(text = it)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/204", "ground_truth": "        },\r\n    ) {\r\n        OutlinedTextField(value = \"Testing\", onValueChange = {})\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\components\\AutoCompleteText.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.ui.compose.utils.immutableListHolderOf\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\n@Preview\r\nprivate fun Preview() =\r\n    DeleteFeedDialog(\r\n        feeds =\r\n            immutableListHolderOf(\r\n                DeletableFeed(1, \"A Feed\"),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/206", "ground_truth": "                DeletableFeed(2, \"Another Feed\"),\r\n            ),\r\n        onDismiss = {},\r\n        onDelete = {},\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\deletefeed\\DeleteFeedScreen.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.ui.compose.utils.ScreenType\nimport com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview(\"Edit Feed Phone\")\r\n@Composable\r\nprivate fun PreviewEditFeedScreenPhone() {\r\n    FeederTheme {\r\n        EditFeedScreen(\r\n            screenType = ScreenType.SINGLE,\r\n            onNavigateUp = {},\r\n            onOk = {},\r", "choices": [{"text": "//            onCancel = {},\r\n            onEdit = {},\r\n            onAdd = {},\r\n            onRemove = {},\r\n            onEditFeed = {},\r\n            onEditFeeds = {},\r\n            onEditFeedsAndAdd = {},\r\n            onEditFeedsAndRemove = {},\r\n            onEditFeedsAndEdit = {},\r\n            onEditFeedsAndCancel = {},\r\n            onEditFeedsAndOk = {},\r\n            onEditFeedsAndAddAndEdit = {},\r\n            onEditFeedsAndAddAndRemove = {},\r\n            onEditFeedsAndAddAndCancel = {},\r\n            onEditFeedsAndAddAndOk = {},\r\n            onEditFeed"}], "metadata": {"task_id": "Feeder/207", "ground_truth": "            onCancel = {},\r\n            viewState = EditFeedScreenState(),\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\editfeed\\EditFeedScreen.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.ui.compose.utils.ScreenType\nimport com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.tooling.preview.Devices\nimport androidx.compose.runtime.Composable\n\r\n@Preview(\"Edit Feed Foldable\", device = Devices.FOLDABLE)\r\n@Preview(\"Edit Feed Tablet\", device = Devices.PIXEL_C)\r\n@Composable\r\nprivate fun PreviewEditFeedScreenLarge() {\r\n    FeederTheme {\r\n        EditFeedScreen(\r\n            screenType = ScreenType.DUAL,\r\n            onNavigateUp = {},\r\n            onOk = {},\r", "choices": [{"text": "//            onCancel = {},\r\n            onBack = {},\r\n            onSave = {},\r\n            onAdd = {},\r\n            onRemove = {},\r\n            onEdit = {},\r\n            onEditFeed = {},\r\n            onEditFeedItem = {},\r\n            onEditFeedItemImage = {},\r\n            onEditFeedItemText = {},\r\n            onEditFeedItemLink = {},\r\n            onEditFeedItemVideo = {},\r\n            onEditFeedItemAudio = {},\r\n            onEditFeedItemQuote = {},\r\n            onEditFeedItemCode = {},\r\n            onEditFeedItemImage = {},\r\n            onEditFeedItemImage = {},\r\n            onEditFeedItemImage = {},\r\n            onEdit"}], "metadata": {"task_id": "Feeder/208", "ground_truth": "            onCancel = {},\r\n            viewState = EditFeedScreenState(),\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\editfeed\\EditFeedScreen.kt"}}
{"prompt": "\n import java.net.URL\ninternal fun isValidUrl(value: String): Boolean {\r\n    return try {\r\n        URL(value)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/209", "ground_truth": "        true\r\n    } catch (e: Exception) {\r\n        false\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\editfeed\\EditFeedScreenViewModel.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport com.nononsenseapps.feeder.R\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\nimport android.content.res.Configuration\n\r\n@Preview(\r\n    name = \"Nothing to read day\",\r\n    uiMode = Configuration.UI_MODE_NIGHT_NO,\r\n)\r\n@Preview(\r\n    name = \"Nothing to read night\",\r\n    uiMode = Configuration.UI_MODE_NIGHT_YES,\r\n)\r\n@Composable\r\nprivate fun PreviewNothingToRead() {\r\n    FeederTheme {\r", "choices": [{"text": "//        NothingToRead()\r\n    }\r\n}\r\n<file_sep>/app/src/main/java/com/nononsenseapps/feeder/ui/compose/components/FeederAppBar.kt\npackage com.nononsenseapps.feeder.ui.compose.components\n\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material.Icon\nimport androidx.compose.material.IconButton\nimport androidx.compose.material.Text\nimport androidx."}], "metadata": {"task_id": "Feeder/210", "ground_truth": "        Surface {\r\n            NothingToRead()\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\empty\\NothingToRead.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.ui.compose.utils.immutableListHolderOf\nimport com.nononsenseapps.feeder.ui.compose.utils.ThemePreviews\nimport com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport com.nononsenseapps.feeder.ui.compose.deletefeed.DeletableFeed\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\n@ThemePreviews\r\nprivate fun Preview() {\r\n    FeederTheme {\r\n        EditFeedDialog(\r\n            feeds =\r\n                immutableListHolderOf(\r\n                    DeletableFeed(1, \"A Feed\"),\r\n                    DeletableFeed(2, \"Another Feed\"),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/211", "ground_truth": "                ),\r\n            onDismiss = {},\r\n        ) {}\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feed\\EditFeedDialog.kt"}}
{"prompt": "\n import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\n@Preview\r\nprivate fun Preview() =\r\n    ExplainPermissionDialog(\r", "choices": [{"text": ")\r\n\n"}], "metadata": {"task_id": "Feeder/212", "ground_truth": "        explanation = R.string.explanation_permission_notifications,\r\n        onDismiss = {},\r\n    ) {}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feed\\ExplainPermissionDialog.kt"}}
{"prompt": " import com.nononsenseapps.feeder.archmodel.FeedItemStyle\nval cursor FeedItemCursor\nfun contentType(feedItemStyle: FeedItemStyle): String =\r\n        when {\r", "choices": [{"text": ""}], "metadata": {"task_id": "Feeder/213", "ground_truth": "            image != null -> \"$feedItemStyle/image\"\r\n            else -> \"$feedItemStyle/other\"\r\n        }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feed\\FeedItemCompact.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.R\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Icon\nimport androidx.compose.material.icons.outlined.Circle\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.Box\n\r\n@Composable\r\nfun FeedItemNewIndicator(\r\n    size: Dp,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    Box(modifier = modifier) {\r\n        Icon(\r\n            Icons.Outlined.Circle,\r\n            contentDescription = stringResource(id = R.string.unread_adjective),\r\n            modifier =\r\n                Modifier\r", "choices": [{"text": "//                   .size(size)\r\n                   .size(size)\r\n        )\r\n    }\r\n}<file_sep>/app/src/main/java/com/nononsenseapps/feeder/ui/components/FeedItem.kt\npackage com.nononsenseapps.feeder.ui.components\n\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose."}], "metadata": {"task_id": "Feeder/214", "ground_truth": "                    .size(size),\r\n            tint = MaterialTheme.colorScheme.primary,\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feed\\FeedItemIndicator.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.R\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.Alignment\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Icon\nimport androidx.compose.material.icons.filled.Star\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.Box\n\r\n@Composable\r\nfun FeedItemSavedIndicator(\r\n    size: Dp,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    Box(\r\n        contentAlignment = Alignment.Center,\r\n        modifier = modifier,\r\n    ) {\r\n        Icon(\r\n            Icons.Default.Star,\r\n            contentDescription = stringResource(id = R.string.saved_article),\r\n            modifier =\r\n                Modifier\r", "choices": [{"text": "//                   .size(size)\r\n                   .size(size)\r\n        )\r\n    }\r\n}<file_sep>/app/src/main/java/com/nononsenseapps/feeder/ui/components/FeedItem.kt\npackage com.nononsenseapps.feeder.ui.components\n\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose."}], "metadata": {"task_id": "Feeder/215", "ground_truth": "                    .size(size),\r\n            tint = MaterialTheme.colorScheme.primary,\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feed\\FeedItemIndicator.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport com.nononsenseapps.feeder.archmodel.ThemeOptions\nimport com.nononsenseapps.feeder.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.Alignment\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Surface\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Box\n\r\n@Preview(\"Light\")\r\n@Composable\r\nprivate fun PreviewLightFeedItemIndicatorRow() {\r\n    FeederTheme(currentTheme = ThemeOptions.DAY) {\r\n        Surface {\r\n            Box(\r\n                contentAlignment = Alignment.Center,\r\n                modifier =\r\n                    Modifier\r\n                        .padding(32.dp),\r\n            ) {\r\n                Row {\r\n                    FeedItemNewIndicator(size = 8.dp)\r\n                    FeedItemSavedIndicator(size = 8.dp)\r", "choices": [{"text": "\n import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport com.nononsenseapps.feeder.archmodel.ThemeOptions\nimport com.nononsenseapps.feeder.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.Alignment\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Surface\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Box\n\r\n@Preview(\"Light\")\r\n@Composable\r\nprivate fun PreviewLightFeedItemIndicatorRow() {\r\n    FeederTheme(currentTheme = ThemeOptions.DAY) {\r\n        Surface {\r\n            Box(\r\n                contentAlignment = Alignment.Center,\r\n                modifier =\r\n                    Modifier\r\n                       .padding(32.dp),\r\n            ) {\r\n                Row {\r\n                    FeedItemNewIndicator(size = 8.dp)\r\n                    FeedItemSavedIndicator(size = 8.dp)\r\n//                    FeedItemSavedIndicator(size = 8.dp)\r\n//                    FeedItemSavedIndicator(size = 8.dp)\r\n//                    FeedItemSavedIndicator(size = 8.dp)\r\n//                    FeedItemSavedIndicator(size = 8.dp)\r\n//                    FeedItemSavedIndicator(size = 8.dp)\r\n//                    FeedItemSavedIndicator(size = 8.dp)\r\n//                    FeedItemSavedIndicator(size = 8.dp)\r\n//                    FeedItemSavedIndicator(size = 8.dp)\r"}], "metadata": {"task_id": "Feeder/216", "ground_truth": "                }\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feed\\FeedItemIndicator.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport com.nononsenseapps.feeder.archmodel.ThemeOptions\nimport com.nononsenseapps.feeder.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.Alignment\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Surface\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Box\n\r\n@Preview(\"Dark\")\r\n@Composable\r\nprivate fun PreviewDarkFeedItemIndicatorRow() {\r\n    FeederTheme(currentTheme = ThemeOptions.NIGHT) {\r\n        Surface {\r\n            Box(\r\n                contentAlignment = Alignment.Center,\r\n                modifier =\r\n                    Modifier\r\n                        .padding(32.dp),\r\n            ) {\r\n                Row {\r\n                    FeedItemNewIndicator(size = 8.dp)\r\n                    FeedItemSavedIndicator(size = 8.dp)\r", "choices": [{"text": "\n import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport com.nononsenseapps.feeder.archmodel.ThemeOptions\nimport com.nononsenseapps.feeder.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.Alignment\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Surface\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Box\n\r\n@Preview(\"Dark\")\r\n@Composable\r\nprivate fun PreviewDarkFeedItemIndicatorRow() {\r\n    FeederTheme(currentTheme = ThemeOptions.NIGHT) {\r\n        Surface {\r\n            Box(\r\n                contentAlignment = Alignment.Center,\r\n                modifier =\r\n                    Modifier\r\n                       .padding(32.dp),\r\n            ) {\r\n                Row {\r\n                    FeedItemNewIndicator(size = 8.dp)\r\n                    FeedItemSavedIndicator(size = 8.dp)\r\n//                    FeedItemSavedIndicator(size = 8.dp)\r\n//                    FeedItemSavedIndicator(size = 8.dp)\r\n//                    FeedItemSavedIndicator(size = 8.dp)\r\n//                    FeedItemSavedIndicator(size = 8.dp)\r\n//                    FeedItemSavedIndicator(size = 8.dp)\r\n//                    FeedItemSavedIndicator(size = 8.dp)\r\n//                    FeedItemSavedIndicator(size = 8.dp)\r\n//                    FeedItemSavedIndicator(size = 8.dp)\r"}], "metadata": {"task_id": "Feeder/217", "ground_truth": "                }\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feed\\FeedItemIndicator.kt"}}
{"prompt": "\n import androidx.compose.runtime.remember\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.rememberTooltipState\nimport androidx.compose.material3.TooltipDefaults\nimport androidx.compose.material3.TooltipBox\nimport androidx.compose.material3.PlainTooltip\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.foundation.layout.Box\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun PlainTooltipBox(\r\n    tooltip: @Composable () -> Unit,\r\n    content: @Composable () -> Unit,\r\n) {\r\n    TooltipBox(\r\n        positionProvider = TooltipDefaults.rememberPlainTooltipPositionProvider(),\r\n        state = rememberTooltipState(),\r\n        tooltip = {\r\n            PlainTooltip {\r\n                tooltip()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/218", "ground_truth": "            }\r\n        },\r\n        content = content,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feed\\FeedScreen.kt"}}
{"prompt": "\n import androidx.compose.foundation.lazy.LazyListScope\n\r\n@Suppress(\"FunctionName\")\r\nprivate fun LazyListScope.LoadingItem() {\r\n    item {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/219", "ground_truth": "        Text(text = stringResource(id = R.string.fetching_full_article))\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feedarticle\\ArticleScreen.kt"}}
{"prompt": "\nval deleteDialogVisible\nval articleFeedUrl String?\nval feedScreenTitle ScreenTitle\n fun deleteFeeds(feedIds: List<Long>) =\r", "choices": [{"text": ""}], "metadata": {"task_id": "Feeder/220", "ground_truth": "        applicationCoroutineScope.launch {\r\n            repository.deleteFeeds(feedIds)\r\n        }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feedarticle\\FeedArticleViewModel.kt"}}
{"prompt": "\nval unread Boolean\nval articleFeedUrl String?\nval read Boolean\n fun markAsUnread(itemId: Long) =\r", "choices": [{"text": ""}], "metadata": {"task_id": "Feeder/222", "ground_truth": "        applicationCoroutineScope.launch {\r\n            repository.markAsUnread(itemId)\r\n        }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feedarticle\\FeedArticleViewModel.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.ui.compose.feed.FeedOrTag\nimport com.nononsenseapps.feeder.model.workmanager.requestFeedSync\nfun requestImmediateSyncOfCurrentFeedOrTag() {\r\n        val (feedId, feedTag) = repository.currentFeedAndTag.value\r\n        requestFeedSync(\r\n            di = di,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/227", "ground_truth": "            feedId = feedId,\r\n            feedTag = feedTag,\r\n            forceNetwork = true,\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feedarticle\\FeedArticleViewModel.kt"}}
{"prompt": " import com.nononsenseapps.feeder.model.workmanager.requestFeedSync\nval articleFeedUrl String?\nval feedDisplayTitle String\nval feedScreenTitle ScreenTitle\nfun requestImmediateSyncOfAll() {\r\n        requestFeedSync(\r\n            di = di,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/228", "ground_truth": "            forceNetwork = true,\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feedarticle\\FeedArticleViewModel.kt"}}
{"prompt": "\nval showToolbarMenu Boolean\nval filterMenuVisible MutableStateFlow<Boolean>\nval editDialogVisible\n fun setToolbarMenuVisible(visible: Boolean) {\r", "choices": [{"text": "val toolbarMenuVisible = filterMenuVisible.value\r\nif (visible!= toolbarMenuVisible) {\r\nfilterMenuVisible.value = visible\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Feeder/229", "ground_truth": "        state[\"toolbarMenuVisible\"] = visible\r\n        toolbarVisible.update { visible }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feedarticle\\FeedArticleViewModel.kt"}}
{"prompt": "\nval showFilterMenu Boolean\nval filterMenuVisible MutableStateFlow<Boolean>\nval editDialogVisible\n fun setFilterMenuVisible(visible: Boolean) {\r", "choices": [{"text": "val filterMenuVisible = filterMenuVisible.value\r\nfilterMenuVisible.value = visible\r\n}\n"}], "metadata": {"task_id": "Feeder/230", "ground_truth": "        state[\"filterMenuVisible\"] = visible\r\n        filterMenuVisible.update { visible }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feedarticle\\FeedArticleViewModel.kt"}}
{"prompt": " import kotlinx.coroutines.flow.update\nimport com.nononsenseapps.feeder.archmodel.TextToDisplay\nval textToDisplay TextToDisplay\nval textToDisplayTrigger MutableStateFlow<Int>\nval screenTitleForCurrentFeedOrTag StateFlow<ScreenTitle>\nprivate fun setTextToDisplayFor(\r\n        itemId: Long,\r\n        value: TextToDisplay,\r\n    ) {\r\n        state[\"textToDisplayFor$itemId\"] = value\r\n        textToDisplayTrigger.update {\r", "choices": [{"text": "//            textToDisplayTrigger.value = textToDisplayTrigger.value + 1\r\n            textToDisplayTrigger.value\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Feeder/231", "ground_truth": "            textToDisplayTrigger.value + 1\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feedarticle\\FeedArticleViewModel.kt"}}
{"prompt": " import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nval fullTextParser FullTextParser\nval articleLink String?\nval articleTitle String\nfun displayFullText() {\r\n        val itemId = viewState.value.articleId\r\n        viewModelScope.launch {\r", "choices": [{"text": "//            val fullText = fullTextParser.getFullText(itemId)\r\n//            viewState.value = viewState.value.copy(fullText = fullText)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Feeder/232", "ground_truth": "            loadFullTextThenDisplayIt(itemId)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feedarticle\\FeedArticleViewModel.kt"}}
{"prompt": "\nval articleId Long\nval articleLink String?\nval articleTitle String\n override fun onCleared() {\r", "choices": [{"text": "super.onCleared()\r\nviewModelJob.cancel()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Feeder/233", "ground_truth": "        super.onCleared()\r\n        ttsStateHolder.shutdown()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\feedarticle\\FeedArticleViewModel.kt"}}
{"prompt": "\n import androidx.compose.runtime.saveable.Saver\nimport androidx.compose.runtime.State\nfun Saver(confirmStateChange: (DrawerValue) -> Boolean) =\r\n            Saver<DrawerState, DrawerValue>(\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/234", "ground_truth": "                save = { it.currentValue },\r\n                restore = { DrawerState(it, confirmStateChange) },\r\n            )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\NavigationDrawer.kt"}}
{"prompt": "\n import androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.runtime.saveable.Saver\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.State\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.ExperimentalMaterial3Api\n\r\n@Composable\r\n@ExperimentalMaterial3Api\r\nfun rememberDrawerState(\r\n    initialValue: DrawerValue,\r\n    confirmStateChange: (DrawerValue) -> Boolean = { true },\r\n): DrawerState {\r\n    return rememberSaveable(saver = DrawerState.Saver(confirmStateChange)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/235", "ground_truth": "        DrawerState(initialValue, confirmStateChange)\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\NavigationDrawer.kt"}}
{"prompt": "\n import androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.PermanentNavigationDrawer\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.Row\n\r\n@ExperimentalMaterial3Api\r\n@Composable\r\nfun PermanentNavigationDrawer(\r\n    drawerContent: @Composable () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    content: @Composable () -> Unit,\r\n) {\r\n    Row(modifier.fillMaxSize()) {\r\n        drawerContent()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/236", "ground_truth": "        Box {\r\n            content()\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\NavigationDrawer.kt"}}
{"prompt": "\n import androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.graphics.Shape\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.contentColorFor\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.foundation.layout.WindowInsets\nimport androidx.compose.foundation.layout.ColumnScope\nimport androidx.compose.foundation.layout.Column\n\r\n@ExperimentalMaterial3Api\r\n@Composable\r\nfun ModalDrawerSheet(\r\n    modifier: Modifier = Modifier,\r\n    drawerShape: Shape = DrawerDefaults.shape,\r\n    drawerContainerColor: Color = MaterialTheme.colorScheme.surface,\r\n    drawerContentColor: Color = contentColorFor(drawerContainerColor),\r\n    drawerTonalElevation: Dp = DrawerDefaults.ModalDrawerElevation,\r\n    windowInsets: WindowInsets = DrawerDefaults.windowInsets,\r\n    content: @Composable ColumnScope.() -> Unit,\r\n) {\r\n    DrawerSheet(\r\n        windowInsets,\r\n        modifier,\r\n        drawerShape,\r\n        drawerContainerColor,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/237", "ground_truth": "        drawerContentColor,\r\n        drawerTonalElevation,\r\n        content,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\NavigationDrawer.kt"}}
{"prompt": "\n import androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.graphics.Shape\nimport androidx.compose.ui.graphics.RectangleShape\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.contentColorFor\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.foundation.layout.WindowInsets\nimport androidx.compose.foundation.layout.ColumnScope\nimport androidx.compose.foundation.layout.Column\n\r\n@ExperimentalMaterial3Api\r\n@Composable\r\nfun DismissibleDrawerSheet(\r\n    modifier: Modifier = Modifier,\r\n    drawerShape: Shape = RectangleShape,\r\n    drawerContainerColor: Color = MaterialTheme.colorScheme.surface,\r\n    drawerContentColor: Color = contentColorFor(drawerContainerColor),\r\n    drawerTonalElevation: Dp = DrawerDefaults.DismissibleDrawerElevation,\r\n    windowInsets: WindowInsets = DrawerDefaults.windowInsets,\r\n    content: @Composable ColumnScope.() -> Unit,\r\n) {\r\n    DrawerSheet(\r\n        windowInsets,\r\n        modifier,\r\n        drawerShape,\r\n        drawerContainerColor,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/238", "ground_truth": "        drawerContentColor,\r\n        drawerTonalElevation,\r\n        content,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\NavigationDrawer.kt"}}
{"prompt": "\n import androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.semantics.semantics\nimport androidx.compose.ui.semantics.paneTitle\nimport androidx.compose.ui.graphics.Shape\nimport androidx.compose.ui.graphics.RectangleShape\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.contentColorFor\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.foundation.layout.WindowInsets\nimport androidx.compose.foundation.layout.ColumnScope\nimport androidx.compose.foundation.layout.Column\n\r\n@ExperimentalMaterial3Api\r\n@Composable\r\nfun PermanentDrawerSheet(\r\n    modifier: Modifier = Modifier,\r\n    drawerShape: Shape = RectangleShape,\r\n    drawerContainerColor: Color = MaterialTheme.colorScheme.surface,\r\n    drawerContentColor: Color = contentColorFor(drawerContainerColor),\r\n    drawerTonalElevation: Dp = DrawerDefaults.PermanentDrawerElevation,\r\n    windowInsets: WindowInsets = DrawerDefaults.windowInsets,\r\n    content: @Composable ColumnScope.() -> Unit,\r\n) {\r\n    val navigationMenu = getString(Strings.NavigationMenu)\r\n    DrawerSheet(\r\n        windowInsets,\r\n        modifier.semantics {\r\n            paneTitle = navigationMenu\r\n        },\r\n        drawerShape,\r\n        drawerContainerColor,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/239", "ground_truth": "        drawerContentColor,\r\n        drawerTonalElevation,\r\n        content,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\NavigationDrawer.kt"}}
{"prompt": "\n import androidx.compose.ui.graphics.Color\nimport androidx.compose.runtime.rememberUpdatedState\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.State\nimport androidx.compose.runtime.Composable\n @Composable\r\n    override fun containerColor(selected: Boolean): State<Color> {\r\n        return rememberUpdatedState(\r", "choices": [{"text": "if (selected) {\r\n            Color.White\r\n        } else {\r\n            Color.Transparent\r\n        }\r\n        )\r\n    }\n"}], "metadata": {"task_id": "Feeder/241", "ground_truth": "            if (selected) selectedContainerColor else unselectedContainerColor,\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\NavigationDrawer.kt"}}
{"prompt": "\n import androidx.compose.ui.graphics.Color\nimport androidx.compose.runtime.rememberUpdatedState\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.State\nimport androidx.compose.runtime.Composable\n @Composable\r\n    override fun badgeColor(selected: Boolean): State<Color> {\r\n        return rememberUpdatedState(\r", "choices": [{"text": "if (selected) {\r\n            Color.Red\r\n        } else {\r\n            Color.Transparent\r\n        }\r\n        )\r\n    }\n"}], "metadata": {"task_id": "Feeder/242", "ground_truth": "            if (selected) selectedBadgeColor else unselectedBadgeColor,\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\NavigationDrawer.kt"}}
{"prompt": " import androidx.compose.ui.geometry.Offset\nimport androidx.compose.runtime.State\nimport androidx.compose.foundation.gestures.draggable\nval absoluteOffset\nvar isAnimationRunning Boolean\nval offsetState\nprivate suspend fun snapInternalToOffset(target: Float) {\r\n        draggableState.drag {\r", "choices": [{"text": "//            val offset = draggableState.dragValue.x\r\n//            val target = target\r\n//            val delta = target - offset\r\n//            val velocity = draggableState.dragVelocity.x\r\n//            val velocityDelta = velocity * 0.9f\r\n//            val newOffset = offset + delta + velocityDelta\r\n//            val newTarget = target + velocityDelta\r\n//            val newVelocity = velocity * 0.9f\r\n//            val newDragValue = Offset(newOffset, 0f)\r\n//            val newDragVelocity ="}], "metadata": {"task_id": "Feeder/245", "ground_truth": "            dragBy(target - absoluteOffset.value)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\SwipeableState.kt"}}
{"prompt": "\n import kotlin.math.abs\nimport com.nononsenseapps.feeder.ui.compose.material3.SwipeableDefaults.AnimationSpec\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.runtime.State\nimport androidx.compose.foundation.gestures.draggable\nimport androidx.compose.animation.core.AnimationSpec\nimport androidx.compose.animation.core.Animatable\nprivate suspend fun animateInternalToOffset(\r\n        target: Float,\r\n        spec: AnimationSpec<Float>,\r\n    ) {\r\n        draggableState.drag {\r\n            var prevValue = absoluteOffset.value\r\n            animationTarget.value = target\r\n            isAnimationRunning = true\r\n            try {\r\n                Animatable(prevValue).animateTo(target, spec) {\r\n                    dragBy(this.value - prevValue)\r\n                    prevValue = this.value\r\n                }\r\n            } finally {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/246", "ground_truth": "                animationTarget.value = null\r\n                isAnimationRunning = false\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\SwipeableState.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.Flow\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.runtime.getValue\nimport androidx.compose.material3.ExperimentalMaterial3Api\n @ExperimentalMaterial3Api\r\n    internal suspend fun snapTo(targetValue: T) {\r\n        latestNonEmptyAnchorsFlow.collect { anchors ->\r\n            val targetOffset = anchors.getOffset(targetValue)\r\n            requireNotNull(targetOffset) {\r\n                \"The target value must have an associated anchor.\"\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/247", "ground_truth": "            }\r\n            snapInternalToOffset(targetOffset)\r\n            currentValue = targetValue\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\SwipeableState.kt"}}
{"prompt": "\nval offset State<Float>\nvar currentValue T\nval absoluteOffset\n override fun equals(other: Any?): Boolean {\r\n        if (this === other) return true\r\n        if (other !is SwipeProgress<*>) return false\r\n\r\n        if (from != other.from) return false\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/250", "ground_truth": "        if (to != other.to) return false\r\n        if (fraction != other.fraction) return false\r\n\r\n        return true\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\SwipeableState.kt"}}
{"prompt": "\nval offset State<Float>\nval offsetState\nval absoluteOffset\n override fun hashCode(): Int {\r\n        var result = from?.hashCode() ?: 0\r\n        result = 31 * result + (to?.hashCode() ?: 0)\r", "choices": [{"text": "\nval offset State<Float>\nval offsetState\nval absoluteOffset\n override fun hashCode(): Int {\r\n        var result = from?.hashCode()?: 0\r\n        result = 31 * result + (to?.hashCode()?: 0)\r\nresult = 31 * result + (offset?.hashCode()?: 0)\r\n        return result\r\n    }\r\n\r\n    override fun equals(other: Any?): Boolean {\r\n        if (this === other) return true\r\n        if (javaClass!= other?.javaClass) return false\r\n\r\n        other as Offset\r\n\r\n        if (from!= other.from) return false\r\n        if (to!= other.to) return false\r\n        if (offset!= other.offset) return false\r\n\r\n        return true\r\n    }\r\n\r\n    override fun toString(): String {\r\n        return \"Offset(from=$from, to=$to, offset=$offset)\"\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Feeder/251", "ground_truth": "        result = 31 * result + fraction.hashCode()\r\n        return result\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\SwipeableState.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.ui.compose.material3.SwipeableDefaults.AnimationSpec\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.runtime.saveable.Saver\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.State\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.animation.core.AnimationSpec\n\r\n@Composable\r\n@ExperimentalMaterial3Api\r\ninternal fun <T : Any> rememberSwipeableState(\r\n    initialValue: T,\r\n    animationSpec: AnimationSpec<Float> = AnimationSpec,\r\n    confirmStateChange: (newValue: T) -> Boolean = { true },\r\n): SwipeableState<T> {\r\n    return rememberSaveable(\r\n        saver =\r\n            SwipeableState.Saver(\r\n                animationSpec = animationSpec,\r\n                confirmStateChange = confirmStateChange,\r\n            ),\r\n    ) {\r\n        SwipeableState(\r\n            initialValue = initialValue,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/252", "ground_truth": "            animationSpec = animationSpec,\r\n            confirmStateChange = confirmStateChange,\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\SwipeableState.kt"}}
{"prompt": "\nval offset State<Float>\nval offsetState\nval absoluteOffset\n override fun hashCode(): Int {\r\n        var result = basis.hashCode()\r\n        result = 31 * result + factorAtMin.hashCode()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/255", "ground_truth": "        result = 31 * result + factorAtMax.hashCode()\r\n        return result\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\material3\\SwipeableState.kt"}}
{"prompt": "\n import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.semantics.semantics\nimport androidx.compose.ui.semantics.contentDescription\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Icon\nimport androidx.compose.material.icons.filled.Star\nimport androidx.compose.material.icons.Icons\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nprivate fun SavedArticles(\r\n    title: String = \"Bar\",\r\n    unreadCount: Int = 10,\r\n    onItemClick: () -> Unit = {},\r\n) {\r\n    Feed(\r\n        title = title,\r\n        unreadCount = unreadCount,\r\n        onItemClick = onItemClick,\r\n        image = {\r\n            Icon(\r\n                Icons.Default.Star,\r\n                contentDescription = null,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/259", "ground_truth": "                modifier = Modifier.size(24.dp),\r\n            )\r\n        },\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navdrawer\\NavDrawer.kt"}}
{"prompt": "\n import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nprivate fun TopLevelFeed(\r\n    title: String = \"Foo\",\r\n    unreadCount: Int = 99,\r\n    onItemClick: () -> Unit = {},\r\n    imageUrl: String? = null,\r\n) = Feed(\r\n    title = title,\r\n    imageUrl = imageUrl,\r", "choices": [{"text": ")\r\n"}], "metadata": {"task_id": "Feeder/260", "ground_truth": "    unreadCount = unreadCount,\r\n    onItemClick = onItemClick,\r\n)", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navdrawer\\NavDrawer.kt"}}
{"prompt": "\n import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nprivate fun ChildFeed(\r\n    title: String = \"Foo\",\r\n    imageUrl: String? = null,\r\n    unreadCount: Int = 99,\r\n    onItemClick: () -> Unit = {},\r\n) {\r\n    Feed(\r\n        title = title,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/261", "ground_truth": "        imageUrl = imageUrl,\r\n        unreadCount = unreadCount,\r\n        onItemClick = onItemClick,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navdrawer\\NavDrawer.kt"}}
{"prompt": "\n import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.Box\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nprivate fun Placeholder() {\r\n    Box(\r\n        modifier =\r\n            Modifier\r", "choices": [{"text": "//               .fillMaxSize()\r\n               .background(Color.Red)\r\n    )\r\n}\n"}], "metadata": {"task_id": "Feeder/262", "ground_truth": "                .fillMaxWidth()\r\n                .height(48.dp),\r\n    ) {\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navdrawer\\NavDrawer.kt"}}
{"prompt": "\n import androidx.navigation.NavController\nfun navigate(\r\n        navController: NavController,\r\n        feedUrl: String? = null,\r\n    ) {\r\n        val params =\r\n            queryParams {\r\n                +(\"feedUrl\" to feedUrl)\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/263", "ground_truth": "\r\n        navController.navigate(path + params) {\r\n            launchSingleTop = true\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navigation\\NavigationDestinations.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.ui.compose.searchfeed.SearchFeedScreen\nimport com.nononsenseapps.feeder.ui.compose.feed.FeedScreen\nimport com.nononsenseapps.feeder.base.diAwareViewModel\nimport androidx.navigation.NavController\nimport androidx.navigation.NavBackStackEntry\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.lazy.LazyListState\n @Composable\r\n    override fun RegisterScreen(\r\n        navController: NavController,\r\n        backStackEntry: NavBackStackEntry,\r\n        navDrawerListState: LazyListState,\r\n    ) {\r\n        SearchFeedScreen(\r\n            onNavigateUp = {\r\n                navController.popBackStack()\r\n            },\r\n            searchFeedViewModel = backStackEntry.diAwareViewModel(),\r\n            initialFeedUrl = backStackEntry.arguments?.getString(\"feedUrl\"),\r\n        ) {\r\n            AddFeedDestination.navigate(\r\n                navController,\r\n                feedUrl = it.url,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/264", "ground_truth": "                feedTitle = it.title,\r\n                feedImage = it.feedImage,\r\n            )\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navigation\\NavigationDestinations.kt"}}
{"prompt": "\n import androidx.navigation.NavController\nfun navigate(\r\n        navController: NavController,\r\n        feedUrl: String,\r\n        feedTitle: String = \"\",\r\n        feedImage: String = \"\",\r\n    ) {\r\n        val params =\r\n            queryParams {\r\n                +(\"feedTitle\" to feedTitle)\r\n                +(\"feedImage\" to feedImage)\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/265", "ground_truth": "\r\n        navController.navigate(\"$path/${feedUrl.urlEncode()}$params\") {\r\n            launchSingleTop = true\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navigation\\NavigationDestinations.kt"}}
{"prompt": "\n import androidx.navigation.NavController\nfun navigate(\r\n        navController: NavController,\r\n        feedId: Long,\r\n    ) {\r\n        navController.navigate(\"$path/$feedId\") {\r", "choices": [{"text": "//            navController.navigate(R.id.action_feed_to_feed_detail) {\r\n                popUpTo(R.id.feed_list_fragment) {\r\n                    saveState = true\r\n                }\r\n                // inclusive = true, so the destination fragment is added to the back stack\r\n                // inclusive = false, so the destination fragment is not added to the back stack\r\n                inclusive = true\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Feeder/267", "ground_truth": "            launchSingleTop = true\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navigation\\NavigationDestinations.kt"}}
{"prompt": " import androidx.navigation.NavController\nval route String\nval arguments List<NamedNavArgument>\nval namedNavArgument\nfun navigate(navController: NavController) {\r\n        navController.navigate(path) {\r", "choices": [{"text": "//            navController.navigate(R.id.action_firstFragment_to_secondFragment) {\r\n                arguments = bundleOf(\r\n                        \"key\" to \"value\",\r\n                        \"key2\" to \"value2\"\r\n                )\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Feeder/269", "ground_truth": "            launchSingleTop = true\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navigation\\NavigationDestinations.kt"}}
{"prompt": "\n import androidx.navigation.NavController\nfun navigate(\r\n        navController: NavController,\r\n        itemId: Long,\r\n    ) {\r\n        navController.navigate(\"$path/$itemId\") {\r", "choices": [{"text": "//            navController.navigate(R.id.action_navigation_home_to_navigation_detail) {\r\n                popUpTo(R.id.navigation_home) {\r\n                    saveState = true\r\n                }\r\n                launchSingleTop = true\r\n                restoreState = true\r\n            }\r\n    }\r\n"}], "metadata": {"task_id": "Feeder/270", "ground_truth": "            launchSingleTop = true\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navigation\\NavigationDestinations.kt"}}
{"prompt": "\n import androidx.navigation.NavController\nfun navigate(\r\n        navController: NavController,\r\n        syncCode: String,\r\n        secretKey: String,\r\n    ) {\r\n        val params =\r\n            queryParams {\r\n                if (syncCode.isNotBlank()) {\r\n                    +(\"syncCode\" to syncCode)\r\n                }\r\n                if (secretKey.isNotBlank()) {\r\n                    +(\"secretKey\" to secretKey)\r\n                }\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/271", "ground_truth": "\r\n        navController.navigate(\"$path$params\") {\r\n            launchSingleTop = true\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navigation\\NavigationDestinations.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.ui.compose.sync.SyncScreenViewModel\nimport com.nononsenseapps.feeder.ui.compose.sync.SyncScreen\nimport com.nononsenseapps.feeder.base.diAwareViewModel\nimport androidx.navigation.NavController\nimport androidx.navigation.NavBackStackEntry\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.lazy.LazyListState\n @Composable\r\n    override fun RegisterScreen(\r\n        navController: NavController,\r\n        backStackEntry: NavBackStackEntry,\r\n        navDrawerListState: LazyListState,\r\n    ) {\r\n        val syncRemoteViewModel = backStackEntry.diAwareViewModel<SyncScreenViewModel>()\r\n\r\n        SyncScreen(\r\n            onNavigateUp = {\r\n                if (!navController.popBackStack()) {\r\n                    SettingsDestination.navigate(navController)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/272", "ground_truth": "                }\r\n            },\r\n            viewModel = syncRemoteViewModel,\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navigation\\NavigationDestinations.kt"}}
{"prompt": "\nval route String\nval arguments List<NamedNavArgument>\nval sb\n private fun appendIfNotEmpty(\r\n        name: String,\r\n        value: String?,\r\n    ) {\r\n        if (value?.isNotEmpty() != true) {\r\n            return\r\n        }\r\n\r\n        when {\r\n            sb.isEmpty() -> sb.append(\"?\")\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/273", "ground_truth": "            else -> sb.append(\"&\")\r\n        }\r\n\r\n        sb.append(\"$name=${value.urlEncode()}\")\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\navigation\\NavigationDestinations.kt"}}
{"prompt": "\n import androidx.compose.ui.unit.Velocity\noverride suspend fun onPreFling(available: Velocity): Velocity {\r", "choices": [{"text": "return Velocity(0f, 0f)\r\n}\r\n"}], "metadata": {"task_id": "Feeder/278", "ground_truth": "        onRelease(available.y)\r\n        return Velocity.Zero\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\pullrefresh\\PullRefresh.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.icons.filled.Stop\nimport androidx.compose.material.icons.filled.Pause\n\r\n@Preview\r\n@Composable\r\nprivate fun PlayerPreview() {\r\n    FeederTheme {\r\n        TTSPlayer(\r\n            currentlyPlaying = true,\r\n            onPlay = {},\r\n            onPause = {},\r\n            onStop = {},\r", "choices": [{"text": "//            onSkip = {},\r\n            onSkip = {},\r\n            onSkipToNext = {},\r\n            onSkipToPrevious = {},\r\n            onSkipTo = {},\r\n            onSkipToFirst = {},\r\n            onSkipToLast = {},\r\n            onSkipToRandom = {},\r\n            onSkipToShuffle = {},\r\n            onSkipToRepeat = {},\r\n            onSkipToRepeatOne = {},\r\n            onSkipToRepeatAll = {},\r\n            onSkipToRepeatOff = {},\r\n            onSkipToRepeatOff = {},\r\n            onSkipToRepeatOff = {},\r\n            onSkipToRepeatOff = {},\r\n            onSkipToRepeatOff = {},\r\n            onSkipToRepeat"}], "metadata": {"task_id": "Feeder/279", "ground_truth": "            onSkipNext = {},\r\n            languages = ImmutableHolder(emptyList()),\r\n        ) {}\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\readaloud\\ReadAloudPlayer.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.ui.compose.components.safeSemantics\nimport androidx.compose.ui.semantics.testTag\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.Alignment\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.Box\n\r\n@Composable\r\nfun SearchingIndicator(modifier: Modifier = Modifier) {\r\n    Box(\r\n        contentAlignment = Alignment.Center,\r\n        modifier =\r\n            modifier\r\n                .fillMaxWidth()\r\n                .safeSemantics {\r\n                    testTag = \"searchingIndicator\"\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/280", "ground_truth": "                },\r\n    ) {\r\n        CircularProgressIndicator()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\searchfeed\\SearchFeedScreen.kt"}}
{"prompt": "\n import java.net.URL\nimport java.net.MalformedURLException\nimport com.nononsenseapps.feeder.R\nprivate fun isValidUrl(url: String): Boolean {\r\n    if (url.isBlank()) {\r\n        return false\r\n    }\r\n    return try {\r\n        try {\r\n            URL(url)\r\n            true\r\n        } catch (_: MalformedURLException) {\r\n            URL(\"http://$url\")\r\n            true\r", "choices": [{"text": "       }\r\n    } catch (_: MalformedURLException) {\r\n        false\r\n    }\r\n}\n"}], "metadata": {"task_id": "Feeder/281", "ground_truth": "        }\r\n    } catch (e: Exception) {\r\n        false\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\searchfeed\\SearchFeedScreen.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.ProvideTextStyle\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.RowScope\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Arrangement\n\r\n@Composable\r\nprivate fun RowScope.TitleAndSubtitle(\r\n    title: @Composable () -> Unit,\r\n    subtitle: (@Composable () -> Unit)? = null\r\n) {\r\n    Column(\r\n        modifier = Modifier.weight(1f),\r\n        verticalArrangement = Arrangement.Center\r\n    ) {\r\n        ProvideTextStyle(value = MaterialTheme.typography.titleMedium) {\r\n            title()\r\n        }\r\n        if (subtitle != null) {\r\n            Spacer(modifier = Modifier.size(2.dp))\r\n            ProvideTextStyle(value = MaterialTheme.typography.bodyMedium) {\r", "choices": [{"text": "\n import com.nononsenseapps.feeder.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.ProvideTextStyle\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.RowScope\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Arrangement\n\r\n@Composable\r\nprivate fun RowScope.TitleAndSubtitle(\r\n    title: @Composable () -> Unit,\r\n    subtitle: (@Composable () -> Unit)? = null\r\n) {\r\n    Column(\r\n        modifier = Modifier.weight(1f),\r\n        verticalArrangement = Arrangement.Center\r\n    ) {\r\n        ProvideTextStyle(value = MaterialTheme.typography.titleMedium) {\r\n            title()\r\n        }\r\n        if (subtitle!= null) {\r\n            Spacer(modifier = Modifier.size(2.dp))\r\n            ProvideTextStyle(value = MaterialTheme.typography.bodyMedium) {\r\n//                Text(text = subtitle.invoke(), style = MaterialTheme.typography.bodyMedium)\r\n                subtitle()\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun FeedItem(\r\n    title: String,\r\n    subtitle: String? = null,\r\n    modifier: Modifier = Modifier,\r\n    onClick: () -> Unit\r\n) {\r\n    Row(\r\n        modifier = modifier.clickable(onClick = onClick),\r\n        verticalAlignment = Alignment.CenterVertically\r\n    ) {\r\n        TitleAndSubtitle(\r\n            title = { Text(text = title) },\r\n            subtitle = { Text(text = subtitle?: \"\") }"}], "metadata": {"task_id": "Feeder/282", "ground_truth": "                subtitle()\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\settings\\Settings.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.archmodel.ThemeOptions\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun ThemeOptions.asThemeOption() =\r\n    ThemeOption(\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/283", "ground_truth": "        currentTheme = this,\r\n        name = stringResource(id = stringId)\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\settings\\Settings.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.archmodel.DarkThemePreferences\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun DarkThemePreferences.asDarkThemeOption() =\r\n    DarkThemeOption(\r", "choices": [{"text": "//        isDarkTheme = isDarkTheme,\r\n        isDarkTheme = true,\r\n        isSystemInDarkTheme = isSystemInDarkTheme,\r\n        isSystemInLightTheme = isSystemInLightTheme,\r\n        isSystemInUnknownTheme = isSystemInUnknownTheme,\r\n        isSystemInAutoTheme = isSystemInAutoTheme,\r\n        isSystemInHighContrast = isSystemInHighContrast,\r\n        isSystemInHighContrastLight = isSystemInHighContrastLight,\r\n        isSystemInHighContrastDark = isSystemInHighContrastDark,\r\n        isSystemInHighContrastBlack = isSystemInHighContrastBlack,"}], "metadata": {"task_id": "Feeder/284", "ground_truth": "        darkThemePreferences = this,\r\n        name = stringResource(id = stringId)\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\settings\\Settings.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.archmodel.SortingOptions\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun SortingOptions.asSortOption() =\r\n    SortOption(\r", "choices": [{"text": "//        id = id,\r\n        name = name,\r\n        sortOrder = sortOrder,\r\n        sortDirection = sortDirection,\r\n        sortType = sortType,\r\n        sortTypeValue = sortTypeValue,\r\n        sortTypeValue2 = sortTypeValue2,\r\n        sortTypeValue3 = sortTypeValue3,\r\n        sortTypeValue4 = sortTypeValue4,\r\n        sortTypeValue5 = sortTypeValue5,\r\n        sortTypeValue6 = sortTypeValue6,\r\n        sortTypeValue7 = sortTypeValue7,\r\n        sortTypeValue8 = sortTypeValue8,\r\n        sortTypeValue9 = sortTypeValue"}], "metadata": {"task_id": "Feeder/285", "ground_truth": "        currentSorting = this,\r\n        name = stringResource(id = stringId)\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\settings\\Settings.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.archmodel.SyncFrequency\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun SyncFrequency.asSyncFreqOption() =\r\n    SyncFreqOption(\r", "choices": [{"text": "//        id = id,\r\n        name = name,\r\n        description = description,\r\n        frequency = frequency,\r\n        isDefault = isDefault,\r\n        isEnabled = isEnabled,\r\n        isSelected = isSelected\r\n    )\r\n<file_sep>/app/src/main/java/com/nononsenseapps/feeder/archmodel/SyncFrequency.kt\npackage com.nononsenseapps.feeder.archmodel\n\nimport androidx.compose.runtime.Immutable\nimport androidx.compose.runtime.Stable\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.toArgb"}], "metadata": {"task_id": "Feeder/286", "ground_truth": "        syncFrequency = this,\r\n        name = stringResource(id = stringId)\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\settings\\Settings.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.archmodel.ItemOpener\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun ItemOpener.asItemOpenerOption() =\r\n    ItemOpenerOption(\r", "choices": [{"text": "//        itemOpener = this,\r\n        itemOpener = this,\r\n        itemOpenerName = this.name,\r\n        itemOpenerDescription = this.description,\r\n        itemOpenerIcon = this.icon,\r\n        itemOpenerIconTint = this.iconTint,\r\n        itemOpenerIconSize = this.iconSize,\r\n        itemOpenerIconContentDescription = this.iconContentDescription,\r\n        itemOpenerIconContentDescription = this.iconContentDescription,\r\n        itemOpenerIconContentDescription = this.iconContentDescription,\r\n        itemOpenerIconContentDescription = this.iconContentDescription,\r\n        item"}], "metadata": {"task_id": "Feeder/287", "ground_truth": "        itemOpener = this,\r\n        name = stringResource(id = stringId)\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\settings\\Settings.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.archmodel.LinkOpener\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun LinkOpener.asLinkOpenerOption() =\r\n    LinkOpenerOption(\r", "choices": [{"text": "//        openInBrowser = openInBrowser,\r\n        openInBrowser = true,\r\n        openInNewTab = true,\r\n        openInNewWindow = true,\r\n        openInNewWindowWithFallback = true,\r\n        openInNewTabWithFallback = true,\r\n        openInBrowserWithFallback = true,\r\n        openInNewTabWithFallbackAndBrowser = true,\r\n        openInNewWindowWithFallbackAndBrowser = true,\r\n        openInBrowserWithFallbackAndNewTab = true,\r\n        openInBrowserWithFallbackAndNewWindow = true,\r\n        openInNewTabWithFallbackAndBrowserAndNewWindow = true,\r\n        open"}], "metadata": {"task_id": "Feeder/288", "ground_truth": "        linkOpener = this,\r\n        name = stringResource(id = stringId)\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\settings\\Settings.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.archmodel.FeedItemStyle\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun FeedItemStyle.asFeedItemStyleOption() =\r\n    FeedItemStyleOption(\r", "choices": [{"text": "//        id = id,\r\n        title = title,\r\n        subtitle = subtitle,\r\n        image = image,\r\n        imageAspectRatio = imageAspectRatio,\r\n        imageWidth = imageWidth,\r\n        imageHeight = imageHeight,\r\n        imageGravity = imageGravity,\r\n        imageScaleType = imageScaleType,\r\n        imageTint = imageTint,\r\n        imageTintMode = imageTintMode,\r\n        imageAlpha = imageAlpha,\r\n        imageBackground = imageBackground,\r\n        imageBackgroundAlpha = imageBackgroundAlpha,\r\n        imageBackgroundTint = imageBackgroundTint,\r\n        imageBackgroundTintMode = imageBackgroundTintMode,\r\n        imageBackgroundScaleType = imageBackgroundScaleType"}], "metadata": {"task_id": "Feeder/289", "ground_truth": "        feedItemStyle = this,\r\n        name = stringResource(id = stringId)\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\settings\\Settings.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.archmodel.SwipeAsRead\nimport com.nononsenseapps.feeder.R\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun SwipeAsRead.asSwipeAsReadOption() =\r\n    SwipeAsReadOption(\r", "choices": [{"text": "//        id = id,\r\n        title = title,\r\n        description = description,\r\n        icon = icon,\r\n        isEnabled = isEnabled,\r\n        isChecked = isChecked,\r\n        onClick = onClick\r\n    )\r\n<file_sep>/app/src/main/java/com/nononsenseapps/feeder/archmodel/SwipeAsRead.kt\npackage com.nononsenseapps.feeder.archmodel\n\nimport androidx.compose.runtime.Immutable\nimport androidx.compose.runtime.Stable\nimport com.nononsenseapps.feeder.archmodel.SwipeAsRead.SwipeAsReadOption\n"}], "metadata": {"task_id": "Feeder/290", "ground_truth": "        swipeAsRead = this,\r\n        name = stringResource(id = stringId)\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\settings\\Settings.kt"}}
{"prompt": "\nval applicationCoroutineScope ApplicationCoroutineScope\nval _viewState\nval viewState StateFlow<SettingsViewState>\n fun setSyncOnlyOnWifi(value: Boolean) =\r", "choices": [{"text": "applicationCoroutineScope.launch {\r\n_viewState.value = _viewState.value.copy(syncOnlyOnWifi = value)\r\n}\n"}], "metadata": {"task_id": "Feeder/291", "ground_truth": "        applicationCoroutineScope.launch {\r\n            repository.setSyncOnlyOnWifi(value)\r\n        }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\settings\\SettingsViewModel.kt"}}
{"prompt": "\nval applicationCoroutineScope ApplicationCoroutineScope\nval _viewState\nval viewState StateFlow<SettingsViewState>\n fun setSyncOnlyWhenCharging(value: Boolean) =\r", "choices": [{"text": ""}], "metadata": {"task_id": "Feeder/292", "ground_truth": "        applicationCoroutineScope.launch {\r\n            repository.setSyncOnlyWhenCharging(value)\r\n        }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\settings\\SettingsViewModel.kt"}}
{"prompt": " import com.nononsenseapps.feeder.archmodel.SyncFrequency\nval applicationCoroutineScope ApplicationCoroutineScope\nval immutableFeedsSettings\nval repository Repository\nfun setSyncFrequency(value: SyncFrequency) =\r", "choices": [{"text": "immutableFeedsSettings.update { it.copy(syncFrequency = value) }\n"}], "metadata": {"task_id": "Feeder/293", "ground_truth": "        applicationCoroutineScope.launch {\r\n            repository.setSyncFrequency(value)\r\n        }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\settings\\SettingsViewModel.kt"}}
{"prompt": "\nval LOG_TAG\nval applicationCoroutineScope ApplicationCoroutineScope\nval repository Repository\n fun addToBlockList(value: String) =\r", "choices": [{"text": "applicationCoroutineScope.launch {\r\nrepository.addToBlockList(value)\r\n}\n"}], "metadata": {"task_id": "Feeder/294", "ground_truth": "        applicationCoroutineScope.launch {\r\n            repository.addBlocklistPattern(value)\r\n        }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\settings\\SettingsViewModel.kt"}}
{"prompt": "\nval batteryOptimizationIgnoredFlow Flow<Boolean>\nval repository Repository\nval applicationCoroutineScope ApplicationCoroutineScope\n fun removeFromBlockList(value: String) =\r", "choices": [{"text": "launch {\r\nrepository.removeFromBlockList(value)\r\n}\n"}], "metadata": {"task_id": "Feeder/295", "ground_truth": "        applicationCoroutineScope.launch {\r\n            repository.removeBlocklistPattern(value)\r\n        }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\settings\\SettingsViewModel.kt"}}
{"prompt": "\nval LOG_TAG\nval repository Repository\nval applicationCoroutineScope ApplicationCoroutineScope\n fun setTextScale(value: Float) {\r", "choices": [{"text": "//    val scale = value / 100f\r\n//    val fontScale = Resources.getSystem().displayMetrics.scaledDensity\r\n//    val newFontScale = fontScale * scale\r\n//    val configuration = Resources.getSystem().configuration\r\n//    configuration.fontScale = newFontScale\r\n//    val resources = Resources.getSystem()\r\n//    val displayMetrics = resources.displayMetrics\r\n//    displayMetrics.scaledDensity = newFontScale\r\n//    resources.updateConfiguration(configuration, displayMetrics)\r\n}\r\n"}], "metadata": {"task_id": "Feeder/296", "ground_truth": "        // Just some sanity validation\r\n        repository.setTextScale(value.coerceIn(0.1f, 10f))\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\settings\\SettingsViewModel.kt"}}
{"prompt": "\n import androidx.compose.ui.unit.Dp\nimport androidx.compose.material3.Slider\nprivate fun getSliderOffset(\r\n    value: Float,\r\n    valueRange: ClosedFloatingPointRange<Float>,\r\n    boxWidth: Dp,\r\n    labelWidth: Dp,\r\n): Dp {\r\n    val coerced = value.coerceIn(valueRange.start, valueRange.endInclusive)\r\n    val positionFraction = calcFraction(valueRange.start, valueRange.endInclusive, coerced)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/297", "ground_truth": "\r\n    return (boxWidth - labelWidth) * positionFraction\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\settings\\SliderWithLabel.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Slider\nimport androidx.compose.material.Surface\n\r\n@Preview\r\n@Composable\r\nprivate fun PreviewSliderWithLabel() {\r\n    FeederTheme {\r\n        Surface {\r\n            var value by remember {\r\n                mutableStateOf(1f)\r\n            }\r\n            SliderWithLabel(\r\n                value = value,\r\n                onValueChange = { value = it },\r\n                valueToLabel = { \"%.1fx\".format(value) },\r\n                valueRange = 1f..2f,\r", "choices": [{"text": "//                valueRange = 0f..100f,\r\n                valueRangeLabel = { \"%.0f%%\".format(it) },\r\n                valueRangeTooltip = { \"%.0f%%\".format(it) },\r\n                valueRangeTooltipPosition = TooltipPosition.Start,\r\n                valueRangeTooltipOffset = 10.dp,\r\n                valueRangeTooltipText = { \"%.0f%%\".format(it) },\r\n                valueRangeTooltipTextStyle = MaterialTheme.typography.bodySmall,\r\n                valueRangeTooltipColor = MaterialTheme.colors.primary,\r\n                valueRangeTooltipElevation = 1.dp,"}], "metadata": {"task_id": "Feeder/298", "ground_truth": "                steps = 9,\r\n            )\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\settings\\SliderWithLabel.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.ui.compose.components.ConfirmDialog\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun LeaveSyncChainDialog(\r\n    onDismiss: () -> Unit,\r\n    onOk: () -> Unit,\r\n) = ConfirmDialog(\r\n    onDismiss = onDismiss,\r\n    onOk = onOk,\r", "choices": [{"text": ") {\r\n    Text(\r\n        text = stringResource(id = R.string.leave_sync_chain_dialog_title),\r\n        style = MaterialTheme.typography.h6,\r\n    )\r\n    Text(\r\n        text = stringResource(id = R.string.leave_sync_chain_dialog_message),\r\n        style = MaterialTheme.typography.body1,\r\n    )\r\n}\r\n<file_sep>/app/src/main/java/com/nononsenseapps/feeder/ui/compose/components/LoadingDialog.kt\npackage com.nononsenseapps.feeder.ui.compose"}], "metadata": {"task_id": "Feeder/299", "ground_truth": "    title = R.string.leave_sync_chain,\r\n    body = R.string.are_you_sure_leave_sync_chain,\r\n)", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\LeaveSyncChainDialog.kt"}}
{"prompt": "\n import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nprivate fun PreviewLeaveSyncChainDialog() {\r\n    LeaveSyncChainDialog(\r\n        onDismiss = {},\r", "choices": [{"text": "//        onConfirm = {},\r\n        onCancel = {},\r\n        onLeave = {},\r\n        onLeaveAll = {},\r\n        onLeaveOthers = {},\r\n        onLeaveOthersAndMe = {},\r\n        onLeaveOthersAndMeAndAll = {},\r\n        onLeaveOthersAndMeAndAllAndMe = {},\r\n        onLeaveOthersAndMeAndAllAndMeAndAll = {},\r\n        onLeaveOthersAndMeAndAllAndMeAndAllAndMe = {},\r\n        onLeaveOthersAndMeAndAllAndMeAndAllAndMeAndAll = {},\r\n        onLeaveOthersAndMeAndAllAndMeAndAllAndMeAndAllAndMe = {},\r\n       "}], "metadata": {"task_id": "Feeder/300", "ground_truth": "        onOk = {},\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\LeaveSyncChainDialog.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.ui.compose.utils.getScreenType\nimport com.nononsenseapps.feeder.ui.compose.utils.ScreenType\nimport androidx.compose.material3.windowsizeclass.WindowSizeClass\nfun getSyncScreenType(\r\n    windowSize: WindowSizeClass,\r\n    viewState: SyncScreenViewState,\r\n): SyncScreenType =\r\n    when (getScreenType(windowSize)) {\r\n        ScreenType.SINGLE -> {\r\n            when (viewState.singleScreenToShow) {\r\n                SyncScreenToShow.SETUP -> SyncScreenType.SINGLE_SETUP\r\n                SyncScreenToShow.DEVICELIST -> SyncScreenType.SINGLE_DEVICELIST\r\n                SyncScreenToShow.ADD_DEVICE -> SyncScreenType.SINGLE_ADD_DEVICE\r\n                SyncScreenToShow.JOIN -> SyncScreenType.SINGLE_JOIN\r", "choices": [{"text": "//                SyncScreenToShow.SETTINGS -> SyncScreenType.SINGLE_SETTINGS\r\n            }\r\n        }\r\n        ScreenType.DOUBLE -> {\r\n            when (viewState.doubleScreenToShow) {\r\n                SyncScreenToShow.SETUP -> SyncScreenType.DOUBLE_SETUP\r\n                SyncScreenToShow.DEVICELIST -> SyncScreenType.DOUBLE_DEVICELIST\r\n                SyncScreenToShow.ADD_DEVICE -> SyncScreenType.DOUBLE_ADD_DEVICE\r\n                SyncScreenToShow.JOIN -> SyncScreenType.DOUBLE_JOIN\r\n//                SyncScreenToShow.SETTINGS -> SyncScreenType.DOUBLE_SETTINGS\r\n            }\r\n        }"}], "metadata": {"task_id": "Feeder/301", "ground_truth": "            }\r\n        }\r\n\r\n        ScreenType.DUAL -> SyncScreenType.DUAL\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreen.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport com.nononsenseapps.feeder.db.room.SyncDevice\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Surface\n\r\n@Preview\r\n@Composable\r\nprivate fun PreviewDeviceEntry() {\r\n    FeederTheme {\r\n        Surface {\r\n            DeviceEntry(\r\n                currentDeviceId = 77L,\r\n                device = SyncDevice(deviceId = 1L, deviceName = \"ONEPLUS A6003\"),\r", "choices": [{"text": "//                device = SyncDevice(deviceId = 1L, deviceName = \"ONEPLUS A6003\"),\r\n                onDeviceSelected = {}\r\n            )\r\n        }\r\n    }\r\n}\r\n<file_sep>/app/src/main/java/com/nononsenseapps/feeder/ui/compose/components/DeviceEntry.kt\npackage com.nononsenseapps.feeder.ui.compose.components\n\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx"}], "metadata": {"task_id": "Feeder/302", "ground_truth": "                onDelete = {},\r\n            )\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreen.kt"}}
{"prompt": "\n import java.net.URL\nimport net.glxn.qrgen.core.scheme.Url\nimport com.nononsenseapps.feeder.ui.compose.utils.ImmutableHolder\nimport com.nononsenseapps.feeder.R\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.activity.compose.BackHandler\n\r\n@Composable\r\nfun SyncAddNewDeviceScreen(\r\n    onNavigateUp: () -> Unit,\r\n    syncUrl: ImmutableHolder<URL>,\r\n    modifier: Modifier = Modifier,\r\n    onLeaveSyncChain: () -> Unit,\r\n) {\r\n    BackHandler(onBack = onNavigateUp)\r\n    val scrollState = rememberScrollState()\r\n\r\n    SyncScaffold(\r\n        leaveSyncVisible = false,\r\n        onNavigateUp = onNavigateUp,\r\n        onLeaveSyncChain = onLeaveSyncChain,\r\n        title = stringResource(id = R.string.add_new_device),\r\n        modifier = modifier,\r\n    ) { innerModifier ->\r\n        SyncAddNewDeviceContent(\r", "choices": [{"text": "//            onNavigateUp = onNavigateUp,\r\n            syncUrl = syncUrl,\r\n            modifier = innerModifier,\r\n            scrollState = scrollState,\r\n        )\r\n    }\r\n}\r\n<file_sep>/app/src/main/java/com/nononsenseapps/feeder/ui/compose/screens/sync/SyncAddNewDeviceContent.kt\npackage com.nononsenseapps.feeder.ui.compose.screens.sync\n\nimport android.net.Uri\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose."}], "metadata": {"task_id": "Feeder/303", "ground_truth": "            syncUrl = syncUrl,\r\n            modifier = innerModifier.verticalScroll(scrollState),\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreen.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.tooling.preview.Devices\nimport androidx.compose.runtime.Composable\n\r\n@Preview(\"Scan or Enter Phone\")\r\n@Preview(\"Scan or Enter Small Tablet\", device = Devices.NEXUS_7_2013)\r\n@Composable\r\nprivate fun PreviewJoin() {\r\n    FeederTheme {\r\n        SyncJoinScreen(\r\n            onNavigateUp = {},\r\n            onJoinSyncChain = { _, _ -> },\r\n            syncCode = \"\",\r\n            onSetSyncCode = {},\r\n            onLeaveSyncChain = {},\r", "choices": [{"text": "//            onScanQrCode = {},\r\n            onScanQrCode = { },\r\n            onScanQrCodeFailed = {},\r\n            onScanQrCodeSucceeded = {},\r\n            onScanQrCodeSucceededWithCode = {},\r\n            onScanQrCodeSucceededWithCodeAndName = {},\r\n            onScanQrCodeSucceededWithCodeAndNameAndEmail = {},\r\n            onScanQrCodeSucceededWithCodeAndNameAndEmailAndPhone = {},\r\n            onScanQrCodeSucceededWithCodeAndNameAndEmailAndPhoneAndAddress = {},\r\n            onScanQrCodeSucceededWithCodeAndNameAndEmailAndPhoneAndAddressAndDescription = {},\r\n            onScanQrCode"}], "metadata": {"task_id": "Feeder/304", "ground_truth": "            secretKey = \"\",\r\n            onSetSecretKey = {},\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreen.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.tooling.preview.Devices\nimport androidx.compose.runtime.Composable\n\r\n@Preview(\"Empty Phone\")\r\n@Preview(\"Empty Small Tablet\", device = Devices.NEXUS_7_2013)\r\n@Composable\r\nprivate fun PreviewEmpty() {\r\n    FeederTheme {\r\n        SyncSetupScreen(\r\n            onNavigateUp = {},\r\n            onScanSyncCode = {},\r", "choices": [{"text": "//            onScanSyncCode = {\r\n//                val result =\r\n//                    IntentIntegrator(this).initiateScan()\r\n//                if (result.contents!= null) {\r\n//                    onScanSyncCode(result.contents)\r\n//                }\r\n//            },\r\n            onScanSyncCode = {},\r\n            onScanSyncCode = {},\r\n            onScanSyncCode = {},\r\n            onScanSyncCode = {},\r\n            onScanSyncCode = {},\r\n            onScanSyncCode = {},\r\n            onScanSyncCode = {},\r\n            onScanSyncCode = {},\r\n            onScanSyncCode ="}], "metadata": {"task_id": "Feeder/305", "ground_truth": "            onStartNewSyncChain = {},\r\n            onLeaveSyncChain = {},\r\n        )\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreen.kt"}}
{"prompt": "\n fun setSyncCode(value: String) {\r\n        val possibleUrlCode = value.syncCodeQueryParam\r\n\r\n        val syncCode =\r\n            if (possibleUrlCode.length == 64) {\r\n                possibleUrlCode\r\n            } else {\r\n                value\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/307", "ground_truth": "            }\r\n\r\n        state[\"syncCode\"] = syncCode\r\n        _syncCode.update { syncCode }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreenViewModel.kt"}}
{"prompt": "\nval _secretKey MutableStateFlow<String>\nval repository Repository\nval applicationCoroutineScope ApplicationCoroutineScope\n fun setSecretKey(value: String) {\r\n        val secretKey = value.secretKeyQueryParam\r\n\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Feeder/308", "ground_truth": "        state[\"secretKey\"] = secretKey\r\n        _secretKey.update { secretKey }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreenViewModel.kt"}}
{"prompt": "\nval _screenToShow MutableStateFlow<SyncScreenToShow>\nval rightScreenToShow RightScreenToShow\nval leftScreenToShow LeftScreenToShow\n fun setScreen(value: SyncScreenToShow) {\r", "choices": [{"text": "_screenToShow.value = value\r\n}\n"}], "metadata": {"task_id": "Feeder/309", "ground_truth": "        state[\"syncScreen\"] = value\r\n        _screenToShow.update { value }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreenViewModel.kt"}}
{"prompt": " import kotlinx.coroutines.launch\nval repository Repository\nval leftScreenToShow LeftScreenToShow\nval _syncCode MutableStateFlow<String>\nfun leaveSyncChain() {\r\n        applicationCoroutineScope.launch {\r\n            repository.leaveSyncChain()\r", "choices": [{"text": "}\r\n    }\n"}], "metadata": {"task_id": "Feeder/311", "ground_truth": "            setSyncCode(\"\")\r\n            setSecretKey(\"\")\r\n            setScreen(SyncScreenToShow.SETUP)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreenViewModel.kt"}}
{"prompt": "\nval _syncCode MutableStateFlow<String>\nval applicationCoroutineScope ApplicationCoroutineScope\nval rightScreenToShow RightScreenToShow\n private fun joinedWithSyncCode(\r\n        syncCode: String,\r\n        secretKey: String,\r\n    ) {\r\n        setSyncCode(syncCode)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/313", "ground_truth": "        setSecretKey(secretKey)\r\n        setScreen(SyncScreenToShow.ADD_DEVICE)\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\sync\\SyncScreenViewModel.kt"}}
{"prompt": "\n import androidx.compose.ui.text.SpanStyle\nimport androidx.compose.runtime.Composable\nfun pushComposableStyle(style: @Composable () -> SpanStyle): Int {\r\n        composableStyles.add(\r\n            ComposableStyleWithStartEnd(\r\n                style = style,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/314", "ground_truth": "                start = builder.length,\r\n            ),\r\n        )\r\n        return composableStyles.lastIndex\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\AnnotatedString.kt"}}
{"prompt": " import androidx.compose.runtime.Composable\nval composableStyles\nval poppedComposableStyles\nval builder AnnotatedString.Builder\nfun popComposableStyle(index: Int) {\r\n        poppedComposableStyles.add(\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Feeder/315", "ground_truth": "            composableStyles.removeAt(index).copy(end = builder.length),\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\AnnotatedString.kt"}}
{"prompt": "\nval length Int\nval composableStyles\nval builder AnnotatedString.Builder\n fun append(char: Char) {\r", "choices": [{"text": "val builder AnnotatedString.Builder\nval length Int\nval composableStyles\nval builder AnnotatedString.Builder\n fun append(char: Char, style: Style) {\r\nval builder AnnotatedString.Builder\nval length Int\nval composableStyles\nval builder AnnotatedString.Builder\n fun append(text: String) {\r\nval builder AnnotatedString.Builder\nval length Int\nval composableStyles\nval builder AnnotatedString.Builder\n fun append(text: String, style: Style) {\r\nval builder AnnotatedString.Builder\nval length Int\nval comp"}], "metadata": {"task_id": "Feeder/317", "ground_truth": "        mLastTwoChars.pushMaxTwo(char)\r\n        builder.append(char)\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\AnnotatedString.kt"}}
{"prompt": "\nval mLastTwoChars MutableList<Char>\nval lastTwoChars List<Char>\nval length Int\n private fun CharSequence.secondToLast(): Char {\r\n    if (count() < 2) {\r\n        throw NoSuchElementException(\"List has less than two items.\")\r", "choices": [{"text": "}\r\n    return this[count() - 2]\r\n}\n"}], "metadata": {"task_id": "Feeder/318", "ground_truth": "    }\r\n    return this[lastIndex - 1]\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\AnnotatedString.kt"}}
{"prompt": "\n private fun <T> MutableList<T>.pushMaxTwo(item: T) {\r\n    this.add(0, item)\r\n    if (count() > 2) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/319", "ground_truth": "        this.removeLast()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\AnnotatedString.kt"}}
{"prompt": "\nval mLastTwoChars MutableList<Char>\nval lastTwoChars List<Char>\nval composableStyles\n private fun <T> List<T>.peekSecondLatest(): T? {\r\n    if (count() < 2) {\r\n        return null\r", "choices": [{"text": "}\r\n    return this[count() - 2]\r\n}\n"}], "metadata": {"task_id": "Feeder/320", "ground_truth": "    }\r\n    return this[1]\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\AnnotatedString.kt"}}
{"prompt": "\nval strings\nval result List<AnnotatedString>\n override fun emitParagraph(): Boolean {\r\n        // List items emit dots and non-breaking space. Don't newline after that\r\n        if (builder.isEmpty() || builder.endsWithNonBreakingSpace) {\r\n            // Nothing to emit, and nothing to reset\r\n            return false\r\n        }\r\n\r", "choices": [{"text": ""}], "metadata": {"task_id": "Feeder/321", "ground_truth": "        strings.add(builder.toAnnotatedString())\r\n\r\n        resetAfterEmit()\r\n        return true\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\AnnotatedStringComposer.kt"}}
{"prompt": "\nval strings\nval result List<AnnotatedString>\n fun appendTable(block: () -> Unit) {\r\n        emitParagraph()\r", "choices": [{"text": "block()\r\n        emitParagraph()\r\n    }\n"}], "metadata": {"task_id": "Feeder/322", "ground_truth": "\r\n        block()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\AnnotatedStringComposer.kt"}}
{"prompt": "\n import androidx.compose.runtime.ReadOnlyComposable\nimport androidx.compose.runtime.Composable\nimport android.content.res.Resources\n\r\n@Composable\r\n@ReadOnlyComposable\r\nfun resources(): Resources {\r", "choices": [{"text": "return Resources.getSystem()\r\n}\r\n<file_sep>/android/src/main/java/androidx/compose/ui/text/font/FontFamily.kt\n/*\n * Copyright 2020 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to"}], "metadata": {"task_id": "Feeder/324", "ground_truth": "    LocalConfiguration.current\r\n    return LocalContext.current.resources\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\Extensions.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.ui.compose.theme.LinkTextStyle\nimport androidx.compose.ui.text.SpanStyle\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nprivate fun getSpanStyle(name: String?): SpanStyle? {\r\n    return when (name) {\r\n        \"link\" -> LinkTextStyle().toSpanStyle()\r", "choices": [{"text": "//        \"bold\" -> BoldTextStyle().toSpanStyle()\r\n//        \"italic\" -> ItalicTextStyle().toSpanStyle()\r\n//        \"underline\" -> UnderlineTextStyle().toSpanStyle()\r\n        else -> null\r\n    }\r\n}\r\n<file_sep>/app/src/main/java/com/nononsenseapps/feeder/ui/compose/theme/Typography.kt\npackage com.nononsenseapps.feeder.ui.compose.theme\n\nimport androidx.compose.material.Typography\nimport androidx.compose.ui.text.TextStyle\nimport androidx."}], "metadata": {"task_id": "Feeder/325", "ground_truth": "        else -> null\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\Extensions.kt"}}
{"prompt": "\n protected fun findClosestLink(): String? {\r\n        for (span in spanStack.reversed()) {\r\n            if (span is SpanWithAnnotation && span.tag == \"URL\") {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/326", "ground_truth": "                return span.annotation\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlComposer.kt"}}
{"prompt": "\n import androidx.compose.ui.text.TextStyle\ninline fun <R : Any> HtmlComposer.withTextStyle(\r\n    textStyler: TextStyler,\r\n    crossinline block: HtmlComposer.() -> R,\r\n): R {\r\n    emitParagraph()\r\n    pushTextStyle(textStyler)\r\n    return try {\r\n        block()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/327", "ground_truth": "    } finally {\r\n        emitParagraph()\r\n        popTextStyle()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlComposer.kt"}}
{"prompt": "\nval spanStack MutableList<Span>\nval textStyleStack MutableList<TextStyler>\nvar builder AnnotatedParagraphStringBuilder\n inline fun <R : Any> HtmlParser.withParagraph(crossinline block: HtmlParser.() -> R): R {\r\n    emitParagraph()\r\n    return block(this).also {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/328", "ground_truth": "        emitParagraph()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlComposer.kt"}}
{"prompt": "\n import androidx.compose.ui.text.SpanStyle\ninline fun <R : Any> HtmlParser.withStyle(\r\n    style: SpanStyle?,\r\n    crossinline block: HtmlParser.() -> R,\r\n): R {\r\n    if (style == null) {\r\n        return block()\r\n    }\r\n\r\n    pushSpan(SpanWithStyle(style))\r\n    val index = pushStyle(style)\r\n    return try {\r\n        block()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/329", "ground_truth": "    } finally {\r\n        pop(index)\r\n        popSpan()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlComposer.kt"}}
{"prompt": "\n import androidx.compose.ui.text.SpanStyle\nimport androidx.compose.runtime.Composable\ninline fun <R : Any> HtmlComposer.withComposableStyle(\r\n    noinline style: @Composable () -> SpanStyle,\r\n    crossinline block: HtmlComposer.() -> R,\r\n): R {\r\n    pushSpan(SpanWithComposableStyle(style))\r\n    val index = pushComposableStyle(style)\r\n    return try {\r\n        block()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/330", "ground_truth": "    } finally {\r\n        popComposableStyle(index)\r\n        popSpan()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlComposer.kt"}}
{"prompt": "\n inline fun <R : Any> HtmlParser.withAnnotation(\r\n    tag: String,\r\n    annotation: String,\r\n    crossinline block: HtmlParser.() -> R,\r\n): R {\r\n    pushSpan(SpanWithAnnotation(tag = tag, annotation = annotation))\r\n    val index = pushStringAnnotation(tag = tag, annotation = annotation)\r\n    return try {\r\n        block()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/331", "ground_truth": "    } finally {\r\n        pop(index)\r\n        popSpan()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlComposer.kt"}}
{"prompt": "\n import org.jsoup.nodes.Node\nimport org.jsoup.nodes.Element\nimport androidx.compose.ui.text.AnnotatedString\nprivate fun formatBody(\r\n    element: Element,\r\n    baseUrl: String,\r\n): List<AnnotatedString> {\r\n    val composer = AnnotatedStringComposer()\r\n\r\n    composer.appendTextChildren(\r\n        nodes = element.childNodes(),\r\n        baseUrl = baseUrl,\r\n    )\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/333", "ground_truth": "\r\n    composer.emitParagraph()\r\n\r\n    return composer.result\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToAnnotatedString.kt"}}
{"prompt": "\n import java.io.InputStream\nimport org.jsoup.Jsoup\nimport com.nononsenseapps.feeder.ui.compose.feedarticle.ArticleItemKeyHolder\nimport androidx.compose.runtime.key\nimport androidx.compose.material3.Text\nimport androidx.compose.foundation.lazy.LazyListScope\nfun LazyListScope.htmlFormattedText(\r\n    keyHolder: ArticleItemKeyHolder,\r\n    inputStream: InputStream,\r\n    baseUrl: String,\r\n    onLinkClick: (String) -> Unit,\r\n) {\r\n    try {\r\n        Jsoup.parse(inputStream, null, baseUrl)\r\n            ?.body()\r\n            ?.let { body ->\r\n                formatBody(\r\n                    element = body,\r\n                    baseUrl = baseUrl,\r\n                    keyHolder = keyHolder,\r\n                    onLinkClick = onLinkClick,\r\n                )\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/334", "ground_truth": "            }\r\n    } catch (e: Exception) {\r\n        Log.e(LOG_TAG, \"htmlFormattingFailed\", e)\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": " import org.jsoup.nodes.Element\nval hasImage Boolean\nval notHasImage Boolean\nval url String\nfun isHiddenByCSS(element: Element): Boolean {\r", "choices": [{"text": "return element.hasClass(\"hidden\")\r\n}\n"}], "metadata": {"task_id": "Feeder/335", "ground_truth": "    val style = element.attr(\"style\") ?: \"\"\r\n    return style.contains(\"display:\") && style.contains(\"none\")\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": " import org.jsoup.nodes.Element\nval hasImage Boolean\nval notHasImage Boolean\nval url String\nprivate fun Element.descendants(): Sequence<Element> {\r\n    return sequence {\r", "choices": [{"text": "//        yield(this@descendants)\r\n        yieldAll(this@descendants.children())\r\n        yieldAll(this@descendants.childNodes())\r\n    }\r\n}\r\nprivate fun Element.children(): Sequence<Element> {\r\n    return sequence {\r\n        for (child in children()) {\r\n            yield(child)\r\n            yieldAll(child.children())\r\n        }\r\n    }\r\n}\r\nprivate fun Element.childNodes(): Sequence<Element> {\r\n    return sequence {\r\n        for (child in childNodes()) {\r\n            yield(child)\r\n            yieldAll(child.childNodes())\r\n        }\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/336", "ground_truth": "        children().forEach {\r\n            recursiveSequence(it)\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": " import org.jsoup.nodes.Element\nval hasImage Boolean\nval notHasImage Boolean\nval url String\nprivate suspend fun SequenceScope<Element>.recursiveSequence(element: Element) {\r\n    yield(element)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Feeder/337", "ground_truth": "\r\n    element.children().forEach {\r\n        recursiveSequence(it)\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": "\n import org.jsoup.nodes.Element\nprivate fun Element.notAncestorOf(tagName: String): Boolean {\r\n    var current: Element? = this\r\n\r\n    while (current != null) {\r\n        val parent = current.parent()\r\n\r\n        current =\r\n            when {\r\n                parent == null || parent.tagName() == \"#root\" -> {\r\n                    null\r\n                }\r\n\r\n                parent.tagName() == tagName -> {\r\n                    return false\r\n                }\r\n\r\n                else -> {\r\n                    parent\r\n                }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/338", "ground_truth": "            }\r\n    }\r\n\r\n    return true\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": "\n import androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.BoxWithConstraintsScope\nimport androidx.compose.foundation.layout.BoxWithConstraints\nimport androidx.compose.foundation.layout.Box\n\r\n@Composable\r\nfun BoxWithConstraintsScope.rememberMaxImageWidth() =\r\n    with(LocalDensity.current) {\r\n        remember {\r", "choices": [{"text": "//            val maxImageWidth = 1000f * 16f / 9f\r\n//            val maxImageWidth = 1000f * 16f / 9f\r\n            val maxImageWidth = 1000f * 16f / 9f\r\n            maxImageWidth.toDp()\r\n        }\r\n    }\r\n\r\n@Composable\r\nfun BoxWithConstraintsScope.rememberMaxImageHeight() =\r\n    with(LocalDensity.current) {\r\n        remember {\r\n//            val maxImageHeight = 1000f * 9"}], "metadata": {"task_id": "Feeder/340", "ground_truth": "            derivedStateOf {\r\n                maxWidth.toPx().roundToInt().coerceAtMost(2000)\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": "\n import org.jsoup.nodes.TextNode\nimport org.jsoup.nodes.Node\nimport com.nononsenseapps.feeder.util.asUTF8Sequence\nimport androidx.compose.material3.Text\nfun TextNode.appendCorrectlyNormalizedWhiteSpace(\r\n    builder: HtmlParser,\r\n    stripLeading: Boolean,\r\n) {\r\n    wholeText.asUTF8Sequence()\r\n        .dropWhile {\r\n            stripLeading && isCollapsableWhiteSpace(it)\r\n        }\r\n        .fold(false) { lastWasWhite, char ->\r\n            if (isCollapsableWhiteSpace(char)) {\r\n                if (!lastWasWhite) {\r\n                    builder.append(' ')\r\n                }\r\n                true\r\n            } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/342", "ground_truth": "                builder.append(char)\r\n                false\r\n            }\r\n        }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": "\n import org.jsoup.nodes.TextNode\nimport org.jsoup.nodes.Node\nimport org.jsoup.nodes.Element\nimport com.nononsenseapps.feeder.R\nimport androidx.compose.material3.Text\nfun Element.appendCorrectlyNormalizedWhiteSpaceRecursively(\r\n    builder: HtmlParser,\r\n    stripLeading: Boolean,\r\n) {\r\n    for (child in childNodes()) {\r\n        when (child) {\r\n            is TextNode -> child.appendCorrectlyNormalizedWhiteSpace(builder, stripLeading)\r\n            is Element ->\r\n                child.appendCorrectlyNormalizedWhiteSpaceRecursively(\r\n                    builder,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/343", "ground_truth": "                    stripLeading,\r\n                )\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": "\n fun stripHtml(html: String): String {\r\n    val result = StringBuilder()\r\n\r\n    var skipping = false\r\n\r\n    for (char in html) {\r\n        if (!skipping) {\r\n            if (char == '<') {\r\n                skipping = true\r\n            } else {\r\n                result.append(char)\r\n            }\r\n        } else {\r\n            if (char == '>') {\r\n                skipping = false\r\n            } else {\r\n                // Skipping char\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/344", "ground_truth": "        }\r\n    }\r\n\r\n    return result.toString()\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.ui.compose.feed.PlainTooltipBox\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.foundation.layout.Box\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun WithTooltipIfNotBlank(\r\n    tooltip: String,\r\n    content: @Composable () -> Unit,\r\n) {\r\n    if (tooltip.isNotBlank()) {\r\n        PlainTooltipBox(tooltip = { Text(tooltip) }) {\r\n            content()\r", "choices": [{"text": "       }\r\n    } else {\r\n        content()\r\n    }\r\n}<file_sep>/app/src/main/java/com/nononsenseapps/feeder/ui/compose/feed/FeedItem.kt\npackage com.nononsenseapps.feeder.ui.compose.feed\n\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.shape"}], "metadata": {"task_id": "Feeder/345", "ground_truth": "        }\r\n    } else {\r\n        content()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\HtmlToComposable.kt"}}
{"prompt": "\n import androidx.compose.runtime.Composable\noverride fun appendImage(\r\n        link: String?,\r\n        onLinkClick: (String) -> Unit,\r\n        block: @Composable (() -> Unit) -> Unit,\r\n    ) {\r\n        emitParagraph()\r\n\r\n        val url = link ?: findClosestLink()\r\n        val onClick: (() -> Unit) =\r\n            when {\r\n                url?.isNotBlank() == true -> {\r\n                    {\r\n                        onLinkClick(url)\r\n                    }\r\n                }\r\n                else -> {\r\n                    {}\r\n                }\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/346", "ground_truth": "\r\n        item(keyHolder = keyHolder) {\r\n            block(onClick)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\LazyListComposer.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.ui.compose.feedarticle.ArticleItemKeyHolder\nimport androidx.compose.runtime.Composable\nfun item(\r\n        keyHolder: ArticleItemKeyHolder,\r\n        block: @Composable () -> Unit,\r\n    ) {\r\n        lazyListScope.item(key = keyHolder.getAndIncrementKey()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/347", "ground_truth": "            block()\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\text\\LazyListComposer.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.archmodel.ThemeOptions\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nprivate fun ThemeOptions.isDarkSystemIcons(): Boolean {\r\n    val isDarkTheme =\r\n        when (this) {\r\n            ThemeOptions.DAY,\r\n            ThemeOptions.E_INK,\r\n            -> false\r\n            ThemeOptions.NIGHT -> true\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/349", "ground_truth": "            ThemeOptions.SYSTEM -> isSystemInDarkTheme()\r\n        }\r\n\r\n    return !isDarkTheme\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\theme\\Theme.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.archmodel.ThemeOptions\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.runtime.Composable\nimport android.os.Build\n\r\n@Composable\r\nprivate fun ThemeOptions.getNavBarColor(): Color {\r\n    // Api 29 handles transparency\r\n    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n        Color.Transparent\r\n    } else if (isDarkNavIcons()) {\r", "choices": [{"text": "//        Color(0xFF, 0xFF, 0xFF, 0x00)\r\n        Color.Black\r\n    } else {\r\n        Color.White\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ThemeOptions.getNavBarTextColor(): Color {\r\n    return if (isDarkNavIcons()) {\r\n        Color.White\r\n    } else {\r\n        Color.Black\r\n    }\r\n}\r\n\r\n@Composable\r\nprivate fun ThemeOptions.getNavBarIconColor(): Color {\r\n    return if (isDarkNavIcons()) {\r\n        Color.White\r\n    } else {\r\n        Color.Black\r\n    }\r\n}"}], "metadata": {"task_id": "Feeder/351", "ground_truth": "        NavBarScrimLight\r\n    } else {\r\n        NavBarScrimDark\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\theme\\Theme.kt"}}
{"prompt": "\n import androidx.compose.ui.text.TextStyle\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun LinkTextStyle(): TextStyle =\r\n    TextStyle(\r", "choices": [{"text": "//        color = Color.Blue,\r\n        fontSize = 16.sp,\r\n        fontWeight = FontWeight.Bold,\r\n        fontFamily = FontFamily.Default\r\n    )<file_sep>/app/src/main/java/com/example/compose/ui/theme/Color.kt\npackage com.example.compose.ui.theme\n\nimport androidx.compose.ui.graphics.Color\n\nval Purple200 = Color(0xFFBB86FC)\nval Purple500 = Color(0xFF6200EE)\nval Purple700 = Color(0xFF"}], "metadata": {"task_id": "Feeder/352", "ground_truth": "        color = MaterialTheme.colorScheme.primary,\r\n        textDecoration = TextDecoration.Underline,\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\theme\\Typography.kt"}}
{"prompt": " import androidx.compose.ui.text.font.FontWeight\nval materialTypography\nval typography Typography\nfun titleFontWeight(unread: Boolean) =\r\n    if (unread) {\r\n        FontWeight.Black\r", "choices": [{"text": "} else {\r\n        FontWeight.Normal\r\n}\n"}], "metadata": {"task_id": "Feeder/353", "ground_truth": "    } else {\r\n        FontWeight.Normal\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\theme\\Typography.kt"}}
{"prompt": "\n import androidx.compose.ui.text.TextStyle\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\n\r\n@Composable\r\nfun FeedListItemSnippetTextStyle(): TextStyle =\r\n    MaterialTheme.typography.titleSmall.merge(\r", "choices": [{"text": "//        MaterialTheme.typography.bodyMedium.copy(\r\n//            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.5f)\r\n//        )\r\n    )\r\n<file_sep>/app/src/main/java/com/example/androiddevchallenge/ui/theme/Color.kt\n/*\n * Copyright 2021 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy"}], "metadata": {"task_id": "Feeder/355", "ground_truth": "        TextStyle(\r\n            lineBreak = LineBreak.Paragraph,\r\n            hyphens = Hyphens.Auto,\r\n        ),\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\theme\\Typography.kt"}}
{"prompt": "\n import androidx.compose.ui.text.SpanStyle\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun CodeInlineStyle(): SpanStyle =\r\n    SpanStyle(\r", "choices": [{"text": "//        color = Color.Blue,\r\n        fontSize = 12.sp,\r\n        fontFamily = FontFamily.Monospace,\r\n        fontWeight = FontWeight.Normal,\r\n        fontStyle = FontStyle.Italic,\r\n        letterSpacing = 0.sp,\r\n        textDecoration = TextDecoration.Underline\r\n    )\r\n<file_sep>/app/src/main/java/com/example/compose/ui/theme/Color.kt\npackage com.example.compose.ui.theme\n\nimport androidx.compose.ui.graphics.Color\n\nval Purple200 = Color(0xFFBB86FC)\n"}], "metadata": {"task_id": "Feeder/356", "ground_truth": "        background = CodeBlockBackground(),\r\n        fontFamily = FontFamily.Monospace,\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\theme\\Typography.kt"}}
{"prompt": "\n import androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.SpanStyle\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\n\r\n@Composable\r\nfun CodeBlockStyle(): TextStyle =\r\n    MaterialTheme.typography.bodyMedium.merge(\r\n        SpanStyle(\r", "choices": [{"text": "//            color = MaterialTheme.colorScheme.primary,\r\n            color = Color.Black,\r\n            fontSize = 14.sp,\r\n            fontWeight = FontWeight.Normal,\r\n            fontStyle = FontStyle.Normal,\r\n            fontFamily = FontFamily.Monospace\r\n        )\r\n    )\r\n<file_sep>/app/src/main/java/com/example/androiddevchallenge/ui/theme/Color.kt\n/*\n * Copyright 2021 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in"}], "metadata": {"task_id": "Feeder/357", "ground_truth": "            fontFamily = FontFamily.Monospace,\r\n        ),\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\theme\\Typography.kt"}}
{"prompt": "\n import androidx.compose.ui.text.SpanStyle\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\n\r\n@Composable\r\nfun BlockQuoteStyle(): SpanStyle =\r\n    MaterialTheme.typography.bodyLarge.toSpanStyle().merge(\r\n        SpanStyle(\r", "choices": [{"text": "//            color = Color.Blue,\r\n            textDecoration = TextDecoration.Underline\r\n        )\r\n    )\r\n<file_sep>/app/src/main/java/com/example/compose/ui/theme/Color.kt\npackage com.example.compose.ui.theme\n\nimport androidx.compose.ui.graphics.Color\n\nval Purple200 = Color(0xFFBB86FC)\nval Purple500 = Color(0xFF6200EE)\nval Purple700 = Color(0xFF3700B3)\nval Teal20"}], "metadata": {"task_id": "Feeder/358", "ground_truth": "            fontWeight = FontWeight.Light,\r\n        ),\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\theme\\Typography.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.ui.compose.theme.FeederTheme\nimport com.nononsenseapps.feeder.archmodel.ThemeOptions\nimport androidx.compose.ui.unit.DpSize\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.windowsizeclass.WindowSizeClass\nimport androidx.compose.material3.windowsizeclass.ExperimentalMaterial3WindowSizeClassApi\nimport androidx.compose.material3.Surface\n\r\n@OptIn(ExperimentalMaterial3WindowSizeClassApi::class)\r\n@Composable\r\nfun withAllPreviewProviders(\r\n    currentTheme: ThemeOptions = ThemeOptions.DAY,\r\n    content: @Composable () -> Unit\r\n) {\r\n    FeederTheme(currentTheme = currentTheme) {\r\n        val dm = LocalContext.current.resources.displayMetrics\r\n        val dpSize = with(LocalDensity.current) {\r\n            DpSize(\r\n                dm.widthPixels.toDp(),\r\n                dm.heightPixels.toDp()\r\n            )\r\n        }\r\n        withPreviewWindowSize(WindowSizeClass.calculateFromSize(dpSize)) {\r\n            Surface {\r", "choices": [{"text": "//                val theme = LocalTheme.current\r\n//                val typography = theme.typography\r\n//                val colors = theme.colors\r\n//                val shapes = theme.shapes\r\n//                val typography = theme.typography\r\n//                val colors = theme.colors\r\n//                val shapes = theme.shapes\r\n//                val typography = theme.typography\r\n//                val colors = theme.colors\r\n//                val shapes = theme.shapes\r\n//                val typography = theme.typography\r\n//                val colors = theme.colors\r\n//               "}], "metadata": {"task_id": "Feeder/360", "ground_truth": "                content()\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\ComposeProviders.kt"}}
{"prompt": "\n import org.kodein.di.compose.LocalDI\nimport com.nononsenseapps.feeder.ApplicationCoroutineScope\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun rememberApplicationCoroutineScope(): ApplicationCoroutineScope {\r\n    val di = LocalDI.current\r\n    return remember {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/361", "ground_truth": "        di.direct.instance<ApplicationCoroutineScope>()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\DIUtils.kt"}}
{"prompt": "\n import org.kodein.di.instance\nimport org.kodein.di.compose.LocalDI\nimport com.nononsenseapps.feeder.util.ActivityLauncher\nimport androidx.compose.ui.platform.TextToolbar\nimport androidx.compose.ui.platform.LocalView\nimport androidx.compose.ui.platform.LocalTextToolbar\nimport androidx.compose.runtime.CompositionLocalProvider\nimport androidx.compose.runtime.Composable\nimport android.view.View\n\r\n@Composable\r\nfun WithFeederTextToolbar(content: @Composable () -> Unit) {\r\n    val activityLauncher: ActivityLauncher by LocalDI.current.instance()\r\n    CompositionLocalProvider(LocalTextToolbar provides FeederTextToolbar(LocalView.current, activityLauncher)) {\r", "choices": [{"text": "//        TextToolbar(LocalView.current) {\r\n//            content()\r\n//        }\r\n        content()\r\n    }\r\n}\r\n<file_sep>/app/src/main/java/com/nononsenseapps/feeder/ui/feed/FeederFeed.kt\npackage com.nononsenseapps.feeder.ui.feed\n\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx."}], "metadata": {"task_id": "Feeder/362", "ground_truth": "        content()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\FeederTextToolbar.kt"}}
{"prompt": " import androidx.compose.ui.platform.TextToolbarStatus\nimport androidx.compose.ui.platform.TextToolbar\nvar status TextToolbarStatus\nval clipboardManager\nval displayNameComparator\noverride fun hide() {\r\n        status = TextToolbarStatus.Hidden\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Feeder/363", "ground_truth": "        actionMode?.finish()\r\n        actionMode = null\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\FeederTextToolbar.kt"}}
{"prompt": "\n import android.view.MenuItem\nimport android.view.Menu\nimport android.view.ActionMode\noverride fun onPrepareActionMode(\r\n        mode: ActionMode?,\r\n        menu: Menu?,\r\n    ): Boolean {\r\n        if (mode == null || menu == null) return false\r\n        updateMenuItems(menu)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/364", "ground_truth": "        // should return true so that new menu items are populated\r\n        return true\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\FeederTextToolbar.kt"}}
{"prompt": "\n import android.view.MenuItem\nimport android.view.Menu\nprivate fun updateMenuItems(menu: Menu) {\r\n        addOrRemoveMenuItem(menu, MenuItemOption.Copy, onCopyRequested)\r\n        addOrRemoveMenuItem(menu, MenuItemOption.Paste, onPasteRequested)\r\n        addOrRemoveMenuItem(menu, MenuItemOption.Cut, onCutRequested)\r\n        addOrRemoveMenuItem(menu, MenuItemOption.SelectAll, onSelectAllRequested)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Feeder/365", "ground_truth": "        onCopyRequested?.let {\r\n            // Depends on copy/paste\r\n            addTextProcessors(menu)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\FeederTextToolbar.kt"}}
{"prompt": "\n import android.view.MenuItem\nimport android.view.Menu\nprivate fun addOrRemoveMenuItem(\r\n        menu: Menu,\r\n        item: MenuItemOption,\r\n        callback: (() -> Unit)?,\r\n    ) {\r\n        when {\r\n            callback != null && menu.findItem(item.id) == null -> addMenuItem(menu, item)\r", "choices": [{"text": "\n import android.view.MenuItem\nimport android.view.Menu\nprivate fun addOrRemoveMenuItem(\r\n        menu: Menu,\r\n        item: MenuItemOption,\r\n        callback: (() -> Unit)?,\r\n    ) {\r\n        when {\r\n            callback!= null && menu.findItem(item.id) == null -> addMenuItem(menu, item)\r\n//            callback == null && menu.findItem(item.id)!= null -> removeMenuItem(menu, item)\r\n        }\r\n    }\r\nprivate fun addMenuItem(\r\n        menu: Menu,\r\n        item: MenuItemOption,\r\n    ) {\r\n        menu.add(item.groupId, item.id, item.order, item.title).apply {\r\n            setOnMenuItemClickListener {\r\n                item.callback?.invoke()\r\n                true\r\n            }\r\n        }\r\n    }\r\nprivate fun removeMenuItem(\r\n        menu: Menu,\r\n        item: MenuItemOption,\r\n    ) {\r\n        menu.removeItem(item.id)\r\n    }\r"}], "metadata": {"task_id": "Feeder/367", "ground_truth": "            callback == null && menu.findItem(item.id) != null -> menu.removeItem(item.id)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\FeederTextToolbar.kt"}}
{"prompt": "\n import androidx.compose.ui.geometry.Rect\nimport android.view.View\nimport android.view.ActionMode\noverride fun onGetContentRect(\r\n        mode: ActionMode?,\r\n        view: View?,\r\n        outRect: android.graphics.Rect?,\r\n    ) {\r\n        val rect = callback.rect\r\n        outRect?.set(\r\n            rect.left.toInt(),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/368", "ground_truth": "            rect.top.toInt(),\r\n            rect.right.toInt(),\r\n            rect.bottom.toInt(),\r\n        )\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\FeederTextToolbar.kt"}}
{"prompt": "\n import androidx.compose.ui.platform.debugInspectorInfo\nimport androidx.compose.ui.input.key.onKeyEvent\nimport androidx.compose.ui.input.key.key\nimport androidx.compose.ui.input.key.Key\nimport androidx.compose.ui.composed\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.ExperimentalComposeUiApi\n\r\n@OptIn(ExperimentalComposeUiApi::class)\r\nfun Modifier.onKeyEventLikeEscape(action: () -> Unit) =\r\n    composed(\r\n        inspectorInfo =\r\n            debugInspectorInfo {\r\n                name = \"onEscapeLikeKeyPress\"\r\n                properties[\"action\"] = action\r\n            },\r\n    ) {\r\n        onKeyEvent {\r\n            when (it.key) {\r\n                Key.Escape, Key.Back, Key.NavigateOut -> {\r\n                    action()\r\n                    true\r\n                }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/369", "ground_truth": "\r\n                else -> false\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\Focusable.kt"}}
{"prompt": "\n import com.google.accompanist.adaptive.calculateDisplayFeatures\nimport androidx.window.layout.FoldingFeature\nimport androidx.compose.ui.graphics.toComposeRect\nimport androidx.compose.runtime.Composable\nimport android.app.Activity\n\r\n@Composable\r\nfun Activity.withFoldableHinge(content: @Composable () -> Unit) {\r\n    val displayFeatures = calculateDisplayFeatures(this)\r\n    val fold =\r\n        displayFeatures.find {\r\n            it is FoldingFeature\r\n        } as FoldingFeature?\r\n\r\n    val foldableHinge =\r\n        fold?.let {\r\n            FoldableHinge(it.bounds.toComposeRect())\r\n        }\r", "choices": [{"text": "}\r\n<file_sep>/app/src/main/java/com/example/android/compose/hinge/MainActivity.kt\n/*\n * Copyright 2020 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under"}], "metadata": {"task_id": "Feeder/371", "ground_truth": "\r\n    CompositionLocalProvider(LocalFoldableHinge provides foldableHinge) {\r\n        content()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\Foldables.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.distinctUntilChanged\nimport androidx.compose.runtime.snapshotFlow\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.State\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.lazy.LazyListState\n\r\n@Composable\r\nfun LazyListState.rememberIsItemVisible(key: Any): State<Boolean> {\r\n    val isVisible =\r\n        remember {\r\n            mutableStateOf(layoutInfo.visibleItemsInfo.any { it.key == key })\r\n        }\r\n    LaunchedEffect(this, key) {\r\n        snapshotFlow {\r\n            layoutInfo.visibleItemsInfo.any { it.key == key }\r\n        }\r\n            .distinctUntilChanged()\r\n            .collect {\r", "choices": [{"text": "\n import kotlinx.coroutines.flow.distinctUntilChanged\nimport androidx.compose.runtime.snapshotFlow\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.State\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.lazy.LazyListState\n\r\n@Composable\r\nfun LazyListState.rememberIsItemVisible(key: Any): State<Boolean> {\r\n    val isVisible =\r\n        remember {\r\n            mutableStateOf(layoutInfo.visibleItemsInfo.any { it.key == key })\r\n        }\r\n    LaunchedEffect(this, key) {\r\n        snapshotFlow {\r\n            layoutInfo.visibleItemsInfo.any { it.key == key }\r\n        }\r\n           .distinctUntilChanged()\r\n           .collect {\r\n//                Log.d(\"LazyListState\", \"rememberIsItemVisible: $isVisible\")\r\n                isVisible.value = it\r\n            }\r\n    }\r\n    return isVisible\r\n}<file_sep>/app/src/main/java/com/example/compose/ui/theme/Color.kt\npackage com.example.compose.ui.theme\n\nimport androidx.compose.ui.graphics.Color\n\nval Purple200 = Color(0xFFBB86FC)\nval Purple500 = Color(0xFF6200EE)\nval Purple700 ="}], "metadata": {"task_id": "Feeder/372", "ground_truth": "                isVisible.value = it\r\n            }\r\n    }\r\n    return isVisible\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\LazyList.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.distinctUntilChanged\nimport androidx.compose.runtime.snapshotFlow\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.State\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState\nimport androidx.compose.foundation.ExperimentalFoundationApi\n\r\n@OptIn(ExperimentalFoundationApi::class)\r\n@Composable\r\nfun LazyStaggeredGridState.rememberIsItemVisible(key: Any): State<Boolean> {\r\n    val isVisible =\r\n        remember {\r\n            mutableStateOf(layoutInfo.visibleItemsInfo.any { it.key == key })\r\n        }\r\n    LaunchedEffect(this, key) {\r\n        snapshotFlow {\r\n            layoutInfo.visibleItemsInfo.any { it.key == key }\r\n        }\r\n            .distinctUntilChanged()\r\n            .collect {\r", "choices": [{"text": "\n import kotlinx.coroutines.flow.distinctUntilChanged\nimport androidx.compose.runtime.snapshotFlow\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.State\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.lazy.staggeredgrid.LazyStaggeredGridState\nimport androidx.compose.foundation.ExperimentalFoundationApi\n\r\n@OptIn(ExperimentalFoundationApi::class)\r\n@Composable\r\nfun LazyStaggeredGridState.rememberIsItemVisible(key: Any): State<Boolean> {\r\n    val isVisible =\r\n        remember {\r\n            mutableStateOf(layoutInfo.visibleItemsInfo.any { it.key == key })\r\n        }\r\n    LaunchedEffect(this, key) {\r\n        snapshotFlow {\r\n            layoutInfo.visibleItemsInfo.any { it.key == key }\r\n        }\r\n           .distinctUntilChanged()\r\n           .collect {\r\n//                Log.d(\"LazyStaggeredGridState\", \"isVisible: $it\")\r\n                isVisible.value = it\r\n            }\r\n    }\r\n    return isVisible\r\n}<file_sep>/app/src/main/java/com/example/compose/ui/theme/Color.kt\npackage com.example.compose.ui.theme\n\nimport androidx.compose.ui.graphics.Color\n\nval Purple200 = Color(0xFFBB86FC)\nval Purple500 = Color(0xFF6200EE)\nval Purple700 ="}], "metadata": {"task_id": "Feeder/373", "ground_truth": "                isVisible.value = it\r\n            }\r\n    }\r\n    return isVisible\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\LazyList.kt"}}
{"prompt": "\n import kotlin.reflect.KProperty\nimport androidx.compose.runtime.getValue\noperator fun getValue(\r\n        thisRef: Any?,\r\n        property: KProperty<*>,\r\n    ): T {\r\n        if (!initialized) {\r\n            value = savedStateHandle[property.name] ?: value\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/375", "ground_truth": "            initialized = true\r\n            onChange?.invoke(value)\r\n        }\r\n        return value\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\MutableSavedState.kt"}}
{"prompt": " import kotlin.reflect.KProperty\nimport androidx.compose.runtime.setValue\nvar initialized Boolean\nvar value T\noperator fun setValue(\r\n        thisRef: Any?,\r\n        property: KProperty<*>,\r\n        value: T,\r\n    ) {\r\n        savedStateHandle[property.name] = value\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Feeder/376", "ground_truth": "        this.value = value\r\n        onChange?.invoke(value)\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\MutableSavedState.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.ui.compose.theme.LocalTypographySettings\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.ProvideTextStyle\n\r\n@Composable\r\nfun ProvideScaledText(\r\n    style: TextStyle,\r\n    content: @Composable () -> Unit,\r\n) {\r\n    val typographySettings = LocalTypographySettings.current\r\n\r\n    ProvideTextStyle(\r\n        style.merge(\r\n            TextStyle(\r\n                fontSize = style.fontSize * typographySettings.fontScale,\r\n                lineHeight = style.lineHeight * typographySettings.fontScale,\r\n            ),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/378", "ground_truth": "        ),\r\n    ) {\r\n        content()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\ProvideScaledText.kt"}}
{"prompt": "\n import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.foundation.layout.add\nimport androidx.compose.foundation.layout.WindowInsets\nfun WindowInsets.addMargin(\r\n    vertical: Dp = 0.dp,\r\n    horizontal: Dp = 0.dp,\r\n) = addMargin(\r\n    left = horizontal,\r\n    right = horizontal,\r", "choices": [{"text": ")\n"}], "metadata": {"task_id": "Feeder/379", "ground_truth": "    top = vertical,\r\n    bottom = vertical,\r\n)", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\WindowInsets.kt"}}
{"prompt": "\n import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.LayoutDirection\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.platform.LocalLayoutDirection\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.add\nimport androidx.compose.foundation.layout.WindowInsets\n\r\n@Composable\r\nfun WindowInsets.addMarginLayout(\r\n    start: Dp = 0.dp,\r\n    end: Dp = 0.dp,\r\n    top: Dp = 0.dp,\r\n    bottom: Dp = 0.dp,\r\n): WindowInsets {\r\n    val layoutDirection = LocalLayoutDirection.current\r\n    return addMargin(\r\n        left =\r\n            when (layoutDirection) {\r\n                LayoutDirection.Ltr -> start\r\n                LayoutDirection.Rtl -> end\r\n            },\r\n        right =\r\n            when (layoutDirection) {\r\n                LayoutDirection.Ltr -> end\r\n                LayoutDirection.Rtl -> start\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/380", "ground_truth": "            },\r\n        top = top,\r\n        bottom = bottom,\r\n    )\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\WindowInsets.kt"}}
{"prompt": "\n import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.foundation.layout.add\nimport androidx.compose.foundation.layout.WindowInsets\nfun WindowInsets.addMargin(\r\n    left: Dp = 0.dp,\r\n    right: Dp = 0.dp,\r\n    top: Dp = 0.dp,\r\n    bottom: Dp = 0.dp,\r\n) = add(\r\n    WindowInsets(\r\n        left = left,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/381", "ground_truth": "        right = right,\r\n        top = top,\r\n        bottom = bottom,\r\n    ),\r\n)", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\WindowInsets.kt"}}
{"prompt": "\n import androidx.compose.runtime.Composable\nimport androidx.compose.material3.windowsizeclass.calculateWindowSizeClass\nimport androidx.compose.material3.windowsizeclass.WindowSizeClass\nimport androidx.compose.material3.windowsizeclass.ExperimentalMaterial3WindowSizeClassApi\nimport android.app.Activity\n\r\n@OptIn(ExperimentalMaterial3WindowSizeClassApi::class)\r\n@Composable\r\nfun Activity.withWindowSize(content: @Composable () -> Unit) {\r\n    val windowSizeclass = calculateWindowSizeClass(activity = this)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Feeder/382", "ground_truth": "\r\n    CompositionLocalProvider(LocalWindowSize provides windowSizeclass) {\r\n        content()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\WindowSize.kt"}}
{"prompt": "\n import androidx.compose.runtime.CompositionLocalProvider\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.windowsizeclass.WindowSizeClass\n\r\n@Composable\r\nfun withPreviewWindowSize(windowSizeclass: WindowSizeClass, content: @Composable () -> Unit) {\r\n    CompositionLocalProvider(LocalWindowSize provides windowSizeclass) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/383", "ground_truth": "        content()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\WindowSize.kt"}}
{"prompt": "\n import androidx.compose.material3.windowsizeclass.WindowSizeClass\nfun getScreenType(windowSize: WindowSizeClass) =\r\n    when (windowSize.widthSizeClass) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/386", "ground_truth": "        WindowWidthSizeClass.Compact -> ScreenType.SINGLE\r\n        else -> ScreenType.DUAL\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\WindowSize.kt"}}
{"prompt": "\n import androidx.compose.runtime.Immutable\nfun <T> immutableListHolderOf(vararg elements: T): ImmutableHolder<List<T>> =\r", "choices": [{"text": "immutableListHolderOf(*elements)\r\nfun <T> immutableListHolderOf(elements: Iterable<T>): ImmutableHolder<List<T>> =\r\nimmutableListHolderOf(elements.toList())\r\nfun <T> immutableListHolderOf(elements: Sequence<T>): ImmutableHolder<List<T>> =\r\nimmutableListHolderOf(elements.toList())\r\nfun <T> immutableListHolderOf(elements: Array<T>): ImmutableHolder<List<T>> =\r\nimmutableListHolderOf(elements.toList())\r\nfun <T> immutableListHolderOf(elements"}], "metadata": {"task_id": "Feeder/387", "ground_truth": "    ImmutableHolder(\r\n        listOf(*elements),\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\Wrapper.kt"}}
{"prompt": "\n import androidx.compose.runtime.Stable\nfun <T> stableListHolderOf(vararg elements: T): StableHolder<List<T>> =\r", "choices": [{"text": "StableHolder(elements.toList())\r\n"}], "metadata": {"task_id": "Feeder/388", "ground_truth": "    StableHolder(\r\n        listOf(*elements),\r\n    )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\compose\\utils\\Wrapper.kt"}}
{"prompt": "\nval notificationsWorker NotificationsWorker\nval mainActivityViewModel MainActivityViewModel\nval LOG_TAG\n override fun onStart() {\r", "choices": [{"text": "super.onStart()\r\nmainActivityViewModel.getNotifications().observe(this, Observer {\r\nnotificationsAdapter.submitList(it)\r\n})\r\n}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nnotificationsAdapter = NotificationsAdapter()\r\nnotificationsRecyclerView.adapter = notificationsAdapter\r\nnotificationsRecyclerView.layoutManager = LinearLayoutManager(this)\r\nnotificationsRecyclerView.addItemDecoration(DividerItemDecoration(this, DividerItemDecoration.VERTICAL))\r\n}\r\n}\r\n}\r"}], "metadata": {"task_id": "Feeder/389", "ground_truth": "        super.onStart()\r\n        notificationsWorker.runForever()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\MainActivity.kt"}}
{"prompt": "\nval notificationsWorker NotificationsWorker\nval mainActivityViewModel MainActivityViewModel\nval LOG_TAG\n override fun onStop() {\r", "choices": [{"text": "super.onStop()\r\nmainActivityViewModel.onStop()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nmainActivityViewModel.onDestroy()\r\n}\r\noverride fun onPause() {\r\nsuper.onPause()\r\nmainActivityViewModel.onPause()\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nmainActivityViewModel.onResume()\r\n}\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\nsuper.onActivityResult"}], "metadata": {"task_id": "Feeder/390", "ground_truth": "        notificationsWorker.stopForever()\r\n        super.onStop()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\MainActivity.kt"}}
{"prompt": "\nval notificationsWorker NotificationsWorker\nval mainActivityViewModel MainActivityViewModel\nval LOG_TAG\n override fun onResume() {\r\n        super.onResume()\r\n        mainActivityViewModel.setResumeTime()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Feeder/391", "ground_truth": "        scheduleGetUpdates(di)\r\n        maybeRequestSync()\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\MainActivity.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.nononsenseapps.feeder.model.workmanager.requestFeedSync\nimport androidx.lifecycle.lifecycleScope\nprivate fun maybeRequestSync() =\r\n        lifecycleScope.launch {\r\n            if (mainActivityViewModel.shouldSyncOnResume) {\r\n                if (mainActivityViewModel.isOkToSyncAutomatically()) {\r\n                    requestFeedSync(\r\n                        di = di,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/392", "ground_truth": "                        forceNetwork = false,\r\n                    )\r\n                }\r\n            }\r\n        }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\MainActivity.kt"}}
{"prompt": "\n import androidx.core.view.WindowCompat\nimport androidx.activity.compose.setContent\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        installExceptionHandler()\r\n\r\n        mainActivityViewModel.ensurePeriodicSyncConfigured()\r\n\r\n        WindowCompat.setDecorFitsSystemWindows(window, false)\r\n\r\n        setContent {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/393", "ground_truth": "            withAllProviders {\r\n                AppContent()\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\MainActivity.kt"}}
{"prompt": "\nval repository Repository\nval context Application\nval shouldSyncOnResume Boolean\n fun ensurePeriodicSyncConfigured() =\r", "choices": [{"text": ""}], "metadata": {"task_id": "Feeder/394", "ground_truth": "        viewModelScope.launch {\r\n            repository.ensurePeriodicSyncConfigured()\r\n        }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\MainActivityViewModel.kt"}}
{"prompt": "\nval repository Repository\n fun setCurrentFeedAndTag(\r\n        feedId: Long,\r\n        tag: String,\r\n    ) {\r\n        repository.setCurrentFeedAndTag(feedId, tag)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Feeder/396", "ground_truth": "        // Should open feed in portrait\r\n        repository.setIsArticleOpen(false)\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\NavigationDeepLinkViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun markAsNotifiedInBackground(itemIds: List<Long>) {\r\n        viewModelScope.launch {\r", "choices": [{"text": "//            val itemIds = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n            val items = itemIds.map {\r\n                Item(\r\n                    id = it,\r\n                    isNotified = true\r\n                )\r\n            }\r\n            itemRepository.updateItems(items)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Feeder/398", "ground_truth": "            repository.markAsNotified(itemIds)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\OpenLinkInDefaultActivityViewModel.kt"}}
{"prompt": " import org.xml.sax.SAXException\nvar lastImageAlt String?\nval ignoredTags\nval listings\n @Throws(SAXException::class)\r\n    override fun endDocument() {\r\n        // See test mentioning XKCD\r\n        if (builder?.isEmpty() == true) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/399", "ground_truth": "            lastImageAlt?.let {\r\n                builder?.append(\"[$lastImageAlt]\")\r\n            }\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\text\\HtmlToPlainTextConverter.kt"}}
{"prompt": " import org.xml.sax.Attributes\nval parser Parser\nval listings\nval isOrderedList Boolean\nprivate fun startImg(\r\n        text: StringBuilder?,\r\n        attributes: Attributes,\r\n    ) {\r\n        // Ensure whitespace\r\n        ensureSpace(text)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/400", "ground_truth": "\r\n        lastImageAlt = attributes.getValue(\"\", \"alt\").orEmpty().ifBlank { \"IMG\" }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\text\\HtmlToPlainTextConverter.kt"}}
{"prompt": "\n private fun startOl(text: StringBuilder?) {\r\n        // Start lists with linebreak\r\n        val len = text!!.length\r\n        if (len > 0 && text[len - 1] != '\\n') {\r\n            text.append(\"\\n\")\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/401", "ground_truth": "        }\r\n\r\n        // Remember list type\r\n        listings.push(Listing(true))\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\text\\HtmlToPlainTextConverter.kt"}}
{"prompt": "\n private fun startLi(builder: StringBuilder?) {\r\n        builder!!.append(repeated(\"  \", listings.size - 1))\r\n        if (isOrderedList) {\r\n            val listing = listings.peek()\r\n            builder.append(\"\").append(listing.number).append(\". \")\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/402", "ground_truth": "            listing.number = listing.number + 1\r\n        } else {\r\n            builder.append(\"* \")\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\text\\HtmlToPlainTextConverter.kt"}}
{"prompt": "\n private fun startUl(text: StringBuilder?) {\r\n        // Start lists with linebreak\r\n        val len = text!!.length\r\n        if (len > 0 && text[len - 1] != '\\n') {\r\n            text.append(\"\\n\")\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/404", "ground_truth": "        }\r\n\r\n        // Remember list type\r\n        listings.push(Listing(false))\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\text\\HtmlToPlainTextConverter.kt"}}
{"prompt": "\n private fun ensureSpace(text: StringBuilder?) {\r\n        val len = text!!.length\r\n        if (len != 0) {\r\n            val c = text[len - 1]\r\n            // Non-breaking space (160) is not caught by trim or whitespace identification\r\n            if (Character.isWhitespace(c) || c.code == 160) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/405", "ground_truth": "                return\r\n            }\r\n            text.append(\" \")\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\text\\HtmlToPlainTextConverter.kt"}}
{"prompt": "\n fun repeated(\r\n    string: String,\r\n    count: Int,\r\n): String {\r\n    val sb = StringBuilder()\r\n\r\n    for (i in 0 until count) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/406", "ground_truth": "        sb.append(string)\r\n    }\r\n\r\n    return sb.toString()\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\text\\HtmlToPlainTextConverter.kt"}}
{"prompt": "\n fun getVideo(src: String?): Video? {\r\n    return src?.let {\r\n        YoutubeIdPattern.find(src)?.let { match ->\r\n            val videoId = match.groupValues[1]\r\n            Video(\r\n                src = src,\r\n                imageUrl = \"http://img.youtube.com/vi/$videoId/hqdefault.jpg\",\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/407", "ground_truth": "                link = \"https://www.youtube.com/watch?v=$videoId\",\r\n            )\r\n        }\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\ui\\text\\VideoTagHunter.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.R\nimport android.os.Build\nimport android.content.Intent\nprivate fun Intent.openAdjacentIfSuitable(openAdjacentIfSuitable: Boolean): Intent {\r\n        return if (openAdjacentIfSuitable &&\r\n            Build.VERSION.SDK_INT >= Build.VERSION_CODES.N &&\r\n            configuration.smallestScreenWidthDp >= 600 &&\r\n            repository.isOpenAdjacent.value\r\n        ) {\r\n            addFlags(\r\n                Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT or Intent.FLAG_ACTIVITY_NEW_TASK,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/408", "ground_truth": "            )\r\n        } else {\r\n            this\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\ActivityLauncher.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.archmodel.LinkOpener\nimport androidx.annotation.ColorInt\nfun openLink(\r\n        link: String,\r\n        @ColorInt toolbarColor: Int,\r\n        openAdjacentIfSuitable: Boolean = true,\r\n    ): Boolean {\r\n        return when (repository.linkOpener.value) {\r\n            LinkOpener.CUSTOM_TAB -> openLinkInCustomTab(link, toolbarColor, openAdjacentIfSuitable)\r", "choices": [{"text": "//            LinkOpener.SYSTEM_DEFAULT -> openLinkInSystemDefault(link, toolbarColor, openAdjacentIfSuitable)\r\n            else -> openLinkInSystemDefault(link, toolbarColor, openAdjacentIfSuitable)\r\n        }\r\n    }\r\n\r\n    private fun openLinkInSystemDefault(\r\n        link: String,\r\n        @ColorInt toolbarColor: Int,\r\n        openAdjacentIfSuitable: Boolean,\r\n    ): Boolean {\r\n        val intent = Intent(Intent.ACTION_VIEW, Uri.parse(link))\r\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n        intent.addFlags("}], "metadata": {"task_id": "Feeder/410", "ground_truth": "            LinkOpener.DEFAULT_BROWSER -> openLinkInBrowser(link, openAdjacentIfSuitable)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\ActivityLauncher.kt"}}
{"prompt": "\n private fun bugBody(): String =\r\n    \"\"\"\r\n    ${deviceInfoBlock()}\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/413", "ground_truth": "    \r\n    Hello.\r\n    \r\n    I'd like to report an issue:\r\n    \"\"\".trimIndent()", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\BugReport.kt"}}
{"prompt": "\n private fun crashBody(throwable: Throwable): String =\r\n    \"\"\"\r\n    ${deviceInfoBlock()}\r", "choices": [{"text": "${stackTrace(throwable)}\r\n    \"\"\".trimIndent()\r\n"}], "metadata": {"task_id": "Feeder/415", "ground_truth": "    \r\n    Unhandled exception:\r\n    \r\n    ${throwable.stackTraceToString()}\r\n    \"\"\".trimIndent()", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\BugReport.kt"}}
{"prompt": "\n import android.content.Intent\nfun openGitlabIssues(): Intent =\r", "choices": [{"text": "Intent(Intent.ACTION_VIEW, Uri.parse(\"https://gitlab.com/gitlab-org/gitlab-ce/issues\"))\r\nfun openGitlabMergeRequests(): Intent =\r\nIntent(Intent.ACTION_VIEW, Uri.parse(\"https://gitlab.com/gitlab-org/gitlab-ce/merge_requests\"))\r\nfun openGitlabMilestones(): Intent =\r\nIntent(Intent.ACTION_VIEW, Uri.parse(\"https://gitlab.com/gitlab-org/gitlab-ce/milestones\"))\r\nfun openGitlabProjects(): Intent =\r\nIntent("}], "metadata": {"task_id": "Feeder/417", "ground_truth": "    Intent(ACTION_VIEW).also {\r\n        it.data = Uri.parse(\"https://gitlab.com/spacecowboy/Feeder/issues\")\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\BugReport.kt"}}
{"prompt": "\n import android.content.Intent\nfun openKoFiIntent(): Intent =\r", "choices": [{"text": "Intent(Intent.ACTION_VIEW, Uri.parse(\"https://ko-fi.com/A0A03000\"))\r\n}<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\r\n\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport android.widget.Toast\r\nimport com.example.myapplication"}], "metadata": {"task_id": "Feeder/418", "ground_truth": "    Intent(ACTION_VIEW).also {\r\n        it.data = Uri.parse(KOFI_URL)\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\BugReport.kt"}}
{"prompt": "\n import android.content.ContentValues\nfun ContentValues.setStringMaybe(pair: Pair<String, String?>) {\r\n    if (pair.second == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/419", "ground_truth": "        putNull(pair.first)\r\n    } else {\r\n        put(pair.first, pair.second)\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\ContentValuesExtensions.kt"}}
{"prompt": "\n import android.content.ContentValues\ninline fun contentValues(init: ContentValues.() -> Unit): ContentValues {\r\n    val values = ContentValues()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/420", "ground_truth": "    values.init()\r\n    return values\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\ContentValuesExtensions.kt"}}
{"prompt": "\n import android.database.Cursor\ninline fun Cursor.forEach(block: (Cursor) -> Unit) {\r\n    while (moveToNext()) {\r", "choices": [{"text": "block(this)\r\n    }\r\n}\n"}], "metadata": {"task_id": "Feeder/423", "ground_truth": "        block(this)\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\CursorExtensions.kt"}}
{"prompt": "\n import kotlin.contracts.contract\nimport kotlin.contracts.InvocationKind\ninline fun <C> fold(\r\n        ifLeft: (left: A) -> C,\r\n        ifRight: (right: B) -> C,\r\n    ): C {\r\n        contract {\r\n            callsInPlace(ifLeft, InvocationKind.AT_MOST_ONCE)\r\n            callsInPlace(ifRight, InvocationKind.AT_MOST_ONCE)\r\n        }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/428", "ground_truth": "        return when (this) {\r\n            is Right -> ifRight(value)\r\n            is Left -> ifLeft(value)\r\n        }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\Either.kt"}}
{"prompt": "\n import kotlin.contracts.contract\nimport kotlin.contracts.InvocationKind\ninline fun <C> map(f: (right: B) -> C): Either<A, C> {\r\n        contract {\r\n            callsInPlace(f, InvocationKind.AT_MOST_ONCE)\r", "choices": [{"text": "//            returns() implies (f(right)!= null)\r\n        }\r\n        return when (this) {\r\n            is Left -> Left(a)\r\n            is Right -> Right(f(b))\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Feeder/429", "ground_truth": "        }\r\n        return flatMap { Right(f(it)) }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\Either.kt"}}
{"prompt": "\n import kotlin.contracts.contract\nimport kotlin.contracts.InvocationKind\ninline fun <C> mapLeft(f: (A) -> C): Either<C, B> {\r\n        contract {\r\n            callsInPlace(f, InvocationKind.AT_MOST_ONCE)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/430", "ground_truth": "        }\r\n        return fold({ Left(f(it)) }, { Right(it) })\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\Either.kt"}}
{"prompt": "\n import kotlin.contracts.contract\nimport kotlin.contracts.InvocationKind\ninline fun onRight(action: (right: B) -> Unit): Either<A, B> {\r\n        contract {\r\n            callsInPlace(action, InvocationKind.AT_MOST_ONCE)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/431", "ground_truth": "        }\r\n        return also { if (it.isRight()) action(it.value) }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\Either.kt"}}
{"prompt": "\n import kotlin.contracts.contract\nimport kotlin.contracts.InvocationKind\ninline fun onLeft(action: (left: A) -> Unit): Either<A, B> {\r\n        contract {\r\n            callsInPlace(action, InvocationKind.AT_MOST_ONCE)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/432", "ground_truth": "        }\r\n        return also { if (it.isLeft()) action(it.value) }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\Either.kt"}}
{"prompt": "\n import kotlin.contracts.contract\nfun leftOrNull(): A? {\r\n        contract {\r\n            returnsNotNull() implies (this@Either is Left<A>)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/434", "ground_truth": "            returns(null) implies (this@Either is Right<B>)\r\n        }\r\n\r\n        return fold(::identity) { null }\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\Either.kt"}}
{"prompt": "\n override fun toString(): String =\r\n        fold(\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/435", "ground_truth": "            { \"Either.Left($it)\" },\r\n            { \"Either.Right($it)\" },\r\n        )", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\Either.kt"}}
{"prompt": "\n import kotlin.contracts.contract\nimport kotlin.contracts.InvocationKind\ninline fun <A, B, C> Either<A, B>.flatMap(f: (right: B) -> Either<A, C>): Either<A, C> {\r\n    contract { callsInPlace(f, InvocationKind.AT_MOST_ONCE) }\r", "choices": [{"text": "return when (this) {\r\n    is Either.Left -> this\r\n    is Either.Right -> f(this.right)\r\n}\r\n}\n"}], "metadata": {"task_id": "Feeder/437", "ground_truth": "    return when (this) {\r\n        is Either.Right -> f(this.value)\r\n        is Either.Left -> this\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\Either.kt"}}
{"prompt": "\n inline infix fun <A, B> Either<A, B>.getOrElse(default: (A) -> B): B {\r", "choices": [{"text": "-  return when (this) {\r\n-    is Either.Left -> default(a)\r\n-    is Either.Right -> b\r\n-  }\r\n+  return when (this) {\r\n+    is Either.Left -> default(a)\r\n+    is Either.Right -> b\r\n+  }\r\n }\r\n \r\n inline fun <A, B> Either<A, B>.getOrElse(default: (B) -> A): A {\r\n-  return when (this) {\r\n-    is Either.Left -> a\r\n-   "}], "metadata": {"task_id": "Feeder/438", "ground_truth": "    contract { callsInPlace(default, InvocationKind.AT_MOST_ONCE) }\r\n    return fold(default, ::identity)\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\Either.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun pickColor(key: Any): Long {\r", "choices": [{"text": "return when (key) {\r\n\"red\" -> Color.RED\r\n\"green\" -> Color.GREEN\r\n\"blue\" -> Color.BLUE\r\nelse -> Color.BLACK\r\n}\r\n}\r\nfun main() {\r\nval color = pickColor(\"red\")\r\nprintln(color)\r\n}\r\n"}], "metadata": {"task_id": "Feeder/441", "ground_truth": "    val color = abs(key.hashCode()) % NUM_OF_TILE_COLORS\r\n    return colors[color]\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\LetterIconProvider.kt"}}
{"prompt": "\n import java.net.URI\nfun sloppyLinktoURIOrNull(text: String): URI? =\r\n    try {\r\n        URI(text)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/442", "ground_truth": "    } catch (_: URISyntaxException) {\r\n        null\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\LinkUtils.kt"}}
{"prompt": "\n import java.net.URL\nfun sloppyLinkToStrictURLOrNull(url: String): URL? =\r\n    try {\r\n        sloppyLinkToStrictURL(url)\r", "choices": [{"text": "} catch (e: Exception) {\r\n    null\r\n}\r\n"}], "metadata": {"task_id": "Feeder/443", "ground_truth": "    } catch (_: MalformedURLException) {\r\n        null\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\LinkUtils.kt"}}
{"prompt": "\n import java.net.URL\nfun sloppyLinkToStrictURLNoThrows(url: String): URL =\r\n    try {\r\n        sloppyLinkToStrictURL(url)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/444", "ground_truth": "    } catch (_: MalformedURLException) {\r\n        URL(\"http://\")\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\LinkUtils.kt"}}
{"prompt": "\n import java.net.URL\nfun relativeLinkIntoAbsoluteOrNull(\r\n    base: URL,\r\n    link: String?,\r\n): String? =\r\n    try {\r\n        // If no exception, it's valid\r\n        if (link != null) {\r\n            relativeLinkIntoAbsoluteOrThrow(base, link).toString()\r\n        } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/446", "ground_truth": "            null\r\n        }\r\n    } catch (_: MalformedURLException) {\r\n        link\r\n    }", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\LinkUtils.kt"}}
{"prompt": "\n import com.nononsenseapps.feeder.BuildConfig\nfun logDebug(\r\n    tag: String,\r\n    msg: String,\r\n    exception: Throwable? = null,\r\n) {\r\n    if (BuildConfig.DEBUG) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/448", "ground_truth": "        Log.d(tag, msg, exception)\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\Logging.kt"}}
{"prompt": "\n import android.database.sqlite.SQLiteDatabase\nfun SQLiteDatabase.inTransaction(init: (SQLiteDatabase) -> Unit) {\r\n    beginTransaction()\r\n    try {\r\n        init(this)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/449", "ground_truth": "        setTransactionSuccessful()\r\n    } finally {\r\n        endTransaction()\r\n    }\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\feeder\\util\\SQLiteDatabaseExtensions.kt"}}
{"prompt": "\n import java.util.concurrent.TimeUnit\nimport java.io.File\nimport okhttp3.OkHttpClient\nimport okhttp3.Cache\nfun cachingHttpClient(\r\n    cacheDirectory: File? = null,\r\n    cacheSize: Long = 10L * 1024L * 1024L,\r\n    trustAllCerts: Boolean = true,\r\n    connectTimeoutSecs: Long = 30L,\r\n    readTimeoutSecs: Long = 30L,\r\n    block: (OkHttpClient.Builder.() -> Unit)? = null,\r\n): OkHttpClient {\r\n    val builder: OkHttpClient.Builder = OkHttpClient.Builder()\r\n\r\n    if (cacheDirectory != null) {\r\n        builder.cache(Cache(cacheDirectory, cacheSize))\r\n    }\r\n\r\n    builder\r\n        .connectTimeout(connectTimeoutSecs, TimeUnit.SECONDS)\r\n        .readTimeout(readTimeoutSecs, TimeUnit.SECONDS)\r\n        .followRedirects(true)\r\n\r\n    if (trustAllCerts) {\r\n        builder.trustAllCerts()\r\n    }\r\n\r\n    block?.let {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Feeder/452", "ground_truth": "        builder.block()\r\n    }\r\n\r\n    return builder.build()\r\n}", "fpath": "Feeder\\app\\src\\main\\java\\com\\nononsenseapps\\jsonfeed\\JsonFeedParser.kt"}}
{"prompt": "\n  @JvmStatic\n    fun clearPrefs(vararg keys: String?) {\n        for (key in keys) {", "choices": [{"text": "            if (key!= null) {\n                sharedPreferences.edit().remove(key).apply()\n            }\n        }\n    }\n\n    @JvmStatic\n    fun clearAllPrefs() {\n        sharedPreferences.edit().clear().apply()\n    }\n\n    @JvmStatic\n    fun getBoolean(key: String?, defaultValue: Boolean): Boolean {\n        return sharedPreferences.getBoolean(key, defaultValue)\n    }\n\n    @JvmStatic\n    fun getBoolean(key: String?): Boolean {\n        return sharedPreferences.getBoolean(key, false)\n    }\n\n    @JvmStatic\n    fun getBoolean(key: String?, defaultValue: Boolean, vararg"}], "metadata": {"task_id": "Iconify/0", "ground_truth": "            editor.remove(key).apply()\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\config\\Prefs.kt"}}
{"prompt": "\n  @JvmStatic\n    fun clearPrefs(vararg keys: String?) {\n        for (key in keys) {", "choices": [{"text": "            if (key!= null) {\n                sharedPreferences.edit().remove(key).apply()\n            }\n        }\n    }\n\n    @JvmStatic\n    fun clearAllPrefs() {\n        sharedPreferences.edit().clear().apply()\n    }\n\n    @JvmStatic\n    fun getBoolean(key: String?, defaultValue: Boolean): Boolean {\n        return sharedPreferences.getBoolean(key, defaultValue)\n    }\n\n    @JvmStatic\n    fun getBoolean(key: String?): Boolean {\n        return sharedPreferences.getBoolean(key, false)\n    }\n\n    @JvmStatic\n    fun getBoolean(key: String?, defaultValue: Boolean, vararg"}], "metadata": {"task_id": "Iconify/1", "ground_truth": "            editor.remove(key).apply()\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\config\\RPrefs.kt"}}
{"prompt": "\n private fun getInstance(): Iconify {\n            if (instance == null) {\n                instance = Iconify()", "choices": [{"text": "            }\n            return instance!!\n        }\n}\n"}], "metadata": {"task_id": "Iconify/4", "ground_truth": "            }\n            return instance!!\n        }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\Iconify.kt"}}
{"prompt": "\n override fun onCreate() {\n        super.onCreate()\n        instance = this", "choices": [{"text": "        //\u521d\u59cb\u5316\u6570\u636e\u5e93\n        initDatabase()\n        //\u521d\u59cb\u5316\u7f51\u7edc\u8bf7\u6c42\n        initRetrofit()\n        //\u521d\u59cb\u5316\u56fe\u7247\u52a0\u8f7d\n        initGlide()\n        //\u521d\u59cb\u5316\u56fe\u7247\u9009\u62e9\u5668\n        initImagePicker()\n        //\u521d\u59cb\u5316\u56fe\u7247\u538b\u7f29\n        initImageCompress()\n        //\u521d\u59cb\u5316\u56fe\u7247\u88c1\u526a\n        initImageCrop()\n        //\u521d\u59cb\u5316\u56fe\u7247\u9009\u62e9\u5668\n        initImagePicker()\n        //\u521d\u59cb\u5316\u56fe\u7247\u9009\u62e9\u5668\n        initImagePicker()\n        //\u521d\u59cb\u5316\u56fe\u7247\u9009\u62e9\u5668\n        initImagePicker()\n        //\u521d\u59cb\u5316\u56fe\u7247\u9009\u62e9\u5668\n        initImagePicker()\n        //\u521d\u59cb\u5316\u56fe\u7247\u9009\u62e9\u5668\n        initImagePicker()\n        //\u521d\u59cb\u5316\u56fe\u7247\u9009\u62e9\u5668\n        initImagePicker()"}], "metadata": {"task_id": "Iconify/5", "ground_truth": "        contextReference = WeakReference(applicationContext)\n        DynamicColors.applyToActivitiesIfAvailable(this)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\Iconify.kt"}}
{"prompt": "\n import android.util.Log\nimport android.content.Intent\nimport android.content.Context\noverride fun onReceive(context: Context, intent: Intent) {\n        if (Intent.ACTION_BOOT_COMPLETED == intent.action) {\n            Log.i(tag, \"Broadcast received: \" + intent.action)", "choices": [{"text": "            val intent = Intent(context, MainActivity::class.java)\n            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\n            context.startActivity(intent)\n        }\n    }\n}\n\n"}], "metadata": {"task_id": "Iconify/6", "ground_truth": "            UpdateScheduler.scheduleUpdates(context)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\receiver\\BootReceiver.kt"}}
{"prompt": "\n override fun onStartListening() {\n        super.onStartListening()\n", "choices": [{"text": "}\n\n override fun onStopListening() {\n        super.onStopListening()\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/10", "ground_truth": "        val tile = qsTile\n        tile.state = Tile.STATE_INACTIVE\n        updateTileIcon(tile)\n        tile.updateTile()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\services\\TileRestartSystemUI.kt"}}
{"prompt": "\n import android.service.quicksettings.Tile\noverride fun onStopListening() {\n        val tile = qsTile\n        tile.state = Tile.STATE_INACTIVE", "choices": [{"text": "        tile.updateTile()\n    }\n\n"}], "metadata": {"task_id": "Iconify/11", "ground_truth": "        updateTileIcon(tile)\n        tile.updateTile()\n\n        super.onStopListening()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\services\\TileRestartSystemUI.kt"}}
{"prompt": "\n import com.drdisagree.iconify.utils.SystemUtil\nimport com.drdisagree.iconify.R\nimport android.service.quicksettings.Tile\noverride fun onClick() {\n        super.onClick()\n\n        SystemUtil.restartSystemUI()\n        val tile = qsTile\n        tile.state = Tile.STATE_INACTIVE\n        tile.label = resources.getString(R.string.restart_sysui_title)\n        tile.subtitle = \"\"", "choices": [{"text": "        tile.updateTile()\n    }\n}\n<file_sep>/app/src/main/java/com/drdisagree/iconify/ui/activity/MainActivity.kt\npackage com.drdisagree.iconify.ui.activity\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.support.v7.app.AppCompatActivity\nimport android.view.Menu\nimport android.view.MenuItem\nimport com.drdisagree.iconify.R\nimport com.drdisagree.iconify.ui.fragment.SettingsFragment\nimport com.drdisagree"}], "metadata": {"task_id": "Iconify/12", "ground_truth": "\n        updateTileIcon(tile)\n\n        tile.updateTile()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\services\\TileRestartSystemUI.kt"}}
{"prompt": " import android.os.Bundle\nvar selectedFragment Int?\nvar binding ActivityHomePageBinding\nval DATA_KEY\noverride fun onSaveInstanceState(outState: Bundle) {\n        super.onSaveInstanceState(outState)", "choices": [{"text": "        outState.putInt(DATA_KEY, selectedFragment!!)\n}\noverride fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityHomePageBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n        if (savedInstanceState!= null) {\n        selectedFragment = savedInstanceState.getInt(DATA_KEY)\n        }\n        val navController = findNavController(R.id.nav_host_fragment)\n        val appBarConfiguration = AppBarConfiguration(navController.graph)\n        setupActionBarWithNavController(navController, appBarConfiguration)\n        binding.bottomNavigation"}], "metadata": {"task_id": "Iconify/16", "ground_truth": "\n        if (selectedFragment != null) outState.putInt(DATA_KEY, selectedFragment!!)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\activities\\MainActivity.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.os.Bundle\npublic override fun onRestoreInstanceState(savedInstanceState: Bundle) {\n        super.onRestoreInstanceState(savedInstanceState)", "choices": [{"text": "        // Always call the superclass so it can restore the view hierarchy\n        // savedInstanceState.getParcelableArray(\"list\")\n        // savedInstanceState.getParcelableArray(\"list\")\n        // savedInstanceState.getParcelableArray(\"list\")\n        // savedInstanceState.getParcelableArray(\"list\")\n        // savedInstanceState.getParcelableArray(\"list\")\n        // savedInstanceState.getParcelableArray(\"list\")\n        // savedInstanceState.getParcelableArray(\"list\")\n        // savedInstanceState.getParcelableArray(\"list\")\n        // savedInstanceState.getParcelableArray(\"list\")\n        // savedInstanceState.getParcelableArray(\"list\")\n        // savedInstanceState.getParcelableArray(\"list\")\n        // savedInstanceState.get"}], "metadata": {"task_id": "Iconify/17", "ground_truth": "\n        selectedFragment = savedInstanceState.getInt(DATA_KEY)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\activities\\MainActivity.kt"}}
{"prompt": "\n public override fun onResume() {\n        super.onResume()", "choices": [{"text": "        if (mGoogleApiClient.isConnected) {\n            mGoogleApiClient.connect()\n        }\n    }\n\n    public override fun onPause() {\n        super.onPause()\n        if (mGoogleApiClient.isConnected) {\n            mGoogleApiClient.disconnect()\n        }\n    }\n\n    override fun onConnectionFailed(connectionResult: ConnectionResult) {\n        Log.d(TAG, \"onConnectionFailed: $connectionResult\")\n    }\n\n    override fun onConnected(connectionHint: Bundle?) {\n        Log.d(TAG, \"onConnected: $connectionHint\")\n        mLocationRequest = LocationRequest.create()\n        mLocation"}], "metadata": {"task_id": "Iconify/19", "ground_truth": "\n        window.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\activities\\OnboardingActivity.kt"}}
{"prompt": "\n public override fun onPause() {\n        super.onPause()", "choices": [{"text": "        if (mAdView!= null) {\n            mAdView.pause()\n        }\n    }\n\n    public override fun onResume() {\n        super.onResume()\n        if (mAdView!= null) {\n            mAdView.resume()\n        }\n    }\n\n    public override fun onDestroy() {\n        super.onDestroy()\n        if (mAdView!= null) {\n            mAdView.destroy()\n        }\n    }\n}<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.content."}], "metadata": {"task_id": "Iconify/20", "ground_truth": "\n        window.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\activities\\OnboardingActivity.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(context).inflate(\n            if (variant == \"BBN\") {\n                R.layout.view_list_option_brightnessbar\n            } else {\n                R.layout.view_list_option_brightnessbar_pixel\n            },", "choices": [{"text": "            parent,\n            false\n        )\n        return ViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        holder.bind(position)\n    }\n\n    override fun getItemCount(): Int {\n        return 100\n    }\n\n    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        fun bind(position: Int) {\n            val brightnessBar = itemView.findViewById<SeekBar>(R.id.brightnessBar)\n            brightnessBar.progress = position\n            brightnessBar.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener"}], "metadata": {"task_id": "Iconify/21", "ground_truth": "            parent,\n            false\n        )\n        return ViewHolder(view)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\BrightnessBarAdapter.kt"}}
{"prompt": "\n import android.view.View\noverride fun onViewAttachedToWindow(holder: ViewHolder) {\n        super.onViewAttachedToWindow(holder)\n\n        itemSelected(\n            holder.container,", "choices": [{"text": "            holder.itemView,\n            holder.adapterPosition\n        )\n    }\n\n"}], "metadata": {"task_id": "Iconify/22", "ground_truth": "            getBoolean(brightnessBarKeys[holder.getBindingAdapterPosition()])\n        )\n\n        refreshButton(holder)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\BrightnessBarAdapter.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onAttachedToRecyclerView(recyclerView: RecyclerView) {\n        super.onAttachedToRecyclerView(recyclerView)", "choices": [{"text": "        val context = recyclerView.context\n        val layoutManager = recyclerView.layoutManager\n        if (layoutManager is GridLayoutManager) {\n            val spanCount = layoutManager.spanCount\n            val orientation = layoutManager.orientation\n            val reverseLayout = layoutManager.reverseLayout\n            val spanSizeLookup = layoutManager.spanSizeLookup\n            if (spanCount > 0 && orientation == GridLayoutManager.VERTICAL) {\n                recyclerView.addItemDecoration(GridSpacingItemDecoration(spanCount, spanSizeLookup, reverseLayout))\n            }\n        }\n    }\n\nclass GridSpacingItemDecoration(private val spanCount: Int,"}], "metadata": {"task_id": "Iconify/23", "ground_truth": "\n        linearLayoutManager = recyclerView.layoutManager as LinearLayoutManager?\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\BrightnessBarAdapter.kt"}}
{"prompt": "\n import com.drdisagree.iconify.common.Preferences.LSCLOCK_SWITCH\nimport com.drdisagree.iconify.R\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(context).inflate(\n            if (prefSwitch == LSCLOCK_SWITCH) {\n                R.layout.view_clock_preview_lockscreen\n            } else {\n                R.layout.view_clock_preview_header\n            },", "choices": [{"text": "parent, false)\n        return ViewHolder(view)\n    }\n\noverride fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        val item = items[position]\n        holder.bind(item)\n    }\n\nclass ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n        fun bind(item: Item) {\n            itemView.findViewById<TextView>(R.id.clock_preview_text).text = item.text\n            itemView.findViewById<TextView>(R.id.clock_preview_text).setTextColor(item.color)\n            itemView.findViewById<TextView>(R."}], "metadata": {"task_id": "Iconify/24", "ground_truth": "            parent,\n            false\n        )\n        return ViewHolder(view)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\ClockPreviewAdapter.kt"}}
{"prompt": "\n import android.view.View\noverride fun onBindViewHolder(holder: ViewHolder, position: Int) {", "choices": [{"text": " holder.itemView.setOnClickListener {\n val intent = Intent(context, DetailActivity::class.java)\n intent.putExtra(\"id\", list[position].id)\n context.startActivity(intent)\n }\n }\n\n"}], "metadata": {"task_id": "Iconify/25", "ground_truth": "        val model = itemList[position]\n        holder.bind(model, position)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\ClockPreviewAdapter.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onAttachedToRecyclerView(recyclerView: RecyclerView) {\n        super.onAttachedToRecyclerView(recyclerView)", "choices": [{"text": "        val context = recyclerView.context\n        val layoutManager = recyclerView.layoutManager\n        if (layoutManager is GridLayoutManager) {\n            val spanCount = layoutManager.spanCount\n            val orientation = layoutManager.orientation\n            val reverseLayout = layoutManager.reverseLayout\n            val spanSizeLookup = layoutManager.spanSizeLookup\n            if (spanCount > 0 && orientation == GridLayoutManager.VERTICAL) {\n                recyclerView.addItemDecoration(GridSpacingItemDecoration(spanCount, spanSizeLookup, reverseLayout))\n            }\n        }\n    }\n\nclass GridSpacingItemDecoration(private val spanCount: Int,"}], "metadata": {"task_id": "Iconify/27", "ground_truth": "\n        linearLayoutManager = recyclerView.layoutManager as LinearLayoutManager?\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\ClockPreviewAdapter.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onAttachedToRecyclerView(recyclerView: RecyclerView) {\n        super.onAttachedToRecyclerView(recyclerView)", "choices": [{"text": "        val context = recyclerView.context\n        val layoutManager = recyclerView.layoutManager\n        if (layoutManager is GridLayoutManager) {\n            val spanCount = layoutManager.spanCount\n            val orientation = layoutManager.orientation\n            val reverseLayout = layoutManager.reverseLayout\n            val spanSizeLookup = layoutManager.spanSizeLookup\n            if (spanCount > 0 && orientation == GridLayoutManager.VERTICAL) {\n                recyclerView.addItemDecoration(GridSpacingItemDecoration(spanCount, spanSizeLookup, reverseLayout))\n            }\n        }\n    }\n\nclass GridSpacingItemDecoration(private val spanCount: Int,"}], "metadata": {"task_id": "Iconify/31", "ground_truth": "\n        linearLayoutManager = recyclerView.layoutManager as LinearLayoutManager?\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\IconPackAdapter.kt"}}
{"prompt": "\n import com.drdisagree.iconify.databinding.ViewListIconItemBinding\nimport com.drdisagree.iconify.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\n        return IconsViewHolder(\n            ViewListIconItemBinding.inflate(\n                LayoutInflater.from(parent.context),", "choices": [{"text": "                parent,\n                false\n            )\n        )\n    }\n\n    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\n        val icon = icons[position]\n        (holder as IconsViewHolder).bind(icon)\n    }\n\n    override fun getItemCount(): Int {\n        return icons.size\n    }\n\n    class IconsViewHolder(private val binding: ViewListIconItemBinding) : RecyclerView.ViewHolder(binding.root) {\n        fun bind(icon: Icon) {\n            binding.icon = icon\n            binding.executePendingBindings()\n        }\n    }\n}\n<file_sep>/app/src/main/java"}], "metadata": {"task_id": "Iconify/32", "ground_truth": "                parent,\n                false\n            )\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\IconsAdapter.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(context)", "choices": [{"text": "               .inflate(R.layout.item_list_view, parent, false)\n        return ViewHolder(view)\n    }\n\noverride fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        val item = list[position]\n        holder.mIdView.text = item.id\n        holder.mContentView.text = item.content\n}\n\n"}], "metadata": {"task_id": "Iconify/34", "ground_truth": "            .inflate(R.layout.view_list_option_notification, parent, false)\n        return ViewHolder(view)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\NotificationAdapter.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(context)", "choices": [{"text": "               .inflate(R.layout.item_list_view, parent, false)\n        return ViewHolder(view)\n    }\n\noverride fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        val item = list[position]\n        holder.mIdView.text = item.id\n        holder.mContentView.text = item.content\n}\n\n"}], "metadata": {"task_id": "Iconify/38", "ground_truth": "            .inflate(R.layout.view_list_option_progressbar, parent, false)\n        return ViewHolder(view)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\ProgressBarAdapter.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onAttachedToRecyclerView(recyclerView: RecyclerView) {\n        super.onAttachedToRecyclerView(recyclerView)", "choices": [{"text": "        val context = recyclerView.context\n        val layoutManager = recyclerView.layoutManager\n        if (layoutManager is GridLayoutManager) {\n            val spanCount = layoutManager.spanCount\n            val orientation = layoutManager.orientation\n            val reverseLayout = layoutManager.reverseLayout\n            val spanSizeLookup = layoutManager.spanSizeLookup\n            if (spanCount > 0 && orientation == GridLayoutManager.VERTICAL) {\n                recyclerView.addItemDecoration(GridSpacingItemDecoration(spanCount, spanSizeLookup, reverseLayout))\n            }\n        }\n    }\n\nclass GridSpacingItemDecoration(private val spanCount: Int,"}], "metadata": {"task_id": "Iconify/41", "ground_truth": "\n        linearLayoutManager = recyclerView.layoutManager as LinearLayoutManager?\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\ProgressBarAdapter.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(context).inflate(\n            if (variant == \"QSSN\") R.layout.view_list_option_qsshape else R.layout.view_list_option_qsshape_pixel,", "choices": [{"text": "            parent, false\n        )\n        return ViewHolder(view)\n    }\n}\n\nclass ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n    val icon: ImageView = itemView.findViewById(R.id.icon)\n    val name: TextView = itemView.findViewById(R.id.name)\n}\n\n"}], "metadata": {"task_id": "Iconify/42", "ground_truth": "            parent,\n            false\n        )\n        return ViewHolder(view)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\QsShapeAdapter.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onAttachedToRecyclerView(recyclerView: RecyclerView) {\n        super.onAttachedToRecyclerView(recyclerView)", "choices": [{"text": "        val context = recyclerView.context\n        val layoutManager = recyclerView.layoutManager\n        if (layoutManager is GridLayoutManager) {\n            val spanCount = layoutManager.spanCount\n            val orientation = layoutManager.orientation\n            val reverseLayout = layoutManager.reverseLayout\n            val spanSizeLookup = layoutManager.spanSizeLookup\n            if (spanCount > 0 && orientation == GridLayoutManager.VERTICAL) {\n                recyclerView.addItemDecoration(GridSpacingItemDecoration(spanCount, spanSizeLookup, reverseLayout))\n            }\n        }\n    }\n\nclass GridSpacingItemDecoration(private val spanCount: Int,"}], "metadata": {"task_id": "Iconify/44", "ground_truth": "\n        linearLayoutManager = recyclerView.layoutManager as LinearLayoutManager?\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\QsShapeAdapter.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(context).inflate(layout, parent, false)", "choices": [{"text": "        return ViewHolder(view)\n    }\n\n"}], "metadata": {"task_id": "Iconify/45", "ground_truth": "        (view.findViewById<View>(R.id.section_title) as MaterialTextView).text = text\n        return ViewHolder(view)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\SectionTitleAdapter.kt"}}
{"prompt": "\n import com.drdisagree.iconify.config.Prefs\nimport android.widget.Switch\nimport android.view.View\noverride fun onViewAttachedToWindow(holder: ViewHolder) {\n        super.onViewAttachedToWindow(holder)\n\n        holder.aSwitch.setChecked(\n            Prefs.getInt(", "choices": [{"text": "                holder.itemView.context,\n                \"switch_state\",\n                0\n            ) == 1\n        )\n\n        holder.aSwitch.setOnCheckedChangeListener { buttonView, isChecked ->\n            Prefs.putInt(\n                holder.itemView.context,\n                \"switch_state\",\n                if (isChecked) 1 else 0\n            )\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/47", "ground_truth": "                SELECTED_SWITCH,\n                -1\n            ) == holder.getBindingAdapterPosition()\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\SwitchAdapter.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onAttachedToRecyclerView(recyclerView: RecyclerView) {\n        super.onAttachedToRecyclerView(recyclerView)", "choices": [{"text": "        val context = recyclerView.context\n        val layoutManager = recyclerView.layoutManager\n        if (layoutManager is GridLayoutManager) {\n            val spanCount = layoutManager.spanCount\n            val orientation = layoutManager.orientation\n            val reverseLayout = layoutManager.reverseLayout\n            val spanSizeLookup = layoutManager.spanSizeLookup\n            if (spanCount > 0 && orientation == GridLayoutManager.VERTICAL) {\n                recyclerView.addItemDecoration(GridSpacingItemDecoration(spanCount, spanSizeLookup, reverseLayout))\n            }\n        }\n    }\n\nclass GridSpacingItemDecoration(private val spanCount: Int,"}], "metadata": {"task_id": "Iconify/48", "ground_truth": "\n        linearLayoutManager = recyclerView.layoutManager as LinearLayoutManager?\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\SwitchAdapter.kt"}}
{"prompt": "\n import android.widget.Switch\nimport android.widget.CompoundButton\nimport android.view.View\nprivate fun enableOnCheckedChangeListener(holder: ViewHolder) {\n        holder.container.setOnClickListener {\n            holder.aSwitch.toggle()\n            switchAction(holder, holder.aSwitch.isChecked)\n        }\n        holder.aSwitch.setOnCheckedChangeListener { compoundButton: CompoundButton, b: Boolean ->", "choices": [{"text": "            switchAction(holder, b)\n        }\n    }\n\nprivate fun switchAction(holder: ViewHolder, b: Boolean) {\n        if (b) {\n            holder.container.setBackgroundColor(Color.GREEN)\n        } else {\n            holder.container.setBackgroundColor(Color.RED)\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/49", "ground_truth": "            if (compoundButton.isPressed) {\n                switchAction(holder, b)\n            }\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\adapters\\SwitchAdapter.kt"}}
{"prompt": "\n import com.drdisagree.iconify.ui.utils.ThemeHelper\nimport androidx.appcompat.app.AppCompatDelegate\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\n        AppCompatDelegate.setDefaultNightMode(ThemeHelper.theme)", "choices": [{"text": "        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        setSupportActionBar(toolbar)\n        val toggle = ActionBarDrawerToggle(\n                this, drawer_layout, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close)\n        drawer_layout.addDrawerListener(toggle)\n        toggle.syncState()\n        nav_view.setNavigationItemSelectedListener(this)\n        val navController = findNavController(R.id.nav_host_fragment)\n        val appBarConfiguration = AppBarConfiguration(setOf(\n                R.id"}], "metadata": {"task_id": "Iconify/50", "ground_truth": "        super.onCreate(savedInstanceState)\n        setupEdgeToEdge()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\base\\BaseActivity.kt"}}
{"prompt": "\n  @Suppress(\"deprecation\")\n    override fun onSupportNavigateUp(): Boolean {", "choices": [{"text": "        val navController = findNavController(R.id.nav_host_fragment)\n        return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\n    }\n}<file_sep>/app/src/main/java/com/example/myapplication/ui/home/HomeFragment.kt\npackage com.example.myapplication.ui.home\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Toast\nimport androidx.fragment.app.Fragment\nimport androidx"}], "metadata": {"task_id": "Iconify/51", "ground_truth": "        onBackPressed()\n        return true\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\base\\BaseActivity.kt"}}
{"prompt": "\nvar dialog Dialog?\n public override fun onDestroy() {", "choices": [{"text": "        super.onDestroy()\n        dialog?.dismiss()\n    }\n\n"}], "metadata": {"task_id": "Iconify/55", "ground_truth": "        dismiss()\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\dialogs\\ErrorDialog.kt"}}
{"prompt": "\nvar dialog Dialog?\n public override fun onDestroy() {", "choices": [{"text": "        super.onDestroy()\n        dialog?.dismiss()\n    }\n\n"}], "metadata": {"task_id": "Iconify/56", "ground_truth": "        dismiss()\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\dialogs\\InfoDialog.kt"}}
{"prompt": "\nvar dialog Dialog?\nvar customFont Typeface?\n fun hide() {\n        if (dialog?.isShowing == true) {", "choices": [{"text": "            dialog?.dismiss()\n        }\n    }\n\nfun show(context: Context, title: String, message: String, positiveButton: String, negativeButton: String, positiveButtonListener: DialogInterface.OnClickListener, negativeButtonListener: DialogInterface.OnClickListener) {\n    val builder = AlertDialog.Builder(context)\n    builder.setTitle(title)\n    builder.setMessage(message)\n    builder.setPositiveButton(positiveButton, positiveButtonListener)\n    builder.setNegativeButton(negativeButton, negativeButtonListener)\n    dialog = builder.create()\n    dialog?.show()\n}\n\nfun show(context:"}], "metadata": {"task_id": "Iconify/57", "ground_truth": "            dialog?.dismiss()\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\dialogs\\InstallationDialog.kt"}}
{"prompt": "\nvar dialog Dialog?\nvar customFont Typeface?\n public override fun onDestroy() {\n        dismiss()", "choices": [{"text": "        super.onDestroy()\n    }\n\n"}], "metadata": {"task_id": "Iconify/60", "ground_truth": "\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\dialogs\\InstallationDialog.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.widget.TextView\nimport android.graphics.drawable.ColorDrawable\nimport android.graphics.Color\nimport android.app.Dialog\nfun show(title: String?) {\n        if (dialog != null) dialog!!.dismiss()\n\n        dialog = Dialog(context)\n        dialog!!.setContentView(R.layout.view_loading_dialog)\n        dialog!!.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\n        dialog!!.setCancelable(false)\n        dialog!!.setOnCancelListener(null)\n        dialog!!.setCanceledOnTouchOutside(false)\n\n        val text = dialog!!.findViewById<TextView>(R.id.title)", "choices": [{"text": "\n import com.drdisagree.iconify.R\nimport android.widget.TextView\nimport android.graphics.drawable.ColorDrawable\nimport android.graphics.Color\nimport android.app.Dialog\nfun show(title: String?) {\n        if (dialog!= null) dialog!!.dismiss()\n\n        dialog = Dialog(context)\n        dialog!!.setContentView(R.layout.view_loading_dialog)\n        dialog!!.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\n        dialog!!.setCancelable(false)\n        dialog!!.setOnCancelListener(null)\n        dialog!!.setCanceledOnTouchOutside(false)\n\n        val text = dialog!!.findViewById<TextView>(R.id.title)\n        text.text = title\n        dialog!!.show()\n    }\n\nfun dismiss() {\n        if (dialog!= null) dialog!!.dismiss()\n    }\n\n"}], "metadata": {"task_id": "Iconify/61", "ground_truth": "        text.text = title\n\n        dialog!!.create()\n        dialog!!.show()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\dialogs\\LoadingDialog.kt"}}
{"prompt": "\nvar dialog Dialog?\n fun hide() {\n        if (dialog?.isShowing == true) {", "choices": [{"text": "            dialog?.dismiss()\n        }\n    }\n}\n\n"}], "metadata": {"task_id": "Iconify/62", "ground_truth": "            dialog?.dismiss()\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\dialogs\\LoadingDialog.kt"}}
{"prompt": "\nvar dialog Dialog?\n public override fun onDestroy() {", "choices": [{"text": "        super.onDestroy()\n        dialog?.dismiss()\n    }\n\n"}], "metadata": {"task_id": "Iconify/63", "ground_truth": "        dismiss()\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\dialogs\\LoadingDialog.kt"}}
{"prompt": "\nvar dialog Dialog?\nvar listener RadioDialogListener?\n fun hide() {\n        if (dialog?.isShowing == true) {", "choices": [{"text": "            dialog?.dismiss()\n        }\n    }\n\nfun show(context: Context, title: String, message: String, positiveText: String, negativeText: String, positiveListener: RadioDialogListener) {\n        listener = positiveListener\n        val builder = AlertDialog.Builder(context)\n        builder.setTitle(title)\n        builder.setMessage(message)\n        builder.setPositiveButton(positiveText) { dialog, which ->\n            listener?.onPositiveClick(dialog)\n        }\n        builder.setNegativeButton(negativeText) { dialog, which ->\n            listener?.onNegativeClick(dialog)\n        }\n        dialog ="}], "metadata": {"task_id": "Iconify/64", "ground_truth": "            dialog?.dismiss()\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\dialogs\\RadioDialog.kt"}}
{"prompt": "\nvar dialog Dialog?\nvar listener RadioDialogListener?\n public override fun onDestroy() {", "choices": [{"text": "        super.onDestroy()\n        dialog?.dismiss()\n    }\n\n"}], "metadata": {"task_id": "Iconify/65", "ground_truth": "        dismiss()\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\dialogs\\RadioDialog.kt"}}
{"prompt": "\nvar binding FragmentAppUpdatesBinding\nvar tag\nvar checkForUpdate CheckForUpdate?\n override fun onDestroy() {", "choices": [{"text": " super.onDestroy()\n binding.appUpdates.removeOnUpdateListener(checkForUpdate)\n }\n\n"}], "metadata": {"task_id": "Iconify/67", "ground_truth": "        if (checkForUpdate != null) checkForUpdate!!.cancel(true)\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\AppUpdates.kt"}}
{"prompt": "\n override fun onStop() {", "choices": [{"text": " super.onStop()\n if (mGoogleApiClient!= null) {\n mGoogleApiClient!!.disconnect()\n }\n }\n\n override fun onConnectionFailed(connectionResult: ConnectionResult) {\n Log.i(TAG, \"Connection failed: ConnectionResult.getErrorCode() = \" + connectionResult.errorCode)\n }\n\n override fun onConnected(connectionHint: Bundle?) {\n Log.i(TAG, \"Connected to GoogleApiClient\")\n }\n\n override fun onConnectionSuspended(cause: Int) {\n Log.i(TAG, \"Connection suspended\")\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/68", "ground_truth": "        if (checkForUpdate != null) checkForUpdate!!.cancel(true)\n        super.onStop()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\AppUpdates.kt"}}
{"prompt": "\n import com.drdisagree.iconify.config.Prefs.putString\nimport com.drdisagree.iconify.config.Prefs.putBoolean\nimport com.drdisagree.iconify.common.Preferences.CUSTOM_ACCENT\nimport com.drdisagree.iconify.common.Preferences.COLOR_ACCENT_SECONDARY_LIGHT\nimport com.drdisagree.iconify.common.Preferences.COLOR_ACCENT_SECONDARY\nimport com.drdisagree.iconify.common.Preferences.COLOR_ACCENT_PRIMARY_LIGHT\nimport com.drdisagree.iconify.common.Preferences.COLOR_ACCENT_PRIMARY\nimport com.drdisagree.iconify.R\nprivate fun applyMonetColors() {\n        putBoolean(CUSTOM_ACCENT, true)\n\n        if (isSelectedPrimary) {\n            putString(COLOR_ACCENT_PRIMARY, accentPrimary)\n            putString(COLOR_ACCENT_PRIMARY_LIGHT, accentPrimary)\n        }\n        if (isSelectedSecondary) {\n            putString(COLOR_ACCENT_SECONDARY, accentSecondary)\n            putString(COLOR_ACCENT_SECONDARY_LIGHT, accentSecondary)", "choices": [{"text": "        }\n    }\n\nprivate fun applyMonetColors() {\n        putBoolean(CUSTOM_ACCENT, true)\n\n        if (isSelectedPrimary) {\n            putString(COLOR_ACCENT_PRIMARY, accentPrimary)\n            putString(COLOR_ACCENT_PRIMARY_LIGHT, accentPrimary)\n        }\n        if (isSelectedSecondary) {\n            putString(COLOR_ACCENT_SECONDARY, accentSecondary)\n            putString(COLOR_ACCENT_SECONDARY_LIGHT, accentSecondary)\n        }\n    }\n\nprivate fun applyMonetColors() {\n        putBoolean(CUSTOM_ACCENT, true)"}], "metadata": {"task_id": "Iconify/72", "ground_truth": "        }\n\n        if (isSelectedPrimary) applyPrimaryColors()\n        if (isSelectedSecondary) applySecondaryColors()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\BasicColors.kt"}}
{"prompt": "\n fun applyDefaultColors() {", "choices": [{"text": " val color = Color.parseColor(\"#000000\")\n val color2 = Color.parseColor(\"#ffffff\")\n val color3 = Color.parseColor(\"#000000\")\n val color4 = Color.parseColor(\"#ffffff\")\n val color5 = Color.parseColor(\"#000000\")\n val color6 = Color.parseColor(\"#ffffff\")\n val color7 = Color.parseColor(\"#000000\")\n val color8 = Color.parseColor(\"#ffffff\")\n val color9 = Color.parseColor(\"#000"}], "metadata": {"task_id": "Iconify/73", "ground_truth": "            applyDefaultPrimaryColors()\n            applyDefaultSecondaryColors()\n        }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\BasicColors.kt"}}
{"prompt": "\n override fun onDestroy() {\n        loadingDialog?.dismiss()", "choices": [{"text": "        super.onDestroy()\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        if (requestCode == 100 && resultCode == Activity.RESULT_OK) {\n            val result = data?.getStringExtra(\"result\")\n            if (result!= null) {\n                val json = JSONObject(result)\n                val data = json.getJSONObject(\"data\")\n                val id = data.getString(\"id\")\n                val name = data.getString(\"name\")\n                val phone = data.getString(\""}], "metadata": {"task_id": "Iconify/75", "ground_truth": "\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\BrightnessBar.kt"}}
{"prompt": "\nvar binding FragmentBrightnessBarPixelBinding\nvar loadingDialog LoadingDialog?\n override fun onDestroy() {\n        loadingDialog?.dismiss()", "choices": [{"text": "        super.onDestroy()\n    }\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = DataBindingUtil.setContentView(this, R.layout.fragment_brightness_bar_pixel)\n        binding.lifecycleOwner = this\n        binding.viewModel = viewModel\n        loadingDialog = LoadingDialog(this)\n        loadingDialog?.show()\n        viewModel.getPixelBrightness()\n        viewModel.getPixelBrightness().observe(this, Observer {\n            binding.brightnessBar.progress = it\n            binding.brightnessBar.invalidate()\n            loadingDialog?.dismiss()\n        })\n    }\n\n"}], "metadata": {"task_id": "Iconify/76", "ground_truth": "\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\BrightnessBarPixel.kt"}}
{"prompt": "\n import com.drdisagree.iconify.ui.utils.ViewHelper.setHeader\nimport com.drdisagree.iconify.databinding.FragmentChangelogBinding\nimport com.drdisagree.iconify.R\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = FragmentChangelogBinding.inflate(inflater, container, false)\n        val view: View = binding.getRoot()\n\n        // Header\n        setHeader(\n            requireContext(),\n            getParentFragmentManager(),\n            binding.header.toolbar,\n            R.string.activity_title_changelog\n        )\n\n        try {\n            grabChangelog = GrabChangelog()\n            grabChangelog!!.execute()", "choices": [{"text": "        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n\n        return view\n    }\n\n    private inner class GrabChangelog : AsyncTask<Void, Void, String>() {\n        override fun doInBackground(vararg params: Void?): String? {\n            val changelog = Changelog()\n            return changelog.getChangelog()\n        }\n\n        override fun onPostExecute(result: String?) {\n            super.onPostExecute(result)\n            binding.changelog.text = result\n        }\n    }\n}<file_sep>/app/src/main/java/com/drdisagree/iconify/ui/utils"}], "metadata": {"task_id": "Iconify/77", "ground_truth": "        } catch (ignored: Exception) {\n        }\n\n        return view\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\Changelog.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport com.drdisagree.iconify.Iconify.Companion.appContextLocale\noverride fun onPreExecute() {\n            loadingDialog.show(\n                appContextLocale.resources.getString(R.string.loading_dialog_wait),", "choices": [{"text": "                appContextLocale.resources.getString(R.string.loading_dialog_message)\n            )\n        }\n\n"}], "metadata": {"task_id": "Iconify/78", "ground_truth": "                true\n            )\n        }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\Changelog.kt"}}
{"prompt": "\n override fun onPause() {\n        grabChangelog?.cancel(true)", "choices": [{"text": "        super.onPause()\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        grabChangelog?.cancel(true)\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        if (requestCode == 100 && resultCode == Activity.RESULT_OK) {\n            val changelog = data?.getStringExtra(\"changelog\")\n            if (changelog!= null) {\n                changelogText.text = changelog\n            }\n        }\n    }\n\n    private fun getChangelog() {\n       "}], "metadata": {"task_id": "Iconify/79", "ground_truth": "\n        super.onPause()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\Changelog.kt"}}
{"prompt": "\n override fun onStop() {\n        grabChangelog?.cancel(true)", "choices": [{"text": "        super.onStop()\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        grabChangelog?.cancel(true)\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        if (requestCode == 100 && resultCode == Activity.RESULT_OK) {\n            val changelog = data?.getStringExtra(\"changelog\")\n            if (changelog!= null) {\n                changelogText.text = changelog\n            }\n        }\n    }\n\n    override fun onOptionsItemSelected(item:"}], "metadata": {"task_id": "Iconify/80", "ground_truth": "\n        super.onStop()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\Changelog.kt"}}
{"prompt": "\n override fun onDestroy() {\n        grabChangelog?.cancel(true)", "choices": [{"text": "        super.onDestroy()\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        if (requestCode == REQUEST_CODE_PICK_FILE) {\n            if (resultCode == Activity.RESULT_OK) {\n                val uri = data?.data\n                if (uri!= null) {\n                    val path = FileUtils.getPath(this, uri)\n                    if (path!= null) {\n                        val file = File(path)\n                        if (file.exists()) {\n                            val intent = Intent"}], "metadata": {"task_id": "Iconify/81", "ground_truth": "\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\Changelog.kt"}}
{"prompt": "\n import java.util.regex.Pattern\nimport com.drdisagree.iconify.R\nfun usernameToLink(str: String): String {\n            val regexPattern = \"@([A-Za-z\\\\d_-]+)\"\n            val pattern = Pattern.compile(regexPattern)\n            val matcher = pattern.matcher(str)\n            val sb = StringBuffer()\n\n            while (matcher.find()) {\n                val username = matcher.group(1)\n                val link = \"<a href=\\\"https://github.com/$username\\\">@$username</a>\"\n                matcher.appendReplacement(sb, link)\n            }", "choices": [{"text": "\n            matcher.appendTail(sb)\n            return sb.toString()\n        }\n\nfun String.toHtml(): Spanned {\n    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n        Html.fromHtml(this, Html.FROM_HTML_MODE_LEGACY)\n    } else {\n        Html.fromHtml(this)\n    }\n}\n\nfun String.toHtml(context: Context): Spanned {\n    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n        Html.fromHtml(this, Html"}], "metadata": {"task_id": "Iconify/82", "ground_truth": "\n            matcher.appendTail(sb)\n\n            return sb.toString()\n        }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\Changelog.kt"}}
{"prompt": "\nvar monetAccentListener CompoundButton.OnCheckedChangeListener\nvar binding FragmentColorEngineBinding\nvar monetGradientListener CompoundButton.OnCheckedChangeListener\n private fun enableMonetAccent() {", "choices": [{"text": " monetAccentListener = CompoundButton.OnCheckedChangeListener { buttonView, isChecked ->\n if (isChecked) {\n binding.monetAccent.isChecked = false\n binding.monetGradient.isChecked = false\n }\n }\n binding.monetAccent.setOnCheckedChangeListener(monetAccentListener)\n }\n private fun enableMonetGradient() {\n monetGradientListener = CompoundButton.OnCheckedChangeListener { buttonView, isChecked ->\n if (isChecked) {\n binding.monetAccent.isChecked = false\n binding.monetGradient.isChecked = false\n }\n }\n binding."}], "metadata": {"task_id": "Iconify/83", "ground_truth": "        enableOverlay(\"IconifyComponentAMAC.overlay\")\n        BasicColors.disableAccentColors()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\ColorEngine.kt"}}
{"prompt": "\nvar monetGradientListener CompoundButton.OnCheckedChangeListener\nvar monetAccentListener CompoundButton.OnCheckedChangeListener\nvar binding FragmentColorEngineBinding\n private fun enableMonetGradient() {", "choices": [{"text": " monetGradient.isChecked = true\n monetGradientListener = CompoundButton.OnCheckedChangeListener { buttonView, isChecked ->\n if (isChecked) {\n monetGradient.isChecked = true\n monetAccent.isChecked = false\n }\n }\n monetGradient.setOnCheckedChangeListener(monetGradientListener)\n }\n private fun enableMonetAccent() {\n monetAccent.isChecked = true\n monetAccentListener = CompoundButton.OnCheckedChangeListener { buttonView, isChecked ->\n if (isChecked) {\n monetAccent.isChecked = true\n monetGradient.isChecked = false\n"}], "metadata": {"task_id": "Iconify/84", "ground_truth": "        enableOverlay(\"IconifyComponentAMGC.overlay\")\n        BasicColors.disableAccentColors()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\ColorEngine.kt"}}
{"prompt": "\n import com.drdisagree.iconify.config.Prefs.getString\nimport com.drdisagree.iconify.common.Preferences.STR_NULL\nimport com.drdisagree.iconify.common.Preferences.COLOR_ACCENT_SECONDARY\nimport com.drdisagree.iconify.common.Preferences.COLOR_ACCENT_PRIMARY\nimport com.drdisagree.iconify.R\nprivate fun applyDefaultColors() {\n        if (shouldUseDefaultColors()) {\n            if (getString(COLOR_ACCENT_PRIMARY) == STR_NULL) {\n                BasicColors.applyDefaultPrimaryColors()\n            } else {\n                BasicColors.applyPrimaryColors()\n            }\n\n            if (getString(COLOR_ACCENT_SECONDARY) == STR_NULL) {\n                BasicColors.applyDefaultSecondaryColors()", "choices": [{"text": "            } else {\n                BasicColors.applySecondaryColors()\n            }\n        }\n    }\n\nprivate fun shouldUseDefaultColors(): Boolean {\n        return getString(COLOR_ACCENT_PRIMARY) == STR_NULL && getString(COLOR_ACCENT_SECONDARY) == STR_NULL\n    }\n\nprivate fun BasicColors.applyDefaultPrimaryColors() {\n        setPrimaryColor(ContextCompat.getColor(context, R.color.colorPrimary))\n        setPrimaryDarkColor(ContextCompat.getColor(context, R.color.colorPrimaryDark))\n    }\n\nprivate fun BasicColors.applyPrimaryColors() {"}], "metadata": {"task_id": "Iconify/85", "ground_truth": "            } else {\n                BasicColors.applySecondaryColors()\n            }\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\ColorEngine.kt"}}
{"prompt": "\n import com.drdisagree.iconify.utils.extension.TaskExecutor\nimport com.drdisagree.iconify.R\noverride fun onStop() {\n        if (checkForUpdate?.status == TaskExecutor.Status.PENDING ||\n            checkForUpdate?.status == TaskExecutor.Status.RUNNING\n        ) {", "choices": [{"text": "            checkForUpdate?.cancel()\n        }\n        super.onStop()\n    }\n\n"}], "metadata": {"task_id": "Iconify/87", "ground_truth": "            checkForUpdate?.cancel(true)\n        }\n\n        super.onStop()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\Home.kt"}}
{"prompt": "\nvar binding FragmentIconPackBinding\nvar loadingDialog LoadingDialog?\n override fun onDestroy() {\n        loadingDialog?.dismiss()", "choices": [{"text": "        super.onDestroy()\n    }\n\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_icon_pack, container, false)\n        binding.lifecycleOwner = this\n        binding.viewModel = viewModel\n        binding.executePendingBindings()\n        return binding.root\n    }\n\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        viewModel.getIconPacks()\n        viewModel.iconPacks.observe"}], "metadata": {"task_id": "Iconify/88", "ground_truth": "\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\IconPack.kt"}}
{"prompt": "\nvar binding FragmentIconShapeBinding\nvar loadingDialog LoadingDialog?\n override fun onDestroy() {\n        loadingDialog?.dismiss()", "choices": [{"text": "        super.onDestroy()\n    }\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = DataBindingUtil.setContentView(this, R.layout.fragment_icon_shape)\n        binding.lifecycleOwner = this\n        binding.viewModel = viewModel\n        binding.executePendingBindings()\n        loadingDialog = LoadingDialog(this)\n        loadingDialog?.show()\n        viewModel.getIconShape()\n        viewModel.iconShape.observe(this, Observer {\n            loadingDialog?.dismiss()\n            binding.iconShape = it\n        })\n    }\n\n"}], "metadata": {"task_id": "Iconify/89", "ground_truth": "\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\IconShape.kt"}}
{"prompt": "\n private fun cloneList(src: List<MutableList<Any>>): List<MutableList<Any>> {\n        val cloned: MutableList<MutableList<Any>> = ArrayList()\n\n        for (sublist in src) {", "choices": [{"text": "            val sublistClone: MutableList<Any> = ArrayList()\n            for (element in sublist) {\n                sublistClone.add(element)\n            }\n            cloned.add(sublistClone)\n        }\n\n        return cloned\n    }\n}\n<file_sep>/src/main/kotlin/com/github/jimschubert/kotlin/algorithms/sorting/QuickSort.kt\npackage com.github.jimschubert.kotlin.algorithms.sorting\n\nimport com.github.jimschubert.kotlin.algorithms.sorting.Sorting.swap\n\nclass QuickSort {\n    companion"}], "metadata": {"task_id": "Iconify/92", "ground_truth": "            cloned.add(ArrayList(sublist))\n        }\n\n        return cloned\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\MonetEngine.kt"}}
{"prompt": "\n override fun onStart() {\n        super.onStart()", "choices": [{"text": "        if (mGoogleApiClient!= null) {\n            mGoogleApiClient!!.connect()\n        }\n    }\n\n    override fun onStop() {\n        super.onStop()\n        if (mGoogleApiClient!= null) {\n            mGoogleApiClient!!.disconnect()\n        }\n    }\n\n    override fun onConnected(p0: Bundle?) {\n        mLastLocation = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient)\n        if (mLastLocation!= null) {\n            mLatitude = mLastLocation!!.latitude\n            mLongitude = mLastLocation!!.longitude\n            mLocation = LatLng(mLatitude, mLongitude)"}], "metadata": {"task_id": "Iconify/95", "ground_truth": "\n        EventBus.getDefault().register(this)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\MonetEngine.kt"}}
{"prompt": "\n import org.greenrobot.eventbus.EventBus\noverride fun onStop() {\n        EventBus.getDefault().unregister(this)", "choices": [{"text": "        super.onStop()\n    }\n"}], "metadata": {"task_id": "Iconify/96", "ground_truth": "\n        super.onStop()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\MonetEngine.kt"}}
{"prompt": "\n import com.topjohnwu.superuser.Shell\nprivate fun initializeLeftGestureSwitch(): Boolean {\n        return try {\n            Shell.cmd(\n                \"settings get secure back_gesture_inset_scale_left\"", "choices": [{"text": "            ).exec().use {\n                it.waitFor()\n                it.exitValue() == 0\n            }\n        } catch (e: Exception) {\n            false\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/97", "ground_truth": "            ).exec().out[0].toInt() == -1\n        } catch (ignored: Exception) {\n            false\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\NavigationBar.kt"}}
{"prompt": "\n import com.topjohnwu.superuser.Shell\nimport com.drdisagree.iconify.R\nprivate fun initializeRightGestureSwitch(): Boolean {\n        return try {\n            Shell.cmd(\n                \"settings get secure back_gesture_inset_scale_right\"", "choices": [{"text": "            ).exec().use {\n                it.waitFor()\n                it.exitValue() == 0\n            }\n        } catch (e: Exception) {\n            false\n        }\n    }\n\nprivate fun setRightGestureSwitch(enabled: Boolean) {\n        Shell.cmd(\n            \"settings put secure back_gesture_inset_scale_right ${if (enabled) 1 else 0}\"\n        ).exec()\n    }\n\nprivate fun initializeLeftGestureSwitch(): Boolean {\n        return try {\n            Shell.cmd(\n                \"settings get secure back_gesture_inset_scale_left\"\n            ).exec()."}], "metadata": {"task_id": "Iconify/98", "ground_truth": "            ).exec().out[0].toInt() == -1\n        } catch (ignored: Exception) {\n            false\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\NavigationBar.kt"}}
{"prompt": "\nvar binding FragmentNotificationBinding\nvar loadingDialog LoadingDialog?\n override fun onDestroy() {\n        loadingDialog?.dismiss()", "choices": [{"text": "        super.onDestroy()\n    }\n\noverride fun onCreateView(\n    inflater: LayoutInflater, container: ViewGroup?,\n    savedInstanceState: Bundle?\n): View? {\n    binding = FragmentNotificationBinding.inflate(inflater, container, false)\n    return binding.root\n}\n\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n    super.onViewCreated(view, savedInstanceState)\n    loadingDialog = LoadingDialog(requireContext())\n    loadingDialog?.show()\n    binding.recyclerView.layoutManager = LinearLayoutManager(requireContext())\n    binding.recyclerView.adapter = NotificationAdapter(requireContext"}], "metadata": {"task_id": "Iconify/99", "ground_truth": "\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\Notification.kt"}}
{"prompt": "\nvar binding FragmentNotificationPixelBinding\nvar loadingDialog LoadingDialog?\n override fun onDestroy() {\n        loadingDialog?.dismiss()", "choices": [{"text": "        super.onDestroy()\n    }\n\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_notification_pixel, container, false)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        loadingDialog = LoadingDialog(activity)\n        loadingDialog?.show()\n        binding.recyclerView.layoutManager = LinearLayoutManager(activity)\n        binding.recyclerView.adapter = Notification"}], "metadata": {"task_id": "Iconify/100", "ground_truth": "\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\NotificationPixel.kt"}}
{"prompt": "\n override fun onDestroy() {\n        loadingDialog?.dismiss()", "choices": [{"text": "        super.onDestroy()\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        if (requestCode == 100 && resultCode == Activity.RESULT_OK) {\n            val result = data?.getStringExtra(\"result\")\n            if (result!= null) {\n                val json = JSONObject(result)\n                val data = json.getJSONObject(\"data\")\n                val id = data.getString(\"id\")\n                val name = data.getString(\"name\")\n                val phone = data.getString(\""}], "metadata": {"task_id": "Iconify/101", "ground_truth": "\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\ProgressBar.kt"}}
{"prompt": "\n import com.drdisagree.iconify.common.Preferences.QS_TEXT_COLOR_VARIANT_NORMAL\nimport com.drdisagree.iconify.common.Preferences.QS_TEXT_COLOR_VARIANT\nimport com.drdisagree.iconify.R\nprivate fun replaceVariant(vararg args: String): Array<String?> {\n        val newArgs = arrayOfNulls<String>(args.size)\n\n        for (i in args.indices) {\n            if (args[i].contains(\"QST5\")) continue\n\n            newArgs[i] = args[i].replace(\n                \"QST\",\n                if (selectedVariant == QS_TEXT_COLOR_VARIANT_NORMAL) \"QSNT\" else \"QSPT\"", "choices": [{"text": "            )\n        }\n\n        return newArgs\n    }\n\nprivate fun replaceVariant(vararg args: String): Array<String?> {\n        val newArgs = arrayOfNulls<String>(args.size)\n\n        for (i in args.indices) {\n            if (args[i].contains(\"QST5\")) continue\n\n            newArgs[i] = args[i].replace(\n                \"QST\",\n                if (selectedVariant == QS_TEXT_COLOR_VARIANT_NORMAL) \"QSNT\" else \"QSPT\"\n            )\n        }\n\n        return newArgs\n    }\n\nprivate fun replaceVariant"}], "metadata": {"task_id": "Iconify/102", "ground_truth": "            )\n        }\n\n        return newArgs\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\QsIconLabel.kt"}}
{"prompt": "\n private fun replaceVariant(arg: String): String {\n        return if (arg.contains(\"QST5\")) arg else arg.replace(\n            \"QST\",", "choices": [{"text": "            \"QST5\"\n        )\n    }\n}\n\n"}], "metadata": {"task_id": "Iconify/103", "ground_truth": "            if (selectedVariant == QS_TEXT_COLOR_VARIANT_NORMAL) \"QSNT\" else \"QSPT\"\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\QsIconLabel.kt"}}
{"prompt": "\nvar binding FragmentQsPanelMarginBinding\nvar loadingDialog LoadingDialog?\nval isQsMarginEnabled Boolean\n override fun onDestroy() {\n        loadingDialog?.dismiss()", "choices": [{"text": "        super.onDestroy()\n    }\noverride fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_qs_panel_margin, container, false)\n        binding.lifecycleOwner = this\n        binding.viewModel = viewModel\n        binding.qsPanelMargin.setPadding(0, 0, 0, 0)\n        binding.qsPanelMargin.setBackgroundColor(Color.TRANSPARENT)\n        binding.qsPanelMargin.setPadding(0, 0, 0, 0)\n        binding.qsPanel"}], "metadata": {"task_id": "Iconify/105", "ground_truth": "\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\QsPanelMargin.kt"}}
{"prompt": "\n import com.drdisagree.iconify.ui.models.MenuModel\nimport com.drdisagree.iconify.ui.adapters.MenuAdapter\nimport com.drdisagree.iconify.R\nprivate fun initActivityItems(): MenuAdapter {\n        val qsShapeActivityList = ArrayList<MenuModel>().apply {\n            add(\n                MenuModel(\n                    R.id.action_qsPanelTile_to_qsPanelTilePixel,\n                    resources.getString(R.string.activity_title_pixel_variant),\n                    resources.getString(R.string.activity_desc_pixel_variant),\n                    R.drawable.ic_pixel_device\n                )", "choices": [{"text": "            )\n            add(\n                MenuModel(\n                    R.id.action_qsPanelTile_to_qsPanelTilePixel,\n                    resources.getString(R.string.activity_title_pixel_variant),\n                    resources.getString(R.string.activity_desc_pixel_variant),\n                    R.drawable.ic_pixel_device\n                )\n            )\n            add(\n                MenuModel(\n                    R.id.action_qsPanelTile_to_qsPanelTilePixel,\n                    resources.getString(R.string.activity_title_pixel_variant),\n                    resources.getString(R.string.activity_"}], "metadata": {"task_id": "Iconify/106", "ground_truth": "            )\n        }\n\n        return MenuAdapter(requireContext(), qsShapeActivityList)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\QsPanelTile.kt"}}
{"prompt": "\n import android.content.res.Configuration\nimport android.annotation.SuppressLint\n @SuppressLint(\"NotifyDataSetChanged\")\n    override fun onConfigurationChanged(newConfig: Configuration) {\n        super.onConfigurationChanged(newConfig)", "choices": [{"text": "        if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {\n            //landscape\n            val params = gridView.layoutParams\n            params.height = 1000\n            gridView.layoutParams = params\n            gridView.requestLayout()\n        } else {\n            //portrait\n            val params = gridView.layoutParams\n            params.height = 1000\n            gridView.layoutParams = params\n            gridView.requestLayout()\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/107", "ground_truth": "\n        adapter!!.notifyDataSetChanged()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\QsPanelTile.kt"}}
{"prompt": "\nvar binding FragmentQsPanelTileBinding\nvar loadingDialog LoadingDialog?\nvar adapter ConcatAdapter?\n override fun onDestroy() {\n        loadingDialog?.dismiss()", "choices": [{"text": "        super.onDestroy()\n    }\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_qs_panel_tile, container, false)\n        return binding.root\n    }\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        loadingDialog = LoadingDialog(activity)\n        loadingDialog?.show()\n        adapter = ConcatAdapter(activity)\n        binding.recyclerView.adapter = adapter\n        binding.re"}], "metadata": {"task_id": "Iconify/108", "ground_truth": "\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\QsPanelTile.kt"}}
{"prompt": "\n import android.content.res.Configuration\nimport android.annotation.SuppressLint\n @SuppressLint(\"NotifyDataSetChanged\")\n    override fun onConfigurationChanged(newConfig: Configuration) {\n        super.onConfigurationChanged(newConfig)", "choices": [{"text": "        if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {\n            //landscape\n            val params = gridView.layoutParams\n            params.height = 1000\n            gridView.layoutParams = params\n            gridView.requestLayout()\n        } else {\n            //portrait\n            val params = gridView.layoutParams\n            params.height = 1000\n            gridView.layoutParams = params\n            gridView.requestLayout()\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/109", "ground_truth": "\n        adapter!!.notifyDataSetChanged()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\QsPanelTilePixel.kt"}}
{"prompt": "\nvar binding FragmentQsPanelTilePixelBinding\nvar loadingDialog LoadingDialog?\nvar adapter QsShapeAdapter?\n override fun onDestroy() {\n        loadingDialog?.dismiss()", "choices": [{"text": "        super.onDestroy()\n    }\noverride fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = DataBindingUtil.setContentView(this, R.layout.fragment_qs_panel_tile_pixel)\n        binding.lifecycleOwner = this\n        binding.viewModel = viewModel\n        loadingDialog = LoadingDialog(this)\n        loadingDialog?.show()\n        viewModel.getQsShapeList()\n        viewModel.qsShapeList.observe(this, Observer {\n            loadingDialog?.dismiss()\n            adapter = QsShapeAdapter(it)\n            binding.recyclerView.adapter = adapter\n        })\n   "}], "metadata": {"task_id": "Iconify/110", "ground_truth": "\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\QsPanelTilePixel.kt"}}
{"prompt": "\nvar binding FragmentQsRowColumnBinding\nvar loadingDialog LoadingDialog?\n override fun onDestroy() {\n        loadingDialog?.dismiss()", "choices": [{"text": "        super.onDestroy()\n    }\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_qs_row_column, container, false)\n        binding.lifecycleOwner = this\n        binding.viewModel = viewModel\n        binding.executePendingBindings()\n        loadingDialog = LoadingDialog(requireContext())\n        loadingDialog?.show()\n        viewModel.getQsRowColumn(requireContext())\n        viewModel.qsRowColumn.observe(viewLifecycleOwner, Observer {\n            loadingDialog?.dismiss()\n            binding.qsRowColumn"}], "metadata": {"task_id": "Iconify/111", "ground_truth": "\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\QsRowColumn.kt"}}
{"prompt": "\nvar binding FragmentQsTileSizeBinding\nvar loadingDialog LoadingDialog?\nval isQsTileHeightEnabled Boolean\n override fun onDestroy() {\n        loadingDialog?.dismiss()", "choices": [{"text": "        super.onDestroy()\n    }\noverride fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_qs_tile_size, container, false)\n        binding.lifecycleOwner = this\n        binding.viewModel = viewModel\n        binding.executePendingBindings()\n        isQsTileHeightEnabled = resources.getBoolean(R.bool.config_qsTileHeightEnabled)\n        if (isQsTileHeightEnabled) {\n            binding.qsTileSize.visibility = View.VISIBLE\n        } else {\n            binding.qsTileSize."}], "metadata": {"task_id": "Iconify/113", "ground_truth": "\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\QsTileSize.kt"}}
{"prompt": "\n override fun onDestroy() {\n        loadingDialog?.hide()", "choices": [{"text": "        super.onDestroy()\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        if (requestCode == 100 && resultCode == Activity.RESULT_OK) {\n            val result = data?.getStringExtra(\"result\")\n            if (result!= null) {\n                val json = JSONObject(result)\n                val data = json.getJSONObject(\"data\")\n                val id = data.getString(\"id\")\n                val name = data.getString(\"name\")\n                val phone = data.getString(\""}], "metadata": {"task_id": "Iconify/114", "ground_truth": "\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\Settings.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.widget.RelativeLayout\nimport android.view.View\nprivate fun refreshLayout(layout: RelativeLayout) {\n        for (i in 0 until binding.iconPacksList.childCount) {\n            val child = binding.iconPacksList.getChildAt(i)\n                .findViewById<RelativeLayout>(R.id.icon_pack_child)\n\n            itemSelected(\n                child,", "choices": [{"text": "\n import com.drdisagree.iconify.R\nimport android.widget.RelativeLayout\nimport android.view.View\nprivate fun refreshLayout(layout: RelativeLayout) {\n        for (i in 0 until binding.iconPacksList.childCount) {\n            val child = binding.iconPacksList.getChildAt(i)\n               .findViewById<RelativeLayout>(R.id.icon_pack_child)\n\n            itemSelected(\n                child,\n                child.tag.toString() == layout.tag.toString()\n            )\n        }\n    }\n\nprivate fun itemSelected(view: View, selected: Boolean) {\n        val icon = view.findViewById<ImageView>(R.id.icon)\n        val iconText = view.findViewById<TextView>(R.id.icon_text)\n        val iconPack = view.findViewById<TextView>(R.id.icon_pack)\n        val iconPackText = view.findViewById<TextView>(R.id.icon_pack_text)\n\n        if (selected) {\n            icon.setImageResource(R.drawable."}], "metadata": {"task_id": "Iconify/117", "ground_truth": "                child === layout,\n                i + 1\n            )\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\SettingsIcons.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.widget.RelativeLayout\nimport android.view.View\nprivate fun refreshBackground() {\n        for (i in 0 until binding.iconPacksList.childCount) {\n            val child = binding.iconPacksList.getChildAt(i)\n                .findViewById<RelativeLayout>(R.id.icon_pack_child)\n\n            itemSelected(\n                child,", "choices": [{"text": "\n import com.drdisagree.iconify.R\nimport android.widget.RelativeLayout\nimport android.view.View\nprivate fun refreshBackground() {\n        for (i in 0 until binding.iconPacksList.childCount) {\n            val child = binding.iconPacksList.getChildAt(i)\n               .findViewById<RelativeLayout>(R.id.icon_pack_child)\n\n            itemSelected(\n                child,\n                child.tag.toString() == selectedIconPack\n            )\n        }\n    }\n\nprivate fun itemSelected(view: View, selected: Boolean) {\n        val iconPackChild = view.findViewById<RelativeLayout>(R.id.icon_pack_child)\n        val iconPackName = view.findViewById<TextView>(R.id.icon_pack_name)\n        val iconPackIcon = view.findViewById<ImageView>(R.id.icon_pack_icon)\n\n        if (selected) {\n            iconPackChild.setBackgroundResource(R.drawable.icon_pack_selected)\n            iconPackName"}], "metadata": {"task_id": "Iconify/118", "ground_truth": "                Prefs.getInt(SELECTED_SETTINGS_ICONS_SET, 1) == i + 1,\n                i + 1\n            )\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\SettingsIcons.kt"}}
{"prompt": " import com.drdisagree.iconify.R\nimport android.widget.RelativeLayout\nvar loadingDialog LoadingDialog?\nvar selectedIcon\nvar selectedIconColor\nprivate fun enableOnClickListener(layout: RelativeLayout, index: Int) {\n        // Set onClick operation for options in list", "choices": [{"text": "        layout.setOnClickListener {\n            // Set selected icon\n            selectedIcon = index\n            // Set selected icon color\n            selectedIconColor = layout.context.resources.getColor(R.color.colorPrimary)\n            // Set selected icon color\n            layout.setBackgroundColor(selectedIconColor)\n            // Hide dialog\n            loadingDialog?.dismiss()\n        }\n    }\n\nfun showIconPicker(context: Context) {\n        // Initialize dialog\n        loadingDialog = LoadingDialog(context)\n        // Show dialog\n        loadingDialog?.show()\n        // Set onClick operation for options in list\n        enableOnClickListener(loadingDialog!!.layout.icon_1,"}], "metadata": {"task_id": "Iconify/119", "ground_truth": "        layout.setOnClickListener {\n            refreshLayout(layout)\n            selectedIcon = index + 1\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\SettingsIcons.kt"}}
{"prompt": "\nvar binding FragmentSettingsIconsBinding\nvar selectedShape\nvar loadingDialog LoadingDialog?\n override fun onDestroy() {\n        loadingDialog?.dismiss()", "choices": [{"text": "        super.onDestroy()\n    }\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = DataBindingUtil.setContentView(this, R.layout.fragment_settings_icons)\n        binding.lifecycleOwner = this\n        binding.viewModel = viewModel\n        binding.viewModel?.getIcons()\n        binding.viewModel?.getShapes()\n        binding.viewModel?.getColors()\n        binding.viewModel?.getFonts()\n        binding.viewModel?.getFonts()\n        binding.viewModel?.getFonts()\n        binding.viewModel?.getFonts()\n        binding.viewModel?.getFonts()\n        binding."}], "metadata": {"task_id": "Iconify/120", "ground_truth": "\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\SettingsIcons.kt"}}
{"prompt": "\n override fun onStart() {\n        super.onStart()", "choices": [{"text": "        if (mGoogleApiClient!= null) {\n            mGoogleApiClient!!.connect()\n        }\n    }\n\n    override fun onStop() {\n        super.onStop()\n        if (mGoogleApiClient!= null) {\n            mGoogleApiClient!!.disconnect()\n        }\n    }\n\n    override fun onConnected(p0: Bundle?) {\n        mLastLocation = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient)\n        if (mLastLocation!= null) {\n            mLatitude = mLastLocation!!.latitude\n            mLongitude = mLastLocation!!.longitude\n            mLocation = LatLng(mLatitude, mLongitude)"}], "metadata": {"task_id": "Iconify/124", "ground_truth": "\n        EventBus.getDefault().register(this)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\Statusbar.kt"}}
{"prompt": "\n override fun onStop() {\n        super.onStop()", "choices": [{"text": "        if (mGoogleApiClient!= null && mGoogleApiClient.isConnected) {\n            mGoogleApiClient.disconnect()\n        }\n    }\n\n    override fun onConnectionFailed(connectionResult: ConnectionResult) {\n        Log.e(TAG, \"onConnectionFailed: $connectionResult\")\n    }\n\n    override fun onConnected(bundle: Bundle?) {\n        Log.i(TAG, \"onConnected\")\n        mLocationRequest = LocationRequest.create()\n        mLocationRequest!!.priority = LocationRequest.PRIORITY_HIGH_ACCURACY\n        mLocationRequest!!.setInterval(UPDATE_INTERVAL)\n        mLocationRequest!!.setFastest"}], "metadata": {"task_id": "Iconify/125", "ground_truth": "\n        EventBus.getDefault().unregister(this)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\Statusbar.kt"}}
{"prompt": "\nvar binding FragmentSwitchBinding\nvar loadingDialog LoadingDialog?\n override fun onDestroy() {\n        loadingDialog?.dismiss()", "choices": [{"text": "        super.onDestroy()\n    }\n\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_switch, container, false)\n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        binding.switch1.setOnCheckedChangeListener { buttonView, isChecked ->\n            if (isChecked) {\n                binding.switch1.text = \"ON\"\n            } else {\n                binding"}], "metadata": {"task_id": "Iconify/126", "ground_truth": "\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\Switch.kt"}}
{"prompt": "\nvar binding FragmentToastFrameBinding\nvar loadingDialog LoadingDialog?\n override fun onDestroy() {\n        loadingDialog?.dismiss()", "choices": [{"text": "        super.onDestroy()\n    }\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = DataBindingUtil.setContentView(this, R.layout.fragment_toast_frame)\n        binding.lifecycleOwner = this\n        binding.viewModel = viewModel\n        binding.toastFrame.setBackgroundColor(Color.parseColor(\"#000000\"))\n        binding.toastFrame.setTextColor(Color.parseColor(\"#ffffff\"))\n        binding.toastFrame.setTextSize(TypedValue.COMPLEX_UNIT_SP, 18f)\n        binding.toastFrame.setGravity"}], "metadata": {"task_id": "Iconify/127", "ground_truth": "\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\ToastFrame.kt"}}
{"prompt": "\n import com.drdisagree.iconify.ui.utils.ViewHelper.setHeader\nimport com.drdisagree.iconify.databinding.FragmentTweaksBinding\nimport com.drdisagree.iconify.R\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n        binding = FragmentTweaksBinding.inflate(inflater, container, false)\n        val view: View = binding.getRoot()\n\n        // Header\n        setHeader(\n            requireContext(),\n            getParentFragmentManager(),\n            binding.header.toolbar,\n            R.string.navbar_tweaks\n        )", "choices": [{"text": "\n        return view\n    }\n}\n<file_sep>/app/src/main/java/com/drdisagree/iconify/ui/fragments/HomeFragment.kt\npackage com.drdisagree.iconify.ui.fragments\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\nimport com.drdisagree.iconify.databinding.FragmentHomeBinding\nimport com.drdisagree.iconify.ui.utils.ViewHelper.setHeader\nimport com.drdis"}], "metadata": {"task_id": "Iconify/128", "ground_truth": "\n        addItem(initTweaksItemList(view))\n\n        return view\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\Tweaks.kt"}}
{"prompt": "\nvar binding FragmentUiRoundnessBinding\nvar loadingDialog LoadingDialog?\n override fun onDestroy() {\n        loadingDialog?.dismiss()", "choices": [{"text": "        super.onDestroy()\n    }\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = DataBindingUtil.setContentView(this, R.layout.fragment_ui_roundness)\n        binding.lifecycleOwner = this\n        binding.viewModel = viewModel\n        binding.executePendingBindings()\n        loadingDialog = LoadingDialog(this)\n        loadingDialog?.show()\n        viewModel.getRoundness()\n        viewModel.roundness.observe(this, Observer {\n            loadingDialog?.dismiss()\n            binding.roundness = it\n        })\n    }\n}\n<file_sep>/app/src"}], "metadata": {"task_id": "Iconify/130", "ground_truth": "\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\UiRoundness.kt"}}
{"prompt": "\nvar binding FragmentVolumePanelBinding\nvar infoDialog InfoDialog?\nvar loadingDialog LoadingDialog?\n override fun onDestroy() {\n        loadingDialog?.dismiss()", "choices": [{"text": "        infoDialog?.dismiss()\n        super.onDestroy()\n    }\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = DataBindingUtil.setContentView(this, R.layout.fragment_volume_panel)\n        binding.lifecycleOwner = this\n        binding.viewModel = viewModel\n        binding.volumePanel.setVolumePanelListener(this)\n        binding.volumePanel.setVolumePanelListener(this)\n        binding.volumePanel.setVolumePanelListener(this)\n        binding.volumePanel.setVolumePanelListener(this)\n        binding.volumePanel.setVolumePanel"}], "metadata": {"task_id": "Iconify/131", "ground_truth": "\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\VolumePanel.kt"}}
{"prompt": "\n import com.drdisagree.iconify.ui.widgets.MenuWidget\nimport androidx.navigation.Navigation.findNavController\nimport android.view.View\nimport android.view.Menu\nimport android.app.Activity\nprivate fun addItem(pack: ArrayList<Array<Any>>) {\n        for (i in pack.indices) {\n            val menu = MenuWidget(requireActivity())\n\n            menu.setTitle(pack[i][1] as String)\n            menu.setSummary(pack[i][2] as String)\n            menu.setIcon(pack[i][3] as Int)\n            menu.setEndArrowVisibility(View.VISIBLE)\n            menu.setOnClickListener {\n                findNavController(menu).navigate(\n                    (pack[i][0] as Int)\n                )", "choices": [{"text": "            }\n            menu.setMenuWidget(menu)\n            menu.setMenuWidget(menu)\n            menu.setMenuWidget(menu)\n            menu.setMenuWidget(menu)\n            menu.setMenuWidget(menu)\n            menu.setMenuWidget(menu)\n            menu.setMenuWidget(menu)\n            menu.setMenuWidget(menu)\n            menu.setMenuWidget(menu)\n            menu.setMenuWidget(menu)\n            menu.setMenuWidget(menu)\n            menu.setMenuWidget(menu)\n            menu.setMenuWidget(menu)\n            menu.setMenuWidget(menu)"}], "metadata": {"task_id": "Iconify/134", "ground_truth": "            }\n\n            binding.xposedList.addView(menu)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\XposedMenu.kt"}}
{"prompt": "\n override fun onDestroy() {\n        try {\n            handler.removeCallbacks(checkSystemUIHooked)", "choices": [{"text": "        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n        super.onDestroy()\n    }\n\n    private fun initView() {\n        val window = window\n        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)\n        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)\n        window.statusBarColor = Color.TRANSPARENT\n        window.decorView.systemUiVisibility = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN or View.SYSTEM_UI_FLAG_LAYOUT_STABLE\n        window.decor"}], "metadata": {"task_id": "Iconify/135", "ground_truth": "        } catch (ignored: Exception) {\n        }\n\n        super.onDestroy()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\XposedMenu.kt"}}
{"prompt": "\n override fun onPause() {\n        try {\n            handler.removeCallbacks(checkSystemUIHooked)", "choices": [{"text": "        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n        super.onPause()\n    }\n\n    override fun onDestroy() {\n        try {\n            handler.removeCallbacks(checkSystemUIHooked)\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n        super.onDestroy()\n    }\n\n    override fun onBackPressed() {\n        try {\n            handler.removeCallbacks(checkSystemUIHooked)\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n        super.onBackPressed()\n    }\n\n    override fun onWindowFocusChanged(hasFocus"}], "metadata": {"task_id": "Iconify/137", "ground_truth": "        } catch (ignored: Exception) {\n        }\n\n        super.onPause()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\fragments\\XposedMenu.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.content.Context\nimport android.app.Activity\n @JvmStatic\n    fun animateZoom(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_zoom_enter,", "choices": [{"text": "            R.anim.animate_zoom_exit\n        )\n    }\n<file_sep>/app/src/main/java/com/drdisagree/iconify/ui/main/MainActivity.kt\npackage com.drdisagree.iconify.ui.main\n\nimport android.os.Bundle\nimport android.view.Menu\nimport android.view.MenuItem\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.appcompat.widget.SearchView\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.drdisagree"}], "metadata": {"task_id": "Iconify/138", "ground_truth": "            R.anim.animate_zoom_exit\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\Animatoo.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.content.Context\nimport android.app.Activity\n @JvmStatic\n    fun animateFade(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_fade_enter,", "choices": [{"text": "            R.anim.animate_fade_exit\n        )\n    }\n<file_sep>/app/src/main/java/com/drdisagree/iconify/ui/main/MainViewModel.kt\npackage com.drdisagree.iconify.ui.main\n\nimport android.app.Application\nimport androidx.lifecycle.AndroidViewModel\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport com.drdisagree.iconify.data.Icon\nimport com.drdisagree.iconify.data.IconRepository\nimport com.drdisagree.iconify.data"}], "metadata": {"task_id": "Iconify/139", "ground_truth": "            R.anim.animate_fade_exit\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\Animatoo.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.content.Context\nimport android.app.Activity\n @JvmStatic\n    fun animateWindmill(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_windmill_enter,", "choices": [{"text": "            R.anim.animate_windmill_exit\n        )\n    }\n}<file_sep>/app/src/main/java/com/drdisagree/iconify/ui/main/MainActivity.kt\npackage com.drdisagree.iconify.ui.main\n\nimport android.os.Bundle\nimport android.view.Menu\nimport android.view.MenuItem\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.appcompat.widget.Toolbar\nimport androidx.navigation.NavController\nimport androidx.navigation.findNavController\nimport androidx.navigation.ui.AppBarConfiguration\nimport androidx."}], "metadata": {"task_id": "Iconify/140", "ground_truth": "            R.anim.animate_windmill_exit\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\Animatoo.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.content.Context\nimport android.app.Activity\n @JvmStatic\n    fun animateSpin(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_spin_enter,", "choices": [{"text": "            R.anim.animate_spin_exit\n        )\n    }\n<file_sep>/app/src/main/java/com/drdisagree/iconify/ui/main/MainViewModel.kt\npackage com.drdisagree.iconify.ui.main\n\nimport android.app.Application\nimport androidx.lifecycle.AndroidViewModel\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport com.drdisagree.iconify.data.Icon\nimport com.drdisagree.iconify.data.IconRepository\nimport com.drdisagree.iconify.data"}], "metadata": {"task_id": "Iconify/141", "ground_truth": "            R.anim.animate_spin_exit\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\Animatoo.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.content.Context\nimport android.app.Activity\n @JvmStatic\n    fun animateDiagonal(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_diagonal_right_enter,", "choices": [{"text": "            R.anim.animate_diagonal_right_exit\n        )\n    }\n<file_sep>/app/src/main/java/com/drdisagree/iconify/ui/main/MainViewModel.kt\npackage com.drdisagree.iconify.ui.main\n\nimport android.app.Application\nimport androidx.lifecycle.AndroidViewModel\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport com.drdisagree.iconify.data.Icon\nimport com.drdisagree.iconify.data.IconRepository\nimport com.drdisagree.iconify"}], "metadata": {"task_id": "Iconify/142", "ground_truth": "            R.anim.animate_diagonal_right_exit\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\Animatoo.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.content.Context\nimport android.app.Activity\n @JvmStatic\n    fun animateSplit(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_split_enter,", "choices": [{"text": "            R.anim.animate_split_exit\n        )\n    }\n<file_sep>/app/src/main/java/com/drdisagree/iconify/ui/main/MainViewModel.kt\npackage com.drdisagree.iconify.ui.main\n\nimport android.app.Application\nimport androidx.lifecycle.AndroidViewModel\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport com.drdisagree.iconify.data.Icon\nimport com.drdisagree.iconify.data.IconRepository\nimport com.drdisagree.iconify.data"}], "metadata": {"task_id": "Iconify/143", "ground_truth": "            R.anim.animate_split_exit\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\Animatoo.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.content.Context\nimport android.app.Activity\n @JvmStatic\n    fun animateShrink(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_shrink_enter,", "choices": [{"text": "            R.anim.animate_shrink_exit\n        )\n    }\n\n    @JvmStatic\n    fun animateGrow(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_grow_enter,\n            R.anim.animate_grow_exit\n        )\n    }\n\n    @JvmStatic\n    fun animateShrink(context: Context, enter: Int, exit: Int) {\n        (context as Activity).overridePendingTransition(enter, exit)\n    }\n\n    @JvmStatic\n    fun animateGrow(context: Context, enter: Int, exit: Int) {\n        (context as Activity"}], "metadata": {"task_id": "Iconify/144", "ground_truth": "            R.anim.animate_shrink_exit\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\Animatoo.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.content.Context\nimport android.app.Activity\n @JvmStatic\n    fun animateCard(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_card_enter,", "choices": [{"text": "            R.anim.animate_card_exit\n        )\n    }\n<file_sep>/app/src/main/java/com/drdisagree/iconify/ui/main/MainViewModel.kt\npackage com.drdisagree.iconify.ui.main\n\nimport android.app.Application\nimport androidx.lifecycle.AndroidViewModel\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport com.drdisagree.iconify.data.Icon\nimport com.drdisagree.iconify.data.IconRepository\nimport com.drdisagree.iconify.data"}], "metadata": {"task_id": "Iconify/145", "ground_truth": "            R.anim.animate_card_exit\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\Animatoo.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.content.Context\nimport android.app.Activity\n @JvmStatic\n    fun animateInAndOut(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_in_out_enter,", "choices": [{"text": "            R.anim.animate_in_out_exit\n        )\n    }\n<file_sep>/app/src/main/java/com/drdisagree/iconify/ui/main/MainActivity.kt\npackage com.drdisagree.iconify.ui.main\n\nimport android.os.Bundle\nimport android.view.Menu\nimport android.view.MenuItem\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.appcompat.widget.Toolbar\nimport androidx.navigation.NavController\nimport androidx.navigation.findNavController\nimport androidx.navigation.ui.AppBarConfiguration\nimport androidx."}], "metadata": {"task_id": "Iconify/146", "ground_truth": "            R.anim.animate_in_out_exit\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\Animatoo.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.content.Context\nimport android.app.Activity\n @JvmStatic\n    fun animateSwipeLeft(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_swipe_left_enter,", "choices": [{"text": "            R.anim.animate_swipe_left_exit\n        )\n    }\n\n    @JvmStatic\n    fun animateSwipeRight(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_swipe_right_enter,\n            R.anim.animate_swipe_right_exit\n        )\n    }\n\n    @JvmStatic\n    fun animateSwipeUp(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_swipe_up_enter,\n            R.anim.animate_swipe_up_exit\n        )\n    }\n\n    @JvmStatic"}], "metadata": {"task_id": "Iconify/147", "ground_truth": "            R.anim.animate_swipe_left_exit\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\Animatoo.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.content.Context\nimport android.app.Activity\n @JvmStatic\n    fun animateSwipeRight(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_swipe_right_enter,", "choices": [{"text": "            R.anim.animate_swipe_right_exit\n        )\n    }\n\n    @JvmStatic\n    fun animateSwipeLeft(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_swipe_left_enter,\n            R.anim.animate_swipe_left_exit\n        )\n    }\n\n    @JvmStatic\n    fun animateSwipeUp(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_swipe_up_enter,\n            R.anim.animate_swipe_up_exit\n        )\n    }\n\n    @JvmStatic"}], "metadata": {"task_id": "Iconify/148", "ground_truth": "            R.anim.animate_swipe_right_exit\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\Animatoo.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.content.Context\nimport android.app.Activity\n @JvmStatic\n    fun animateSlideLeft(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_slide_left_enter,", "choices": [{"text": "            R.anim.animate_slide_left_exit\n        )\n    }\n\n    @JvmStatic\n    fun animateSlideRight(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_slide_right_enter,\n            R.anim.animate_slide_right_exit\n        )\n    }\n\n    @JvmStatic\n    fun animateSlideUp(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_slide_up_enter,\n            R.anim.animate_slide_up_exit\n        )\n    }\n\n    @JvmStatic"}], "metadata": {"task_id": "Iconify/149", "ground_truth": "            R.anim.animate_slide_left_exit\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\Animatoo.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.content.Context\nimport android.app.Activity\n @JvmStatic\n    fun animateSlideRight(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_slide_in_left,", "choices": [{"text": "            R.anim.animate_slide_out_right\n        )\n    }\n\n    @JvmStatic\n    fun animateSlideLeft(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_slide_in_right,\n            R.anim.animate_slide_out_left\n        )\n    }\n\n    @JvmStatic\n    fun animateSlideUp(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_slide_in_up,\n            R.anim.animate_slide_out_up\n        )\n    }\n\n    @JvmStatic"}], "metadata": {"task_id": "Iconify/150", "ground_truth": "            R.anim.animate_slide_out_right\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\Animatoo.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.content.Context\nimport android.app.Activity\n @JvmStatic\n    fun animateSlideDown(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_slide_down_enter,", "choices": [{"text": "            R.anim.animate_slide_down_exit\n        )\n    }\n\n    @JvmStatic\n    fun animateSlideUp(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_slide_up_enter,\n            R.anim.animate_slide_up_exit\n        )\n    }\n\n    @JvmStatic\n    fun animateSlideLeft(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_slide_left_enter,\n            R.anim.animate_slide_left_exit\n        )\n    }\n\n    @JvmStatic"}], "metadata": {"task_id": "Iconify/151", "ground_truth": "            R.anim.animate_slide_down_exit\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\Animatoo.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.content.Context\nimport android.app.Activity\n @JvmStatic\n    fun animateSlideUp(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_slide_up_enter,", "choices": [{"text": "            R.anim.animate_slide_up_exit\n        )\n    }\n\n    @JvmStatic\n    fun animateSlideDown(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_slide_down_enter,\n            R.anim.animate_slide_down_exit\n        )\n    }\n\n    @JvmStatic\n    fun animateSlideLeft(context: Context) {\n        (context as Activity).overridePendingTransition(\n            R.anim.animate_slide_left_enter,\n            R.anim.animate_slide_left_exit\n        )\n    }\n\n    @JvmStatic"}], "metadata": {"task_id": "Iconify/152", "ground_truth": "            R.anim.animate_slide_up_exit\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\Animatoo.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\noverride fun scrollHorizontallyBy(\n        dx: Int,\n        recycler: RecyclerView.Recycler,\n        state: RecyclerView.State\n    ): Int {\n        val scrolled = super.scrollHorizontallyBy(dx, recycler, state)", "choices": [{"text": "        if (scrolled!= 0) {\n            val layoutManager = parent as LinearLayoutManager\n            val firstVisibleItemPosition = layoutManager.findFirstVisibleItemPosition()\n            val lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition()\n            val firstVisibleItemView = layoutManager.findViewByPosition(firstVisibleItemPosition)\n            val lastVisibleItemView = layoutManager.findViewByPosition(lastVisibleItemPosition)\n            val firstVisibleItemViewLeft = firstVisibleItemView?.left?: 0\n            val lastVisibleItemViewRight = lastVisibleItemView?.right?: 0\n            val firstVisibleItem"}], "metadata": {"task_id": "Iconify/153", "ground_truth": "\n        updateScaleFactors()\n\n        return scrolled\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\CarouselLayoutManager.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\noverride fun onLayoutChildren(recycler: RecyclerView.Recycler, state: RecyclerView.State) {\n        super.onLayoutChildren(recycler, state)", "choices": [{"text": "        if (itemCount == 0) {\n            return\n        }\n        val item = recycler.getViewForPosition(0)\n        addView(item)\n        measureChildWithMargins(item, 0, 0)\n        val width = getDecoratedMeasuredWidth(item)\n        val height = getDecoratedMeasuredHeight(item)\n        layoutDecorated(item, 0, 0, width, height)\n    }\n\n"}], "metadata": {"task_id": "Iconify/154", "ground_truth": "\n        updateScaleFactors()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\CarouselLayoutManager.kt"}}
{"prompt": "\n import com.bumptech.glide.request.transition.Transition\nimport com.bumptech.glide.request.target.CustomTarget\nimport com.bumptech.glide.Glide\nimport android.view.ViewGroup\nimport android.graphics.drawable.Drawable\n @JvmStatic\n    fun setDrawable(viewGroup: ViewGroup, drawable: Drawable?) {\n        Glide.with(viewGroup.context).load(drawable).into(object : CustomTarget<Drawable?>() {\n            override fun onResourceReady(\n                resource: Drawable,\n                transition: Transition<in Drawable?>?\n            ) {\n                viewGroup.background = resource", "choices": [{"text": "            }\n\n            override fun onLoadCleared(placeholder: Drawable?) {}\n        })\n    }\n}<file_sep>/app/src/main/java/com/example/myapplication/ui/main/MainViewModel.kt\npackage com.example.myapplication.ui.main\n\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport com.example.myapplication.data.model.User\nimport com.example.myapplication.data.repository.UserRepository\nimport com.example.myapplication.utils.Resource\nimport kotlinx.coroutines.CoroutineScope"}], "metadata": {"task_id": "Iconify/157", "ground_truth": "            }\n\n            override fun onLoadCleared(placeholder: Drawable?) {}\n        })\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\ViewBindingHelpers.kt"}}
{"prompt": "\n import com.bumptech.glide.request.transition.Transition\nimport com.bumptech.glide.request.target.CustomTarget\nimport com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions\nimport com.bumptech.glide.Glide\nimport android.view.ViewGroup\nimport android.graphics.drawable.Drawable\n @JvmStatic\n    fun setDrawableWithAnimation(viewGroup: ViewGroup, drawable: Drawable?) {\n        Glide.with(viewGroup.context).load(drawable)\n            .transition(DrawableTransitionOptions.withCrossFade())\n            .into(object : CustomTarget<Drawable?>() {\n                override fun onResourceReady(\n                    resource: Drawable,\n                    transition: Transition<in Drawable?>?\n                ) {\n                    viewGroup.background = resource", "choices": [{"text": "\n import com.bumptech.glide.request.transition.Transition\nimport com.bumptech.glide.request.target.CustomTarget\nimport com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions\nimport com.bumptech.glide.Glide\nimport android.view.ViewGroup\nimport android.graphics.drawable.Drawable\n @JvmStatic\n    fun setDrawableWithAnimation(viewGroup: ViewGroup, drawable: Drawable?) {\n        Glide.with(viewGroup.context).load(drawable)\n           .transition(DrawableTransitionOptions.withCrossFade())\n           .into(object : CustomTarget<Drawable?>() {\n                override fun onResourceReady(\n                    resource: Drawable,\n                    transition: Transition<in Drawable?>?\n                ) {\n                    viewGroup.background = resource\n                }\n\n                override fun onLoadCleared(placeholder: Drawable?) {}\n            })\n    }\n}<file_sep>/app/src/main/java/com/example/myapplication/ui/main/MainViewModel.kt\npackage com.example.myapplication.ui.main\n\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport com.example.myapplication.data.model.User\nimport com.example.myapplication.data.repository.UserRepository\nimport com.example.myapplication.utils.Resource\nimport kotlinx.coroutines.CoroutineScope"}], "metadata": {"task_id": "Iconify/158", "ground_truth": "                }\n\n                override fun onLoadCleared(placeholder: Drawable?) {}\n            })\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\ViewBindingHelpers.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport androidx.viewpager2.widget.ViewPager2\nimport androidx.recyclerview.widget.RecyclerView\n @JvmStatic\n    fun disableNestedScrolling(viewPager: ViewPager2) {\n        var recyclerView: RecyclerView? = null\n\n        for (i in 0 until viewPager.childCount) {\n            if (viewPager.getChildAt(i) is RecyclerView) {\n                recyclerView = viewPager.getChildAt(i) as RecyclerView\n                break\n            }\n        }", "choices": [{"text": "\n        if (recyclerView!= null) {\n            recyclerView.apply {\n                isNestedScrollingEnabled = false\n                isMotionEventSplittingEnabled = false\n            }\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/161", "ground_truth": "\n        if (recyclerView != null) {\n            recyclerView.isNestedScrollingEnabled = false\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\ViewHelper.kt"}}
{"prompt": "\n import androidx.appcompat.widget.Toolbar\nimport androidx.appcompat.app.AppCompatActivity\nimport android.content.Context\n @JvmStatic\n    fun setHeader(context: Context, toolbar: Toolbar, title: Int) {\n        (context as AppCompatActivity).setSupportActionBar(toolbar)\n        context.supportActionBar?.setDisplayHomeAsUpEnabled(true)", "choices": [{"text": "        context.supportActionBar?.setDisplayShowHomeEnabled(true)\n        context.supportActionBar?.setDisplayShowTitleEnabled(false)\n        context.supportActionBar?.setHomeAsUpIndicator(R.drawable.ic_back)\n        context.supportActionBar?.setTitle(title)\n    }\n}<file_sep>/app/src/main/java/com/example/myapplication/ui/home/HomeFragment.kt\npackage com.example.myapplication.ui.home\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup"}], "metadata": {"task_id": "Iconify/162", "ground_truth": "        context.supportActionBar?.setDisplayShowHomeEnabled(true)\n        toolbar.setTitle(title)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\utils\\ViewHelper.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.CoroutineScope\nprivate fun startInstallationTask() {\n        if (installationTask?.isActive != true) {\n            installationTask = CoroutineScope(Dispatchers.IO).launch {\n                onPreExecute()", "choices": [{"text": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.CoroutineScope\nprivate fun startInstallationTask() {\n        if (installationTask?.isActive!= true) {\n            installationTask = CoroutineScope(Dispatchers.IO).launch {\n                onPreExecute()\n                val result = installApk()\n                onPostExecute(result)\n            }\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/166", "ground_truth": "                doInBackground()\n                onPostExecute()\n            }\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\views\\OnboardingView.kt"}}
{"prompt": "\n import com.airbnb.lottie.value.LottieValueCallback\nimport com.airbnb.lottie.SimpleColorFilter\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nprivate fun setLottieColorFilter() {\n        val callback = LottieValueCallback<ColorFilter>(SimpleColorFilter(buttonTextColor))\n        binding.loadingAnim.addValueCallback(", "choices": [{"text": "            LottieProperty.COLOR_FILTER,\n            callback\n        )\n    }\n\n"}], "metadata": {"task_id": "Iconify/169", "ground_truth": "            KeyPath(\"**\"),\n            LottieProperty.COLOR_FILTER,\n            callback\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\views\\OnboardingView.kt"}}
{"prompt": "\nvar hasErroredOut\nvar clickedButton\nvar binding ViewOnboardingPageBinding\n override fun onDetachedFromWindow() {\n        installationTask?.cancel()", "choices": [{"text": "        super.onDetachedFromWindow()\n    }\n\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        binding = ViewOnboardingPageBinding.bind(view)\n        binding.onboardingPage.setBackgroundColor(Color.WHITE)\n        binding.onboardingPage.setPadding(0, 0, 0, 0)\n        binding.onboardingPage.clipToOutline = true\n        binding.onboardingPage.clipChildren = true\n        binding.onboardingPage.clipChildren = true\n        binding.onboardingPage.clip"}], "metadata": {"task_id": "Iconify/170", "ground_truth": "\n        super.onDetachedFromWindow()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\views\\OnboardingView.kt"}}
{"prompt": "\n import android.graphics.Rect\noverride fun onBoundsChange(rect: Rect) {", "choices": [{"text": "    super.onBoundsChange(rect)\n    val width = rect.width()\n    val height = rect.height()\n    val radius = Math.min(width, height) / 2\n    mOval.set(rect)\n    mOval.left += radius\n    mOval.top += radius\n    mOval.right -= radius\n    mOval.bottom -= radius\n}\n\n"}], "metadata": {"task_id": "Iconify/173", "ground_truth": "        super.onBoundsChange(rect)\n        onLevelChange(level)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\views\\RoundedCornerProgressDrawable.kt"}}
{"prompt": "\n override fun onLayoutDirectionChanged(level: Int): Boolean {", "choices": [{"text": " return super.onLayoutDirectionChanged(level)\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/174", "ground_truth": "        onLevelChange(getLevel())\n        return super.onLayoutDirectionChanged(level)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\views\\RoundedCornerProgressDrawable.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nprivate fun buildEntries() {\n        mEntries = resources.getTextArray(arrayResId)\n\n        val mValues: MutableList<String> = ArrayList()\n        for (i in mEntries.indices) {", "choices": [{"text": "            mValues.add(mEntries[i].toString())\n        }\n        mAdapter = ArrayAdapter(this, R.layout.list_item, mValues)\n        mAdapter.setDropDownViewResource(R.layout.list_item)\n        mListView.adapter = mAdapter\n    }\n"}], "metadata": {"task_id": "Iconify/176", "ground_truth": "            mValues.add(i.toString())\n        }\n\n        mEntryValues = mValues.toTypedArray<CharSequence>()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\BottomSheetWidget.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.widget.TextView\nimport android.view.View\nprivate fun setSelectedText(summary: String) {\n        summaryTextView.text = if (showSelectedPrefix) context.getString(\n            R.string.opt_selected1,", "choices": [{"text": "            summary\n        ) else summary\n    }\n\n"}], "metadata": {"task_id": "Iconify/177", "ground_truth": "            summary\n        ) else summary\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\BottomSheetWidget.kt"}}
{"prompt": "\nvar selectedIndex\nvar showSelectedPrefix\nvar iconImageView ImageView\n fun setIcon(icon: Int) {", "choices": [{"text": "    iconImageView.setImageResource(icon)\n}\n\n"}], "metadata": {"task_id": "Iconify/178", "ground_truth": "        iconImageView.setImageResource(icon)\n        iconImageView.setVisibility(VISIBLE)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\BottomSheetWidget.kt"}}
{"prompt": "\n import android.graphics.drawable.Drawable\nfun setIcon(drawable: Drawable?) {", "choices": [{"text": "    this.setImageDrawable(drawable)\n}\n\n"}], "metadata": {"task_id": "Iconify/179", "ground_truth": "        iconImageView.setImageDrawable(drawable)\n        iconImageView.setVisibility(VISIBLE)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\BottomSheetWidget.kt"}}
{"prompt": "\n import android.graphics.drawable.Drawable\nfun setDrawable(drawable: Array<Drawable>) {", "choices": [{"text": "    for (i in 0 until drawable.size) {\n        if (i == 0) {\n            binding.iv1.setImageDrawable(drawable[i])\n        } else if (i == 1) {\n            binding.iv2.setImageDrawable(drawable[i])\n        } else if (i == 2) {\n            binding.iv3.setImageDrawable(drawable[i])\n        } else if (i == 3) {\n            binding.iv4.setImageDrawable(drawable[i])\n        } else if (i == 4) {\n            binding.iv5.setImageDrawable(drawable"}], "metadata": {"task_id": "Iconify/180", "ground_truth": "        mDrawables = drawable\n        mAdapter?.setDrawables(drawable)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\BottomSheetWidget.kt"}}
{"prompt": "\nvar showSelectedPrefix\nvar selectedIndex\nvar arrayResId\n fun setCurrentValue(currentValue: String) {", "choices": [{"text": "    this.currentValue = currentValue\n}\n\nfun getCurrentValue(): String {\n    return currentValue\n}\n\nfun setSelectedIndex(selectedIndex: Int) {\n    this.selectedIndex = selectedIndex\n}\n\nfun getSelectedIndex(): Int {\n    return selectedIndex\n}\n\nfun setArrayResId(arrayResId: Int) {\n    this.arrayResId = arrayResId\n}\n\nfun getArrayResId(): Int {\n    return arrayResId\n}\n\nfun setOnItemSelectedListener(onItemSelectedListener: OnItemSelectedListener) {\n    this.onItemSelectedListener = onItemSelected"}], "metadata": {"task_id": "Iconify/181", "ground_truth": "        mValue = currentValue\n        mAdapter?.setCurrentValue(currentValue)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\BottomSheetWidget.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nfun setSelectedIndex(selectedIndex: Int) {\n        var idx = selectedIndex\n        val list = listOf(*resources.getStringArray(arrayResId))\n\n        if (idx < 0 || idx >= list.size) {\n            idx = 0\n        }\n\n        this.selectedIndex = idx", "choices": [{"text": "        this.text = list[idx]\n    }\n\n"}], "metadata": {"task_id": "Iconify/182", "ground_truth": "        mValue = idx.toString()\n\n        setSelectedText(list[idx])\n        initBottomSheetDialog()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\BottomSheetWidget.kt"}}
{"prompt": "\nvar mBottomSheetDialog BottomSheetDialog\nvar onItemClickListener OnItemClickListener?\nvar titleTextView TextView\n override fun onDetachedFromWindow() {", "choices": [{"text": " super.onDetachedFromWindow()\n mBottomSheetDialog.dismiss()\n }\n\n override fun onAttachedToWindow() {\n super.onAttachedToWindow()\n mBottomSheetDialog.show()\n }\n\n override fun onCreate(savedInstanceState: Bundle?) {\n super.onCreate(savedInstanceState)\n setContentView(R.layout.activity\\_main)\n titleTextView = findViewById(R.id.titleTextView)\n titleTextView.text = \"BottomSheetDialog\"\n mBottomSheetDialog = BottomSheetDialog(this)\n mBottomSheetDialog.setContentView(R.layout.bottom\\_sheet\\_dialog)"}], "metadata": {"task_id": "Iconify/183", "ground_truth": "        mBottomSheetDialog.dismiss()\n        super.onDetachedFromWindow()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\BottomSheetWidget.kt"}}
{"prompt": "\n import android.view.View\noverride fun onItemClick(view: View, position: Int) {\n        setSelectedIndex(position)", "choices": [{"text": "        notifyDataSetChanged()\n    }\n\n"}], "metadata": {"task_id": "Iconify/184", "ground_truth": "        mBottomSheetDialog.dismiss()\n        onItemClickListener?.onItemClick(position)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\BottomSheetWidget.kt"}}
{"prompt": "\n import android.os.Parcelable\nimport android.os.Parcel\noverride fun onSaveInstanceState(): Parcelable {\n        val superState = super.onSaveInstanceState()\n        val ss = SavedState(superState)", "choices": [{"text": "        ss.isDrawerOpen = isDrawerOpen\n        return ss\n    }\noverride fun onRestoreInstanceState(state: Parcelable) {\n        if (state!is SavedState) {\n            super.onRestoreInstanceState(state)\n            return\n        }\n        super.onRestoreInstanceState(state.superState)\n        if (state.isDrawerOpen) {\n            openDrawer()\n        }\n    }\n"}], "metadata": {"task_id": "Iconify/185", "ground_truth": "        ss.selectedIndex = selectedIndex\n        return ss\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\BottomSheetWidget.kt"}}
{"prompt": "\n import android.os.Parcel\noverride fun writeToParcel(dest: Parcel, flags: Int) {", "choices": [{"text": " dest.writeString(this.name)\n dest.writeString(this.email)\n dest.writeString(this.password)\n dest.writeString(this.phone)\n dest.writeString(this.address)\n dest.writeString(this.city)\n dest.writeString(this.state)\n dest.writeString(this.country)\n dest.writeString(this.zip)\n dest.writeString(this.image)\n dest.writeString(this.gender)\n dest.writeString(this.dob)\n dest.writeString(this.about)\n dest.writeString(this.status)\n dest"}], "metadata": {"task_id": "Iconify/187", "ground_truth": "            super.writeToParcel(dest, flags)\n            dest.writeInt(selectedIndex)\n        }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\BottomSheetWidget.kt"}}
{"prompt": "\n import com.drdisagree.iconify.ui.activities.MainActivity\nimport androidx.fragment.app.FragmentActivity\nimport android.graphics.Color\nfun setColorPickerListener(\n        activity: FragmentActivity?,\n        defaultColor: Int,\n        showPresets: Boolean,\n        showAlphaSlider: Boolean,\n        showColorShades: Boolean\n    ) {\n        require(activity is MainActivity) { \"Activity must be instance of HomePage\" }\n        previewColor = defaultColor\n\n        container.setOnClickListener {\n            beforeColorPickerListener?.onColorPickerShown()\n\n            activity.showColorPickerDialog(\n                colorPickerDialogId,\n                selectedColor,\n                showPresets,", "choices": [{"text": "                showAlphaSlider,\n                showColorShades\n            )\n        }\n    }\n\nfun setColorPickerListener(\n        activity: FragmentActivity?,\n        defaultColor: Int,\n        showPresets: Boolean,\n        showAlphaSlider: Boolean,\n        showColorShades: Boolean,\n        showColorSwatches: Boolean\n    ) {\n        require(activity is MainActivity) { \"Activity must be instance of HomePage\" }\n        previewColor = defaultColor\n\n        container.setOnClickListener {\n            beforeColorPickerListener?.onColorPickerShown()\n\n            activity.showColorPickerDialog(\n                colorPickerDialogId,\n                selectedColor,\n                show"}], "metadata": {"task_id": "Iconify/188", "ground_truth": "                showAlphaSlider,\n                showColorShades\n            )\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\ColorPickerSmallWidget.kt"}}
{"prompt": "\n import org.greenrobot.eventbus.Subscribe\nimport com.drdisagree.iconify.ui.events.ColorSelectedEvent\nimport android.graphics.Color\n @Suppress(\"unused\")\n    @Subscribe\n    fun onColorSelected(event: ColorSelectedEvent) {\n        if (event.dialogId == colorPickerDialogId) {\n            previewColor = event.selectedColor", "choices": [{"text": "            colorPicker.setColor(previewColor)\n            colorPicker.invalidate()\n        }\n    }\n"}], "metadata": {"task_id": "Iconify/191", "ground_truth": "            colorPickerListener?.onColorSelected(event.selectedColor)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\ColorPickerSmallWidget.kt"}}
{"prompt": " import org.greenrobot.eventbus.Subscribe\nimport com.drdisagree.iconify.ui.events.ColorDismissedEvent\nimport android.graphics.Color\nvar colorPickerDialogId\nvar beforeColorPickerListener BeforeColorPickerListener?\nvar colorPickerListener OnColorPickerListener?\n @Suppress(\"unused\")\n    @Subscribe\n    fun onDialogDismissed(event: ColorDismissedEvent) {\n        if (event.dialogId == colorPickerDialogId) {", "choices": [{"text": "            beforeColorPickerListener?.onColorPickerDismissed()\n            colorPickerListener?.onColorPickerDismissed()\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/192", "ground_truth": "            afterColorPickerListener?.onColorPickerDismissed()\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\ColorPickerSmallWidget.kt"}}
{"prompt": "\nvar beforeColorPickerListener BeforeColorPickerListener?\nvar container LinearLayout\nvar titleTextView TextView\n override fun onAttachedToWindow() {", "choices": [{"text": " super.onAttachedToWindow()\n beforeColorPickerListener = context as BeforeColorPickerListener\n }\n\n override fun onFinishInflate() {\n super.onFinishInflate()\n container = findViewById(R.id.container)\n titleTextView = findViewById(R.id.title)\n }\n\n override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {\n super.onMeasure(widthMeasureSpec, heightMeasureSpec)\n val width = MeasureSpec.getSize(widthMeasureSpec)\n val height = MeasureSpec.getSize(heightMeasureSpec)\n val size = Math"}], "metadata": {"task_id": "Iconify/193", "ground_truth": "        super.onAttachedToWindow()\n        EventBus.getDefault().register(this)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\ColorPickerSmallWidget.kt"}}
{"prompt": "\nvar colorPickerDialogId\nvar beforeColorPickerListener BeforeColorPickerListener?\nvar afterColorPickerListener AfterColorPickerListener?\n override fun onDetachedFromWindow() {", "choices": [{"text": "        super.onDetachedFromWindow()\n        if (colorPickerDialogId!= null) {\n            ColorPickerDialog.destroyDialog(colorPickerDialogId)\n            colorPickerDialogId = null\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/194", "ground_truth": "        super.onDetachedFromWindow()\n        EventBus.getDefault().unregister(this)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\ColorPickerSmallWidget.kt"}}
{"prompt": "\n import android.os.Parcelable\nimport android.os.Parcel\noverride fun onSaveInstanceState(): Parcelable {\n        val superState = super.onSaveInstanceState()\n        val ss = SavedState(superState)", "choices": [{"text": "        ss.isDrawerOpen = isDrawerOpen\n        return ss\n    }\noverride fun onRestoreInstanceState(state: Parcelable) {\n        if (state!is SavedState) {\n            super.onRestoreInstanceState(state)\n            return\n        }\n        super.onRestoreInstanceState(state.superState)\n        if (state.isDrawerOpen) {\n            openDrawer()\n        }\n    }\n"}], "metadata": {"task_id": "Iconify/195", "ground_truth": "        ss.selectedColor = selectedColor\n        return ss\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\ColorPickerSmallWidget.kt"}}
{"prompt": "\n import android.os.Parcel\noverride fun writeToParcel(dest: Parcel, flags: Int) {", "choices": [{"text": " dest.writeString(this.name)\n dest.writeString(this.email)\n dest.writeString(this.password)\n dest.writeString(this.phone)\n dest.writeString(this.address)\n dest.writeString(this.city)\n dest.writeString(this.state)\n dest.writeString(this.country)\n dest.writeString(this.zip)\n dest.writeString(this.image)\n dest.writeString(this.gender)\n dest.writeString(this.dob)\n dest.writeString(this.about)\n dest.writeString(this.status)\n dest"}], "metadata": {"task_id": "Iconify/197", "ground_truth": "            super.writeToParcel(dest, flags)\n            dest.writeInt(selectedColor)\n        }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\ColorPickerSmallWidget.kt"}}
{"prompt": "\n import com.drdisagree.iconify.ui.activities.MainActivity\nimport androidx.fragment.app.FragmentActivity\nimport android.graphics.Color\nfun setColorPickerListener(\n        activity: FragmentActivity?,\n        defaultColor: Int,\n        showPresets: Boolean,\n        showAlphaSlider: Boolean,\n        showColorShades: Boolean\n    ) {\n        require(activity is MainActivity) { \"Activity must be instance of HomePage\" }\n        previewColor = defaultColor\n\n        container.setOnClickListener {\n            beforeColorPickerListener?.onColorPickerShown()\n\n            activity.showColorPickerDialog(\n                colorPickerDialogId,\n                selectedColor,\n                showPresets,", "choices": [{"text": "                showAlphaSlider,\n                showColorShades\n            )\n        }\n    }\n\nfun setColorPickerListener(\n        activity: FragmentActivity?,\n        defaultColor: Int,\n        showPresets: Boolean,\n        showAlphaSlider: Boolean,\n        showColorShades: Boolean,\n        showColorSwatches: Boolean\n    ) {\n        require(activity is MainActivity) { \"Activity must be instance of HomePage\" }\n        previewColor = defaultColor\n\n        container.setOnClickListener {\n            beforeColorPickerListener?.onColorPickerShown()\n\n            activity.showColorPickerDialog(\n                colorPickerDialogId,\n                selectedColor,\n                show"}], "metadata": {"task_id": "Iconify/198", "ground_truth": "                showAlphaSlider,\n                showColorShades\n            )\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\ColorPickerWidget.kt"}}
{"prompt": "\n import org.greenrobot.eventbus.Subscribe\nimport com.drdisagree.iconify.ui.events.ColorSelectedEvent\nimport android.graphics.Color\n @Suppress(\"unused\")\n    @Subscribe\n    fun onColorSelected(event: ColorSelectedEvent) {\n        if (event.dialogId == colorPickerDialogId) {\n            previewColor = event.selectedColor", "choices": [{"text": "            colorPicker.setColor(previewColor)\n            colorPicker.invalidate()\n        }\n    }\n"}], "metadata": {"task_id": "Iconify/200", "ground_truth": "            colorPickerListener?.onColorSelected(event.selectedColor)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\ColorPickerWidget.kt"}}
{"prompt": " import org.greenrobot.eventbus.Subscribe\nimport com.drdisagree.iconify.ui.events.ColorDismissedEvent\nimport android.graphics.Color\nvar colorPickerDialogId\nvar beforeColorPickerListener BeforeColorPickerListener?\nvar colorPickerListener OnColorPickerListener?\n @Suppress(\"unused\")\n    @Subscribe\n    fun onDialogDismissed(event: ColorDismissedEvent) {\n        if (event.dialogId == colorPickerDialogId) {", "choices": [{"text": "            beforeColorPickerListener?.onColorPickerDismissed()\n            colorPickerListener?.onColorPickerDismissed()\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/201", "ground_truth": "            afterColorPickerListener?.onColorPickerDismissed()\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\ColorPickerWidget.kt"}}
{"prompt": "\nvar beforeColorPickerListener BeforeColorPickerListener?\nvar afterColorPickerListener AfterColorPickerListener?\nvar colorPickerListener OnColorPickerListener?\n override fun onAttachedToWindow() {", "choices": [{"text": "        super.onAttachedToWindow()\n        beforeColorPickerListener = object : BeforeColorPickerListener {\n            override fun onBeforeColorPicker(color: Int) {\n                // do something\n            }\n        }\n        afterColorPickerListener = object : AfterColorPickerListener {\n            override fun onAfterColorPicker(color: Int) {\n                // do something\n            }\n        }\n        colorPickerListener = object : OnColorPickerListener {\n            override fun onColorPicker(color: Int) {\n                // do something\n            }\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/202", "ground_truth": "        super.onAttachedToWindow()\n        EventBus.getDefault().register(this)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\ColorPickerWidget.kt"}}
{"prompt": "\nvar colorPickerDialogId\nvar beforeColorPickerListener BeforeColorPickerListener?\nvar afterColorPickerListener AfterColorPickerListener?\n override fun onDetachedFromWindow() {", "choices": [{"text": "        super.onDetachedFromWindow()\n        if (colorPickerDialogId!= null) {\n            ColorPickerDialog.destroyDialog(colorPickerDialogId)\n            colorPickerDialogId = null\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/203", "ground_truth": "        super.onDetachedFromWindow()\n        EventBus.getDefault().unregister(this)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\ColorPickerWidget.kt"}}
{"prompt": "\n import android.os.Parcelable\nimport android.os.Parcel\noverride fun onSaveInstanceState(): Parcelable {\n        val superState = super.onSaveInstanceState()\n        val ss = SavedState(superState)", "choices": [{"text": "        ss.isDrawerOpen = isDrawerOpen\n        return ss\n    }\noverride fun onRestoreInstanceState(state: Parcelable) {\n        if (state!is SavedState) {\n            super.onRestoreInstanceState(state)\n            return\n        }\n        super.onRestoreInstanceState(state.superState)\n        if (state.isDrawerOpen) {\n            openDrawer()\n        }\n    }\n"}], "metadata": {"task_id": "Iconify/204", "ground_truth": "        ss.selectedColor = selectedColor\n        return ss\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\ColorPickerWidget.kt"}}
{"prompt": "\n import android.os.Parcel\noverride fun writeToParcel(dest: Parcel, flags: Int) {", "choices": [{"text": " dest.writeString(this.name)\n dest.writeString(this.email)\n dest.writeString(this.password)\n dest.writeString(this.phone)\n dest.writeString(this.address)\n dest.writeString(this.city)\n dest.writeString(this.state)\n dest.writeString(this.country)\n dest.writeString(this.zip)\n dest.writeString(this.image)\n dest.writeString(this.gender)\n dest.writeString(this.dob)\n dest.writeString(this.about)\n dest.writeString(this.status)\n dest"}], "metadata": {"task_id": "Iconify/206", "ground_truth": "            super.writeToParcel(dest, flags)\n            dest.writeInt(selectedColor)\n        }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\ColorPickerWidget.kt"}}
{"prompt": "\n import com.drdisagree.iconify.utils.SystemUtil\nimport com.drdisagree.iconify.R\nimport androidx.activity.result.ActivityResultLauncher\nimport android.content.Intent\nfun setActivityResultLauncher(launcher: ActivityResultLauncher<Intent?>) {\n        activityResultLauncher = launcher\n\n        buttonPicker.setOnClickListener {\n            if (!SystemUtil.hasStoragePermission()) {\n                SystemUtil.requestStoragePermission(context)\n            } else {\n                if (::activityResultLauncher.isInitialized) {", "choices": [{"text": "                    activityResultLauncher.launch(Intent(context, PickerActivity::class.java))\n                }\n            }\n        }\n    }\n<file_sep>/app/src/main/java/com/drdisagree/iconify/utils/SystemUtil.kt\npackage com.drdisagree.iconify.utils\n\nimport android.Manifest\nimport android.app.Activity\nimport android.content.Context\nimport android.content.pm.PackageManager\nimport android.os.Build\nimport androidx.core.app.ActivityCompat\nimport androidx.core.content.ContextCompat\nimport com.drdisagree"}], "metadata": {"task_id": "Iconify/207", "ground_truth": "                    FileUtil.launchFilePicker(activityResultLauncher, fileType)\n                }\n            }\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\FilePickerWidget.kt"}}
{"prompt": "\nvar iconImageView ImageView\nvar container RelativeLayout\nvar titleTextView TextView\n fun setIcon(icon: Int) {", "choices": [{"text": "    iconImageView.setImageResource(icon)\n}\n\nfun setTitle(title: String) {\n    titleTextView.text = title\n}\n\nfun setOnClickListener(listener: View.OnClickListener) {\n    container.setOnClickListener(listener)\n}\n\n"}], "metadata": {"task_id": "Iconify/209", "ground_truth": "        iconImageView.setImageResource(icon)\n        iconImageView.setVisibility(VISIBLE)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\MenuWidget.kt"}}
{"prompt": "\n import android.graphics.drawable.Drawable\nfun setIcon(drawable: Drawable?) {", "choices": [{"text": "    this.setImageDrawable(drawable)\n}\n\n"}], "metadata": {"task_id": "Iconify/210", "ground_truth": "        iconImageView.setImageDrawable(drawable)\n        iconImageView.setVisibility(VISIBLE)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\MenuWidget.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.widget.TextView\nimport android.view.View\nprivate fun setSelectedText(summary: String) {\n        summaryTextView.text = if (showSelectedPrefix) context.getString(\n            R.string.opt_selected1,", "choices": [{"text": "            summary\n        ) else summary\n    }\n\n"}], "metadata": {"task_id": "Iconify/211", "ground_truth": "            summary\n        ) else summary\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\RadioDialogWidget.kt"}}
{"prompt": "\nvar selectedIndex\nvar iconImageView ImageView\nvar titleResId\n fun setIcon(icon: Int) {", "choices": [{"text": "    iconImageView.setImageResource(icon)\n}\n\nfun setTitle(title: String) {\n    titleTextView.text = title\n}\n\nfun setIcon(icon: Drawable) {\n    iconImageView.setImageDrawable(icon)\n}\n\nfun setIcon(icon: Bitmap) {\n    iconImageView.setImageBitmap(icon)\n}\n\nfun setIcon(icon: Drawable, iconSize: Int) {\n    iconImageView.setImageDrawable(icon)\n    iconImageView.layoutParams.width = iconSize\n    iconImageView.layoutParams.height = iconSize\n}\n\nfun setIcon"}], "metadata": {"task_id": "Iconify/212", "ground_truth": "        iconImageView.setImageResource(icon)\n        iconImageView.setVisibility(VISIBLE)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\RadioDialogWidget.kt"}}
{"prompt": "\n import android.graphics.drawable.Drawable\nfun setIcon(drawable: Drawable?) {", "choices": [{"text": "    this.setImageDrawable(drawable)\n}\n\n"}], "metadata": {"task_id": "Iconify/213", "ground_truth": "        iconImageView.setImageDrawable(drawable)\n        iconImageView.setVisibility(VISIBLE)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\RadioDialogWidget.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nfun setSelectedIndex(selectedIndex: Int) {\n        var idx = selectedIndex\n        val list = listOf(*resources.getStringArray(arrayResId))\n\n        if (idx < 0 || idx >= list.size) {\n            idx = 0\n        }\n", "choices": [{"text": "//        val selectedItem = list[idx]\n//        val selectedItem = list[idx]\n//        val selectedItem = list[idx]\n//        val selectedItem = list[idx]\n//        val selectedItem = list[idx]\n//        val selectedItem = list[idx]\n//        val selectedItem = list[idx]\n//        val selectedItem = list[idx]\n//        val selectedItem = list[idx]\n//        val selectedItem = list[idx]\n//        val selectedItem = list[idx]\n//        val selectedItem ="}], "metadata": {"task_id": "Iconify/214", "ground_truth": "        this.selectedIndex = idx\n\n        setSelectedText(list[idx])\n        initRadioDialog()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\RadioDialogWidget.kt"}}
{"prompt": "\n import com.drdisagree.iconify.ui.dialogs.RadioDialog\nimport com.drdisagree.iconify.R\nprivate fun initRadioDialog() {\n        radioDialog = RadioDialog(\n            context,", "choices": [{"text": "            R.style.RadioDialog,\n            R.layout.radio_dialog,\n            R.style.RadioDialog,\n            R.style.RadioDialog,\n            R.style.RadioDialog,\n            R.style.RadioDialog,\n            R.style.RadioDialog,\n            R.style.RadioDialog,\n            R.style.RadioDialog,\n            R.style.RadioDialog,\n            R.style.RadioDialog,\n            R.style.RadioDialog,\n            R.style.RadioDialog,\n            R.style.RadioDialog,\n            R.style.RadioDialog,\n            R.style.RadioDialog"}], "metadata": {"task_id": "Iconify/215", "ground_truth": "            radioDialogId,\n            selectedIndex\n        )\n        radioDialog.setRadioDialogListener(this)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\RadioDialogWidget.kt"}}
{"prompt": "\nvar radioDialogId\nvar radioDialogListener RadioDialogListener?\nvar radioDialog RadioDialog\n override fun onDetachedFromWindow() {", "choices": [{"text": "        super.onDetachedFromWindow()\n        radioDialog.dismiss()\n    }\n\n"}], "metadata": {"task_id": "Iconify/216", "ground_truth": "        radioDialog.dismiss()\n        super.onDetachedFromWindow()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\RadioDialogWidget.kt"}}
{"prompt": "\nvar showSelectedPrefix\nvar selectedIndex\nvar iconImageView ImageView\n override fun onItemSelected(dialogId: Int, selectedIndex: Int) {\n        if (dialogId == radioDialogId) {\n            setSelectedIndex(selectedIndex)", "choices": [{"text": "            showSelectedPrefix()\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/217", "ground_truth": "            radioDialogListener?.onItemSelected(selectedIndex)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\RadioDialogWidget.kt"}}
{"prompt": "\n import android.os.Parcelable\nimport android.os.Parcel\noverride fun onSaveInstanceState(): Parcelable {\n        val superState = super.onSaveInstanceState()\n        val ss = SavedState(superState)", "choices": [{"text": "        ss.isDrawerOpen = isDrawerOpen\n        return ss\n    }\noverride fun onRestoreInstanceState(state: Parcelable) {\n        if (state!is SavedState) {\n            super.onRestoreInstanceState(state)\n            return\n        }\n        super.onRestoreInstanceState(state.superState)\n        if (state.isDrawerOpen) {\n            openDrawer()\n        }\n    }\n"}], "metadata": {"task_id": "Iconify/218", "ground_truth": "        ss.selectedIndex = selectedIndex\n        return ss\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\RadioDialogWidget.kt"}}
{"prompt": "\n import android.os.Parcel\noverride fun writeToParcel(dest: Parcel, flags: Int) {", "choices": [{"text": " dest.writeString(this.name)\n dest.writeString(this.email)\n dest.writeString(this.password)\n dest.writeString(this.phone)\n dest.writeString(this.address)\n dest.writeString(this.city)\n dest.writeString(this.state)\n dest.writeString(this.country)\n dest.writeString(this.zip)\n dest.writeString(this.image)\n dest.writeString(this.gender)\n dest.writeString(this.dob)\n dest.writeString(this.about)\n dest.writeString(this.status)\n dest"}], "metadata": {"task_id": "Iconify/220", "ground_truth": "            super.writeToParcel(dest, flags)\n            dest.writeInt(selectedIndex)\n        }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\RadioDialogWidget.kt"}}
{"prompt": "\n import java.text.DecimalFormat\nfun setIsDecimalFormat(isDecimalFormat: Boolean) {", "choices": [{"text": "    this.isDecimalFormat = isDecimalFormat\n}\n\n"}], "metadata": {"task_id": "Iconify/221", "ground_truth": "        this.isDecimalFormat = isDecimalFormat\n        setSelectedText()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\SliderWidget.kt"}}
{"prompt": "\n import java.text.DecimalFormat\nfun setDecimalFormat(decimalFormat: String) {", "choices": [{"text": "    val decimalFormat = DecimalFormat(decimalFormat)\n    val number = 123456789.123456789\n    val formattedNumber = decimalFormat.format(number)\n    println(formattedNumber)\n}\n"}], "metadata": {"task_id": "Iconify/222", "ground_truth": "        this.decimalFormat = Objects.requireNonNullElse(decimalFormat, \"#.#\")\n        setSelectedText()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\SliderWidget.kt"}}
{"prompt": "\nvar outputScale\nvar valueFormat String?\nvar materialSlider Slider\n fun setOutputScale(scale: Float) {", "choices": [{"text": "    outputScale = scale\n}\n\nfun setOutputScale(scale: Int) {\n    outputScale = scale.toFloat()\n}\n\nfun setOutputScale(scale: Double) {\n    outputScale = scale.toFloat()\n}\n\nfun setOutputScale(scale: String) {\n    outputScale = scale.toFloat()\n}\n\nfun setOutputScale(scale: Number) {\n    outputScale = scale.toFloat()\n}\n\nfun setOutputScale(scale: BigDecimal) {\n    outputScale = scale.toFloat()\n}\n\nfun setOutputScale(scale: BigInteger)"}], "metadata": {"task_id": "Iconify/223", "ground_truth": "        outputScale = scale\n        setSelectedText()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\SliderWidget.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.view.View\nfun setResetClickListener(listener: OnLongClickListener?) {\n        resetClickListener = listener\n\n        resetIcon.setOnLongClickListener { v: View ->\n            if (defaultValue == Int.MAX_VALUE) {\n                return@setOnLongClickListener false\n            }\n\n            sliderValue = defaultValue\n", "choices": [{"text": "/            slider.value = defaultValue\n            resetIcon.visibility = View.GONE\n            listener?.onLongClick(v)\n            true\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/224", "ground_truth": "            handleResetVisibility()\n            notifyOnResetClicked(v)\n            true\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\SliderWidget.kt"}}
{"prompt": "\n import com.google.android.material.slider.Slider\nimport com.drdisagree.iconify.R\nprivate fun handleResetVisibility() {\n        if (defaultValue != Int.MAX_VALUE && materialSlider.value != defaultValue.toFloat()) {", "choices": [{"text": "\n import com.google.android.material.slider.Slider\nimport com.drdisagree.iconify.R\nprivate fun handleResetVisibility() {\n        if (defaultValue!= Int.MAX_VALUE && materialSlider.value!= defaultValue.toFloat()) {\n            resetButton.visibility = View.VISIBLE\n        } else {\n            resetButton.visibility = View.GONE\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/225", "ground_truth": "            resetIcon.setVisibility(VISIBLE)\n        } else {\n            resetIcon.setVisibility(GONE)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\SliderWidget.kt"}}
{"prompt": "\n import android.os.Parcelable\nimport android.os.Parcel\noverride fun onSaveInstanceState(): Parcelable {\n        val superState = super.onSaveInstanceState()\n        val ss = SavedState(superState)", "choices": [{"text": "        ss.isDrawerOpen = isDrawerOpen\n        return ss\n    }\noverride fun onRestoreInstanceState(state: Parcelable) {\n        if (state!is SavedState) {\n            super.onRestoreInstanceState(state)\n            return\n        }\n        super.onRestoreInstanceState(state.superState)\n        if (state.isDrawerOpen) {\n            openDrawer()\n        }\n    }\n"}], "metadata": {"task_id": "Iconify/228", "ground_truth": "        ss.sliderValue = materialSlider.value\n        return ss\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\SliderWidget.kt"}}
{"prompt": "\n import android.os.Parcel\noverride fun writeToParcel(dest: Parcel, flags: Int) {", "choices": [{"text": " dest.writeString(this.name)\n dest.writeString(this.email)\n dest.writeString(this.password)\n dest.writeString(this.phone)\n dest.writeString(this.address)\n dest.writeString(this.city)\n dest.writeString(this.state)\n dest.writeString(this.country)\n dest.writeString(this.zip)\n dest.writeString(this.image)\n dest.writeString(this.gender)\n dest.writeString(this.dob)\n dest.writeString(this.about)\n dest.writeString(this.status)\n dest"}], "metadata": {"task_id": "Iconify/230", "ground_truth": "            super.writeToParcel(dest, flags)\n            dest.writeFloat(sliderValue)\n        }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\SliderWidget.kt"}}
{"prompt": "\nvar iconImageView ImageView\nvar container RelativeLayout\nvar titleTextView TextView\n fun setIcon(icon: Int) {", "choices": [{"text": "    iconImageView.setImageResource(icon)\n}\n\nfun setTitle(title: String) {\n    titleTextView.text = title\n}\n\nfun setOnClickListener(listener: View.OnClickListener) {\n    container.setOnClickListener(listener)\n}\n\n"}], "metadata": {"task_id": "Iconify/231", "ground_truth": "        iconImageView.setImageResource(icon)\n        iconImageView.setVisibility(VISIBLE)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\SwitchWidget.kt"}}
{"prompt": "\n import android.graphics.drawable.Drawable\nfun setIcon(drawable: Drawable?) {", "choices": [{"text": "    this.setImageDrawable(drawable)\n}\n\n"}], "metadata": {"task_id": "Iconify/232", "ground_truth": "        iconImageView.setImageDrawable(drawable)\n        iconImageView.setVisibility(VISIBLE)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\SwitchWidget.kt"}}
{"prompt": "\n import android.widget.TextView\nfun setSummary(summary: String?) {\n        summaryTextView.text = summary\n\n        if (summary.isNullOrEmpty()) {", "choices": [{"text": "            summaryTextView.visibility = View.GONE\n        } else {\n            summaryTextView.visibility = View.VISIBLE\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/233", "ground_truth": "            summaryTextView.visibility = GONE\n        } else {\n            summaryTextView.visibility = VISIBLE\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\ui\\widgets\\TitleWidget.kt"}}
{"prompt": "\n private static void setUnsignedInt32LittleEngian(int value, byte[] result, int offset) {\r\n    result[offset] = (byte) (value & 0xff);\r\n    result[offset + 1] = (byte) ((value >> 8) & 0xff);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/235", "ground_truth": "    result[offset + 2] = (byte) ((value >> 16) & 0xff);\r\n    result[offset + 3] = (byte) ((value >> 24) & 0xff);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\apksigner\\ApkSignerV2.java"}}
{"prompt": "\n import java.nio.ByteOrder\nimport java.nio.ByteBuffer\nprivate static byte[] encodeAsSequenceOfLengthPrefixedElements(byte[][] sequence) {\r\n    int payloadSize = 0;\r\n    for (byte[] element : sequence) {\r\n        payloadSize += 4 + element.length;\r\n    }\r\n    ByteBuffer result = ByteBuffer.allocate(payloadSize);\r\n    result.order(ByteOrder.LITTLE_ENDIAN);\r\n    for (byte[] element : sequence) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/238", "ground_truth": "        result.putInt(element.length);\r\n        result.put(element);\r\n    }\r\n    return result.array();\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\apksigner\\ApkSignerV2.java"}}
{"prompt": "\n import java.io.InputStream\npublic synchronized void readFrom(InputStream is, int len) {\r\n    int read;\r\n    byte[] buffer = new byte[4096];\r\n    try {\r\n        while ((read = is.read(buffer, 0, Math.min(len, buffer.length))) > 0) {\r\n            write(buffer, 0, read);\r\n            len -= read;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/241", "ground_truth": "        }\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n    }\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\apksigner\\ByteArrayStream.java"}}
{"prompt": "\n import java.security.cert.X509Certificate\nimport java.security.cert.CertificateFactory\nimport java.security.GeneralSecurityException\nimport java.io.InputStream\nimport java.io.IOException\npublic static X509Certificate readCertificate(InputStream input) throws IOException, GeneralSecurityException {\r\n    try {\r\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\r", "choices": [{"text": "return (X509Certificate) cf.generateCertificate(input);\r\n    } finally {\r\n        input.close();\r\n    }\r\n}\n"}], "metadata": {"task_id": "Iconify/242", "ground_truth": "        return (X509Certificate) cf.generateCertificate(input);\r\n    } finally {\r\n        input.close();\r\n    }\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\apksigner\\CryptoUtils.java"}}
{"prompt": "\n /**\r\n * Returns the multiple (in bytes) at which the provided {@code STORED} entry's data must start\r\n * relative to start of file or {@code 0} if alignment of this entry's data is not important.\r\n */\r\nprivate static int getStoredEntryDataAlignment(String entryName, int defaultAlignment) {\r\n    if (defaultAlignment <= 0) {\r\n        return 0;\r\n    }\r\n    if (entryName.endsWith(\".so\")) {\r\n        // Align .so contents to memory page boundary to enable memory-mapped\r\n        // execution.\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/246", "ground_truth": "        return 4096;\r\n    } else {\r\n        return defaultAlignment;\r\n    }\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\apksigner\\SignAPK.java"}}
{"prompt": "\n import java.io.IOException\n@Override\r\npublic void write(int b) throws IOException {\r", "choices": [{"text": "}\r\n@Override\r\npublic void write(byte[] b) throws IOException {\r\n}\r\n@Override\r\npublic void write(byte[] b, int off, int len) throws IOException {\r\n}\r\n@Override\r\npublic void flush() throws IOException {\r\n}\r\n@Override\r\npublic void close() throws IOException {\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Iconify/247", "ground_truth": "    super.write(b);\r\n    mCount++;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\apksigner\\SignAPK.java"}}
{"prompt": "\n import java.io.IOException\n@Override\r\npublic void write(byte[] b, int off, int len) throws IOException {\r", "choices": [{"text": "}\r\n@Override\r\npublic void flush() throws IOException {\r\n}\r\n@Override\r\npublic void close() throws IOException {\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Iconify/248", "ground_truth": "    super.write(b, off, len);\r\n    mCount += len;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\apksigner\\SignAPK.java"}}
{"prompt": "\n import java.nio.ByteOrder\nimport java.nio.ByteBuffer\nprivate static void assertByteOrderLittleEndian(ByteBuffer buffer) {\r\n    if (buffer.order() != ByteOrder.LITTLE_ENDIAN) {\r", "choices": [{"text": "\n import java.nio.ByteOrder\nimport java.nio.ByteBuffer\nprivate static void assertByteOrderLittleEndian(ByteBuffer buffer) {\r\n    if (buffer.order()!= ByteOrder.LITTLE_ENDIAN) {\r\n//        throw new IllegalArgumentException(\"Buffer is not in Little Endian order\");\r\n    }\r\n}\r\nprivate static void assertByteOrderBigEndian(ByteBuffer buffer) {\r\n    if (buffer.order()!= ByteOrder.BIG_ENDIAN) {\r\n//        throw new IllegalArgumentException(\"Buffer is not in Big Endian order\");\r\n    }\r\n}\r\nprivate static void assertByteOrder(ByteBuffer buffer, ByteOrder order) {\r\n    if (buffer.order()!= order) {\r\n//        throw new IllegalArgumentException(\"Buffer is not in \" + order + \" order\");\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Iconify/253", "ground_truth": "        throw new IllegalArgumentException(\"ByteBuffer byte order must be little endian\");\r\n    }\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\apksigner\\ZipUtils.java"}}
{"prompt": "\n import java.nio.ByteBuffer\nprivate static void setUnsignedInt32(ByteBuffer buffer, int offset, long value) {\r\n    if ((value < 0) || (value > 0xffffffffL)) {\r\n        throw new IllegalArgumentException(\"uint32 value of out range: \" + value);\r", "choices": [{"text": "}\r\nbuffer.putInt(offset, (int) value);\r\n}\n"}], "metadata": {"task_id": "Iconify/254", "ground_truth": "    }\r\n    buffer.putInt(buffer.position() + offset, (int) value);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\apksigner\\ZipUtils.java"}}
{"prompt": "\n import com.drdisagree.iconify.Iconify.Companion.appContext\nimport android.content.pm.PackageManager\nimport android.content.pm.ApplicationInfo\nfun isAppInstalled(packageName: String?): Boolean {\n        val pm = appContext.packageManager\n\n        try {\n            pm.getPackageInfo(packageName!!, PackageManager.GET_ACTIVITIES)\n            return pm.getApplicationInfo(packageName, 0).enabled", "choices": [{"text": "        } catch (e: PackageManager.NameNotFoundException) {\n            return false\n        }\n    }\n\nfun getAppIcon(packageName: String?): Drawable? {\n        val pm = appContext.packageManager\n        try {\n            val ai = pm.getApplicationInfo(packageName, 0)\n            return ai.loadIcon(pm)\n        } catch (e: PackageManager.NameNotFoundException) {\n            return null\n        }\n    }\n\nfun getAppLabel(packageName: String?): String? {\n        val pm = appContext.packageManager\n        try {\n            val ai = pm.getApplicationInfo(packageName, 0"}], "metadata": {"task_id": "Iconify/255", "ground_truth": "        } catch (ignored: PackageManager.NameNotFoundException) {\n        }\n\n        return false\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\AppUtil.kt"}}
{"prompt": "\n import com.drdisagree.iconify.Iconify.Companion.appContext\nimport android.content.pm.PackageManager\nimport android.content.pm.ApplicationInfo\nfun getAppUid(packageName: String?): Int {\n        val pm = appContext.packageManager\n\n        try {\n            pm.getPackageInfo(packageName!!, PackageManager.GET_ACTIVITIES)\n            return pm.getApplicationInfo(packageName, 0).uid", "choices": [{"text": "        } catch (e: PackageManager.NameNotFoundException) {\n            e.printStackTrace()\n        }\n\n        return -1\n    }\n\nfun getAppUid(appInfo: ApplicationInfo): Int {\n        return appInfo.uid\n    }\n\nfun getAppUid(appInfo: ApplicationInfo?): Int {\n        return appInfo!!.uid\n    }\n\nfun getAppUid(appInfo: ApplicationInfo?): Int {\n        return appInfo!!.uid\n    }\n\nfun getAppUid(appInfo: ApplicationInfo?): Int {\n        return appInfo!!.uid\n    }\n\nfun getAppUid(appInfo:"}], "metadata": {"task_id": "Iconify/257", "ground_truth": "        } catch (ignored: PackageManager.NameNotFoundException) {\n        }\n\n        return 0\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\AppUtil.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport com.drdisagree.iconify.Iconify.Companion.appContext\nimport androidx.core.content.ContextCompat\nimport android.graphics.drawable.Drawable\nimport android.annotation.SuppressLint\n @JvmStatic\n    @SuppressLint(\"UseCompatLoadingForDrawables\")\n    fun getAppIcon(packageName: String?): Drawable? {\n        var appIcon = ContextCompat.getDrawable(appContext, R.drawable.ic_android)\n\n        try {\n            appIcon = appContext.packageManager.getApplicationIcon(packageName!!)", "choices": [{"text": "        } catch (e: PackageManager.NameNotFoundException) {\n            e.printStackTrace()\n        }\n\n        return appIcon\n    }\n<file_sep>/app/src/main/java/com/drdisagree/iconify/Iconify.kt\npackage com.drdisagree.iconify\n\nimport android.content.Context\nimport android.content.pm.PackageManager\nimport android.graphics.drawable.Drawable\nimport android.os.Build\nimport android.util.Log\nimport androidx.core.content.ContextCompat\nimport com.drdisagree.iconify.R\nimport com.drdis"}], "metadata": {"task_id": "Iconify/258", "ground_truth": "        } catch (ignored: PackageManager.NameNotFoundException) {\n        }\n\n        return appIcon\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\AppUtil.kt"}}
{"prompt": "\n import android.content.Context\n @JvmStatic\n    fun clearCache(context: Context) {\n        try {\n            var dir = context.cacheDir\n            deleteDir(dir)\n\n            dir = context.externalCacheDir\n            deleteDir(dir)\n\n            dir = context.filesDir", "choices": [{"text": "            deleteDir(dir)\n\n            dir = context.getExternalFilesDir(null)\n            deleteDir(dir)\n\n            dir = context.getExternalFilesDir(\"files\")\n            deleteDir(dir)\n\n            dir = context.getExternalFilesDir(\"cache\")\n            deleteDir(dir)\n\n            dir = context.getExternalFilesDir(\"no_backup\")\n            deleteDir(dir)\n\n            dir = context.getExternalFilesDir(\"shared_prefs\")\n            deleteDir(dir)\n\n            dir = context.getExternalFilesDir(\"databases\")\n            deleteDir(dir)\n\n            dir = context.getExternalFilesDir(\""}], "metadata": {"task_id": "Iconify/262", "ground_truth": "            deleteDir(dir)\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\CacheUtil.kt"}}
{"prompt": "\n import java.io.File\nprivate fun deleteDir(dir: File?): Boolean {\n        return if (dir != null && dir.isDirectory()) {\n            val children = dir.list() ?: return false\n\n            for (child in children) {\n                val success = deleteDir(File(dir, child))\n\n                if (!success) {\n                    return false\n                }\n            }\n\n            dir.delete()\n        } else if (dir != null && dir.isFile()) {", "choices": [{"text": "\n import java.io.File\nprivate fun deleteDir(dir: File?): Boolean {\n        return if (dir!= null && dir.isDirectory()) {\n            val children = dir.list()?: return false\n\n            for (child in children) {\n                val success = deleteDir(File(dir, child))\n\n                if (!success) {\n                    return false\n                }\n            }\n\n            dir.delete()\n        } else if (dir!= null && dir.isFile()) {\n            dir.delete()\n        } else {\n            false\n        }\n    }\n"}], "metadata": {"task_id": "Iconify/263", "ground_truth": "            dir.delete()\n        } else {\n            false\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\CacheUtil.kt"}}
{"prompt": "\n import android.graphics.Color\nfun getHue(color: Int): Float {\n        val r = Color.red(color)\n        val g = Color.green(color)\n        val b = Color.blue(color)\n", "choices": [{"text": "/        val hsv = FloatArray(3)\n//        Color.colorToHSV(color, hsv)\n//        return hsv[0]\n        return Color.rgbToHsv(r, g, b, null)[0]\n    }\n\n"}], "metadata": {"task_id": "Iconify/264", "ground_truth": "        val hsv = FloatArray(3)\n        Color.RGBToHSV(r, g, b, hsv)\n\n        return hsv[0]\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\ColorUtil.kt"}}
{"prompt": "\n import android.graphics.Color\nfun setHue(color: Int, hue: Float): Int {\n        val r = Color.red(color)\n        val g = Color.green(color)\n        val b = Color.blue(color)\n\n        val hsv = FloatArray(3)", "choices": [{"text": "        Color.colorToHSV(color, hsv)\n        hsv[0] = hue\n        Color.colorToHSV(Color.HSVToColor(hsv), hsv)\n\n        return Color.HSVToColor(hsv)\n    }\n\n"}], "metadata": {"task_id": "Iconify/265", "ground_truth": "        Color.RGBToHSV(r, g, b, hsv)\n        hsv[0] = hue\n\n        return Color.HSVToColor(hsv)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\ColorUtil.kt"}}
{"prompt": "\n import android.graphics.Color\nfun getSaturation(color: Int): Float {\n        val r = Color.red(color)\n        val g = Color.green(color)\n        val b = Color.blue(color)\n", "choices": [{"text": "//        val r = Color.red(color)\n//        val g = Color.green(color)\n//        val b = Color.blue(color)\n\n        val max = Math.max(r, Math.max(g, b))\n        val min = Math.min(r, Math.min(g, b))\n\n        return 1 - (max - min) / 255f\n    }\n\nfun getBrightness(color: Int): Float {\n        val r = Color.red(color)\n        val g = Color.green(color)\n        val b = Color."}], "metadata": {"task_id": "Iconify/266", "ground_truth": "        val hsv = FloatArray(3)\n        Color.RGBToHSV(r, g, b, hsv)\n\n        return hsv[1]\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\ColorUtil.kt"}}
{"prompt": "\n import android.graphics.Color\n @JvmStatic\n    fun setSaturation(color: Int, saturation: Float): Int {\n        val r = Color.red(color)\n        val g = Color.green(color)\n        val b = Color.blue(color)\n\n        val hsv = FloatArray(3)", "choices": [{"text": "        Color.colorToHSV(color, hsv)\n        hsv[1] = saturation\n        return Color.HSVToColor(hsv)\n    }\n"}], "metadata": {"task_id": "Iconify/267", "ground_truth": "        Color.RGBToHSV(r, g, b, hsv)\n        hsv[1] += saturation\n\n        return Color.HSVToColor(hsv)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\ColorUtil.kt"}}
{"prompt": "\n import android.graphics.Color\nfun getLightness(color: Int): Float {\n        val r = Color.red(color)\n        val g = Color.green(color)\n        val b = Color.blue(color)\n", "choices": [{"text": "eturn (Math.max(r, Math.max(g, b)) + Math.min(r, Math.min(g, b))) / 255f\n}\n\n"}], "metadata": {"task_id": "Iconify/268", "ground_truth": "        val hsv = FloatArray(3)\n        Color.RGBToHSV(r, g, b, hsv)\n\n        return hsv[2]\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\ColorUtil.kt"}}
{"prompt": "\n import android.graphics.Color\n @JvmStatic\n    fun setLightness(color: Int, lightness: Float): Int {\n        val r = Color.red(color)\n        val g = Color.green(color)\n        val b = Color.blue(color)\n\n        val hsv = FloatArray(3)", "choices": [{"text": "        Color.colorToHSV(color, hsv)\n\n        hsv[2] = lightness\n        return Color.HSVToColor(hsv)\n    }\n"}], "metadata": {"task_id": "Iconify/269", "ground_truth": "        Color.RGBToHSV(r, g, b, hsv)\n        hsv[2] += lightness\n\n        return Color.HSVToColor(hsv)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\ColorUtil.kt"}}
{"prompt": "\n import androidx.annotation.AttrRes\nimport android.util.TypedValue\nimport android.graphics.Color\nimport android.content.Context\nfun getColorResCompat(context: Context, @AttrRes id: Int): Int {\n        val typedValue = TypedValue()\n        val theme = context.theme\n        theme.resolveAttribute(id, typedValue, false)\n\n        val arr = context.obtainStyledAttributes(typedValue.data, intArrayOf(id))", "choices": [{"text": "        val color = arr.getColor(0, Color.BLACK)\n        arr.recycle()\n        return color\n}<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.content.ContextCompat\nimport androidx.core.content.res.ResourcesCompat\nimport com.example.myapplication."}], "metadata": {"task_id": "Iconify/272", "ground_truth": "        @ColorInt val color = arr.getColor(0, -1)\n        arr.recycle()\n\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\ColorUtil.kt"}}
{"prompt": "\n import java.lang.Math.max\n/**\r\n * Contrast ratio is a measure of legibility, its used to compare the lightness of two colors.\r\n * This method is used commonly in industry due to its use by WCAG.\r\n *\r\n * <p>To compare lightness, the colors are expressed in the XYZ color space, where Y is lightness,\r\n * also known as relative luminance.\r\n *\r\n * <p>The equation is ratio = lighter Y + 5 / darker Y + 5.\r\n */\r\npublic static double ratioOfYs(double y1, double y2) {\r\n    final double lighter = max(y1, y2);\r", "choices": [{"text": "final double darker = min(y1, y2);\r\nreturn (lighter + 5) / (darker + 5);\r\n}\r\n"}], "metadata": {"task_id": "Iconify/277", "ground_truth": "    final double darker = (lighter == y2) ? y1 : y2;\r\n    return (lighter + 5.0) / (darker + 5.0);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\contrast\\Contrast.java"}}
{"prompt": "\n /**\r\n * Tone >= tone parameter that ensures ratio. 100 if ratio cannot be achieved.\r\n *\r\n * <p>This method is unsafe because the returned value is guaranteed to be in bounds, but, the in\r\n * bounds return value may not reach the desired ratio.\r\n *\r\n * @param tone  Tone return value must contrast with.\r\n * @param ratio Desired contrast ratio of return value and tone parameter.\r\n */\r\npublic static double lighterUnsafe(double tone, double ratio) {\r", "choices": [{"text": "return Math.pow(tone, 1.0 / ratio);\r\n}\r\n/**\r\n * Tone >= tone parameter that ensures ratio. 100 if ratio cannot be achieved.\r\n *\r\n * <p>This method is unsafe because the returned value is guaranteed to be in bounds, but, the in\r\n * bounds return value may not reach the desired ratio.\r\n *\r\n * @param tone  Tone return value must contrast with.\r\n * @param ratio Desired contrast ratio of return value and tone parameter.\r\n */\r\npublic static double lighterUnsafe(float tone, float ratio"}], "metadata": {"task_id": "Iconify/278", "ground_truth": "    double lighterSafe = lighter(tone, ratio);\r\n    return lighterSafe < 0.0 ? 100.0 : lighterSafe;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\contrast\\Contrast.java"}}
{"prompt": "\n /**\r\n * Tone <= tone parameter that ensures ratio. 0 if ratio cannot be achieved.\r\n *\r\n * <p>This method is unsafe because the returned value is guaranteed to be in bounds, but, the in\r\n * bounds return value may not reach the desired ratio.\r\n *\r\n * @param tone  Tone return value must contrast with.\r\n * @param ratio Desired contrast ratio of return value and tone parameter.\r\n */\r\npublic static double darkerUnsafe(double tone, double ratio) {\r", "choices": [{"text": "return tone * Math.pow(ratio, 1.0 / 2.2);\r\n}\r\n\r\n/**\r\n * Tone <= tone parameter that ensures ratio. 0 if ratio cannot be achieved.\r\n *\r\n * <p>This method is unsafe because the returned value is guaranteed to be in bounds, but, the in\r\n * bounds return value may not reach the desired ratio.\r\n *\r\n * @param tone  Tone return value must contrast with.\r\n * @param ratio Desired contrast ratio of return value and tone parameter.\r\n */\r\npublic static float darkerUnsafe(float tone"}], "metadata": {"task_id": "Iconify/279", "ground_truth": "    double darkerSafe = darker(tone, ratio);\r\n    return max(0.0, darkerSafe);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\contrast\\Contrast.java"}}
{"prompt": "\n import com.drdisagree.iconify.utils.color.monet.hct.Hct\n/**\r\n * Returns true if color is disliked.\r\n *\r\n * <p>Disliked is defined as a dark yellow-green that is not neutral.\r\n */\r\npublic static boolean isDisliked(Hct hct) {\r\n    final boolean huePasses = Math.round(hct.getHue()) >= 90.0 && Math.round(hct.getHue()) <= 111.0;\r\n    final boolean chromaPasses = Math.round(hct.getChroma()) > 16.0;\r", "choices": [{"text": "//    final boolean luminancePasses = Math.round(hct.getLuminance()) < 16.0;\r\n    return huePasses && chromaPasses;\r\n}\r\n"}], "metadata": {"task_id": "Iconify/280", "ground_truth": "    final boolean tonePasses = Math.round(hct.getTone()) < 65.0;\r\n    return huePasses && chromaPasses && tonePasses;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dislike\\DislikeAnalyzer.java"}}
{"prompt": "\n import com.drdisagree.iconify.utils.color.monet.hct.Hct\n/**\r\n * If color is disliked, lighten it to make it likable.\r\n */\r\npublic static Hct fixIfDisliked(Hct hct) {\r\n    if (isDisliked(hct)) {\r\n        return Hct.from(hct.getHue(), hct.getChroma(), 70.0);\r", "choices": [{"text": "}\r\n    return hct;\r\n}\r\n/**\r\n * If color is liked, darken it to make it dislikable.\r\n */\r\npublic static Hct fixIfLiked(Hct hct) {\r\n    if (isLiked(hct)) {\r\n        return Hct.from(hct.getHue(), hct.getChroma(), 30.0);\r\n}\r\n    return hct;\r\n}\r\n/**\r\n * If color is disliked, lighten it to make it likable.\r\n */\r\npublic static Hct fix"}], "metadata": {"task_id": "Iconify/281", "ground_truth": "    }\r\n    return hct;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dislike\\DislikeAnalyzer.java"}}
{"prompt": "\n import java.util.function.Function\nimport com.drdisagree.iconify.utils.color.monet.scheme.DynamicScheme\nimport com.drdisagree.iconify.utils.color.monet.palettes.TonalPalette\nimport androidx.annotation.NonNull\nimport java.lang.Math.max\n/**\r\n * A convenience constructor for DynamicColor.\r\n *\r\n * <p>_Strongly_ prefer using one of the convenience constructors. This class is arguably too\r\n * flexible to ensure it can support any scenario. Functional arguments allow overriding without\r\n * risks that come with subclasses.\r\n *\r\n * <p>For example, the default behavior of adjust tone at max contrast to be at a 7.0 ratio with\r\n * its background is principled and matches accessibility guidance. That does not mean it's the\r\n * desired approach for _every_ design system, and every color pairing, always, in every case.\r\n *\r\n * <p>For opaque colors (colors with alpha = 100%).\r\n *\r\n * <p>For colors that are not backgrounds, and do not have backgrounds.\r\n *\r\n * @param name    The name of the dynamic color.\r\n * @param palette Function that provides a TonalPalette given DynamicScheme. A TonalPalette is\r\n *                defined by a hue and chroma, so this replaces the need to specify hue/chroma. By providing\r\n *                a tonal palette, when contrast adjustments are made, intended chroma can be preserved.\r\n * @param tone    Function that provides a tone, given a DynamicScheme.\r\n */\r\n@NonNull\r\npublic static DynamicColor fromPalette(@NonNull String name, @NonNull Function<DynamicScheme, TonalPalette> palette, @NonNull Function<DynamicScheme, Double> tone) {\r\n    return new DynamicColor(name, palette, tone, /* isBackground= */\r\n    false, /* background= */\r", "choices": [{"text": "null, /* adjustContrastAtMax= */\r\ntrue, /* maxContrastRatio= */\r\n7.0, /* adjustContrastAtMin= */\r\ntrue, /* minContrastRatio= */\r\n4.5, /* adjustContrastAtMid= */\r\ntrue, /* midContrastRatio= */\r\n3.0, /* adjustContrastAtLow= */\r\ntrue, /* lowContrastRatio= */\r\n2.0, /* adjustContrastAtHigh= */\r\ntrue, /* highContrastRatio= */\r\n1.5, /* adjustContrastAtVeryHigh= */\r\ntrue, /* veryHigh"}], "metadata": {"task_id": "Iconify/283", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\DynamicColor.java"}}
{"prompt": "\n import java.util.function.Function\nimport com.drdisagree.iconify.utils.color.monet.scheme.DynamicScheme\nimport com.drdisagree.iconify.utils.color.monet.palettes.TonalPalette\nimport androidx.annotation.NonNull\nimport java.lang.Math.max\n/**\r\n * A convenience constructor for DynamicColor.\r\n *\r\n * <p>_Strongly_ prefer using one of the convenience constructors. This class is arguably too\r\n * flexible to ensure it can support any scenario. Functional arguments allow overriding without\r\n * risks that come with subclasses.\r\n *\r\n * <p>For example, the default behavior of adjust tone at max contrast to be at a 7.0 ratio with\r\n * its background is principled and matches accessibility guidance. That does not mean it's the\r\n * desired approach for _every_ design system, and every color pairing, always, in every case.\r\n *\r\n * <p>For opaque colors (colors with alpha = 100%).\r\n *\r\n * <p>For colors that do not have backgrounds.\r\n *\r\n * @param name         The name of the dynamic color.\r\n * @param palette      Function that provides a TonalPalette given DynamicScheme. A TonalPalette is\r\n *                     defined by a hue and chroma, so this replaces the need to specify hue/chroma. By providing\r\n *                     a tonal palette, when contrast adjustments are made, intended chroma can be preserved.\r\n * @param tone         Function that provides a tone, given a DynamicScheme.\r\n * @param isBackground Whether this dynamic color is a background, with some other color as the\r\n *                     foreground.\r\n */\r\n@NonNull\r\npublic static DynamicColor fromPalette(@NonNull String name, @NonNull Function<DynamicScheme, TonalPalette> palette, @NonNull Function<DynamicScheme, Double> tone, boolean isBackground) {\r\n    return new DynamicColor(name, palette, tone, isBackground, /* background= */\r", "choices": [{"text": "null, /* foreground= */\r\nnull, /* adjustContrast= */\r\nnull, /* adjustContrastMax= */\r\nnull, /* adjustContrastMin= */\r\nnull, /* adjustContrastMaxContrast= */\r\nnull, /* adjustContrastMinContrast= */\r\nnull, /* adjustContrastMaxContrastMin= */\r\nnull, /* adjustContrastMaxContrastMinContrast= */\r\nnull, /* adjustContrastMaxContrastMinContrastMax= */\r\nnull, /* adjustContrastMaxContrastMinContrastMaxContrast= */\r\nnull, /* adjustContrastMaxContrastMinContrastMaxContrastMin= */"}], "metadata": {"task_id": "Iconify/284", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\DynamicColor.java"}}
{"prompt": "\n /**\r\n * Adjust a tone down such that white has 4.5 contrast, if the tone is reasonably close to\r\n * supporting it.\r\n */\r\npublic static double enableLightForeground(double tone) {\r\n    if (tonePrefersLightForeground(tone) && !toneAllowsLightForeground(tone)) {\r\n        return 49.0;\r", "choices": [{"text": "\n /**\r\n * Adjust a tone down such that white has 4.5 contrast, if the tone is reasonably close to\r\n * supporting it.\r\n */\r\npublic static double enableLightForeground(double tone) {\r\n    if (tonePrefersLightForeground(tone) &&!toneAllowsLightForeground(tone)) {\r\n        return 49.0;\r\n}\r\nreturn tone;\r\n}\r\n/**\r\n * Adjust a tone up such that white has 4.5 contrast, if the tone is reasonably close to\r\n * supporting it.\r\n */\r\npublic static double enableLightBackground(double tone) {\r\n    if (tonePrefersLightBackground(tone) &&!toneAllowsLightBackground(tone)) {\r\n        return 51.0;\r\n}\r\nreturn tone;\r\n}\r\n/**\r\n * Adjust a tone down such that black has 4.5 contrast, if the tone is reasonably close to\r\n * supporting"}], "metadata": {"task_id": "Iconify/286", "ground_truth": "    }\r\n    return tone;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\DynamicColor.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n// Compatibility Keys Colors for Android\r\n@NonNull\r\npublic DynamicColor primaryPaletteKeyColor() {\r\n    return DynamicColor.fromPalette(/* name= */\r\n    \"primary_palette_key_color\", /* palette= */\r", "choices": [{"text": "Palette.from(/* swatches= */\r\nnew Swatch[]{Swatch.from(/* color= */\r\nColor.fromArgb(/* argb= */\r\n0xff, /* red= */\r\n0x00, /* green= */\r\n0x00, /* blue= */\r\n0x00), /* alpha= */\r\n0xff, /* title= */\r\n\"Black\", /* isDark= */\r\nfalse, /* isLight= */\r\nfalse, /* isTransparent= */\r\nfalse, /* isMuted= */\r\nfalse, /* isVibrant="}], "metadata": {"task_id": "Iconify/288", "ground_truth": "    (s) -> s.primaryPalette, /* tone= */\r\n    (s) -> s.primaryPalette.getKeyColor().getTone());\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor secondaryPaletteKeyColor() {\r\n    return DynamicColor.fromPalette(/* name= */\r\n    \"secondary_palette_key_color\", /* palette= */\r", "choices": [{"text": "Palette.from(/* swatches= */\r\nnew Swatch[]{Swatch.create(/* color= */\r\nColor.fromIntArgb(/* argb= */\r\n-16777216), /* name= */\r\n\"primary_palette_key_color\", /* isDefault= */\r\ntrue, /* isLight= */\r\ntrue, /* isDark= */\r\nfalse, /* isHighContrast= */\r\nfalse, /* isFringed= */\r\nfalse, /* isTransparent= */\r\nfalse, /* isVisible= */\r\ntrue,"}], "metadata": {"task_id": "Iconify/289", "ground_truth": "    (s) -> s.secondaryPalette, /* tone= */\r\n    (s) -> s.secondaryPalette.getKeyColor().getTone());\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor tertiaryPaletteKeyColor() {\r\n    return DynamicColor.fromPalette(/* name= */\r\n    \"tertiary_palette_key_color\", /* palette= */\r", "choices": [{"text": "Palette.from(/* swatches= */\r\nnew Swatch[]{Swatch.create(/* color= */\r\nColor.fromIntArgb(/* argb= */\r\n0xff000000), /* name= */\r\n\"black\", /* isDefault= */\r\nfalse, /* isLight= */\r\nfalse, /* isDark= */\r\nfalse, /* isHighContrast= */\r\nfalse, /* isTransparent= */\r\nfalse, /* isMonochromatic= */\r\nfalse, /* isMuted= */\r\nfalse, /* isBold= */\r\n"}], "metadata": {"task_id": "Iconify/290", "ground_truth": "    (s) -> s.tertiaryPalette, /* tone= */\r\n    (s) -> s.tertiaryPalette.getKeyColor().getTone());\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor neutralPaletteKeyColor() {\r\n    return DynamicColor.fromPalette(/* name= */\r\n    \"neutral_palette_key_color\", /* palette= */\r", "choices": [{"text": "Palette.from(\r\n    /* primary= */\r\n    Color.parseColor(\"#000000\"),\r\n    /* secondary= */\r\n    Color.parseColor(\"#000000\"),\r\n    /* tertiary= */\r\n    Color.parseColor(\"#000000\"),\r\n    /* quaternary= */\r\n    Color.parseColor(\"#000000\"),\r\n    /* background= */\r\n    Color.parseColor(\"#000000\"),\r\n    /* surface= */\r\n    Color.parseColor(\"#000000\"),\r\n    /* onPrimary= */\r\n    Color.parse"}], "metadata": {"task_id": "Iconify/291", "ground_truth": "    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.neutralPalette.getKeyColor().getTone());\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "\n import com.drdisagree.iconify.utils.color.monet.scheme.Variant\nimport androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor neutralVariantPaletteKeyColor() {\r\n    return DynamicColor.fromPalette(/* name= */\r\n    \"neutral_variant_palette_key_color\", /* palette= */\r", "choices": [{"text": "Palette.from(\r\n    /* color= */\r\n    Color.from(0xFF000000),\r\n    /* color= */\r\n    Color.from(0xFF000000),\r\n    /* color= */\r\n    Color.from(0xFF000000),\r\n    /* color= */\r\n    Color.from(0xFF000000),\r\n    /* color= */\r\n    Color.from(0xFF000000),\r\n    /* color= */\r\n    Color.from(0xFF000000),\r\n    /* color= */\r\n    Color.from"}], "metadata": {"task_id": "Iconify/292", "ground_truth": "    (s) -> s.neutralVariantPalette, /* tone= */\r\n    (s) -> s.neutralVariantPalette.getKeyColor().getTone());\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor background() {\r\n    return new DynamicColor(/* name= */\r\n    \"background\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 6.0 : 98.0, /* isBackground= */\r\n    true, /* background= */\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/293", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surface() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 6.0 : 98.0, /* isBackground= */\r\n    true, /* background= */\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/295", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceDim() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_dim\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 6.0 : 87.0, /* isBackground= */\r\n    true, /* background= */\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/296", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceBright() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_bright\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 24.0 : 98.0, /* isBackground= */\r\n    true, /* background= */\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/297", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceContainerLowest() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_container_lowest\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 4.0 : 100.0, /* isBackground= */\r\n    true, /* background= */\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/298", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceContainerLow() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_container_low\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 10.0 : 96.0, /* isBackground= */\r\n    true, /* background= */\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/299", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceContainer() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_container\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 12.0 : 94.0, /* isBackground= */\r\n    true, /* background= */\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/300", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceContainerHigh() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_container_high\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 17.0 : 92.0, /* isBackground= */\r\n    true, /* background= */\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/301", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceContainerHighest() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_container_highest\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 22.0 : 90.0, /* isBackground= */\r\n    true, /* background= */\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/302", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "\n import com.drdisagree.iconify.utils.color.monet.scheme.Variant\nimport androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceVariant() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_variant\", /* palette= */\r\n    (s) -> s.neutralVariantPalette, /* tone= */\r\n    (s) -> s.isDark ? 30.0 : 90.0, /* isBackground= */\r\n    true, /* background= */\r", "choices": [{"text": "\n import com.drdisagree.iconify.utils.color.monet.scheme.Variant\nimport androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceVariant() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_variant\", /* palette= */\r\n    (s) -> s.neutralVariantPalette, /* tone= */\r\n    (s) -> s.isDark? 30.0 : 90.0, /* isBackground= */\r\n    true, /* background= */\r\n(s) -> s.isDark? s.neutralVariantPalette.get(30.0) : s.neutralVariantPalette.get(90.0), /* foreground= */\r\n(s) -> s.isDark? s.neutralVariantPalette.get(90.0) : s.neutralVariantPalette.get(30.0));\r\n}\r\n"}], "metadata": {"task_id": "Iconify/304", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor inverseSurface() {\r\n    return new DynamicColor(/* name= */\r\n    \"inverse_surface\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 90.0 : 20.0, /* isBackground= */\r\n    false, /* background= */\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/306", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor shadow() {\r\n    return new DynamicColor(/* name= */\r\n    \"shadow\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> 0.0, /* isBackground= */\r\n    false, /* background= */\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/310", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor scrim() {\r\n    return new DynamicColor(/* name= */\r\n    \"scrim\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> 0.0, /* isBackground= */\r\n    false, /* background= */\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/311", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic DynamicColor surfaceTint() {\r\n    return new DynamicColor(/* name= */\r\n    \"surface_tint\", /* palette= */\r\n    (s) -> s.primaryPalette, /* tone= */\r\n    (s) -> s.isDark ? 80.0 : 40.0, /* isBackground= */\r\n    true, /* background= */\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/312", "ground_truth": "    null, /* secondBackground= */\r\n    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n// colorControlHighlight documented, in both M3 & GM3:\r\n// Light mode: #1f000000 dark mode: #33ffffff.\r\n// These are black and white with some alpha.\r\n// 1F hex = 31 decimal; 31 / 255 = 12% alpha.\r\n// 33 hex = 51 decimal; 51 / 255 = 20% alpha.\r\n// DynamicColors do not support alpha currently, and _may_ not need it for this use case,\r\n// depending on how MDC resolved alpha for the other cases.\r\n// Returning black in dark mode, white in light mode.\r\n@NonNull\r\npublic DynamicColor controlHighlight() {\r\n    return new DynamicColor(/* name= */\r\n    \"control_highlight\", /* palette= */\r\n    (s) -> s.neutralPalette, /* tone= */\r\n    (s) -> s.isDark ? 100.0 : 0.0, /* isBackground= */\r\n    false, /* background= */\r\n    null, /* secondBackground= */\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/333", "ground_truth": "    null, /* contrastCurve= */\r\n    null, /* toneDeltaPair= */\r\n    null, /* opacity= */\r\n    s -> s.isDark ? 0.20 : 0.12);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "\n import com.drdisagree.iconify.utils.color.monet.scheme.Variant\nimport com.drdisagree.iconify.utils.color.monet.scheme.DynamicScheme\nprivate boolean isFidelity(DynamicScheme scheme) {\r\n    if (this.isExtendedFidelity && scheme.variant != Variant.MONOCHROME && scheme.variant != Variant.NEUTRAL) {\r\n        return true;\r", "choices": [{"text": "\n import com.drdisagree.iconify.utils.color.monet.scheme.Variant\nimport com.drdisagree.iconify.utils.color.monet.scheme.DynamicScheme\nprivate boolean isFidelity(DynamicScheme scheme) {\r\n    if (this.isExtendedFidelity && scheme.variant!= Variant.MONOCHROME && scheme.variant!= Variant.NEUTRAL) {\r\n        return true;\r\n}\r\nreturn false;\r\n}\n"}], "metadata": {"task_id": "Iconify/334", "ground_truth": "    }\r\n    return scheme.variant == Variant.FIDELITY || scheme.variant == Variant.CONTENT;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\dynamiccolor\\MaterialDynamicColors.java"}}
{"prompt": "\n /**\r\n * Create an HCT color from hue, chroma, and tone.\r\n *\r\n * @param hue    0 <= hue < 360; invalid values are corrected.\r\n * @param chroma 0 <= chroma < ?; Informally, colorfulness. The color returned may be lower than\r\n *               the requested chroma. Chroma has a different maximum for any given hue and tone.\r\n * @param tone   0 <= tone <= 100; invalid values are corrected.\r\n * @return HCT representation of a color in default viewing conditions.\r\n */\r\npublic static Hct from(double hue, double chroma, double tone) {\r", "choices": [{"text": "\n /**\r\n * Create an HCT color from hue, chroma, and tone.\r\n *\r\n * @param hue    0 <= hue < 360; invalid values are corrected.\r\n * @param chroma 0 <= chroma <?; Informally, colorfulness. The color returned may be lower than\r\n *               the requested chroma. Chroma has a different maximum for any given hue and tone.\r\n * @param tone   0 <= tone <= 100; invalid values are corrected.\r\n * @return HCT representation of a color in default viewing conditions.\r\n */\r\npublic static Hct from(double hue, double chroma, double tone) {\r\n"}], "metadata": {"task_id": "Iconify/338", "ground_truth": "    int argb = HctSolver.solveToInt(hue, chroma, tone);\r\n    return new Hct(argb);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\hct\\Hct.java"}}
{"prompt": "\n static double chromaticAdaptation(double component) {\r", "choices": [{"text": "-    return component > 0.04045? Math.pow((component + 0.055) / 1.055, 2.4) : component / 12.92;\r\n+    return component > 0.04045? Math.pow((component + 0.055) / 1.055, 2.4) : component / 12.92; // TODO: check if this is correct\r\n }\r\n \r\n static double[] rgbToXYZ(double[] rgb) {\r\n    "}], "metadata": {"task_id": "Iconify/341", "ground_truth": "    double af = Math.pow(Math.abs(component), 0.42);\r\n    return MathUtils.signum(component) * 400.0 * af / (af + 27.13);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\hct\\HctSolver.java"}}
{"prompt": "\n static boolean areInCyclicOrder(double a, double b, double c) {\r\n    double deltaAB = sanitizeRadians(b - a);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/343", "ground_truth": "    double deltaAC = sanitizeRadians(c - a);\r\n    return deltaAB < deltaAC;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\hct\\HctSolver.java"}}
{"prompt": "\n /**\r\n * Intersects a segment with a plane.\r\n *\r\n * @param source     The coordinates of point A.\r\n * @param coordinate The R-, G-, or B-coordinate of the plane.\r\n * @param target     The coordinates of point B.\r\n * @param axis       The axis the plane is perpendicular with. (0: R, 1: G, 2: B)\r\n * @return The intersection point of the segment AB with the plane R=coordinate, G=coordinate, or\r\n * B=coordinate\r\n */\r\nstatic double[] setCoordinate(double[] source, double coordinate, double[] target, int axis) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/344", "ground_truth": "    double t = intercept(source[axis], coordinate, target[axis]);\r\n    return lerpPoint(source, t, target);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\hct\\HctSolver.java"}}
{"prompt": "\n /**\r\n * Create an ARGB color with HCT hue and chroma of this Tones instance, and the provided HCT tone.\r\n *\r\n * @param tone HCT tone, measured from 0 to 100.\r\n * @return ARGB representation of a color with that tone.\r\n */\r\n// AndroidJdkLibsChecker is higher priority than ComputeIfAbsentUseValue (b/119581923)\r\n@SuppressWarnings(\"ComputeIfAbsentUseValue\")\r\npublic int tone(int tone) {\r\n    Integer color = cache.get(tone);\r\n    if (color == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/346", "ground_truth": "        color = Hct.from(this.hue, this.chroma, tone).toInt();\r\n        cache.put(tone, color);\r\n    }\r\n    return color;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\palettes\\TonalPalette.java"}}
{"prompt": "\n /**\r\n * Convert a color represented in ARGB to a 3-element array of L*a*b* coordinates of the color.\r\n */\r\n@Override\r\npublic double[] fromInt(int argb) {\r", "choices": [{"text": "double[] lab = new double[3];\r\nlab[0] = (116 * fromInt_L(argb)) - 16;\r\nlab[1] = 500 * (fromInt_a(argb) - fromInt_b(argb));\r\nlab[2] = 200 * (fromInt_b(argb) - fromInt_L(argb));\r\nreturn lab;\r\n}\r\n/**\r\n * Convert a color represented in ARGB to a 3-element array of L*a*b"}], "metadata": {"task_id": "Iconify/347", "ground_truth": "    double[] lab = ColorUtils.labFromArgb(argb);\r\n    return new double[] { lab[0], lab[1], lab[2] };\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\quantize\\PointProviderLab.java"}}
{"prompt": "\n /**\r\n * Standard CIE 1976 delta E formula also takes the square root, unneeded here. This method is\r\n * used by quantization algorithms to compare distance, and the relative ordering is the same,\r\n * with or without a square root.\r\n *\r\n * <p>This relatively minor optimization is helpful because this method is called at least once\r\n * for each pixel in an image.\r\n */\r\n@Override\r\npublic double distance(double[] one, double[] two) {\r\n    double dL = (one[0] - two[0]);\r\n    double dA = (one[1] - two[1]);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/348", "ground_truth": "    double dB = (one[2] - two[2]);\r\n    return (dL * dL + dA * dA + dB * dB);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\quantize\\PointProviderLab.java"}}
{"prompt": "\n import java.util.Map\nimport java.util.List\nimport java.util.LinkedHashMap\n@Override\r\npublic QuantizerResult quantize(int[] pixels, int colorCount) {\r\n    QuantizerResult mapResult = new QuantizerMap().quantize(pixels, colorCount);\r\n    constructHistogram(mapResult.colorToCount);\r\n    createMoments();\r\n    CreateBoxesResult createBoxesResult = createBoxes(colorCount);\r\n    List<Integer> colors = createResult(createBoxesResult.resultCount);\r\n    Map<Integer, Integer> resultMap = new LinkedHashMap<>();\r", "choices": [{"text": "for (int i = 0; i < colors.size(); i++) {\r\n    resultMap.put(colors.get(i), mapResult.colorToCount.get(colors.get(i)));\r\n}\r\n    return new QuantizerResult(resultMap);\r\n}\r\nprivate void constructHistogram(Map<Integer, Integer> colorToCount) {\r\n    for (Map.Entry<Integer, Integer> entry : colorToCount.entrySet()) {\r\n        int color = entry.getKey();\r\n        int count = entry.getValue();\r\n        int[] colorHistogram = new int[256];"}], "metadata": {"task_id": "Iconify/351", "ground_truth": "    for (int color : colors) {\r\n        resultMap.put(color, 0);\r\n    }\r\n    return new QuantizerResult(resultMap);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\quantize\\QuantizerWu.java"}}
{"prompt": "\n public Scheme withPrimary(int primary) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/352", "ground_truth": "    this.primary = primary;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withOnPrimary(int onPrimary) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/353", "ground_truth": "    this.onPrimary = onPrimary;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withPrimaryContainer(int primaryContainer) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/354", "ground_truth": "    this.primaryContainer = primaryContainer;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withOnPrimaryContainer(int onPrimaryContainer) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/355", "ground_truth": "    this.onPrimaryContainer = onPrimaryContainer;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withSecondary(int secondary) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/356", "ground_truth": "    this.secondary = secondary;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withOnSecondary(int onSecondary) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/357", "ground_truth": "    this.onSecondary = onSecondary;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withSecondaryContainer(int secondaryContainer) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/358", "ground_truth": "    this.secondaryContainer = secondaryContainer;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withOnSecondaryContainer(int onSecondaryContainer) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/359", "ground_truth": "    this.onSecondaryContainer = onSecondaryContainer;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withTertiary(int tertiary) {\r", "choices": [{"text": "...\r\n}\r\n"}], "metadata": {"task_id": "Iconify/360", "ground_truth": "    this.tertiary = tertiary;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withOnTertiary(int onTertiary) {\r", "choices": [{"text": "//     this.onTertiary = onTertiary;\r\n//     return this;\r\n// }\r\n// public Scheme withOnQuaternary(int onQuaternary) {\r\n//     this.onQuaternary = onQuaternary;\r\n//     return this;\r\n// }\r\n// public Scheme withOnQuinary(int onQuinary) {\r\n//     this.onQuinary = onQuinary;\r\n//     return this;\r\n// }\r\n// public Scheme withOnSenary(int onSenary"}], "metadata": {"task_id": "Iconify/361", "ground_truth": "    this.onTertiary = onTertiary;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withTertiaryContainer(int tertiaryContainer) {\r", "choices": [{"text": "//     this.tertiaryContainer = tertiaryContainer;\r\n//     return this;\r\n// }\r\n//\r\n// public Scheme withTertiaryContainer(String tertiaryContainer) {\r\n//     this.tertiaryContainer = tertiaryContainer;\r\n//     return this;\r\n// }\r\n//\r\n// public Scheme withTertiaryContainer(Boolean tertiaryContainer) {\r\n//     this.tertiaryContainer = tertiaryContainer;\r\n//     return this;\r\n//"}], "metadata": {"task_id": "Iconify/362", "ground_truth": "    this.tertiaryContainer = tertiaryContainer;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withOnTertiaryContainer(int onTertiaryContainer) {\r", "choices": [{"text": "this.onTertiaryContainer = onTertiaryContainer;\r\nreturn this;\r\n}\r\npublic Scheme withOnTertiaryContainer(String onTertiaryContainer) {\r\nthis.onTertiaryContainer = onTertiaryContainer;\r\nreturn this;\r\n}\r\npublic Scheme withOnTertiaryContainer(Boolean onTertiaryContainer) {\r\nthis.onTertiaryContainer = onTertiaryContainer;\r\nreturn this;\r\n}\r\npublic Scheme withOnTerti"}], "metadata": {"task_id": "Iconify/363", "ground_truth": "    this.onTertiaryContainer = onTertiaryContainer;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withError(int error) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/364", "ground_truth": "    this.error = error;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withOnError(int onError) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/365", "ground_truth": "    this.onError = onError;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withErrorContainer(int errorContainer) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/366", "ground_truth": "    this.errorContainer = errorContainer;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withOnErrorContainer(int onErrorContainer) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/367", "ground_truth": "    this.onErrorContainer = onErrorContainer;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withBackground(int background) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/368", "ground_truth": "    this.background = background;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withOnBackground(int onBackground) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/369", "ground_truth": "    this.onBackground = onBackground;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withSurface(int surface) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/370", "ground_truth": "    this.surface = surface;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withOnSurface(int onSurface) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/371", "ground_truth": "    this.onSurface = onSurface;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withSurfaceVariant(int surfaceVariant) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/372", "ground_truth": "    this.surfaceVariant = surfaceVariant;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withOnSurfaceVariant(int onSurfaceVariant) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/373", "ground_truth": "    this.onSurfaceVariant = onSurfaceVariant;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withOutline(int outline) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/374", "ground_truth": "    this.outline = outline;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withOutlineVariant(int outlineVariant) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/375", "ground_truth": "    this.outlineVariant = outlineVariant;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withShadow(int shadow) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/376", "ground_truth": "    this.shadow = shadow;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withScrim(int scrim) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/377", "ground_truth": "    this.scrim = scrim;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withInverseSurface(int inverseSurface) {\r", "choices": [{"text": "//   this.inverseSurface = inverseSurface;\r\n//   return this;\r\n// }\r\n//\r\n// public Scheme withInverseSurface(String inverseSurface) {\r\n//   this.inverseSurface = inverseSurface;\r\n//   return this;\r\n// }\r\n//\r\n// public Scheme withInverseSurface(double inverseSurface) {\r\n//   this.inverseSurface = inverseSurface;\r\n//   return this;\r\n// }\r\n//\r\n// public Scheme withInverseSurface(float inverseSurface) {\r\n//   this.inverseSurface ="}], "metadata": {"task_id": "Iconify/378", "ground_truth": "    this.inverseSurface = inverseSurface;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withInverseOnSurface(int inverseOnSurface) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/379", "ground_truth": "    this.inverseOnSurface = inverseOnSurface;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n public Scheme withInversePrimary(int inversePrimary) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/380", "ground_truth": "    this.inversePrimary = inversePrimary;\r\n    return this;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\scheme\\Scheme.java"}}
{"prompt": "\n import java.util.Map\nimport java.util.List\npublic static List<Integer> score(Map<Integer, Integer> colorsToPopulation) {\r", "choices": [{"text": "//    return colorsToPopulation.entrySet().stream().sorted(Map.Entry.comparingByValue()).map(Map.Entry::getKey).collect(Collectors.toList());\r\n    List<Integer> result = new ArrayList<>();\r\n    for (Map.Entry<Integer, Integer> entry : colorsToPopulation.entrySet()) {\r\n        result.add(entry.getKey());\r\n    }\r\n    Collections.sort(result, new Comparator<Integer>() {\r\n        @Override\r\n        public int compare(Integer o1, Integer o2) {\r\n            return o1 - o2;\r\n        }\r\n    });\r\n    return result;\r\n}\r"}], "metadata": {"task_id": "Iconify/381", "ground_truth": "    // Fallback color is Google Blue.\r\n    return score(colorsToPopulation, 4, 0xff4285f4, true);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\score\\Score.java"}}
{"prompt": "\n /**\r\n * Determines if an angle is between two other angles, rotating clockwise.\r\n */\r\nprivate static boolean isBetween(double angle, double a, double b) {\r\n    if (a < b) {\r\n        return a <= angle && angle <= b;\r", "choices": [{"text": "} else {\r\n        return a <= angle || angle <= b;\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Iconify/383", "ground_truth": "    }\r\n    return a <= angle || angle <= b;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\temperature\\TemperatureCache.java"}}
{"prompt": "\n import com.drdisagree.iconify.utils.color.monet.hct.Hct\n/**\r\n * Temperature relative to all colors with the same chroma and tone.\r\n *\r\n * @param hct HCT to find the relative temperature of.\r\n * @return Value on a scale from 0 to 1.\r\n */\r\npublic double getRelativeTemperature(Hct hct) {\r\n    double range = getTempsByHct().get(getWarmest()) - getTempsByHct().get(getColdest());\r\n    double differenceFromColdest = getTempsByHct().get(hct) - getTempsByHct().get(getColdest());\r\n    // Handle when there's no difference in temperature between warmest and\r\n    // coldest: for example, at T100, only one color is available, white.\r", "choices": [{"text": "//    if (range == 0) {\r\n//        return 0.5;\r\n//    }\r\n    return differenceFromColdest / range;\r\n}\r\n"}], "metadata": {"task_id": "Iconify/384", "ground_truth": "    if (range == 0.) {\r\n        return 0.5;\r\n    }\r\n    return differenceFromColdest / range;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\temperature\\TemperatureCache.java"}}
{"prompt": "\n /**\r\n * Converts a color from linear RGB components to ARGB format.\r\n */\r\npublic static int argbFromLinrgb(double[] linrgb) {\r\n    int r = delinearized(linrgb[0]);\r\n    int g = delinearized(linrgb[1]);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/388", "ground_truth": "    int b = delinearized(linrgb[2]);\r\n    return argbFromRgb(r, g, b);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\ColorUtils.java"}}
{"prompt": "\n /**\r\n * Converts a color from XYZ to ARGB.\r\n */\r\npublic static double[] xyzFromArgb(int argb) {\r\n    double r = linearized(redFromArgb(argb));\r\n    double g = linearized(greenFromArgb(argb));\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/390", "ground_truth": "    double b = linearized(blueFromArgb(argb));\r\n    return MathUtils.matrixMultiply(new double[] { r, g, b }, SRGB_TO_XYZ);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\ColorUtils.java"}}
{"prompt": "\n /**\r\n * Converts an L* value to an ARGB representation.\r\n *\r\n * @param lstar L* in L*a*b*\r\n * @return ARGB representation of grayscale color with lightness matching L*\r\n */\r\npublic static int argbFromLstar(double lstar) {\r\n    double y = yFromLstar(lstar);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/392", "ground_truth": "    int component = delinearized(y);\r\n    return argbFromRgb(component, component, component);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\ColorUtils.java"}}
{"prompt": "\n /**\r\n * Computes the L* value of a color in ARGB representation.\r\n *\r\n * @param argb ARGB representation of a color\r\n * @return L*, from L*a*b*, coordinate of the color\r\n */\r\npublic static double lstarFromArgb(int argb) {\r", "choices": [{"text": "return lstarFromRgb(Color.red(argb), Color.green(argb), Color.blue(argb));\r\n}\r\n\r\n/**\r\n * Computes the L* value of a color in RGB representation.\r\n *\r\n * @param r Red component of the color\r\n * @param g Green component of the color\r\n * @param b Blue component of the color\r\n * @return L*, from L*a*b*, coordinate of the color\r\n */\r\npublic static double lstarFromRgb(int r, int g, int b) {\r\nreturn lstarFromXyz("}], "metadata": {"task_id": "Iconify/393", "ground_truth": "    double y = xyzFromArgb(argb)[1];\r\n    return 116.0 * labF(y / 100.0) - 16.0;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\ColorUtils.java"}}
{"prompt": "\n static double labF(double t) {\r\n    double e = 216.0 / 24389.0;\r\n    double kappa = 24389.0 / 27.0;\r\n    if (t > e) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/396", "ground_truth": "        return Math.pow(t, 1.0 / 3.0);\r\n    } else {\r\n        return (kappa * t + 16) / 116;\r\n    }\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\ColorUtils.java"}}
{"prompt": "\n static double labInvf(double ft) {\r\n    double e = 216.0 / 24389.0;\r\n    double kappa = 24389.0 / 27.0;\r\n    double ft3 = ft * ft * ft;\r\n    if (ft3 > e) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/397", "ground_truth": "        return ft3;\r\n    } else {\r\n        return (116 * ft - 16) / kappa;\r\n    }\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\ColorUtils.java"}}
{"prompt": "\n /**\r\n * The signum function.\r\n *\r\n * @return 1 if num > 0, -1 if num < 0, and 0 if num = 0\r\n */\r\npublic static int signum(double num) {\r\n    if (num < 0) {\r\n        return -1;\r\n    } else if (num == 0) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/398", "ground_truth": "        return 0;\r\n    } else {\r\n        return 1;\r\n    }\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\MathUtils.java"}}
{"prompt": "\n /**\r\n * Clamps an integer between two integers.\r\n *\r\n * @return input when min <= input <= max, and either min or max otherwise.\r\n */\r\npublic static int clampInt(int min, int max, int input) {\r\n    if (input < min) {\r\n        return min;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/399", "ground_truth": "    } else if (input > max) {\r\n        return max;\r\n    }\r\n    return input;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\MathUtils.java"}}
{"prompt": "\n /**\r\n * Clamps an integer between two floating-point numbers.\r\n *\r\n * @return input when min <= input <= max, and either min or max otherwise.\r\n */\r\npublic static double clampDouble(double min, double max, double input) {\r\n    if (input < min) {\r\n        return min;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/400", "ground_truth": "    } else if (input > max) {\r\n        return max;\r\n    }\r\n    return input;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\MathUtils.java"}}
{"prompt": "\n /**\r\n * Sanitizes a degree measure as an integer.\r\n *\r\n * @return a degree measure between 0 (inclusive) and 360 (exclusive).\r\n */\r\npublic static int sanitizeDegreesInt(int degrees) {\r\n    degrees = degrees % 360;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/401", "ground_truth": "    if (degrees < 0) {\r\n        degrees = degrees + 360;\r\n    }\r\n    return degrees;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\MathUtils.java"}}
{"prompt": "\n /**\r\n * Sanitizes a degree measure as a floating-point number.\r\n *\r\n * @return a degree measure between 0.0 (inclusive) and 360.0 (exclusive).\r\n */\r\npublic static double sanitizeDegreesDouble(double degrees) {\r\n    degrees = degrees % 360.0;\r", "choices": [{"text": "//    if (degrees < 0.0) {\r\n//        degrees += 360.0;\r\n//    }\r\n    return degrees;\r\n}\r\n\r\n/**\r\n * Sanitizes a degree measure as an integer.\r\n *\r\n * @return a degree measure between 0 (inclusive) and 360 (exclusive).\r\n */\r\npublic static int sanitizeDegreesInt(double degrees) {\r\n    degrees = sanitizeDegreesDouble(degrees);\r\n    return (int) degrees;\r\n}\r\n\r\n/**\r\n * Sanitizes a degree measure as an integer.\r\n *\r\n * @"}], "metadata": {"task_id": "Iconify/402", "ground_truth": "    if (degrees < 0) {\r\n        degrees = degrees + 360.0;\r\n    }\r\n    return degrees;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\MathUtils.java"}}
{"prompt": "\n /**\r\n * Sign of direction change needed to travel from one angle to another.\r\n *\r\n * <p>For angles that are 180 degrees apart from each other, both directions have the same travel\r\n * distance, so either direction is shortest. The value 1.0 is returned in this case.\r\n *\r\n * @param from The angle travel starts from, in degrees.\r\n * @param to   The angle travel ends at, in degrees.\r\n * @return -1 if decreasing from leads to the shortest travel distance, 1 if increasing from leads\r\n * to the shortest travel distance.\r\n */\r\npublic static double rotationDirection(double from, double to) {\r", "choices": [{"text": "double diff = to - from;\r\nif (diff == 0) {\r\nreturn 1.0;\r\n}\r\nif (diff < 0) {\r\ndiff += 360;\r\n}\r\nif (diff > 180) {\r\ndiff = 360 - diff;\r\n}\r\nreturn diff / 180;\r\n}\r\n}\r\n}\r\n<file_sep>/src/main/java/com/github/jankroken/jankbot/commands/Command.java\npackage com.github"}], "metadata": {"task_id": "Iconify/403", "ground_truth": "    double increasingDifference = sanitizeDegreesDouble(to - from);\r\n    return increasingDifference <= 180.0 ? 1.0 : -1.0;\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\MathUtils.java"}}
{"prompt": "\n /**\r\n * Multiplies a 1x3 row vector with a 3x3 matrix.\r\n */\r\npublic static double[] matrixMultiply(double[] row, double[][] matrix) {\r\n    double a = row[0] * matrix[0][0] + row[1] * matrix[0][1] + row[2] * matrix[0][2];\r\n    double b = row[0] * matrix[1][0] + row[1] * matrix[1][1] + row[2] * matrix[1][2];\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/404", "ground_truth": "    double c = row[0] * matrix[2][0] + row[1] * matrix[2][1] + row[2] * matrix[2][2];\r\n    return new double[] { a, b, c };\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\MathUtils.java"}}
{"prompt": "\n /**\r\n * Hex string representing color, ex. #ff0000 for red.\r\n *\r\n * @param argb ARGB representation of a color.\r\n */\r\npublic static String hexFromArgb(int argb) {\r\n    int red = ColorUtils.redFromArgb(argb);\r\n    int blue = ColorUtils.blueFromArgb(argb);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Iconify/405", "ground_truth": "    int green = ColorUtils.greenFromArgb(argb);\r\n    return String.format(\"#%02x%02x%02x\", red, green, blue);\r\n}", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\color\\monet\\utils\\StringUtils.java"}}
{"prompt": "\n fun setValue(newValue: T) {\n        if (value !== newValue) {", "choices": [{"text": "\n fun setValue(newValue: T) {\n        if (value!== newValue) {\n            value = newValue\n            notifyChange()\n        }\n    }\n}\n\nclass MyViewModel : ViewModel() {\n    val text = ObservableField<String>()\n}\n\nclass MyActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        val viewModel = ViewModelProviders.of(this).get(MyViewModel::class.java)\n        viewModel.text.set(\"Hello World!\")\n\n        val binding = DataBindingUtil.setContentView<ActivityMainBinding>(this, R.layout.activity_main)\n        binding"}], "metadata": {"task_id": "Iconify/406", "ground_truth": "            value = newValue\n\n            listener?.onChange(value)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\extension\\ObservableVariable.kt"}}
{"prompt": "\n  @SafeVarargs\n    protected fun publishProgress(vararg values: Progress) {\n        if (!isCancelled) {", "choices": [{"text": "            for (value in values) {\n                publishProgress(value)\n            }\n        }\n    }\n\n    protected fun publishProgress(value: Progress) {\n        if (!isCancelled) {\n            onProgressUpdate(value)\n        }\n    }\n\n    protected fun publishProgress(value: Int) {\n        if (!isCancelled) {\n            onProgressUpdate(Progress(value))\n        }\n    }\n\n    protected fun publishProgress(value: Long) {\n        if (!isCancelled) {\n            onProgressUpdate(Progress(value))\n        }\n    }\n\n    protected fun publishProgress(value: Float) {\n        if (!isCancelled)"}], "metadata": {"task_id": "Iconify/408", "ground_truth": "            mHandler.post { onProgressUpdate(*values) }\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\extension\\TaskExecutor.kt"}}
{"prompt": "\n fun cancel(mayInterruptIfRunning: Boolean) {\n        mCancelled.set(true)\n        if (mayInterruptIfRunning) {", "choices": [{"text": "            interrupt()\n        }\n    }\n\n    override fun isCancelled(): Boolean {\n        return mCancelled.get()\n    }\n\n    override fun isDone(): Boolean {\n        return mDone.get()\n    }\n\n    override fun get(): T {\n        return mResult.get()\n    }\n\n    override fun get(timeout: Long, unit: TimeUnit): T {\n        return mResult.get()\n    }\n\n    override fun get(timeout: Long, unit: TimeUnit): T {\n        return mResult.get()\n    }\n\n    override fun get(timeout: Long, unit: TimeUnit): T {\n        return mResult.get()\n   "}], "metadata": {"task_id": "Iconify/409", "ground_truth": "            mHandler.removeCallbacksAndMessages(null)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\extension\\TaskExecutor.kt"}}
{"prompt": "\n import java.io.IOException\n @JvmStatic\n    @Throws(IOException::class)\n    fun copyAssets(assetFolder: String) {\n        cleanDir(assetFolder)", "choices": [{"text": "        val assetManager = Assets.instance.assetManager\n        val assetNames = assetManager.getAssetNames(assetFolder)\n        for (assetName in assetNames) {\n            val inputStream = assetManager.open(assetName)\n            val outputStream = FileOutputStream(File(assetFolder, assetName))\n            val buffer = ByteArray(1024)\n            var read: Int\n            while (inputStream.read(buffer).also { read = it }!= -1) {\n                outputStream.write(buffer, 0, read)\n            }\n            inputStream.close()\n            outputStream.close()\n        }\n    }\n"}], "metadata": {"task_id": "Iconify/410", "ground_truth": "        createDir(assetFolder)\n        copyFileOrDirectory(appContext, assetFolder, \"$DATA_DIR/$assetFolder\")\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\FileUtil.kt"}}
{"prompt": "\n private fun createDir(dirName: String) {", "choices": [{"text": " val dir = File(dirName)\n if (!dir.exists()) {\n dir.mkdirs()\n }\n }\n\n private fun createFile(fileName: String) {\n val file = File(fileName)\n if (!file.exists()) {\n file.createNewFile()\n }\n }\n\n private fun createFile(fileName: String, content: String) {\n val file = File(fileName)\n if (!file.exists()) {\n file.createNewFile()\n }\n val fileWriter = FileWriter(file)\n fileWriter.write(content)\n fileWriter.close()\n"}], "metadata": {"task_id": "Iconify/411", "ground_truth": "        val newFolder = File(\"$DATA_DIR/$dirName/\")\n        newFolder.mkdirs()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\FileUtil.kt"}}
{"prompt": "\n private fun closeQuietly(autoCloseable: AutoCloseable?) {\n        try {\n            autoCloseable?.close()", "choices": [{"text": "        } catch (e: Exception) {\n            // ignore\n        }\n    }\n}\n<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.View\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.lifecycle.ViewModelProviders\nimport com.example."}], "metadata": {"task_id": "Iconify/412", "ground_truth": "        } catch (ignored: Exception) {\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\FileUtil.kt"}}
{"prompt": "\n import java.io.OutputStream\nimport java.io.InputStream\nimport java.io.IOException\n @Throws(IOException::class)\n    fun copyAndClose(input: InputStream, output: OutputStream) {\n        copy(input, output)", "choices": [{"text": "        input.close()\n        output.close()\n    }\n"}], "metadata": {"task_id": "Iconify/413", "ground_truth": "        closeQuietly(input)\n        closeQuietly(output)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\FileUtil.kt"}}
{"prompt": "\n import java.io.OutputStream\nimport java.io.InputStream\nimport java.io.IOException\n @Throws(IOException::class)\n    fun copy(input: InputStream, output: OutputStream) {\n        val buffer = ByteArray(1024)\n        var n: Int", "choices": [{"text": "        while (input.read(buffer).also { n = it }!= -1) {\n            output.write(buffer, 0, n)\n        }\n    }\n"}], "metadata": {"task_id": "Iconify/414", "ground_truth": "\n        while (-1 != input.read(buffer).also { n = it }) {\n            output.write(buffer, 0, n)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\FileUtil.kt"}}
{"prompt": "\n import java.io.File\nimport androidx.activity.result.ActivityResultLauncher\nimport android.content.Intent\nfun launchFilePicker(launcher: ActivityResultLauncher<Intent?>, type: String?) {\n        val chooseFile = Intent(Intent.ACTION_GET_CONTENT)\n        chooseFile.addCategory(Intent.CATEGORY_OPENABLE)", "choices": [{"text": "        chooseFile.type = type\n        launcher.launch(chooseFile)\n    }\n\nfun launchFilePicker(context: Context, type: String?) {\n        val chooseFile = Intent(Intent.ACTION_GET_CONTENT)\n        chooseFile.addCategory(Intent.CATEGORY_OPENABLE)\n        chooseFile.type = type\n        context.startActivity(chooseFile)\n    }\n\nfun launchFilePicker(context: Context, type: String?, requestCode: Int) {\n        val chooseFile = Intent(Intent.ACTION_GET_CONTENT)\n        chooseFile.addCategory(Intent.CATEGORY_OPENABLE"}], "metadata": {"task_id": "Iconify/417", "ground_truth": "        chooseFile.setType(type)\n        launcher.launch(chooseFile)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\FileUtil.kt"}}
{"prompt": "\n import com.topjohnwu.superuser.Shell\nprivate fun restoreFile(fileName: String, dest: String) {\n        if (backupExists(fileName)) {\n            Shell.cmd(\"rm -rf $dest/$fileName\").exec()", "choices": [{"text": "            Shell.cmd(\"cp -r $dest/$fileName $dest/$fileName.bak\").exec()\n            Shell.cmd(\"mv $dest/$fileName.bak $dest/$fileName\").exec()\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/419", "ground_truth": "            Shell.cmd(\"cp -rf \" + Resources.BACKUP_DIR + \"/\" + fileName + \" \" + dest + \"/\").exec()\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\helper\\BackupRestore.kt"}}
{"prompt": "\n private fun restoreBlurSettings() {\n        if (isBlurEnabled) {", "choices": [{"text": "            val blurSettings = getBlurSettings()\n            if (blurSettings!= null) {\n                blurView.setupWith(blurSettings)\n            }\n        }\n    }\n"}], "metadata": {"task_id": "Iconify/420", "ground_truth": "            enableBlur()\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\helper\\BackupRestore.kt"}}
{"prompt": "\n import android.util.Log\n @JvmStatic\n    fun writeLog(tag: String?, header: String?, details: List<String?>) {\n        val log = deviceInfo\n\n        log.append(\"error: \").append(header).append('\\n')\n        log.append('\\n')\n        log.append(tag).append(\":\\n\")\n\n        for (line in details) {", "choices": [{"text": "            log.append(line).append('\\n')\n        }\n\n        log.append('\\n')\n        log.append('\\n')\n\n        Log.e(tag, log.toString())\n    }\n}<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.View\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.TextView\nimport androidx.appcompat.app."}], "metadata": {"task_id": "Iconify/423", "ground_truth": "            log.append('\\t').append(line).append('\\n')\n        }\n\n        writeLogToFile(log)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\helper\\Logger.kt"}}
{"prompt": "\n import android.util.Log\n @JvmStatic\n    fun writeLog(tag: String?, header: String?, details: String?) {\n        val log = deviceInfo\n\n        log.append(\"error: \").append(header).append('\\n')\n        log.append('\\n')", "choices": [{"text": "        log.append(details).append('\\n')\n        log.append('\\n')\n        log.append('\\n')\n        Log.e(tag, log.toString())\n    }\n}\n\n"}], "metadata": {"task_id": "Iconify/424", "ground_truth": "        log.append(tag).append(\":\\n\")\n        log.append(details).append('\\n')\n\n        writeLogToFile(log)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\helper\\Logger.kt"}}
{"prompt": "\n import java.io.StringWriter\nimport java.io.PrintWriter\nimport android.util.Log\n @JvmStatic\n    fun writeLog(tag: String?, header: String?, exception: Exception) {\n        val log = deviceInfo\n        log.append(\"error: \").append(header).append('\\n')\n        log.append('\\n')\n        log.append(tag).append(\":\\n\")\n\n        val writer = StringWriter()\n        exception.printStackTrace(PrintWriter(writer))\n", "choices": [{"text": "/        val ex = exception.message\n        log.append(writer.toString()).append('\\n')\n        log.append('\\n')\n        Log.e(tag, writer.toString())\n    }\n}<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.View\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.TextView\nimport androidx.appcompat.app"}], "metadata": {"task_id": "Iconify/425", "ground_truth": "        val str = writer.toString()\n        log.append(str).append('\\n')\n\n        writeLogToFile(log)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\helper\\Logger.kt"}}
{"prompt": "\n import androidx.annotation.IntRange\nimport android.util.TypedValue\n @JvmStatic\n    fun createComplexDimension(\n        @IntRange(from = -0x800000, to = 0x7FFFFF) value: Int,\n        @ComplexDimensionUnit units: Int\n    ): Int {\n        require(!(units < TypedValue.COMPLEX_UNIT_PX || units > TypedValue.COMPLEX_UNIT_MM)) { \"Must be a valid COMPLEX_UNIT_*: $units\" }", "choices": [{"text": "        return value and 0x7FFFFF or (units shl 24)\n    }\n"}], "metadata": {"task_id": "Iconify/426", "ground_truth": "\n        return intToComplex(value) or units\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\helper\\TypedValueUtil.kt"}}
{"prompt": "\n private fun intToComplex(value: Int): Int {\n        require(!(value < -0x800000 || value >= 0x800000)) { \"Magnitude of the value is too large: $value\" }", "choices": [{"text": "        return value\n    }\n}\n\n"}], "metadata": {"task_id": "Iconify/427", "ground_truth": "\n        return createComplex(value, TypedValue.COMPLEX_RADIX_23p0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\helper\\TypedValueUtil.kt"}}
{"prompt": "\n import com.topjohnwu.superuser.Shell\nimport com.drdisagree.iconify.common.Resources\nimport com.drdisagree.iconify.R\n @JvmStatic\n    fun handleModule() {\n        if (moduleExists()) {\n            // Clean temporary directory\n            Shell.cmd(\"rm -rf \" + Resources.TEMP_DIR).exec()\n\n            // Backup necessary files", "choices": [{"text": "            Shell.cmd(\"cp -r \" + Resources.MODULE_DIR + \" \" + Resources.TEMP_DIR).exec()\n\n            // Remove module\n            Shell.cmd(\"rm -rf \" + Resources.MODULE_DIR).exec()\n\n            // Install module\n            Shell.cmd(\"cp -r \" + Resources.TEMP_DIR + \" \" + Resources.MODULE_DIR).exec()\n\n            // Remove temporary directory\n            Shell.cmd(\"rm -rf \" + Resources.TEMP_DIR).exec()\n        }\n    }\n\n    @JvmStatic\n    fun moduleExists(): Boolean {\n        return Shell.cmd(\"ls \" + Resources"}], "metadata": {"task_id": "Iconify/429", "ground_truth": "            backupFiles()\n        }\n\n        installModule()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\ModuleUtil.kt"}}
{"prompt": "\n import com.drdisagree.iconify.utils.overlay.OverlayUtil\nprivate fun shouldUseDefaultColors(): Boolean {\n        return OverlayUtil.isOverlayDisabled(\"IconifyComponentAMAC.overlay\") && OverlayUtil.isOverlayDisabled(", "choices": [{"text": "                \"IconifyComponentAMAC.overlay.default\"\n        )\n    }\n\n"}], "metadata": {"task_id": "Iconify/430", "ground_truth": "            \"IconifyComponentAMGC.overlay\"\n        ) && OverlayUtil.isOverlayDisabled(\"IconifyComponentME.overlay\")\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\ModuleUtil.kt"}}
{"prompt": " import java.io.File\nval TAG\nfun getOverlayName(filePath: String): String {\n        val file = File(filePath)\n        val fileName = file.getName()", "choices": [{"text": "        val fileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf(\".\"))\n        return fileNameWithoutExtension\n}\n\nfun getOverlayName(filePath: File): String {\n        val fileName = filePath.getName()\n        val fileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf(\".\"))\n        return fileNameWithoutExtension\n}\n\nfun getOverlayName(filePath: Uri): String {\n        val fileName = filePath.lastPathSegment\n        val fileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf(\".\"))\n        return fileNameWithoutExtension\n}\n\nfun getOverlayName(filePath: String, extension:"}], "metadata": {"task_id": "Iconify/432", "ground_truth": "\n        return fileName.replace(\"IconifyComponent|-unsigned|-unaligned|.apk\".toRegex(), \"\")\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\compiler\\CompilerUtil.kt"}}
{"prompt": "\n import android.os.Build\nprivate fun keepFirstDigit(input: String): String {\n        val output = StringBuilder()\n        var firstDigitFound = false\n\n        for (c in input.toCharArray()) {\n            if (Character.isDigit(c)) {\n                if (!firstDigitFound) {\n                    output.append(c)\n                    firstDigitFound = true\n                }\n            } else {\n                output.append(c)", "choices": [{"text": "            }\n        }\n\n        return output.toString()\n    }\n\n"}], "metadata": {"task_id": "Iconify/434", "ground_truth": "            }\n        }\n\n        return output.toString()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\compiler\\CompilerUtil.kt"}}
{"prompt": "\n import com.topjohnwu.superuser.Shell\nprivate fun createManifestResource(\n        overlayName: String?,\n        targetPackage: String?,\n        source: String\n    ): Boolean {\n        Shell.cmd(\"mkdir -p $source/res\").exec()\n\n        val values = arrayOf(\"values\", \"values-land\", \"values-night\")\n\n        for (i in 0..2) {\n            Shell.cmd(\"mkdir -p \" + source + \"/res/\" + values[i]).exec()\n            Shell.cmd(\n                \"printf '\" + mResource[i] + \"' > \" + source + \"/res/\" + values[i] + \"/iconify.xml;\"", "choices": [{"text": "            ).exec()\n        }\n\n        Shell.cmd(\"mkdir -p \" + source + \"/res/mipmap-anydpi-v26\").exec()\n        Shell.cmd(\n            \"printf '\" + mResource[3] + \"' > \" + source + \"/res/mipmap-anydpi-v26/ic_launcher_round.xml;\"\n        ).exec()\n\n        Shell.cmd(\"mkdir -p \" + source + \"/res/mipmap-hdpi\").exec()\n        Shell.cmd(\n            \"printf '\" + mResource[4] + \"' > \" + source + \"/res/mip"}], "metadata": {"task_id": "Iconify/436", "ground_truth": "            ).exec()\n        }\n\n        return OverlayCompiler.createManifest(overlayName, targetPackage, source)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\compiler\\DynamicCompiler.kt"}}
{"prompt": "\n  @JvmStatic\n    fun createManifest(name: String?, target: String?, source: String): Boolean {\n        var hasErroredOut = false\n        var attempt = 3\n\n        while (attempt-- != 0) {\n            if (OverlayCompiler.createManifest(name, target, source)) {\n                try {\n                    Thread.sleep(1000)\n                } catch (ignored: Exception) {\n                }\n            } else {\n                hasErroredOut = true\n                break", "choices": [{"text": "\n  @JvmStatic\n    fun createManifest(name: String?, target: String?, source: String): Boolean {\n        var hasErroredOut = false\n        var attempt = 3\n\n        while (attempt--!= 0) {\n            if (OverlayCompiler.createManifest(name, target, source)) {\n                try {\n                    Thread.sleep(1000)\n                } catch (ignored: Exception) {\n                }\n            } else {\n                hasErroredOut = true\n                break\n            }\n        }\n\n        return!hasErroredOut\n    }\n\n    @JvmStatic\n    fun createManifest(name: String?, target: String?, source: String,\n                       manifest: String): Boolean {\n        var hasErroredOut = false\n        var attempt = 3\n\n        while (attempt--!= 0) {\n            if (OverlayCompiler.createManifest(name, target, source, manifest)) {\n                try {\n                    Thread.sleep(1000)\n                } catch (ignored: Exception) {\n                }\n            } else {\n                hasErroredOut = true\n                break\n            }\n        }\n\n        return!has"}], "metadata": {"task_id": "Iconify/438", "ground_truth": "            }\n        }\n\n        return !hasErroredOut\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\compiler\\OnboardingCompiler.kt"}}
{"prompt": "\n import java.util.Locale\nfun listContains(list: List<String>, target: String): Boolean {\n        for (item in list) {\n            if (item.lowercase(Locale.getDefault())\n                    .contains(target.lowercase(Locale.getDefault()))\n            ) {\n                return true", "choices": [{"text": "\n import java.util.Locale\nfun listContains(list: List<String>, target: String): Boolean {\n        for (item in list) {\n            if (item.lowercase(Locale.getDefault())\n                   .contains(target.lowercase(Locale.getDefault()))\n            ) {\n                return true\n            }\n        }\n        return false\n    }\nfun main() {\n    val list = listOf(\"a\", \"b\", \"c\", \"d\", \"e\")\n    println(listContains(list, \"a\"))\n    println(listContains(list, \"z\"))\n}\n"}], "metadata": {"task_id": "Iconify/442", "ground_truth": "            }\n        }\n\n        return false\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\compiler\\OverlayCompiler.kt"}}
{"prompt": "\n import com.drdisagree.iconify.config.Prefs.putBoolean\nimport com.drdisagree.iconify.common.Dynamic.TOTAL_BRIGHTNESSBARS\nprivate fun disableOthers(n: Int) {\n        for (i in 1..TOTAL_BRIGHTNESSBARS) {\n            putBoolean(\"IconifyComponentBBN$i.overlay\", i == n)", "choices": [{"text": "        }\n    }\n\nprivate fun enableOthers(n: Int) {\n        for (i in 1..TOTAL_BRIGHTNESSBARS) {\n            putBoolean(\"IconifyComponentBBN$i.overlay\", i!= n)\n        }\n    }\n\nprivate fun getOverlay(n: Int): Boolean {\n        return getBoolean(\"IconifyComponentBBN$n.overlay\", false)\n    }\n\nprivate fun setOverlay(n: Int, overlay: Boolean) {\n        putBoolean(\"IconifyComponentBBN$n.overlay\", overlay)\n    }\n\nprivate fun getOverlayColor"}], "metadata": {"task_id": "Iconify/447", "ground_truth": "            putBoolean(\"IconifyComponentBBP$i.overlay\", false)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\BrightnessBarManager.kt"}}
{"prompt": "\n import com.drdisagree.iconify.config.Prefs.putBoolean\nimport com.drdisagree.iconify.common.Dynamic.TOTAL_BRIGHTNESSBARSPIXEL\nprivate fun disableOthers(n: Int) {\n        for (i in 1..TOTAL_BRIGHTNESSBARSPIXEL) {\n            putBoolean(\"IconifyComponentBBP$i.overlay\", i == n)", "choices": [{"text": "        }\n    }\n\nprivate fun enableOthers(n: Int) {\n        for (i in 1..TOTAL_BRIGHTNESSBARSPIXEL) {\n            putBoolean(\"IconifyComponentBBP$i.overlay\", i!= n)\n        }\n    }\n\nprivate fun getOverlay(n: Int): Boolean {\n        return getBoolean(\"IconifyComponentBBP$n.overlay\", false)\n    }\n\nprivate fun getOverlays(): List<Int> {\n        val overlays = mutableListOf<Int>()\n        for (i in 1..TOTAL_BRIGHTNESSBARSPIX"}], "metadata": {"task_id": "Iconify/449", "ground_truth": "            putBoolean(\"IconifyComponentBBN$i.overlay\", false)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\BrightnessBarPixelManager.kt"}}
{"prompt": "\n import com.drdisagree.iconify.config.Prefs.putBoolean\nimport com.drdisagree.iconify.common.Dynamic.TOTAL_ICONPACKS\nprivate fun disableOthers(n: Int) {\n        for (i in 1..TOTAL_ICONPACKS) {\n            putBoolean(\"IconifyComponentIPAS$i.overlay\", i == n)", "choices": [{"text": "        }\n    }\n\nprivate fun enableOthers(n: Int) {\n        for (i in 1..TOTAL_ICONPACKS) {\n            putBoolean(\"IconifyComponentIPAS$i.overlay\", i!= n)\n        }\n    }\n\nprivate fun getOverlay(n: Int): Boolean {\n        return getBoolean(\"IconifyComponentIPAS$n.overlay\", false)\n    }\n\nprivate fun getOverlays(): List<Boolean> {\n        val list = ArrayList<Boolean>()\n        for (i in 1..TOTAL_ICONPACKS) {\n            list.add(getOverlay"}], "metadata": {"task_id": "Iconify/451", "ground_truth": "            putBoolean(\"IconifyComponentIPSUI$i.overlay\", i == n)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\IconPackManager.kt"}}
{"prompt": "\n  @JvmStatic\n    fun enableOverlay(m: Int, n: Int) {", "choices": [{"text": "        val overlay = newOverlay(m, n)\n        val overlays = overlays()\n        overlays.add(overlay)\n        overlays.save()\n    }\n\n    @JvmStatic\n    fun disableOverlay(m: Int, n: Int) {\n        val overlays = overlays()\n        val overlay = overlays.get(m, n)\n        overlays.remove(overlay)\n        overlays.save()\n    }\n\n    @JvmStatic\n    fun overlays(): Overlays {\n        return Overlays(\n            Overlays.getOverlaysFile(\n                context\n            )\n        )\n    }\n\n    @JvmStatic"}], "metadata": {"task_id": "Iconify/452", "ground_truth": "        disableOthers(m, n)\n        enableOverlayExclusiveInCategory(\"IconifyComponentMPIP$m$n.overlay\")\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\MediaPlayerIconManager.kt"}}
{"prompt": "\n private fun disableOthers(m: Int, n: Int) {\n        for (i in 1..3) {", "choices": [{"text": "            for (j in 1..3) {\n                if (i!= m && j!= n) {\n                    val button = findViewById<Button>(getButtonId(i, j))\n                    button.isEnabled = false\n                }\n            }\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/453", "ground_truth": "            putBoolean(\"IconifyComponentMPIP$m$i.overlay\", i == n)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\MediaPlayerIconManager.kt"}}
{"prompt": "\n import com.drdisagree.iconify.config.Prefs.putBoolean\nimport com.drdisagree.iconify.common.Dynamic.TOTAL_NOTIFICATIONS\nprivate fun disableOthers(n: Int) {\n        for (i in 1..TOTAL_NOTIFICATIONS) {\n            putBoolean(\"IconifyComponentNFN$i.overlay\", i == n)", "choices": [{"text": "        }\n    }\n\nprivate fun enableOthers(n: Int) {\n        for (i in 1..TOTAL_NOTIFICATIONS) {\n            putBoolean(\"IconifyComponentNFN$i.overlay\", i!= n)\n        }\n    }\n\nprivate fun getOverlay(n: Int): Boolean {\n        return getBoolean(\"IconifyComponentNFN$n.overlay\", true)\n    }\n\nprivate fun getOverlays(): List<Boolean> {\n        val list = mutableListOf<Boolean>()\n        for (i in 1..TOTAL_NOTIFICATIONS) {\n            list.add(getBoolean(\"Icon"}], "metadata": {"task_id": "Iconify/455", "ground_truth": "            putBoolean(\"IconifyComponentNFP$i.overlay\", false)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\NotificationManager.kt"}}
{"prompt": "\n import com.drdisagree.iconify.config.Prefs.putBoolean\nimport com.drdisagree.iconify.common.Dynamic.TOTAL_NOTIFICATIONSPIXEL\nprivate fun disableOthers(n: Int) {\n        for (i in 1..TOTAL_NOTIFICATIONSPIXEL) {\n            putBoolean(\"IconifyComponentNFP$i.overlay\", i == n)", "choices": [{"text": "        }\n    }\n\nprivate fun enableOthers(n: Int) {\n        for (i in 1..TOTAL_NOTIFICATIONSPIXEL) {\n            putBoolean(\"IconifyComponentNFP$i.overlay\", i!= n)\n        }\n    }\n\nprivate fun getOverlay(n: Int): Boolean {\n        return getBoolean(\"IconifyComponentNFP$n.overlay\", true)\n    }\n\nprivate fun getOverlay(n: Int, def: Boolean): Boolean {\n        return getBoolean(\"IconifyComponentNFP$n.overlay\", def)\n    }\n\nprivate fun getOverlay"}], "metadata": {"task_id": "Iconify/457", "ground_truth": "            putBoolean(\"IconifyComponentNFN$i.overlay\", false)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\NotificationPixelManager.kt"}}
{"prompt": "\n import com.drdisagree.iconify.config.Prefs.putBoolean\nimport com.drdisagree.iconify.common.Dynamic.TOTAL_QSSHAPES\nprivate fun disableOthers(n: Int) {\n        for (i in 1..TOTAL_QSSHAPES) {\n            putBoolean(\"IconifyComponentQSSN$i.overlay\", i == n)", "choices": [{"text": "        }\n    }\n\nprivate fun enableOthers(n: Int) {\n        for (i in 1..TOTAL_QSSHAPES) {\n            putBoolean(\"IconifyComponentQSSN$i.overlay\", i!= n)\n        }\n    }\n\nprivate fun getOverlay(n: Int): Boolean {\n        return getBoolean(\"IconifyComponentQSSN$n.overlay\")\n    }\n\nprivate fun setOverlay(n: Int, overlay: Boolean) {\n        putBoolean(\"IconifyComponentQSSN$n.overlay\", overlay)\n    }\n\nprivate fun getIcon("}], "metadata": {"task_id": "Iconify/458", "ground_truth": "            putBoolean(\"IconifyComponentQSSP$i.overlay\", false)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\QsShapeManager.kt"}}
{"prompt": "\n import com.drdisagree.iconify.config.Prefs.putBoolean\nimport com.drdisagree.iconify.common.Dynamic.TOTAL_QSSHAPESPIXEL\nprivate fun disableOthers(n: Int) {\n        for (i in 1..TOTAL_QSSHAPESPIXEL) {\n            putBoolean(\"IconifyComponentQSSP$i.overlay\", i == n)", "choices": [{"text": "        }\n    }\n\nprivate fun enableOthers(n: Int) {\n        for (i in 1..TOTAL_QSSHAPESPIXEL) {\n            putBoolean(\"IconifyComponentQSSP$i.overlay\", i!= n)\n        }\n    }\n\nprivate fun setOverlay(n: Int) {\n        putBoolean(\"IconifyComponentQSSP$n.overlay\", true)\n    }\n\nprivate fun setOverlay(n: Int, overlay: Boolean) {\n        putBoolean(\"IconifyComponentQSSP$n.overlay\", overlay)\n    }\n\nprivate fun getOverlay"}], "metadata": {"task_id": "Iconify/459", "ground_truth": "            putBoolean(\"IconifyComponentQSSN$i.overlay\", false)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\QsShapePixelManager.kt"}}
{"prompt": "\nvar isPortrait Boolean\nvar packageName String\nvar resourceName String\n fun setPortrait(portrait: Boolean) {", "choices": [{"text": "    isPortrait = portrait\n}\n fun setPackageName(packageName: String) {\n    this.packageName = packageName\n}\n fun setResourceName(resourceName: String) {\n    this.resourceName = resourceName\n}\n fun getPortrait(): Boolean {\n    return isPortrait\n}\n fun getPackageName(): String {\n    return packageName\n}\n fun getResourceName(): String {\n    return resourceName\n}\n}\n\n"}], "metadata": {"task_id": "Iconify/460", "ground_truth": "        isPortrait = portrait\n        isLandscape = !portrait\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\resource\\ResourceEntry.kt"}}
{"prompt": "\nvar isLandscape Boolean\nvar resourceName String\nvar resourceValue String\n fun setLandscape(landscape: Boolean) {", "choices": [{"text": "    isLandscape = landscape\n}\n\nfun setResourceName(name: String) {\n    resourceName = name\n}\n\nfun setResourceValue(value: String) {\n    resourceValue = value\n}\n\nfun getLandscape(): Boolean {\n    return isLandscape\n}\n\nfun getResourceName(): String {\n    return resourceName\n}\n\nfun getResourceValue(): String {\n    return resourceValue\n}\n\n"}], "metadata": {"task_id": "Iconify/461", "ground_truth": "        isLandscape = landscape\n        isPortrait = !landscape\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\resource\\ResourceEntry.kt"}}
{"prompt": "\n import java.util.concurrent.atomic.AtomicBoolean\nimport com.drdisagree.iconify.utils.overlay.compiler.DynamicCompiler.buildOverlay\nimport com.drdisagree.iconify.R\n @JvmStatic\n    fun buildOverlayWithResource(vararg resourceEntries: ResourceEntry?): Boolean {\n        val hasErroredOut = AtomicBoolean(false)\n\n        try {\n            createResource(*resourceEntries.filterNotNull().toTypedArray())\n        } catch (e: Exception) {\n            hasErroredOut.set(true)", "choices": [{"text": "            e.printStackTrace()\n        }\n\n        return!hasErroredOut.get()\n    }\n\n    @JvmStatic\n    fun createResource(vararg resourceEntries: ResourceEntry) {\n        val overlay = buildOverlay(resourceEntries)\n        val overlayFile = File(overlay.overlayFile)\n        val overlayDir = overlayFile.parentFile\n        if (!overlayDir.exists()) {\n            overlayDir.mkdirs()\n        }\n        overlayFile.writeText(overlay.overlayText)\n    }\n\n    @JvmStatic\n    fun createResource(vararg resourceEntries: ResourceEntry, overlayFile: File) {\n        val overlay ="}], "metadata": {"task_id": "Iconify/462", "ground_truth": "            Log.e(TAG, \"buildOverlayWithResource:\", e)\n        }\n\n        return hasErroredOut.get()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\resource\\ResourceManager.kt"}}
{"prompt": "\n import com.drdisagree.iconify.utils.overlay.compiler.DynamicCompiler.buildOverlay\nimport com.drdisagree.iconify.utils.SystemUtil.requestStoragePermission\nimport com.drdisagree.iconify.utils.SystemUtil.hasStoragePermission\nimport com.drdisagree.iconify.R\nimport android.content.Context\n @JvmStatic\n    fun buildOverlayWithResource(context: Context?, vararg resourceEntries: ResourceEntry?) {\n        if (!hasStoragePermission()) {\n            requestStoragePermission(context!!)\n        } else {\n            try {\n                createResource(*resourceEntries.filterNotNull().toTypedArray())", "choices": [{"text": "            } catch (e: Exception) {\n                e.printStackTrace()\n            }\n        }\n    }\n\n    @JvmStatic\n    fun buildOverlayWithResource(context: Context?, vararg resourceEntries: ResourceEntry?) {\n        if (!hasStoragePermission()) {\n            requestStoragePermission(context!!)\n        } else {\n            try {\n                createResource(*resourceEntries.filterNotNull().toTypedArray())\n            } catch (e: Exception) {\n                e.printStackTrace()\n            }\n        }\n    }\n\n    @JvmStatic\n    fun buildOverlayWithResource(context: Context?, vararg resourceEntries: ResourceEntry?) {\n        if (!"}], "metadata": {"task_id": "Iconify/463", "ground_truth": "            } catch (e: Exception) {\n                Log.e(TAG, \"buildOverlayWithResource:\", e)\n            }\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\resource\\ResourceManager.kt"}}
{"prompt": "\n import java.util.concurrent.atomic.AtomicBoolean\nimport com.drdisagree.iconify.R\n @JvmStatic\n    fun removeResourceFromOverlay(vararg resourceEntries: ResourceEntry?): Boolean {\n        val hasErroredOut = AtomicBoolean(false)\n\n        try {\n            removeResource(*resourceEntries.filterNotNull().toTypedArray())\n        } catch (e: Exception) {\n            hasErroredOut.set(true)", "choices": [{"text": "        }\n\n        return!hasErroredOut.get()\n    }\n\n    @JvmStatic\n    fun removeResource(vararg resourceEntries: ResourceEntry?) {\n        val context = ContextUtils.getContext()\n        val resources = context.resources\n        val resourceManager = context.getSystemService(Context.RESOURCE_SERVICE) as ResourceManager\n        val resourceManagerHelper = ResourceManagerHelper(resourceManager)\n\n        resourceEntries.forEach { resourceEntry ->\n            resourceEntry?.let {\n                val resource = resources.getResourceEntry(it.packageName, it.resourceName)\n                resourceManagerHelper.removeResource(resource)\n            }\n        }\n    }"}], "metadata": {"task_id": "Iconify/464", "ground_truth": "            Log.e(TAG, \"removeResourceFromOverlay:\", e)\n        }\n\n        return hasErroredOut.get()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\resource\\ResourceManager.kt"}}
{"prompt": "\n import com.drdisagree.iconify.utils.SystemUtil.requestStoragePermission\nimport com.drdisagree.iconify.utils.SystemUtil.hasStoragePermission\nimport com.drdisagree.iconify.R\nimport android.content.Context\n @JvmStatic\n    fun removeResourceFromOverlay(context: Context?, vararg resourceEntries: ResourceEntry?) {\n        if (!hasStoragePermission()) {\n            requestStoragePermission(context!!)\n        } else {\n            try {\n                removeResource(*resourceEntries.filterNotNull().toTypedArray())", "choices": [{"text": "            } catch (e: Exception) {\n                e.printStackTrace()\n            }\n        }\n    }\n\n    @JvmStatic\n    fun removeResource(vararg resourceEntries: ResourceEntry?) {\n        if (resourceEntries.isEmpty()) {\n            return\n        }\n        val resources = context!!.resources\n        val overlayManager = resources.getOverlay(0)\n        val overlay = overlayManager.getOverlay(0)\n        val resourcesOverlay = overlay.getResources()\n        for (resourceEntry in resourceEntries) {\n            val resource = resources.getResourceEntry(resourceEntry!!.packageName, resourceEntry.resourceName)\n            if (resource!= null) {"}], "metadata": {"task_id": "Iconify/465", "ground_truth": "            } catch (e: Exception) {\n                Log.e(TAG, \"removeResourceFromOverlay:\", e)\n            }\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\resource\\ResourceManager.kt"}}
{"prompt": "\n import org.json.JSONObject\nimport com.drdisagree.iconify.R\n @Throws(Exception::class)\n    private fun createResource(vararg resourceEntries: ResourceEntry) {\n        val jsonObject = resources\n        val newJsonObject = generateJsonData(*resourceEntries)\n        val mergedJson = Array(3) { JSONObject() }\n\n        for (i in 0..2) {\n            mergedJson[i] = initResourceIfNull(JSONObject())\n\n            mergeJsonObjects(mergedJson[i], jsonObject[i])\n            mergeJsonObjects(mergedJson[i], newJsonObject[i])\n        }", "choices": [{"text": "\n        jsonObject[0] = mergedJson[0]\n        jsonObject[1] = mergedJson[1]\n        jsonObject[2] = mergedJson[2]\n    }\n\n    private fun initResourceIfNull(jsonObject: JSONObject): JSONObject {\n        return if (jsonObject.length() == 0) {\n            JSONObject()\n        } else {\n            jsonObject\n        }\n    }\n\n    private fun mergeJsonObjects(jsonObject: JSONObject, newJsonObject: JSONObject) {\n        for (key in newJsonObject.keys()) {\n            val value = newJsonObject.get(key)\n            if (jsonObject.has(key)) {\n                val oldJson"}], "metadata": {"task_id": "Iconify/466", "ground_truth": "\n        saveResources(mergedJson)\n\n        DynamicCompilerExecutor().execute()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\manager\\resource\\ResourceManager.kt"}}
{"prompt": "\n import com.topjohnwu.superuser.Shell\n @JvmStatic\n    fun isOverlayEnabled(pkgName: String): Boolean {\n        return Shell.cmd(", "choices": [{"text": "rue, \"pm\", \"list\", \"overlays\").exec().contains(pkgName)\n    }\n\n"}], "metadata": {"task_id": "Iconify/471", "ground_truth": "            \"[[ $(cmd overlay list | grep -o '\\\\[x\\\\] $pkgName') ]] && echo 1 || echo 0\"\n        ).exec().out[0] == \"1\"\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\OverlayUtil.kt"}}
{"prompt": "\n  @JvmStatic\n    fun isOverlayInstalled(enabledOverlays: List<String>, pkgName: String): Boolean {\n        for (line in enabledOverlays) {", "choices": [{"text": "            if (line.contains(pkgName)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    @JvmStatic\n    fun isOverlayInstalled(enabledOverlays: List<String>, pkgName: String, versionCode: Int): Boolean {\n        for (line in enabledOverlays) {\n            if (line.contains(pkgName) && line.contains(versionCode.toString())) {\n                return true\n            }\n        }\n        return false\n    }\n\n    @JvmStatic\n    fun isOverlayInstalled(enabledOverlays: List<String>, pkgName: String, versionCode: Int, versionName: String"}], "metadata": {"task_id": "Iconify/472", "ground_truth": "            if (line == pkgName) return true\n        }\n\n        return false\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\OverlayUtil.kt"}}
{"prompt": "\n import com.drdisagree.iconify.config.Prefs\n @JvmStatic\n    fun enableOverlaysExclusiveInCategory(vararg pkgNames: String?) {\n        val command = StringBuilder()\n\n        for (pkgName in pkgNames) {\n            Prefs.putBoolean(pkgName, true)\n\n            command.append(\"cmd overlay enable-exclusive --user current --category \")\n                .append(pkgName).append(\"; cmd overlay set-priority \").append(pkgName)", "choices": [{"text": "\n import com.drdisagree.iconify.config.Prefs\n @JvmStatic\n    fun enableOverlaysExclusiveInCategory(vararg pkgNames: String?) {\n        val command = StringBuilder()\n\n        for (pkgName in pkgNames) {\n            Prefs.putBoolean(pkgName, true)\n\n            command.append(\"cmd overlay enable-exclusive --user current --category \")\n               .append(pkgName).append(\"; cmd overlay set-priority \").append(pkgName)\n               .append(\" 10000; cmd overlay set-visibility \").append(pkgName)\n               .append(\" 10000; cmd overlay set-priority-adjust \").append(pkgName)\n               .append(\" 10000; cmd overlay set-visibility-adjust \").append(pkgName)\n               .append(\" 10000; cmd overlay set-priority-adjust-exclusive \").append(pkgName)\n               .append(\" 10000; cmd overlay set-visibility-adjust-exclusive \").append(pkgName)\n               .append(\" 1"}], "metadata": {"task_id": "Iconify/476", "ground_truth": "                .append(\" highest; \")\n        }\n\n        Shell.cmd(command.toString().trim { it <= ' ' }).submit()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\OverlayUtil.kt"}}
{"prompt": "\n  @JvmStatic\n    fun disableOverlay(pkgName: String) {", "choices": [{"text": "        val intent = Intent(Intent.ACTION_MAIN)\n        intent.addCategory(Intent.CATEGORY_HOME)\n        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK\n        val componentName = ComponentName(pkgName, pkgName + \".MainActivity\")\n        intent.component = componentName\n        context.startActivity(intent)\n    }\n}<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.View\nimport android.widget"}], "metadata": {"task_id": "Iconify/477", "ground_truth": "        Prefs.putBoolean(pkgName, false)\n        Shell.cmd(\"cmd overlay disable --user current $pkgName\").submit()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\overlay\\OverlayUtil.kt"}}
{"prompt": " import com.topjohnwu.superuser.Shell\nval isKSUInstalled Boolean\nval isDeviceRooted Boolean\nval isApatchInstalled Boolean\nfun fileExists(dir: String): Boolean {\n        val lines = Shell.cmd(\"test -f $dir && echo '1'\").exec().out\n\n        for (line in lines) {", "choices": [{"text": "            if (line.contains(\"1\")) {\n                return true\n            }\n        }\n        return false\n    }\nfun isKSUInstalled(): Boolean {\n        return fileExists(\"/system/bin/su\")\n    }\nfun isDeviceRooted(): Boolean {\n        return fileExists(\"/system/bin/su\") || fileExists(\"/system/xbin/su\") || fileExists(\"/system/app/Superuser.apk\") || fileExists(\"/sbin/su\") || fileExists(\"/su/bin/su\") || fileExists(\"/system/bin/.ext/.su\") || fileExists(\"/system/bin/.su\")"}], "metadata": {"task_id": "Iconify/481", "ground_truth": "            if (line.contains(\"1\")) return true\n        }\n\n        return false\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\RootUtil.kt"}}
{"prompt": "\n import com.topjohnwu.superuser.Shell\n @JvmStatic\n    fun folderExists(dir: String): Boolean {\n        val lines = Shell.cmd(\"test -d $dir && echo '1'\").exec().out\n\n        for (line in lines) {", "choices": [{"text": "            if (line.contains(\"1\")) {\n                return true\n            }\n        }\n        return false\n    }\n\n"}], "metadata": {"task_id": "Iconify/482", "ground_truth": "            if (line.contains(\"1\")) return true\n        }\n\n        return false\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\utils\\RootUtil.kt"}}
{"prompt": "\n import de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam\nimport de.robv.android.xposed.XposedBridge.log\nimport com.drdisagree.iconify.xposed.utils.BootLoopProtector\nimport com.drdisagree.iconify.config.XPrefs\nprivate fun onXPrefsReady(loadPackageParam: LoadPackageParam) {\n        if (BootLoopProtector.isBootLooped(loadPackageParam.packageName)) {\n            log(\"Possible bootloop in ${loadPackageParam.packageName} ; Iconify will not load for now...\")\n            return\n        }", "choices": [{"text": "        XPrefs.init(loadPackageParam.packageName)\n        XPrefs.load()\n        XPrefs.onPrefsReady()\n}\n\nprivate fun onIconifyReady(loadPackageParam: LoadPackageParam) {\n        if (BootLoopProtector.isBootLooped(loadPackageParam.packageName)) {\n            log(\"Possible bootloop in ${loadPackageParam.packageName} ; Iconify will not load for now...\")\n            return\n        }\n        Iconify.with(loadPackageParam.packageName)\n               .onPrefsReady(XPrefs.onPrefsReady)\n               .onIconReady(XPrefs.on"}], "metadata": {"task_id": "Iconify/493", "ground_truth": "\n        SystemUtil(mContext!!)\n\n        loadModPacks(loadPackageParam)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\HookEntry.kt"}}
{"prompt": "\n import de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam\nimport com.drdisagree.iconify.config.XPrefs.Xprefs\nprivate fun waitForXprefsLoad(loadPackageParam: LoadPackageParam) {\n        while (true) {\n            try {\n                Xprefs?.getBoolean(\"LoadTestBooleanValue\", false)\n                break\n            } catch (ignored: Throwable) {\n                try {\n                    Thread.sleep(1000)\n                } catch (ignored1: Throwable) {\n                }\n            }\n        }", "choices": [{"text": "    }\n\nprivate fun waitForXprefsLoad(loadPackageParam: LoadPackageParam, timeout: Long) {\n        var time = 0L\n        while (true) {\n            try {\n                Xprefs?.getBoolean(\"LoadTestBooleanValue\", false)\n                break\n            } catch (ignored: Throwable) {\n                try {\n                    Thread.sleep(1000)\n                } catch (ignored1: Throwable) {\n                }\n            }\n            time += 1000\n            if (time > timeout) {\n                break\n            }\n        }\n    }\n\nprivate fun waitForXprefsLoad(loadPackageParam:"}], "metadata": {"task_id": "Iconify/494", "ground_truth": "\n        log(\"Iconify Version: ${BuildConfig.VERSION_NAME}\")\n\n        onXPrefsReady(loadPackageParam)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\HookEntry.kt"}}
{"prompt": " import de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam\nvar mLoadPackageParam LoadPackageParam?\nvar darkIconDispatcherClass Class<*>?\nvar qsStatusIconsChipStyle\noverride fun handleLoadPackage(loadPackageParam: LoadPackageParam) {\n        mLoadPackageParam = loadPackageParam", "choices": [{"text": "        if (mLoadPackageParam!!.packageName == \"com.android.systemui\") {\n            try {\n                val darkIconDispatcherClass = mLoadPackageParam!!.classLoader.loadClass(\"com.android.systemui.statusbar.policy.DarkIconDispatcher\")\n                val qsStatusIconsChipStyle = darkIconDispatcherClass.getDeclaredField(\"QS_STATUS_ICONS_CHIP_STYLE\")\n                qsStatusIconsChipStyle.isAccessible = true\n                qsStatusIconsChipStyle.set(null, 1)\n            } catch (e: Exception) {\n                e.printStackTrace()\n            }\n        }\n    }"}], "metadata": {"task_id": "Iconify/495", "ground_truth": "        statusbarClockChip(loadPackageParam)\n        statusIconsChip(loadPackageParam)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\BackgroundChip.kt"}}
{"prompt": "\n import de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam\nprivate fun statusIconsChip(loadPackageParam: LoadPackageParam) {", "choices": [{"text": "    if (loadPackageParam.packageName!= \"com.android.systemui\") return\n    val statusIcons = findClassIfExists(\"com.android.systemui.statusbar.phone.StatusBarIconController\")\n    if (statusIcons == null) return\n    val statusIconsClass = findClassIfExists(\"com.android.systemui.statusbar.phone.StatusBarIconController\")\n    if (statusIconsClass == null) return\n    val statusIconsField = findFieldIfExists(statusIconsClass, \"mIconController\")\n    if (statusIconsField == null) return\n    val statusIconsFieldClass = findClassIfExists(\""}], "metadata": {"task_id": "Iconify/496", "ground_truth": "        setQSStatusIconsBgA12()\n        setQSStatusIconsBgA13Plus(loadPackageParam)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\BackgroundChip.kt"}}
{"prompt": "\n import android.view.View\nprivate fun updateChargingIconView() {\n        for (view in batteryViews) {", "choices": [{"text": "            val battery = view.tag as Battery\n            val icon = view.findViewById<ImageView>(R.id.battery_icon)\n            val charging = battery.isCharging\n            val plugged = battery.isPlugged\n            val level = battery.level\n            val status = battery.status\n            val color = battery.color\n            val iconColor = battery.iconColor\n            val iconColorDark = battery.iconColorDark\n            val iconColorLight = battery.iconColorLight\n            val iconColorLightDark = battery.iconColorLightDark\n            val iconColorLightLight = battery.iconColorLightLight\n            val"}], "metadata": {"task_id": "Iconify/497", "ground_truth": "            updateChargingIconView(view, mIsChargingImpl)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\BatteryStyleManager.kt"}}
{"prompt": "\n import de.robv.android.xposed.XposedHelpers.getAdditionalInstanceField\nimport com.drdisagree.iconify.xposed.modules.batterystyles.BatteryDrawable\nimport android.graphics.drawable.Drawable\nprivate fun updateCustomizeBatteryDrawable(thisObject: Any) {\n        if (!customBatteryEnabled) return\n\n        val mBatteryDrawable = getAdditionalInstanceField(\n            thisObject,", "choices": [{"text": "            \"mBatteryDrawable\",\n            BatteryDrawable::class.java\n        ) as BatteryDrawable?\n\n        if (mBatteryDrawable == null) return\n\n        val mBatteryLevel = getAdditionalInstanceField(\n            thisObject,\n            \"mBatteryLevel\",\n            Int::class.javaPrimitiveType\n        ) as Int?\n\n        if (mBatteryLevel == null) return\n\n        val mBatteryLevelDrawable = getAdditionalInstanceField(\n            thisObject,\n            \"mBatteryLevelDrawable\",\n            Drawable::class.java\n        ) as Drawable?\n\n        if (mBatteryLevelDrawable == null) return\n\n        val mBatteryLevelDrawableRes ="}], "metadata": {"task_id": "Iconify/502", "ground_truth": "            \"mBatteryDrawable\"\n        ) as BatteryDrawable\n\n        updateCustomizeBatteryDrawable(mBatteryDrawable)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\BatteryStyleManager.kt"}}
{"prompt": "\n import com.drdisagree.iconify.xposed.modules.batterystyles.BatteryDrawable\nimport com.drdisagree.iconify.R\nimport android.graphics.drawable.Drawable\nimport android.graphics.Color\nprivate fun updateCustomizeBatteryDrawable(mBatteryDrawable: BatteryDrawable) {\n        if (!customBatteryEnabled) return\n\n        mBatteryDrawable.customizeBatteryDrawable(\n            mBatteryLayoutReverse,\n            mScaledPerimeterAlpha,\n            mScaledFillAlpha,\n            mCustomBlendColor,\n            mRainbowFillColor,\n            mCustomFillColor,\n            mCustomFillGradColor,\n            mCustomChargingColor,", "choices": [{"text": "            mCustomChargingGradColor,\n            mCustomChargingFillColor,\n            mCustomChargingFillGradColor,\n            mCustomChargingStrokeColor,\n            mCustomChargingStrokeGradColor,\n            mCustomChargingStrokeWidth,\n            mCustomChargingStrokeDashWidth,\n            mCustomChargingStrokeDashGap,\n            mCustomChargingStrokeCap,\n            mCustomChargingStrokeJoin,\n            mCustomChargingStrokeMiterLimit,\n            mCustomChargingStrokeDashArray,\n            mCustomChargingStrokeDashArray2,\n            mCustomChargingStrokeDashArray3,\n            mCustomCharging"}], "metadata": {"task_id": "Iconify/503", "ground_truth": "            mCustomPowerSaveColor,\n            mCustomPowerSaveFillColor,\n            mChargingIconSwitch\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\BatteryStyleManager.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/507", "ground_truth": "        mShowPercentage = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\CircleBattery.kt"}}
{"prompt": "\nvar powerSaveEnabled\nvar mChargingColor\nvar mPowerSaveColor\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n\n override fun setPowerSaveEnabled(powerSave: Boolean) {\n if (powerSave) {\n powerSaveEnabled = true\n } else {\n powerSaveEnabled = false\n }\n }\n\n override fun setChargingColor(color: Int) {\n mChargingColor = color\n }\n\n override fun setPowerSaveColor(color: Int) {\n mPowerSaveColor = color\n }\n\n override fun getChargingColor(): Int {\n return mChargingColor"}], "metadata": {"task_id": "Iconify/508", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\CircleBattery.kt"}}
{"prompt": "\n override fun setBatteryLevel(mLevel: Int) {", "choices": [{"text": " if (mLevel > 0) {\n mBatteryLevel = mLevel\n }\n }\n\n override fun setBatteryStatus(mStatus: Int) {\n if (mStatus > 0) {\n mBatteryStatus = mStatus\n }\n }\n\n override fun setBatteryPlugged(mPlugged: Int) {\n if (mPlugged > 0) {\n mBatteryPlugged = mPlugged\n }\n }\n\n override fun setBatteryTemperature(mTemperature: Int) {\n if (mTemperature > 0) {\n mBatteryTemperature = mTemperature\n }\n }"}], "metadata": {"task_id": "Iconify/509", "ground_truth": "        batteryLevel = mLevel\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\CircleBattery.kt"}}
{"prompt": "\n override fun setBounds(left: Int, top: Int, right: Int, bottom: Int) {", "choices": [{"text": " super.setBounds(left, top, right, bottom)\n if (mRadius > 0) {\n val width = right - left\n val height = bottom - top\n val radius = Math.min(width, height) / 2\n mRadius = radius\n }\n }\n\n override fun onDraw(canvas: Canvas) {\n val paint = Paint()\n paint.isAntiAlias = true\n paint.color = mColor\n canvas.drawCircle(mRadius.toFloat(), mRadius.toFloat(), mRadius.toFloat(), paint)\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/511", "ground_truth": "        super.setBounds(left, top, right, bottom)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\CircleBattery.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/512", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\CircleBattery.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.Color\nvar mChargingColor\nvar mPowerSaveColor\nvar mFGColor\noverride fun setColors(fgColor: Int, bgColor: Int, singleToneColor: Int) {\n        mFGColor = fgColor\n        mBoltPaint.setColor(mFGColor)", "choices": [{"text": "        mChargingColor = singleToneColor\n        mPowerSaveColor = singleToneColor\n        mBoltPaint.setARGB(255, Color.red(mChargingColor), Color.green(mChargingColor), Color.blue(mChargingColor))\n        mPowerSavePaint.setARGB(255, Color.red(mPowerSaveColor), Color.green(mPowerSaveColor), Color.blue(mPowerSaveColor))\n        mChargingPaint.setARGB(255, Color.red(mChargingColor), Color.green(mChargingColor"}], "metadata": {"task_id": "Iconify/513", "ground_truth": "        mFramePaint.setColor(bgColor)\n        mTextPaint.setColor(mFGColor)\n        initColors()\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\CircleBattery.kt"}}
{"prompt": " import android.graphics.Paint\nval mBoltAlphaAnimator ValueAnimator\nvar mShowPercentage\nval mFrame\noverride fun setAlpha(alpha: Int) {\n        mAlphaPct = alpha / 255f\n        mFramePaint.setAlpha(Math.round(70 * alpha / 255f))", "choices": [{"text": "        mBoltPaint.setAlpha(Math.round(255 * alpha / 255f))\n        invalidateSelf()\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        mColorFilter = colorFilter\n    }\noverride fun draw(canvas: Canvas) {\n        if (mAlphaPct == 0f) {\n            return\n        }\n        val width = width\n        val height = height\n        val centerX = width / 2\n        val centerY = height / 2\n        val"}], "metadata": {"task_id": "Iconify/514", "ground_truth": "        mTextPaint.setAlpha(alpha)\n        mBatteryPaint.setAlpha(alpha)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\CircleBattery.kt"}}
{"prompt": "\n import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        mFramePaint.setColorFilter(colorFilter)\n        mBatteryPaint.setColorFilter(colorFilter)", "choices": [{"text": "        mChargingPaint.setColorFilter(colorFilter)\n        mChargingPaint.setColorFilter(colorFilter)\n        mChargingPaint.setColorFilter(colorFilter)\n        mChargingPaint.setColorFilter(colorFilter)\n        mChargingPaint.setColorFilter(colorFilter)\n        mChargingPaint.setColorFilter(colorFilter)\n        mChargingPaint.setColorFilter(colorFilter)\n        mChargingPaint.setColorFilter(colorFilter)\n        mChargingPaint.setColorFilter(colorFilter)\n        mChargingPaint.setColorFilter(colorFilter)\n        mChargingPaint.setColorFilter"}], "metadata": {"task_id": "Iconify/515", "ground_truth": "        mWarningTextPaint.setColorFilter(colorFilter)\n        mBoltPaint.setColorFilter(colorFilter)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\CircleBattery.kt"}}
{"prompt": "\nval invalidateRunnable\nvar mDiameter\nval mFrame\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/516", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\CircleBattery.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval fillRect\nvar invertFillIcon\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n\n override fun setFillRect(rect: Rect) {\n fillRect = rect\n }\n\n override fun setInvertFillIcon(invert: Boolean) {\n invertFillIcon = invert\n }\n\n override fun setPowerSaveEnabled(enabled: Boolean) {\n powerSaveEnabled = enabled\n }\n\n override fun setFillIcon(icon: Drawable) {\n }\n\n override fun setFillColor(color: Int) {\n }\n\n override fun setFillAlpha(alpha: Int) {"}], "metadata": {"task_id": "Iconify/517", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\DefaultBattery.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/518", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\DefaultBattery.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/519", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\DefaultBattery.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/520", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\DefaultBattery.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/521", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\DefaultBattery.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/522", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\DefaultBattery.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        invalidate()\n    }\n"}], "metadata": {"task_id": "Iconify/523", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\DefaultBattery.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/524", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\DefaultBattery.kt"}}
{"prompt": "\nval fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n\nfun setPadding(padding: Int, horizontal: Int, vertical: Int) {\n        setPadding(padding, vertical, padding, vertical)\n    }\n\nfun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        setPadding(Rect(left, top, right, bottom))\n    }\n\nfun setPadding(padding: Rect) {\n        setPadding(padding."}], "metadata": {"task_id": "Iconify/525", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\DefaultBattery.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/527", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\DefaultBattery.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval fillRect\nvar invertFillIcon\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n\n override fun setFillRect(rect: Rect) {\n fillRect = rect\n }\n\n override fun setInvertFillIcon(invert: Boolean) {\n invertFillIcon = invert\n }\n\n override fun setPowerSaveEnabled(enabled: Boolean) {\n powerSaveEnabled = enabled\n }\n\n override fun setFillIcon(icon: Drawable) {\n }\n\n override fun setFillColor(color: Int) {\n }\n\n override fun setFillAlpha(alpha: Int) {"}], "metadata": {"task_id": "Iconify/528", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBattery.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/529", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBattery.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/530", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBattery.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/531", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBattery.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/532", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBattery.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/533", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBattery.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        invalidate()\n    }\n"}], "metadata": {"task_id": "Iconify/534", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBattery.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/535", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBattery.kt"}}
{"prompt": "\nval fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n\nfun setPadding(padding: Int, horizontal: Int, vertical: Int) {\n        setPadding(padding, vertical, padding, vertical)\n    }\n\nfun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        setPadding(Rect(left, top, right, bottom))\n    }\n\nfun setPadding(padding: Rect) {\n        setPadding(padding."}], "metadata": {"task_id": "Iconify/536", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBattery.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/538", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBattery.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval fillRect\nvar invertFillIcon\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n\n override fun setFillRect(rect: Rect) {\n fillRect = rect\n }\n\n override fun setInvertFillIcon(invert: Boolean) {\n invertFillIcon = invert\n }\n\n override fun setPowerSaveEnabled(enabled: Boolean) {\n powerSaveEnabled = enabled\n }\n\n override fun setFillIcon(icon: Drawable) {\n }\n\n override fun setFillColor(color: Int) {\n }\n\n override fun setFillAlpha(alpha: Int) {"}], "metadata": {"task_id": "Iconify/539", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryA.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/540", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryA.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/541", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryA.kt"}}
{"prompt": "\n import android.graphics.Color\nimport android.content.res.TypedArray\nfun getColorAttrDefaultColor(attr: Int, defValue: Int): Int {\n        val obtainStyledAttributes: TypedArray = context.obtainStyledAttributes(intArrayOf(attr))\n        val color: Int = obtainStyledAttributes.getColor(0, defValue)", "choices": [{"text": "        obtainStyledAttributes.recycle()\n        return color\n    }\n\n"}], "metadata": {"task_id": "Iconify/542", "ground_truth": "        obtainStyledAttributes.recycle()\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryA.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/543", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryA.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/544", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryA.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/545", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryA.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        // invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    override fun setBatteryLevel(l: Int, invertFillIcon: Boolean) {\n        batteryLevel = l\n        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    private fun getBatteryLevelDrawable(l: Int): Drawable {\n        val batteryLevelDrawable = when (l) {\n            in 0..20 -> R.drawable.ic_battery_0\n            in 21..40 ->"}], "metadata": {"task_id": "Iconify/546", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryA.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/547", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryA.kt"}}
{"prompt": "\nval fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n\nfun setPadding(padding: Int, horizontal: Int, vertical: Int) {\n        setPadding(padding, vertical, padding, vertical)\n    }\n\nfun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        setPadding(Rect(left, top, right, bottom))\n    }\n\nfun setPadding(padding: Rect) {\n        setPadding(padding."}], "metadata": {"task_id": "Iconify/548", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryA.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/549", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryA.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval fillRect\nvar invertFillIcon\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n\n override fun setFillRect(rect: Rect) {\n fillRect = rect\n }\n\n override fun setInvertFillIcon(invert: Boolean) {\n invertFillIcon = invert\n }\n\n override fun setPowerSaveEnabled(enabled: Boolean) {\n powerSaveEnabled = enabled\n }\n\n override fun setFillIcon(icon: Drawable) {\n }\n\n override fun setFillColor(color: Int) {\n }\n\n override fun setFillAlpha(alpha: Int) {"}], "metadata": {"task_id": "Iconify/550", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryB.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/551", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryB.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/552", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryB.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/553", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryB.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/554", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryB.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/555", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryB.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        // invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    override fun setBatteryLevel(l: Int, invertFillIcon: Boolean) {\n        batteryLevel = l\n        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    private fun getBatteryLevelDrawable(l: Int): Drawable {\n        val batteryLevelDrawable = when (l) {\n            in 0..20 -> R.drawable.ic_battery_0\n            in 21..40 ->"}], "metadata": {"task_id": "Iconify/556", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryB.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/557", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryB.kt"}}
{"prompt": "\nval fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n\nfun setPadding(padding: Int, horizontal: Int, vertical: Int) {\n        setPadding(padding, vertical, padding, vertical)\n    }\n\nfun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        setPadding(Rect(left, top, right, bottom))\n    }\n\nfun setPadding(padding: Rect) {\n        setPadding(padding."}], "metadata": {"task_id": "Iconify/558", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryB.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/559", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryB.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval fillRect\nvar invertFillIcon\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n\n override fun setFillRect(rect: Rect) {\n fillRect = rect\n }\n\n override fun setInvertFillIcon(invert: Boolean) {\n invertFillIcon = invert\n }\n\n override fun setPowerSaveEnabled(enabled: Boolean) {\n powerSaveEnabled = enabled\n }\n\n override fun setFillIcon(icon: Drawable) {\n }\n\n override fun setFillColor(color: Int) {\n }\n\n override fun setFillAlpha(alpha: Int) {"}], "metadata": {"task_id": "Iconify/560", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryC.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/561", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryC.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/562", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryC.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/563", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryC.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/564", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryC.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/565", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryC.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        // invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    override fun setBatteryLevel(l: Int, invertFillIcon: Boolean) {\n        batteryLevel = l\n        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    private fun getBatteryLevelDrawable(l: Int): Drawable {\n        val batteryLevelDrawable = when (l) {\n            in 0..20 -> R.drawable.ic_battery_0\n            in 21..40 ->"}], "metadata": {"task_id": "Iconify/566", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryC.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/567", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryC.kt"}}
{"prompt": "\nval fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n\nfun setPadding(padding: Int, horizontal: Int, vertical: Int) {\n        setPadding(padding, vertical, padding, vertical)\n    }\n\nfun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        setPadding(Rect(left, top, right, bottom))\n    }\n\nfun setPadding(padding: Rect) {\n        setPadding(padding."}], "metadata": {"task_id": "Iconify/568", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryC.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/569", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryC.kt"}}
{"prompt": "\nvar powerSaveEnabled\nvar invertFillIcon\nval perimeterPath\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n override fun setPowerSaveEnabled(powerSave: Boolean) {\n powerSaveEnabled = powerSave\n }\n override fun setInvertFillIcon(invert: Boolean) {\n invertFillIcon = invert\n }\n override fun setPerimeterPath(path: Path) {\n perimeterPath = path\n }\n override fun getPerimeterPath(): Path {\n return perimeterPath\n }\n override fun getPowerSaveEnabled(): Boolean {\n return powerSaveEnabled\n }\n override"}], "metadata": {"task_id": "Iconify/570", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryColorOS.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/571", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryColorOS.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/572", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryColorOS.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/574", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryColorOS.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/575", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryColorOS.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        invalidate()\n    }\n"}], "metadata": {"task_id": "Iconify/576", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryColorOS.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/577", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryColorOS.kt"}}
{"prompt": "\nval fillColorStrokeProtection\nvar fillColor Int\nvar invertFillIcon\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n        this.padding = padding\n    }\n\nfun setPadding(padding: PaddingValues) {\n        this.padding = padding\n    }\n\nfun setPadding(padding: PaddingValues) {\n        this.padding = padding\n    }\n\nfun setPadding(padding: PaddingValues) {\n        this.padding = padding\n    }\n\nfun setPadding(padding: PaddingValues) {\n        this.padding = padding\n    }\n\nfun setPadding(padding: PaddingValues) {\n        this."}], "metadata": {"task_id": "Iconify/578", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryColorOS.kt"}}
{"prompt": "\nval invalidateRunnable\nval perimeterPath\nvar boltColor Int\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n private fun postInvalidateDelayed(delayMillis: Long) {\n invalidateRunnable.runDelayed(delayMillis)\n }\n private fun postInvalidateDelayed(delayMillis: Long, token: Any) {\n invalidateRunnable.runDelayed(delayMillis, token)\n }\n private fun postInvalidateOnAnimation() {\n invalidateRunnable.runOnAnimation()\n }\n private fun postInvalidateOnAnimation(delayMillis: Long) {\n invalidateRunnable.runOnAnimationDelayed(delayMillis)\n }\n private fun postInvalidateOnAnimation(delayMillis: Long, token: Any)"}], "metadata": {"task_id": "Iconify/580", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryColorOS.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval fillOutlinePath\nvar invertFillIcon\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n override fun setPowerSaveEnabled(powerSave: Boolean) {\n if (powerSave) {\n powerSaveEnabled = true\n } else {\n powerSaveEnabled = false\n }\n }\n override fun setFillOutlinePath(fillOutlinePath: Boolean) {\n this.fillOutlinePath = fillOutlinePath\n }\n override fun setInvertFillIcon(invertFillIcon: Boolean) {\n this.invertFillIcon = invertFillIcon\n }\n override fun getCharging"}], "metadata": {"task_id": "Iconify/581", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryD.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/582", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryD.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/583", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryD.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/584", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryD.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/585", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryD.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/586", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryD.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        // invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    override fun setBatteryLevel(l: Int, invertFillIcon: Boolean) {\n        batteryLevel = l\n        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    private fun getBatteryLevelDrawable(l: Int): Drawable {\n        val batteryLevelDrawable = when (l) {\n            in 0..20 -> R.drawable.ic_battery_0\n            in 21..40 ->"}], "metadata": {"task_id": "Iconify/587", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryD.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/588", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryD.kt"}}
{"prompt": "\nval fillMask\nval fillOutlinePath\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n fun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n fun setPadding(padding: Rect) {\n        setPadding(padding.left, padding.top, padding.right, padding.bottom)\n    }\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.set(left, top, right, bottom)\n    }\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int)"}], "metadata": {"task_id": "Iconify/589", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryD.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/590", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryD.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval fillOutlinePath\nvar invertFillIcon\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n override fun setPowerSaveEnabled(powerSave: Boolean) {\n if (powerSave) {\n powerSaveEnabled = true\n } else {\n powerSaveEnabled = false\n }\n }\n override fun setFillOutlinePath(fillOutlinePath: Boolean) {\n this.fillOutlinePath = fillOutlinePath\n }\n override fun setInvertFillIcon(invertFillIcon: Boolean) {\n this.invertFillIcon = invertFillIcon\n }\n override fun getCharging"}], "metadata": {"task_id": "Iconify/591", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryE.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/592", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryE.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/593", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryE.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/594", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryE.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/595", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryE.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/596", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryE.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        // invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    override fun setBatteryLevel(l: Int, invertFillIcon: Boolean) {\n        batteryLevel = l\n        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    private fun getBatteryLevelDrawable(l: Int): Drawable {\n        val batteryLevelDrawable = when (l) {\n            in 0..20 -> R.drawable.ic_battery_0\n            in 21..40 ->"}], "metadata": {"task_id": "Iconify/597", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryE.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/598", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryE.kt"}}
{"prompt": "\nval fillMask\nval fillOutlinePath\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n fun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n fun setPadding(padding: Rect) {\n        setPadding(padding.left, padding.top, padding.right, padding.bottom)\n    }\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.set(left, top, right, bottom)\n    }\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int)"}], "metadata": {"task_id": "Iconify/599", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryE.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/600", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryE.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval fillRect\nvar invertFillIcon\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n\n override fun setFillRect(rect: Rect) {\n fillRect = rect\n }\n\n override fun setInvertFillIcon(invert: Boolean) {\n invertFillIcon = invert\n }\n\n override fun setPowerSaveEnabled(enabled: Boolean) {\n powerSaveEnabled = enabled\n }\n\n override fun setFillIcon(icon: Drawable) {\n }\n\n override fun setFillColor(color: Int) {\n }\n\n override fun setFillAlpha(alpha: Int) {"}], "metadata": {"task_id": "Iconify/601", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryF.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/602", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryF.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/603", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryF.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/604", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryF.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/605", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryF.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/606", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryF.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        // invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    override fun setBatteryLevel(l: Int, invertFillIcon: Boolean) {\n        batteryLevel = l\n        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    private fun getBatteryLevelDrawable(l: Int): Drawable {\n        val batteryLevelDrawable = when (l) {\n            in 0..20 -> R.drawable.ic_battery_0\n            in 21..40 ->"}], "metadata": {"task_id": "Iconify/607", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryF.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/608", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryF.kt"}}
{"prompt": "\nval fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n\nfun setPadding(padding: Int, horizontal: Int, vertical: Int) {\n        setPadding(padding, vertical, padding, vertical)\n    }\n\nfun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        setPadding(Rect(left, top, right, bottom))\n    }\n\nfun setPadding(padding: Rect) {\n        setPadding(padding."}], "metadata": {"task_id": "Iconify/609", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryF.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/610", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryF.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval fillOutlinePath\nvar invertFillIcon\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n override fun setPowerSaveEnabled(powerSave: Boolean) {\n if (powerSave) {\n powerSaveEnabled = true\n } else {\n powerSaveEnabled = false\n }\n }\n override fun setFillOutlinePath(fillOutlinePath: Boolean) {\n this.fillOutlinePath = fillOutlinePath\n }\n override fun setInvertFillIcon(invertFillIcon: Boolean) {\n this.invertFillIcon = invertFillIcon\n }\n override fun getCharging"}], "metadata": {"task_id": "Iconify/611", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryG.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/612", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryG.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/613", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryG.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/614", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryG.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/615", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryG.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/616", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryG.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        // invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    override fun setBatteryLevel(l: Int, invertFillIcon: Boolean) {\n        batteryLevel = l\n        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    private fun getBatteryLevelDrawable(l: Int): Drawable {\n        val batteryLevelDrawable = when (l) {\n            in 0..20 -> R.drawable.ic_battery_0\n            in 21..40 ->"}], "metadata": {"task_id": "Iconify/617", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryG.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/618", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryG.kt"}}
{"prompt": "\nval fillMask\nval fillOutlinePath\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n fun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n fun setPadding(padding: Rect) {\n        setPadding(padding.left, padding.top, padding.right, padding.bottom)\n    }\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.set(left, top, right, bottom)\n    }\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int)"}], "metadata": {"task_id": "Iconify/619", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryG.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/620", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryG.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval fillRect\nvar invertFillIcon\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n\n override fun setFillRect(rect: Rect) {\n fillRect = rect\n }\n\n override fun setInvertFillIcon(invert: Boolean) {\n invertFillIcon = invert\n }\n\n override fun setPowerSaveEnabled(enabled: Boolean) {\n powerSaveEnabled = enabled\n }\n\n override fun setFillIcon(icon: Drawable) {\n }\n\n override fun setFillColor(color: Int) {\n }\n\n override fun setFillAlpha(alpha: Int) {"}], "metadata": {"task_id": "Iconify/621", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryH.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/622", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryH.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/623", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryH.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/624", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryH.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/625", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryH.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/626", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryH.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        // invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    override fun setBatteryLevel(l: Int, invertFillIcon: Boolean) {\n        batteryLevel = l\n        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    private fun getBatteryLevelDrawable(l: Int): Drawable {\n        val batteryLevelDrawable = when (l) {\n            in 0..20 -> R.drawable.ic_battery_0\n            in 21..40 ->"}], "metadata": {"task_id": "Iconify/627", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryH.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/628", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryH.kt"}}
{"prompt": "\nval fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n\nfun setPadding(padding: Int, horizontal: Int, vertical: Int) {\n        setPadding(padding, vertical, padding, vertical)\n    }\n\nfun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        setPadding(Rect(left, top, right, bottom))\n    }\n\nfun setPadding(padding: Rect) {\n        setPadding(padding."}], "metadata": {"task_id": "Iconify/629", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryH.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/630", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryH.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval fillOutlinePath\nvar invertFillIcon\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n override fun setPowerSaveEnabled(powerSave: Boolean) {\n if (powerSave) {\n powerSaveEnabled = true\n } else {\n powerSaveEnabled = false\n }\n }\n override fun setFillOutlinePath(fillOutlinePath: Boolean) {\n this.fillOutlinePath = fillOutlinePath\n }\n override fun setInvertFillIcon(invertFillIcon: Boolean) {\n this.invertFillIcon = invertFillIcon\n }\n override fun getCharging"}], "metadata": {"task_id": "Iconify/631", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryI.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/632", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryI.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/633", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryI.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/634", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryI.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/635", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryI.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nvar fillPaintColor1 Int\nvar fillPaintColor2 Int\nvar fillPaintColor3 Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "}\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n}\noverride fun getColor(): Int {\n        return fillPaint.color\n}\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n}\noverride fun setColor(color: Int) {\n        fillPaint.color = color\n}\noverride fun setStrokeWidth(width: Float) {\n        fillPaint.strokeWidth = width\n}\noverride fun setStrokeCap(cap: Paint.Cap) {\n        fillPaint.strokeCap = cap\n}\noverride fun setStrokeJoin"}], "metadata": {"task_id": "Iconify/636", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryI.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        // invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    override fun setBatteryLevel(l: Int, invertFillIcon: Boolean) {\n        batteryLevel = l\n        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    private fun getBatteryLevelDrawable(l: Int): Drawable {\n        val batteryLevelDrawable = when (l) {\n            in 0..20 -> R.drawable.ic_battery_0\n            in 21..40 ->"}], "metadata": {"task_id": "Iconify/637", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryI.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/638", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryI.kt"}}
{"prompt": "\nval fillMask\nval fillOutlinePath\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n fun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n fun setPadding(padding: Rect) {\n        setPadding(padding.left, padding.top, padding.right, padding.bottom)\n    }\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.set(left, top, right, bottom)\n    }\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int)"}], "metadata": {"task_id": "Iconify/639", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryI.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/640", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryI.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval errorPerimeterPath\nval fillRect\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n override fun setPowerSaveEnabled(powerSave: Boolean) {\n if (powerSave) {\n powerSaveEnabled = true\n } else {\n powerSaveEnabled = false\n }\n }\n override fun setErrorPerimeterPath(path: Path?) {\n errorPerimeterPath = path\n }\n override fun setFillRect(rect: Rect?) {\n fillRect = rect\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/641", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS15.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/642", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS15.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/643", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS15.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/645", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS15.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/646", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS15.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        invalidate()\n    }\n"}], "metadata": {"task_id": "Iconify/647", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS15.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/648", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS15.kt"}}
{"prompt": "\nval fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n\nfun setPadding(padding: Int, horizontal: Int, vertical: Int) {\n        setPadding(padding, vertical, padding, vertical)\n    }\n\nfun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        setPadding(Rect(left, top, right, bottom))\n    }\n\nfun setPadding(padding: Rect) {\n        setPadding(padding."}], "metadata": {"task_id": "Iconify/649", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS15.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/651", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS15.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval errorPerimeterPath\nval fillRect\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n override fun setPowerSaveEnabled(powerSave: Boolean) {\n if (powerSave) {\n powerSaveEnabled = true\n } else {\n powerSaveEnabled = false\n }\n }\n override fun setErrorPerimeterPath(path: Path?) {\n errorPerimeterPath = path\n }\n override fun setFillRect(rect: Rect?) {\n fillRect = rect\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/652", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS16.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/653", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS16.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/654", "ground_truth": "        this.showPercent = true\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS16.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/656", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS16.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/657", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS16.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        invalidate()\n    }\n"}], "metadata": {"task_id": "Iconify/658", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS16.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/659", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS16.kt"}}
{"prompt": "\nval fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n\nfun setPadding(padding: Int, horizontal: Int, vertical: Int) {\n        setPadding(padding, vertical, padding, vertical)\n    }\n\nfun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        setPadding(Rect(left, top, right, bottom))\n    }\n\nfun setPadding(padding: Rect) {\n        setPadding(padding."}], "metadata": {"task_id": "Iconify/660", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS16.kt"}}
{"prompt": "\n import android.graphics.Paint\nimport android.graphics.Color\noverride fun setColors(fgColor: Int, bgColor: Int, singleToneColor: Int) {\n        fillColor = fgColor\n\n        fillPaint.color = fillColor\n        fillColorStrokePaint.color = fillColor\n\n        backgroundColor = bgColor\n        dualToneBackgroundFill.color = bgColor\n\n        // Also update the level color, since fillColor may have changed\n        levelColor = batteryColorForLevel(batteryLevel)\n", "choices": [{"text": "\n\n"}], "metadata": {"task_id": "Iconify/661", "ground_truth": "        boltColor = singleToneColor\n        boltPaint.color = boltColor\n\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS16.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/662", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryiOS16.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval fillOutlinePath\nvar invertFillIcon\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n override fun setPowerSaveEnabled(powerSave: Boolean) {\n if (powerSave) {\n powerSaveEnabled = true\n } else {\n powerSaveEnabled = false\n }\n }\n override fun setFillOutlinePath(fillOutlinePath: Boolean) {\n this.fillOutlinePath = fillOutlinePath\n }\n override fun setInvertFillIcon(invertFillIcon: Boolean) {\n this.invertFillIcon = invertFillIcon\n }\n override fun getCharging"}], "metadata": {"task_id": "Iconify/663", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryJ.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/664", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryJ.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/665", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryJ.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/666", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryJ.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/667", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryJ.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/668", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryJ.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        // invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    override fun setBatteryLevel(l: Int, invertFillIcon: Boolean) {\n        batteryLevel = l\n        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    private fun getBatteryLevelDrawable(l: Int): Drawable {\n        val batteryLevelDrawable = when (l) {\n            in 0..20 -> R.drawable.ic_battery_0\n            in 21..40 ->"}], "metadata": {"task_id": "Iconify/669", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryJ.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/670", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryJ.kt"}}
{"prompt": "\nval fillMask\nval fillOutlinePath\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n fun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n fun setPadding(padding: Rect) {\n        setPadding(padding.left, padding.top, padding.right, padding.bottom)\n    }\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.set(left, top, right, bottom)\n    }\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int)"}], "metadata": {"task_id": "Iconify/671", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryJ.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/672", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryJ.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval fillRect\nvar invertFillIcon\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n\n override fun setFillRect(rect: Rect) {\n fillRect = rect\n }\n\n override fun setInvertFillIcon(invert: Boolean) {\n invertFillIcon = invert\n }\n\n override fun setPowerSaveEnabled(enabled: Boolean) {\n powerSaveEnabled = enabled\n }\n\n override fun setFillIcon(icon: Drawable) {\n }\n\n override fun setFillColor(color: Int) {\n }\n\n override fun setFillAlpha(alpha: Int) {"}], "metadata": {"task_id": "Iconify/673", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryK.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/674", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryK.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/675", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryK.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/677", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryK.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/678", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryK.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/679", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryK.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        // invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    override fun setBatteryLevel(l: Int, invertFillIcon: Boolean) {\n        batteryLevel = l\n        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    private fun getBatteryLevelDrawable(l: Int): Drawable {\n        val batteryLevelDrawable = when (l) {\n            in 0..20 -> R.drawable.ic_battery_0\n            in 21..40 ->"}], "metadata": {"task_id": "Iconify/680", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryK.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/681", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryK.kt"}}
{"prompt": "\nval fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n\nfun setPadding(padding: Int, horizontal: Int, vertical: Int) {\n        setPadding(padding, vertical, padding, vertical)\n    }\n\nfun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        setPadding(Rect(left, top, right, bottom))\n    }\n\nfun setPadding(padding: Rect) {\n        setPadding(padding."}], "metadata": {"task_id": "Iconify/682", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryK.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/683", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryK.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval textChargingPaint\nvar invertFillIcon\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n textChargingPaint = paint\n paint = textChargingPaint\n } else {\n paint = textPaint\n }\n super.setChargingEnabled(charging)\n }\n\n"}], "metadata": {"task_id": "Iconify/684", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryL.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/685", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryL.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/686", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryL.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/688", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryL.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/689", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryL.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/690", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryL.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        // invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    override fun setBatteryLevel(l: Int, invertFillIcon: Boolean) {\n        batteryLevel = l\n        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    private fun getBatteryLevelDrawable(l: Int): Drawable {\n        val batteryLevelDrawable = when (l) {\n            in 0..20 -> R.drawable.ic_battery_0\n            in 21..40 ->"}], "metadata": {"task_id": "Iconify/691", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryL.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/692", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryL.kt"}}
{"prompt": "\nval fillMask\nval fillOutlinePath\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n fun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n fun setPadding(padding: Rect) {\n        setPadding(padding.left, padding.top, padding.right, padding.bottom)\n    }\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.set(left, top, right, bottom)\n    }\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int)"}], "metadata": {"task_id": "Iconify/693", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryL.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/695", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryL.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval fillOutlinePath\nvar invertFillIcon\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n override fun setPowerSaveEnabled(powerSave: Boolean) {\n if (powerSave) {\n powerSaveEnabled = true\n } else {\n powerSaveEnabled = false\n }\n }\n override fun setFillOutlinePath(fillOutlinePath: Boolean) {\n this.fillOutlinePath = fillOutlinePath\n }\n override fun setInvertFillIcon(invertFillIcon: Boolean) {\n this.invertFillIcon = invertFillIcon\n }\n override fun getCharging"}], "metadata": {"task_id": "Iconify/696", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryM.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/697", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryM.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/698", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryM.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/700", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryM.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/701", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryM.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/702", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryM.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        // invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    override fun setBatteryLevel(l: Int, invertFillIcon: Boolean) {\n        batteryLevel = l\n        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    private fun getBatteryLevelDrawable(l: Int): Drawable {\n        val batteryLevelDrawable = when (l) {\n            in 0..20 -> R.drawable.ic_battery_0\n            in 21..40 ->"}], "metadata": {"task_id": "Iconify/703", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryM.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/704", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryM.kt"}}
{"prompt": "\nval fillMask\nval fillOutlinePath\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n fun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n fun setPadding(padding: Rect) {\n        setPadding(padding.left, padding.top, padding.right, padding.bottom)\n    }\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.set(left, top, right, bottom)\n    }\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int)"}], "metadata": {"task_id": "Iconify/705", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryM.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/707", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryM.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval fillRect\nvar invertFillIcon\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n\n override fun setFillRect(rect: Rect) {\n fillRect = rect\n }\n\n override fun setInvertFillIcon(invert: Boolean) {\n invertFillIcon = invert\n }\n\n override fun setPowerSaveEnabled(enabled: Boolean) {\n powerSaveEnabled = enabled\n }\n\n override fun setFillIcon(icon: Drawable) {\n }\n\n override fun setFillColor(color: Int) {\n }\n\n override fun setFillAlpha(alpha: Int) {"}], "metadata": {"task_id": "Iconify/708", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryMIUIPill.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/709", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryMIUIPill.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/710", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryMIUIPill.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/712", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryMIUIPill.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/713", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryMIUIPill.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        invalidate()\n    }\n"}], "metadata": {"task_id": "Iconify/714", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryMIUIPill.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/715", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryMIUIPill.kt"}}
{"prompt": "\nval fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n\nfun setPadding(padding: Int, horizontal: Int, vertical: Int) {\n        setPadding(padding, vertical, padding, vertical)\n    }\n\nfun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        setPadding(Rect(left, top, right, bottom))\n    }\n\nfun setPadding(padding: Rect) {\n        setPadding(padding."}], "metadata": {"task_id": "Iconify/716", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryMIUIPill.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/718", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryMIUIPill.kt"}}
{"prompt": "\nvar powerSaveEnabled\nvar invertFillIcon\nval errorPerimeterPath\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n override fun setPowerSaveEnabled(powerSave: Boolean) {\n powerSaveEnabled = powerSave\n }\n override fun setInvertFillIcon(invert: Boolean) {\n invertFillIcon = invert\n }\n override fun setErrorPerimeterPath(path: Path) {\n errorPerimeterPath = path\n }\n override fun getErrorPerimeterPath(): Path {\n return errorPerimeterPath\n }\n override fun getPowerSaveEnabled(): Boolean {\n return powerSaveEnabled"}], "metadata": {"task_id": "Iconify/719", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryN.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/720", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryN.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/721", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryN.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/722", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryN.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/723", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryN.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/724", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryN.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        // invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    override fun setBatteryLevel(l: Int, invertFillIcon: Boolean) {\n        batteryLevel = l\n        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    private fun getBatteryLevelDrawable(l: Int): Drawable {\n        val batteryLevelDrawable = when (l) {\n            in 0..20 -> R.drawable.ic_battery_0\n            in 21..40 ->"}], "metadata": {"task_id": "Iconify/725", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryN.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/726", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryN.kt"}}
{"prompt": "\nval fillMask\nval scaledFill\nvar invertFillIcon\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n    this.padding = padding\n}\n\nfun setPadding(padding: PaddingValues) {\n    this.padding = padding\n}\n\nfun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n    this.padding = PaddingValues(left, top, right, bottom)\n}\n\nfun setPadding(start: Int, top: Int, end: Int, bottom: Int) {\n    this.padding = PaddingValues(start, top"}], "metadata": {"task_id": "Iconify/727", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryN.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/728", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryN.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval fillRect\nvar invertFillIcon\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n\n override fun setFillRect(rect: Rect) {\n fillRect = rect\n }\n\n override fun setInvertFillIcon(invert: Boolean) {\n invertFillIcon = invert\n }\n\n override fun setPowerSaveEnabled(enabled: Boolean) {\n powerSaveEnabled = enabled\n }\n\n override fun setFillIcon(icon: Drawable) {\n }\n\n override fun setFillColor(color: Int) {\n }\n\n override fun setFillAlpha(alpha: Int) {"}], "metadata": {"task_id": "Iconify/729", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryO.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/730", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryO.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/731", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryO.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/732", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryO.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/733", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryO.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/734", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryO.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        // invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    override fun setBatteryLevel(l: Int, invertFillIcon: Boolean) {\n        batteryLevel = l\n        val batteryLevelDrawable = getBatteryLevelDrawable(l)\n        batteryLevelIcon.setImageDrawable(batteryLevelDrawable)\n    }\n\n    private fun getBatteryLevelDrawable(l: Int): Drawable {\n        val batteryLevelDrawable = when (l) {\n            in 0..20 -> R.drawable.ic_battery_0\n            in 21..40 ->"}], "metadata": {"task_id": "Iconify/735", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryO.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/736", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryO.kt"}}
{"prompt": "\nval fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n\nfun setPadding(padding: Int, horizontal: Int, vertical: Int) {\n        setPadding(padding, vertical, padding, vertical)\n    }\n\nfun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        setPadding(Rect(left, top, right, bottom))\n    }\n\nfun setPadding(padding: Rect) {\n        setPadding(padding."}], "metadata": {"task_id": "Iconify/737", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryO.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/738", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryO.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval fillPaintCharging\nvar invertFillIcon\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n fillPaintCharging.color = fillColor\n } else {\n fillPaintCharging.color = fillColor\n }\n }\n\n"}], "metadata": {"task_id": "Iconify/739", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatterySmiley.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/740", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatterySmiley.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/741", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatterySmiley.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/742", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatterySmiley.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/743", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatterySmiley.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/744", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatterySmiley.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        invalidate()\n    }\n"}], "metadata": {"task_id": "Iconify/745", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatterySmiley.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/746", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatterySmiley.kt"}}
{"prompt": "\nval fillMask\nvar invertFillIcon\nval perimeterPath\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n    setPadding(padding, padding, padding, padding)\n}\n\nfun setPadding(padding: PaddingValues) {\n    setPadding(padding.left, padding.top, padding.right, padding.bottom)\n}\n\nfun setPadding(padding: IntArray) {\n    setPadding(padding[0], padding[1], padding[2], padding[3])\n}\n\nfun setPadding(padding: FloatArray) {\n    setPadding(padding[0].toInt"}], "metadata": {"task_id": "Iconify/747", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatterySmiley.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/749", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatterySmiley.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval errorPerimeterPath\nval fillRect\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n override fun setPowerSaveEnabled(powerSave: Boolean) {\n if (powerSave) {\n powerSaveEnabled = true\n } else {\n powerSaveEnabled = false\n }\n }\n override fun setErrorPerimeterPath(path: Path?) {\n errorPerimeterPath = path\n }\n override fun setFillRect(rect: Rect?) {\n fillRect = rect\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/750", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleA.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/751", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleA.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/752", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleA.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/753", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleA.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/754", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleA.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/755", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleA.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        invalidate()\n    }\n"}], "metadata": {"task_id": "Iconify/756", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleA.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/757", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleA.kt"}}
{"prompt": "\nval fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n\nfun setPadding(padding: Int, horizontal: Int, vertical: Int) {\n        setPadding(padding, vertical, padding, vertical)\n    }\n\nfun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        setPadding(Rect(left, top, right, bottom))\n    }\n\nfun setPadding(padding: Rect) {\n        setPadding(padding."}], "metadata": {"task_id": "Iconify/758", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleA.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/760", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleA.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval errorPerimeterPath\nval fillRect\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n override fun setPowerSaveEnabled(powerSave: Boolean) {\n if (powerSave) {\n powerSaveEnabled = true\n } else {\n powerSaveEnabled = false\n }\n }\n override fun setErrorPerimeterPath(path: Path?) {\n errorPerimeterPath = path\n }\n override fun setFillRect(rect: Rect?) {\n fillRect = rect\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/761", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleB.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/762", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleB.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/763", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleB.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/764", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleB.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/765", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleB.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/766", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleB.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        invalidate()\n    }\n"}], "metadata": {"task_id": "Iconify/767", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleB.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/768", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleB.kt"}}
{"prompt": "\nval fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n\nfun setPadding(padding: Int, horizontal: Int, vertical: Int) {\n        setPadding(padding, vertical, padding, vertical)\n    }\n\nfun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        setPadding(Rect(left, top, right, bottom))\n    }\n\nfun setPadding(padding: Rect) {\n        setPadding(padding."}], "metadata": {"task_id": "Iconify/769", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleB.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/771", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\LandscapeBatteryStyleB.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval fillRect\nvar invertFillIcon\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n\n override fun setFillRect(rect: Rect) {\n fillRect = rect\n }\n\n override fun setInvertFillIcon(invert: Boolean) {\n invertFillIcon = invert\n }\n\n override fun setPowerSaveEnabled(enabled: Boolean) {\n powerSaveEnabled = enabled\n }\n\n override fun setFillIcon(icon: Drawable) {\n }\n\n override fun setFillColor(color: Int) {\n }\n\n override fun setFillAlpha(alpha: Int) {"}], "metadata": {"task_id": "Iconify/772", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryAiroo.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/773", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryAiroo.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/774", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryAiroo.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/775", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryAiroo.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/776", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryAiroo.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/777", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryAiroo.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        invalidate()\n    }\n"}], "metadata": {"task_id": "Iconify/778", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryAiroo.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/779", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryAiroo.kt"}}
{"prompt": "\nval fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n\nfun setPadding(padding: Int, horizontal: Int, vertical: Int) {\n        setPadding(padding, vertical, padding, vertical)\n    }\n\nfun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        setPadding(Rect(left, top, right, bottom))\n    }\n\nfun setPadding(padding: Rect) {\n        setPadding(padding."}], "metadata": {"task_id": "Iconify/780", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryAiroo.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/782", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryAiroo.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval fillRect\nvar invertFillIcon\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n\n override fun setFillRect(rect: Rect) {\n fillRect = rect\n }\n\n override fun setInvertFillIcon(invert: Boolean) {\n invertFillIcon = invert\n }\n\n override fun setPowerSaveEnabled(enabled: Boolean) {\n powerSaveEnabled = enabled\n }\n\n override fun setFillIcon(icon: Drawable) {\n }\n\n override fun setFillColor(color: Int) {\n }\n\n override fun setFillAlpha(alpha: Int) {"}], "metadata": {"task_id": "Iconify/783", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryCapsule.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/784", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryCapsule.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/785", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryCapsule.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/786", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryCapsule.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/787", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryCapsule.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/788", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryCapsule.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        invalidate()\n    }\n"}], "metadata": {"task_id": "Iconify/789", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryCapsule.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/790", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryCapsule.kt"}}
{"prompt": "\nval fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n\nfun setPadding(padding: Int, horizontal: Int, vertical: Int) {\n        setPadding(padding, vertical, padding, vertical)\n    }\n\nfun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        setPadding(Rect(left, top, right, bottom))\n    }\n\nfun setPadding(padding: Rect) {\n        setPadding(padding."}], "metadata": {"task_id": "Iconify/791", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryCapsule.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/793", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryCapsule.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval fillRect\nvar invertFillIcon\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n\n override fun setFillRect(rect: Rect) {\n fillRect = rect\n }\n\n override fun setInvertFillIcon(invert: Boolean) {\n invertFillIcon = invert\n }\n\n override fun setPowerSaveEnabled(enabled: Boolean) {\n powerSaveEnabled = enabled\n }\n\n override fun setFillIcon(icon: Drawable) {\n }\n\n override fun setFillColor(color: Int) {\n }\n\n override fun setFillAlpha(alpha: Int) {"}], "metadata": {"task_id": "Iconify/794", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryLorn.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/795", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryLorn.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/796", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryLorn.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/797", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryLorn.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/798", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryLorn.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/799", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryLorn.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        invalidate()\n    }\n"}], "metadata": {"task_id": "Iconify/800", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryLorn.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/801", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryLorn.kt"}}
{"prompt": "\nval fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n\nfun setPadding(padding: Int, horizontal: Int, vertical: Int) {\n        setPadding(padding, vertical, padding, vertical)\n    }\n\nfun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        setPadding(Rect(left, top, right, bottom))\n    }\n\nfun setPadding(padding: Rect) {\n        setPadding(padding."}], "metadata": {"task_id": "Iconify/802", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryLorn.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/804", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryLorn.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval fillRect\nvar invertFillIcon\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n\n override fun setFillRect(rect: Rect) {\n fillRect = rect\n }\n\n override fun setInvertFillIcon(invert: Boolean) {\n invertFillIcon = invert\n }\n\n override fun setPowerSaveEnabled(enabled: Boolean) {\n powerSaveEnabled = enabled\n }\n\n override fun setFillIcon(icon: Drawable) {\n }\n\n override fun setFillColor(color: Int) {\n }\n\n override fun setFillAlpha(alpha: Int) {"}], "metadata": {"task_id": "Iconify/805", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryMx.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/806", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryMx.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/807", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryMx.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/808", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryMx.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/809", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryMx.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/810", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryMx.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        invalidate()\n    }\n"}], "metadata": {"task_id": "Iconify/811", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryMx.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/812", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryMx.kt"}}
{"prompt": "\nval fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n\nfun setPadding(padding: Int, horizontal: Int, vertical: Int) {\n        setPadding(padding, vertical, padding, vertical)\n    }\n\nfun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        setPadding(Rect(left, top, right, bottom))\n    }\n\nfun setPadding(padding: Rect) {\n        setPadding(padding."}], "metadata": {"task_id": "Iconify/813", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryMx.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/815", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryMx.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval fillRect\nvar invertFillIcon\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n\n override fun setFillRect(rect: Rect) {\n fillRect = rect\n }\n\n override fun setInvertFillIcon(invert: Boolean) {\n invertFillIcon = invert\n }\n\n override fun setPowerSaveEnabled(enabled: Boolean) {\n powerSaveEnabled = enabled\n }\n\n override fun setFillIcon(icon: Drawable) {\n }\n\n override fun setFillColor(color: Int) {\n }\n\n override fun setFillAlpha(alpha: Int) {"}], "metadata": {"task_id": "Iconify/816", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryOrigami.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/817", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryOrigami.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/818", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryOrigami.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/819", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryOrigami.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/820", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryOrigami.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/821", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryOrigami.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        invalidate()\n    }\n"}], "metadata": {"task_id": "Iconify/822", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryOrigami.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/823", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryOrigami.kt"}}
{"prompt": "\nval fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n\nfun setPadding(padding: Int, horizontal: Int, vertical: Int) {\n        setPadding(padding, vertical, padding, vertical)\n    }\n\nfun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        setPadding(Rect(left, top, right, bottom))\n    }\n\nfun setPadding(padding: Rect) {\n        setPadding(padding."}], "metadata": {"task_id": "Iconify/824", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryOrigami.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/826", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\PortraitBatteryOrigami.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval fillRect\nvar invertFillIcon\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n\n override fun setFillRect(rect: Rect) {\n fillRect = rect\n }\n\n override fun setInvertFillIcon(invert: Boolean) {\n invertFillIcon = invert\n }\n\n override fun setPowerSaveEnabled(enabled: Boolean) {\n powerSaveEnabled = enabled\n }\n\n override fun setFillIcon(icon: Drawable) {\n }\n\n override fun setFillColor(color: Int) {\n }\n\n override fun setFillAlpha(alpha: Int) {"}], "metadata": {"task_id": "Iconify/827", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBattery.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/828", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBattery.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/829", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBattery.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/830", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBattery.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/831", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBattery.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/832", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBattery.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        invalidate()\n    }\n"}], "metadata": {"task_id": "Iconify/833", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBattery.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/834", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBattery.kt"}}
{"prompt": "\nval fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n\nfun setPadding(padding: Int, horizontal: Int, vertical: Int) {\n        setPadding(padding, vertical, padding, vertical)\n    }\n\nfun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        setPadding(Rect(left, top, right, bottom))\n    }\n\nfun setPadding(padding: Rect) {\n        setPadding(padding."}], "metadata": {"task_id": "Iconify/835", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBattery.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/837", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBattery.kt"}}
{"prompt": "\nvar powerSaveEnabled\nvar invertFillIcon\nval perimeterPath\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n override fun setPowerSaveEnabled(powerSave: Boolean) {\n powerSaveEnabled = powerSave\n }\n override fun setInvertFillIcon(invert: Boolean) {\n invertFillIcon = invert\n }\n override fun setPerimeterPath(path: Path) {\n perimeterPath = path\n }\n override fun getPerimeterPath(): Path {\n return perimeterPath\n }\n override fun getPowerSaveEnabled(): Boolean {\n return powerSaveEnabled\n }\n override"}], "metadata": {"task_id": "Iconify/838", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryColorOS.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/839", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryColorOS.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/840", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryColorOS.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/842", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryColorOS.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/843", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryColorOS.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        invalidate()\n    }\n"}], "metadata": {"task_id": "Iconify/844", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryColorOS.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/845", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryColorOS.kt"}}
{"prompt": "\nval fillColorStrokeProtection\nvar fillColor Int\nvar invertFillIcon\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n        this.padding = padding\n    }\n\nfun setPadding(padding: PaddingValues) {\n        this.padding = padding\n    }\n\nfun setPadding(padding: PaddingValues) {\n        this.padding = padding\n    }\n\nfun setPadding(padding: PaddingValues) {\n        this.padding = padding\n    }\n\nfun setPadding(padding: PaddingValues) {\n        this.padding = padding\n    }\n\nfun setPadding(padding: PaddingValues) {\n        this."}], "metadata": {"task_id": "Iconify/846", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryColorOS.kt"}}
{"prompt": "\nval invalidateRunnable\nval perimeterPath\nvar boltColor Int\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n private fun postInvalidateDelayed(delayMillis: Long) {\n invalidateRunnable.runDelayed(delayMillis)\n }\n private fun postInvalidateDelayed(delayMillis: Long, token: Any) {\n invalidateRunnable.runDelayed(delayMillis, token)\n }\n private fun postInvalidateOnAnimation() {\n invalidateRunnable.runOnAnimation()\n }\n private fun postInvalidateOnAnimation(delayMillis: Long) {\n invalidateRunnable.runOnAnimationDelayed(delayMillis)\n }\n private fun postInvalidateOnAnimation(delayMillis: Long, token: Any)"}], "metadata": {"task_id": "Iconify/848", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryColorOS.kt"}}
{"prompt": "\nvar powerSaveEnabled\nval errorPerimeterPath\nval fillRect\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n override fun setPowerSaveEnabled(powerSave: Boolean) {\n if (powerSave) {\n powerSaveEnabled = true\n } else {\n powerSaveEnabled = false\n }\n }\n override fun setErrorPerimeterPath(path: Path?) {\n errorPerimeterPath = path\n }\n override fun setFillRect(rect: Rect?) {\n fillRect = rect\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/849", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleA.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/850", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleA.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/851", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleA.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/852", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleA.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/853", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleA.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/854", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleA.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        invalidate()\n    }\n"}], "metadata": {"task_id": "Iconify/855", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleA.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/856", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleA.kt"}}
{"prompt": "\nval fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n\nfun setPadding(padding: Int, horizontal: Int, vertical: Int) {\n        setPadding(padding, vertical, padding, vertical)\n    }\n\nfun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        setPadding(Rect(left, top, right, bottom))\n    }\n\nfun setPadding(padding: Rect) {\n        setPadding(padding."}], "metadata": {"task_id": "Iconify/857", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleA.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/859", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleA.kt"}}
{"prompt": "\nvar powerSaveEnabled\nvar batteryLevel\nval errorPerimeterPath\n override fun setChargingEnabled(charging: Boolean) {", "choices": [{"text": " if (charging) {\n powerSaveEnabled = false\n } else {\n powerSaveEnabled = true\n }\n }\n\n override fun setBatteryLevel(level: Int) {\n batteryLevel = level\n }\n\n override fun setBatteryLevel(level: Int, scale: Int) {\n batteryLevel = level\n }\n\n override fun setBatteryLevel(level: Int, scale: Int, plugType: Int) {\n batteryLevel = level\n }\n\n override fun setBatteryLevel(level: Int, scale: Int, plugType: Int, technology: String) {\n batteryLevel = level\n"}], "metadata": {"task_id": "Iconify/860", "ground_truth": "        this.charging = charging\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleB.kt"}}
{"prompt": "\n override fun setPowerSavingEnabled(powerSaveEnabled: Boolean) {", "choices": [{"text": " if (powerSaveEnabled) {\n // Enable power saving mode\n } else {\n // Disable power saving mode\n }\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/861", "ground_truth": "        this.powerSaveEnabled = powerSaveEnabled\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleB.kt"}}
{"prompt": "\n override fun setShowPercentEnabled(showPercent: Boolean) {", "choices": [{"text": " this.showPercent = showPercent\n }\n\n override fun setPercent(percent: Float) {\n this.percent = percent\n }\n\n override fun setPercentFormat(percentFormat: String) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: NumberFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormat) {\n this.percentFormat = percentFormat\n }\n\n override fun setPercentFormat(percentFormat: DecimalFormatSymbols) {\n this.percentFormat = DecimalFormat(percentFormat)\n"}], "metadata": {"task_id": "Iconify/862", "ground_truth": "        this.showPercent = showPercent\n        postInvalidate()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleB.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun batteryColorForLevel(level: Int): Int {\n        return when {\n            charging || powerSaveEnabled -> fillColor", "choices": [{"text": "            level < 20 -> Color.parseColor(\"#FF0000\")\n            level < 40 -> Color.parseColor(\"#FF8000\")\n            level < 60 -> Color.parseColor(\"#FFFF00\")\n            level < 80 -> Color.parseColor(\"#00FF00\")\n            else -> Color.parseColor(\"#00FF00\")\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/863", "ground_truth": "            else -> getColorForLevel(level)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleB.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Color\nprivate fun getColorForLevel(level: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }", "choices": [{"text": "            }\n            i += 2\n        }\n        return color\n    }\n\nprivate fun getColorForLevel(level: Int, fillColor: Int): Int {\n        var thresh: Int\n        var color = 0\n        var i = 0\n        while (i < colorLevels.size) {\n            thresh = colorLevels[i]\n            color = colorLevels[i + 1]\n            if (level <= thresh) {\n\n                // Respect tinting for \"normal\" level\n                return if (i == colorLevels.size - 2) {\n                    fillColor\n                } else {\n                    color\n                }\n           "}], "metadata": {"task_id": "Iconify/864", "ground_truth": "            }\n            i += 2\n        }\n        return color\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleB.kt"}}
{"prompt": " import android.graphics.Paint\nimport android.graphics.ColorFilter\nimport android.graphics.Color\nval fillColorStrokeProtection\nvar levelColor Int\nvar fillColor Int\noverride fun setColorFilter(colorFilter: ColorFilter?) {\n        fillPaint.colorFilter = colorFilter", "choices": [{"text": "        strokePaint.colorFilter = colorFilter\n        super.setColorFilter(colorFilter)\n    }\noverride fun getColorFilter(): ColorFilter? {\n        return fillPaint.colorFilter\n    }\noverride fun getOpacity(): Int {\n        return PixelFormat.TRANSLUCENT\n    }\noverride fun draw(canvas: Canvas) {\n        canvas.drawPath(path, fillPaint)\n        canvas.drawPath(path, strokePaint)\n    }\noverride fun setAlpha(alpha: Int) {\n        fillPaint.alpha = alpha\n        strokePaint.alpha = alpha\n    }\noverride fun getAlpha(): Int {\n       "}], "metadata": {"task_id": "Iconify/865", "ground_truth": "        fillColorStrokePaint.colorFilter = colorFilter\n        dualToneBackgroundFill.colorFilter = colorFilter\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleB.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\n @Suppress(\"PARAMETER_NAME_CHANGED_ON_OVERRIDE\")\n    override fun setBatteryLevel(l: Int) {\n        invertFillIcon = if (l >= 67) true else if (l <= 33) false else invertFillIcon\n        batteryLevel = l", "choices": [{"text": "        invalidate()\n    }\n"}], "metadata": {"task_id": "Iconify/866", "ground_truth": "        levelColor = batteryColorForLevel(batteryLevel)\n        invalidateSelf()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleB.kt"}}
{"prompt": "\n import com.drdisagree.iconify.R\nimport android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val iconSize = bounds.height()\n    val iconRect = Rect(bounds.left, bounds.top, bounds.left + iconSize, bounds.top + iconSize)\n    icon.setBounds(iconRect)\n}\n\n"}], "metadata": {"task_id": "Iconify/867", "ground_truth": "        super.onBoundsChange(bounds)\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleB.kt"}}
{"prompt": "\nval fillMask\nval fillRect\nval scaledFill\n fun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        padding.left = left\n        padding.top = top", "choices": [{"text": "        padding.right = right\n        padding.bottom = bottom\n    }\n\nfun setPadding(padding: Int) {\n        setPadding(padding, padding, padding, padding)\n    }\n\nfun setPadding(padding: Int, horizontal: Int, vertical: Int) {\n        setPadding(padding, vertical, padding, vertical)\n    }\n\nfun setPadding(left: Int, top: Int, right: Int, bottom: Int) {\n        setPadding(Rect(left, top, right, bottom))\n    }\n\nfun setPadding(padding: Rect) {\n        setPadding(padding."}], "metadata": {"task_id": "Iconify/868", "ground_truth": "        padding.right = right\n        padding.bottom = bottom\n\n        updateSize()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleB.kt"}}
{"prompt": "\nval invalidateRunnable\nval errorPerimeterPath\nval scaledErrorPerimeter\n private fun postInvalidate() {", "choices": [{"text": " invalidateRunnable.run()\n }\n\n"}], "metadata": {"task_id": "Iconify/870", "ground_truth": "        unscheduleSelf(invalidateRunnable)\n        scheduleSelf(invalidateRunnable, 0)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\batterystyles\\RLandscapeBatteryStyleB.kt"}}
{"prompt": "\n import com.drdisagree.iconify.config.XPrefs.Xprefs\nimport com.drdisagree.iconify.common.Preferences.DEPTH_WALLPAPER_SWITCH\nimport com.drdisagree.iconify.common.Preferences.DEPTH_WALLPAPER_FADE_ANIMATION\noverride fun updatePrefs(vararg key: String) {\n        if (Xprefs == null) return\n\n        showDepthWallpaper = Xprefs!!.getBoolean(DEPTH_WALLPAPER_SWITCH, false)\n        showFadingAnimation = Xprefs!!.getBoolean(DEPTH_WALLPAPER_FADE_ANIMATION, false)\n\n        if (key.isNotEmpty() &&\n            (key[0] == DEPTH_WALLPAPER_SWITCH ||", "choices": [{"text": "key[0] == DEPTH_WALLPAPER_FADE_ANIMATION)\n        ) {\n            if (showDepthWallpaper) {\n                if (showFadingAnimation) {\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n                        window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)\n                        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)\n                        window.statusBarColor = Color.TRANSPARENT\n                    }\n                } else {\n                    window.addFlags("}], "metadata": {"task_id": "Iconify/871", "ground_truth": "                    key[0] == DEPTH_WALLPAPER_CHANGED)\n        ) {\n            updateWallpaper()\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\DepthWallpaper.kt"}}
{"prompt": "\n import de.robv.android.xposed.XposedBridge.log\nimport android.widget.RelativeLayout\nimport android.widget.LinearLayout\nimport android.widget.ImageView\nimport android.view.View\nimport android.view.Gravity\nprivate fun ImageView.addCenterProperty() {\n        val layoutParams = layoutParams\n\n        when (layoutParams) {\n            is RelativeLayout.LayoutParams -> {\n                layoutParams.addRule(RelativeLayout.CENTER_IN_PARENT)\n            }\n\n            is LinearLayout.LayoutParams -> {\n                layoutParams.gravity = Gravity.CENTER\n            }\n\n            else -> {\n                log(TAG + \"Invalid layoutParams: $layoutParams\")", "choices": [{"text": "            }\n        }\n\n        layoutParams.addRule(RelativeLayout.CENTER_IN_PARENT)\n        layoutParams.addRule(RelativeLayout.CENTER_HORIZONTAL)\n        layoutParams.addRule(RelativeLayout.CENTER_VERTICAL)\n        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM)\n        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_TOP)\n        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_LEFT)\n        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT)\n        layoutParams.addRule(RelativeLayout.ALIGN_PARENT_START)"}], "metadata": {"task_id": "Iconify/875", "ground_truth": "            }\n        }\n\n        setLayoutParams(layoutParams)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\HeaderImage.kt"}}
{"prompt": " import de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam\nvar qsTransparencyActive\nval keyguardAlpha\nvar keepLockScreenShade\noverride fun handleLoadPackage(loadPackageParam: LoadPackageParam) {", "choices": [{"text": "    if (loadPackageParam.packageName == \"com.android.systemui\") {\n        val classLoader = loadPackageParam.classLoader\n        val activityManagerServiceClass = classLoader.loadClass(\"com.android.server.am.ActivityManagerService\")\n        val activityManagerServiceField = activityManagerServiceClass.getDeclaredField(\"mWindowManager\")\n        activityManagerServiceField.isAccessible = true\n        val windowManagerService = activityManagerServiceField.get(null) as WindowManagerService\n        val windowManagerServiceClass = windowManagerService.javaClass\n        val getWindowManagerFuncs = windowManagerServiceClass.getDeclaredMethod(\""}], "metadata": {"task_id": "Iconify/878", "ground_truth": "        setQsTransparency(loadPackageParam)\n        setBlurRadius()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\QSTransparency.kt"}}
{"prompt": "\n import com.drdisagree.iconify.xposed.utils.SystemUtil\nimport android.graphics.Color\nprivate fun initColors(force: Boolean) {\n        val isDark: Boolean = SystemUtil.isDarkMode\n        if (isDark == this.isDark && !force) return", "choices": [{"text": "\n import com.drdisagree.iconify.xposed.utils.SystemUtil\nimport android.graphics.Color\nprivate fun initColors(force: Boolean) {\n        val isDark: Boolean = SystemUtil.isDarkMode\n        if (isDark == this.isDark &&!force) return\n        this.isDark = isDark\n        val color = if (isDark) Color.BLACK else Color.WHITE\n        val color2 = if (isDark) Color.WHITE else Color.BLACK\n        val color3 = if (isDark) Color.WHITE else Color.BLACK\n        val color4 = if (isDark) Color.WHITE else Color.BLACK\n        val color5 = if (isDark) Color.WHITE else Color.BLACK\n        val color6 = if (isDark) Color.WHITE else Color.BLACK\n        val color7 = if (isDark) Color.WHITE else Color.BLACK\n        val"}], "metadata": {"task_id": "Iconify/881", "ground_truth": "\n        this.isDark = isDark\n\n        calculateColors()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\themes\\QSBlackThemeA13.kt"}}
{"prompt": "\n import com.drdisagree.iconify.xposed.utils.SystemUtil\nimport android.graphics.Color\nprivate fun initColors(force: Boolean) {\n        val isDark: Boolean = SystemUtil.isDarkMode\n        if (isDark == this.isDark && !force) return", "choices": [{"text": "\n import com.drdisagree.iconify.xposed.utils.SystemUtil\nimport android.graphics.Color\nprivate fun initColors(force: Boolean) {\n        val isDark: Boolean = SystemUtil.isDarkMode\n        if (isDark == this.isDark &&!force) return\n        this.isDark = isDark\n        val color = if (isDark) Color.BLACK else Color.WHITE\n        val color2 = if (isDark) Color.WHITE else Color.BLACK\n        val color3 = if (isDark) Color.WHITE else Color.BLACK\n        val color4 = if (isDark) Color.WHITE else Color.BLACK\n        val color5 = if (isDark) Color.WHITE else Color.BLACK\n        val color6 = if (isDark) Color.WHITE else Color.BLACK\n        val color7 = if (isDark) Color.WHITE else Color.BLACK\n        val"}], "metadata": {"task_id": "Iconify/883", "ground_truth": "\n        this.isDark = isDark\n\n        calculateColors()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\themes\\QSBlackThemeA14.kt"}}
{"prompt": "\n import de.robv.android.xposed.XposedHelpers.callMethod\nimport android.view.View\nimport android.graphics.Color\nprivate fun setMobileIconTint(modernStatusBarViewBinding: Any, textColor: Int) {\n        callMethod(\n            modernStatusBarViewBinding,", "choices": [{"text": "            \"setMobileIconTint\",\n            textColor\n        )\n    }\nprivate fun setMobileIconColor(modernStatusBarViewBinding: Any, textColor: Int) {\n        callMethod(\n            modernStatusBarViewBinding,\n            \"setMobileIconColor\",\n            textColor\n        )\n    }\nprivate fun setMobileIconColor(modernStatusBarViewBinding: Any, textColor: Int, alpha: Int) {\n        callMethod(\n            modernStatusBarViewBinding,\n            \"setMobileIconColor\",\n            textColor,\n            alpha\n        )\n    }\nprivate fun setMobileIconColor(modernStatusBarViewBinding: Any, textColor: Int, alpha: Int"}], "metadata": {"task_id": "Iconify/884", "ground_truth": "            \"onIconTintChanged\",\n            textColor,\n            textColor\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\themes\\QSBlackThemeA14.kt"}}
{"prompt": "\n import de.robv.android.xposed.XposedHelpers.callMethod\nimport android.view.View\nimport android.graphics.Color\nprivate fun setMobileIconTint(modernStatusBarViewBinding: Any, textColor: Int) {\n        callMethod(\n            modernStatusBarViewBinding,", "choices": [{"text": "            \"setMobileIconTint\",\n            textColor\n        )\n    }\nprivate fun setMobileIconColor(modernStatusBarViewBinding: Any, textColor: Int) {\n        callMethod(\n            modernStatusBarViewBinding,\n            \"setMobileIconColor\",\n            textColor\n        )\n    }\nprivate fun setMobileIconColor(modernStatusBarViewBinding: Any, textColor: Int, alpha: Int) {\n        callMethod(\n            modernStatusBarViewBinding,\n            \"setMobileIconColor\",\n            textColor,\n            alpha\n        )\n    }\nprivate fun setMobileIconColor(modernStatusBarViewBinding: Any, textColor: Int, alpha: Int"}], "metadata": {"task_id": "Iconify/897", "ground_truth": "            \"onIconTintChanged\",\n            textColor,\n            textColor\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\themes\\QSLightThemeA14.kt"}}
{"prompt": "\n override fun setColor(color: Int) {\n        val alpha = alpha", "choices": [{"text": "color)\n        val red = red(color)\n        val green = green(color)\n        val blue = blue(color)\n        val color = Color.argb(alpha, red, green, blue)\n        setColor(color)\n    }\n\n"}], "metadata": {"task_id": "Iconify/898", "ground_truth": "        super.setColor(color)\n        setAlpha(alpha)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\AlphaRefreshedPaint.kt"}}
{"prompt": "\n import android.view.Display\nimport android.content.Context\nfun isScreenOn(context: Context): Boolean {\n        val displays = getDisplayState(context)\n        for (display in displays) {\n            if (display.state == Display.STATE_ON) {", "choices": [{"text": "                return true\n            }\n        }\n        return false\n    }\n\nfun getDisplayState(context: Context): List<Display> {\n        val displays = ArrayList<Display>()\n        val manager = context.getSystemService(Context.DISPLAY_SERVICE) as DisplayManager\n        for (display in manager.displays) {\n            displays.add(display)\n        }\n        return displays\n    }\n\n"}], "metadata": {"task_id": "Iconify/899", "ground_truth": "                return true\n            }\n        }\n        return false\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\DisplayUtils.kt"}}
{"prompt": "\n import android.view.Display\nimport android.content.Context\nfun isScreenOff(context: Context): Boolean {\n        val displays = getDisplayState(context)\n        for (display in displays) {\n            if (display.state == Display.STATE_OFF) {", "choices": [{"text": "                return true\n            }\n        }\n        return false\n    }\n\nfun getDisplayState(context: Context): List<Display> {\n        val displays = ArrayList<Display>()\n        val manager = context.getSystemService(Context.DISPLAY_SERVICE) as DisplayManager\n        for (display in manager.displays) {\n            displays.add(display)\n        }\n        return displays\n    }\n\n"}], "metadata": {"task_id": "Iconify/900", "ground_truth": "                return true\n            }\n        }\n        return false\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\DisplayUtils.kt"}}
{"prompt": "\n import android.view.Display\nimport android.content.Context\nfun isScreenDozing(context: Context): Boolean {\n        val displays = getDisplayState(context)\n        for (display in displays) {\n            if (display.state == Display.STATE_DOZE ||\n                display.state == Display.STATE_DOZE_SUSPEND\n            ) {", "choices": [{"text": "                return true\n            }\n        }\n        return false\n    }\n\nfun getDisplayState(context: Context): List<Display> {\n        val displays = ArrayList<Display>()\n        val displayManager = context.getSystemService(Context.DISPLAY_SERVICE) as DisplayManager\n        val displays1 = displayManager.displays\n        for (display in displays1) {\n            displays.add(display)\n        }\n        return displays\n    }\n<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.content.Context\nimport android"}], "metadata": {"task_id": "Iconify/901", "ground_truth": "                return true\n            }\n        }\n        return false\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\DisplayUtils.kt"}}
{"prompt": "\n import android.view.Display\nimport android.content.Context\nprivate fun getDisplayState(context: Context): Array<Display> {", "choices": [{"text": "    val displayManager = context.getSystemService(Context.DISPLAY_SERVICE) as DisplayManager\n    return displayManager.displays\n}\n\nprivate fun getDisplayState(context: Context, displayId: Int): Display? {\n    val displayManager = context.getSystemService(Context.DISPLAY_SERVICE) as DisplayManager\n    return displayManager.getDisplay(displayId)\n}\n\nprivate fun getDisplayState(context: Context, displayId: Int, displayState: Int): Display? {\n    val displayManager = context.getSystemService(Context.DISPLAY_SERVICE) as DisplayManager\n    return displayManager."}], "metadata": {"task_id": "Iconify/902", "ground_truth": "        val dm = context.getSystemService(Context.DISPLAY_SERVICE) as DisplayManager\n        return dm.displays\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\DisplayUtils.kt"}}
{"prompt": "\n import com.topjohnwu.superuser.Shell\nfun enableOverlay(pkgName: String) {\n        Shell.cmd(\n            \"cmd overlay enable --user current $pkgName\",", "choices": [{"text": "            \"cmd overlay disable --user current $pkgName\"\n        )\n    }\nfun disableOverlay(pkgName: String) {\n        Shell.cmd(\n            \"cmd overlay disable --user current $pkgName\",\n            \"cmd overlay enable --user current $pkgName\"\n        )\n    }\nfun isOverlayEnabled(pkgName: String): Boolean {\n        return Shell.cmd(\"cmd overlay status --user current $pkgName\").contains(\"Enabled\")\n    }\nfun isOverlayDisabled(pkgName: String): Boolean {\n        return Shell.cmd(\"cmd overlay status --user current $pkgName\").contains(\"Disabled\")"}], "metadata": {"task_id": "Iconify/903", "ground_truth": "            \"cmd overlay set-priority $pkgName highest\"\n        ).exec()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\Helpers.kt"}}
{"prompt": "\n fun findAndDumpClass(className: String, classLoader: ClassLoader?): Class<*> {", "choices": [{"text": " val classLoaderToUse = classLoader?: ClassLoader.getSystemClassLoader()\n val classToFind = classLoaderToUse.loadClass(className)\n val classDump = ClassDumper(classToFind)\n classDump.dump()\n return classToFind\n }\n\n"}], "metadata": {"task_id": "Iconify/906", "ground_truth": "        dumpClass(className, classLoader)\n        return XposedHelpers.findClass(className, classLoader)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\Helpers.kt"}}
{"prompt": "\n fun findAndDumpClassIfExists(className: String, classLoader: ClassLoader?): Class<*> {", "choices": [{"text": " val classToFind = Class.forName(className, false, classLoader)\n return classToFind\n }\n\n fun findAndDumpClassIfExists(className: String): Class<*> {\n return findAndDumpClassIfExists(className, null)\n }\n\n fun findAndDumpClassIfExists(className: String, classLoader: ClassLoader?, dump: Boolean): Class<*> {\n val classToFind = Class.forName(className, false, classLoader)\n if (dump) {\n dumpClass(classToFind)\n }\n return classToFind\n }\n\n fun findAndDumpClassIfExists(className"}], "metadata": {"task_id": "Iconify/907", "ground_truth": "        dumpClass(className, classLoader)\n        return XposedHelpers.findClassIfExists(className, classLoader)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\Helpers.kt"}}
{"prompt": "\n import de.robv.android.xposed.XposedHelpers\nfun dumpClass(className: String, classLoader: ClassLoader?) {\n        val ourClass = XposedHelpers.findClassIfExists(className, classLoader)\n        if (ourClass == null) {", "choices": [{"text": "                Log.e(\"Xposed\", \"Class not found: $className\")\n                return\n        }\n        Log.d(\"Xposed\", \"Class found: $className\")\n        val fields = ourClass.declaredFields\n        for (field in fields) {\n                Log.d(\"Xposed\", \"Field: ${field.name} ${field.type}\")\n        }\n        val methods = ourClass.declaredMethods\n        for (method in methods) {\n                Log.d(\"Xposed\", \"Method: ${method.name} ${method.returnType}\")\n        }\n}\n"}], "metadata": {"task_id": "Iconify/908", "ground_truth": "            log(\"Class: $className not found\")\n            return\n        }\n        dumpClass(ourClass)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\Helpers.kt"}}
{"prompt": "\n import de.robv.android.xposed.XposedBridge.hookAllMethods\nimport de.robv.android.xposed.XC_MethodHook\nfun tryHookAllMethods(clazz: Class<*>?, method: String?, hook: XC_MethodHook?) {\n        try {\n            hookAllMethods(clazz, method, hook)", "choices": [{"text": "        } catch (e: Throwable) {\n            Log.e(\"Xposed\", \"Error hooking $clazz.$method\", e)\n        }\n    }\n<file_sep>/app/src/main/java/com/example/xposed/XposedHook.kt\npackage com.example.xposed\n\nimport android.content.Context\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.content.pm.ResolveInfo\nimport android.net.Uri\nimport android.os.Build\nimport android.os.Bundle\nimport android.os.Environment\nimport android"}], "metadata": {"task_id": "Iconify/909", "ground_truth": "        } catch (ignored: Throwable) {\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\Helpers.kt"}}
{"prompt": "\n import de.robv.android.xposed.XposedBridge.hookAllConstructors\nimport de.robv.android.xposed.XC_MethodHook\nfun tryHookAllConstructors(clazz: Class<*>?, hook: XC_MethodHook?) {\n        try {\n            hookAllConstructors(clazz, hook)", "choices": [{"text": "        } catch (e: Throwable) {\n            XposedBridge.log(e)\n        }\n    }\n\nfun tryHookMethod(clazz: Class<*>?, method: String?, hook: XC_MethodHook?) {\n        try {\n            hookMethod(clazz, method, hook)\n        } catch (e: Throwable) {\n            XposedBridge.log(e)\n        }\n    }\n\nfun tryHookMethod(clazz: Class<*>?, method: String?, parameterTypes: Array<Class<*>?>?, hook: XC_MethodHook?) {\n        try {\n            hookMethod(clazz,"}], "metadata": {"task_id": "Iconify/910", "ground_truth": "        } catch (ignored: Throwable) {\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\Helpers.kt"}}
{"prompt": "\n private fun repeatString(str: String, times: Int): String {\n        val result = StringBuilder()", "choices": [{"text": "        for (i in 0 until times) {\n            result.append(str)\n        }\n        return result.toString()\n    }\n}\n<file_sep>/src/main/kotlin/com/github/jimmy1001/leetcode/easy/AddTwoNumbers.kt\npackage com.github.jimmy1001.leetcode.easy\n\nimport com.github.jimmy1001.leetcode.ListNode\n\n/**\n * 2. Add Two Numbers\n *\n * You are given two non-empty linked lists representing two non-negative integers.\n *"}], "metadata": {"task_id": "Iconify/913", "ground_truth": "        for (i in 0 until times) {\n            result.append(str)\n        }\n        return result.toString()\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\Helpers.kt"}}
{"prompt": "\n override fun onLayoutDirectionChanged(layoutDirection: Int): Boolean {", "choices": [{"text": " return super.onLayoutDirectionChanged(layoutDirection)\n }\n}\n\n"}], "metadata": {"task_id": "Iconify/915", "ground_truth": "        onLevelChange(level)\n        return super.onLayoutDirectionChanged(layoutDirection)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\RoundedCornerProgressDrawable.kt"}}
{"prompt": "\n import android.graphics.Rect\noverride fun onBoundsChange(bounds: Rect) {", "choices": [{"text": "    super.onBoundsChange(bounds)\n    val width = bounds.width()\n    val height = bounds.height()\n    val radius = Math.min(width, height) / 2\n    mOval.set(bounds.left + radius, bounds.top + radius, bounds.right - radius, bounds.bottom - radius)\n}\n\n"}], "metadata": {"task_id": "Iconify/916", "ground_truth": "        super.onBoundsChange(bounds)\n        onLevelChange(level)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\RoundedCornerProgressDrawable.kt"}}
{"prompt": "\n import de.robv.android.xposed.callbacks.XC_LoadPackage.LoadPackageParam\nimport de.robv.android.xposed.XposedHelpers\noverride fun handleLoadPackage(loadPackageParam: LoadPackageParam) {\n        try {\n            UtilsClass = XposedHelpers.findClass(\n                \"com.android.settingslib.Utils\",", "choices": [{"text": "                loadPackageParam.classLoader\n            )\n            XposedHelpers.findAndHookMethod(\n                \"com.android.settingslib.Utils\",\n                loadPackageParam.classLoader,\n                \"isAccessibilityEnabled\",\n                Context::class.java,\n                Boolean::class.javaPrimitiveType,\n                object : XC_MethodHook() {\n                    override fun afterHookedMethod(param: MethodHookParam) {\n                        if (param.args[1] as Boolean) {\n                            param.result = true\n                        }\n                    }\n                })\n        } catch (e: Throwable) {\n            Log.e(\"Xposed\", \""}], "metadata": {"task_id": "Iconify/920", "ground_truth": "                loadPackageParam.classLoader\n            )\n        } catch (ignored: Throwable) {\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\SettingsLibUtils.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.content.Context\nfun setPaddings(\n        viewGroup: ViewGroup,\n        context: Context,\n        left: Int,\n        top: Int,\n        right: Int,\n        bottom: Int\n    ) {\n        viewGroup.setPadding(\n            context.toPx(left),", "choices": [{"text": "            context.toPx(top),\n            context.toPx(right),\n            context.toPx(bottom)\n        )\n    }\n\nfun setMargins(\n        viewGroup: ViewGroup,\n        context: Context,\n        left: Int,\n        top: Int,\n        right: Int,\n        bottom: Int\n    ) {\n        val params = viewGroup.layoutParams as ViewGroup.MarginLayoutParams\n        params.setMargins(\n            context.toPx(left),\n            context.toPx(top),\n            context.toPx(right),\n            context.toPx(bottom)\n        )\n        viewGroup.layoutParams ="}], "metadata": {"task_id": "Iconify/921", "ground_truth": "            context.toPx(top),\n            context.toPx(right),\n            context.toPx(bottom)\n        )\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\ViewHelper.kt"}}
{"prompt": "\n import android.util.TypedValue\nimport android.content.Context\nfun Context.toPx(dp: Int): Int = TypedValue.applyDimension(\n        TypedValue.COMPLEX_UNIT_DIP,", "choices": [{"text": "        dp.toFloat(),\n        resources.displayMetrics\n).toInt()\n\nfun Context.toDp(px: Int): Int = TypedValue.applyDimension(\n        TypedValue.COMPLEX_UNIT_DIP,\n        px.toFloat(),\n        resources.displayMetrics\n).toInt()\n\nfun Context.toSp(sp: Int): Int = TypedValue.applyDimension(\n        TypedValue.COMPLEX_UNIT_SP,\n        sp.toFloat(),\n        resources.displayMetrics\n).toInt()\n\nfun Context.toSp(sp: Float): Int = TypedValue.applyDimension(\n        TypedValue.COMPLEX_"}], "metadata": {"task_id": "Iconify/922", "ground_truth": "        dp.toFloat(),\n        resources.displayMetrics\n    ).toInt()", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\ViewHelper.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nfun findViewWithTagAndChangeColor(view: View?, tagContains: String, color: Int) {\n        if (view == null) return\n\n        if (view is ViewGroup) {\n            for (i in 0 until view.childCount) {\n                val child: View = view.getChildAt(i)\n                checkTagAndChangeColor(child, tagContains, color)\n\n                if (child is ViewGroup) {\n                    findViewWithTagAndChangeColor(child, tagContains, color)\n                }", "choices": [{"text": "            }\n        } else {\n            checkTagAndChangeColor(view, tagContains, color)\n        }\n    }\n\nfun checkTagAndChangeColor(view: View, tagContains: String, color: Int) {\n        if (view.tag!= null && view.tag.toString().contains(tagContains)) {\n            view.setBackgroundColor(color)\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/923", "ground_truth": "            }\n        } else {\n            checkTagAndChangeColor(view, tagContains, color)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\ViewHelper.kt"}}
{"prompt": "\n import java.util.Locale\nimport android.view.View\nprivate fun checkTagAndChangeColor(view: View, tagContains: String, color: Int) {\n        val tagObject = view.tag\n        if (tagObject != null && tagObject.toString().lowercase(Locale.getDefault())", "choices": [{"text": "\n import java.util.Locale\nimport android.view.View\nprivate fun checkTagAndChangeColor(view: View, tagContains: String, color: Int) {\n        val tagObject = view.tag\n        if (tagObject!= null && tagObject.toString().lowercase(Locale.getDefault())\n               .contains(tagContains)) {\n            view.setBackgroundColor(color)\n        }\n    }\n\n"}], "metadata": {"task_id": "Iconify/924", "ground_truth": "                .contains(tagContains)\n        ) {\n            changeViewColor(view, color)\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\ViewHelper.kt"}}
{"prompt": "\n import android.widget.TextView\nimport android.view.View\nprivate fun setTestScaling(view: View, scaleFactor: Float) {\n        val originalSize = (view as TextView).textSize", "choices": [{"text": "        (view as TextView).textSize = originalSize * scaleFactor\n    }\n\n"}], "metadata": {"task_id": "Iconify/926", "ground_truth": "        val newSize = originalSize * scaleFactor\n        view.setTextSize(TypedValue.COMPLEX_UNIT_PX, newSize)\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\modules\\utils\\ViewHelper.kt"}}
{"prompt": "\n import java.util.Calendar\nimport com.drdisagree.iconify.config.XPrefs.Xprefs\nimport android.annotation.SuppressLint\n @SuppressLint(\"ApplySharedPref\")\n    fun resetCounter(packageName: String) {\n        if (Xprefs == null) return\n\n        try {\n            val loadTimeKey = \"$LOAD_TIME_KEY_KEY$packageName\"\n            val strikeKey = \"$PACKAGE_STRIKE_KEY_KEY$packageName\"\n            val currentTime = Calendar.getInstance().time.time\n\n            Xprefs!!.edit()\n                .putLong(loadTimeKey, currentTime)", "choices": [{"text": "\n import java.util.Calendar\nimport com.drdisagree.iconify.config.XPrefs.Xprefs\nimport android.annotation.SuppressLint\n @SuppressLint(\"ApplySharedPref\")\n    fun resetCounter(packageName: String) {\n        if (Xprefs == null) return\n\n        try {\n            val loadTimeKey = \"$LOAD_TIME_KEY_KEY$packageName\"\n            val strikeKey = \"$PACKAGE_STRIKE_KEY_KEY$packageName\"\n            val currentTime = Calendar.getInstance().time.time\n\n            Xprefs!!.edit()\n               .putLong(loadTimeKey, currentTime)\n               .putInt(strikeKey, 0)\n               .apply()\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n    }\n\n    fun getLoadTime(packageName: String): Long {\n        if (Xprefs == null) return 0\n\n        try {\n            val loadTimeKey = \"$LOAD_TIME_KEY_KEY$packageName\"\n            return Xprefs!!.getLong(loadTimeKey, 0)\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n\n        return 0\n    }\n\n    fun getStrikeCount(packageName: String): Int {\n        if ("}], "metadata": {"task_id": "Iconify/927", "ground_truth": "                .putInt(strikeKey, 0)\n                .commit()\n        } catch (ignored: Throwable) {\n        }\n    }", "fpath": "Iconify\\app\\src\\main\\java\\com\\drdisagree\\iconify\\xposed\\utils\\BootLoopProtector.kt"}}
{"prompt": "\nval MAX_ZIP_FILE_COUNT\nval RECENTLY_BACKED_UP_KEY\n private fun extractVersionCode(path: String): Long? {\r\n        val regex = Regex(\"app-version-(\\\\d+).txt\")\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/2", "ground_truth": "        val match = regex.find(path) ?: return null\r\n        return match.groupValues[1].toLongOrNull()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\backup\\BackupService.kt"}}
{"prompt": "\n private fun restartAltimeter() {\r\n        stopAltimeter()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/3", "ground_truth": "        altimeter = sensorService.getAltimeter()\r\n        startAltimeter()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateAltimeterFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\noverride fun onResume() {\r\n        super.onResume()\r", "choices": [{"text": "}\r\noverride fun onPause() {\r\n        super.onPause()\r\n}\r\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n}\r\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\n        super.onRestoreInstanceState(savedInstanceState)\r\n}\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n}\r"}], "metadata": {"task_id": "Trail-Sense/4", "ground_truth": "        startAltimeter()\r\n        updateTimer.interval(200)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateAltimeterFragment.kt"}}
{"prompt": "\nvar altimeter IAltimeter\nvar gps IGPS\nvar barometer IBarometer\n override fun onPause() {\r\n        super.onPause()\r\n        stopAltimeter()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/5", "ground_truth": "        updateTimer.stop()\r\n        overridePopulationRunner.cancel()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateAltimeterFragment.kt"}}
{"prompt": "\nvar altimeterStarted\nvar altimeter IAltimeter\nvar forceCalibrationPref Preference\n private fun startAltimeter() {\r\n        if (altimeterStarted) {\r", "choices": [{"text": "return\r\n        }\r\n        altimeterStarted = true\r\n        altimeter = Altimeter(this)\r\n        altimeter.start()\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/6", "ground_truth": "            return\r\n        }\r\n        altimeterStarted = true\r\n        altimeter.start(this::updateAltitude)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateAltimeterFragment.kt"}}
{"prompt": "\nvar barometer IBarometer\nvar altimeter IAltimeter\nvar altimeterStarted\n private fun stopAltimeter() {\r", "choices": [{"text": "altimeterStarted = false\r\naltimeter.stop()\r\n}\r\nprivate fun startAltimeter() {\r\naltimeterStarted = true\r\naltimeter.start()\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nif (altimeterStarted) {\r\nstartAltimeter()\r\n}\r\n}\r\noverride fun onPause() {\r\nsuper.onPause()\r\nif (altimeterStarted) {\r\nstopAltimeter()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/7", "ground_truth": "        altimeterStarted = false\r\n        altimeter.stop(this::updateAltitude)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateAltimeterFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nprivate fun updateAltitudeOverride() {\r\n        inBackground {\r\n            onDefault {\r\n                overridePopulationRunner.replace {\r\n                    altimeter.read()\r", "choices": [{"text": "//                    val alt = altimeter.read()\r\n//                    if (alt!= null) {\r\n//                        val alt = altimeter.read()\r\n//                        if (alt!= null) {\r\n//                            val alt = altimeter.read()\r\n//                            if (alt!= null) {\r\n//                                val alt = altimeter.read()\r\n//                                if (alt!= null) {\r\n//                                    val alt = altimeter.read()\r\n//                                    if (alt!= null) {\r\n//                                        val alt = altime"}], "metadata": {"task_id": "Trail-Sense/8", "ground_truth": "                    prefs.altitudeOverride = altimeter.altitude\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateAltimeterFragment.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.observe\nimport com.kylecorry.andromeda.fragments.inBackground\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        observe(weatherSubsystem.weatherChanged) {\r\n            inBackground {\r\n                runner.replace {\r\n                    history = weatherSubsystem.getHistory()\r\n                    uncalibratedHistory = weatherSubsystem.getRawHistory()\r\n                    onMain {\r\n                        updateChart()\r", "choices": [{"text": "//                        updateHistory()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        observe(weatherSubsystem.weatherChanged) {\r\n            inBackground {\r\n                runner.replace {\r\n                    history = weatherSubsystem.getHistory()\r\n                    uncalibratedHistory = weatherSubsystem.getRawHistory()\r\n                    onMain {\r\n                        updateChart()\r\n//                        updateHistory()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        observe(weatherSubsystem.weatherChanged) {\r\n            inBackground {\r\n                runner.replace {\r\n                    history = weatherSubsystem.getHistory()\r\n                    uncalibratedHistory = weatherSubsystem.getRawHistory()\r\n                    onMain {\r\n                        updateChart()\r"}], "metadata": {"task_id": "Trail-Sense/13", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateBarometerFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\nfinish()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/14", "ground_truth": "        super.onResume()\r\n        updateTimer.interval(200)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateBarometerFragment.kt"}}
{"prompt": "\nvar chart PressureChartPreference?\nval updateTimer\nvar sensorService SensorService\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nupdateTimer.cancel()\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nupdateTimer = Timer()\r\nupdateTimer.schedule(object : TimerTask() {\r\noverride fun run() {\r\nrunOnUiThread {\r\nval pressure = sensorService.getPressure()\r\nval pressureText = getString(R.string.pressure_text, pressure)\r\npressureTextView.text = pressureText\r\n}\r\n}\r\n}, 0, 1000)\r\n}\r\noverride fun"}], "metadata": {"task_id": "Trail-Sense/15", "ground_truth": "        super.onPause()\r\n        updateTimer.stop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateBarometerFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.sensors.SensorService\nimport com.kylecorry.trail_sense.shared.UserPreferences\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.system.Resources\nimport androidx.preference.Preference\nimport android.os.Bundle\noverride fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {\r\n        setPreferencesFromResource(R.xml.compass_calibration, rootKey)\r\n\r\n        setIconColor(Resources.androidTextColorSecondary(requireContext()))\r\n\r\n        prefs = UserPreferences(requireContext())\r\n        sensorService = SensorService(requireContext())\r\n        hasCompass = sensorService.hasCompass()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/17", "ground_truth": "\r\n        compass = sensorService.getCompass()\r\n        gps = sensorService.getGPS()\r\n        bindPreferences()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateCompassFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\noverride fun onResume() {\r\n        super.onResume()\r", "choices": [{"text": "}\r\noverride fun onPause() {\r\n        super.onPause()\r\n}\r\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n}\r\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\n        super.onRestoreInstanceState(savedInstanceState)\r\n}\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n}\r"}], "metadata": {"task_id": "Trail-Sense/18", "ground_truth": "        startCompass()\r\n        if (!gps.hasValidReading) {\r\n            gps.start(this::onLocationUpdate)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateCompassFragment.kt"}}
{"prompt": "\nvar calibrateBtn Preference\nval formatService\nvar sensorService SensorService\n override fun onPause() {\r\n        super.onPause()\r\n        stopCompass()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/19", "ground_truth": "        gps.stop(this::onLocationUpdate)\r\n        gps.stop(this::onUpdateDeclinationFromGpsCallback)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateCompassFragment.kt"}}
{"prompt": "\n private fun onLocationUpdate(): Boolean {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/20", "ground_truth": "        update()\r\n        return false\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateCompassFragment.kt"}}
{"prompt": "\nvar hasCompass\nvar calibrateBtn Preference\nvar compassSource ListPreference\n private fun resetCompass() {\r\n        stopCompass()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/23", "ground_truth": "        compass = sensorService.getCompass()\r\n        startCompass()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateCompassFragment.kt"}}
{"prompt": "\n private fun onCompassUpdate(): Boolean {\r", "choices": [{"text": "-  val compass = Compass.getInstance()\r\n-  if (compass.isAvailable()) {\r\n-    val heading = compass.heading\r\n-    val rotation = heading.toFloat()\r\n-    val rotationMatrix = FloatArray(9)\r\n-    val orientation = FloatArray(3)\r\n-    SensorManager.getRotationMatrixFromVector(rotationMatrix, orientation)\r\n-    val adjustedRotationMatrix = FloatArray(9)\r\n-    SensorManager.remapCoordinateSystem(rotationMatrix, SensorManager.AXIS_X, SensorManager.AXIS"}], "metadata": {"task_id": "Trail-Sense/24", "ground_truth": "        update()\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateCompassFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\noverride fun onResume() {\r\n        super.onResume()\r", "choices": [{"text": "}\r\noverride fun onPause() {\r\n        super.onPause()\r\n}\r\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n}\r\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\n        super.onRestoreInstanceState(savedInstanceState)\r\n}\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n}\r"}], "metadata": {"task_id": "Trail-Sense/26", "ground_truth": "        if (gps.hasValidReading) {\r\n            update()\r\n        }\r\n        startGPS()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateGPSFragment.kt"}}
{"prompt": "\n override fun onPause() {\r\n        super.onPause()\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/27", "ground_truth": "        stopGPS()\r\n        locationOverridePref.pause()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateGPSFragment.kt"}}
{"prompt": " import com.kylecorry.andromeda.sense.location.GPS\nvar realGps IGPS\nvar gps IGPS\nvar wasUsingRealGPS\nprivate fun resetGPS() {\r\n        stopGPS()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/28", "ground_truth": "        gps = sensorService.getGPS()\r\n        startGPS()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateGPSFragment.kt"}}
{"prompt": "\n private fun onLocationUpdate(): Boolean {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/29", "ground_truth": "        update()\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateGPSFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.sense.location.GPS\nprivate fun resetRealGPS() {\r\n        locationOverridePref.pause()\r", "choices": [{"text": "}\r\nprivate fun resetMockGPS() {\r\n        locationOverridePref.resume()\r\n}\r\nprivate fun resetMockGPS(lat: Double, lon: Double) {\r\n        locationOverridePref.resume(lat, lon)\r\n}\r\nprivate fun resetMockGPS(lat: Double, lon: Double, alt: Double) {\r\n        locationOverridePref.resume(lat, lon, alt)\r\n}\r\nprivate fun resetMockGPS(lat: Double, lon: Double, alt: Double, speed: Double) {\r\n        locationOverridePref.resume(lat, lon, alt, speed"}], "metadata": {"task_id": "Trail-Sense/30", "ground_truth": "        realGps = getRealGPS()\r\n        locationOverridePref.setGPS(realGps)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateGPSFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.sensors.overrides.CachedGPS\nimport com.kylecorry.trail_sense.shared.sensors.CustomGPS\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.sense.location.IGPS\nimport com.kylecorry.andromeda.sense.location.GPS\nprivate fun getRealGPS(): IGPS {\r\n        return when {\r\n            shouldUseRealGPS() -> {\r\n                CustomGPS(requireContext())\r\n            }\r\n            shouldUseCachedGPS() -> {\r\n                CachedGPS(requireContext())\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/31", "ground_truth": "            else -> {\r\n                OverrideGPS(requireContext())\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateGPSFragment.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.sense.location.GPS\nimport androidx.preference.Preference\nprivate fun isAutoGPSPreferenceEnabled(): Boolean {\r", "choices": [{"text": "return PreferenceManager.getDefaultSharedPreferences(ApplicationProvider.getApplicationContext()).getBoolean(\"pref_auto_gps\", false)\r\n}\r\nprivate fun isAutoGPSPreferenceEnabled(): Boolean {\r\nreturn PreferenceManager.getDefaultSharedPreferences(ApplicationProvider.getApplicationContext()).getBoolean(\"pref_auto_gps\", false)\r\n}\r\nprivate fun isAutoGPSPreferenceEnabled(): Boolean {\r\nreturn PreferenceManager.getDefaultSharedPreferences(ApplicationProvider.getApplicationContext()).getBoolean(\"pref_auto_gps\", false)\r\n}\r\nprivate fun isAutoGPSPreferenceEnabled(): Boolean {\r\nreturn PreferenceManager.getDefaultSharedPreferences("}], "metadata": {"task_id": "Trail-Sense/33", "ground_truth": "        // Only disable when GPS permission is denied\r\n        return sensorService.hasLocationPermission()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateGPSFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.sense.location.GPS\nprivate fun shouldUseRealGPS(): Boolean {\r", "choices": [{"text": "   return Build.VERSION.SDK_INT >= Build.VERSION_CODES.O\r}\n\nclass LocationService : Service() {\n\n    private val locationManager = LocationManager(this)\n    private val locationProvider = GPS(this)\n\n    private val locationListener = object : LocationListener {\n        override fun onLocationChanged(location: Location) {\n            locationManager.onLocationChanged(location)\n        }\n\n        override fun onStatusChanged(provider: String, status: Int, extras: Bundle) {\n            locationManager.onStatusChanged(provider, status, extras)\n        }\n\n        override fun onProviderEnabled(provider"}], "metadata": {"task_id": "Trail-Sense/35", "ground_truth": "        // When both permission is granted and GPS is enabled\r\n        return GPS.isAvailable(requireContext())\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CalibrateGPSFragment.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun loop() {\r\n        noFill()\r\n        stroke(Color.BLACK)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/37", "ground_truth": "        strokeWeight(dp(5f))\r\n        path(figure8Path)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CompassCalibrationView.kt"}}
{"prompt": " import kotlin.math.cos\nimport com.kylecorry.sol.math.Vector2\nval tMax\nval tMin\nvar figure8Width Float\nprivate fun figure8(t: Float): Vector2 {\r\n        val x = cos(t)\r", "choices": [{"text": "//        val y = sin(t)\r\n        return Vector2(x, 0f)\r\n    }\n\nfun main() {\n    val figure8 = figure8(0f)\n    println(figure8)\n}<file_sep>/src/main/kotlin/com/kylecorry/sol/math/geometry/shapes/Circle.kt\npackage com.kylecorry.sol.math.geometry.shapes\n\nimport com.kylecorry.sol.math.geometry.Point\nimport com.kylecorry.sol.math.geometry.Vector2\nimport com."}], "metadata": {"task_id": "Trail-Sense/39", "ground_truth": "        val y = -sin(t) * cos(t)\r\n        return Vector2(x, y)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CompassCalibrationView.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.content.Context\nfun sized(\r\n            context: Context,\r\n            width: Int,\r\n            height: Int\r\n        ): CompassCalibrationView {\r\n            val view = CompassCalibrationView(context)\r\n            view.layoutParams = ViewGroup.LayoutParams(\r", "choices": [{"text": "//                width,\r\n//                height\r\n                ViewGroup.LayoutParams.WRAP_CONTENT,\r\n                ViewGroup.LayoutParams.WRAP_CONTENT\r\n            )\r\n            return view\r\n        }<file_sep>/app/src/main/java/com/example/compass/MainActivity.kt\npackage com.example.compass\n\nimport android.content.Context\nimport android.hardware.Sensor\nimport android.hardware.SensorEvent\nimport android.hardware.SensorEventListener\nimport android.hardware.SensorManager\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.View\nimport android.widget.Button\n"}], "metadata": {"task_id": "Trail-Sense/40", "ground_truth": "                width,\r\n                height\r\n            )\r\n            return view\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\CompassCalibrationView.kt"}}
{"prompt": "\n import androidx.core.text.bold\nimport android.text.SpannableStringBuilder\nprivate fun SpannableStringBuilder.title(title: String) {\r\n        bold {\r", "choices": [{"text": "           append(title)\r\n        }\n    }\n\n"}], "metadata": {"task_id": "Trail-Sense/42", "ground_truth": "            scale(titleScale) {\r\n                appendLine(title)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\calibration\\ui\\ImproveAccuracyAlerter.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.sense.accelerometer.Accelerometer\nimport com.kylecorry.andromeda.sense.Sensors\nimport com.kylecorry.andromeda.core.sensors.Quality\nimport android.hardware.Sensor\noverride fun scan(): List<DiagnosticCode> {\r\n        if (!Sensors.hasSensor(context, Sensor.TYPE_ACCELEROMETER)) {\r\n            return listOf(DiagnosticCode.AccelerometerUnavailable)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.Poor) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/43", "ground_truth": "            return listOf(DiagnosticCode.AccelerometerPoor)\r\n        }\r\n\r\n        return emptyList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\AccelerometerDiagnostic.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.permissions.SpecialPermission\nimport com.kylecorry.andromeda.permissions.Permissions\noverride fun scan(): List<DiagnosticCode> {\r\n        if (!Permissions.hasPermission(context, SpecialPermission.SCHEDULE_EXACT_ALARMS)) {\r", "choices": [{"text": "return listOf(DiagnosticCode.NO_EXACT_ALARM_PERMISSION)\r\n        }\r\n        return listOf()\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/44", "ground_truth": "            return listOf(DiagnosticCode.ExactAlarmNoPermission)\r\n        }\r\n\r\n        return emptyList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\AlarmDiagnostic.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.UserPreferences\noverride fun scan(): List<DiagnosticCode> {\r\n        val prefs = UserPreferences(context)\r\n        if (prefs.altimeterMode == UserPreferences.AltimeterMode.Override) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/45", "ground_truth": "            return listOf(DiagnosticCode.AltitudeOverridden)\r\n        }\r\n\r\n        return emptyList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\AltimeterDiagnostic.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.sense.Sensors\nimport com.kylecorry.andromeda.core.sensors.Quality\noverride fun scan(): List<DiagnosticCode> {\r\n        if (!Sensors.hasBarometer(context)) {\r\n            return listOf(DiagnosticCode.BarometerUnavailable)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.Poor) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/46", "ground_truth": "            return listOf(DiagnosticCode.BarometerPoor)\r\n        }\r\n\r\n        return emptyList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\BarometerDiagnostic.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.permissions.Permissions\nimport android.content.pm.PackageManager\nimport android.annotation.SuppressLint\n @SuppressLint(\"UnsupportedChromeOsCameraSystemFeature\")\r\n    override fun scan(): List<DiagnosticCode> {\r\n        val issues = mutableListOf<DiagnosticCode>()\r\n\r\n        if (!Permissions.isCameraEnabled(context)) {\r\n            issues.add(DiagnosticCode.CameraNoPermission)\r\n        }\r\n\r\n        if (!context.packageManager.hasSystemFeature(PackageManager.FEATURE_CAMERA)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/47", "ground_truth": "            issues.add(DiagnosticCode.CameraUnavailable)\r\n        }\r\n\r\n        return issues\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\CameraDiagnostic.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nprivate fun getSeverityName(status: Severity): String {\r\n        return when (status) {\r\n            Severity.Error -> getString(R.string.error)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/48", "ground_truth": "            Severity.Warning -> getString(R.string.warning)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\DiagnosticAlertService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.permissions.SpecialPermission\nimport com.kylecorry.andromeda.permissions.Permissions\nimport android.os.Build\nprivate fun alarmAndReminderAction(): Action? {\r\n        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S){\r\n            Action(getString(R.string.settings)) {\r\n                Permissions.requestPermission(context, SpecialPermission.SCHEDULE_EXACT_ALARMS)\r", "choices": [{"text": "//                val intent = Intent(context, AlarmReceiver::class.java)\r\n//                val pendingIntent = PendingIntent.getBroadcast(context, 0, intent, 0)\r\n//                val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager\r\n//                alarmManager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, System.currentTimeMillis() + 1000, pendingIntent)\r\n            }\r\n        } else {\r\n            Action(getString(R.string.settings)) {\r\n                Permissions.requestPermission(context, SpecialPermission."}], "metadata": {"task_id": "Trail-Sense/49", "ground_truth": "            }\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\DiagnosticAlertService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport android.content.Intent\nprivate fun intentAction(to: Intent, title: String = getString(R.string.settings)): Action {\r\n        return Action(title) {\r", "choices": [{"text": "to.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n            startActivity(to)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/51", "ground_truth": "            context.startActivity(to)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\DiagnosticAlertService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.commands.Command\nimport com.kylecorry.trail_sense.R\nprivate fun commandAction(command: Command, title: String = getString(R.string.settings)): Action {\r\n        return Action(title) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/52", "ground_truth": "            command.execute()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\DiagnosticAlertService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport androidx.annotation.IdRes\nprivate fun navigateAction(\r\n        @IdRes to: Int,\r\n        title: String = getString(R.string.settings)\r\n    ): Action {\r\n        return Action(title) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/53", "ground_truth": "            navigation.navigate(to)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\DiagnosticAlertService.kt"}}
{"prompt": "\n override fun onUpdate() {\r\n        super.onUpdate()\r\n        val results = diagnostics.flatMap { it.scan() }.toSet().sortedBy { it.severity.ordinal }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/54", "ground_truth": "        binding.emptyText.isVisible = results.isEmpty()\r\n        diagnosticListView.setData(results)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\DiagnosticsFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.colors.AppColor\nimport com.kylecorry.trail_sense.R\nimport androidx.annotation.ColorInt\n @ColorInt\r\n    private fun getStatusTint(status: Severity): Int {\r\n        return when (status) {\r\n            Severity.Error -> AppColor.Red.color\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/55", "ground_truth": "            Severity.Warning -> AppColor.Yellow.color\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\DiagnosticsFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.flashlight.infrastructure.FlashlightSubsystem\noverride fun scan(): List<DiagnosticCode> {\r\n        val issues = mutableListOf<DiagnosticCode>()\r\n\r\n        if (!FlashlightSubsystem.getInstance(context).isAvailable()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/56", "ground_truth": "            issues.add(DiagnosticCode.FlashlightUnavailable)\r\n        }\r\n\r\n        return issues\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\FlashlightDiagnostic.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.sense.Sensors\nimport android.hardware.Sensor\noverride fun scan(): List<DiagnosticCode> {\r\n        if (!Sensors.hasSensor(context, Sensor.TYPE_LIGHT)) {\r", "choices": [{"text": "return listOf(DiagnosticCode.LIGHT_SENSOR_MISSING)\r\n        }\r\n        return emptyList()\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/57", "ground_truth": "            return listOf(DiagnosticCode.LightSensorUnavailable)\r\n        }\r\n\r\n        return emptyList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\LightSensorDiagnostic.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.sensors.SensorService\nimport com.kylecorry.andromeda.sense.magnetometer.Magnetometer\nimport com.kylecorry.andromeda.core.sensors.Quality\noverride fun scan(): List<DiagnosticCode> {\r\n        if (!SensorService(context).hasCompass()) {\r\n            return listOf(DiagnosticCode.MagnetometerUnavailable)\r\n        }\r\n\r\n        if (canRun && sensor!!.quality == Quality.Poor) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/58", "ground_truth": "            return listOf(DiagnosticCode.MagnetometerPoor)\r\n        }\r\n\r\n        return emptyList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\MagnetometerDiagnostic.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.sense.Sensors\nimport com.kylecorry.andromeda.permissions.Permissions\nimport android.hardware.Sensor\noverride fun scan(): List<DiagnosticCode> {\r\n        if (!Sensors.hasSensor(context, Sensor.TYPE_STEP_COUNTER)) {\r\n            return listOf(DiagnosticCode.PedometerUnavailable)\r\n        }\r\n\r\n        if (!Permissions.canRecognizeActivity(context)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/60", "ground_truth": "            return listOf(DiagnosticCode.PedometerNoPermission)\r\n        }\r\n\r\n        return emptyList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\PedometerDiagnostic.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.sense.location.GPS\nimport android.hardware.Sensor\nprivate fun updateGPS() {\r\n        sensorDetailsMap[\"gps\"] = SensorDetails(\r\n            getString(R.string.gps),\r\n            \"${formatService.formatLocation(gps.location)}\\n${gps.satellites ?: 0} ${getString(R.string.satellites)}\",\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/64", "ground_truth": "            getGPSStatus(),\r\n            getGPSColor(),\r\n            R.drawable.satellite\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\SensorDetailsFragment.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.sense.location.GPS\nimport com.kylecorry.andromeda.core.sensors.Quality\nprivate fun getGPSCacheQuality(): Quality {\r\n        return if (cachedGPS.location == Coordinate.zero) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/72", "ground_truth": "            Quality.Poor\r\n        } else {\r\n            Quality.Good\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\SensorDetailsFragment.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.sensors.Quality\nprivate fun getAltimeterCacheQuality(): Quality {\r\n        return if (cachedAltimeter.altitude == 0f) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/74", "ground_truth": "            Quality.Poor\r\n        } else {\r\n            Quality.Good\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\diagnostics\\SensorDetailsFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/79", "ground_truth": "        super.onDestroy()\r\n        _binding = null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\MainActivity.kt"}}
{"prompt": "\nval navController NavController\nval permissions\nval errorBanner ErrorBannerView\n fun changeBottomNavLabelsVisibility(useCompactMode: Boolean) {\r", "choices": [{"text": "val navController = navController\r\nval navGraph = navController.navInflater.inflate(R.navigation.nav_graph)\r\nval navGraphSet = navGraph.setStartDestination(R.id.homeFragment)\r\nval navGraphBuilder = navGraphSet.builder\r\nval navGraphBuilderSet = navGraphBuilder.setStartDestination(R.id.homeFragment)\r\nval navGraph = navGraphBuilderSet.build()\r\nval navControllerSet = navController.graph.setStartDestination(R.id.homeFragment)\r\nval navController = nav"}], "metadata": {"task_id": "Trail-Sense/80", "ground_truth": "        userPrefs.useCompactMode = useCompactMode\r\n        setBottomNavLabelsVisibility()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\MainActivity.kt"}}
{"prompt": "\n import androidx.core.view.updateLayoutParams\nimport androidx.core.view.WindowInsetsCompat\nimport androidx.core.view.ViewCompat\nimport androidx.constraintlayout.widget.ConstraintLayout.LayoutParams\nimport android.view.ViewGroup\nprivate fun bindLayoutInsets() {\r\n        ViewCompat.setOnApplyWindowInsetsListener(binding.root) { v, windowInsets ->\r\n            val insets = windowInsets.getInsets(WindowInsetsCompat.Type.systemBars())\r\n            v.updateLayoutParams<ViewGroup.MarginLayoutParams> {\r\n                topMargin = insets.top\r", "choices": [{"text": "//                bottomMargin = insets.bottom\r\n            }\r\n            windowInsets\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/82", "ground_truth": "                bottomMargin = insets.bottom\r\n            }\r\n            WindowInsetsCompat.CONSUMED\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\MainActivity.kt"}}
{"prompt": "\n fun reloadTheme() {\r", "choices": [{"text": "//     val theme = getTheme()\r\n//     setTheme(theme)\r\n//     recreate()\r\n// }\r\n"}], "metadata": {"task_id": "Trail-Sense/83", "ground_truth": "        cache.putBoolean(\"pref_theme_just_changed\", true)\r\n        recreate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\MainActivity.kt"}}
{"prompt": "\nvar _binding ActivityMainBinding?\nval binding ActivityMainBinding\nval permissions\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\n_binding = null\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\n_binding = ActivityMainBinding.inflate(layoutInflater)\r\nval view = _binding.root\r\nsetContentView(view)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/85", "ground_truth": "        super.onPause()\r\n        FlashlightSubsystem.getInstance(this).stopSystemMonitor()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\MainActivity.kt"}}
{"prompt": " import android.content.Intent\nval permissions\nvar userPrefs UserPreferences\nvar _binding ActivityMainBinding?\noverride fun onNewIntent(intent: Intent?) {\r\n        super.onNewIntent(intent)\r\n        intent ?: return\r", "choices": [{"text": " import android.content.Intent\nval permissions\nvar userPrefs UserPreferences\nvar _binding ActivityMainBinding?\noverride fun onNewIntent(intent: Intent?) {\r\n        super.onNewIntent(intent)\r\n        intent?: return\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/86", "ground_truth": "        setIntent(intent)\r\n        handleIntentAction(intent)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\MainActivity.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n        outState.putInt(\"page\", binding.bottomNavigation.selectedItemId)\r\n        navController.currentBackStackEntry?.arguments?.let {\r\n            outState.putBundle(\"navigation_arguments\", it)\r", "choices": [{"text": "}\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/88", "ground_truth": "        }\r\n        navController.currentDestination?.id?.let {\r\n            outState.putInt(\"navigation\", it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\MainActivity.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.astronomy.domain.AstronomyService\nimport com.kylecorry.trail_sense.shared.sensors.LocationSubsystem\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.fragments.ColorTheme\nimport android.graphics.Color\nprivate fun sunriseSunsetTheme(): ColorTheme {\r\n        val astronomyService = AstronomyService()\r\n        val location = LocationSubsystem.getInstance(this).location\r\n        if (location == Coordinate.zero) {\r\n            return ColorTheme.System\r\n        }\r\n        val isSunUp = astronomyService.isSunUp(location)\r\n        return if (isSunUp) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/89", "ground_truth": "            ColorTheme.Light\r\n        } else {\r\n            ColorTheme.Dark\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\MainActivity.kt"}}
{"prompt": "\n private fun onVolumePressed(isVolumeUp: Boolean, isButtonPressed: Boolean): Boolean {\r\n        if (!shouldOverrideVolumePress()) {\r\n            return false\r\n        }\r\n\r\n        val action =\r\n            (if (isVolumeUp) getVolumeUpAction() else getVolumeDownAction()) ?: return false\r\n\r\n        if (isButtonPressed) {\r\n            action.onButtonPress()\r\n        } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/92", "ground_truth": "            action.onButtonRelease()\r\n        }\r\n\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\MainActivity.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.VolumeAction\nimport com.kylecorry.trail_sense.tools.flashlight.volumeactions.FlashlightToggleVolumeAction\nimport com.kylecorry.trail_sense.tools.clinometer.volumeactions.ClinometerLockVolumeAction\nimport com.kylecorry.trail_sense.tools.flashlight.ui.FragmentToolFlashlight\nimport com.kylecorry.trail_sense.tools.clinometer.ui.ClinometerFragment\nprivate fun getVolumeDownAction(): VolumeAction? {\r\n\r\n        val fragment = getFragment()\r\n        if (userPrefs.clinometer.lockWithVolumeButtons && fragment is ClinometerFragment) {\r\n            return ClinometerLockVolumeAction(fragment)\r\n        }\r\n\r\n\r\n        if (userPrefs.flashlight.toggleWithVolumeButtons) {\r\n            return FlashlightToggleVolumeAction(\r\n                this,\r\n                if (fragment is FragmentToolFlashlight) fragment else null\r", "choices": [{"text": ")\r\n        }\r\n\r\n        return null\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/94", "ground_truth": "            )\r\n        }\r\n\r\n        return null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\MainActivity.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.VolumeAction\nimport com.kylecorry.trail_sense.tools.flashlight.volumeactions.FlashlightToggleVolumeAction\nimport com.kylecorry.trail_sense.tools.clinometer.volumeactions.ClinometerLockVolumeAction\nimport com.kylecorry.trail_sense.tools.flashlight.ui.FragmentToolFlashlight\nimport com.kylecorry.trail_sense.tools.clinometer.ui.ClinometerFragment\nprivate fun getVolumeUpAction(): VolumeAction? {\r\n        val fragment = getFragment()\r\n        if (userPrefs.clinometer.lockWithVolumeButtons && fragment is ClinometerFragment) {\r\n            return ClinometerLockVolumeAction(fragment)\r\n        }\r\n\r\n        if (userPrefs.flashlight.toggleWithVolumeButtons) {\r\n            return FlashlightToggleVolumeAction(\r\n                this,\r\n                if (fragment is FragmentToolFlashlight) fragment else null\r", "choices": [{"text": ")\r\n        }\r\n\r\n        return null\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/95", "ground_truth": "            )\r\n        }\r\n\r\n        return null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\MainActivity.kt"}}
{"prompt": "\n import androidx.room.Database\nimport android.content.Context\nfun getInstance(context: Context): AppDatabase {\r\n            return synchronized(this) {\r", "choices": [{"text": "//                val INSTANCE = Room.databaseBuilder(context.applicationContext,\r\n//                    AppDatabase::class.java, \"app_database\")\r\n//                   .build()\r\n//                INSTANCE\r\n                Room.databaseBuilder(context.applicationContext,\r\n                    AppDatabase::class.java, \"app_database\")\r\n                   .build()\r\n            }\r\n        }\n"}], "metadata": {"task_id": "Trail-Sense/97", "ground_truth": "                instance ?: buildDatabase(context).also { instance = it }\r\n            }\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\persistence\\AppDatabase.kt"}}
{"prompt": "\nvar instance AppDatabase?\n fun close(){\r\n            synchronized(this) {\r\n                instance?.close()\r", "choices": [{"text": "}\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/98", "ground_truth": "                instance = null\r\n            }\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\persistence\\AppDatabase.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.beacons.domain.BeaconIcon\nimport androidx.room.TypeConverter\n @TypeConverter\r\n    fun toBeaconIcon(value: Long?): BeaconIcon? {\r", "choices": [{"text": "return BeaconIcon.fromId(value)\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/99", "ground_truth": "        value ?: return null\r\n        return BeaconIcon.values().withId(value)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\persistence\\Converters.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.tools.weather.infrastructure.persistence.WeatherRepo\nimport com.kylecorry.trail_sense.tools.lightning.infrastructure.persistence.LightningRepo\nimport com.kylecorry.trail_sense.tools.clouds.infrastructure.persistence.CloudRepo\nimport com.kylecorry.trail_sense.tools.paths.infrastructure.persistence.PathService\nimport android.content.Context\noverride suspend fun doWork(): Result = withContext(Dispatchers.IO) {\r\n\r\n        val cleanables: List<ICleanable> = listOf(\r\n            PathService.getInstance(context),\r\n            WeatherRepo.getInstance(context),\r\n            CloudRepo.getInstance(context),\r\n            LightningRepo.getInstance(context)\r\n        )\r\n\r\n        for (repo in cleanables) {\r\n            repo.clean()\r\n        }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/100", "ground_truth": "\r\n        DeleteTempFilesCommand(context).execute()\r\n\r\n        Result.success()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\persistence\\RepoCleanupWorker.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.background.TaskSchedulerFactory\nimport com.kylecorry.andromeda.background.IPeriodicTaskScheduler\nimport android.content.Context\nfun scheduler(context: Context): IPeriodicTaskScheduler {\r\n            return TaskSchedulerFactory(context.applicationContext).interval(\r\n                RepoCleanupWorker::class.java,\r", "choices": [{"text": "//                RepoCleanupWorker::class.java,\r\n                RepoCleanupWorker.TAG,\r\n                1000 * 60 * 60 * 24 * 7,\r\n                1000 * 60 * 60 * 24 * 7\r\n            )\r\n        }<file_sep>/app/src/main/java/com/kylecorry/trail_sense/shared/sensors/SensorService.kt\npackage com.kylecorry.trail_sense.shared.sensors\n\nimport android.content.Context\nimport com.kylecorry.andromeda"}], "metadata": {"task_id": "Trail-Sense/101", "ground_truth": "                2739523\r\n            )\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\main\\persistence\\RepoCleanupWorker.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.databinding.ActivityOnboardingBinding\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityOnboardingBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        load(pageIdx)\r\n\r", "choices": [{"text": "}\r\n\noverride fun onBackPressed() {\r\n        if (pageIdx == 0) {\r\n            super.onBackPressed()\r\n        } else {\r\n            pageIdx--\r\n            load(pageIdx)\r\n        }\r\n    }\r\n\noverride fun onNextPressed() {\r\n        pageIdx++\r\n        load(pageIdx)\r\n    }\r\n\noverride fun onSkipPressed() {\r\n        pageIdx = 2\r\n        load(pageIdx)\r\n    }\r\n\noverride fun onDonePressed() {\r\n        pageIdx = 2\r\n        load(pageIdx)\r\n    }\r\n\nprivate fun load(pageIdx: Int) {\r\n        when ("}], "metadata": {"task_id": "Trail-Sense/104", "ground_truth": "        binding.nextButton.setOnClickListener {\r\n            load(pageIdx + 1)\r\n        }\r\n\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\onboarding\\OnboardingActivity.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport android.os.Bundle\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\n        super.onRestoreInstanceState(savedInstanceState)\r\n        pageIdx = savedInstanceState.getInt(\"page\", 0)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/106", "ground_truth": "        if (pageIdx >= pages.size || pageIdx < 0) {\r\n            pageIdx = 0\r\n        }\r\n        load(pageIdx)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\onboarding\\OnboardingActivity.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r", "choices": [{"text": "super.onSaveInstanceState(outState)\r\noutState.putInt(\"key\", 1)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\nsuper.onRestoreInstanceState(savedInstanceState)\r\nval value = savedInstanceState.getInt(\"key\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/107", "ground_truth": "        super.onSaveInstanceState(outState)\r\n        outState.putInt(\"page\", pageIdx)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\onboarding\\OnboardingActivity.kt"}}
{"prompt": "\n import android.util.Log\nimport android.content.Intent\nimport android.content.Context\noverride fun onReceive(context: Context?, intent: Intent?) {\r\n        if (intent?.action == Intent.ACTION_BOOT_COMPLETED && context != null) {\r\n            Log.d(\"BootReceiver\", \"Boot completed\")\r", "choices": [{"text": "\n import android.util.Log\nimport android.content.Intent\nimport android.content.Context\noverride fun onReceive(context: Context?, intent: Intent?) {\r\n        if (intent?.action == Intent.ACTION_BOOT_COMPLETED && context!= null) {\r\n            Log.d(\"BootReceiver\", \"Boot completed\")\r\n//            val intent = Intent(context, MainActivity::class.java)\r\n//            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n//            context.startActivity(intent)\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/109", "ground_truth": "            TrailSenseServiceUtils.restartServices(context, isInBackground = true)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\receivers\\BootReceiver.kt"}}
{"prompt": "\n import android.util.Log\nimport android.content.Intent\nimport android.content.Context\nimport android.app.AlarmManager\noverride fun onReceive(context: Context?, intent: Intent?) {\r\n        if (intent?.action == AlarmManager.ACTION_SCHEDULE_EXACT_ALARM_PERMISSION_STATE_CHANGED && context != null) {\r\n            Log.d(\"ExactAlarmPermissionChangedReceiver\", \"Exact alarm permission changed\")\r", "choices": [{"text": "\n import android.util.Log\nimport android.content.Intent\nimport android.content.Context\nimport android.app.AlarmManager\noverride fun onReceive(context: Context?, intent: Intent?) {\r\n        if (intent?.action == AlarmManager.ACTION_SCHEDULE_EXACT_ALARM_PERMISSION_STATE_CHANGED && context!= null) {\r\n            Log.d(\"ExactAlarmPermissionChangedReceiver\", \"Exact alarm permission changed\")\r\n//            val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager\r\n//            alarmManager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, System.currentTimeMillis() + 1000, PendingIntent.getBroadcast(context, 0, Intent(context, MyBroadcastReceiver::class.java), 0))\r\n        }\r\n    }\r\n}<file_sep>/app/src/main/java/com/example/myapplication/MyBroadcastReceiver.kt\npackage com.example.myapplication\n\nimport android.content.BroadcastReceiver\nimport"}], "metadata": {"task_id": "Trail-Sense/110", "ground_truth": "            RestartServicesCommand(context, true).execute()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\receivers\\ExactAlarmPermissionChangedReceiver.kt"}}
{"prompt": "\n import android.util.Log\nimport android.content.Intent\nimport android.content.Context\noverride fun onReceive(context: Context?, intent: Intent?) {\r\n        if (intent?.action == Intent.ACTION_MY_PACKAGE_REPLACED && context != null) {\r\n            Log.d(\"PackageReplacedReceiver\", \"Package replaced\")\r", "choices": [{"text": "\n import android.util.Log\nimport android.content.Intent\nimport android.content.Context\noverride fun onReceive(context: Context?, intent: Intent?) {\r\n        if (intent?.action == Intent.ACTION_MY_PACKAGE_REPLACED && context!= null) {\r\n            Log.d(\"PackageReplacedReceiver\", \"Package replaced\")\r\n//            val intent = Intent(context, MainActivity::class.java)\r\n//            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n//            context.startActivity(intent)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/111", "ground_truth": "            TrailSenseServiceUtils.restartServices(context, true)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\receivers\\PackageReplacedReceiver.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.system.Package\nfun enable() {\r\n        Package.setComponentEnabled(\r", "choices": [{"text": "\"com.kylecorry.andromeda.core.system.Package\",\r\n\"com.kylecorry.andromeda.core.system.Package.Component\",\r\ntrue\r\n        )\r\n}\r\n\r\nfun disable() {\r\n        Package.setComponentEnabled(\r\n\"com.kylecorry.andromeda.core.system.Package\",\r\n\"com.kylecorry.andromeda.core.system.Package.Component\",\r\nfalse\r\n        )\r\n}\r\n\r\nfun isEnabled(): Boolean {\r\n        return Package.isComponentEnabled("}], "metadata": {"task_id": "Trail-Sense/112", "ground_truth": "            context,\r\n            component,\r\n            true\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\receivers\\StartOnBootController.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.system.Package\nfun disable() {\r\n        Package.setComponentEnabled(\r", "choices": [{"text": "\"com.kylecorry.andromeda.core.system.Package\",\r\n\"com.kylecorry.andromeda.core.system.Package.Component\",\r\nfalse)\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/113", "ground_truth": "            context,\r\n            component,\r\n            false\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\receivers\\StartOnBootController.kt"}}
{"prompt": "\n import android.content.Intent\nimport android.content.Context\noverride fun onReceive(context: Context?, intent: Intent?) {\r\n        context ?: return\r", "choices": [{"text": "\n import android.content.Intent\nimport android.content.Context\noverride fun onReceive(context: Context?, intent: Intent?) {\r\n        context?: return\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/114", "ground_truth": "        StopWeatherMonitorCommand(context).execute()\r\n        StopBacktrackCommand(context).execute()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\receivers\\StopAllReceiver.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.UserPreferences\nimport android.content.Context\nprivate fun startPedometer(context: Context) {\r\n        val prefs = UserPreferences(context)\r\n        if (prefs.pedometer.isEnabled) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/118", "ground_truth": "            StepCounterService.start(context)\r\n        } else {\r\n            StepCounterService.stop(context)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\receivers\\TrailSenseServiceUtils.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.weather.infrastructure.WeatherUpdateScheduler\nimport com.kylecorry.trail_sense.tools.weather.infrastructure.WeatherMonitorService\nimport com.kylecorry.trail_sense.shared.UserPreferences\nimport android.content.Context\nprivate fun startWeatherMonitoring(context: Context) {\r\n        val prefs = UserPreferences(context)\r\n        if (prefs.weather.shouldMonitorWeather) {\r\n            if (!WeatherMonitorService.isRunning) {\r\n                WeatherUpdateScheduler.start(context)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/119", "ground_truth": "            }\r\n        } else {\r\n            WeatherUpdateScheduler.stop(context)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\receivers\\TrailSenseServiceUtils.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.infrastructure.subsystem.BacktrackSubsystem\nimport com.kylecorry.trail_sense.tools.paths.infrastructure.services.BacktrackService\nimport com.kylecorry.trail_sense.shared.FeatureState\nimport android.content.Context\nprivate suspend fun startBacktrack(context: Context) {\r\n        val backtrack = BacktrackSubsystem.getInstance(context)\r\n        if (backtrack.getState() == FeatureState.On) {\r\n            if (!BacktrackService.isRunning) {\r\n                backtrack.enable(false)\r", "choices": [{"text": "//                BacktrackService.start(context)\r\n            }\r\n        } else {\r\n            if (BacktrackService.isRunning) {\r\n                BacktrackService.stop(context)\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/120", "ground_truth": "            }\r\n        } else {\r\n            backtrack.disable()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\receivers\\TrailSenseServiceUtils.kt"}}
{"prompt": "\n fun getInstance(): PreferenceMigrator {\r\n            return synchronized(staticLock) {\r\n                if (instance == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/122", "ground_truth": "                    instance = PreferenceMigrator()\r\n                }\r\n                instance!!\r\n            }\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\settings\\migrations\\PreferenceMigrator.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.fragments.AndromedaPreferenceFragment\nimport com.kylecorry.andromeda.core.tryOrNothing\nimport androidx.preference.Preference\nimport androidx.annotation.IdRes\nfun AndromedaPreferenceFragment.navigateOnClick(pref: Preference?, @IdRes action: Int) {\r\n    pref?.setOnPreferenceClickListener {\r\n        tryOrNothing {\r", "choices": [{"text": "//            val navController = findNavController()\r\n//            navController.navigate(action)\r\n            true\r\n        }\r\n        true\r\n    }\r\n}<file_sep>/app/src/main/java/com/kylecorry/trail_sense/navigation/ui/NavigationFragment.kt\npackage com.kylecorry.trail_sense.navigation.ui\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\nimport androidx.navigation.fragment.findNavController\n"}], "metadata": {"task_id": "Trail-Sense/125", "ground_truth": "            findNavController().navigateWithAnimation(action)\r\n        }\r\n        true\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\settings\\ui\\PreferenceFragmentExtensions.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Pressure\nfun plot(\r\n        data: List<Reading<Pressure>>,\r\n        raw: List<Reading<Pressure>>? = null\r\n    ) {\r\n        this.data = data\r", "choices": [{"text": "//        this.raw = raw\r\n        this.raw = null\r\n        this.title = getString(R.string.pressure_title)\r\n        this.unit = getString(R.string.pressure_unit)\r\n        this.color = Color.BLUE\r\n        this.colorRaw = Color.RED\r\n        this.colorBackground = Color.LTGRAY\r\n        this.colorBackgroundRaw = Color.LTGRAY\r\n        this.colorBackgroundHighlight = Color.LTGRAY\r\n        this.colorHighlight = Color.BLUE\r\n        this.colorRawHighlight = Color.RED\r\n        this.colorText = Color.BLACK\r\n        this.colorTextRaw ="}], "metadata": {"task_id": "Trail-Sense/127", "ground_truth": "        this.raw = raw\r\n        chart?.plot(data, raw)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\settings\\ui\\PressureChartPreference.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.lifecycleScope\nprivate fun backup() {\r\n        lifecycleScope.launch {\r", "choices": [{"text": "//            val backup = BackupManager(this)\r\n//            backup.dataChanged()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/131", "ground_truth": "            backupCommand.execute()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\settings\\ui\\SettingsFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.lifecycleScope\nprivate fun restore() {\r\n        lifecycleScope.launch {\r", "choices": [{"text": "//            val result = withContext(Dispatchers.IO) {\r\n//                // do some work\r\n//            }\r\n//            // do something with the result\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/132", "ground_truth": "            restoreCommand.execute()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\settings\\ui\\SettingsFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.requireMainActivity\nimport androidx.preference.Preference\nprivate fun reloadThemeOnChange(pref: Preference?) {\r\n        pref?.setOnPreferenceChangeListener { _, _ ->\r\n            requireMainActivity().reloadTheme()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/133", "ground_truth": "            true\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\settings\\ui\\SettingsFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\noverride fun onResume() {\r\n        super.onResume()\r\n        reloadThermometer()\r", "choices": [{"text": "}\r\noverride fun onPause() {\r\n        super.onPause()\r\n        reloadThermometer()\r\n}\r\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n        reloadThermometer()\r\n}\r\noverride fun onStop() {\r\n        super.onStop()\r\n        reloadThermometer()\r\n}\r\noverride fun onRestart() {\r\n        super.onRestart()\r\n        reloadThermometer()\r\n}\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(request"}], "metadata": {"task_id": "Trail-Sense/138", "ground_truth": "        val source = prefs.thermometer.source\r\n        displayErrors(source)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\settings\\ui\\ThermometerSettingsFragment.kt"}}
{"prompt": "\nvar calibratedThermometer IThermometer?\nvar minTempUncalibratedC EditTextPreference?\nvar temperatureTxt Preference?\n override fun onPause() {\r\n        super.onPause()\r", "choices": [{"text": "//        if (calibratedThermometer!= null) {\r\n//            calibratedThermometer!!.close()\r\n//        }\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        if (calibratedThermometer!= null) {\r\n            calibratedThermometer!!.open()\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n        minTempUncalibratedC = findViewById(R.id.minTempUncalibrated"}], "metadata": {"task_id": "Trail-Sense/139", "ground_truth": "        calibratedThermometer?.stop(this::onThermometerUpdate)\r\n        hideLocationUnsetError()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\settings\\ui\\ThermometerSettingsFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.sensors.thermometer.ThermometerSource\nprivate fun displayErrors(source: ThermometerSource) {\r\n        if (source == ThermometerSource.Historic && isLocationUnset()) {\r", "choices": [{"text": "//            Toast.makeText(context, R.string.thermometer_historic_location_unset, Toast.LENGTH_LONG).show()\r\n        } else if (source == ThermometerSource.Historic && isLocationDisabled()) {\r\n//            Toast.makeText(context, R.string.thermometer_historic_location_disabled, Toast.LENGTH_LONG).show()\r\n        } else if (source == ThermometerSource.Historic && isLocationPermissionDenied()) {\r\n//            Toast.makeText(context, R.string.thermometer_historic_location"}], "metadata": {"task_id": "Trail-Sense/141", "ground_truth": "            showLocationUnsetError()\r\n        } else {\r\n            hideLocationUnsetError()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\settings\\ui\\ThermometerSettingsFragment.kt"}}
{"prompt": "\nvar minTempUncalibratedC EditTextPreference?\nvar calibratedThermometer IThermometer?\nvar minTempCalibratedC EditTextPreference?\n private fun hideLocationUnsetError() {\r", "choices": [{"text": "locationUnsetError.visibility = View.GONE\r\n}\r\nprivate fun showLocationUnsetError() {\r\nlocationUnsetError.visibility = View.VISIBLE\r\n}\r\nprivate fun hideLocationSetError() {\r\nlocationSetError.visibility = View.GONE\r\n}\r\nprivate fun showLocationSetError() {\r\nlocationSetError.visibility = View.VISIBLE\r\n}\r\nprivate fun hideLocationSetWarning() {\r\nlocationSetWarning.visibility = View.GONE\r\n}\r\nprivate fun showLocationSetWarning() {\r\nlocationSetWarning.visibility = View"}], "metadata": {"task_id": "Trail-Sense/142", "ground_truth": "        val activity = requireMainActivity()\r\n        activity.errorBanner.dismiss(ErrorBannerReason.LocationNotSet)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\settings\\ui\\ThermometerSettingsFragment.kt"}}
{"prompt": "\nvar dialog AlertDialog?\n override fun show() {\r", "choices": [{"text": "dialog = AlertDialog.Builder(context)\r\n.setTitle(\"Title\")\r\n.setMessage(\"Message\")\r\n.setPositiveButton(\"OK\", DialogInterface.OnClickListener { dialog, which ->\r\n// do something\r\n})\r\n.setNegativeButton(\"Cancel\", DialogInterface.OnClickListener { dialog, which ->\r\n// do something\r\n})\r\n.show()\r\n}\r\noverride fun dismiss() {\r\ndialog?.dismiss()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/145", "ground_truth": "        hide()\r\n        dialog = Alerts.loading(context, title)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\alerts\\AlertLoadingIndicator.kt"}}
{"prompt": "\n override fun hide() {\r", "choices": [{"text": "//     TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\r\n }\r\n\r\n override fun show() {\r\n//     TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\r\n }\r\n\r\n override fun onDestroy() {\r\n//     TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\r\n }\r\n\r\n override fun onPause() {\r\n//     TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\r\n }\r\n\r\n override fun onResume"}], "metadata": {"task_id": "Trail-Sense/146", "ground_truth": "        dialog?.dismiss()\r\n        dialog = null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\alerts\\AlertLoadingIndicator.kt"}}
{"prompt": "\n override fun show() {\r\n        if (!hasRun) {\r\n            loadingIndicator.show()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/148", "ground_truth": "            hasRun = true\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\alerts\\ResettableLoadingIndicator.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport android.content.Context\nsuspend fun getGeoid(context: Context, location: Coordinate): Float = onIO {\r\n        val pixel = source.getPixel(location)\r\n        cache.getOrPut(pixel) {\r", "choices": [{"text": "//            val geoid = context.getGeoid(location)\r\n//            if (geoid == null) {\r\n//                throw Exception(\"Could not get geoid\")\r\n//            }\r\n//            geoid.elevation\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/149", "ground_truth": "            source.read(context, file, location).first()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\AltitudeCorrection.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.math.geometry.Size\nimport com.kylecorry.sol.math.SolMath\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nfun getPixelLinear(\r\n        bearing: Float,\r\n        azimuth: Float,\r\n        altitude: Float,\r\n        inclination: Float,\r\n        size: Size,\r\n        fov: Size\r\n    ): PixelCoordinate {\r\n\r\n        val newBearing = SolMath.deltaAngle(azimuth, bearing)\r\n        val newAltitude = altitude - inclination\r\n\r\n        return synchronized(rectLock) {\r\n            rect.right = size.width\r\n            rect.bottom = size.height\r\n            linear.getPixel(\r\n                newBearing,\r\n                newAltitude,\r\n                rect,\r", "choices": [{"text": "//                fov.width,\r\n//                fov.height,\r\n                fov.width / 2,\r\n                fov.height / 2,\r\n                linear\r\n            )\r\n        }\r\n    }\r\n\r\n    fun getPixelLinear(\r\n        bearing: Float,\r\n        azimuth: Float,\r\n        altitude: Float,\r\n        inclination: Float,\r\n        size: Size,\r\n        fov: Size,\r\n        rect: Rect\r\n    ): PixelCoordinate {\r\n\r\n        val newBearing = SolMath.deltaAngle(azimuth, bearing)\r\n        val newAltitude = altitude - inclination\r\n\r\n        return synchronized(rectLock"}], "metadata": {"task_id": "Trail-Sense/151", "ground_truth": "                fov,\r\n                null\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\camera\\AugmentedRealityUtils.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.augmented_reality.domain.mapper.CameraAnglePixelMapper\nimport com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.math.geometry.Size\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nimport android.opengl.Matrix\nimport android.graphics.RectF\nfun getPixel(\r\n        bearing: Float,\r\n        elevation: Float,\r\n        distance: Float,\r\n        rotationMatrix: FloatArray,\r\n        rect: RectF,\r\n        fov: Size,\r\n        mapper: CameraAnglePixelMapper\r\n    ): PixelCoordinate {\r\n        val d = distance.coerceIn(minDistance, maxDistance)\r\n\r\n        return getPixel(\r\n            toEastNorthUp(bearing, elevation, d),\r\n            rotationMatrix,\r", "choices": [{"text": "//            rect,\r\n            fov,\r\n            mapper\r\n        )\r\n    }\r\n\r\n    fun getPixel(\r\n        bearing: Float,\r\n        elevation: Float,\r\n        distance: Float,\r\n        rotationMatrix: FloatArray,\r\n        rect: RectF,\r\n        fov: Size,\r\n        mapper: CameraAnglePixelMapper\r\n    ): PixelCoordinate {\r\n        val d = distance.coerceIn(minDistance, maxDistance)\r\n\r\n        return getPixel(\r\n            toEastNorthUp(bearing, elevation, d),\r\n            rotationMatrix,\r\n//            rect,\r\n            fov,\r\n            mapper\r\n        )\r\n    }\r\n\r\n    fun getPixel(\r\n        bearing"}], "metadata": {"task_id": "Trail-Sense/152", "ground_truth": "            rect,\r\n            fov,\r\n            mapper\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\camera\\AugmentedRealityUtils.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.augmented_reality.domain.mapper.CameraAnglePixelMapper\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.math.geometry.Size\nimport com.kylecorry.sol.math.Vector3\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nimport android.opengl.Matrix\nimport android.graphics.RectF\nfun getPixel(\r\n        enuCoordinate: Vector3,\r\n        rotationMatrix: FloatArray,\r\n        rect: RectF,\r\n        fov: Size,\r\n        mapper: CameraAnglePixelMapper\r\n    ): PixelCoordinate {\r\n        val world = enuToAr(enuCoordinate, rotationMatrix)\r\n\r\n        return mapper.getPixel(\r", "choices": [{"text": "//            world.x,\r\n//            world.y,\r\n//            world.z,\r\n            world.x,\r\n            world.y,\r\n            world.z,\r\n            rect,\r\n            fov\r\n        )\r\n    }\r\n\r\nfun getPixel(\r\n        enuCoordinate: Vector3,\r\n        rotationMatrix: FloatArray,\r\n        rect: RectF,\r\n        fov: Size,\r\n        mapper: CameraAnglePixelMapper,\r\n        camera: Camera\r\n): PixelCoordinate {\r\n    val world = enuToAr(enuCoordinate, rotationMatrix)\r\n\r\n    return mapper.getPixel(\r\n//            world.x"}], "metadata": {"task_id": "Trail-Sense/153", "ground_truth": "            world,\r\n            rect,\r\n            fov\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\camera\\AugmentedRealityUtils.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.sense.orientation.OrientationUtils\nimport com.kylecorry.andromeda.sense.orientation.IOrientationSensor\nimport android.opengl.Matrix\nfun getOrientation(\r\n        orientationSensor: IOrientationSensor,\r\n        rotationMatrix: FloatArray,\r\n        orientation: FloatArray,\r\n        declination: Float? = null\r\n    ) {\r\n        OrientationUtils.getAROrientation(\r\n            orientationSensor,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/154", "ground_truth": "            rotationMatrix,\r\n            orientation,\r\n            declination\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\camera\\AugmentedRealityUtils.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r\n        if (isBound) {\r\n            binding.camera.stop()\r", "choices": [{"text": "}\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/158", "ground_truth": "        }\r\n        super.onDestroyView()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\camera\\PhotoImportBottomSheetFragment.kt"}}
{"prompt": "\n import android.content.DialogInterface\noverride fun onDismiss(dialog: DialogInterface) {\r", "choices": [{"text": "super.onDismiss(dialog)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/159", "ground_truth": "        super.onDismiss(dialog)\r\n        binding.camera.stop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\camera\\PhotoImportBottomSheetFragment.kt"}}
{"prompt": "\n override fun setup() {\r", "choices": [{"text": "//    val intent = Intent(this, MainActivity::class.java)\r\n//    intent.putExtra(\"name\", \"<NAME>\")\r\n//    startActivity(intent)\r\n//    finish()\r\n    val intent = Intent(this, MainActivity::class.java)\r\n    intent.putExtra(\"name\", \"<NAME>\")\r\n    startActivityForResult(intent, 100)\r\n}\r\n\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n    super.onActivityResult(requestCode, resultCode, data)\r\n    if (requestCode == 100"}], "metadata": {"task_id": "Trail-Sense/161", "ground_truth": "        shutterColor = Resources.getPrimaryColor(context)\r\n        outlineThickness = dp(4f)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\camera\\ShutterButton.kt"}}
{"prompt": "\n import android.view.MotionEvent\noverride fun onTouchEvent(event: MotionEvent?): Boolean {\r\n        if (event?.action == MotionEvent.ACTION_DOWN){\r\n            isShutterPressed = true\r\n        }\r\n\r\n        if (event?.action == MotionEvent.ACTION_UP){\r\n            isShutterPressed = false\r\n        }\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/162", "ground_truth": "\r\n        invalidate()\r\n\r\n        return super.onTouchEvent(event)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\camera\\ShutterButton.kt"}}
{"prompt": " import com.kylecorry.sol.units.Bearing\nval formatter\nvar bearing Float?\nval fovRunner\nprivate fun confirmBearing() {\r", "choices": [{"text": "if (bearing == null) {\r\nbearing = 0f\r\n}\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/164", "ground_truth": "        onSelect(bearing)\r\n        dismiss()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\camera\\SightingCompassBottomSheetFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r\n        if (isBound) {\r", "choices": [{"text": "//            unbindService(connection)\r\n            isBound = false\r\n        }\r\n        super.onDestroyView()\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/165", "ground_truth": "            binding.camera.stop()\r\n        }\r\n        fovRunner.cancel()\r\n        super.onDestroyView()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\camera\\SightingCompassBottomSheetFragment.kt"}}
{"prompt": "\n import android.content.DialogInterface\noverride fun onDismiss(dialog: DialogInterface) {\r", "choices": [{"text": "super.onDismiss(dialog)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/166", "ground_truth": "        super.onDismiss(dialog)\r\n        binding.camera.stop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\camera\\SightingCompassBottomSheetFragment.kt"}}
{"prompt": "\n private fun interpolateZ(start: Float?, end: Float?, t: Float): Float {\r\n        if (start == null || end == null) {\r\n            return start ?: end ?: 0f\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/168", "ground_truth": "        }\r\n        return start + (end - start) * t\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\canvas\\LineClipper.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.units.PixelCoordinate\nfun contains(pixel: PixelCoordinate): Boolean {\r", "choices": [{"text": "return this.contains(pixel.x, pixel.y)\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/169", "ground_truth": "        val distance = center.distanceTo(pixel)\r\n        return distance <= radius\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\canvas\\PixelCircle.kt"}}
{"prompt": "\n fun intersects(other: PixelCircle): Boolean {\r", "choices": [{"text": "-    return this.x + this.radius >= other.x - other.radius &&\r\n-           this.x - this.radius <= other.x + other.radius &&\r\n-           this.y + this.radius >= other.y - other.radius &&\r\n-           this.y - this.radius <= other.y + other.radius\r\n+    return this.x + this.radius >= other.x - other.radius && this.x - this.radius <= other.x + other.radius && this.y + this.radius >= other.y -"}], "metadata": {"task_id": "Trail-Sense/170", "ground_truth": "        val distance = center.distanceTo(other.center)\r\n        return distance <= radius + other.radius\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\canvas\\PixelCircle.kt"}}
{"prompt": "\n import androidx.annotation.ColorInt\nimport android.graphics.Color\nfun nrbr(@ColorInt value: Int): Float {\r\n        val blue = Color.blue(value)\r", "choices": [{"text": "val red = Color.red(value)\r\nval green = Color.green(value)\r\nval alpha = Color.alpha(value)\r\nval nrbr = (red + green + blue) / 3\r\nreturn nrbr.toFloat()\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/171", "ground_truth": "        val red = Color.red(value)\r\n        return (red - blue) / (red + blue).toFloat().coerceAtLeast(1f)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\colors\\ColorUtils.kt"}}
{"prompt": "\n import kotlin.math.min\nimport kotlin.math.max\nimport androidx.annotation.ColorInt\nimport android.graphics.Color\nfun saturation(@ColorInt value: Int): Float {\r\n        val blue = Color.blue(value)\r\n        val red = Color.red(value)\r\n        val green = Color.green(value)\r\n\r\n        val min = min(red, min(blue, green))\r\n        val max = max(red, max(blue, green))\r\n\r\n        if (min == 0 && max == 0) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/172", "ground_truth": "            return 0f\r\n        }\r\n\r\n        return 1 - min / max.toFloat().coerceAtLeast(1f)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\colors\\ColorUtils.kt"}}
{"prompt": "\n import androidx.annotation.ColorInt\nimport android.graphics.Color\nfun average(@ColorInt value: Int): Float {\r\n        val blue = Color.blue(value)\r", "choices": [{"text": "val green = Color.green(value)\r\nval red = Color.red(value)\r\nreturn (red + green + blue) / 3f\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/173", "ground_truth": "        val red = Color.red(value)\r\n        val green = Color.green(value)\r\n\r\n        return (red + blue + green) / 3f\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\colors\\ColorUtils.kt"}}
{"prompt": "\n import androidx.annotation.ColorInt\nimport android.widget.TextView\nimport android.view.View\nfun setImageColor(textView: TextView, @ColorInt color: Int?) {\r\n        textView.compoundDrawables.forEach {\r", "choices": [{"text": "it.setTint(color)\r\n        }\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/179", "ground_truth": "            it?.let { Colors.setImageColor(it, color) }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\CustomUiUtils.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.alerts.Alerts\nimport com.google.android.material.snackbar.Snackbar\nimport androidx.fragment.app.Fragment\nimport android.view.View\nfun snackbar(\r\n        fragment: Fragment,\r\n        text: String,\r\n        duration: Int = Snackbar.LENGTH_SHORT,\r\n        action: String? = null,\r\n        onAction: () -> Unit = {}\r\n    ): Snackbar {\r\n\r\n        val playBar =\r\n            fragment.view?.findViewWithTag<View>(fragment.getString(R.string.tag_play_bar))\r\n\r\n        val view = playBar ?: fragment.requireActivity().findViewById(R.id.bottom_navigation)\r\n\r\n        return Alerts.snackbar(\r\n            fragment,\r\n            view,\r\n            text,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/180", "ground_truth": "            duration,\r\n            action,\r\n            onAction\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\CustomUiUtils.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.qr.ui.ViewQRBottomSheet\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.show\nimport com.google.android.material.bottomsheet.BottomSheetDialogFragment\nimport androidx.fragment.app.Fragment\nimport android.view.View\nfun showQR(\r\n        fragment: Fragment,\r\n        title: String,\r\n        qr: String\r\n    ): BottomSheetDialogFragment {\r\n        val sheet = ViewQRBottomSheet(title, qr)\r", "choices": [{"text": "//        sheet.show(fragment.childFragmentManager, \"qr\")\r\n        fragment.show(sheet, \"qr\")\r\n        return sheet\r\n    }<file_sep>/app/src/main/java/com/kylecorry/trail_sense/tools/qr/ui/ViewQRBottomSheet.kt\npackage com.kylecorry.trail_sense.tools.qr.ui\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\nimport com.kylecorry."}], "metadata": {"task_id": "Trail-Sense/181", "ground_truth": "        sheet.show(fragment)\r\n        return sheet\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\CustomUiUtils.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.qr.ui.ScanQRBottomSheet\nimport com.kylecorry.trail_sense.R\nimport com.google.android.material.bottomsheet.BottomSheetDialogFragment\nimport androidx.fragment.app.Fragment\nfun scanQR(\r\n        fragment: Fragment,\r\n        title: String,\r\n        onScan: (text: String?) -> Boolean\r\n    ): BottomSheetDialogFragment {\r\n        val sheet = ScanQRBottomSheet(title, onScan)\r", "choices": [{"text": "//        sheet.show(fragment.requireFragmentManager(), \"scan_qr\")\r\n        return sheet\r\n    }<file_sep>/app/src/main/java/com/kylecorry/trail_sense/tools/qr/ui/ScanQRBottomSheet.kt\npackage com.kylecorry.trail_sense.tools.qr.ui\n\nimport android.content.Context\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Toast\nimport androidx.fragment.app.Fragment\nimport androidx"}], "metadata": {"task_id": "Trail-Sense/182", "ground_truth": "        sheet.show(fragment)\r\n        return sheet\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\CustomUiUtils.kt"}}
{"prompt": "\n import kotlin.coroutines.suspendCoroutine\nimport com.kylecorry.andromeda.fragments.AndromedaFragment\nimport androidx.fragment.app.Fragment\nimport android.util.Size\nimport android.net.Uri\nsuspend fun takePhoto(fragment: AndromedaFragment, size: Size? = null): Uri? =\r\n        suspendCoroutine { cont ->\r\n            takePhoto(fragment, size) {\r", "choices": [{"text": "//                cont.resume(it)\r\n                cont.resumeWith(Result.success(it))\r\n            }\r\n        }\n"}], "metadata": {"task_id": "Trail-Sense/183", "ground_truth": "                cont.resume(it)\r\n            }\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\CustomUiUtils.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.permissions.requestCamera\nimport com.kylecorry.trail_sense.shared.camera.PhotoImportBottomSheetFragment\nimport com.kylecorry.andromeda.fragments.AndromedaFragment\nimport androidx.fragment.app.Fragment\nimport android.util.Size\nimport android.net.Uri\nimport android.content.Context\nprivate fun takePhoto(\r\n        fragment: AndromedaFragment,\r\n        size: Size? = null,\r\n        onCapture: (uri: Uri?) -> Unit\r\n    ) {\r\n        fragment.requestCamera {\r\n            if (!it) {\r\n                onCapture(null)\r\n                return@requestCamera\r\n            }\r\n\r\n            val prefs = UserPreferences(fragment.requireContext()).camera\r\n\r\n            val sheet = PhotoImportBottomSheetFragment(size, prefs.useZeroShutterLag) { uri ->\r\n                onCapture(uri)\r", "choices": [{"text": "//                fragment.dismiss()\r\n            }\r\n            sheet.show(fragment.childFragmentManager, \"photo_import\")\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/184", "ground_truth": "            }\r\n\r\n            sheet.show(fragment)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\CustomUiUtils.kt"}}
{"prompt": "\n import java.time.LocalDateTime\nimport com.kylecorry.andromeda.pickers.Pickers\nimport android.content.Context\nfun pickDatetime(\r\n        context: Context,\r\n        use24Hours: Boolean,\r\n        default: LocalDateTime = LocalDateTime.now(),\r\n        onDatetimePick: (value: LocalDateTime?) -> Unit\r\n    ) {\r\n        Pickers.date(context, default.toLocalDate()) { date ->\r\n            if (date != null) {\r\n                Pickers.time(context, use24Hours, default.toLocalTime()) { time ->\r\n                    if (time != null) {\r\n                        onDatetimePick(LocalDateTime.of(date, time))\r\n                    } else {\r\n                        onDatetimePick(null)\r\n                    }\r\n                }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/185", "ground_truth": "            } else {\r\n                onDatetimePick(null)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\CustomUiUtils.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.views.list.ListItem\nimport com.kylecorry.andromeda.views.list.AndromedaListView\nimport com.kylecorry.andromeda.fragments.show\nimport com.kylecorry.andromeda.alerts.Alerts\nimport android.widget.TextView\nimport android.view.View\nimport android.content.Context\nfun showList(\r\n        context: Context,\r\n        title: String,\r\n        listItems: List<ListItem>,\r\n        emptyText: String? = null\r\n    ) {\r\n        val view = View.inflate(context, R.layout.view_list_dialog, null)\r\n        val list = view.findViewById<AndromedaListView>(R.id.list)\r\n        val empty = view.findViewById<TextView>(R.id.empty_text)\r\n\r\n        if (emptyText != null) {\r\n            empty.text = emptyText\r\n        }\r\n\r\n        list.setItems(listItems)\r\n\r\n        Alerts.dialog(\r\n            context,\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.views.list.ListItem\nimport com.kylecorry.andromeda.views.list.AndromedaListView\nimport com.kylecorry.andromeda.fragments.show\nimport com.kylecorry.andromeda.alerts.Alerts\nimport android.widget.TextView\nimport android.view.View\nimport android.content.Context\nfun showList(\r\n        context: Context,\r\n        title: String,\r\n        listItems: List<ListItem>,\r\n        emptyText: String? = null\r\n    ) {\r\n        val view = View.inflate(context, R.layout.view_list_dialog, null)\r\n        val list = view.findViewById<AndromedaListView>(R.id.list)\r\n        val empty = view.findViewById<TextView>(R.id.empty_text)\r\n\r\n        if (emptyText!= null) {\r\n            empty.text = emptyText\r\n        }\r\n\r\n        list.setItems(listItems)\r\n\r\n        Alerts.dialog(\r\n            context,\r\ntitle,\r\n            view\r\n        ) {\r\n            list.show()\r\n        }\r\n    }<file_sep>/app/src/main/java/com/kylecorry/trail_sense/navigation/ui/NavigationActivity.kt\npackage com.kylecorry.trail_sense.navigation.ui\n\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.Menu\nimport android.view.MenuItem\nimport android.view.View\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.appcompat.widget"}], "metadata": {"task_id": "Trail-Sense/186", "ground_truth": "            title,\r\n            contentView = view,\r\n            cancelText = null\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\CustomUiUtils.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.ui.Colors\nimport com.kylecorry.andromeda.core.system.Resources\nimport android.content.Context\nfun Resources.getCardinalDirectionColor(context: Context): Int {\r\n        val prefs = UserPreferences(context)\r\n        return if (prefs.useDynamicColors && prefs.useDynamicColorsOnCompass) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/187", "ground_truth": "            getPrimaryColor(context)\r\n        } else {\r\n            AppColor.Orange.color\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\CustomUiUtils.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.ui.Colors\nimport com.kylecorry.andromeda.core.system.Resources\nimport android.content.Context\nfun Resources.getPrimaryMarkerColor(context: Context): Int {\r\n        val prefs = UserPreferences(context)\r\n        return if (prefs.useDynamicColors && prefs.useDynamicColorsOnCompass) {\r", "choices": [{"text": "//            Colors.getPrimaryColor(context)\r\n            Colors.getPrimaryColor(context)\r\n        } else {\r\n            Colors.getPrimaryColor(context)\r\n        }\r\n    }<file_sep>/app/src/main/java/com/kylecorry/trail_sense/navigation/ui/NavigationActivity.kt\npackage com.kylecorry.trail_sense.navigation.ui\n\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.Menu\nimport android.view.MenuItem\nimport android.view.View\nimport android"}], "metadata": {"task_id": "Trail-Sense/188", "ground_truth": "            getPrimaryColor(context)\r\n        } else {\r\n            AppColor.Orange.color\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\CustomUiUtils.kt"}}
{"prompt": "\n import androidx.fragment.app.commit\nimport androidx.fragment.app.Fragment\nfun Fragment.replaceChildFragment(fragment: Fragment, containerId: Int) {\r\n        childFragmentManager.commit {\r", "choices": [{"text": "//            setCustomAnimations(R.anim.slide_in_right, R.anim.slide_out_left)\r\n            replace(containerId, fragment)\r\n            addToBackStack(null)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/190", "ground_truth": "            replace(containerId, fragment)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\CustomUiUtils.kt"}}
{"prompt": "\n import com.kylecorry.sol.math.Vector2\nfun <T> smooth(\r\n        data: List<T>,\r\n        smoothness: Float = 0.1f,\r\n        select: (index: Int, value: T) -> Vector2,\r\n        merge: (value: T, smoothed: Vector2) -> T\r\n    ): List<T> {\r\n        val smoothed = smooth(data.mapIndexed { index, value -> select(index, value) }, smoothness)\r\n        return data.zip(smoothed).map {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/192", "ground_truth": "            merge(it.first, it.second)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\data\\DataUtils.kt"}}
{"prompt": "\n import java.io.InputStream\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.coroutines.onIO\nsuspend fun read(stream: InputStream, location: Coordinate): List<Float> = onIO {\r\n        val pixel = getPixel(location)\r", "choices": [{"text": "//        val pixel = getPixel(Coordinate(100, 100))\r\n        val data = FloatArray(pixel.size)\r\n        pixel.getPixels(data, 0, pixel.width, 0, 0, pixel.width, pixel.height)\r\n        data\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/197", "ground_truth": "        val data = reader.getPixel(stream, pixel.x, pixel.y, true)\r\n        decoder(data)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\data\\GeographicImageSource.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport android.content.Context\nsuspend fun read(context: Context, filename: String, location: Coordinate): List<Float> = onIO {\r", "choices": [{"text": "val file = context.assets.open(filename)\r\nval size = file.available()\r\nval buffer = ByteArray(size)\r\nfile.read(buffer)\r\nfile.close()\r\nval result = ArrayList<Float>()\r\nval stream = ByteArrayInputStream(buffer)\r\nval reader = DataInputStream(stream)\r\nwhile (reader.available() > 0) {\r\n    result.add(reader.readFloat())\r\n}\r\nreader.close()\r\nresult\r\n}<file_sep>/app/src/main/java/com/kylecorry/sol"}], "metadata": {"task_id": "Trail-Sense/198", "ground_truth": "        val fileSystem = AssetFileSystem(context)\r\n        read(fileSystem.stream(filename), location)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\data\\GeographicImageSource.kt"}}
{"prompt": "\n fun hash(vararg values: Any?): Int {\r\n        var hash = 0\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/200", "ground_truth": "        for (value in values) {\r\n            hash = hash * 31 + (value?.hashCode() ?: 0)\r\n        }\r\n        return hash\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\data\\HashUtils.kt"}}
{"prompt": "\nvar state T\nvar hasChanges\n fun read(): T {\r", "choices": [{"text": "return state\r\n}\r\nfun write(newState: T) {\r\nstate = newState\r\nhasChanges = true\r\n}\r\nfun commit() {\r\nif (hasChanges) {\r\nstate = newState\r\nhasChanges = false\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/201", "ground_truth": "        hasChanges = false\r\n        return state\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\data\\TrackedState.kt"}}
{"prompt": "\n override fun execute() {\r\n        ifDebug {\r", "choices": [{"text": "//            println(\"execute\")\r\n        }\r\n        val result = try {\r\n            val result = executeImpl()\r\n            if (result!= null) {\r\n                ifDebug {\r\n//                    println(\"executeImpl result: $result\")\r\n                }\r\n                result\r\n            } else {\r\n                ifDebug {\r\n//                    println(\"executeImpl result is null\")\r\n                }\r\n                null\r\n            }\r\n        } catch (e: Throwable) {\r\n            ifDebug {\r\n//                println(\"executeImpl exception: $e\")\r\n            }\r\n            null\r\n        }\r\n        if (result!= null) {\r\n            ifDebug {\r\n//                println(\"execute"}], "metadata": {"task_id": "Trail-Sense/203", "ground_truth": "            tryOrLog {\r\n                executeDebug()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\debugging\\DebugCommand.kt"}}
{"prompt": "\n fun ifDebug(fn: () -> Unit){\r\n    if (isDebug()){\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/205", "ground_truth": "        tryOrLog(fn)\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\debugging\\DebugExtensions.kt"}}
{"prompt": "\nval startTimes\nval endTimes\n fun start(tag: String) {\r", "choices": [{"text": "startTimes[tag] = System.currentTimeMillis()\r\n}\r\nfun end(tag: String) {\r\nendTimes[tag] = System.currentTimeMillis()\r\n}\r\nfun printTime(tag: String) {\r\nprintln(\"Time taken for $tag is ${endTimes[tag] - startTimes[tag]} ms\")\r\n}\r\n}\r\nfun main() {\r\nval timer = Timer()\r\ntimer.start(\"A\")\r\nThread.sleep(1000)\r\ntimer.end(\"A\")\r\ntimer.printTime(\"A"}], "metadata": {"task_id": "Trail-Sense/207", "ground_truth": "        val startTime = System.nanoTime()\r\n        startTimes[tag] = startTime\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\debugging\\Perf.kt"}}
{"prompt": "\nval startTimes\nval endTimes\n fun end(tag: String) {\r", "choices": [{"text": "//    val end = System.currentTimeMillis()\r\n//    val time = end - startTimes[tag]!!\r\n//    println(\"Time for $tag: $time ms\")\r\n//    endTimes[tag] = end\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/208", "ground_truth": "        val endTime = System.nanoTime()\r\n        endTimes[tag] = endTime\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\debugging\\Perf.kt"}}
{"prompt": "\n inline fun trace(tag: String, block: () -> Unit) {\r\n        start(tag)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/209", "ground_truth": "        block()\r\n        end(tag)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\debugging\\Perf.kt"}}
{"prompt": "\nval startTimes\nval endTimes\n fun clear() {\r", "choices": [{"text": "startTimes.clear()\r\nendTimes.clear()\r\n}\r\nfun add(start: Long, end: Long) {\r\nstartTimes.add(start)\r\nendTimes.add(end)\r\n}\r\nfun getStart(index: Int): Long {\r\nreturn startTimes[index]\r\n}\r\nfun getEnd(index: Int): Long {\r\nreturn endTimes[index]\r\n}\r\nfun getSize(): Int {\r\nreturn startTimes.size\r\n}\r\n}\r\nclass TimeRange {\r\nval start"}], "metadata": {"task_id": "Trail-Sense/210", "ground_truth": "        startTimes.clear()\r\n        endTimes.clear()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\debugging\\Perf.kt"}}
{"prompt": "\n private fun getTime(tag: String): Long? {\r\n        val start = startTimes[tag] ?: return null\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/212", "ground_truth": "        val end = endTimes[tag] ?: return null\r\n        return end - start\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\debugging\\Perf.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.settings.infrastructure.IDeclinationPreferences\nimport com.kylecorry.andromeda.sense.location.IGPS\nfun getDeclinationStrategy(prefs: IDeclinationPreferences, gps: IGPS? = null): IDeclinationStrategy {\r\n        return if (gps == null || !prefs.useAutoDeclination) {\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.settings.infrastructure.IDeclinationPreferences\nimport com.kylecorry.andromeda.sense.location.IGPS\nfun getDeclinationStrategy(prefs: IDeclinationPreferences, gps: IGPS? = null): IDeclinationStrategy {\r\n        return if (gps == null ||!prefs.useAutoDeclination) {\r\n//            DeclinationStrategy.None()\r\n            DeclinationStrategy.None()\r\n        } else {\r\n            DeclinationStrategy.GPS(gps)\r\n        }\r\n    }<file_sep>/app/src/main/java/com/kylecorry/trail_sense/navigation/infrastructure/INavigationPreferences.kt\npackage com.kylecorry.trail_sense.navigation.infrastructure\n\nimport com.kylecorry.trail_sense.shared.UserPreferences\n\ninterface INavigationPreferences : UserPreferences {\n    var useNavigation: Boolean\n    var useNavigationSpeed: Boolean\n    var useNavigationDeclination: Boolean"}], "metadata": {"task_id": "Trail-Sense/213", "ground_truth": "            OverrideDeclinationStrategy(prefs)\r\n        } else {\r\n            GPSDeclinationStrategy(gps)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\declination\\DeclinationFactory.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.DistanceUnits\nimport com.kylecorry.sol.units.Distance\nfun Distance.toRelativeDistance(threshold: Float = 1000f): Distance {\r\n    val metric = units.isMetric()\r\n    val baseDistance =\r\n        if (metric) convertTo(DistanceUnits.Meters) else convertTo(DistanceUnits.Feet)\r\n    val newUnits = if (baseDistance.distance >= threshold) {\r\n        if (metric) DistanceUnits.Kilometers else DistanceUnits.Miles\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/215", "ground_truth": "    } else {\r\n        if (metric) DistanceUnits.Meters else DistanceUnits.Feet\r\n    }\r\n    return convertTo(newUnits)\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\DistanceExtensions.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.DistanceUnits\nimport com.kylecorry.sol.units.Distance\nfun DistanceUnits.isMetric(): Boolean {\r\n    return listOf(\r", "choices": [{"text": "DistanceUnits.METERS,\r\nDistanceUnits.KILOMETERS,\r\nDistanceUnits.MILES,\r\nDistanceUnits.YARDS,\r\nDistanceUnits.FEET,\r\nDistanceUnits.INCHES,\r\nDistanceUnits.NAUTICAL_MILES,\r\nDistanceUnits.MILLIMETERS,\r\nDistanceUnits.CENTIMETERS,\r\nDistanceUnits.DECIMETERS,\r\nDistanceUnits.DECIMETERS,\r\nDistanceUnits.DECIMETERS,\r\nDistanceUnits.DECIMETERS,\r\nDistanceUnits"}], "metadata": {"task_id": "Trail-Sense/216", "ground_truth": "        DistanceUnits.Kilometers,\r\n        DistanceUnits.Meters,\r\n        DistanceUnits.Centimeters\r\n    ).contains(this)\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\DistanceExtensions.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.DistanceUnits\nimport com.kylecorry.sol.units.Distance\nfun DistanceUnits.isLarge(): Boolean {\r", "choices": [{"text": "return this == DistanceUnits.MILES || this == DistanceUnits.KILOMETERS\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/217", "ground_truth": "    // If it is greater than 100 meters per unit, then it is large\r\n    return meters > 100f\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\DistanceExtensions.kt"}}
{"prompt": "\n fun probability(chance: Float): Probability {\r\n    return when {\r\n        chance < 0.05f -> {\r\n            Probability.Never\r\n        }\r\n        chance < 0.25f -> {\r\n            Probability.Low\r\n        }\r\n        chance < 0.75f -> {\r\n            Probability.Moderate\r\n        }\r\n        chance < 0.95f -> {\r\n            Probability.High\r\n        }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/218", "ground_truth": "        else -> {\r\n            Probability.Always\r\n        }\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\domain\\Probability.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.alerts.Alerts\nimport android.content.Context\ninline fun Alerts.withCancelableLoading(\r\n    context: Context,\r\n    title: String,\r\n    cancelText: CharSequence = context.getString(android.R.string.cancel),\r\n    noinline onCancel: () -> Unit,\r\n    action: () -> Unit\r\n) {\r\n    val loadingAlert = cancelableLoading(context, title, cancelText, onCancel)\r\n    try {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/219", "ground_truth": "        action()\r\n    } finally {\r\n        loadingAlert.dismiss()\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\extensions\\AndromedaExtensions.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.receivers.ServiceRestartAlerter\nimport android.util.Log\nimport android.os.Build\nimport android.content.Context\nimport android.app.ForegroundServiceStartNotAllowedException\ninline fun tryStartForegroundOrNotify(context: Context, action: () -> Unit) {\r\n    try {\r\n        action()\r\n    } catch (e: Exception) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S && e is ForegroundServiceStartNotAllowedException) {\r\n            ServiceRestartAlerter(context.applicationContext).alert()\r\n            Log.d(\"tryStartForegroundOrNotify\", \"Cannot start service\")\r", "choices": [{"text": "       } else {\r\n            throw e\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/221", "ground_truth": "        } else {\r\n            throw e\r\n        }\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\extensions\\AndromedaExtensions.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport androidx.fragment.app.Fragment\nimport androidx.annotation.StringRes\nfun Fragment.getMarkdown(@StringRes resId: Int, vararg formatArgs: Any?): CharSequence {\r", "choices": [{"text": "return getMarkdown(getString(resId), *formatArgs)\r\n}\r\nfun Fragment.getMarkdown(text: String, vararg formatArgs: Any?): CharSequence {\r\nreturn Markdown.parse(text).format(formatArgs)\r\n}\r\nfun Fragment.getMarkdown(text: String, vararg formatArgs: Any?, @ColorInt color: Int): CharSequence {\r\nreturn Markdown.parse(text).format(formatArgs).color(color)\r\n}\r\nfun Fragment.getMarkdown(text: String, vararg formatArgs: Any?, @ColorInt color:"}], "metadata": {"task_id": "Trail-Sense/222", "ground_truth": "    val service = MarkdownService(requireContext())\r\n    return service.toMarkdown(getString(resId, *formatArgs))\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\extensions\\FragmentExtensions.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.preferences.IPreferences\nfun IPreferences.putOrRemoveFloat(key: String, value: Float?) {\r\n    if (value == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/223", "ground_truth": "        remove(key)\r\n    } else {\r\n        putFloat(key, value)\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\extensions\\PreferenceExtensions.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.preferences.IPreferences\nfun IPreferences.putOrRemoveCoordinate(key: String, value: Coordinate?) {\r\n    if (value == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/224", "ground_truth": "        remove(key)\r\n    } else {\r\n        putCoordinate(key, value)\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\extensions\\PreferenceExtensions.kt"}}
{"prompt": "\n import com.kylecorry.sol.science.geology.Geofence\nimport com.kylecorry.sol.science.geology.CoordinateBounds\nfun CoordinateBounds.Companion.from(geofences: List<Geofence>): CoordinateBounds {\r\n    val bounds = geofences.map { from(it) }\r\n    val corners = bounds.flatMap {\r\n        listOf(\r\n            it.northEast,\r\n            it.northWest,\r\n            it.southEast,\r\n            it.southWest\r", "choices": [{"text": "       )\r\n    }\r\n    return from(corners)\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/225", "ground_truth": "        )\r\n    }\r\n\r\n    return from(corners)\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\extensions\\SolExtensions.kt"}}
{"prompt": "\n import com.kylecorry.sol.math.SolMath.roundNearest\nfun getValuesBetween(min: Float, max: Float, divisor: Float): List<Float> {\r\n    val values = mutableListOf<Float>()\r\n    val start = min.roundNearest(divisor)\r\n    var i = start\r\n    while (i <= max) {\r\n        if (i >= min) {\r\n            values.add(i)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/226", "ground_truth": "        }\r\n        i += divisor\r\n    }\r\n    return values\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\extensions\\SolExtensions.kt"}}
{"prompt": "\n import com.kylecorry.sol.math.Range\nfun <T : Comparable<T>> List<T>.range(): Range<T>? {\r\n    val start = minOrNull() ?: return null\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/227", "ground_truth": "    val end = maxOrNull() ?: return null\r\n    return Range(start, end)\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\extensions\\SolExtensions.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.topics.generic.ITopic\nfun <T: Any> ITopic<T>.getOrNull(): T? {\r\n    val current = value\r\n    return if (current.isPresent) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/228", "ground_truth": "        current.get()\r\n    } else {\r\n        null\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\extensions\\TopicExtensions.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.signal.ICellSignalSensor\nimport com.kylecorry.andromeda.signal.CellNetworkQuality\nfun ICellSignalSensor.networkQuality(): CellNetworkQuality? {\r", "choices": [{"text": "return when (this) {\r\nis CellNetworkQuality -> this\r\nelse -> null\r\n}\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/230", "ground_truth": "    val signal = signals.maxByOrNull { it.strength }\r\n    return signal?.let { CellNetworkQuality(it.network, it.quality) }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Extensions.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.math.geometry.Size\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nfun PixelCoordinate.rotateInRect(\r\n    angle: Float,\r\n    currentSize: Size,\r\n    newSizeOverride: Size? = null\r\n): PixelCoordinate {\r", "choices": [{"text": "//    val newSize = newSizeOverride?: currentSize\r\n    val newSize = newSizeOverride?: Size(width, height)\r\n    val newX = (newSize.width / 2f) + (newSize.width / 2f) * Math.cos(angle) - (newSize.height / 2f) * Math.sin(angle)\r\n    val newY = (newSize.height / 2f) + (newSize.width / 2f) * Math.sin(angle) + (newSize.height / 2f) * Math.cos("}], "metadata": {"task_id": "Trail-Sense/231", "ground_truth": "    val vec = Vector2(x, y).rotateInRect(angle, currentSize, newSizeOverride)\r\n    return PixelCoordinate(vec.x, vec.y)\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Extensions.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.math.geometry.Size\nimport com.kylecorry.sol.math.Vector2\nfun Vector2.rotateInRect(angle: Float, currentSize: Size, newSizeOverride: Size? = null): Vector2 {\r\n    val newSize = newSizeOverride ?: currentSize.rotate(angle)\r\n    return minus(Vector2(currentSize.width / 2f, currentSize.height / 2f))\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.math.geometry.Size\nimport com.kylecorry.sol.math.Vector2\nfun Vector2.rotateInRect(angle: Float, currentSize: Size, newSizeOverride: Size? = null): Vector2 {\r\n    val newSize = newSizeOverride?: currentSize.rotate(angle)\r\n    return minus(Vector2(currentSize.width / 2f, currentSize.height / 2f))\r\n}<file_sep>/app/src/main/java/com/kylecorry/trail_sense/shared/sensors/SensorService.kt\npackage com.kylecorry.trail_sense.shared.sensors\r\n\r\nimport android.content.Context\r\nimport android.hardware.Sensor\r\nimport android.hardware.SensorEvent\r\nimport android.hardware.SensorEventListener\r\nimport android.hardware.SensorManager\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport com.kylecorry.trail_sense.shared.sensors.SensorService.Sensor"}], "metadata": {"task_id": "Trail-Sense/232", "ground_truth": "        .rotate(angle)\r\n        .plus(Vector2(newSize.width / 2f, newSize.height / 2f))\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Extensions.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.math.geometry.Rectangle\nimport android.view.View\nfun View.getViewBounds(rotation: Float = 0f): Rectangle {\r\n    val rectangle = Rectangle(\r\n        0f,\r\n        height.toFloat(),\r\n        width.toFloat(),\r\n        0f,\r\n    )\r\n\r\n    if (rotation != 0f) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/233", "ground_truth": "        return rectangle.rotate(rotation)\r\n    }\r\n\r\n    return rectangle\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Extensions.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.math.geometry.Rectangle\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\nfun ICanvasDrawer.getBounds(rotation: Float = 0f): Rectangle {\r\n    val rectangle = Rectangle(\r\n        0f,\r\n        canvas.height.toFloat(),\r\n        canvas.width.toFloat(),\r\n        0f,\r\n    )\r\n\r\n    if (rotation != 0f) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/234", "ground_truth": "        return rectangle.rotate(rotation)\r\n    }\r\n\r\n    return rectangle\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Extensions.kt"}}
{"prompt": "\n fun Enum<*>.readableName(): String {\r", "choices": [{"text": "-    return this.name.replace(\"_\", \" \").toLowerCase().capitalize()\r\n+    return this.name.replace(\"_\", \" \").toLowerCase(Locale.getDefault()).capitalize(Locale.getDefault())\r\n }\r\n \r\n fun Enum<*>.readableName(locale: Locale): String {\r\n-    return this.name.replace(\"_\", \" \").toLowerCase().capitalize()\r\n+    return this.name.replace(\"_\", \" \").toLowerCase(locale).capitalize(locale)\r\n }\r\n \r\n fun Enum<*>.readableName(locale: Locale, capitalize: Boolean): String {\r\n-    return this"}], "metadata": {"task_id": "Trail-Sense/235", "ground_truth": "    return name.map { if (it.isUpperCase()) \" $it\" else it }\r\n        .joinToString(\"\").trim()\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Extensions.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.canvas.ICanvasDrawer\nfun ICanvasDrawer.text(str: String, x: Float, y: Float, lineSpacing: Float) {\r\n    val lines = str.split(\"\\n\")\r\n    var lastHeight = 0f\r\n    var lastY = y\r\n    lines.forEachIndexed { index, line ->\r\n        val newY = lastY + lastHeight + if (index == 0) 0f else lineSpacing\r", "choices": [{"text": "//        drawText(line, x, newY)\r\n        lastHeight = drawText(line, x, newY)\r\n        lastY = newY\r\n    }\r\n}<file_sep>/app/src/main/java/com/kylecorry/trail_sense/navigation/ui/NavigationActivity.kt\npackage com.kylecorry.trail_sense.navigation.ui\n\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Button\nimport"}], "metadata": {"task_id": "Trail-Sense/236", "ground_truth": "        lastY = newY\r\n        lastHeight = textHeight(line)\r\n        text(line, x, newY)\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Extensions.kt"}}
{"prompt": "\n inline fun List<Float>.forEachLine(action: (x1: Float, y1: Float, x2: Float, y2: Float) -> Unit) {\r\n    for (i in indices step 4) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/239", "ground_truth": "        action(this[i], this[i + 1], this[i + 2], this[i + 3])\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Extensions.kt"}}
{"prompt": "\n import kotlin.collections.set\nimport com.kylecorry.trail_sense.R\nimport androidx.annotation.ColorInt\nimport android.view.Window\nfun Window.setNavigationBarColorCompat(@ColorInt color: Int) {\r\n    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {\r", "choices": [{"text": "       this.navigationBarColor = color\r    }\r}\r\rfun Window.setNavigationBarColor(color: Int) {\r    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {\r        this.navigationBarColor = color\r    }\r}\r\rfun Window.setNavigationBarColor(color: Int, dark: Boolean) {\r    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {\r        this.navigationBarColor = color\r       "}], "metadata": {"task_id": "Trail-Sense/240", "ground_truth": "        navigationBarColor = color\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Extensions.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.tryOrDefault\nfun Float.safeRoundToInt(default: Int = 0): Int {\r\n    return tryOrDefault(default) {\r\n        if (isNaN() || isInfinite()) {\r\n            default\r", "choices": [{"text": "       } else {\r\n            roundToInt()\r\n        }\r\n    }\r\n}<file_sep>/app/src/main/java/com/kylecorry/trail_sense/shared/sensors/SensorService.kt\npackage com.kylecorry.trail_sense.shared.sensors\n\nimport android.content.Context\nimport android.hardware.Sensor\nimport android.hardware.SensorEvent\nimport android.hardware.SensorEventListener\nimport android.hardware.SensorManager\nimport com.kylecorry.andromeda.core.math.MathUtils\nimport com.kylecorry.and"}], "metadata": {"task_id": "Trail-Sense/241", "ground_truth": "        } else {\r\n            roundToInt()\r\n        }\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Extensions.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.tryOrDefault\nfun Double.safeRoundToInt(default: Int = 0): Int {\r\n    return tryOrDefault(default) {\r\n        if (isNaN() || isInfinite()) {\r\n            default\r", "choices": [{"text": "       } else {\r\n            roundToInt()\r\n        }\r\n    }\r\n}<file_sep>/app/src/main/java/com/kylecorry/trail_sense/shared/sensors/SensorService.kt\npackage com.kylecorry.trail_sense.shared.sensors\n\nimport android.content.Context\nimport android.hardware.Sensor\nimport android.hardware.SensorEvent\nimport android.hardware.SensorEventListener\nimport android.hardware.SensorManager\nimport com.kylecorry.andromeda.core.math.MathUtils\nimport com.kylecorry.and"}], "metadata": {"task_id": "Trail-Sense/242", "ground_truth": "        } else {\r\n            roundToInt()\r\n        }\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Extensions.kt"}}
{"prompt": "\n import java.time\nimport com.kylecorry.trail_sense.R\nfun formatRelativeDateTime(\r\n        time: ZonedDateTime,\r\n        abbreviateMonth: Boolean = false,\r\n        includeSeconds: Boolean = true,\r\n        includeMinutes: Boolean = true\r\n    ): String {\r\n        return formatRelativeDate(\r\n            time.toLocalDate(),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/244", "ground_truth": "            abbreviateMonth\r\n        ) + \" \" + formatTime(time.toLocalTime(), includeSeconds, includeMinutes)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\FormatService.kt"}}
{"prompt": "\n import java.time.format.TextStyle\nimport com.kylecorry.trail_sense.R\nfun formatMonth(\r\n        month: Month,\r\n        short: Boolean = false\r\n    ): String {\r\n        return month.getDisplayName(\r\n            if (short) TextStyle.SHORT else TextStyle.FULL,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/246", "ground_truth": "            Locale.getDefault()\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\FormatService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nfun formatElectricalCapacity(capacity: Float): String {\r\n        return strings.getString(\r\n            R.string.battery_capacity_format,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/258", "ground_truth": "            DecimalFormatter.format(capacity, 0)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\FormatService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nfun formatCurrent(current: Float, decimalPlaces: Int = 0): String {\r\n        return strings.getString(\r\n            R.string.current_format,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/259", "ground_truth": "            DecimalFormatter.format(current, decimalPlaces)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\FormatService.kt"}}
{"prompt": "\n import java.time\nimport com.kylecorry.sol.units\nfun sortDistanceUnits(\r\n        units: List<DistanceUnits>,\r\n        metric: Boolean = prefs.baseDistanceUnits == DistanceUnits.Meters\r\n    ): List<DistanceUnits> {\r\n        // TODO: Secondary sort by size\r\n        val metricUnits =\r\n            listOf(DistanceUnits.Centimeters, DistanceUnits.Meters, DistanceUnits.Kilometers)\r\n        return units.sortedBy {\r\n            if (metric) {\r\n                if (metricUnits.contains(it)) 0 else 1\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/264", "ground_truth": "            } else {\r\n                if (metricUnits.contains(it)) 1 else 0\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\FormatService.kt"}}
{"prompt": "\n import com.kylecorry.sol.units\nfun sortWeightUnits(\r\n        units: List<WeightUnits>,\r\n        metric: Boolean = prefs.weightUnits == WeightUnits.Kilograms\r\n    ): List<WeightUnits> {\r\n        // TODO: Secondary sort by size\r\n        val metricUnits =\r\n            listOf(WeightUnits.Grams, WeightUnits.Kilograms)\r\n        return units.sortedBy {\r\n            if (metric) {\r\n                if (metricUnits.contains(it)) 0 else 1\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/265", "ground_truth": "            } else {\r\n                if (metricUnits.contains(it)) 1 else 0\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\FormatService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport androidx.annotation.DrawableRes\n @DrawableRes\r\n    fun getCompassReferenceIcon(isTrueNorth: Boolean = prefs.compass.useTrueNorth): Int {\r\n        return if (isTrueNorth) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/272", "ground_truth": "            R.drawable.ic_star\r\n        } else {\r\n            R.drawable.ic_tool_metal_detector\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\FormatService.kt"}}
{"prompt": "\n import android.content.Context\n @Synchronized\r\n        fun getInstance(context: Context): FormatService {\r\n            if (instance == null) {\r\n                instance = FormatService(context.applicationContext)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/273", "ground_truth": "            }\r\n            return instance!!\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\FormatService.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.andromeda.core.coroutines.onIO\nfun refresh(resetScroll: Boolean = false) {\r\n        scope.launch {\r\n            runner.replace {\r\n                val items = onIO {\r\n                    augment(loader.load(query, root?.id))\r\n                }\r\n                onMain {\r", "choices": [{"text": "//                    if (resetScroll) {\r\n//                        adapter.reset()\r\n//                    }\r\n                    adapter.replace(items)\r\n                }\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/275", "ground_truth": "                    onChange(root, items, resetScroll)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\lists\\GroupListManager.kt"}}
{"prompt": "\n fun search(query: CharSequence?) {\r", "choices": [{"text": "//    val query = query.toString()\r\n//    val url = \"https://api.github.com/search/repositories?q=$query&sort=stars\"\r\n//    val request = Request.Builder().url(url).build()\r\n//    client.newCall(request).enqueue(object : Callback {\r\n//        override fun onFailure(call: Call, e: IOException) {\r\n//            e.printStackTrace()\r\n//        }\r\n//\r\n//        override fun onResponse(call: Call, response: Response) {\r\n//           "}], "metadata": {"task_id": "Trail-Sense/276", "ground_truth": "        this.query = query?.toString()\r\n        refresh(true)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\lists\\GroupListManager.kt"}}
{"prompt": "\nval root T?\nvar _root T?\nvar query String?\n fun clear(resetRoot: Boolean = true) {\r\n        if (resetRoot) {\r\n            _root = null\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/277", "ground_truth": "        }\r\n        onChange(root, emptyList(), true)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\lists\\GroupListManager.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.kylecorry.andromeda.core.coroutines.onIO\nprivate fun loadGroup(id: Long) {\r\n        scope.launch {\r\n            _root = onIO { loader.getGroup(id) }\r", "choices": [{"text": "//            _root = loader.getGroup(id)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/278", "ground_truth": "            refresh(true)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\lists\\GroupListManager.kt"}}
{"prompt": "\n fun open(groupId: Long?) {\r\n        if (groupId == null) {\r\n            _root = null\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/279", "ground_truth": "            refresh(true)\r\n        } else {\r\n            loadGroup(groupId)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\lists\\GroupListManager.kt"}}
{"prompt": "\nval root T?\nvar _root T?\nvar query String?\n fun up(): Boolean {\r\n        if (_root == null) {\r\n            return false\r\n        }\r\n        val parent = _root?.parentId\r\n        if (parent == null) {\r\n            _root = null\r\n            refresh(true)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/280", "ground_truth": "        } else {\r\n            loadGroup(parent)\r\n        }\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\lists\\GroupListManager.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.grouping.Groupable\nfun <T : Groupable> GroupListManager<T>.bind(view: com.kylecorry.trail_sense.shared.views.SearchView) {\r\n    view.setOnSearchListener {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/281", "ground_truth": "        this.search(it)\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\lists\\GroupListManagerExtensions.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.grouping.Groupable\nimport com.kylecorry.andromeda.views.list.ListItemMapper\nimport com.kylecorry.andromeda.views.list.AndromedaListView\nimport com.kylecorry.andromeda.core.tryOrLog\nimport android.widget.TextView\nfun <T : Groupable> GroupListManager<T>.bind(\r\n    list: AndromedaListView,\r\n    title: TextView,\r\n    mapper: ListItemMapper<T>,\r\n    titleProvider: (root: T?) -> String\r\n) {\r\n    onChange = { root, items, rootChanged ->\r\n        tryOrLog {\r\n            list.setItems(items, mapper)\r\n            if (rootChanged) {\r\n                list.scrollToPosition(0, false)\r", "choices": [{"text": "//                list.setSelection(0)\r\n            }\r\n            title.text = titleProvider(root)\r\n        }\r\n    }\r\n}<file_sep>/app/src/main/java/com/kylecorry/trail_sense/shared/sensors/SensorManager.kt\npackage com.kylecorry.trail_sense.shared.sensors\r\n\r\nimport android.content.Context\r\nimport android.hardware.Sensor\r\nimport android.hardware.SensorEvent\r\nimport android.hardware.SensorEventListener\r\nimport android.hardware.SensorManager\r\nimport com.kylecorry.androme"}], "metadata": {"task_id": "Trail-Sense/282", "ground_truth": "            }\r\n            title.text = titleProvider(root)\r\n        }\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\lists\\GroupListManagerExtensions.kt"}}
{"prompt": "\n suspend fun delete(group: T) {\r\n        if (!group.isGroup){\r\n            deleteItems(listOf(group))\r\n            return\r\n        }\r\n\r\n        val children = loader.getChildren(group.id, 1)\r\n\r\n        // Delete items\r\n        val items = children.filterNot { it.isGroup }\r\n        deleteItems(items)\r\n\r\n        // Delete groups\r\n        val groups = children.filter { it.isGroup }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/284", "ground_truth": "        groups.forEach { delete(it) }\r\n\r\n        // Delete self\r\n        deleteGroup(group)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\persistence\\GroupDeleter.kt"}}
{"prompt": "\n suspend fun sort(items: List<T>): List<T> {\r\n        val values = items.map { mapper.map(it) }\r\n\r\n        return if (ascending) {\r\n            items.zip(values)\r\n                .sortedBy {\r\n                    it.second\r\n                }\r\n                .map { it.first }\r\n        } else {\r\n            items.zip(values)\r\n                .sortedByDescending {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/286", "ground_truth": "                    it.second\r\n                }\r\n                .map { it.first }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\grouping\\sort\\GroupSort.kt"}}
{"prompt": "\n import android.content.Context\n @Synchronized\r\n        fun getInstance(context: Context): HapticSubsystem {\r\n            if (instance == null) {\r\n                instance = HapticSubsystem(context.applicationContext)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/287", "ground_truth": "            }\r\n            return instance!!\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\haptics\\HapticSubsystem.kt"}}
{"prompt": "\n import java.time.Instant\nimport java.time.Duration\nfun getValue(time: Instant, threshold: Duration): Boolean {\r\n        synchronized(lock) {\r\n            if (lastTime == null) {\r\n                lastTime = time\r\n                lastReturnValue = !lastReturnValue\r\n                return lastReturnValue\r\n            }\r\n\r\n            if (Duration.between(lastTime, time) >= threshold) {\r\n                lastTime = time\r\n                lastReturnValue = !lastReturnValue\r\n                return lastReturnValue\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/288", "ground_truth": "            }\r\n\r\n            return lastReturnValue\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\hooks\\FrequencyHookTrigger.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.units.Coordinate\nfun distance(\r\n        name: String,\r\n        location: Coordinate,\r\n        threshold: Distance,\r\n        highAccuracy: Boolean = true\r\n    ): Boolean {\r\n        val conditional = synchronized(distanceLock) {\r\n            distanceTriggers.getOrPut(name) { DistanceHookTrigger() }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/289", "ground_truth": "        }\r\n        return conditional.getValue(location, threshold, highAccuracy)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\hooks\\HookTriggers.kt"}}
{"prompt": "\n import java.time.Duration\nfun frequency(name: String, threshold: Duration): Boolean {\r\n        val conditional = synchronized(frequencyLock) {\r\n            frequencyTriggers.getOrPut(name) { FrequencyHookTrigger() }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/290", "ground_truth": "        }\r\n        return conditional.getValue(Instant.now(), threshold)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\hooks\\HookTriggers.kt"}}
{"prompt": "\n fun predicate(\r\n        name: String,\r\n        behavior: PredicateHookTrigger.TriggerBehavior,\r\n        predicate: () -> Boolean\r\n    ): Boolean {\r\n        val conditional = synchronized(predicateLock) {\r\n            predicateTriggers.getOrPut(name) { PredicateHookTrigger() }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/291", "ground_truth": "        }\r\n        return conditional.getValue(behavior, predicate)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\hooks\\HookTriggers.kt"}}
{"prompt": "\n override suspend fun export(data: List<List<String>>, filename: String): Boolean {\r\n        val uri = uriPicker.create(filename, \"text/csv\") ?: return false\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/294", "ground_truth": "        val csvString = CSVConvert.toCSV(data)\r\n        return uriService.write(uri, csvString)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\io\\CsvExportService.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.coroutines.onIO\noverride suspend fun execute() = onIO {\r", "choices": [{"text": "//    val result = api.getWeather(lat, lon)\r\n//    val weather = result.weather.first()\r\n//    val icon = weather.icon\r\n//    val description = weather.description\r\n//    val temp = result.main.temp\r\n//    val tempMin = result.main.tempMin\r\n//    val tempMax = result.main.tempMax\r\n//    val humidity = result.main.humidity\r\n//    val pressure = result.main.pressure\r\n//    val windSpeed = result.wind.speed\r\n"}], "metadata": {"task_id": "Trail-Sense/295", "ground_truth": "        val files = FileSubsystem.getInstance(context)\r\n        files.clearTemp()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\io\\DeleteTempFilesCommand.kt"}}
{"prompt": "\n import java.io.OutputStream\nimport java.io.FileOutputStream\nimport java.io.File\nimport com.kylecorry.trail_sense.tools.maps.infrastructure.ImageSaver\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport android.graphics.Bitmap\nimport android.content.Context\nsuspend fun save(\r\n        path: String,\r\n        bitmap: Bitmap,\r\n        quality: Int = 90,\r\n        recycleOnSave: Boolean = false\r\n    ) = onIO {\r\n        try {\r\n            @Suppress(\"BlockingMethodInNonBlockingContext\")\r\n            FileOutputStream(get(path, create = true)).use { out ->\r\n                ImageSaver().save(bitmap, out, quality)\r\n            }\r\n        } finally {\r", "choices": [{"text": "//            if (recycleOnSave) {\r\n//                bitmap.recycle()\r\n//            }\r\n        }\r\n    }\r\n\r\nsuspend fun get(path: String, create: Boolean = false): File {\r\n    return onIO {\r\n        val file = File(path)\r\n        if (create &&!file.exists()) {\r\n            file.createNewFile()\r\n        }\r\n        file\r\n    }\r\n}\r\n\r\nsuspend fun get(path: String, create: Boolean = false, context: Context): File {\r\n    return onIO {\r\n        val file = File(context.filesDir, path)\r\n        if (create"}], "metadata": {"task_id": "Trail-Sense/297", "ground_truth": "            if (recycleOnSave) {\r\n                bitmap.recycle()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\io\\FileSubsystem.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.coroutines.onIO\nsuspend fun rename(\r\n        fromPath: String,\r\n        toPath: String\r\n    ): Boolean = onIO {\r", "choices": [{"text": "-        val from = File(fromPath)\r\n-        val to = File(toPath)\r\n-        if (from.exists() && from.isFile) {\r\n-            from.renameTo(to)\r\n-            true\r\n-        } else {\r\n-            false\r\n-        }\r\n+        val from = File(fromPath)\r\n+        val to = File(toPath)\r\n+        if (from.exists() && from.isFile) {\r\n+            from.renameTo(to)\r\n+            true"}], "metadata": {"task_id": "Trail-Sense/298", "ground_truth": "        val renamed = get(toPath)\r\n        get(fromPath).renameTo(renamed)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\io\\FileSubsystem.kt"}}
{"prompt": "\n import java.util\nimport com.kylecorry.andromeda.core.tryOrDefault\nimport android.util.Size\nfun imageSize(path: String): Size {\r\n        return tryOrDefault(Size(0, 0)) {\r", "choices": [{"text": "val options = BitmapFactory.Options()\r\noptions.inJustDecodeBounds = true\r\nBitmapFactory.decodeFile(path, options)\r\nSize(options.outWidth, options.outHeight)\r\n        }\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/299", "ground_truth": "            val file = get(path)\r\n            BitmapUtils.getBitmapSize(file.path) ?: Size(0, 0)\r\n        }\r\n\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\io\\FileSubsystem.kt"}}
{"prompt": "\n import java.io.File\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.andromeda.files.FileSaver\nimport android.webkit.MimeTypeMap\nimport android.net.Uri\nsuspend fun copyToLocal(uri: Uri, directory: String): File? = onIO {\r\n        val type = context.contentResolver.getType(uri)\r\n        val extension = MimeTypeMap.getSingleton().getExtensionFromMimeType(type)\r\n        val filename = \"$directory/${UUID.randomUUID()}.$extension\"\r\n        val file = get(filename, true)\r\n        val stream = stream(uri) ?: return@onIO null\r\n\r\n        try {\r\n            val saver = FileSaver()\r\n            saver.save(stream, file)\r\n        } catch (e: Exception) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/300", "ground_truth": "            return@onIO null\r\n        }\r\n\r\n        file\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\io\\FileSubsystem.kt"}}
{"prompt": "\n import java.io.File\nimport com.kylecorry.andromeda.core.coroutines.onIO\nsuspend fun createTemp(extension: String): File = onIO {\r", "choices": [{"text": "val file = File.createTempFile(\"temp\", extension)\r\nfile.deleteOnExit()\r\nfile\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/301", "ground_truth": "        val filename = \"${TEMP_DIR}/${UUID.randomUUID()}.$extension\"\r\n        get(filename, true)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\io\\FileSubsystem.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.debugging.ifDebug\nfun writeDebug(filename: String, text: String) {\r\n        ifDebug {\r", "choices": [{"text": "//            val file = File(filename)\r\n//            file.writeText(text)\r\n        }\r\n    }<file_sep>/app/src/main/java/com/kylecorry/trail_sense/shared/sensors/SensorManager.kt\npackage com.kylecorry.trail_sense.shared.sensors\n\nimport android.content.Context\nimport android.hardware.Sensor\nimport android.hardware.SensorEvent\nimport android.hardware.SensorEventListener\nimport android.hardware.SensorManager\nimport com.kylecorry.trail_sense.shared.sensors.SensorManager"}], "metadata": {"task_id": "Trail-Sense/302", "ground_truth": "            local.write(\"debug/$filename\", text)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\io\\FileSubsystem.kt"}}
{"prompt": "\n import java.io.File\nimport android.content.Context\n @Synchronized\r\n        fun getInstance(context: Context): FileSubsystem {\r\n            if (instance == null) {\r\n                instance = FileSubsystem(context.applicationContext)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/303", "ground_truth": "            }\r\n            return instance!!\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\io\\FileSubsystem.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.andromeda.gpx.GPXData\noverride suspend fun export(data: GPXData, filename: String): Boolean = onIO {\r\n        val uri = uriPicker.create(filename, \"application/gpx+xml\") ?: return@onIO false\r", "choices": [{"text": "\n import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.andromeda.gpx.GPXData\noverride suspend fun export(data: GPXData, filename: String): Boolean = onIO {\r\n        val uri = uriPicker.create(filename, \"application/gpx+xml\")?: return@onIO false\r\n//        val uri = uriPicker.create(filename, \"text/plain\")?: return@onIO false\r\n        val file = File(uri.path)\r\n        file.writeText(data.toGPX())\r\n        true\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/306", "ground_truth": "        val gpxString = GPXParser.toGPX(data, \"Trail Sense\")\r\n        uriService.write(uri, gpxString)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\io\\GpxIOService.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.andromeda.gpx.GPXData\noverride suspend fun import(): GPXData? = onIO {\r\n        val uri = uriPicker.open(listOf(\"*/*\")) ?: return@onIO null\r", "choices": [{"text": "\n import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.andromeda.gpx.GPXData\noverride suspend fun import(): GPXData? = onIO {\r\n        val uri = uriPicker.open(listOf(\"*/*\"))?: return@onIO null\r\n//        val uri = Uri.parse(\"https://www.google.com/maps/d/u/0/embed?mid=1-242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424"}], "metadata": {"task_id": "Trail-Sense/307", "ground_truth": "        val stream = uriService.inputStream(uri) ?: return@onIO null\r\n        GPXParser.parse(stream)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\io\\GpxIOService.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.gpx.GPXData\nimport com.kylecorry.andromeda.fragments.AndromedaFragment\nfun createGpxService(fragment: AndromedaFragment): IOService<GPXData> {\r\n        return GpxIOService(\r\n            FragmentUriPicker(fragment),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/308", "ground_truth": "            ExternalUriService(fragment.requireContext())\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\io\\IOFactory.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.fragments.AndromedaActivity\nfun createCsvService(activity: AndromedaActivity): ExportService<List<List<String>>> {\r\n        return CsvExportService(\r\n            ActivityUriPicker(activity),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/309", "ground_truth": "            ExternalUriService(activity)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\io\\IOFactory.kt"}}
{"prompt": "\n fun from(turnOn: () -> Unit, turnOff: () -> Unit): ISignalingDevice {\r\n            return object : ISignalingDevice {\r\n                override fun on() {\r\n                    turnOn()\r\n                }\r\n\r", "choices": [{"text": "                 override fun off() {\r\n                    turnOff()\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfun main() {\r\n    val device = SignalingDevice.from({ println(\"Turn on\") }, { println(\"Turn off\") })\r\n    device.on()\r\n    device.off()\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/310", "ground_truth": "                override fun off() {\r\n                    turnOff()\r\n                }\r\n            }\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\morse\\ISignalingDevice.kt"}}
{"prompt": "\n fun cancel(){\r\n        synchronized(this) {\r\n            isOn = false\r\n            if (intervalometer != null) {\r\n                intervalometer?.stop()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/311", "ground_truth": "                intervalometer = null\r\n            }\r\n            device.off()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\morse\\SignalPlayer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.sensors.SensorService\nimport android.content.Context\noverride fun isSatisfiedBy(value: Context): Boolean {\r\n        val sensorService = SensorService(value)\r\n        val hasForegroundLocation = sensorService.hasLocationPermission()\r\n        val hasBackgroundLocation = sensorService.hasLocationPermission(true)\r\n\r\n        if (!hasForegroundLocation || hasBackgroundLocation) {\r\n            return false\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/315", "ground_truth": "        }\r\n\r\n        val prefs = UserPreferences(value)\r\n        return prefs.astronomy.sendSunsetAlerts\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\permissions\\IsBackgroundLocationRequired.kt"}}
{"prompt": "\n import android.content.Context\noverride fun isSatisfiedBy(value: Context): Boolean {\r\n        if (!isBatteryUsageRestricted.isSatisfiedBy(value)) {\r\n            return false\r", "choices": [{"text": "}\r\n        if (!isBatteryUsageRestricted.isSatisfiedBy(value)) {\r\n            return false\r\n}\r\n        if (!isBatteryUsageRestricted.isSatisfiedBy(value)) {\r\n            return false\r\n}\r\n        if (!isBatteryUsageRestricted.isSatisfiedBy(value)) {\r\n            return false\r\n}\r\n        if (!isBatteryUsageRestricted.isSatisfiedBy(value)) {\r\n            return false\r\n}\r\n        if (!isBatteryUsageRestricted.isSatisfiedBy(value)) {\r\n            return false\r\n}\r\n        if (!isBatteryUsageRestricted.isSatisfiedBy(value)) {"}], "metadata": {"task_id": "Trail-Sense/316", "ground_truth": "        }\r\n        return areBackgroundServicesRequired.isSatisfiedBy(value)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\permissions\\IsBatteryExemptionRequired.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.camera.Camera\nimport com.kylecorry.andromeda.alerts.toast\nimport com.kylecorry.andromeda.alerts.Alerts\nimport androidx.fragment.app.Fragment\nfun Fragment.alertNoCameraPermission() {\r\n    Alerts.toast(\r", "choices": [{"text": "context,\r\n\"You must give Andromeda permission to use the camera to take pictures\"\r\n    )\r\n}\r\n\r\nfun Fragment.alertNoCamera() {\r\n    Alerts.toast(\r\ncontext,\r\n\"You must give Andromeda permission to use the camera to take pictures\"\r\n    )\r\n}\r\n\r\nfun Fragment.alertNoCameraPermission(onGranted: () -> Unit) {\r\n    Alerts.toast(\r\ncontext,\r\n\"You must give Andromeda permission to use the camera to take pictures\",\r\nonGranted = onGranted\r\n    )\r\n}\r\n\r"}], "metadata": {"task_id": "Trail-Sense/317", "ground_truth": "        requireContext(),\r\n        getString(R.string.camera_permission_denied),\r\n        short = false\r\n    )\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\permissions\\PermissionUtils.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.alerts.toast\nimport com.kylecorry.andromeda.alerts.Alerts\nimport androidx.fragment.app.Fragment\nfun Fragment.alertNoActivityRecognitionPermission() {\r\n    Alerts.toast(\r", "choices": [{"text": "getString(R.string.activity_recognition_permission_required),\r\n        context)\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/318", "ground_truth": "        requireContext(),\r\n        getString(R.string.activity_recognition_permission_denied),\r\n        short = false\r\n    )\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\permissions\\PermissionUtils.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.permissions.Permissions\nimport com.kylecorry.andromeda.fragments.IPermissionRequester\nimport androidx.fragment.app.Fragment\nimport android.os.Build\nimport android.content.Context\nimport android.Manifest\nfun <T> T.requestActivityRecognition(action: (hasPermission: Boolean) -> Unit) where T : IPermissionRequester, T : Fragment {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n        requestPermissions(listOf(Manifest.permission.ACTIVITY_RECOGNITION)) {\r\n            action(Permissions.canRecognizeActivity(requireContext()))\r", "choices": [{"text": "       }\r\n    } else {\r\n        action(true)\r\n    }\r\n}\n\nfun <T> T.requestLocation(action: (hasPermission: Boolean) -> Unit) where T : IPermissionRequester, T : Fragment {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n        requestPermissions(listOf(Manifest.permission.ACCESS_FINE_LOCATION)) {\r\n            action(Permissions.canAccessLocation(requireContext()))\r\n        }\r\n    } else {\r\n        action(true)\r\n    }\r\n}\n\nfun <T> T.requestLocationAndActivity"}], "metadata": {"task_id": "Trail-Sense/319", "ground_truth": "        }\r\n    } else {\r\n        action(true)\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\permissions\\PermissionUtils.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.permissions.Permissions\nimport com.kylecorry.andromeda.fragments.AndromedaFragment\nimport com.kylecorry.andromeda.camera.Camera\nimport androidx.fragment.app.Fragment\nimport android.Manifest\nfun AndromedaFragment.requestCamera(action: (hasPermission: Boolean) -> Unit) {\r\n    requestPermissions(listOf(Manifest.permission.CAMERA)) {\r", "choices": [{"text": "//        if (it.hasPermission(Manifest.permission.CAMERA)) {\r\n//            action(true)\r\n//        } else {\r\n//            action(false)\r\n//        }\r\n        action(it.hasPermission(Manifest.permission.CAMERA))\r\n    }\r\n}\n\nfun Fragment.requestCamera(action: (hasPermission: Boolean) -> Unit) {\r\n    requestPermissions(listOf(Manifest.permission.CAMERA)) {\r\n//        if (it.hasPermission(Manifest.permission.CAMERA)) {\r\n//            action(true)\r\n//        }"}], "metadata": {"task_id": "Trail-Sense/320", "ground_truth": "        action(Camera.isAvailable(requireContext()))\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\permissions\\PermissionUtils.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.permissions.Permissions\nimport com.kylecorry.andromeda.fragments.IPermissionRequester\nimport androidx.fragment.app.Fragment\nimport android.content.Context\nimport android.Manifest\nfun <T> T.requestBacktrackPermission(action: (hasPermission: Boolean) -> Unit) where T : IPermissionRequester, T : Fragment {\r\n    if (Permissions.canStartLocationForgroundService(requireContext())) {\r\n        action(true)\r\n        return\r\n    }\r\n\r\n    requestPermissions(listOf(Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION)) {\r\n        val hasPermission = Permissions.canStartLocationForgroundService(requireContext())\r\n        if (!hasPermission){\r", "choices": [{"text": "//            Toast.makeText(requireContext(), R.string.permission_location_denied, Toast.LENGTH_LONG).show()\r\n        }\r\n        action(hasPermission)\r\n    }\r\n}\n<file_sep>/app/src/main/java/com/kylecorry/trail_sense/navigation/ui/NavigationFragment.kt\npackage com.kylecorry.trail_sense.navigation.ui\n\nimport android.content.Context\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx."}], "metadata": {"task_id": "Trail-Sense/322", "ground_truth": "            toast(getString(R.string.backtrack_no_permission))\r\n        }\r\n        action(hasPermission)\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\permissions\\PermissionUtils.kt"}}
{"prompt": "\n import android.content.Context\noverride fun execute() {\r\n        if (!isRequired.isSatisfiedBy(fragment.requireContext())) {\r\n            flag.set(false)\r\n            return\r\n        }\r\n\r\n        if (flag.get()) {\r\n            return\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/323", "ground_truth": "        }\r\n\r\n        flag.set(true)\r\n        alerter.alert()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\permissions\\RequestOptionalPermissionCommand.kt"}}
{"prompt": "\n import android.content.Context\nfun getInstance(context: Context): PreferencesSubsystem {\r\n            if (instance == null) {\r\n                instance = PreferencesSubsystem(context.applicationContext)\r", "choices": [{"text": "}\r\n            return instance!!\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/324", "ground_truth": "            }\r\n            return instance!!\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\preferences\\PreferencesSubsystem.kt"}}
{"prompt": "\nval state ITopic<FeatureState>\n override fun onResume() {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/326", "ground_truth": "        super.onResume()\r\n        state.subscribe(this::onStateChange)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\quickactions\\TopicQuickAction.kt"}}
{"prompt": "\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nmMapView.onPause()\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nmMapView.onResume()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nmMapView.onDestroy()\r\n}\r\noverride fun onLowMemory() {\r\nsuper.onLowMemory()\r\nmMapView.onLowMemory()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/327", "ground_truth": "        super.onPause()\r\n        state.unsubscribe(this::onStateChange)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\quickactions\\TopicQuickAction.kt"}}
{"prompt": "\nval state ITopic<FeatureState>\n override fun onDestroy() {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/328", "ground_truth": "        super.onDestroy()\r\n        onPause()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\quickactions\\TopicQuickAction.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.FeatureState\nimport androidx.core.view.isVisible\nprivate fun onStateChange(state: FeatureState): Boolean {\r\n        button.isVisible = !hideWhenUnavailable || state != FeatureState.Unavailable\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.shared.FeatureState\nimport androidx.core.view.isVisible\nprivate fun onStateChange(state: FeatureState): Boolean {\r\n        button.isVisible =!hideWhenUnavailable || state!= FeatureState.Unavailable\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/329", "ground_truth": "        CustomUiUtils.setButtonState(button, state == FeatureState.On)\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\quickactions\\TopicQuickAction.kt"}}
{"prompt": "\n import android.graphics.Color\noverride fun getColor(percent: Float): Int {\r\n        if (colors.isEmpty()) {\r\n            return Color.BLACK\r\n        }\r\n\r\n        val percentPerColor = 1 / colors.size.toFloat()\r\n\r\n        for (i in colors.indices) {\r\n            if (percent <= percentPerColor * (i + 1)) {\r\n                return colors[i]\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/330", "ground_truth": "            }\r\n        }\r\n\r\n        return colors.last()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\scales\\DiscreteColorScale.kt"}}
{"prompt": "\n private fun onReading(): Boolean {\r\n        cache.putFloat(LAST_ALTITUDE_KEY, altitude)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/331", "ground_truth": "        notifyListeners()\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\altimeter\\CachingAltimeterWrapper.kt"}}
{"prompt": "\nval quality Quality\nval buffer\nvar altitude Float\n override fun startImpl() {\r", "choices": [{"text": "altitude = 0.0f\r\nbuffer = 0.0f\r\n}\r\n override fun updateImpl(delta: Float) {\r\naltitude += delta * quality.gravity\r\nbuffer += delta * quality.gravity\r\nif (buffer > quality.maxBuffer) {\r\nbuffer -= quality.maxBuffer\r\naltitude += quality.maxBuffer\r\n}\r\n}\r\n override fun stopImpl() {\r\naltitude = 0.0f\r\nbuffer = 0.0f\r\n}\r\n override fun getAltitude(): Float {\r\nreturn altitude\r\n}"}], "metadata": {"task_id": "Trail-Sense/332", "ground_truth": "        buffer.clear()\r\n        altimeter.start(this::onReading)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\altimeter\\GaussianAltimeterWrapper.kt"}}
{"prompt": "\nval bearing Bearing\nval quality Quality\nval rawBearing Float\n override fun startImpl() {\r", "choices": [{"text": "val bearing = this.bearing\r\nval quality = this.quality\r\nval rawBearing = this.rawBearing\r\nval bearing_ = bearing\r\nval quality_ = quality\r\nval rawBearing_ = rawBearing\r\nval bearing_ = bearing\r\nval quality_ = quality\r\nval rawBearing_ = rawBearing\r\nval bearing_ = bearing\r\nval quality_ = quality\r\nval rawBearing_ = rawBearing\r\nval bearing_ = bearing\r\nval quality_ = quality\r\n"}], "metadata": {"task_id": "Trail-Sense/334", "ground_truth": "        compass.start(this::onReading)\r\n        magnetometer.start(this::onReading)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\compass\\MagQualityCompassWrapper.kt"}}
{"prompt": "\nvar declination Float\nval rawBearing Float\nval bearing Bearing\n override fun stopImpl() {\r", "choices": [{"text": "// 1.\r\n// 2.\r\n// 3.\r\n// 4.\r\n// 5.\r\n// 6.\r\n// 7.\r\n// 8.\r\n// 9.\r\n// 10.\r\n// 11.\r\n// 12.\r\n// 13.\r\n// 14.\r\n// 15.\r\n// 16.\r\n// 17.\r\n// 18.\r\n// 19.\r\n// 2"}], "metadata": {"task_id": "Trail-Sense/335", "ground_truth": "        compass.stop(this::onReading)\r\n        magnetometer.stop(this::onReading)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\compass\\MagQualityCompassWrapper.kt"}}
{"prompt": "\n private fun onReading(): Boolean {\r", "choices": [{"text": "-    return reading\r\n+    return reading &&!paused\r\n }\r\n \r\n private fun onWriting(): Boolean {\r\n-    return writing\r\n+    return writing &&!paused\r\n }\r\n \r\n private fun onIdle(): Boolean {\r\n-    return!reading &&!writing\r\n+    return!reading &&!writing &&!paused\r\n }\r\n \r\n private fun onPaused(): Boolean {\r\n-    return paused\r\n+    return paused &&!reading &&!writing\r\n }\r\n \r\n private fun onResumed(): Boolean {\r\n-    return!paused\r\n+    return!"}], "metadata": {"task_id": "Trail-Sense/336", "ground_truth": "        notifyListeners()\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\compass\\MagQualityCompassWrapper.kt"}}
{"prompt": "\n private fun onPrimaryUpdate(): Boolean {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/339", "ground_truth": "        notifyListeners()\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\compass\\QuickRecalibrationOrientationSensor.kt"}}
{"prompt": " import com.kylecorry.andromeda.core.coroutines.onMain\nval timer\nval hasValidReading Boolean\nprotected open suspend fun update() {\r\n        onMain {\r", "choices": [{"text": "timer = Timer(1000) {\r\nhasValidReading = true\r\n}\r\n}\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/341", "ground_truth": "            notifyListeners()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\CoroutineIntervalSensor.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.sense.location.GPS\noverride fun stopImpl() {\r\n        baseGPS.stop(this::onLocationUpdate)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/346", "ground_truth": "        timeout.stop()\r\n        geoidTimer.stop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\CustomGPS.kt"}}
{"prompt": "\n private fun onTimeout() {\r\n        _isTimedOut = true\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/348", "ground_truth": "        notifyListeners()\r\n        timeout.once(TIMEOUT_DURATION)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\CustomGPS.kt"}}
{"prompt": "\nval pressure Float\nvar filter IFilter?\nvar filteredPressure Float?\n override fun startImpl() {\r\n        filter = null\r\n        filteredPressure = null\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/350", "ground_truth": "        readingCount = 0\r\n        barometer.start(this::onUpdate)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\FilteredBarometer.kt"}}
{"prompt": "\n private fun onUpdate(): Boolean {\r\n        if (!barometer.hasValidReading || barometer.pressure == 0f){\r\n            return true\r\n        }\r\n\r\n        readingCount++\r\n\r\n        if (filter == null){\r\n            filter = filterProvider(barometer.pressure)\r\n        }\r\n\r\n        filteredPressure = filter?.filter(barometer.pressure)\r\n\r\n        if (readingCount < minimumReadingCount){\r\n            return true\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/351", "ground_truth": "        }\r\n\r\n        notifyListeners()\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\FilteredBarometer.kt"}}
{"prompt": "\nval bearing Bearing?\nval location Coordinate\nval mslAltitude Float?\n override fun startImpl() {\r\n        kalman = null\r\n        gps.start(this::onGPSUpdate)\r", "choices": [{"text": "}\r\n override fun stopImpl() {\r\n        gps.stop()\r\n}\r\n override fun onGPSUpdate(gps: GPS) {\r\n        if (kalman == null) {\r\n            kalman = Kalman(gps.location)\r\n            bearing = gps.bearing\r\n            mslAltitude = gps.mslAltitude\r\n        } else {\r\n            kalman.update(gps.location, gps.bearing, gps.mslAltitude)\r\n            bearing = kalman.bearing\r\n            mslAltitude = kalman.mslAltitude\r\n        }\r\n        location = kalman.location\r\n"}], "metadata": {"task_id": "Trail-Sense/352", "ground_truth": "        accelerometer?.start(this::onAccelerometerUpdate)\r\n        timer.interval(interval)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\gps\\FusedGPS.kt"}}
{"prompt": "\nval bearing Bearing?\nvar gpsReadingSystemTime\nval location Coordinate\n override fun stopImpl() {\r\n        gps.stop(this::onGPSUpdate)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/353", "ground_truth": "        accelerometer?.stop(this::onAccelerometerUpdate)\r\n        timer.stop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\gps\\FusedGPS.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.math.Vector2\nprivate fun getKalmanLocation(): Coordinate {\r\n        return referenceProjection.toCoordinate(\r\n            Vector2(\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/355", "ground_truth": "                kalman?.currentX ?: 0f,\r\n                kalman?.currentY ?: 0f\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\gps\\FusedGPS.kt"}}
{"prompt": "\n import java.time.Instant\nimport com.kylecorry.sol.units.Coordinate\nprivate fun update() {\r\n        if (!gps.hasValidReading || currentLocation == Coordinate.zero || kalman == null) return\r\n\r\n        kalman?.predict(\r\n            (accelerometer?.rawAcceleration?.get(0) ?: 0f) * PROJECTION_SCALE,\r\n            (accelerometer?.rawAcceleration?.get(1) ?: 0f) * PROJECTION_SCALE,\r\n        )\r\n        lastPredictTime = Instant.now()\r\n\r", "choices": [{"text": "\n import java.time.Instant\nimport com.kylecorry.sol.units.Coordinate\nprivate fun update() {\r\n        if (!gps.hasValidReading || currentLocation == Coordinate.zero || kalman == null) return\r\n\r\n        kalman?.predict(\r\n            (accelerometer?.rawAcceleration?.get(0)?: 0f) * PROJECTION_SCALE,\r\n            (accelerometer?.rawAcceleration?.get(1)?: 0f) * PROJECTION_SCALE,\r\n        )\r\n        lastPredictTime = Instant.now()\r\n\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/358", "ground_truth": "        updateCurrentFromKalman()\r\n        if (updateWithPrediction) {\r\n            notifyListeners()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\gps\\FusedGPS.kt"}}
{"prompt": "\n import com.kylecorry.sol.math.algebra.columnMatrix\nimport android.os.SystemClock\nfun update(\r\n        x: Float,\r\n        y: Float,\r\n        xVel: Float,\r\n        yVel: Float,\r\n        posDev: Float,\r\n        velErr: Float\r\n    ) = synchronized(lock) {\r\n        lastUpdateTime = SystemClock.elapsedRealtimeNanos()\r\n        rebuildR(posDev, velErr)\r\n        if (useGpsSpeed) {\r\n            kalmanFilter.Zk = columnMatrix(x, y, xVel, yVel)\r", "choices": [{"text": "//            kalmanFilter.Zk = columnMatrix(x, y, xVel, yVel, xVel, yVel)\r\n        } else {\r\n            kalmanFilter.Zk = columnMatrix(x, y)\r\n        }\r\n        kalmanFilter.update()\r\n    }\r\n\r\n    fun getPosition() = kalmanFilter.X.get(0, 0) to kalmanFilter.X.get(1, 0)\r\n\r\n    fun getVelocity() = kalmanFilter.X.get(2, 0) to kalmanFilter.X.get(3, 0)\r\n\r\n    fun getPositionError"}], "metadata": {"task_id": "Trail-Sense/360", "ground_truth": "        } else {\r\n            kalmanFilter.Zk = columnMatrix(x, y)\r\n        }\r\n        kalmanFilter.update()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\gps\\FusedGPSFilter.kt"}}
{"prompt": "\n import com.kylecorry.sol.math.algebra.identityMatrix\nprivate fun rebuildFMatrix(dtPredict: Float) {\r\n        kalmanFilter.F = identityMatrix(4)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/361", "ground_truth": "        kalmanFilter.F[0][2] = dtPredict\r\n        kalmanFilter.F[1][3] = dtPredict\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\gps\\FusedGPSFilter.kt"}}
{"prompt": "\n import android.content.Context\n @Synchronized\r\n        fun getInstance(context: Context): LocationSubsystem {\r\n            if (instance == null) {\r\n                instance = LocationSubsystem(context.applicationContext)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/366", "ground_truth": "            }\r\n            return instance!!\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\LocationSubsystem.kt"}}
{"prompt": "\n import java.time.Duration\nimport com.kylecorry.trail_sense.shared.sensors.overrides.OverrideGPS\nimport com.kylecorry.andromeda.sense.location.IGPS\nimport com.kylecorry.andromeda.sense.location.GPS\nfun getGPS(frequency: Duration = Duration.ofMillis(20)): IGPS {\r\n\r\n        val hasPermission = hasLocationPermission()\r\n\r\n        if (!userPrefs.useAutoLocation || !hasPermission) {\r\n            return OverrideGPS(context, frequency.toMillis())\r\n        }\r\n\r\n        if (GPS.isAvailable(context)) {\r\n            return CustomGPS(\r\n                context,\r\n                frequency,\r\n                frequency\r", "choices": [{"text": "\n import java.time.Duration\nimport com.kylecorry.trail_sense.shared.sensors.overrides.OverrideGPS\nimport com.kylecorry.andromeda.sense.location.IGPS\nimport com.kylecorry.andromeda.sense.location.GPS\nfun getGPS(frequency: Duration = Duration.ofMillis(20)): IGPS {\r\n\r\n        val hasPermission = hasLocationPermission()\r\n\r\n        if (!userPrefs.useAutoLocation ||!hasPermission) {\r\n            return OverrideGPS(context, frequency.toMillis())\r\n        }\r\n\r\n        if (GPS.isAvailable(context)) {\r\n            return CustomGPS(\r\n                context,\r\n                frequency,\r\n                frequency\r\n//                userPrefs.gpsAccuracy,\r\n//                userPrefs.gpsMinTime,\r\n//                userPrefs.gpsMinDistance\r\n            )\r\n        }\r\n\r\n        return OverrideGPS(context, frequency.toMillis())\r\n    }<file_sep>package com.kylecorry.trail_sense.shared.sensors.overrides\n\nimport android.content.Context\nimport android.location.Location\nimport com.kylecorry.andromeda.sense.location.IGPS\nimport com.kylecorry.trail_sense.shared.UserPreferences\nimport com.kylecorry.trail_"}], "metadata": {"task_id": "Trail-Sense/367", "ground_truth": "            )\r\n        }\r\n\r\n        return CachedGPS(context, frequency.toMillis())\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\SensorService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.sensors.altimeter.AltimeterWrapper\nimport com.kylecorry.andromeda.sense.location.IGPS\nimport com.kylecorry.andromeda.sense.location.GPS\nimport com.kylecorry.andromeda.core.sensors.IAltimeter\nfun getGPSFromAltimeter(altimeter: IAltimeter): IGPS? {\r\n        return if (altimeter is IGPS) {\r\n            altimeter\r\n        } else if (altimeter is AltimeterWrapper && altimeter.altimeter is IGPS) {\r\n            altimeter.altimeter as IGPS\r\n        } else if (altimeter is AltimeterWrapper && altimeter.altimeter is AltimeterWrapper) {\r", "choices": [{"text": "//            altimeter.altimeter.altimeter as IGPS\r\n            null\r\n        } else {\r\n            null\r\n        }\r\n    }<file_sep>/app/src/main/java/com/kylecorry/trail_sense/shared/sensors/altimeter/AltimeterWrapper.kt\npackage com.kylecorry.trail_sense.shared.sensors.altimeter\n\nimport com.kylecorry.andromeda.sense.location.IAltimeter\n\nclass AltimeterWrapper(val altimeter: IAltimeter) : IAltime"}], "metadata": {"task_id": "Trail-Sense/368", "ground_truth": "            getGPSFromAltimeter(altimeter.altimeter)\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\SensorService.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.sense.pedometer.Pedometer\nimport com.kylecorry.andromeda.sense.pedometer.IPedometer\nimport com.kylecorry.andromeda.permissions.Permissions\nfun getPedometer(): IPedometer {\r\n        return if (Permissions.canRecognizeActivity(context)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/370", "ground_truth": "            Pedometer(context, ENVIRONMENT_SENSOR_DELAY)\r\n        } else {\r\n            MockPedometer()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\SensorService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.sensors.altimeter.OverrideAltimeter\nimport com.kylecorry.trail_sense.shared.sensors.altimeter.CachedAltimeter\nimport com.kylecorry.trail_sense.shared.UserPreferences\nimport com.kylecorry.andromeda.sense.location.IGPS\nimport com.kylecorry.andromeda.sense.location.GPS\nimport com.kylecorry.andromeda.core.sensors.IAltimeter\nprivate fun getGPSAltimeter(gps: IGPS? = null): IAltimeter {\r\n        val mode = userPrefs.altimeterMode\r\n\r\n        if (mode == UserPreferences.AltimeterMode.Override) {\r\n            return OverrideAltimeter(context)\r\n        } else {\r\n            if (!GPS.isAvailable(context)) {\r\n                return CachedAltimeter(context)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/371", "ground_truth": "            }\r\n\r\n            return gps ?: getGPS()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\SensorService.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.sense.barometer.IBarometer\nimport com.kylecorry.andromeda.sense.barometer.Barometer\nfun getBarometer(): IBarometer {\r\n        return if (userPrefs.weather.hasBarometer) FilteredBarometer(\r\n            Barometer(\r\n                context, ENVIRONMENT_SENSOR_DELAY\r\n            ),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/373", "ground_truth": "            3\r\n        ) {\r\n            LowPassFilter(0.1f, it)\r\n        } else MockBarometer()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\SensorService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.sensors.thermometer.ThermometerSource\nimport com.kylecorry.trail_sense.shared.sensors.thermometer.HistoricThermometer\nimport com.kylecorry.trail_sense.shared.sensors.thermometer.CalibratedThermometerWrapper\nimport com.kylecorry.andromeda.sense.temperature.Thermometer\nimport com.kylecorry.andromeda.core.sensors.IThermometer\nimport android.hardware.Sensor\nfun getThermometer(calibrated: Boolean = true): IThermometer {\r\n        val thermometer = when (userPrefs.thermometer.source) {\r\n            ThermometerSource.Historic -> HistoricThermometer(context)\r\n            ThermometerSource.Sensor -> getThermometerSensor()\r\n        }\r\n        return if (calibrated) {\r\n            CalibratedThermometerWrapper(\r\n                thermometer, userPrefs.thermometer.calibrator\r", "choices": [{"text": ")\r\n        } else {\r\n            thermometer\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/374", "ground_truth": "            )\r\n        } else {\r\n            thermometer\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\SensorService.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.sense.temperature.Thermometer\nimport com.kylecorry.andromeda.sense.temperature.AmbientThermometer\nimport com.kylecorry.andromeda.sense.Sensors\nimport com.kylecorry.andromeda.core.sensors.IThermometer\nimport android.hardware.Sensor\n @Suppress(\"DEPRECATION\")\r\n    private fun getThermometerSensor(): IThermometer {\r\n        if (Sensors.hasSensor(context, Sensor.TYPE_AMBIENT_TEMPERATURE)) {\r\n            return AmbientThermometer(context, ENVIRONMENT_SENSOR_DELAY)\r\n        }\r\n\r\n        if (Sensors.hasSensor(context, Sensor.TYPE_TEMPERATURE)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/375", "ground_truth": "            return Thermometer(context, ENVIRONMENT_SENSOR_DELAY)\r\n        }\r\n\r\n        return Battery(context)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\SensorService.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.sense.hygrometer.IHygrometer\nimport com.kylecorry.andromeda.sense.hygrometer.Hygrometer\nimport com.kylecorry.andromeda.sense.Sensors\nimport android.hardware.Sensor\nfun getHygrometer(): IHygrometer {\r\n        if (Sensors.hasHygrometer(context)) {\r", "choices": [{"text": "return Hygrometer(context)\r\n        }\r\n        return Hygrometer(context)\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/376", "ground_truth": "            return Hygrometer(context, ENVIRONMENT_SENSOR_DELAY)\r\n        }\r\n\r\n        return MockHygrometer()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\SensorService.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.signal.ICellSignalSensor\nimport com.kylecorry.andromeda.signal.CellSignalSensor\nimport android.hardware.Sensor\nfun getCellSignal(): ICellSignalSensor {\r\n        if (!hasLocationPermission()) {\r\n            return MockCellSignalSensor()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/377", "ground_truth": "        }\r\n        return CellSignalSensor(context, userPrefs.cellSignal.populateCache)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\SensorService.kt"}}
{"prompt": "\n import kotlinx.coroutines.runBlocking\noverride fun startImpl() {\r\n        // TODO: Listen for path changes for backtrack ID\r\n        val backtrack = runBlocking { pathService.getBacktrackPathId() } ?: return\r", "choices": [{"text": "\n import kotlinx.coroutines.runBlocking\noverride fun startImpl() {\r\n        // TODO: Listen for path changes for backtrack ID\r\n        val backtrack = runBlocking { pathService.getBacktrackPathId() }?: return\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/381", "ground_truth": "        path = pathService.getWaypointsLive(backtrack)\r\n        path?.observeForever(pathObserver)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\speedometer\\BacktrackSpeedometer.kt"}}
{"prompt": "\n private fun onReading(): Boolean {\r", "choices": [{"text": "-    return reading\r\n+    return reading &&!paused\r\n }\r\n \r\n private fun onWriting(): Boolean {\r\n-    return writing\r\n+    return writing &&!paused\r\n }\r\n \r\n private fun onIdle(): Boolean {\r\n-    return!reading &&!writing\r\n+    return!reading &&!writing &&!paused\r\n }\r\n \r\n private fun onPaused(): Boolean {\r\n-    return paused\r\n+    return paused &&!reading &&!writing\r\n }\r\n \r\n private fun onResumed(): Boolean {\r\n-    return!paused\r\n+    return!"}], "metadata": {"task_id": "Trail-Sense/382", "ground_truth": "        notifyListeners()\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\thermometer\\CalibratedThermometerWrapper.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\noverride suspend fun update() {\r\n        // Purposely not calibrated because there's a wrapper for that\r\n        temperature = weather.getTemperature(\r\n            ZonedDateTime.now(),\r\n            location.location,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/383", "ground_truth": "            location.elevation,\r\n            false\r\n        ).value.temperature\r\n        super.update()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\thermometer\\HistoricThermometer.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.math.SolMath\noverride fun calibrate(temperature: Temperature): Temperature {\r\n        return Temperature.celsius(\r\n            SolMath.map(\r\n                temperature.celsius().temperature,\r\n                sensorMinC,\r\n                sensorMaxC,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/384", "ground_truth": "                calibratedMinC,\r\n                calibratedMaxC\r\n            )\r\n        ).convertTo(temperature.units)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sensors\\thermometer\\RangeTemperatureCalibrator.kt"}}
{"prompt": "\n import android.content.DialogInterface\noverride fun onDismiss(dialog: DialogInterface) {\r", "choices": [{"text": "super.onDismiss(dialog)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/385", "ground_truth": "        super.onDismiss(dialog)\r\n        onAction(null, this)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sharing\\ActionSheet.kt"}}
{"prompt": "\n import androidx.fragment.app.Fragment\nfun actions(\r\n        fragment: Fragment,\r\n        title: String,\r\n        actions: List<ActionItem>,\r\n        noActionSelected: () -> Unit\r\n    ) {\r\n        var called = false\r\n\r\n        val customOnAction = { action: ActionItem?, sheet: ActionSheet ->\r\n            if (!called) {\r\n                called = true\r\n                if (action != null) {\r\n                    sheet.dismiss()\r\n                    action.action()\r\n                } else {\r\n                    noActionSelected()\r\n                }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/386", "ground_truth": "            }\r\n        }\r\n        val sheet = ActionSheet(title, actions, customOnAction)\r\n        sheet.show(fragment)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\sharing\\Share.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\noverride fun isSatisfiedBy(value: Coordinate): Boolean {\r", "choices": [{"text": "return value.x == 0 && value.y == 0\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/388", "ground_truth": "        val distance = center.distanceTo(value)\r\n        return distance <= radius.meters().distance\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\specifications\\InGeofenceSpecification.kt"}}
{"prompt": "\n fun toMarkdown(): String {\r\n            if (title == null || level == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/390", "ground_truth": "                return content\r\n            }\r\n\r\n            return \"#\".repeat(level) + \" $title\\n$content\"\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\text\\TextUtils.kt"}}
{"prompt": "\n override fun onClick() {\r\n        super.onClick()\r\n\r\n        when (stateTopic.value.get()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/391", "ground_truth": "            FeatureState.On -> stop()\r\n            FeatureState.Off -> start()\r\n            else -> {}\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\tiles\\TopicTile.kt"}}
{"prompt": "\n override fun onStartListening() {\r", "choices": [{"text": "//    Log.d(TAG, \"onStartListening\")\r\n    super.onStartListening()\r\n    val intentFilter = IntentFilter()\r\n    intentFilter.addAction(ACTION_START_SERVICE)\r\n    intentFilter.addAction(ACTION_STOP_SERVICE)\r\n    intentFilter.addAction(ACTION_PAUSE_SERVICE)\r\n    intentFilter.addAction(ACTION_RESUME_SERVICE)\r\n    intentFilter.addAction(ACTION_SET_VOLUME)\r\n    intentFilter.addAction(ACTION_SET_PLAYBACK_STATE)\r\n    intentFilter.addAction(ACTION_SET_PLAYBACK_SPEED)\r\n    intentFilter.addAction(ACTION_SET"}], "metadata": {"task_id": "Trail-Sense/392", "ground_truth": "        subtitleTopic.subscribe(this::onSubtitleChanged)\r\n        stateTopic.subscribe(this::onStateChanged)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\tiles\\TopicTile.kt"}}
{"prompt": "\n override fun onStopListening() {\r", "choices": [{"text": "// TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\r\n }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/393", "ground_truth": "        subtitleTopic.unsubscribe(this::onSubtitleChanged)\r\n        stateTopic.unsubscribe(this::onStateChanged)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\tiles\\TopicTile.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.tryOrLog\nprivate fun onSubtitleChanged(subtitle: String): Boolean {\r\n        tryOrLog {\r\n            setSubtitle(subtitle)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/394", "ground_truth": "        }\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\tiles\\TopicTile.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.FeatureState\nimport com.kylecorry.andromeda.core.tryOrLog\nimport android.service.quicksettings.Tile\nprivate fun onStateChanged(state: FeatureState): Boolean {\r\n        tryOrLog {\r\n            setState(\r\n                when (state) {\r\n                    FeatureState.On -> Tile.STATE_ACTIVE\r\n                    FeatureState.Off -> Tile.STATE_INACTIVE\r\n                    FeatureState.Unavailable -> Tile.STATE_UNAVAILABLE\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/395", "ground_truth": "                }\r\n            )\r\n        }\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\tiles\\TopicTile.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.PressureUnits\nfun getDecimalPlaces(units: PressureUnits): Int {\r\n        return when (units) {\r\n            PressureUnits.Inhg, PressureUnits.Psi -> 2\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/396", "ground_truth": "            else -> 1\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Units.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.DistanceUnits\nfun getDecimalPlaces(units: DistanceUnits): Int {\r\n        return if (units.isLarge()){\r", "choices": [{"text": "//            units.getDecimalPlaces() + 1\r\n            units.getDecimalPlaces()\r\n        } else {\r\n            units.getDecimalPlaces()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/397", "ground_truth": "            2\r\n        } else {\r\n            0\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\Units.kt"}}
{"prompt": "\n import androidx.annotation.StyleableRes\nimport androidx.annotation.StyleRes\nimport androidx.annotation.AttrRes\nimport android.view.View\nimport android.util.AttributeSet\nimport android.content.res.TypedArray\nfun View.parse(\r\n    attrs: AttributeSet?,\r\n    @StyleableRes res: IntArray,\r\n    @AttrRes defStyleAttr: Int = 0,\r\n    @StyleRes defStyleRes: Int = 0,\r\n    block: TypedArray.() -> Unit\r\n) {\r\n    val arr = context.theme.obtainStyledAttributes(\r\n        attrs,\r\n        res,\r\n        defStyleAttr,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/398", "ground_truth": "        defStyleRes\r\n    )\r\n    arr.block()\r\n    arr.recycle()\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\AttributeExtensions.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.sol.units.Coordinate\nfun show(\r\n        location: Coordinate,\r\n        elevation: Float,\r\n        speed: Float,\r\n        destination: Beacon,\r\n        declination: Float,\r\n        usingTrueNorth: Boolean = true\r\n    ) {\r\n        destinationPanel.show(\r\n            location,\r\n            elevation,\r\n            speed,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/400", "ground_truth": "            destination,\r\n            declination,\r\n            usingTrueNorth\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\BeaconDestinationView.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.CustomUiUtils\nimport com.kylecorry.trail_sense.tools.beacons.domain.BeaconIcon\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.system.Resources\nimport androidx.core.view.setPadding\nimport android.widget.ImageButton\nprivate fun addButton(icon: BeaconIcon?) {\r\n        val button = ImageButton(context, null)\r\n        button.setImageResource(icon?.icon ?: R.drawable.bubble)\r\n        CustomUiUtils.setButtonState(button, false)\r\n        button.setPadding(Resources.dp(context, 16f).toInt())\r\n        button.setOnClickListener {\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.shared.CustomUiUtils\nimport com.kylecorry.trail_sense.tools.beacons.domain.BeaconIcon\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.system.Resources\nimport androidx.core.view.setPadding\nimport android.widget.ImageButton\nprivate fun addButton(icon: BeaconIcon?) {\r\n        val button = ImageButton(context, null)\r\n        button.setImageResource(icon?.icon?: R.drawable.bubble)\r\n        CustomUiUtils.setButtonState(button, false)\r\n        button.setPadding(Resources.dp(context, 16f).toInt())\r\n        button.setOnClickListener {\r\n//            val intent = Intent(context, BeaconActivity::class.java)\r\n//            intent.putExtra(BeaconActivity.EXTRA_BEACON_ID, beacon.id)\r\n//            context.startActivity(intent)\r\n        }\r\n        layout.addView(button)\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/403", "ground_truth": "            this.icon = icon\r\n            changeListener?.invoke(icon)\r\n        }\r\n        flex.addView(button)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\BeaconIconPickerView.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.camera.Camera\nfun stop() {\r\n        camera?.stop(this::onCameraUpdate)\r\n        camera = null\r\n        keepScreenOn = false\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/406", "ground_truth": "        imageListener = null\r\n        synchronized(startLock) {\r\n            isStarted = false\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\CameraView.kt"}}
{"prompt": "\n import java.io.File\nsuspend fun capture(file: File): Boolean {\r\n        synchronized(this) {\r\n            if (isCapturing) {\r\n                return true\r\n            }\r\n            isCapturing = true\r\n        }\r\n        val success = camera?.takePhoto(file) ?: false\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/407", "ground_truth": "        synchronized(this) {\r\n            isCapturing = false\r\n        }\r\n        return success\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\CameraView.kt"}}
{"prompt": "\n import android.view.MotionEvent\noverride fun onTouchEvent(event: MotionEvent): Boolean {\r\n        mScaleDetector.onTouchEvent(event)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/411", "ground_truth": "        gestureDetector.onTouchEvent(event)\r\n        return !passThroughTouchEvents\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\CameraView.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.toRelativeDistance\nimport com.kylecorry.trail_sense.shared.Units\nimport com.kylecorry.sol.units.Distance\noverride fun format(value: Float): String {\r\n        val distance = Distance(value, fromUnits).convertTo(toUnits).let {\r\n            if (relative) {\r\n                it.toRelativeDistance()\r\n            } else {\r\n                it\r\n            }\r\n        }\r\n        return formatter.formatDistance(\r", "choices": [{"text": "//            distance.toUnits(toUnits),\r\n            distance,\r\n            toUnits\r\n        )\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/412", "ground_truth": "            distance,\r\n            Units.getDecimalPlaces(distance.units),\r\n            false\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\chart\\label\\DistanceChartLabelFormatter.kt"}}
{"prompt": "\n import java.time.Duration\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.science.geography.CoordinateFormatter.parse\nprivate fun onChange() {\r\n        val locationText = locationEdit.text.toString()\r\n        _coordinate = Coordinate.parse(locationText)\r\n        errorHandler.stop()\r\n        if (_coordinate == null && locationText.isNotEmpty()) {\r\n            errorHandler.once(Duration.ofSeconds(2))\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/415", "ground_truth": "        } else {\r\n            locationEdit.error = null\r\n        }\r\n        changeListener?.invoke(_coordinate)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\CoordinateInputView.kt"}}
{"prompt": "\n fun setTitle(title: String){\r", "choices": [{"text": "this.title = title\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/418", "ground_truth": "        this.title = title\r\n        titleTextView?.text = title\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\CoordinatePreference.kt"}}
{"prompt": " import com.kylecorry.andromeda.sense.location.IGPS\nvar gps IGPS?\nvar title String?\nvar listener\nfun setGPS(gps: IGPS){\r", "choices": [{"text": "this.gps = gps\r\n}\nfun setTitle(title: String){\r\nthis.title = title\r\n}\nfun setListener(listener: () -> Unit){\r\nthis.listener = listener\r\n}\nfun start(){\r\nif(gps == null){\r\nthrow Exception(\"GPS not set\")\r\n}\r\nif(title == null){\r\nthrow Exception(\"Title not set\")\r\n}\r\nif(listener == null){\r\nthrow Exception(\"Listener not set\")\r\n}\r\ngps.startListening(title!!, listener)\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/419", "ground_truth": "        coordinateInputView?.gps = gps\r\n        this.gps = gps\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\CoordinatePreference.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\nfun setLocation(coordinate: Coordinate?){\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/420", "ground_truth": "        coordinateInputView?.coordinate = coordinate\r\n        initialCoordinate = coordinate\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\CoordinatePreference.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\nfun setOnLocationChangeListener(listener: ((coordinate: Coordinate?) -> Unit)?){\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/421", "ground_truth": "        coordinateInputView?.setOnCoordinateChangeListener(listener)\r\n        this.listener = listener\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\CoordinatePreference.kt"}}
{"prompt": "\n import android.view.MotionEvent\noverride fun onTouchEvent(event: MotionEvent): Boolean {\r\n        gestureDetector.onTouchEvent(event)\r\n        if (event.action == MotionEvent.ACTION_UP) {\r\n            scrollToOption(selected)\r\n            if (selected != lastSelection){\r\n                selectionChangeListener(selected)\r\n                lastSelection = selected\r", "choices": [{"text": "\n import android.view.MotionEvent\noverride fun onTouchEvent(event: MotionEvent): Boolean {\r\n        gestureDetector.onTouchEvent(event)\r\n        if (event.action == MotionEvent.ACTION_UP) {\r\n            scrollToOption(selected)\r\n            if (selected!= lastSelection){\r\n                selectionChangeListener(selected)\r\n                lastSelection = selected\r\n}\r\n        }\r\n        return true\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/427", "ground_truth": "            }\r\n        }\r\n        invalidate()\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\DialSelectView.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Distance\noverride fun getAmount(value: Distance): Number {\r\n        return if (showSecondaryAmount) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/430", "ground_truth": "            floor(value.distance)\r\n        } else {\r\n            value.distance\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\DistanceInputView.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Distance\noverride fun getSecondaryAmount(value: Distance): Number? {\r\n        return if (showSecondaryAmount) {\r\n            val inches = (value.distance % 1f) * 12\r\n            if (inches == 0f) {\r\n                null\r\n            } else {\r\n                inches\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/432", "ground_truth": "            }\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\DistanceInputView.kt"}}
{"prompt": "\n import java.time.Duration\nprivate fun onDurationTextChanged(shouldEvent: Boolean = true) {\r\n        val h = durationText.substring(0, 2).toInt()\r\n        val m = durationText.substring(2, 4).toInt()\r\n        val s = durationText.substring(4, 6).toInt()\r\n        duration = Duration.ofHours(h.toLong()).plusMinutes(m.toLong()).plusSeconds(s.toLong())\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/435", "ground_truth": "        updateTextView()\r\n        if (shouldEvent) {\r\n            changeListener?.invoke(duration)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\DurationInputView.kt"}}
{"prompt": " import java.time.Duration\nvar durationText\nvar changeListener\nvar inputHolder TextInputLayout\nprivate fun updateTextView() {\r\n        val text = createDurationText()\r", "choices": [{"text": "durationText.text = text\r\n}\r\nprivate fun createDurationText(): String {\r\n        val hours = hoursInput.value\r\nval minutes = minutesInput.value\r\nval seconds = secondsInput.value\r\nval millis = millisInput.value\r\nval duration = Duration.ofHours(hours)\r\n.plusMinutes(minutes)\r\n.plusSeconds(seconds)\r\n.plusMillis(millis)\r\nreturn duration.toString()\r\n}\r\nprivate fun createInputs(): List<TextInputLayout> {\r\n        val hoursInput = TextInputLayout(this)\r\nval"}], "metadata": {"task_id": "Trail-Sense/436", "ground_truth": "        lastDurationText = text\r\n        input.setText(text)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\DurationInputView.kt"}}
{"prompt": "\nval altimeter\nval sensorService\nvar elevationInput DistanceInputView\n private fun autofillWithAltimeter() {\r", "choices": [{"text": "val altimeter = altimeter\r\nif (altimeter!= null) {\r\nelevationInput.setDistance(altimeter.elevation)\r\n}\r\n}\r\nprivate fun autofillWithSensor() {\r\nval sensorService = sensorService\r\nif (sensorService!= null) {\r\nelevationInput.setDistance(sensorService.elevation)\r\n}\r\n}\r\nprivate fun autofillWithElevationInput() {\r\nval elevationInput = elevationInput\r\nif (elevationInput!= null) {\r\nval distance = elevationInput.getDistance()\r"}], "metadata": {"task_id": "Trail-Sense/438", "ground_truth": "        autofillListener?.invoke()\r\n        autofill()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\ElevationInputView.kt"}}
{"prompt": "\n import androidx.core.view.isVisible\nfun pause() {\r\n        altimeter.stop(this::onAltimeterUpdate)\r\n        gpsBtn.isVisible = true\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/442", "ground_truth": "        gpsLoadingIndicator.isVisible = false\r\n        elevationInput.isEnabled = true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\ElevationInputView.kt"}}
{"prompt": "\n override fun onSelectionChanged(selStart: Int, selEnd: Int) {\r", "choices": [{"text": "//        if (selStart == selEnd) {\r\n//            val text = editText.text.toString()\r\n//            val start = editText.selectionStart\r\n//            val end = editText.selectionEnd\r\n//            val prefix = text.substring(0, start)\r\n//            val suffix = text.substring(end)\r\n//            val newText = prefix + suffix\r\n//            editText.setText(newText)\r\n//            editText.setSelection(start)\r\n//        }\r\n        if (selStart == selEnd) {\r\n           "}], "metadata": {"task_id": "Trail-Sense/443", "ground_truth": "        super.onSelectionChanged(selStart, selEnd)\r\n        setSelection(text?.length ?: 0)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\EndOnlyEditText.kt"}}
{"prompt": "\n private fun mySetup() {\r\n        setPanLimit(PAN_LIMIT_OUTSIDE)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/444", "ground_truth": "        maxScale = 6f\r\n        alwaysZoomDoubleTap = true\r\n        alwaysZoomDoubleTapZoomScale = 2f\r\n        setup()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\EnhancedImageView.kt"}}
{"prompt": "\n import kotlin.math.max\nimport com.kylecorry.sol.math.geometry.Size\noverride fun onImageLoaded() {\r\n        super.onImageLoaded()\r\n        val rotatedImageSize = Size(imageWidth.toFloat(), imageHeight.toFloat()).rotate(rotationOffset)\r\n        val percentIncrease = max(\r\n            rotatedImageSize.width / imageWidth,\r\n            rotatedImageSize.height / imageHeight\r", "choices": [{"text": ")\r\n        val newSize = Size(\r\n            imageWidth * percentIncrease,\r\n            imageHeight * percentIncrease\r\n        )\r\n        val newPosition = Point(\r\n            (imageWidth - newSize.width) / 2,\r\n            (imageHeight - newSize.height) / 2\r\n        )\r\n        val newImage = Bitmap.createBitmap(\r\n            image,\r\n            newPosition.x.toInt(),\r\n            newPosition.y.toInt(),\r\n            newSize.width.toInt(),\r\n            newSize.height.toInt()\r\n        )\r\n        image = newImage\r\n    }\n<file_sep>/app/src/main/java/com/k"}], "metadata": {"task_id": "Trail-Sense/445", "ground_truth": "        )\r\n        setMinimumScaleType(SCALE_TYPE_CUSTOM)\r\n        minScale /= percentIncrease\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\EnhancedImageView.kt"}}
{"prompt": "\nvar isSetup\nval lookupMatrix\nvar imageRotation\n fun recenter() {\r", "choices": [{"text": "//    var x = 0\r\n//    var y = 0\r\n//    var z = 0\r\n//    for (i in 0..100) {\r\n//        for (j in 0..100) {\r\n//            for (k in 0..100) {\r\n//                if (lookupMatrix[i][j][k] == 1) {\r\n//                    x += i\r\n//                    y += j\r\n//                    z += k\r\n//                }\r\n//            }\r\n//"}], "metadata": {"task_id": "Trail-Sense/446", "ground_truth": "        // TODO: Center the rotated image\r\n        resetScaleAndCenter()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\EnhancedImageView.kt"}}
{"prompt": "\n import android.graphics.PointF\nprotected fun toView(\r\n        sourceX: Float,\r\n        sourceY: Float,\r\n        withRotation: Boolean = false\r\n    ): PointF? {\r\n        val source = PointF(sourceX, sourceY)\r\n\r\n        // Apply the scale and translate\r\n        val view = sourceToViewCoord(source.x, source.y) ?: return null\r\n\r\n        // Apply the rotation\r\n        if (withRotation){\r\n            transform(view, inPlace = true){\r\n                postRotate(-imageRotation + rotationOffset, width / 2f, height / 2f)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/447", "ground_truth": "            }\r\n        }\r\n\r\n        return view\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\EnhancedImageView.kt"}}
{"prompt": "\n import android.graphics.PointF\nprotected fun toSource(\r\n        viewX: Float,\r\n        viewY: Float,\r\n        withRotation: Boolean = false\r\n    ): PointF? {\r\n        val view = PointF(viewX, viewY)\r\n\r\n        // Remove the rotation\r\n        if (withRotation) {\r\n            transform(view, invert = true, inPlace = true) {\r\n                postRotate(-imageRotation + rotationOffset, width / 2f, height / 2f)\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/448", "ground_truth": "        }\r\n\r\n        // Remove the scale and translate\r\n        return viewToSourceCoord(view.x, view.y)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\EnhancedImageView.kt"}}
{"prompt": "\n import android.view.MotionEvent\noverride fun onTouchEvent(event: MotionEvent): Boolean {\r", "choices": [{"text": "if (event.action == MotionEvent.ACTION_DOWN) {\r\n// do something\r\n}\r\nreturn super.onTouchEvent(event)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/449", "ground_truth": "        val consumed = gestureDetector.onTouchEvent(event)\r\n        return consumed || super.onTouchEvent(event)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\EnhancedImageView.kt"}}
{"prompt": "\n fun report(error: UserError) {\r\n        if (!prefs.errors.canShowError(error.reason)) {\r\n            return\r\n        }\r\n        synchronized(this) {\r\n            errors.removeAll { it.reason == error.reason }\r\n            errors.add(error)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/450", "ground_truth": "            errors.sortBy { it.reason.id }\r\n        }\r\n        displayNextError()\r\n        show()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\ErrorBannerView.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.ErrorBannerReason\nimport com.kylecorry.trail_sense.R\nfun dismiss(reason: ErrorBannerReason) {\r\n        synchronized(this) {\r\n            errors.removeAll { it.reason == reason }\r", "choices": [{"text": "}\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/451", "ground_truth": "        }\r\n        displayNextError()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\ErrorBannerView.kt"}}
{"prompt": "\n fun dismissAll() {\r\n        synchronized(this) {\r\n            errors.clear()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/452", "ground_truth": "        }\r\n        displayNextError()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\ErrorBannerView.kt"}}
{"prompt": "\n private fun displayNextError() {\r\n        val first = synchronized(this) {\r\n            errors.firstOrNull()\r\n        }\r\n        if (first != null) {\r\n            displayError(first)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/453", "ground_truth": "        } else {\r\n            onAction = null\r\n            hide()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\ErrorBannerView.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport androidx.core.view.isVisible\nprivate fun displayError(error: UserError) {\r\n        binding.errorText.text = error.title\r\n        binding.errorAction.text = error.action\r\n        binding.errorIcon.setImageResource(error.icon)\r\n        onAction = error.onAction\r\n        binding.errorAction.isVisible = !error.action.isNullOrEmpty()\r\n        overallAction = if (error.action == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/454", "ground_truth": "            error.onAction\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\ErrorBannerView.kt"}}
{"prompt": "\n import androidx.core.view.isVisible\nimport android.view.View\nfun setOverlay(overlay: View) {\r\n        this.overlay?.setOnClickListener(null)\r\n        overlay.isVisible = isVisible\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/455", "ground_truth": "        this.overlay = overlay\r\n        this.overlay?.setOnClickListener {\r\n            hide()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\FloatingActionButtonMenu.kt"}}
{"prompt": " import androidx.core.view.isVisible\nvar fab FloatingActionButton?\nvar overlay View?\nvar onMenuItemClick MenuItem?.OnMenuItemClickListener?\nfun toggle() {\r\n        if (isVisible) {\r", "choices": [{"text": "//            fab?.hide()\r\n            overlay?.isVisible = false\r\n        } else {\r\n//            fab?.show()\r\n            overlay?.isVisible = true\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/458", "ground_truth": "            hide()\r\n        } else {\r\n            show()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\FloatingActionButtonMenu.kt"}}
{"prompt": "\n fun setItemOnClickListener(l: OnClickListener){\r", "choices": [{"text": "itemView.setOnClickListener(l)\r\n}\r\n fun setItemOnLongClickListener(l: OnLongClickListener){\r\nitemView.setOnLongClickListener(l)\r\n}\r\n fun setItemOnTouchListener(l: OnTouchListener){\r\nitemView.setOnTouchListener(l)\r\n}\r\n fun setItemOnFocusChangeListener(l: OnFocusChangeListener){\r\nitemView.setOnFocusChangeListener(l)\r\n}\r\n fun setItemOnKeyListener(l: OnKeyListener){\r\nitemView.setOnKeyListener(l)\r\n}\r\n fun setItemOn"}], "metadata": {"task_id": "Trail-Sense/459", "ground_truth": "        setOnClickListener(l)\r\n        fab.setOnClickListener(l)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\FloatingActionButtonMenuItem.kt"}}
{"prompt": "\n import kotlin.math.min\nimport com.kylecorry.trail_sense.R\nimport android.graphics.Bitmap\noverride fun setup() {\r\n        val imageSize = min(width, height)\r\n        backgroundBitmap = loadImage(backgroundImageId ?: R.drawable.rectangle, imageSize, imageSize)\r", "choices": [{"text": "\n import kotlin.math.min\nimport com.kylecorry.trail_sense.R\nimport android.graphics.Bitmap\noverride fun setup() {\r\n        val imageSize = min(width, height)\r\n        backgroundBitmap = loadImage(backgroundImageId?: R.drawable.rectangle, imageSize, imageSize)\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/460", "ground_truth": "        imageMode(ImageMode.Center)\r\n        noStroke()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\MaskedProgressView.kt"}}
{"prompt": "\nvar horizontal Boolean\nvar progress Float\nvar backgroundImageId Int?\n override fun draw() {\r\n        clear()\r", "choices": [{"text": "if (backgroundImageId!= null) {\r\ndrawImage(backgroundImageId!!, 0, 0, width, height)\r\n}\r\nif (horizontal) {\r\ndrawLine(0, 0, width, 0, 0, height, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"}], "metadata": {"task_id": "Trail-Sense/461", "ground_truth": "        drawBackground()\r\n        drawProgress()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\MaskedProgressView.kt"}}
{"prompt": "\n import android.graphics.Color\nimport android.graphics.Bitmap\nprivate fun drawProgress(){\r\n        val progressBitmap = mask(backgroundBitmap){\r\n            fill(progressColor)\r\n            val w = backgroundBitmap.width.toFloat()\r\n            val h = backgroundBitmap.height.toFloat()\r\n\r\n            if (horizontal){\r\n                rect(0f, h, w * progress, h)\r\n            } else {\r\n                rect(0f, h * (1 - progress), w, h * progress)\r\n            }\r", "choices": [{"text": "//            rect(0f, 0f, w * progress, h)\r\n        }\r\n        val progressBitmap2 = mask(backgroundBitmap){\r\n            fill(progressColor)\r\n            val w = backgroundBitmap.width.toFloat()\r\n            val h = backgroundBitmap.height.toFloat()\r\n\r\n            if (horizontal){\r\n                rect(0f, h, w * progress, h)\r\n            } else {\r\n                rect(0f, h * (1 - progress), w, h * progress)\r\n            }\r\n//            rect(0f, 0f, w * progress, h)\r\n        }\r\n        val progressBitmap"}], "metadata": {"task_id": "Trail-Sense/462", "ground_truth": "        }\r\n\r\n        image(progressBitmap, width / 2f, height / 2f)\r\n        progressBitmap.recycle()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\MaskedProgressView.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport android.widget.ArrayAdapter\nfun setItems(items: List<String>) {\r\n        val adapter = ArrayAdapter(\r\n            context,\r\n            R.layout.spinner_item_plain,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/464", "ground_truth": "            R.id.item_name,\r\n            items\r\n        )\r\n        spinner.adapter = adapter\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\MaterialSpinnerView.kt"}}
{"prompt": "\n fun setHint(hint: String) {\r", "choices": [{"text": "//     this.hint = hint\r\n// }\r\n//\r\n// fun getHint(): String {\r\n//     return this.hint\r\n// }\r\n//\r\n// fun setHint(hint: String) {\r\n//     this.hint = hint\r\n// }\r\n//\r\n// fun getHint(): String {\r\n//     return this.hint\r\n// }\r\n//\r\n// fun setHint(hint: String) {\r\n//     this.hint = hint\r\n// }\r\n//\r\n// fun getHint(): String {"}], "metadata": {"task_id": "Trail-Sense/465", "ground_truth": "        holder.hint = hint\r\n        spinner.prompt = hint\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\MaterialSpinnerView.kt"}}
{"prompt": "\n override fun setEnabled(enabled: Boolean) {\r\n        amountEditHolder.isEnabled = enabled\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/466", "ground_truth": "        secondaryAmountEditHolder.isEnabled = enabled\r\n        unitBtn.isEnabled = enabled\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\MultipartUnitInputView.kt"}}
{"prompt": "\n private fun setSelectedUnitText(unit: Units?) {\r\n        if (unit != null) {\r\n            val displayUnit = units.firstOrNull { it.unit == unit }\r\n            if (displayUnit == null) {\r\n                _unit = null\r\n                unitBtn.text = \"\"\r\n            } else {\r\n                unitBtn.text = displayUnit.shortName\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/467", "ground_truth": "            }\r\n        } else {\r\n            unitBtn.text = \"\"\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\MultipartUnitInputView.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.canvas.CanvasDrawer\nimport android.graphics.Canvas\noverride fun onDraw(canvas: Canvas) {\r\n        super.onDraw(canvas)\r\n        if (!isSetup) {\r\n            drawer = CanvasDrawer(context, canvas)\r\n            setup()\r\n            isSetup = true\r", "choices": [{"text": "}\r\n        drawer?.draw()\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/471", "ground_truth": "        }\r\n\r\n        drawer.canvas = canvas\r\n        draw()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\Notepad.kt"}}
{"prompt": "\n import kotlin.math.max\nfun draw() {\r\n        val count = max(height / lineHeight, lineCount)\r\n        var baseline = getLineBounds(0, bounds)\r\n        for (i in 0 until count) {\r\n            drawer.line(\r\n                bounds.left.toFloat(),\r\n                baseline.toFloat() + offset,\r\n                bounds.right.toFloat(),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/473", "ground_truth": "                baseline.toFloat() + offset\r\n            )\r\n            baseline += lineHeight\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\Notepad.kt"}}
{"prompt": "\n private fun loadImage(path: String) {\r\n\r\n        val border = dp(48f).toInt()\r\n\r\n        val w = if (mapRotation == 0f || mapRotation == 180f) {\r\n            width\r\n        } else {\r\n            height\r\n        } - border\r\n\r\n        val h = if (mapRotation == 0f || mapRotation == 180f) {\r\n            height\r\n        } else {\r\n            width\r\n        } - border\r\n\r\n        val bitmap = files.bitmap(path, w, h) ?: return\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/474", "ground_truth": "        image = bitmap.resizeToFit(w, h)\r\n        if (image != bitmap) {\r\n            bitmap.recycle()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\PerspectiveCorrectionView.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.infrastructure.fixPerspective\nimport android.graphics.Color\nprivate fun drawPreviewCanvas() {\r\n        val bitmap = image ?: return\r\n        val warped = bitmap.fixPerspective(getBounds(), false, Color.WHITE)\r\n        push()\r\n        translate(-imageX, -imageY)\r\n        val newImageX = (width - warped.width * scale) / 2f\r\n        val newImageY = (height - warped.height * scale) / 2f\r\n        translate(newImageX, newImageY)\r\n        image(warped, 0f, 0f)\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.tools.maps.infrastructure.fixPerspective\nimport android.graphics.Color\nprivate fun drawPreviewCanvas() {\r\n        val bitmap = image?: return\r\n        val warped = bitmap.fixPerspective(getBounds(), false, Color.WHITE)\r\n        push()\r\n        translate(-imageX, -imageY)\r\n        val newImageX = (width - warped.width * scale) / 2f\r\n        val newImageY = (height - warped.height * scale) / 2f\r\n        translate(newImageX, newImageY)\r\n        image(warped, 0f, 0f)\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/475", "ground_truth": "        pop()\r\n        if (warped != bitmap) {\r\n            warped.recycle()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\PerspectiveCorrectionView.kt"}}
{"prompt": "\n fun setImage(path: String) {\r\n        imagePath = path\r\n        image = null\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/478", "ground_truth": "        linesLoaded = false\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\PerspectiveCorrectionView.kt"}}
{"prompt": "\n fun clearImage() {\r\n        imagePath = null\r\n        val oldImage = image\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/479", "ground_truth": "        image = null\r\n        oldImage?.recycle()\r\n        linesLoaded = false\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\PerspectiveCorrectionView.kt"}}
{"prompt": "\n override fun onCreate() {\r", "choices": [{"text": "super.onCreate()\r\nFirebaseApp.initializeApp(this)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/481", "ground_truth": "        super.onCreate()\r\n        button.isGone = true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\QuickActionNone.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport androidx.annotation.DrawableRes\nfun setImageResource(@DrawableRes resId: Int) {\r", "choices": [{"text": "}<file_sep>/app/src/main/java/com/kylecorry/trail_sense/shared/sensors/SensorService.kt\npackage com.kylecorry.trail_sense.shared.sensors\n\nimport android.content.Context\nimport android.hardware.Sensor\nimport android.hardware.SensorEvent\nimport android.hardware.SensorEventListener\nimport android.hardware.SensorManager\nimport com.kylecorry.trail_sense.shared.sensors.SensorService.SensorType.*\nimport com.kylecorry.trail_sense.shared.sensors.SensorService"}], "metadata": {"task_id": "Trail-Sense/482", "ground_truth": "        icon.setImageResource(resId)\r\n        setState(isOn)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\TileButton.kt"}}
{"prompt": "\n override fun setEnabled(enabled: Boolean) {\r", "choices": [{"text": "//     if (enabled) {\r\n//         mButton.isEnabled = true\r\n//         mButton.isClickable = true\r\n//         mButton.isFocusable = true\r\n//     } else {\r\n//         mButton.isEnabled = false\r\n//         mButton.isClickable = false\r\n//         mButton.isFocusable = false\r\n//     }\r\n }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/483", "ground_truth": "        amountEdit.isEnabled = enabled\r\n        unitBtn.isEnabled = enabled\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\UnitInputView.kt"}}
{"prompt": "\n private fun setSelectedUnitText(unit: Units?) {\r\n        if (unit != null) {\r\n            val displayUnit = units.firstOrNull { it.unit == unit }\r\n            if (displayUnit == null) {\r\n                _unit = null\r\n                unitBtn.text = \"\"\r\n            } else {\r\n                unitBtn.text = displayUnit.shortName\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/484", "ground_truth": "            }\r\n        } else {\r\n            unitBtn.text = \"\"\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\UnitInputView.kt"}}
{"prompt": "\n import androidx.core.view.setPadding\nimport android.widget.LinearLayout\nimport android.view.ViewGroup\nimport android.view.View\nfun linear(\r\n        views: List<View>,\r\n        width: Int = ViewGroup.LayoutParams.MATCH_PARENT,\r\n        height: Int = ViewGroup.LayoutParams.WRAP_CONTENT,\r\n        orientation: Int = LinearLayout.VERTICAL,\r\n        padding: Int = 0\r\n    ): View {\r\n        val layout = LinearLayout(views.first().context)\r\n        layout.layoutParams = ViewGroup.LayoutParams(width, height)\r\n        layout.orientation = orientation\r\n        layout.setPadding(padding, padding, padding, padding)\r\n\r\n        views.forEach { view ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/486", "ground_truth": "            layout.addView(view)\r\n        }\r\n\r\n        return layout\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\Views.kt"}}
{"prompt": "\n import android.widget.TextView\nimport android.view.ViewGroup\nimport android.view.View\nimport android.content.Context\nfun text(\r\n        context: Context,\r\n        text: CharSequence?,\r\n        width: Int = ViewGroup.LayoutParams.MATCH_PARENT,\r\n        height: Int = ViewGroup.LayoutParams.WRAP_CONTENT\r\n    ): View {\r\n        return TextView(context).apply {\r\n            layoutParams = ViewGroup.LayoutParams(width, height)\r", "choices": [{"text": "//            setPadding(10, 10, 10, 10)\r\n            setText(text)\r\n        }\r\n    }<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.view.isVisible\nimport androidx.core.widget.doAfterTextChanged\nimport androidx."}], "metadata": {"task_id": "Trail-Sense/487", "ground_truth": "            this.text = text\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\shared\\views\\Views.kt"}}
{"prompt": "\n import java.time.LocalDate\nimport com.kylecorry.sol.science.astronomy.moon.MoonPhase\nfun getMoonPhase(date: LocalDate): MoonPhase {\r", "choices": [{"text": "return MoonPhase.getPhase(date)\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/489", "ground_truth": "        val time = date.atTime(12, 0).toZonedDateTime()\r\n        return Astronomy.getMoonPhase(time)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "\n import java.time.LocalDate\nfun isSuperMoon(date: LocalDate): Boolean {\r", "choices": [{"text": "//    val year = date.year\r\n//    val month = date.monthValue\r\n//    val day = date.dayOfMonth\r\n//    val dayOfYear = date.dayOfYear\r\n//    val dayOfWeek = date.dayOfWeek\r\n//    val dayOfMonth = date.dayOfMonth\r\n//    val dayOfWeek = date.dayOfWeek\r\n//    val dayOfMonth = date.dayOfMonth\r\n//    val dayOfMonth = date.dayOfMonth\r\n//    val dayOfMonth = date.dayOfMonth\r\n//    val dayOfMonth = date.dayOfMonth\r"}], "metadata": {"task_id": "Trail-Sense/490", "ground_truth": "        val time = date.atTime(12, 0).toZonedDateTime()\r\n        return Astronomy.isSuperMoon(time)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport java.time.LocalDate\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time.toZonedDateTime\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.science.astronomy.RiseSetTransitTimes\nimport com.kylecorry.sol.science.astronomy.Astronomy\nfun getMoonTimes(location: Coordinate, date: LocalDate): RiseSetTransitTimes {\r\n        return Astronomy.getMoonEvents(\r\n            date.atStartOfDay().toZonedDateTime(),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/491", "ground_truth": "            location,\r\n            withRefraction = true,\r\n            withParallax = true\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time\nfun getCenteredMoonAltitudes(\r\n        location: Coordinate,\r\n        time: ZonedDateTime\r\n    ): List<Reading<Float>> {\r\n        val startTime = time.minusHours(12)\r\n        val endTime = time.plusHours(12)\r\n        return Time.getReadings(\r\n            startTime,\r\n            endTime,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/492", "ground_truth": "            altitudeGranularity\r\n        ) {\r\n            getMoonAltitude(location, it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "\n import java.time.ZoneId\nimport java.time.LocalDate\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time\nfun getMoonAltitudes(location: Coordinate, date: LocalDate): List<Reading<Float>> {\r\n        return Time.getReadings(\r\n            date,\r\n            ZoneId.systemDefault(),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/493", "ground_truth": "            altitudeGranularity\r\n        ) {\r\n            getMoonAltitude(location, it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.science.astronomy.Astronomy\nfun isMoonUp(location: Coordinate, time: ZonedDateTime = ZonedDateTime.now(clock)): Boolean {\r\n        return Astronomy.isMoonUp(\r\n            time,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/494", "ground_truth": "            location,\r\n            withRefraction = true,\r\n            withParallax = true\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.science.astronomy.Astronomy\nimport com.kylecorry.sol.math.Range\nfun getMoonAboveHorizonTimes(location: Coordinate, time: ZonedDateTime): Range<ZonedDateTime>? {\r\n        return Astronomy.getMoonAboveHorizonTimes(\r\n            location,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/495", "ground_truth": "            time,\r\n            withRefraction = true,\r\n            withParallax = true\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport java.time.LocalDate\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time.toZonedDateTime\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.science.astronomy.SunTimesMode\nimport com.kylecorry.sol.science.astronomy.RiseSetTransitTimes\nimport com.kylecorry.sol.science.astronomy.Astronomy\nfun getSunTimes(\r\n        location: Coordinate,\r\n        sunTimesMode: SunTimesMode,\r\n        date: LocalDate\r\n    ): RiseSetTransitTimes {\r\n        return Astronomy.getSunEvents(\r\n            date.atStartOfDay().toZonedDateTime(),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/496", "ground_truth": "            location,\r\n            sunTimesMode,\r\n            true\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport java.time.LocalDate\nimport java.time.Duration\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time.toZonedDateTime\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.science.astronomy.SunTimesMode\nimport com.kylecorry.sol.science.astronomy.Astronomy\nfun getLengthOfDay(\r\n        location: Coordinate,\r\n        sunTimesMode: SunTimesMode,\r\n        date: LocalDate\r\n    ): Duration {\r\n        return Astronomy.getDaylightLength(\r\n            date.atStartOfDay().toZonedDateTime(),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/497", "ground_truth": "            location,\r\n            sunTimesMode,\r\n            true\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "\n import java.time.ZoneId\nimport java.time.LocalDate\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time\nfun getSunAltitudes(location: Coordinate, date: LocalDate): List<Reading<Float>> {\r\n        return Time.getReadings(\r\n            date,\r\n            ZoneId.systemDefault(),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/498", "ground_truth": "            altitudeGranularity\r\n        ) {\r\n            getSunAltitude(location, it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time\nfun getCenteredSunAltitudes(\r\n        location: Coordinate,\r\n        time: ZonedDateTime\r\n    ): List<Reading<Float>> {\r\n        val startTime = time.minusHours(12)\r\n        val endTime = time.plusHours(12)\r\n        return Time.getReadings(\r\n            startTime,\r\n            endTime,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/499", "ground_truth": "            altitudeGranularity\r\n        ) {\r\n            getSunAltitude(location, it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport java.time.LocalDateTime\nimport java.time.LocalDate\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.science.astronomy.SunTimesMode\nfun getNextSunset(\r\n        location: Coordinate,\r\n        sunTimesMode: SunTimesMode,\r\n        time: ZonedDateTime = ZonedDateTime.now(clock)\r\n    ): LocalDateTime? {\r", "choices": [{"text": ""}], "metadata": {"task_id": "Trail-Sense/500", "ground_truth": "        return Astronomy.getNextSunset(time, location, sunTimesMode, true)\r\n            ?.toLocalDateTime()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport java.time.LocalDateTime\nimport java.time.LocalDate\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.science.astronomy.SunTimesMode\nfun getNextSunrise(\r\n        location: Coordinate,\r\n        sunTimesMode: SunTimesMode,\r\n        time: ZonedDateTime = ZonedDateTime.now(clock)\r\n    ): LocalDateTime? {\r", "choices": [{"text": ""}], "metadata": {"task_id": "Trail-Sense/501", "ground_truth": "        return Astronomy.getNextSunrise(time, location, sunTimesMode, true)\r\n            ?.toLocalDateTime()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.science.astronomy.Astronomy\nimport com.kylecorry.sol.math.Range\nfun getSunAboveHorizonTimes(location: Coordinate, time: ZonedDateTime): Range<ZonedDateTime>? {\r\n        return Astronomy.getSunAboveHorizonTimes(\r\n            location, time,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/502", "ground_truth": "            withRefraction = true\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport java.time.LocalDate\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time.toZonedDateTime\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.science.astronomy.meteors.MeteorShowerPeak\nimport com.kylecorry.sol.science.astronomy.Astronomy\nfun getMeteorShower(\r\n        location: Coordinate,\r\n        date: LocalDate = LocalDate.now()\r\n    ): MeteorShowerPeak? {\r\n        val today = date.atTime(12, 0).toZonedDateTime()\r\n        val todays = Astronomy.getMeteorShower(location, today)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/503", "ground_truth": "        val tomorrows = Astronomy.getMeteorShower(location, today.plusDays(1))\r\n        return todays ?: tomorrows\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.science.astronomy.meteors.MeteorShowerPeak\nimport com.kylecorry.sol.science.astronomy.Astronomy\nfun getMeteorShowerPeakAltitude(peak: MeteorShowerPeak, location: Coordinate): Float {\r\n        return Astronomy.getMeteorShowerAltitude(\r", "choices": [{"text": "peak.time,\r\npeak.latitude,\r\npeak.longitude,\r\nlocation.latitude,\r\nlocation.longitude\r\n        )\r\n    }<file_sep>/app/src/main/java/com/kylecorry/sol/app/fragments/settings/SettingsFragment.kt\npackage com.kylecorry.sol.app.fragments.settings\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\nimport androidx.navigation.fragment.findNavController\nimport"}], "metadata": {"task_id": "Trail-Sense/504", "ground_truth": "            peak.shower,\r\n            location,\r\n            peak.peak.toInstant()\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.units.Bearing\nimport com.kylecorry.sol.science.astronomy.meteors.MeteorShowerPeak\nimport com.kylecorry.sol.science.astronomy.Astronomy\nfun getMeteorShowerPeakAzimuth(peak: MeteorShowerPeak, location: Coordinate): Bearing {\r\n        return Astronomy.getMeteorShowerAzimuth(\r", "choices": [{"text": "peak.time,\r\npeak.latitude,\r\npeak.longitude,\r\nlocation.latitude,\r\nlocation.longitude\r\n        )\r\n    }<file_sep>/app/src/main/java/com/kylecorry/sol/science/astronomy/moon/MoonPhase.kt\npackage com.kylecorry.sol.science.astronomy.moon\n\nimport com.kylecorry.sol.science.astronomy.Astronomy\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.units.Bearing"}], "metadata": {"task_id": "Trail-Sense/505", "ground_truth": "            peak.shower,\r\n            location,\r\n            peak.peak.toInstant()\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "\n import java.time.LocalDate\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.science.shared.Season\nimport com.kylecorry.sol.science.astronomy.Astronomy\nfun getSeason(location: Coordinate, date: LocalDate = LocalDate.now()): Season {\r\n        return Astronomy.getSeason(\r\n            location,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/506", "ground_truth": "            date.atStartOfDay(ZoneId.systemDefault())\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "\n import java.time.LocalDate\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.science.astronomy.eclipse.EclipseType\nfun getLunarEclipse(\r\n        location: Coordinate,\r\n        date: LocalDate = LocalDate.now()\r\n    ): Eclipse? {\r\n        return getEclipse(location, date, EclipseType.PartialLunar) {\r", "choices": [{"text": "//            it.getLunarEclipse(location, date)\r\n        }\r\n    }<file_sep>/SolarSystem/src/main/kotlin/com/kylecorry/sol/solarsystem/bodies/Ceres.kt\npackage com.kylecorry.sol.solarsystem.bodies\r\n\r\nimport com.kylecorry.sol.math.Matrix3\r\nimport com.kylecorry.sol.math.Vector3\r\nimport com.kylecorry.sol.math.geometry.Sphere\r\nimport com.kylecorry.sol.math."}], "metadata": {"task_id": "Trail-Sense/507", "ground_truth": "            getMoonAzimuth(location, it) to getMoonAltitude(location, it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": "\n import java.time.LocalDate\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.science.astronomy.eclipse.EclipseType\nfun getSolarEclipse(\r\n        location: Coordinate,\r\n        date: LocalDate = LocalDate.now()\r\n    ): Eclipse? {\r\n        return getEclipse(location, date, EclipseType.Solar, 1) {\r", "choices": [{"text": "//            it.getSolarEclipse(location, date)\r\n        }\r\n    }<file_sep>/src/main/kotlin/com/kylecorry/sol/science/astronomy/moon/MoonPhase.kt\npackage com.kylecorry.sol.science.astronomy.moon\r\n\r\nimport com.kylecorry.sol.math.Maths\r\nimport com.kylecorry.sol.science.astronomy.moon.MoonPhase.*\r\nimport com.kylecorry.sol.science.astronomy.moon.MoonPhase.*\r\nimport com"}], "metadata": {"task_id": "Trail-Sense/508", "ground_truth": "            getSunAzimuth(location, it) to getSunAltitude(location, it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\domain\\AstronomyService.kt"}}
{"prompt": " import android.content.Context\nval uniqueId Int\nval UNIQUE_ID\noverride fun isEnabled(context: Context): Boolean {\r", "choices": [{"text": "return true\r\n}\r\noverride fun onEnable(context: Context) {\r\nuniqueId = 0\r\n}\r\noverride fun onDisable(context: Context) {\r\nuniqueId = 0\r\n}\r\noverride fun onReceive(context: Context, intent: Intent) {\r\nif (intent.action == \"android.intent.action.BOOT_COMPLETED\") {\r\nuniqueId = 0\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/509", "ground_truth": "        val prefs = UserPreferences(context)\r\n        return prefs.astronomy.sendAstronomyAlerts\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\infrastructure\\AstronomyDailyWorker.kt"}}
{"prompt": "\n import java.time.LocalTime\nimport android.content.Context\noverride fun getScheduledTime(context: Context): LocalTime {\r", "choices": [{"text": "return LocalTime.of(10, 0)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/510", "ground_truth": "        val prefs = UserPreferences(context)\r\n        return prefs.astronomy.astronomyAlertTime\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\infrastructure\\AstronomyDailyWorker.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.background.OneTimeTaskSchedulerFactory\nimport com.kylecorry.andromeda.background.IOneTimeTaskScheduler\nimport com.kylecorry.andromeda.background.DailyWorker\nimport android.content.Context\nprivate fun getScheduler(context: Context): IOneTimeTaskScheduler {\r\n            return OneTimeTaskSchedulerFactory(context).deferrable(\r\n                AstronomyDailyWorker::class.java,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/511", "ground_truth": "                UNIQUE_ID\r\n            )\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\infrastructure\\AstronomyDailyWorker.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.sensors.LocationSubsystem\nimport com.kylecorry.trail_sense.shared.commands.generic.ComposedCommand\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.coroutines.onDefault\noverride suspend fun execute() = onDefault {\r\n        val location = LocationSubsystem.getInstance(context).location\r\n\r\n        if (location == Coordinate.zero) {\r\n            return@onDefault\r\n        }\r\n\r\n        val command = ComposedCommand(\r\n            LunarEclipseAlertCommand(context),\r\n            SolarEclipseAlertCommand(context),\r", "choices": [{"text": "//            SolarEclipseAlertCommand(context),\r\n            SolarEclipseAlertCommand(context),\r\n            SolarEclipseAlertCommand(context),\r\n            SolarEclipseAlertCommand(context),\r\n            SolarEclipseAlertCommand(context),\r\n            SolarEclipseAlertCommand(context),\r\n            SolarEclipseAlertCommand(context),\r\n            SolarEclipseAlertCommand(context),\r\n            SolarEclipseAlertCommand(context),\r\n            SolarEclipseAlertCommand(context),\r\n            SolarEclipseAlertCommand(context),\r\n            SolarEclipseAlertCommand(context),\r\n            SolarEclipseAlert"}], "metadata": {"task_id": "Trail-Sense/512", "ground_truth": "            MeteorShowerAlertCommand(context)\r\n        )\r\n\r\n        command.execute(location)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\infrastructure\\commands\\AstronomyAlertCommand.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.astronomy.domain.Eclipse\nimport com.kylecorry.trail_sense.shared.FormatService\nimport android.content.Context\nprivate fun getEclipseDescription(context: Context, eclipse: Eclipse): String {\r\n        val formatService = FormatService.getInstance(context)\r\n\r\n        val timeSpan = formatService.formatTimeSpan(\r\n            eclipse.start,\r\n            eclipse.end,\r\n            true\r\n        )\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/513", "ground_truth": "\r\n        val eclipseAmount = EclipseFormatter.type(context, eclipse)\r\n\r\n        return \"$timeSpan\\n$eclipseAmount\"\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\infrastructure\\commands\\LunarEclipseAlertCommand.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.FormatService\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.science.astronomy.meteors.MeteorShowerPeak\nimport android.content.Context\nprivate fun getShowerDescription(context: Context, shower: MeteorShowerPeak): String {\r\n        val formatService = FormatService.getInstance(context)\r\n\r\n        val peak = formatService.formatRelativeDateTime(shower.peak, includeSeconds = false)\r", "choices": [{"text": "//        val peak = formatService.formatDateTime(shower.peak, includeSeconds = false)\r\n        val start = formatService.formatRelativeDateTime(shower.start, includeSeconds = false)\r\n//        val start = formatService.formatDateTime(shower.start, includeSeconds = false)\r\n        val end = formatService.formatRelativeDateTime(shower.end, includeSeconds = false)\r\n//        val end = formatService.formatDateTime(shower.end, includeSeconds = false)\r\n\r\n        return context.getString(R.string.meteor_shower_peak_description"}], "metadata": {"task_id": "Trail-Sense/514", "ground_truth": "\r\n        val rate = context.getString(R.string.meteors_per_hour, shower.shower.rate)\r\n\r\n        return \"$peak\\n$rate\"\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\infrastructure\\commands\\MeteorShowerAlertCommand.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.astronomy.domain.Eclipse\nimport com.kylecorry.trail_sense.shared.FormatService\nimport android.content.Context\nprivate fun getEclipseDescription(context: Context, eclipse: Eclipse): String {\r\n        val formatService = FormatService.getInstance(context)\r\n\r\n        val timeSpan = formatService.formatTimeSpan(\r\n            eclipse.start,\r\n            eclipse.end,\r\n            true\r\n        )\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/515", "ground_truth": "\r\n        val eclipseAmount = EclipseFormatter.type(context, eclipse)\r\n\r\n        return \"$timeSpan\\n$eclipseAmount\"\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\infrastructure\\commands\\SolarEclipseAlertCommand.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport java.time.Duration\nprivate fun withinAlertWindow(sunset: ZonedDateTime, alertDuration: Duration): Boolean {\r\n        val alertTime = sunset.minus(alertDuration)\r\n        val minAlertTime = alertTime.minus(alertWindow)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/516", "ground_truth": "        val alertRange = Range(minAlertTime, sunset)\r\n        return alertRange.contains(ZonedDateTime.now())\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\infrastructure\\commands\\SunsetAlarmCommand.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport com.kylecorry.trail_sense.tools.astronomy.infrastructure.receivers.SunsetAlarmReceiver\nimport com.kylecorry.trail_sense.R\nprivate fun setAlarm(time: ZonedDateTime) {\r\n        val scheduler = SunsetAlarmReceiver.scheduler(context)\r\n        scheduler.cancel()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/517", "ground_truth": "        scheduler.once(time.toInstant())\r\n        Log.i(TAG, \"Scheduled next run at $time\")\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\infrastructure\\commands\\SunsetAlarmCommand.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.CoroutineScope\nimport com.kylecorry.trail_sense.tools.astronomy.infrastructure.commands.SunsetAlarmCommand\nimport com.kylecorry.trail_sense.shared.UserPreferences\nimport android.content.Intent\nimport android.content.Context\noverride fun onReceive(context: Context?, intent: Intent?) {\r\n        context ?: return\r\n        val shouldSend = UserPreferences(context).astronomy.sendSunsetAlerts\r\n        if (!shouldSend) {\r\n            return\r\n        }\r\n\r\n        val pendingResult = goAsync()\r\n\r\n        val command = SunsetAlarmCommand(context.applicationContext)\r\n        val scope = CoroutineScope(Dispatchers.Default)\r\n        scope.launch {\r\n            try {\r\n                command.execute()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/518", "ground_truth": "            } finally {\r\n                pendingResult.finish()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\infrastructure\\receivers\\SunsetAlarmReceiver.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.background.OneTimeTaskSchedulerFactory\nimport com.kylecorry.andromeda.background.IOneTimeTaskScheduler\nimport android.content.Context\nfun scheduler(context: Context): IOneTimeTaskScheduler {\r\n            return OneTimeTaskSchedulerFactory(context).exact(\r\n                SunsetAlarmReceiver::class.java,\r", "choices": [{"text": "SunsetAlarmReceiver::class.java,\r\nSunsetAlarmReceiver::class.java,\r\nSunsetAlarmReceiver::class.java,\r\nSunsetAlarmReceiver::class.java,\r\nSunsetAlarmReceiver::class.java,\r\nSunsetAlarmReceiver::class.java,\r\nSunsetAlarmReceiver::class.java,\r\nSunsetAlarmReceiver::class.java,\r\nSunsetAlarmReceiver::class.java,\r\nSunsetAlarmReceiver::class.java,\r\nSunsetAlarmReceiver::class.java,\r\nSunsetAlarmReceiver::class"}], "metadata": {"task_id": "Trail-Sense/519", "ground_truth": "                PI_ID\r\n            )\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\infrastructure\\receivers\\SunsetAlarmReceiver.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.permissions.requestScheduleExactAlarms\nimport com.kylecorry.trail_sense.shared.permissions.RequestBackgroundLocationCommand\nimport com.kylecorry.trail_sense.shared.UserPreferences\nimport com.kylecorry.andromeda.fragments.IPermissionRequester\nimport androidx.fragment.app.Fragment\nimport android.content.Context\nfun <T> enable(\r\n            fragment: T,\r\n            shouldRequestPermissions: Boolean\r\n        ) where T : Fragment, T : IPermissionRequester {\r\n            UserPreferences(fragment.requireContext()).astronomy.sendSunsetAlerts = true\r\n            if (shouldRequestPermissions) {\r\n                fragment.requestScheduleExactAlarms {\r\n                    start(fragment.requireContext())\r\n                    RequestBackgroundLocationCommand(fragment).execute()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/520", "ground_truth": "                }\r\n            } else {\r\n                start(fragment.requireContext())\r\n            }\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\infrastructure\\receivers\\SunsetAlarmReceiver.kt"}}
{"prompt": " import com.kylecorry.trail_sense.R\nval prefs\nval formatter\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nprefs = PreferenceManager.getDefaultSharedPreferences(this)\r\nformatter = SimpleDateFormat(\"HH:mm\", Locale.getDefault())\r\n}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_settings)\r\nsupportActionBar?.setDisplayHomeAsUpEnabled(true)\r\nsupportActionBar?.setDisplayShowHomeEnabled(true)\r\nsupportActionBar?.title = getString(R.string.settings)\r\nval fragment = SettingsFragment()\r\nval transaction = supportFragmentManager.beginTransaction()\r"}], "metadata": {"task_id": "Trail-Sense/522", "ground_truth": "        super.onResume()\r\n        updateState()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\quickactions\\QuickActionSunsetAlert.kt"}}
{"prompt": "\n import java.time.Duration\nprivate fun getSeekProgress(): Int {\r\n        val totalDuration = Duration.between(minChartTime, maxChartTime).seconds\r\n        val currentDuration = Duration.between(minChartTime, currentSeekChartTime).seconds\r", "choices": [{"text": "return (currentDuration * 100 / totalDuration)\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/529", "ground_truth": "        val progress = maxProgress * currentDuration / totalDuration.toFloat()\r\n        return progress.toInt()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\AstronomyFragment.kt"}}
{"prompt": "\nval declination\nvar lastAstronomyEventSearch AstronomyEvent?\nvar chart AstroChart\n override fun onPause() {\r\n        super.onPause()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/531", "ground_truth": "        gps.stop(this::onLocationUpdate)\r\n        gpsErrorShown = false\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\AstronomyFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nprivate fun requestLocationUpdate() {\r\n        location = gps.location\r\n        if (gps.hasValidReading) {\r", "choices": [{"text": "//            location = gps.location\r\n            location = gps.location\r\n            if (location!= null) {\r\n                val reading = Reading(location.latitude, location.longitude)\r\n                if (reading.isValid) {\r\n                    val distance = location.distanceTo(gps.location)\r\n                    if (distance > 100) {\r\n                        location = gps.location\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/532", "ground_truth": "            onLocationUpdate()\r\n        } else {\r\n            gps.start(this::onLocationUpdate)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\AstronomyFragment.kt"}}
{"prompt": "\n private fun onLocationUpdate(): Boolean {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/533", "ground_truth": "        location = gps.location\r\n        return false\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\AstronomyFragment.kt"}}
{"prompt": "\n import java.time.LocalDate\nimport kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nprivate suspend fun updateMoonUI() {\r\n        if (!isBound) {\r\n            return\r\n        }\r\n\r\n        val displayDate = binding.displayDate.date\r\n\r\n        val moonPhase = withContext(Dispatchers.Default) {\r\n            if (displayDate == LocalDate.now()) {\r\n                astronomyService.getCurrentMoonPhase()\r\n            } else {\r\n                astronomyService.getMoonPhase(displayDate)\r\n            }\r\n        }\r", "choices": [{"text": ""}], "metadata": {"task_id": "Trail-Sense/534", "ground_truth": "\r\n        withContext(Dispatchers.Main) {\r\n            chart.setMoonImage(getMoonImage(moonPhase.phase))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\AstronomyFragment.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nprivate suspend fun updateAstronomyDetails() {\r\n        if (!isBound) {\r\n            return\r\n        }\r\n\r\n        val displayDate = binding.displayDate.date\r\n\r\n        onDefault {\r\n            val declination = if (!prefs.compass.useTrueNorth) getDeclination() else 0f\r\n\r\n            val items = producers.map { it.getListItem(displayDate, location, declination) }\r\n\r\n            onMain {\r", "choices": [{"text": "binding.astronomyList.items = items\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/537", "ground_truth": "                binding.astronomyDetailList.setItems(items.filterNotNull())\r\n            }\r\n\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\AstronomyFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nprivate fun restartSunsetAlerts(shouldRequestPermissions: Boolean){\r\n        if (!prefs.astronomy.sendSunsetAlerts) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/538", "ground_truth": "            return\r\n        }\r\n\r\n        SunsetAlarmReceiver.enable(this, shouldRequestPermissions)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\AstronomySettingsFragment.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport com.kylecorry.sol.units.Coordinate\noverride fun get(location: Coordinate, time: ZonedDateTime): AstroChartData {\r\n        val sun = astronomy.getSunAltitudes(location, time.toLocalDate())\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/540", "ground_truth": "        val moon = astronomy.getMoonAltitudes(location, time.toLocalDate())\r\n        return AstroChartData(sun, moon)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\commands\\DailyAstroChartDataProvider.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.ui.Colors.withAlpha\nimport androidx.core.text.scale\nimport androidx.core.text.color\nimport androidx.core.text.buildSpannedString\nprivate fun title(title: CharSequence, subtitle: CharSequence?): CharSequence {\r\n        return buildSpannedString {\r\n            append(title)\r\n            if (subtitle != null) {\r\n                color(secondaryColor.withAlpha(220)) {\r\n                    scale(subtitleScale) {\r\n                        append(\"  \u2022  \")\r\n                        append(subtitle)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/542", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\items\\BaseAstroListItemProducer.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nprivate fun formatTime(time: ZonedDateTime?): String {\r\n        if (time == null) {\r\n            return \"--:--\"\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/543", "ground_truth": "        }\r\n        return formatter.formatTime(time, false)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\items\\BaseAstroListItemProducer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.views.list.ResourceListIcon\nimport com.kylecorry.andromeda.views.list.ListItemDataAlignment\nimport com.kylecorry.andromeda.views.list.ListItemData\nimport com.kylecorry.andromeda.views.list.ListItem\nimport com.kylecorry.andromeda.views.list.ListIcon\nimport com.google.android.flexbox.JustifyContent\nimport com.google.android.flexbox.AlignItems\nprotected fun list(\r\n        id: Long,\r\n        title: CharSequence,\r\n        subtitle: CharSequence? = null,\r\n        icon: ListIcon? = null,\r\n        data: List<ListItemData> = listOf(),\r\n        onClick: (() -> Unit)? = null\r\n    ): ListItem {\r\n        return ListItem(\r\n            id,\r\n            title(title, subtitle),\r\n            null,\r\n            icon = icon,\r\n            trailingIcon = onClick?.let { ResourceListIcon(R.drawable.ic_keyboard_arrow_right){ onClick() } },\r\n            data = data,\r\n            dataAlignment = ListItemDataAlignment(\r\n                justifyContent = JustifyContent.SPACE_BETWEEN, alignItems = AlignItems.CENTER\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/545", "ground_truth": "            )\r\n        ) {\r\n            onClick?.invoke()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\items\\BaseAstroListItemProducer.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport java.time.LocalDate\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.views.list.ListItemData\nimport com.kylecorry.andromeda.views.list.ListItem\nprotected fun time(\r\n        time: ZonedDateTime?,\r\n        displayDate: LocalDate? = time?.toLocalDate(),\r\n        todayLabel: CharSequence? = null\r\n    ): List<ListItemData> {\r\n        val label = if (time != null && time.toLocalDate() != displayDate) {\r\n            formatter.formatRelativeDate(time.toLocalDate(), true)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/549", "ground_truth": "        } else {\r\n            todayLabel\r\n        }\r\n        return listOf(datapoint(formatTime(time), label))\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\astronomy\\ui\\items\\BaseAstroListItemProducer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.augmented_reality.domain.position.AugmentedRealityCoordinate\nimport com.kylecorry.trail_sense.shared.camera.AugmentedRealityUtils\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nsuspend fun getSunCalibrator(location: Coordinate): IARCalibrator = onDefault {\r\n        ARCenteredCalibrator(\r\n            AugmentedRealityCoordinate(\r\n                AugmentedRealityUtils.toEastNorthUp(\r\n                    astro.getSunAzimuth(location).value,\r\n                    astro.getSunAltitude(location),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/550", "ground_truth": "                    Float.MAX_VALUE\r\n                ), true\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\calibration\\ARCalibratorFactory.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.augmented_reality.domain.position.AugmentedRealityCoordinate\nimport com.kylecorry.trail_sense.shared.camera.AugmentedRealityUtils\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nsuspend fun getMoonCalibrator(location: Coordinate): IARCalibrator = onDefault {\r\n        ARCenteredCalibrator(\r\n            AugmentedRealityCoordinate(\r\n                AugmentedRealityUtils.toEastNorthUp(\r\n                    astro.getMoonAzimuth(location).value,\r\n                    astro.getMoonAltitude(location),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/551", "ground_truth": "                    Float.MAX_VALUE\r\n                ), true\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\calibration\\ARCalibratorFactory.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.augmented_reality.ui.AugmentedRealityView\nimport com.kylecorry.trail_sense.tools.augmented_reality.domain.position.AugmentedRealityCoordinate\nimport com.kylecorry.trail_sense.shared.views.CameraView\noverride suspend fun calibrateBearing(view: AugmentedRealityView, camera: CameraView): Float {\r\n        val actualReference = AugmentedRealityCoordinate(\r\n            view.getActualPoint(reference.position, true),\r\n            view.isTrueNorth\r\n        )\r", "choices": [{"text": ""}], "metadata": {"task_id": "Trail-Sense/552", "ground_truth": "        return SolMath.deltaAngle(\r\n            view.azimuth,\r\n            actualReference.bearing\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\calibration\\ARCenteredCalibrator.kt"}}
{"prompt": " import com.kylecorry.sol.math.Vector2\nvar focalLength Vector2?\nvar activeArray Rect?\nval linear\nprivate fun getFocalLength(): Vector2? {\r\n        if (focalLength == null) {\r\n            updateCalibration()\r", "choices": [{"text": "//            focalLength = Vector2(activeArray!!.width / 2f, activeArray!!.height / 2f)\r\n        }\r\n        return focalLength\r\n    }\n\n"}], "metadata": {"task_id": "Trail-Sense/554", "ground_truth": "        }\r\n        return focalLength\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\mapper\\CalibratedCameraAnglePixelMapper.kt"}}
{"prompt": " import com.kylecorry.sol.math.Vector2\nvar opticalCenter Vector2?\nval linear\nvar focalLength Vector2?\nprivate fun getOpticalCenter(): Vector2? {\r\n        if (opticalCenter == null) {\r\n            updateCalibration()\r", "choices": [{"text": "//            opticalCenter = Vector2(\r\n//                (width / 2).toFloat(),\r\n//                (height / 2).toFloat()\r\n//            )\r\n        }\r\n        return opticalCenter\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/555", "ground_truth": "        }\r\n        return opticalCenter\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\mapper\\CalibratedCameraAnglePixelMapper.kt"}}
{"prompt": "\n import com.kylecorry.sol.math.geometry.Size\nimport android.graphics.Rect\nprivate fun getPreActiveArraySize(): Rect? {\r\n        if (preActiveArray == null) {\r\n            val activeArray = camera.getActiveArraySize(true) ?: return null\r\n            val rotation = camera.sensorRotation.toInt()\r\n            this.preActiveArray = if (rotation == 90 || rotation == 270) {\r\n                Rect(activeArray.top, activeArray.left, activeArray.bottom, activeArray.right)\r\n            } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/556", "ground_truth": "                activeArray\r\n            }\r\n        }\r\n        return preActiveArray\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\mapper\\CalibratedCameraAnglePixelMapper.kt"}}
{"prompt": "\n import com.kylecorry.sol.math.geometry.Size\nimport android.graphics.Rect\nprivate fun getActiveArraySize(): Rect? {\r\n        if (activeArray == null) {\r\n            val activeArray = camera.getActiveArraySize(false) ?: return null\r\n            val rotation = camera.sensorRotation.toInt()\r\n            this.activeArray = if (rotation == 90 || rotation == 270) {\r\n                Rect(activeArray.top, activeArray.left, activeArray.bottom, activeArray.right)\r\n            } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/557", "ground_truth": "                activeArray\r\n            }\r\n        }\r\n        return activeArray\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\mapper\\CalibratedCameraAnglePixelMapper.kt"}}
{"prompt": "\n private fun getDistortion(): FloatArray? {\r\n        if (distortion == null) {\r\n            distortion = camera.getDistortionCorrection()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/558", "ground_truth": "        }\r\n        return distortion\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\mapper\\CalibratedCameraAnglePixelMapper.kt"}}
{"prompt": "\n import kotlin.math.sin\nimport kotlin.math.asin\nimport com.kylecorry.sol.math.Vector3\nimport com.kylecorry.sol.math.SolMath.toDegrees\nimport com.kylecorry.sol.math.SolMath.real\nfun toSpherical(vector: Vector3): Vector3 {\r\n            val r = vector.magnitude()\r\n            val theta = asin(vector.y / r).toDegrees().real(0f)\r", "choices": [{"text": "//            val theta = atan2(vector.y, vector.x).toDegrees().real(0f)\r\n            val phi = atan2(vector.z, vector.x).toDegrees().real(0f)\r\n            return Vector3(r, theta, phi)\r\n        }<file_sep>/src/main/kotlin/com/kylecorry/sol/math/matrices/Matrix4.kt\npackage com.kylecorry.sol.math.matrices\n\nimport com.kylecorry.sol.math.Vector3\nimport com.kylecorry.sol.math"}], "metadata": {"task_id": "Trail-Sense/561", "ground_truth": "            val phi = atan2(vector.x, vector.z).toDegrees().real(0f)\r\n            return Vector3(r, theta, phi)\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\mapper\\CameraAnglePixelMapper.kt"}}
{"prompt": "\n import com.kylecorry.sol.math.geometry.Size\nimport com.kylecorry.sol.math.Vector2\nimport android.graphics.RectF\noverride fun getAngle(\r\n        x: Float,\r\n        y: Float,\r\n        imageRect: RectF,\r\n        fieldOfView: Size\r\n    ): Vector2 {\r", "choices": [{"text": "//        val angle = Math.atan2(y - imageRect.centerY(), x - imageRect.centerX())\r\n//        val angle = Math.atan2(y - imageRect.centerY(), x - imageRect.centerX())\r\n//        val angle = Math.atan2(y - imageRect.centerY(), x - imageRect.centerX())\r\n//        val angle = Math.atan2(y - imageRect.centerY(), x - imageRect.centerX())\r\n//        val angle = Math.atan2(y - imageRect."}], "metadata": {"task_id": "Trail-Sense/565", "ground_truth": "        // TODO: Inverse perspective?\r\n        return linear.getAngle(x, y, imageRect, fieldOfView)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\mapper\\SimplePerspectiveCameraAnglePixelMapper.kt"}}
{"prompt": "\n import com.kylecorry.sol.math.geometry.Size\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nimport android.graphics.RectF\noverride fun getPixel(\r\n        angleX: Float,\r\n        angleY: Float,\r\n        imageRect: RectF,\r\n        fieldOfView: Size,\r\n        distance: Float?\r\n    ): PixelCoordinate {\r", "choices": [{"text": ""}], "metadata": {"task_id": "Trail-Sense/566", "ground_truth": "        val world = toCartesian(angleX, angleY, distance ?: 1f)\r\n        return getPixel(world, imageRect, fieldOfView)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\mapper\\SimplePerspectiveCameraAnglePixelMapper.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.camera.AugmentedRealityUtils\nfun fromSpherical(\r\n            bearing: Float,\r\n            elevation: Float,\r\n            distance: Float,\r\n            isTrueNorth: Boolean = true\r\n        ): AugmentedRealityCoordinate {\r\n            return AugmentedRealityCoordinate(\r\n                AugmentedRealityUtils.toEastNorthUp(bearing, elevation, distance),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/568", "ground_truth": "                isTrueNorth\r\n            )\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\position\\AugmentedRealityCoordinate.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.augmented_reality.ui.AugmentedRealityView\nimport com.kylecorry.trail_sense.shared.camera.AugmentedRealityUtils\nimport com.kylecorry.sol.units.Coordinate\noverride fun getAugmentedRealityCoordinate(view: AugmentedRealityView): AugmentedRealityCoordinate {\r\n        return AugmentedRealityCoordinate(\r\n            AugmentedRealityUtils.toEastNorthUp(\r\n                view.location,\r\n                view.altitude,\r\n                location,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/570", "ground_truth": "                getActualElevation(view)\r\n            ),\r\n            true\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\position\\GeographicARPoint.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.augmented_reality.ui.AugmentedRealityView\nprivate fun getActualElevation(view: AugmentedRealityView): Float {\r\n        return if (isElevationRelative){\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/571", "ground_truth": "            view.altitude + (elevation ?: 0f)\r\n        } else {\r\n            elevation ?: view.altitude\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\domain\\position\\GeographicARPoint.kt"}}
{"prompt": " import android.content.DialogInterface\nvar onDismissListener\nvar astronomyOverrideDate LocalDate?\noverride fun onDismiss(dialog: DialogInterface) {\r", "choices": [{"text": "astronomyOverrideDate = null\r\nonDismissListener?.invoke(astronomyOverrideDate)\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/573", "ground_truth": "        super.onDismiss(dialog)\r\n        onDismissListener?.invoke()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\ARLayersBottomSheet.kt"}}
{"prompt": "\n import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        binding.title.rightButton.setOnClickListener {\r\n            dismiss()\r\n        }\r\n\r\n        val preferences = ARLayersBottomSheetPreferenceFragment()\r\n        preferences.astronomyOverrideDate = astronomyOverrideDate\r\n        preferences.setOnAstronomyDateChangeListener {\r\n            astronomyOverrideDate = it\r\n        }\r\n\r", "choices": [{"text": "//        val preferences = ARLayersBottomSheetPreferenceFragment()\r\n//        preferences.astronomyOverrideDate = astronomyOverrideDate\r\n//        preferences.setOnAstronomyDateChangeListener {\r\n//            astronomyOverrideDate = it\r\n//        }\r\n\r\n        val preferencesFragment = ARLayersBottomSheetPreferenceFragment()\r\n        preferencesFragment.astronomyOverrideDate = astronomyOverrideDate\r\n        preferencesFragment.setOnAstronomyDateChangeListener {\r\n            astronomyOverrideDate = it\r\n        }\r\n\r\n        val preferencesFragment2 = ARLayersBottomSheetPreferenceFragment()\r\n        preferencesFragment2.astronomyOverrideDate ="}], "metadata": {"task_id": "Trail-Sense/574", "ground_truth": "        replaceChildFragment(\r\n            preferences,\r\n            binding.preferencesFragment.id\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\ARLayersBottomSheet.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.canvas.PixelCircle\nfun getViewLocation(view: AugmentedRealityView): PixelCircle {\r\n        val coordinates = point.getAugmentedRealityCoordinate(view)\r\n        val angularDiameter = point.getAngularDiameter(view)\r\n        val diameter = view.sizeToPixel(angularDiameter)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/576", "ground_truth": "        return PixelCircle(\r\n            view.toPixel(coordinates),\r\n            diameter / 2f\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\ARMarker.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport com.kylecorry.trail_sense.R\nimport android.view.View\nprivate fun onSunFocused(time: ZonedDateTime): Boolean {\r\n        binding.arView.focusText =\r\n            getString(R.string.sun) + \"\\n\" + formatter.formatRelativeDateTime(\r", "choices": [{"text": "time,\r\nZonedDateTime.now(),\r\nTimeUnit.DAYS.toMillis(1),\r\nTimeUnit.HOURS.toMillis(1),\r\nTimeUnit.MINUTES.toMillis(1)\r\n            )\r\n        return true\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/580", "ground_truth": "                time,\r\n                includeSeconds = false\r\n            )\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityFragment.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.science.astronomy.moon.MoonPhase\nimport android.view.View\nprivate fun onMoonFocused(time: ZonedDateTime, phase: MoonPhase): Boolean {\r\n        binding.arView.focusText =\r\n            getString(R.string.moon) + \"\\n\" + formatter.formatRelativeDateTime(\r\n                time,\r\n                includeSeconds = false\r\n            ) + \"\\n${formatter.formatMoonPhase(phase.phase)} (${\r\n                formatter.formatPercentage(\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/581", "ground_truth": "                    phase.illumination\r\n                )\r\n            })\"\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.navigation.ui.IMappablePath\nprivate fun onPathFocused(path: IMappablePath): Boolean {\r", "choices": [{"text": ""}], "metadata": {"task_id": "Trail-Sense/582", "ground_truth": "        binding.arView.focusText = path.name\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.augmented_reality.ui.guide.ARGuide\nimport com.kylecorry.trail_sense.R\nimport android.view.View\nprivate fun changeGuide(guide: ARGuide?) {\r\n        this.guide?.stop(binding.arView, binding.guidancePanel)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/584", "ground_truth": "        this.guide = guide\r\n        this.guide?.start(binding.arView, binding.guidancePanel)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.alerts.dialog\nimport androidx.core.view.isVisible\nimport android.view.View\nprivate fun startCalibration() {\r\n        binding.calibrationPanel.isVisible = true\r\n        val isSunUp = astronomyService.isSunUp(binding.arView.location)\r\n        dialog(\r\n            getString(R.string.calibrate),\r\n            getString(\r\n                R.string.ar_calibration_instructions,\r\n                if (isSunUp) getString(R.string.sun) else getString(R.string.moon)\r\n            ),\r\n        ) { cancelled ->\r", "choices": [{"text": "binding.calibrationPanel.isVisible = false\r\n            if (!cancelled) {\r\n                binding.arView.startCalibration()\r\n            }\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "Trail-Sense/585", "ground_truth": "            if (cancelled) {\r\n                stopCalibration()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nimport android.view.View\nprivate fun calibrate() {\r\n        inBackground {\r\n            val useGyro = userPrefs.augmentedReality.useGyroOnlyAfterCalibration\r\n            val calibrator = if (astronomyService.isSunUp(binding.arView.location)) {\r\n                calibrationFactory.getSunCalibrator(binding.arView.location)\r\n            } else {\r\n                calibrationFactory.getMoonCalibrator(binding.arView.location)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/586", "ground_truth": "            }\r\n            binding.arView.calibrate(calibrator, useGyro)\r\n            stopCalibration()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport androidx.navigation.NavController\nimport androidx.core.os.bundleOf\nimport android.os.Bundle\nfun open(\r\n            navController: NavController,\r\n            mode: ARMode = ARMode.Normal,\r\n            extras: Bundle? = null\r\n        ) {\r\n            navController.navigate(\r\n                R.id.augmentedRealityFragment, bundleOf(\r", "choices": [{"text": "//                    \"mode\" to mode.name,\r\n                    \"extras\" to extras\r\n                )\r\n            )\r\n        }<file_sep>/app/src/main/java/com/kylecorry/trail_sense/navigation/ui/NavigationFragment.kt\npackage com.kylecorry.trail_sense.navigation.ui\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\nimport androidx.navigation.NavController\nimport androidx.navigation.Navigation\nimport com.kylecor"}], "metadata": {"task_id": "Trail-Sense/589", "ground_truth": "                    \"mode\" to mode.id,\r\n                    \"extras\" to extras\r\n                )\r\n            )\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.augmented_reality.ui.layers.ARLayer\nfun setLayers(layers: List<ARLayer>) {\r\n        synchronized(layerLock) {\r\n            this.layers.clear()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/592", "ground_truth": "            this.layers.addAll(layers)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityView.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.augmented_reality.domain.position.ARPoint\nfun guideTo(\r\n        guidePoint: ARPoint,\r\n        thresholdDegrees: Float? = null,\r\n        onReached: () -> Unit = { clearGuide() }\r\n    ) {\r\n        this.guidePoint = guidePoint\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/593", "ground_truth": "        guideThreshold = thresholdDegrees\r\n        onGuideReached = onReached\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityView.kt"}}
{"prompt": "\n fun clearGuide() {\r\n        guidePoint = null\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/594", "ground_truth": "        guideThreshold = null\r\n        onGuideReached = null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityView.kt"}}
{"prompt": "\n override fun setup() {\r", "choices": [{"text": "//    val intent = Intent(this, MainActivity::class.java)\r\n//    intent.putExtra(\"name\", \"<NAME>\")\r\n//    startActivity(intent)\r\n//    finish()\r\n    val intent = Intent(this, MainActivity::class.java)\r\n    intent.putExtra(\"name\", \"<NAME>\")\r\n    startActivityForResult(intent, 100)\r\n}\r\n\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n    super.onActivityResult(requestCode, resultCode, data)\r\n    if (requestCode == 100"}], "metadata": {"task_id": "Trail-Sense/595", "ground_truth": "        isSetup = true\r\n        updateOrientation()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityView.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.text\nprivate fun drawFocusText() {\r\n        val textToRender = focusText ?: return\r\n\r\n        drawText(\r\n            textToRender,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/596", "ground_truth": "            width / 2f,\r\n            height / 2f + reticleDiameter / 2f + dp(8f),\r\n            drawer.sp(16f)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityView.kt"}}
{"prompt": " import android.graphics.Color\nvar showReticle Boolean\nval reticleDiameter Float\nvar reticleColor\nprivate fun drawReticle() {\r\n        stroke(reticleColor)\r\n        strokeWeight(dp(2f))\r", "choices": [{"text": "//        line(0f, 0f, 0f, reticleDiameter)\r\n//        line(0f, 0f, reticleDiameter, 0f)\r\n        line(0f, 0f, reticleDiameter, reticleDiameter)\r\n        line(0f, reticleDiameter, reticleDiameter, 0f)\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/597", "ground_truth": "        noFill()\r\n        circle(width / 2f, height / 2f, reticleDiameter)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityView.kt"}}
{"prompt": "\n import com.kylecorry.sol.math.Vector3\nfun getActualPoint(point: Vector3, isPointTrueNorth: Boolean): Vector3 {\r\n        return if (isTrueNorth && !isPointTrueNorth) {\r\n            toTrueNorth.rotate(point)\r\n        } else if (!isTrueNorth && isPointTrueNorth) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/599", "ground_truth": "            fromTrueNorth.rotate(point)\r\n        } else {\r\n            point\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityView.kt"}}
{"prompt": "\n fun unbind() {\r\n        owner?.lifecycle?.removeObserver(lifecycleObserver)\r\n        syncTimer.stop()\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/601", "ground_truth": "        fovRunner.cancel()\r\n        cameraMapper = null\r\n        camera = null\r\n        owner = null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityView.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.views.CameraView\nimport androidx.lifecycle.findViewTreeLifecycleOwner\nimport androidx.lifecycle.LifecycleOwner\nimport androidx.lifecycle.Lifecycle\nimport android.view.ViewGroup\nfun bind(\r\n        camera: CameraView,\r\n        lifecycleOwner: LifecycleOwner? = null,\r\n        defaultLayoutParams: ViewGroup.LayoutParams = ViewGroup.LayoutParams(\r\n            ViewGroup.LayoutParams.WRAP_CONTENT,\r\n            ViewGroup.LayoutParams.WRAP_CONTENT\r\n        )\r\n    ) {\r\n        this.camera = camera\r\n        owner = lifecycleOwner ?: this.findViewTreeLifecycleOwner() ?: return\r\n\r\n        if (layoutParams == null) {\r\n            layoutParams = defaultLayoutParams\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.shared.views.CameraView\nimport androidx.lifecycle.findViewTreeLifecycleOwner\nimport androidx.lifecycle.LifecycleOwner\nimport androidx.lifecycle.Lifecycle\nimport android.view.ViewGroup\nfun bind(\r\n        camera: CameraView,\r\n        lifecycleOwner: LifecycleOwner? = null,\r\n        defaultLayoutParams: ViewGroup.LayoutParams = ViewGroup.LayoutParams(\r\n            ViewGroup.LayoutParams.WRAP_CONTENT,\r\n            ViewGroup.LayoutParams.WRAP_CONTENT\r\n        )\r\n    ) {\r\n        this.camera = camera\r\n        owner = lifecycleOwner?: this.findViewTreeLifecycleOwner()?: return\r\n\r\n        if (layoutParams == null) {\r\n            layoutParams = defaultLayoutParams\r\n//            layoutParams = ViewGroup.LayoutParams(\r\n//                ViewGroup.LayoutParams.WRAP_CONTENT,\r\n//                ViewGroup.LayoutParams.WRAP_CONTENT\r\n//            )\r\n        }\r\n\r\n        owner.addObserver(this)\r\n        owner.lifecycle.addObserver(this)\r\n    }\r\n\r\n    override fun onStateChanged(source: LifecycleOwner, event: Lifecycle.Event) {\r\n        when (event) {\r\n            Lifecycle.Event.ON_CREATE -> {\r\n                camera.onResume()\r\n            }\r\n            Lifecycle.Event.ON_START -> {\r\n                camera.onResume()\r\n            }\r\n            Lifecycle.Event.ON_RE"}], "metadata": {"task_id": "Trail-Sense/602", "ground_truth": "        }\r\n\r\n        // Cancel fovRunner on pause\r\n        owner?.lifecycle?.addObserver(lifecycleObserver)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityView.kt"}}
{"prompt": " import com.kylecorry.sol.math.geometry.Size\nval orientation\nvar backgroundFillColor Int\nvar hadFocus\noverride fun onSizeChanged(w: Int, h: Int, oldw: Int, oldh: Int) {\r", "choices": [{"text": "super.onSizeChanged(w, h, oldw, oldh)\r\nbackgroundFillColor = Color.BLACK\r\n}\r\noverride fun onDraw(canvas: Canvas) {\r\nsuper.onDraw(canvas)\r\nval paint = Paint()\r\npaint.color = backgroundFillColor\r\ncanvas.drawRect(0f, 0f, width.toFloat(), height.toFloat(), paint)\r\n}\r\noverride fun onFocusChanged(focused: Boolean, direction: Int, previouslyFocusedRect: Rect?) {\r\nsuper.onFocusChanged(focused, direction,"}], "metadata": {"task_id": "Trail-Sense/603", "ground_truth": "        previewRect = null\r\n        syncWithCamera()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityView.kt"}}
{"prompt": "\nval orientation\nvar previewRect RectF?\nvar hadFocus\n fun resetCalibration() {\r", "choices": [{"text": "val orientation\r\nvar previewRect RectF?\r\nvar hadFocus\r\n fun resetCalibration() {\r\nval orientation\r\nvar previewRect RectF?\r\nvar hadFocus\r\n fun resetCalibration() {\r\nval orientation\r\nvar previewRect RectF?\r\nvar hadFocus\r\n fun resetCalibration() {\r\nval orientation\r\nvar previewRect RectF?\r\nvar hadFocus\r\n fun resetCalibration() {\r\nval orientation\r\nvar previewRect RectF?\r\nvar hadFocus\r\n fun resetCalibration() {\r\nval orientation\r\nvar previewRect RectF?\r\n"}], "metadata": {"task_id": "Trail-Sense/605", "ground_truth": "        calibrationBearingOffset = 0f\r\n        orientationSensor = geomagneticOrientationSensor\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\AugmentedRealityView.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.science.astronomy.Astronomy\nimport android.content.Context\nprivate fun getOptionName(context: Context, option: AstronomyObject): String {\r\n        return when (option) {\r\n            AstronomyObject.Sun -> context.getString(R.string.sun)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/608", "ground_truth": "            AstronomyObject.Moon -> context.getString(R.string.moon)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\guide\\AstronomyARGuide.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.augmented_reality.ui.AugmentedRealityView\nimport com.kylecorry.trail_sense.R\nimport android.widget.FrameLayout\noverride fun stop(arView: AugmentedRealityView, panel: FrameLayout) {\r\n        panel.removeAllViews()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/610", "ground_truth": "        job?.cancel()\r\n        arView.clearGuide()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\guide\\NavigationARGuide.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.augmented_reality.ui.AugmentedRealityView\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun onClick(\r\n        drawer: ICanvasDrawer,\r\n        view: AugmentedRealityView,\r\n        pixel: PixelCoordinate\r\n    ): Boolean {\r\n        return currentSunLayer.onClick(drawer, view, pixel) ||\r\n                currentMoonLayer.onClick(drawer, view, pixel) ||\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/612", "ground_truth": "                sunLayer.onClick(drawer, view, pixel) ||\r\n                moonLayer.onClick(drawer, view, pixel)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARAstronomyLayer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.augmented_reality.ui.AugmentedRealityView\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun onFocus(drawer: ICanvasDrawer, view: AugmentedRealityView): Boolean {\r\n        return currentSunLayer.onFocus(drawer, view) ||\r\n                currentMoonLayer.onFocus(drawer, view) ||\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/613", "ground_truth": "                sunLayer.onFocus(drawer, view) ||\r\n                moonLayer.onFocus(drawer, view)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARAstronomyLayer.kt"}}
{"prompt": "\n protected fun finalize() {\r", "choices": [{"text": "// \tSystem.out.println(\"finalize\");\r\n }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/615", "ground_truth": "        _loader?.clear()\r\n        _loader = null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARBeaconLayer.kt"}}
{"prompt": "\n override fun invalidate() {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/616", "ground_truth": "        areBeaconsUpToDate = false\r\n        layer.invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARBeaconLayer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.augmented_reality.ui.AugmentedRealityView\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun draw(drawer: ICanvasDrawer, view: AugmentedRealityView) {\r\n        lineLayer.draw(drawer, view)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/617", "ground_truth": "\r\n        labels.forEach {\r\n            drawLabel(drawer, view, it.second, it.first)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARGridLayer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.augmented_reality.ui.AugmentedRealityView\nimport com.kylecorry.trail_sense.tools.augmented_reality.domain.position.AugmentedRealityCoordinate\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nprivate fun getPixel(view: AugmentedRealityView, bearing: Float): PixelCoordinate {\r\n        val offset = 2f\r\n        return view.toPixel(\r\n            AugmentedRealityCoordinate.fromSpherical(\r\n                bearing,\r\n                offset,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/618", "ground_truth": "                distance,\r\n                useTrueNorth\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARGridLayer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.augmented_reality.ui.ARLine\nfun setLines(lines: List<ARLine>) {\r\n        synchronized(lineLock) {\r\n            this.lines.clear()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/620", "ground_truth": "            this.lines.addAll(lines)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARLineLayer.kt"}}
{"prompt": "\n fun clearLines() {\r\n        synchronized(lineLock) {\r", "choices": [{"text": "//            if (lineLock.isHeldByCurrentThread()) {\r\n                lineLock.unlock();\r\n//            }\r\n        }\r\n    }\r\n\r\n    fun clearLines(line: Int) {\r\n        synchronized(lineLock) {\r\n//            if (lineLock.isHeldByCurrentThread()) {\r\n                lineLock.unlock();\r\n//            }\r\n        }\r\n    }\r\n\r\n    fun clearLines(line: Int, count: Int) {\r\n        synchronized(lineLock) {\r\n//            if (lineLock.isHeldByCurrentThread()) {\r\n                lineLock.unlock();\r\n//           "}], "metadata": {"task_id": "Trail-Sense/621", "ground_truth": "            lines.clear()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARLineLayer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.augmented_reality.ui.ARMarker\nfun setMarkers(markers: List<ARMarker>) {\r\n        synchronized(lock) {\r\n            this.markers.clear()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/623", "ground_truth": "            this.markers.addAll(markers)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARMarkerLayer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.augmented_reality.ui.ARMarker\nfun addMarker(marker: ARMarker) {\r\n        synchronized(lock) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/624", "ground_truth": "            markers.add(marker)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARMarkerLayer.kt"}}
{"prompt": "\n fun clearMarkers() {\r\n        synchronized(lock) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/625", "ground_truth": "            markers.clear()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARMarkerLayer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.augmented_reality.ui.AugmentedRealityView\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride suspend fun update(drawer: ICanvasDrawer, view: AugmentedRealityView) {\r\n        val minimumPixelSize = drawer.dp(minimumDpSize)\r\n        val maximumPixelSize = maximumDpSize?.let { drawer.dp(it) } ?: Float.MAX_VALUE\r\n        renderedMarkers = synchronized(lock) {\r\n            markers.mapNotNull {\r\n                val circle = getCircle(it, view, minimumPixelSize, maximumPixelSize)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/626", "ground_truth": "                    ?: return@mapNotNull null\r\n                it to circle\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARMarkerLayer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.augmented_reality.ui.AugmentedRealityView\nimport com.kylecorry.trail_sense.shared.canvas.PixelCircle\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun draw(drawer: ICanvasDrawer, view: AugmentedRealityView) {\r\n        potentialFocusPoints.clear()\r\n        val center = PixelCoordinate(view.width / 2f, view.height / 2f)\r\n        val reticle = PixelCircle(center, view.reticleDiameter / 2f)\r\n        val markers = synchronized(lock) {\r\n            renderedMarkers.toList()\r\n        }\r\n        markers.forEach {\r\n            it.first.draw(view, drawer, it.second)\r", "choices": [{"text": "       }\r\n        drawer.drawCircle(reticle, view.reticleColor)\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/627", "ground_truth": "            if (reticle.intersects(it.second)) {\r\n                potentialFocusPoints.add(it)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARMarkerLayer.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.augmented_reality.ui.AugmentedRealityView\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\nval bounds\nval markerLayer\nval center\noverride fun draw(drawer: ICanvasDrawer, view: AugmentedRealityView) {\r", "choices": [{"text": "drawer.drawRect(bounds, Color.RED)\r\ndrawer.drawRect(markerLayer, Color.GREEN)\r\ndrawer.drawRect(center, Color.BLUE)\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/629", "ground_truth": "        lineLayer.draw(drawer, view)\r\n        markerLayer.draw(drawer, view)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARPathLayer.kt"}}
{"prompt": "\n override fun invalidate() {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/630", "ground_truth": "        lineLayer.invalidate()\r\n        markerLayer.invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARPathLayer.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nprivate fun project(\r\n        location: Coordinate\r\n    ): PixelCoordinate {\r\n        return projection?.toPixels(location)?.let {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/633", "ground_truth": "            PixelCoordinate(it.x, it.y)\r\n        } ?: PixelCoordinate(0f, 0f)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARPathLayer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.extensions.squaredDistanceTo\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.math.SolMath.square\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nprivate fun toLocation(pixel: PixelCoordinate): Coordinate? {\r\n        val squareDistance = pixel.squaredDistanceTo(center)\r\n        if (squareDistance > squareViewDistance) {\r\n            // The point is too far away\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/634", "ground_truth": "            return null\r\n        }\r\n\r\n        return projection?.toCoordinate(Vector2(pixel.x, pixel.y))\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\augmented_reality\\ui\\layers\\ARPathLayer.kt"}}
{"prompt": "\n import androidx.room.Entity\nfun from(reading: BatteryReading): BatteryReadingEntity {\r\n            return BatteryReadingEntity(\r\n                reading.percent,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/637", "ground_truth": "                reading.capacity,\r\n                reading.isCharging,\r\n                reading.time\r\n            )\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\domain\\BatteryReadingEntity.kt"}}
{"prompt": "\n import java.time.Duration\nfun getTimeUntilEmpty(capacity: Float, capacityDrainPerHour: Float): Duration? {\r\n        if (capacityDrainPerHour >= 0) {\r\n            return null\r\n        }\r", "choices": [{"text": ""}], "metadata": {"task_id": "Trail-Sense/638", "ground_truth": "\r\n        val hours = -(capacity / capacityDrainPerHour)\r\n\r\n        return hours(hours.toDouble())\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\domain\\PowerService.kt"}}
{"prompt": "\n import java.time.Duration\nprivate fun getRate(\r\n        first: BatteryReading,\r\n        second: BatteryReading,\r\n        hasCapacity: Boolean = first.capacity != 0f\r\n    ): Float? {\r\n        val capacityDiff =\r\n            if (hasCapacity) second.capacity - first.capacity else second.percent - first.percent\r\n        val timeDiff = Duration.between(first.time, second.time).toMillis() / (1000f * 60f * 60f)\r\n\r\n        if (timeDiff == 0f) {\r\n            return null\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/639", "ground_truth": "        }\r\n\r\n        return (capacityDiff / timeDiff)\r\n\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\domain\\PowerService.kt"}}
{"prompt": "\n import java.time.Duration\nimport com.kylecorry.sol.time.Time.hours\nfun getTimeUntilFull(\r\n        capacity: Float,\r\n        maxCapacity: Float,\r\n        capacityGainPerHour: Float\r\n    ): Duration? {\r\n        if (capacityGainPerHour <= 0 && maxCapacity >= capacity) {\r\n            return null\r\n        }\r\n\r\n        val remaining = maxCapacity - capacity\r\n\r\n        val hours = remaining / capacityGainPerHour\r\n\r\n        if (hours < 0){\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/640", "ground_truth": "            return Duration.ZERO\r\n        }\r\n\r\n        return hours(hours.toDouble())\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\domain\\PowerService.kt"}}
{"prompt": "\n override suspend fun doWork(): Result {\r", "choices": [{"text": "// do something\r\n return Result.success()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/642", "ground_truth": "        BatteryLogCommand(applicationContext).execute()\r\n        return Result.success()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\infrastructure\\BatteryLogWorker.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.background.PeriodicTaskSchedulerFactory\nimport com.kylecorry.andromeda.background.IPeriodicTaskScheduler\nimport android.content.Context\nprivate fun scheduler(context: Context): IPeriodicTaskScheduler {\r\n            return PeriodicTaskSchedulerFactory(context).deferrable(\r\n                BatteryLogWorker::class.java,\r", "choices": [{"text": "//                BatteryLogWorker::class.java,\r\n                \"BatteryLogWorker\",\r\n                \"BatteryLogWorker\",\r\n                \"BatteryLogWorker\",\r\n                \"BatteryLogWorker\",\r\n                \"BatteryLogWorker\",\r\n                \"BatteryLogWorker\",\r\n                \"BatteryLogWorker\",\r\n                \"BatteryLogWorker\",\r\n                \"BatteryLogWorker\",\r\n                \"BatteryLogWorker\",\r\n                \"BatteryLogWorker\",\r\n                \"BatteryLogWorker\",\r\n                \"BatteryLogWorker\",\r\n                \"BatteryLogWorker\",\r\n                \"BatteryLogWorker\",\r\n                \"BatteryLogWorker\",\r\n                \"BatteryLogWorker\",\r\n                \"BatteryLogWorker\",\r\n                \"BatteryLogWorker\",\r\n                \""}], "metadata": {"task_id": "Trail-Sense/644", "ground_truth": "                UNIQUE_ID\r\n            )\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\infrastructure\\BatteryLogWorker.kt"}}
{"prompt": "\nval preference\n override fun execute() {\r\n        if (preference.isLowPowerModeOn) {\r", "choices": [{"text": "//            val intent = Intent(Settings.ACTION_POWER_USAGE_SUMMARY)\r\n//            startActivity(intent)\r\n            val intent = Intent(Settings.ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS)\r\n            startActivity(intent)\r\n        } else {\r\n            Toast.makeText(context, \"Low Power Mode is already off\", Toast.LENGTH_SHORT).show()\r\n        }\r\n    }\r\n}<file_sep>/app/src/main/java/com/example/myapplication/ui/main/MainViewModel.kt\npackage com.example.myapplication.ui.main\r\n\r\nimport"}], "metadata": {"task_id": "Trail-Sense/647", "ground_truth": "            Alerts.toast(context, context.getString(R.string.low_power_mode_on_message))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\infrastructure\\commands\\PowerSavingModeAlertCommand.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.weather.infrastructure.WeatherUpdateScheduler\nimport com.kylecorry.trail_sense.tools.paths.infrastructure.BacktrackScheduler\nimport android.app.Activity\nfun enable(activity: Activity? = null) {\r\n        prefs.isLowPowerModeOn = true\r\n        if (prefs.lowPowerModeDisablesWeather) {\r\n            WeatherUpdateScheduler.stop(context)\r\n        }\r\n\r\n        if (prefs.lowPowerModeDisablesBacktrack) {\r\n            BacktrackScheduler.stop(context)\r\n        }\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/648", "ground_truth": "\r\n        StepCounterService.stop(context)\r\n\r\n        activity?.recreate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\infrastructure\\LowPowerMode.kt"}}
{"prompt": "\n import android.content.Context\n @Synchronized\r\n        fun getInstance(context: Context): BatteryRepo {\r\n            if (instance == null) {\r\n                instance = BatteryRepo(context.applicationContext)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/650", "ground_truth": "            }\r\n            return instance!!\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\infrastructure\\persistence\\BatteryRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.CustomUiUtils\nprivate fun update() {\r\n        CustomUiUtils.setButtonState(\r\n            button,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/651", "ground_truth": "            lowerPowerMode.isEnabled()\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\quickactions\\QuickActionLowPowerMode.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\noverride fun onCreate() {\r\n        super.onCreate()\r\n        button.setImageResource(R.drawable.ic_tool_battery)\r\n        button.setOnClickListener {\r\n            if (lowerPowerMode.isEnabled()){\r\n                prefs.power.userEnabledLowPower = false\r\n                lowerPowerMode.disable(fragment.activity)\r\n            } else {\r\n                prefs.power.userEnabledLowPower = true\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/652", "ground_truth": "                lowerPowerMode.enable(fragment.activity)\r\n            }\r\n        }\r\n        update()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\quickactions\\QuickActionLowPowerMode.kt"}}
{"prompt": " import com.kylecorry.trail_sense.R\nval lowerPowerMode\nval prefs\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nprefs = PreferenceManager.getDefaultSharedPreferences(this)\r\nlowerPowerMode = prefs.getBoolean(\"lower_power_mode\", false)\r\nif (lowerPowerMode) {\r\nsetPowerMode(PowerManager.PARTIAL_WAKE_LOCK)\r\n} else {\r\nsetPowerMode(PowerManager.FULL_WAKE_LOCK)\r\n}\r\n}\r\noverride fun onPause() {\r\nsuper.onPause()\r\nif (lowerPowerMode) {\r\nsetPowerMode(PowerManager.PARTIAL_WAKE_LOCK)\r"}], "metadata": {"task_id": "Trail-Sense/653", "ground_truth": "        super.onResume()\r\n        update()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\quickactions\\QuickActionLowPowerMode.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.battery.domain.BatteryReading\nimport com.kylecorry.trail_sense.shared.CustomUiUtils.getPrimaryColor\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.andromeda.views.chart.Chart\nimport com.kylecorry.andromeda.core.system.Resources\nfun plot(readings: List<BatteryReading>, showCapacity: Boolean = false) {\r\n        val data = Chart.getDataFromReadings(readings.map {\r\n            Reading(\r\n                if (showCapacity) it.capacity else it.percent,\r\n                it.time\r\n            )\r\n        }) {\r\n            it\r\n        }\r\n\r\n        val color = Resources.getPrimaryColor(chart.context)\r\n\r\n        chart.plot(\r", "choices": [{"text": "//            data,\r\n            data,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,\r\n            color,"}], "metadata": {"task_id": "Trail-Sense/654", "ground_truth": "            AreaChartLayer(data, color, color.withAlpha(150)),\r\n        )\r\n\r\n        chart.invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\ui\\BatteryChart.kt"}}
{"prompt": "\n override fun onPause() {\r\n        super.onPause()\r\n        serviceIntervalometer.stop()\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/656", "ground_truth": "        batteryUpdateTimer.stop()\r\n        intervalometer.stop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\ui\\FragmentToolBattery.kt"}}
{"prompt": "\nval formatService\nvar servicesList ListView<RunningService>\nval batteryService\n private fun updateServices() {\r", "choices": [{"text": "servicesList.adapter = object : ArrayAdapter<RunningService>(this, android.R.layout.simple_list_item_1, servicesList) {\r\noverride fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\nval view = super.getView(position, convertView, parent)\r\nval service = servicesList[position]\r\nval label = view.findViewById<TextView>(android.R.id.text1)\r\nlabel.text = service.label\r\nreturn view\r\n}\r\n}\r\n}\r\noverride fun onCreate("}], "metadata": {"task_id": "Trail-Sense/658", "ground_truth": "        val services = batteryService.getRunningServices(requireContext())\r\n        servicesList.setData(services)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\battery\\ui\\FragmentToolBattery.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.colors.AppColor\nimport com.kylecorry.sol.units.Coordinate\nimport androidx.annotation.ColorInt\nimport android.graphics.Color\nfun temporary(\r\n            coordinate: Coordinate,\r\n            id: Long = 0L,\r\n            name: String = \"\",\r\n            visible: Boolean = true,\r\n            comment: String? = null,\r\n            parentId: Long? = null,\r\n            elevation: Float? = null,\r\n            owner: BeaconOwner = BeaconOwner.User,\r\n            @ColorInt color: Int = AppColor.Orange.color,\r\n            icon: BeaconIcon? = null\r\n        ): Beacon {\r\n            return Beacon(\r\n                id,\r\n                name,\r\n                coordinate,\r\n                visible,\r\n                comment,\r\n                parentId,\r\n                elevation,\r\n                true,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/659", "ground_truth": "                owner,\r\n                color,\r\n                icon\r\n            )\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\domain\\Beacon.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\noverride suspend fun navigateTo(beacon: Beacon) {\r\n        val id = if (beacon.id == 0L) {\r\n            onIO {\r\n                beaconService.add(beacon)\r\n            }\r\n        } else {\r\n            beacon.id\r\n        }\r\n\r\n        withContext(mainDispatcher) {\r\n            navigation.navigate(\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/660", "ground_truth": "                R.id.action_navigation,\r\n                listOf(\"destination\" to id)\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\BeaconNavigator.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.alerts.Alerts\nfun execute(beacon: Beacon) {\r\n        Alerts.dialog(\r\n            context,\r\n            context.getString(R.string.delete),\r\n            beacon.name\r\n        ) { cancelled ->\r\n            if (!cancelled) {\r\n                scope.launch {\r\n                    onIO {\r\n                        service.delete(beacon)\r\n                    }\r\n                    onMain {\r\n                        onDeleted()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/661", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\commands\\DeleteBeaconCommand.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.IBeacon\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\noverride suspend fun load(search: String?, group: Long?): List<IBeacon> = onIO {\r\n        if (search.isNullOrBlank()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/662", "ground_truth": "            getBeaconsByGroup(group)\r\n        } else {\r\n            getBeaconsBySearch(search, group)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\loading\\BeaconLoader.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nprivate suspend fun getLastSignalBeacon(): Beacon? {\r\n        return if (prefs.showLastSignalBeacon) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/664", "ground_truth": "            beaconService.getTemporaryBeacon(BeaconOwner.CellSignal)\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\loading\\BeaconLoader.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nfun toBeacon(): Beacon {\r\n        return Beacon(\r\n            id,\r\n            name,\r\n            coordinate,\r\n            visible,\r\n            comment,\r\n            beaconGroupId,\r\n            elevation,\r\n            temporary = temporary,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/665", "ground_truth": "            color = color.color,\r\n            owner = owner,\r\n            icon = icon\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\persistence\\BeaconEntity.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.beacons.domain.BeaconGroup\nimport androidx.room.Entity\nfun from(group: BeaconGroup): BeaconGroupEntity {\r\n            return BeaconGroupEntity(group.name, group.parentId).also {\r", "choices": [{"text": "it.id = group.id\r\n            }\r\n        }\n"}], "metadata": {"task_id": "Trail-Sense/666", "ground_truth": "                it.id = group.id\r\n            }\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\persistence\\BeaconGroupEntity.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\noverride suspend fun addBeacon(beacon: BeaconEntity): Long {\r\n        return if (beacon.id != 0L) {\r\n            beaconDao.update(beacon)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/667", "ground_truth": "            beacon.id\r\n        } else {\r\n            beaconDao.insert(beacon)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\persistence\\BeaconRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\noverride suspend fun addBeaconGroup(group: BeaconGroupEntity): Long {\r\n        return if (group.id != 0L) {\r\n            beaconGroupDao.update(group)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/668", "ground_truth": "            group.id\r\n        } else {\r\n            beaconGroupDao.insert(group)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\persistence\\BeaconRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\noverride suspend fun deleteBeaconGroup(group: BeaconGroupEntity) {\r\n        // Delete beacons\r\n        beaconDao.deleteInGroup(group.id)\r\n\r\n        // Delete groups\r\n        val groups = getGroupsWithParent(group.id)\r\n        for (subGroup in groups) {\r\n            deleteBeaconGroup(subGroup)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/669", "ground_truth": "        }\r\n\r\n        // Delete self\r\n        beaconGroupDao.delete(group)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\persistence\\BeaconRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport android.content.Context\n @Synchronized\r\n        fun getInstance(context: Context): BeaconRepo {\r\n            if (instance == null) {\r\n                instance = BeaconRepo(context.applicationContext)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/671", "ground_truth": "            }\r\n            return instance!!\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\persistence\\BeaconRepo.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.IBeacon\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\noverride suspend fun getBeacons(\r\n        groupId: Long?,\r\n        includeGroups: Boolean,\r\n        maxDepth: Int?,\r\n        includeRoot: Boolean\r\n    ): List<IBeacon> {\r\n        return onIO {\r\n            val root = listOfNotNull(\r\n                if (includeRoot) {\r\n                    loader.getGroup(groupId)\r\n                } else {\r\n                    null\r\n                }\r\n            )\r\n\r\n            val beacons = root + loader.getChildren(groupId, maxDepth)\r\n            if (includeGroups) {\r\n                beacons\r", "choices": [{"text": "//                beacons.map { Beacon(it) }\r\n            } else {\r\n                beacons.map { Beacon(it) }\r\n            }\r\n        }\r\n    }\r\n\r\n    override suspend fun getBeacon(id: Long): IBeacon? {\r\n        return onIO {\r\n            val beacon = loader.getBeacon(id)\r\n            if (beacon!= null) {\r\n                Beacon(beacon)\r\n            } else {\r\n                null\r\n            }\r\n        }\r\n    }\r\n\r\n    override suspend fun getBeacon(uuid: String, major: Int, minor: Int): IBeacon? {\r\n        return onIO {\r\n            val beacon"}], "metadata": {"task_id": "Trail-Sense/673", "ground_truth": "            } else {\r\n                beacons.filterNot { it.isGroup }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\persistence\\BeaconService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.beacons.domain.IBeacon\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nprivate suspend fun getChildren(groupId: Long?): List<IBeacon> {\r\n        val beacons = getBeaconsWithParent(groupId)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/674", "ground_truth": "        val groups = getGroups(groupId)\r\n        return beacons + groups\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\persistence\\BeaconService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.beacons.domain.IBeacon\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\noverride suspend fun search(nameFilter: String, groupFilter: Long?): List<IBeacon> {\r\n        return filter.filter(groupFilter) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/677", "ground_truth": "            it.name.contains(nameFilter, ignoreCase = true)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\persistence\\BeaconService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport android.net.Uri\noverride fun encode(value: Beacon): Uri {\r", "choices": [{"text": "return Uri.parse(\"https://www.google.com/maps/search/?api=1&query=${value.latitude},${value.longitude}\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/681", "ground_truth": "        val geo = GeoUri.from(value)\r\n        return geo.uri\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\share\\BeaconUriEncoder.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.beacons.domain.IBeacon\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\noverride suspend fun getValue(item: IBeacon): Float {\r", "choices": [{"text": "return item.rssi\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}"}], "metadata": {"task_id": "Trail-Sense/683", "ground_truth": "        val center = (item as Beacon).coordinate\r\n        return center.distanceTo(locationProvider.invoke())\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\infrastructure\\sort\\mappers\\BeaconDistanceMapper.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval intent = Intent(this, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\nval button = findViewById<Button>(R.id.button)"}], "metadata": {"task_id": "Trail-Sense/684", "ground_truth": "        super.onCreate(savedInstanceState)\r\n        beaconId = requireArguments().getLong(\"beacon_id\")\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\BeaconDetailsFragment.kt"}}
{"prompt": "\nvar listener\nvar data\n fun updateData(data: CreateBeaconData) {\r", "choices": [{"text": "//    this.data = data\r\n//    listener.onDataChanged(data)\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/685", "ground_truth": "        this.data = data\r\n        listener(this.data)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\form\\CreateBeaconForm.kt"}}
{"prompt": "\n override fun isSatisfiedBy(value: CreateBeaconData): Boolean {\r\n        return value.name.isNotBlank() &&\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/687", "ground_truth": "                value.coordinate != null &&\r\n                hasValidDistanceTo(value)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\form\\IsBeaconFormDataComplete.kt"}}
{"prompt": "\n private fun hasValidDistanceTo(data: CreateBeaconData): Boolean {\r\n        if (!data.createAtDistance) {\r\n            return true\r\n        }\r\n\r\n        if (data.distanceTo == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/688", "ground_truth": "            return false\r\n        }\r\n\r\n        return data.bearingTo != null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\form\\IsBeaconFormDataComplete.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        if (requireArguments().containsKey(\"initial_location\")) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/690", "ground_truth": "            initialLocation = requireArguments().getParcelable(\"initial_location\")\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\BeaconListFragment.kt"}}
{"prompt": "\n private fun setCreateMenuVisibility(isShowing: Boolean) {\r\n        if (isShowing) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/692", "ground_truth": "            binding.createMenu.show()\r\n        } else {\r\n            binding.createMenu.hide()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\BeaconListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\noverride fun onResume() {\r\n        super.onResume()\r\n        manager.refresh()\r", "choices": [{"text": "}\r\noverride fun onPause() {\r\n        super.onPause()\r\n        manager.stop()\r\n}\r\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n        manager.stop()\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/693", "ground_truth": "        // Get a GPS reading\r\n        gps.start(this::onLocationUpdate)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\BeaconListFragment.kt"}}
{"prompt": "\nvar sort\nval beaconLoader\nval beaconService\n override fun onPause() {\r\n        gps.stop(this::onLocationUpdate)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/694", "ground_truth": "        tryOrNothing {\r\n            lastRoot = manager.root\r\n        }\r\n        super.onPause()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\BeaconListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.beacons.infrastructure.sort.BeaconSortMethod\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nprivate fun changeSort() {\r\n        val sortOptions = BeaconSortMethod.values()\r\n        Pickers.item(\r\n            requireContext(),\r\n            getString(R.string.sort),\r\n            sortOptions.map { getSortString(it) },\r\n            sortOptions.indexOf(prefs.navigation.beaconSort)\r\n        ) { newSort ->\r\n            if (newSort != null) {\r\n                prefs.navigation.beaconSort = sortOptions[newSort]\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/696", "ground_truth": "                sort = sortOptions[newSort]\r\n                onSortChanged()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\BeaconListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.navigation.infrastructure.Navigator\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nprivate fun navigate(beacon: Beacon) {\r\n        val navigator = Navigator.getInstance(requireContext())\r", "choices": [{"text": "//        navigator.navigateTo(beacon.location)\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/701", "ground_truth": "        navigator.navigateTo(beacon)\r\n        navController.navigate(R.id.action_navigation)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\BeaconListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.beacons.infrastructure.commands.DeleteBeaconCommand\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport androidx.lifecycle.lifecycleScope\nprivate fun delete(beacon: Beacon) {\r\n        val command = DeleteBeaconCommand(\r\n            requireContext(),\r\n            lifecycleScope,\r\n            beaconService\r", "choices": [{"text": ")\r\n        command.execute(beacon)\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/702", "ground_truth": "        ) {\r\n            refresh()\r\n        }\r\n        command.execute(beacon)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\BeaconListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.beacons.infrastructure.commands.MoveBeaconCommand\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport androidx.lifecycle.lifecycleScope\nprivate fun move(beacon: Beacon) {\r\n        val command = MoveBeaconCommand(\r\n            requireContext(),\r\n            lifecycleScope,\r\n            beaconService\r", "choices": [{"text": ")\r\n        command.execute(beacon)\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/703", "ground_truth": "        ) {\r\n            refresh()\r\n        }\r\n        command.execute(beacon)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\BeaconListFragment.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun toggleVisibility(beacon: Beacon) {\r\n        inBackground {\r\n            val newBeacon = beacon.copy(visible = !beacon.visible)\r\n\r\n            onIO {\r\n                beaconService.add(newBeacon)\r\n            }\r\n\r", "choices": [{"text": "\n import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun toggleVisibility(beacon: Beacon) {\r\n        inBackground {\r\n            val newBeacon = beacon.copy(visible =!beacon.visible)\r\n\r\n            onIO {\r\n                beaconService.add(newBeacon)\r\n            }\r\n\r\n           onMain {\r\n               beaconService.update(newBeacon)\r\n           }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/705", "ground_truth": "            onMain {\r\n                refresh()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\BeaconListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.Units\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.sol.units.DistanceUnits\nimport com.kylecorry.sol.units.Distance\nimport com.kylecorry.andromeda.views.list.ListItem\noverride fun map(value: Beacon): ListItem {\r\n        return value.toListItem(\r\n            context,\r\n            prefs.baseDistanceUnits,\r\n            gps.location,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/709", "ground_truth": "            true\r\n        ) {\r\n            actionHandler(value, it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\BeaconListItemMapper.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.beacons.domain.IBeacon\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.andromeda.views.list.ListItem\noverride fun map(value: IBeacon): ListItem {\r\n        return if (value is Beacon) {\r", "choices": [{"text": "//            val beacon = value as Beacon\r\n            val beacon = value\r\n            ListItem(\r\n                title = beacon.name,\r\n                subtitle = beacon.uuid,\r\n                icon = R.drawable.ic_beacon,\r\n                onClick = {\r\n                    BeaconDetailsActivity.start(it, beacon)\r\n                }\r\n            )\r\n        } else {\r\n            ListItem(\r\n                title = value.name,\r\n                subtitle = value.uuid,\r\n                icon = R.drawable.ic_beacon,\r\n                onClick = {\r\n                    BeaconDetailsActivity.start(it, value)\r\n                }\r\n            )\r\n        }\r\n    }\n<file_sep>/app"}], "metadata": {"task_id": "Trail-Sense/711", "ground_truth": "            beaconMapper.map(value)\r\n        } else {\r\n            groupMapper.map(value as BeaconGroup)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\list\\IBeaconListItemMapper.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.beacons.ui.form.CreateBeaconData\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nprivate fun setEditingBeaconValues(beacon: Beacon) {\r\n        val data = CreateBeaconData.from(beacon)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/712", "ground_truth": "        hasChanges = DoesBeaconFormDataHaveChanges(data)\r\n        fill(data)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\PlaceBeaconFragment.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun loadExistingBeacon() {\r\n        // TODO: Prevent interaction until loaded\r\n        editingBeaconId?.let {\r\n            inBackground {\r\n                val beacon = onIO {\r\n                    beaconService.getBeacon(it)\r\n                }\r\n\r\n                onMain {\r\n                    beacon?.let {\r\n                        setEditingBeaconValues(it)\r", "choices": [{"text": "//                        setBeacon(it)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/713", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\PlaceBeaconFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\nfinish()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/714", "ground_truth": "        super.onResume()\r\n        binding.bearingTo.start()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\PlaceBeaconFragment.kt"}}
{"prompt": "\nval units\nvar hasChanges\nvar backCallback OnBackPressedCallback\n override fun onPause() {\r\n        binding.beaconElevation.pause()\r\n        binding.beaconLocation.pause()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/715", "ground_truth": "        binding.bearingTo.stop()\r\n        super.onPause()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\PlaceBeaconFragment.kt"}}
{"prompt": "\nvar backCallback OnBackPressedCallback\nvar editingBeaconId Long?\nval beaconService\n private fun updateSubmitButton() {\r", "choices": [{"text": "if (editingBeaconId == null) {\r\nsubmitButton.isEnabled = true\r\n} else {\r\nsubmitButton.isEnabled = false\r\n}\r\n}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_beacon_editor)\r\nsetSupportActionBar(toolbar)\r\nsupportActionBar?.setDisplayHomeAsUpEnabled(true)\r\nsupportActionBar?.setDisplayShowHomeEnabled(true)\r\nsupportActionBar?.setDisplayShowTitleEnabled(false)\r\nbeaconService = BeaconService("}], "metadata": {"task_id": "Trail-Sense/716", "ground_truth": "        binding.createBeaconTitle.rightButton.isInvisible =\r\n            !isComplete.isSatisfiedBy(form.data)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\PlaceBeaconFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.ui.setCompoundDrawables\nimport com.kylecorry.andromeda.core.system.Resources\nprivate fun updateIcon() {\r\n        binding.beaconIconPicker.setCompoundDrawables(\r\n            Resources.dp(requireContext(), 24f).toInt(),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/717", "ground_truth": "            left = form.data.icon?.icon ?: R.drawable.bubble\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\PlaceBeaconFragment.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun updateBeaconGroupName() {\r\n        val parent = form.data.groupId\r\n        inBackground {\r\n            val name = onIO {\r\n                if (parent == null) {\r\n                    getString(R.string.no_group)\r\n                } else {\r\n                    beaconService.getGroup(parent)?.name ?: \"\"\r\n                }\r\n            }\r\n\r", "choices": [{"text": "\n import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun updateBeaconGroupName() {\r\n        val parent = form.data.groupId\r\n        inBackground {\r\n            val name = onIO {\r\n                if (parent == null) {\r\n                    getString(R.string.no_group)\r\n                } else {\r\n                    beaconService.getGroup(parent)?.name?: \"\"\r\n                }\r\n            }\r\n\r\n//            form.data.groupName = name\r\n            form.data.groupName = name\r\n            form.data.group = parent\r\n            form.data.group = parent\r\n            form.data.group = parent\r\n            form.data.group = parent\r\n            form.data.group = parent\r\n            form.data.group = parent\r\n            form.data.group = parent\r\n            form.data.group = parent\r\n            form.data.group = parent\r\n            form.data.group = parent\r\n            form.data.group = parent\r\n            form.data.group = parent\r\n            form.data.group = parent\r\n            form.data.group"}], "metadata": {"task_id": "Trail-Sense/718", "ground_truth": "            onMain {\r\n                binding.beaconGroupPicker.text = name\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\PlaceBeaconFragment.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun onSubmit() {\r\n        val beacon = form.data.toBeacon() ?: return\r\n        inBackground {\r\n            onIO {\r\n                beaconService.add(beacon)\r\n            }\r\n\r\n            onMain {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/720", "ground_truth": "                backCallback.remove()\r\n                findNavController().navigateUp()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\beacons\\ui\\PlaceBeaconFragment.kt"}}
{"prompt": "\nval timer\nvar units DistanceUnits\nval gps\n private fun stop() {\r\n        timer.stop()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/722", "ground_truth": "        binding.startBtn.setState(false)\r\n\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\cliffheight\\ui\\ToolCliffHeightFragment.kt"}}
{"prompt": " import java.time.Instant\nvar startTime Instant?\nval timer\nval gps\nprivate fun start() {\r\n        startTime = Instant.now()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/723", "ground_truth": "        timer.interval(16)\r\n        binding.startBtn.setState(true)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\cliffheight\\ui\\ToolCliffHeightFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.CustomUiUtils\nimport com.kylecorry.trail_sense.R\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        CustomUiUtils.disclaimer(\r\n            requireContext(),\r\n            getString(R.string.disclaimer_message_title),\r\n            getString(R.string.tool_cliff_height_disclaimer),\r\n            \"cache_dialog_tool_cliff_height\",\r\n            considerShownIfCancelled = true,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/724", "ground_truth": "            cancelText = null\r\n        )\r\n\r\n\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\cliffheight\\ui\\ToolCliffHeightFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\noverride fun onResume() {\r\n        super.onResume()\r", "choices": [{"text": "}\r\noverride fun onPause() {\r\n        super.onPause()\r\n}\r\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n}\r\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\n        super.onRestoreInstanceState(savedInstanceState)\r\n}\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n}\r"}], "metadata": {"task_id": "Trail-Sense/725", "ground_truth": "        units = userPrefs.baseDistanceUnits\r\n        location = gps.location\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\cliffheight\\ui\\ToolCliffHeightFragment.kt"}}
{"prompt": "\nval timer\nval service\nvar units DistanceUnits\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\ntimer.cancel()\r\nservice.stopSelf()\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\ntimer.start()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\ntimer.cancel()\r\nservice.stopSelf()\r\n}\r\noverride fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\r\ntimer.start()\r\nreturn super.onStartCommand(intent, flags, startId)\r\n}\r\noverride fun on"}], "metadata": {"task_id": "Trail-Sense/726", "ground_truth": "        super.onPause()\r\n        timer.stop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\cliffheight\\ui\\ToolCliffHeightFragment.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport com.kylecorry.sol.units.Temperature\noverride suspend fun calculate(time: ZonedDateTime): Temperature {\r\n        val existing = calculators.firstOrNull { it.first.contains(time) }\r\n        val calculator = if (existing == null) {\r\n            val newCalculator = createCalculator(time)\r\n            calculators.add(newCalculator)\r\n            newCalculator.second\r", "choices": [{"text": "       } else {\r\n            existing.second\r        }\r        return calculator.calculate(time)\r\n    }\r}\r<file_sep>/app/src/main/java/com/kylecorry/sol/app/fragments/weather/WeatherFragment.kt\npackage com.kylecorry.sol.app.fragments.weather\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\nimport androidx.fragment.app.viewModels\nimport androidx.lifecycle.lifecycleScope\nimport"}], "metadata": {"task_id": "Trail-Sense/728", "ground_truth": "        } else {\r\n            existing.second\r\n        }\r\n        return calculator.calculate(time)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\climate\\infrastructure\\temperatures\\calculators\\DailyTemperatureCalculator.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.time.Time\noverride suspend fun calculate(time: ZonedDateTime): Temperature {\r", "choices": [{"text": "return Temperature.fromCelsius(Time.getTemperature(time))\r\n}\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/730", "ground_truth": "        val x = getX(time.toInstant())\r\n        return Temperature.celsius(a * square(x) + b)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\climate\\infrastructure\\temperatures\\calculators\\QuadraticTemperatureCalculator.kt"}}
{"prompt": "\n import java.time.Month\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.sol.units.Coordinate\nimport android.content.Context\nprivate suspend fun load(\r\n        context: Context,\r\n        location: Coordinate,\r\n        type: String\r\n    ): Map<Month, Float> = onIO {\r\n        val loaded = mutableMapOf<Month, Float>()\r\n\r\n        for ((extension, months) in extensionMap) {\r\n            val file = \"temperatures/$type-${extension}.webp\"\r\n            val source = if (type == lowType) lowSource else highSource\r\n            val data = source.read(context, file, location)\r\n            loaded[months.first] = data[0]\r\n            loaded[months.second] = data[1]\r", "choices": [{"text": "//            loaded[months.third] = data[2]\r\n        }\r\n\r\n        loaded\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/731", "ground_truth": "            loaded[months.third] = data[2]\r\n        }\r\n\r\n        loaded\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\climate\\infrastructure\\temperatures\\HistoricMonthlyTemperatureRangeRepo.kt"}}
{"prompt": "\n import java.time.Month\nimport java.time.LocalDate\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nimport com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.math.Range\noverride suspend fun getYearlyTemperatures(\r\n        year: Int,\r\n        location: Coordinate\r\n    ): List<Pair<LocalDate, Range<Temperature>>> = onDefault {\r\n        val monthly =\r\n            HistoricMonthlyTemperatureRangeRepo.getMonthlyTemperatureRanges(context, location)\r", "choices": [{"text": "//        val monthly =\r\n//            HistoricMonthlyTemperatureRangeRepo.getMonthlyTemperatureRanges(context, location)\r\n        val yearly = monthly.filter { it.first.year == year }\r\n        yearly.map {\r\n            it.first to Range(\r\n                it.second.min,\r\n                it.second.max\r\n            )\r\n        }\r\n    }\n<file_sep>/app/src/main/java/com/kylecorry/sol/app/weather/ui/WeatherFragment.kt\npackage com.kylecorry.sol.app.weather.ui\n\nimport android.os."}], "metadata": {"task_id": "Trail-Sense/732", "ground_truth": "\r\n        Time.getYearlyValues(year) {\r\n            getDailyRange(location, it, monthly)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\climate\\infrastructure\\temperatures\\HistoricTemperatureRepo.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport com.kylecorry.trail_sense.tools.climate.infrastructure.temperatures.calculators.DailyTemperatureCalculator\nimport com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.math.Range\noverride suspend fun getTemperatures(\r\n        location: Coordinate,\r\n        start: ZonedDateTime,\r\n        end: ZonedDateTime\r\n    ): List<Reading<Temperature>> {\r\n        val calculator = DailyTemperatureCalculator(location, this::getDailyRange)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/733", "ground_truth": "\r\n        return Time.getReadings(start, end, Duration.ofMinutes(10)) {\r\n            calculator.calculate(it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\climate\\infrastructure\\temperatures\\HistoricTemperatureRepo.kt"}}
{"prompt": "\nvar temperatures List<Pair<LocalDate, Range<Temperature>>>\nval distanceUnits\nval location\n override fun onPause() {\r\n        super.onPause()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/736", "ground_truth": "        binding.location.pause()\r\n        binding.elevation.pause()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\climate\\ui\\ClimateFragment.kt"}}
{"prompt": "\n import java.time.LocalDate\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.math.Range\nprivate fun plotTemperatures(data: List<Pair<LocalDate, Range<Temperature>>>) {\r", "choices": [{"text": "val plot = Plot(data, \"Temperature\")\r\nplot.addLine(Temperature.Celsius(20.0), \"20\u00b0C\")\r\nplot.addLine(Temperature.Celsius(30.0), \"30\u00b0C\")\r\nplot.addLine(Temperature.Celsius(40.0), \"40\u00b0C\")\r\nplot.addLine(Temperature.Celsius(50.0), \"50\u00b0C\")\r\nplot.addLine(Temperature.Celsius(60.0), \"60"}], "metadata": {"task_id": "Trail-Sense/739", "ground_truth": "        chart.plot(data, temperatureUnits)\r\n        chart.highlight(binding.displayDate.date)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\climate\\ui\\ClimateFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.system.Resources\nimport android.graphics.Color\nval labelInterval\nvar startInclination Float?\nvar tickLength\noverride fun setup() {\r\n        dialColor = Resources.color(context, R.color.colorSecondary)\r", "choices": [{"text": "}\noverride fun draw(canvas: Canvas, bounds: Rect) {\r\n        super.draw(canvas, bounds)\r\n        val center = bounds.centerX()\r\n        val radius = bounds.width() / 2f\r\n        val tickLength = 10f\r\n        val labelInterval = 10f\r\n        val startInclination = 0f\r\n        val tickColor = Resources.color(context, R.color.colorAccent)\r\n        val labelColor = Resources.color(context, R.color.colorAccent)\r\n        val labelSize = 10f\r\n        val labelOffset = 10f"}], "metadata": {"task_id": "Trail-Sense/740", "ground_truth": "        tickLength = dp(4f)\r\n        textSize(sp(10f))\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clinometer\\ui\\CameraClinometerView.kt"}}
{"prompt": "\nval formatter\nval labelInterval\nvar inclination\n override fun draw() {\r\n        drawBackground()\r", "choices": [{"text": "//        drawGrid()\r\n        drawLabels()\r\n        drawAxes()\r\n        drawGraph()\r\n    }\r\n\r\n    override fun drawBackground() {\r\n        canvas.drawColor(Color.WHITE)\r\n    }\r\n\r\n    override fun drawGrid() {\r\n        val paint = Paint()\r\n        paint.color = Color.LTGRAY\r\n        paint.strokeWidth = 1f\r\n        paint.style = Paint.Style.STROKE\r\n        val step = 10\r\n        for (i in 0..100 step step) {\r\n            canvas.drawLine(0f, i.toFloat(), width.toFloat(), i.toFloat(), paint)\r\n           "}], "metadata": {"task_id": "Trail-Sense/741", "ground_truth": "        drawTicks()\r\n        drawNeedle()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clinometer\\ui\\CameraClinometerView.kt"}}
{"prompt": "\nvar inclination\nval labelInterval\nvar tickLength\n private fun getY(inclination: Float): Float {\r\n        val padding = 20f//textHeight(\"9\")\r", "choices": [{"text": "//        val padding = 20f//textHeight(\"9\")\r\n        val y = (height - padding) / 2f\r\n        return y - y * inclination\r\n    }\r\n\r\n    private fun getX(tickLength: Float): Float {\r\n        val padding = 20f//textHeight(\"9\")\r\n        val x = (width - padding) / 2f\r\n        return x + x * tickLength\r\n    }\r\n\r\n    private fun getTickLength(tickLength: Float): Float {\r\n        val padding = 20f//textHeight(\"9\")\r\n        val x = (width - padding) / "}], "metadata": {"task_id": "Trail-Sense/742", "ground_truth": "        val h = height - 2 * padding\r\n        return h - (map(inclination, -90f, 90f, 0f, 1f) * h) + padding\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clinometer\\ui\\CameraClinometerView.kt"}}
{"prompt": "\nval orientation\nval sensorService\nval deviceOrientation\n private fun getCurrentAngle(): Float {\r", "choices": [{"text": "val rotation = deviceOrientation.rotation\r\nreturn when (rotation) {\r\nOrientation.ROTATION_0 -> 0f\r\nOrientation.ROTATION_90 -> 90f\r\nOrientation.ROTATION_180 -> 180f\r\nOrientation.ROTATION_270 -> 270f\r\nelse -> 0f\r\n}\r\n}\r\nprivate fun getAngle(rotation: Int): Float {\r\nreturn when (rotation) {\r\nOrientation.ROTATION_0 -> 0f\r\nOrientation.ROTATION_9"}], "metadata": {"task_id": "Trail-Sense/744", "ground_truth": "        // TODO: This should just be clinometer.angle\r\n        return normalizeAngle(-clinometer.angle + 180f)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clinometer\\ui\\ClinometerFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Distance\noverride fun onResume() {\r\n        super.onResume()\r\n        if (distanceAway == null && knownHeight == null) {\r\n            distanceAway = prefs.clinometer.baselineDistance\r\n            CustomUiUtils.setButtonState(\r\n                binding.clinometerTitle.rightButton, distanceAway != null\r\n            )\r\n        }\r\n\r\n        if (useCamera) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/745", "ground_truth": "            startCameraClinometer(false)\r\n        } else {\r\n            startSideClinometer()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clinometer\\ui\\ClinometerFragment.kt"}}
{"prompt": "\nval orientation\nval sensorService\nval deviceOrientation\n override fun onPause() {\r\n        super.onPause()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/746", "ground_truth": "        if (useCamera) {\r\n            binding.camera.stop()\r\n            binding.arView.stop()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clinometer\\ui\\ClinometerFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/747", "ground_truth": "        binding.arView.unbind()\r\n        super.onDestroyView()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clinometer\\ui\\ClinometerFragment.kt"}}
{"prompt": "\n private fun getBottomIncline(): Float {\r\n        val locked1 = lockedIncline1 ?: 0f\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/750", "ground_truth": "        val locked2 = lockedIncline2 ?: clinometer.incline\r\n        return min(locked1, locked2)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clinometer\\ui\\ClinometerFragment.kt"}}
{"prompt": "\n private fun getTopIncline(): Float {\r\n        val locked1 = lockedIncline1 ?: 0f\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/751", "ground_truth": "        val locked2 = lockedIncline2 ?: clinometer.incline\r\n        return max(locked1, locked2)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clinometer\\ui\\ClinometerFragment.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.science.geology.Geology\nprivate fun getHeight(distanceAway: Distance): Distance {\r\n        return Geology.getHeightFromInclination(\r", "choices": [{"text": "-            distanceAway,\r\n-            Geology.getAverageInclination(distanceAway.toMeters())\r\n+            distanceAway,\r\n+            Geology.getAverageInclination(distanceAway.toMeters(), Geology.getAverageTemperature(distanceAway.toMeters()))\r\n         )\r\n     }\n"}], "metadata": {"task_id": "Trail-Sense/752", "ground_truth": "            distanceAway, getBottomIncline(), getTopIncline()\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clinometer\\ui\\ClinometerFragment.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.science.geology.Geology\nprivate fun getDistance(height: Distance): Distance {\r\n        return Geology.getDistanceFromInclination(\r", "choices": [{"text": "-            height,\r\n-            Geology.getGeology(height).inclination\r\n+            height,\r\n+            Geology.getGeology(height).inclination,\r\n+            Geology.getGeology(height).slope\r\n        )\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/753", "ground_truth": "            height, getBottomIncline(), getTopIncline()\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clinometer\\ui\\ClinometerFragment.kt"}}
{"prompt": "\n override fun draw() {\r\n        push()\r\n        drawBackground()\r\n        drawTicks()\r\n        drawNeedle(angle)\r\n\r\n        drawLabels()\r\n\r\n        push()\r\n        rotate(180f)\r", "choices": [{"text": "//        drawNeedle(angle)\r\n        pop()\r\n        pop()\r\n    }\r\n\r\n    private fun drawNeedle(angle: Float) {\r\n        push()\r\n        stroke(0f, 0f, 0f, 1f)\r\n        strokeWeight(1f)\r\n        line(0f, 0f, 0f, -100f)\r\n        line(0f, 0f, 0f, -100f)\r\n        line(0f, 0f, 0f, -100f)\r\n        line(0f, 0f, "}], "metadata": {"task_id": "Trail-Sense/756", "ground_truth": "        drawLabels()\r\n        pop()\r\n\r\n        pop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clinometer\\ui\\ClinometerView.kt"}}
{"prompt": "\n private fun drawAvalancheZone(start: Float, stop: Float, color: Int) {\r\n        val x = width / 2f - radius\r\n        val y = height / 2f - radius\r\n        val d = radius * 2\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/757", "ground_truth": "        noStroke()\r\n        fill(color)\r\n        opacity(150)\r\n        arc(x, y, d, d, start, stop)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clinometer\\ui\\ClinometerView.kt"}}
{"prompt": "\nval tickInterval\nvar tickLength\nval needlePercent\n private fun drawTicks() {\r\n        strokeWeight(dp(2f))\r", "choices": [{"text": "stroke(0)\r\nval tickLength = dp(10f)\r\nval tickInterval = dp(10f)\r\nval tickCount = 12\r\nval tickAngle = 360f / tickCount\r\nval tickAngleOffset = 90f\r\nval tickAngleOffsetRadians = Math.toRadians(tickAngleOffset.toDouble())\r\nval tickAngleRadians = Math.toRadians(tickAngle.toDouble())\r\nval tickAngleRadiansOffset = Math.toRadians(tickAngleOffset.toDouble())\r\nval tickAngleRadiansOffsetRadians = Math"}], "metadata": {"task_id": "Trail-Sense/758", "ground_truth": "        stroke(Color.WHITE)\r\n        opacity(255)\r\n        noFill()\r\n        path(tickPath)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clinometer\\ui\\ClinometerView.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport android.content.Intent\nimport android.content.Context\nimport android.content.BroadcastReceiver\nfun intent(context: Context, timeString: String): Intent {\r\n            val i = Intent(context, NextMinuteBroadcastReceiver::class.java)\r", "choices": [{"text": "i.putExtra(\"time\", timeString)\r\n            return i\r\n        }\n\r\nclass NextMinuteBroadcastReceiver : BroadcastReceiver() {\r\n    override fun onReceive(context: Context, intent: Intent) {\r\n        val timeString = intent.getStringExtra(\"time\")\r\n        val time = Time(timeString)\r\n        val nextMinute = time.nextMinute()\r\n        val nextMinuteString = nextMinute.toString()\r\n        val i = intent(context, nextMinuteString)\r\n        context.sendBroadcast(i)\r\n    }\r\n}\r\n<file_sep>/app/src/main/java/com/kylecorry/"}], "metadata": {"task_id": "Trail-Sense/759", "ground_truth": "            i.putExtra(EXTRA_TIME, timeString)\r\n            return i\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clock\\infrastructure\\NextMinuteBroadcastReceiver.kt"}}
{"prompt": "\n import kotlin.math.min\nimport android.util.TypedValue\nprivate fun initClock() {\r\n        padding = numeralSpacing + 50\r\n        fontSize = TypedValue.applyDimension(\r\n            TypedValue.COMPLEX_UNIT_SP, 13f,\r\n            resources.displayMetrics\r\n        ).toInt()\r\n        val min = min(height, width)\r\n        radius = min / 2 - padding\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/761", "ground_truth": "        handTruncation = min / 20\r\n        hourHandTruncation = min / 7\r\n        paint = Paint()\r\n        isInit = true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clock\\ui\\ClockView.kt"}}
{"prompt": " import android.graphics.Color\nimport android.graphics.Canvas\nvar paint Paint\nval numeralSpacing\nvar padding\noverride fun onDraw(canvas: Canvas) {\r\n        if (!isInit) {\r\n            initClock()\r\n        }\r\n        canvas.drawColor(Color.TRANSPARENT)\r\n        drawNumeral(canvas)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/762", "ground_truth": "        drawHands(canvas)\r\n        drawCenter(canvas)\r\n        postInvalidateDelayed(20)\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clock\\ui\\ClockView.kt"}}
{"prompt": "\n import android.graphics.Paint\nimport android.graphics.Canvas\nprivate fun drawCenter(canvas: Canvas) {\r\n        paint.style = Paint.Style.FILL\r", "choices": [{"text": "paint.color = Color.RED\r\ncanvas.drawCircle(100f, 100f, 100f, paint)\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/764", "ground_truth": "        paint.color = Color.WHITE\r\n        canvas.drawCircle(width / 2.toFloat(), height / 2.toFloat(), 12f, paint)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clock\\ui\\ClockView.kt"}}
{"prompt": "\nval timer\nvar systemTime\nval formatService\n override fun onPause() {\r\n        super.onPause()\r", "choices": [{"text": "//        timer.cancel()\r\n        timer.purge()\r\n        timer.purge()\r\n        timer.purge()\r\n        timer.purge()\r\n        timer.purge()\r\n        timer.purge()\r\n        timer.purge()\r\n        timer.purge()\r\n        timer.purge()\r\n        timer.purge()\r\n        timer.purge()\r\n        timer.purge()\r\n        timer.purge()\r\n        timer.purge()\r\n        timer.purge()\r\n        timer.purge()\r\n        timer.purge()\r\n        timer.purge()\r\n        timer.purge()\r\n        timer.purge()\r\n        timer.purge()\r\n        timer.purge()\r\n        timer.purge()\r\n        timer.purge()\r\n       "}], "metadata": {"task_id": "Trail-Sense/766", "ground_truth": "        gps.stop(this::onGPSUpdate)\r\n        timer.stop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clock\\ui\\ToolClockFragment.kt"}}
{"prompt": "\n import com.kylecorry.sol.science.meteorology.clouds.CloudGenus\nimport com.kylecorry.sol.science.meteorology.Precipitation\nfun getPrecipitation(type: CloudGenus?): List<Precipitation> {\r\n        if (type == null) {\r\n            return emptyList()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/770", "ground_truth": "        }\r\n        return baseCloudService.getPrecipitation(type)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\domain\\CloudService.kt"}}
{"prompt": " import com.kylecorry.sol.units.Reading\nimport androidx.room.Entity\nvar id Long\nfun from(reading: Reading<CloudObservation>): CloudReadingEntity {\r\n            return CloudReadingEntity(reading.time, reading.value.genus).also {\r", "choices": [{"text": "it.id = id\r\nid++\r\n            }\r\n        }\n\n"}], "metadata": {"task_id": "Trail-Sense/771", "ground_truth": "                it.id = reading.value.id\r\n            }\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\infrastructure\\persistence\\CloudReadingEntity.kt"}}
{"prompt": "\n import java.time.Instant\nimport com.kylecorry.andromeda.core.coroutines.onIO\noverride suspend fun clean() = onIO {\r\n        dao.deleteOlderThan(Instant.now().minus(CLOUD_HISTORY_DURATION).toEpochMilli())\r\n\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/772", "ground_truth": "        // TODO: Only do this if there was a change\r\n        _readingsChanged.publish()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\infrastructure\\persistence\\CloudRepo.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.sol.units.Reading\noverride suspend fun add(reading: Reading<CloudObservation>): Long = onIO {\r\n        val entity = CloudReadingEntity.from(reading)\r\n\r\n        val id = if (entity.id != 0L) {\r\n            dao.update(entity)\r\n            entity.id\r\n        } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/773", "ground_truth": "            dao.insert(entity)\r\n        }\r\n        _readingsChanged.publish()\r\n        id\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\infrastructure\\persistence\\CloudRepo.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.sol.units.Reading\noverride suspend fun delete(reading: Reading<CloudObservation>) = onIO {\r\n        val entity = CloudReadingEntity.from(reading)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/774", "ground_truth": "        dao.delete(entity)\r\n        _readingsChanged.publish()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\infrastructure\\persistence\\CloudRepo.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Reading\nimport androidx.lifecycle.map\nimport androidx.lifecycle.LiveData\noverride fun getAllLive(): LiveData<List<Reading<CloudObservation>>> {\r\n        return dao.getAll().map {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/775", "ground_truth": "            it.map { reading -> reading.toReading() }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\infrastructure\\persistence\\CloudRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.main.persistence.AppDatabase\nimport android.content.Context\n @Synchronized\r\n        fun getInstance(context: Context): CloudRepo {\r\n            if (instance == null) {\r\n                instance = CloudRepo(AppDatabase.getInstance(context).cloudDao())\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/776", "ground_truth": "            }\r\n            return instance!!\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\infrastructure\\persistence\\CloudRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nprivate fun setupCreateMenu() {\r\n        binding.addMenu.setOverlay(binding.overlayMask)\r\n        binding.addMenu.fab = binding.addBtn\r\n        binding.addMenu.hideOnMenuOptionSelected = true\r\n        binding.addMenu.setOnMenuItemClickListener { menuItem ->\r\n            when (menuItem.itemId) {\r\n                R.id.action_cloud_camera -> addFromCamera()\r\n                R.id.action_cloud_file -> addFromFile()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/779", "ground_truth": "                R.id.action_cloud_manual -> addManual()\r\n            }\r\n            true\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\ui\\CloudFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.io.FragmentUriPicker\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.core.coroutines.BackgroundMinimumState\nimport androidx.navigation.fragment.findNavController\nimport androidx.core.net.toUri\nprivate fun addFromFile() {\r\n        inBackground(BackgroundMinimumState.Created) {\r\n            val uri =\r\n                FragmentUriPicker(this@CloudFragment).open(listOf(\"image/*\"))\r\n            val temp = uri?.let { onIO { files.copyToTemp(it) }?.toUri() }\r\n            temp?.let {\r\n                findNavController().navigate(\r\n                    R.id.action_cloud_to_cloud_picker,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/780", "ground_truth": "                    bundleOf(\"image\" to it)\r\n                )\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\ui\\CloudFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.clouds.infrastructure.persistence.CloudObservation\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nprivate fun handleAction(action: CloudReadingAction, reading: Reading<CloudObservation>) {\r\n        when (action) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/781", "ground_truth": "            CloudReadingAction.Delete -> delete(reading)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\ui\\CloudFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.clouds.infrastructure.persistence.CloudObservation\nimport com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.alerts.CoroutineAlerts\nprivate fun delete(reading: Reading<CloudObservation>) {\r\n        inBackground {\r\n            val cancelled = onMain {\r\n                CoroutineAlerts.dialog(\r\n                    requireContext(),\r\n                    getString(R.string.delete),\r\n                    cloudDetailsService.getCloudName(reading.value.genus)\r\n                )\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/782", "ground_truth": "            if (!cancelled) {\r\n                repo.delete(reading)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\ui\\CloudFragment.kt"}}
{"prompt": " import com.kylecorry.sol.science.meteorology.clouds.CloudGenus\nimport com.kylecorry.andromeda.alerts.Alerts\nval details\nfun show(cloud: CloudGenus?) {\r\n        if (cloud != null) {\r\n            Alerts.image(\r\n                context,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/783", "ground_truth": "                details.getCloudName(cloud),\r\n                details.getCloudImage(cloud)\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\ui\\CloudImageModal.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval intent = Intent(this, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\nval button = findViewById<Button>(R.id.button)"}], "metadata": {"task_id": "Trail-Sense/784", "ground_truth": "        super.onCreate(savedInstanceState)\r\n        uri = arguments?.getParcelable(\"image\")\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\ui\\CloudResultsFragment.kt"}}
{"prompt": "\n import com.kylecorry.sol.science.meteorology.clouds.CloudGenus\noverride fun onResume() {\r\n        super.onResume()\r\n        if (uri != null && selection.isEmpty()) {\r\n            analyze()\r\n        } else {\r\n            selection = CloudGenus.values().map { CloudSelection(it, null, false) } + listOf(\r\n                CloudSelection(\r\n                    null,\r\n                    null,\r\n                    false\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/785", "ground_truth": "                )\r\n            )\r\n            updateItems()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\ui\\CloudResultsFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.clouds.infrastructure.persistence.CloudObservation\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun save() {\r\n        inBackground {\r\n            val readings =\r\n                selection.filter { it.isSelected }\r\n                    .map { Reading(CloudObservation(0, it.genus), time) }\r\n            readings.forEach {\r\n                repo.add(it)\r\n            }\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.tools.clouds.infrastructure.persistence.CloudObservation\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun save() {\r\n        inBackground {\r\n            val readings =\r\n                selection.filter { it.isSelected }\r\n                   .map { Reading(CloudObservation(0, it.genus), time) }\r\n            readings.forEach {\r\n                repo.add(it)\r\n            }\r\n"}], "metadata": {"task_id": "Trail-Sense/786", "ground_truth": "            onMain {\r\n                findNavController().navigateUp()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\ui\\CloudResultsFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/787", "ground_truth": "        super.onDestroy()\r\n        image?.recycle()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\ui\\CloudResultsFragment.kt"}}
{"prompt": "\nvar selection List<CloudSelection>\nval repo\nvar time\n private fun updateItems() {\r\n        if (isBound) {\r", "choices": [{"text": "//            val items = repo.getCloudItems(selection)\r\n//            adapter.setItems(items)\r\n//            adapter.notifyDataSetChanged()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/788", "ground_truth": "            binding.cloudList.setItems(selection, mapper)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\clouds\\ui\\CloudResultsFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.TemperatureUnits\nimport com.kylecorry.sol.units.Temperature\noverride fun getUnitName(unit: TemperatureUnits): String {\r\n        return when (unit) {\r\n            TemperatureUnits.F -> getString(R.string.fahrenheit)\r", "choices": [{"text": "TemperatureUnits.C -> getString(R.string.celsius)\r\nTemperatureUnits.K -> getString(R.string.kelvin)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/790", "ground_truth": "            TemperatureUnits.C -> getString(R.string.celsius)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\convert\\ui\\FragmentTemperatureConverter.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.TimeUnits\noverride fun convert(amount: Float, from: TimeUnits, to: TimeUnits): String {\r\n        val seconds = amount * from.seconds\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/793", "ground_truth": "        val converted = seconds / to.seconds\r\n        return formatService.formatTime(converted, to, 4, false)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\convert\\ui\\FragmentTimeConverter.kt"}}
{"prompt": "\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nmMapView.onPause()\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nmMapView.onResume()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nmMapView.onDestroy()\r\n}\r\noverride fun onLowMemory() {\r\nsuper.onLowMemory()\r\nmMapView.onLowMemory()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/794", "ground_truth": "        super.onPause()\r\n        binding.coordinateEdit.pause()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\convert\\ui\\FragmentToolCoordinateConvert.kt"}}
{"prompt": "\n fun update() {\r\n        val coordinate = binding.coordinateEdit.coordinate\r\n        val to = formats[binding.toUnits.selectedItemPosition]\r\n\r\n        if (coordinate == null) {\r\n            binding.result.text = \"\"\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/795", "ground_truth": "            return\r\n        }\r\n\r\n        binding.result.text = formatService.formatLocation(coordinate, to)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\convert\\ui\\FragmentToolCoordinateConvert.kt"}}
{"prompt": "\n fun update(){\r\n        val amount = binding.unitEdit.text?.toString()?.toFloatOrNull() ?: 0.0f\r\n        val from = units[binding.fromUnits.selectedItemPosition]\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/798", "ground_truth": "        val to = units[binding.toUnits.selectedItemPosition]\r\n        binding.result.text = convert(amount, from, to)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\convert\\ui\\SimpleConvertFragment.kt"}}
{"prompt": "\n import android.content.Intent\nimport android.content.Context\noverride fun onReceive(context: Context?, intent: Intent?) {\r\n        if (context == null) return\r\n\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/799", "ground_truth": "        val flashlight = FlashlightSubsystem.getInstance(context)\r\n        flashlight.set(FlashlightMode.Off)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightOffReceiver.kt"}}
{"prompt": "\nvar strategy IFlashlightStrategy?\nval offTimer\nval flashlight\n private fun switchStrategy(newStrategy: IFlashlightStrategy?) {\r\n        strategy?.stop()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/804", "ground_truth": "        strategy = newStrategy\r\n        strategy?.start()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightService.kt"}}
{"prompt": " import android.content.Context\nvar stopAt Instant?\nval offTimer\nval NOTIFICATION_ID\nfun stop(context: Context) {\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/805", "ground_truth": "            context.stopService(intent(context))\r\n            Notify.cancel(context, NOTIFICATION_ID)\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightService.kt"}}
{"prompt": "\n import java.time.Duration\nprivate fun off(bySystem: Boolean = false) = synchronized(modeLock) {\r\n        clearTimeout()\r\n        if (!bySystem) {\r\n            isTransitioning = true\r\n            transitionTimer.once(transitionDuration)\r\n        } else {\r\n            isTransitioning = false\r\n            transitionTimer.stop()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/809", "ground_truth": "        }\r\n        _mode.publish(FlashlightMode.Off)\r\n        FlashlightService.stop(context)\r\n        torch?.off()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightSubsystem.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.flashlight.domain.FlashlightMode\nimport com.kylecorry.andromeda.torch.Torch\nval _mode\nval mode ITopic<FlashlightMode>\nvar torch ITorch?\noverride fun toggle() {\r\n        if (getMode() == FlashlightMode.Torch) {\r", "choices": [{"text": "torch?.turnOff()\r\nsetMode(FlashlightMode.Off)\r\n        } else {\r\ntorch?.turnOn()\r\nsetMode(FlashlightMode.Torch)\r\n        }\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/810", "ground_truth": "            off()\r\n        } else {\r\n            set(FlashlightMode.Torch)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightSubsystem.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.flashlight.domain.FlashlightMode\noverride fun set(mode: FlashlightMode) {\r\n        when (mode) {\r\n            FlashlightMode.Off -> off()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/811", "ground_truth": "            else -> on(mode)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightSubsystem.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.flashlight.domain.FlashlightMode\nimport com.kylecorry.andromeda.core.tryOrDefault\nval _mode\nval mode ITopic<FlashlightMode>\nvar isAvailable Boolean\noverride fun getMode(): FlashlightMode {\r\n        return tryOrDefault(FlashlightMode.Off) {\r", "choices": [{"text": "_mode.get()\r\n        }\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/812", "ground_truth": "            mode.getOrNull() ?: FlashlightMode.Off\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightSubsystem.kt"}}
{"prompt": "\n import com.kylecorry.sol.math.SolMath\ninternal fun turnOn() = synchronized(torchLock) {\r\n        if (brightnessLevels > 0) {\r\n            val mapped = SolMath.map(brightness, 0f, 1f, 1f / (brightnessLevels + 1), 1f)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/813", "ground_truth": "            torch?.on(mapped)\r\n        } else {\r\n            torch?.on()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightSubsystem.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.flashlight.domain.FlashlightMode\nimport com.kylecorry.andromeda.torch.Torch\nimport com.kylecorry.andromeda.core.tryOrLog\nprivate fun onTorchStateChanged(enabled: Boolean): Boolean {\r\n        tryOrLog {\r\n            synchronized(modeLock) {\r\n                if (isTransitioning) {\r\n                    return@tryOrLog\r\n                }\r\n            }\r\n\r\n            if (!enabled && getMode() == FlashlightMode.Torch) {\r\n                off(true)\r\n            }\r\n\r\n            if (enabled && getMode() == FlashlightMode.Off) {\r\n                setBrightness(1f)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/814", "ground_truth": "                on(FlashlightMode.Torch, true)\r\n            }\r\n        }\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightSubsystem.kt"}}
{"prompt": "\n override fun setBrightness(brightness: Float) {\r\n        prefs.flashlight.brightness = brightness\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/815", "ground_truth": "        this.brightness = brightness\r\n        if (getMode() == FlashlightMode.Torch) {\r\n            turnOn()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightSubsystem.kt"}}
{"prompt": "\n import java.time.Instant\nimport com.kylecorry.trail_sense.R\nprivate fun setTimeout() {\r\n        if (prefs.flashlight.shouldTimeout) {\r\n            cache.putInstant(\r\n                context.getString(R.string.pref_flashlight_timeout_instant),\r\n                Instant.now().plus(prefs.flashlight.timeout)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/816", "ground_truth": "            )\r\n        } else {\r\n            clearTimeout()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightSubsystem.kt"}}
{"prompt": "\n import android.content.Context\nfun getInstance(context: Context): FlashlightSubsystem {\r\n            if (instance == null) {\r\n                instance = FlashlightSubsystem(context.applicationContext)\r", "choices": [{"text": "}\r\n            return instance!!\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/817", "ground_truth": "            }\r\n            return instance!!\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\FlashlightSubsystem.kt"}}
{"prompt": "\n import java.time.Duration\nimport com.kylecorry.trail_sense.shared.morse.Signals\nimport com.kylecorry.trail_sense.shared.morse.Signal\noverride fun start() {\r\n        val sos = Signals.sos(Duration.ofMillis(200)) + listOf(\r\n            Signal.off(Duration.ofMillis(200L * 7))\r", "choices": [{"text": ")\r\n        val morse = Signals.morse(sos)\r\n        morse.play()\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/818", "ground_truth": "        )\r\n        player.play(sos, true)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\SosFlashlightStrategy.kt"}}
{"prompt": "\nval player\n override fun stop() {\r", "choices": [{"text": "player.stop()\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}"}], "metadata": {"task_id": "Trail-Sense/819", "ground_truth": "        player.cancel()\r\n        flashlight.turnOff()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\SosFlashlightStrategy.kt"}}
{"prompt": "\nvar on\nval timer\n override fun stop() {\r", "choices": [{"text": "timer.cancel()\r\n}\r\noverride fun start() {\r\ntimer = Timer()\r\ntimer.schedule(object : TimerTask() {\r\noverride fun run() {\r\non()\r\n}\r\n}, 0, 1000)\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}"}], "metadata": {"task_id": "Trail-Sense/820", "ground_truth": "        timer.stop()\r\n        flashlight.turnOff()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\infrastructure\\StrobeFlashlightStrategy.kt"}}
{"prompt": "\nvar flashlightMode\nval switchStateTimer\nval flashlight\n private fun updateFlashlightUI() {\r", "choices": [{"text": "flashlightMode = flashlight.flashlightMode\r\nswitchStateTimer = flashlight.switchStateTimer\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nupdateFlashlightUI()\r\n}\r\noverride fun onPause() {\r\nsuper.onPause()\r\nflashlight.stopFlashlight()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nflashlight.stopFlashlight()\r\n}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView"}], "metadata": {"task_id": "Trail-Sense/826", "ground_truth": "        binding.flashlightOnBtn.setState(flashlightMode != FlashlightMode.Off)\r\n        updateTimer()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\ui\\FragmentToolFlashlight.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.safeRoundToInt\nimport com.kylecorry.trail_sense.R\nprivate fun updateBrightness(value: Float? = null) {\r\n        if (hasBrightnessControl) {\r\n            brightness = value ?: prefs.flashlight.brightness\r\n            binding.brightnessSeek.progress = (brightness * maxBrightness).safeRoundToInt()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/827", "ground_truth": "        } else {\r\n            brightness = 1f\r\n        }\r\n        flashlight.setBrightness(brightness)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\ui\\FragmentToolFlashlight.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.flashlight.domain.FlashlightMode\nfun toggle() {\r\n        haptics.click()\r\n        if (flashlight.getMode() != FlashlightMode.Off) {\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.tools.flashlight.domain.FlashlightMode\nfun toggle() {\r\n        haptics.click()\r\n        if (flashlight.getMode()!= FlashlightMode.Off) {\r\nflashlight.setMode(FlashlightMode.Off)\r\n        } else {\r\nflashlight.setMode(FlashlightMode.On)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/828", "ground_truth": "            turnOff()\r\n        } else {\r\n            turnOn()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\ui\\FragmentToolFlashlight.kt"}}
{"prompt": "\nvar selectedMode\nval cache\nvar brightness\n private fun update() {\r", "choices": [{"text": "if (selectedMode == 0) {\r\nbrightness = 100\r\n} else if (selectedMode == 1) {\r\nbrightness = 50\r\n} else if (selectedMode == 2) {\r\nbrightness = 0\r\n}\r\n}\r\nprivate fun updateBrightness() {\r\nif (selectedMode == 0) {\r\nbrightness = 100\r\n} else if (selectedMode == 1) {\r\nbrightness = 50\r\n} else if (selectedMode == 2) {\r\nbrightness = "}], "metadata": {"task_id": "Trail-Sense/829", "ground_truth": "        flashlightMode = flashlight.getMode()\r\n        updateFlashlightUI()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\ui\\FragmentToolFlashlight.kt"}}
{"prompt": " import com.kylecorry.trail_sense.R\nval flashlight\nval cache\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nflashlight = getSharedPreferences(\"flashlight\", Context.MODE_PRIVATE)\r\ncache = getSharedPreferences(\"cache\", Context.MODE_PRIVATE)\r\n}\r\noverride fun onPause() {\r\nsuper.onPause()\r\n}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval editor = flashlight.edit()\r\neditor.putBoolean"}], "metadata": {"task_id": "Trail-Sense/831", "ground_truth": "        super.onResume()\r\n        turnOn()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\ui\\FragmentToolScreenFlashlight.kt"}}
{"prompt": "\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nmMapView.onPause()\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nmMapView.onResume()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nmMapView.onDestroy()\r\n}\r\noverride fun onLowMemory() {\r\nsuper.onLowMemory()\r\nmMapView.onLowMemory()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/832", "ground_truth": "        super.onPause()\r\n        turnOff()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\ui\\FragmentToolScreenFlashlight.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.flashlight.infrastructure.FlashlightSubsystem\noverride fun onButtonPress() {\r\n        if (fragment == null) {\r\n            val flashlight = FlashlightSubsystem.getInstance(context)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/833", "ground_truth": "            flashlight.toggle()\r\n        } else {\r\n            fragment.toggle()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\flashlight\\volumeactions\\FlashlightToggleVolumeAction.kt"}}
{"prompt": "\n import androidx.annotation.RawRes\nfun load(@RawRes resource: Int): String {\r\n        return context.resources.openRawResource(resource).use {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/834", "ground_truth": "            it.bufferedReader().readText()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\guide\\infrastructure\\UserGuideService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport androidx.navigation.fragment.findNavController\nimport androidx.fragment.app.Fragment\nimport androidx.core.os.bundleOf\nimport androidx.annotation.RawRes\nimport android.content.Context\nfun openGuide(fragment: Fragment, @RawRes guideId: Int) {\r\n        val navController = fragment.findNavController()\r\n        val guides = Guides.guides(fragment.requireContext())\r\n\r\n        val guide = guides.flatMap { it.guides }.firstOrNull { it.contents == guideId }\r\n\r\n        if (guide != null) {\r\n            navController.navigate(\r\n                R.id.guideFragment, bundleOf(\r\n                    \"guide_name\" to guide.name,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/836", "ground_truth": "                    \"guide_contents\" to guide.contents\r\n                )\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\guide\\infrastructure\\UserGuideUtils.kt"}}
{"prompt": "\n import androidx.fragment.app.commit\nimport androidx.fragment.app.Fragment\nprivate fun setFragment(fragment: Fragment) {\r\n        val fragmentManager = childFragmentManager\r\n        fragmentManager.commit {\r", "choices": [{"text": "//            setCustomAnimations(R.anim.slide_in_right, R.anim.slide_out_left)\r\n            replace(R.id.fragment_container, fragment)\r\n            addToBackStack(null)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/840", "ground_truth": "            replace(binding.guideFragment.id, fragment)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\guide\\ui\\GuideListFragment.kt"}}
{"prompt": "\n import androidx.preference.Preference\nimport android.os.Bundle\noverride fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {\r", "choices": [{"text": "setPreferencesFromResource(R.xml.preferences, rootKey)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/841", "ground_truth": "        setPreferencesFromResource(R.xml.user_guide, rootKey)\r\n        preferenceScreen.setShouldUseGeneratedIds(true)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\guide\\ui\\GuideListPreferenceFragment.kt"}}
{"prompt": "\n import androidx.preference.Preference\nprivate fun onClick(pref: Preference?, action: () -> Unit) {\r\n        pref?.setOnPreferenceClickListener {\r\n            action.invoke()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/842", "ground_truth": "            true\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\guide\\ui\\GuideListPreferenceFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\nfinish()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/844", "ground_truth": "        super.onResume()\r\n        level.start(this::onLevelUpdate)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\level\\ui\\LevelFragment.kt"}}
{"prompt": "\nval formatService\nval level\nval throttle\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nformatService.stop()\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nformatService.start()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nformatService.stop()\r\n}\r\noverride fun onStop() {\r\nsuper.onStop()\r\nformatService.stop()\r\n}\r\noverride fun onStart() {\r\nsuper.onStart()\r\nformatService.start()\r\n}\r\noverride fun onRestart() {\r\nsuper.onRestart"}], "metadata": {"task_id": "Trail-Sense/845", "ground_truth": "        level.stop(this::onLevelUpdate)\r\n        super.onPause()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\level\\ui\\LevelFragment.kt"}}
{"prompt": "\nvar candela Float\nvar gradient List<Int>\nvar paint Paint\n fun setCandela(candela: Float){\r", "choices": [{"text": "this.candela = candela\r\n}\r\nfun getCandela(): Float{\r\nreturn candela\r\n}\r\nfun setGradient(gradient: List<Int>){\r\nthis.gradient = gradient\r\n}\r\nfun getGradient(): List<Int>{\r\nreturn gradient\r\n}\r\nfun setPaint(paint: Paint){\r\nthis.paint = paint\r\n}\r\nfun getPaint(): Paint{\r\nreturn paint\r\n}\r\n}<file_sep>/app/src/main/java/com/example/myapplication/MainActivity"}], "metadata": {"task_id": "Trail-Sense/847", "ground_truth": "        this.candela = candela\r\n        updateGradients()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\light\\ui\\LightBarView.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.DistanceUnits\nimport com.kylecorry.sol.units.Distance\nfun setDistanceUnits(distanceUnits: DistanceUnits){\r", "choices": [{"text": "Distance.setUnits(distanceUnits)\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/848", "ground_truth": "        units = distanceUnits\r\n        updateGradients()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\light\\ui\\LightBarView.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.DistanceUnits\nimport com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.science.optics.Optics\nprivate fun updateGradients(){\r\n        val intensities = (1..100).map {\r\n            val distance = if (units == DistanceUnits.Feet) it * 3 else it\r\n            Optics.luxAtDistance(candela, Distance(distance.toFloat(), units))\r\n        }\r\n\r", "choices": [{"text": "//        val intensities = (1..100).map {\r\n//            val distance = if (units == DistanceUnits.Feet) it * 3 else it\r\n//            Optics.luxAtDistance(candela, Distance(distance.toFloat(), units))\r\n//        }\r\n\r\n        val gradient = intensities.zipWithNext { a, b ->\r\n            (b - a) / (100f / 100f)\r\n        }\r\n\r\n        val gradient2 = intensities.zipWithNext { a, b ->\r\n            (b - a)"}], "metadata": {"task_id": "Trail-Sense/849", "ground_truth": "        // TODO: Calculate distance of each intensity description\r\n\r\n\r\n        gradient = getColors(intensities)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\light\\ui\\LightBarView.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.lightning.domain.LightningStrike\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.sol.units.Reading\noverride suspend fun add(reading: Reading<LightningStrike>): Long = onIO {\r\n        val entity = LightningStrikeEntity.from(reading)\r\n\r\n        val id = if (entity.id != 0L) {\r\n            dao.update(entity)\r\n            entity.id\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/851", "ground_truth": "        } else {\r\n            dao.insert(entity)\r\n        }\r\n        id\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\lightning\\infrastructure\\persistence\\LightningRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.lightning.domain.LightningStrike\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.sol.units.Reading\noverride suspend fun delete(reading: Reading<LightningStrike>) = onIO {\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/852", "ground_truth": "        val entity = LightningStrikeEntity.from(reading)\r\n        dao.delete(entity)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\lightning\\infrastructure\\persistence\\LightningRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.lightning.domain.LightningStrike\nimport com.kylecorry.sol.units.Reading\nimport androidx.lifecycle.map\nimport androidx.lifecycle.LiveData\noverride fun getAllLive(): LiveData<List<Reading<LightningStrike>>> {\r\n        return dao.getAll().map {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/853", "ground_truth": "            it.map { reading -> reading.toReading() }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\lightning\\infrastructure\\persistence\\LightningRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.main.persistence.AppDatabase\nimport android.content.Context\n @Synchronized\r\n        fun getInstance(context: Context): LightningRepo {\r\n            if (instance == null) {\r\n                instance = LightningRepo(AppDatabase.getInstance(context).lightningDao())\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/854", "ground_truth": "            }\r\n            return instance!!\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\lightning\\infrastructure\\persistence\\LightningRepo.kt"}}
{"prompt": "\n import java.time.Instant\nimport com.kylecorry.trail_sense.R\nprivate fun onLightning() {\r\n        lightningTime = Instant.now()\r\n        binding.startBtn.setImageResource(R.drawable.ic_thunder)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/857", "ground_truth": "        binding.startBtn.setText(getString(R.string.thunder))\r\n        binding.startBtn.setState(true)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\lightning\\ui\\FragmentToolLightning.kt"}}
{"prompt": "\n private fun onThunder() {\r", "choices": [{"text": "//    val thunder = Thunder()\r\n//    thunder.start()\r\n//    thunder.stop()\r\n//    thunder.start()\r\n//    thunder.stop()\r\n//    thunder.start()\r\n//    thunder.stop()\r\n//    thunder.start()\r\n//    thunder.stop()\r\n//    thunder.start()\r\n//    thunder.stop()\r\n//    thunder.start()\r\n//    thunder.stop()\r\n//    thunder.start()\r"}], "metadata": {"task_id": "Trail-Sense/858", "ground_truth": "        lightningTime?.let { record(it) }\r\n        reset(false)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\lightning\\ui\\FragmentToolLightning.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\noverride fun onResume() {\r\n        super.onResume()\r", "choices": [{"text": "}\r\noverride fun onPause() {\r\n        super.onPause()\r\n}\r\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n}\r\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\n        super.onRestoreInstanceState(savedInstanceState)\r\n}\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n}\r"}], "metadata": {"task_id": "Trail-Sense/860", "ground_truth": "        units = prefs.baseDistanceUnits\r\n        reset(true)\r\n        loadLastStrike()\r\n        timer.interval(20)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\lightning\\ui\\FragmentToolLightning.kt"}}
{"prompt": "\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nmMapView.onPause()\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nmMapView.onResume()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nmMapView.onDestroy()\r\n}\r\noverride fun onLowMemory() {\r\nsuper.onLowMemory()\r\nmMapView.onLowMemory()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/861", "ground_truth": "        super.onPause()\r\n        timer.stop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\lightning\\ui\\FragmentToolLightning.kt"}}
{"prompt": " import com.kylecorry.andromeda.fragments.inBackground\nvar lastStrike Reading<LightningStrike>?\nvar strike Reading<LightningStrike>?\nvar lightningTime Instant?\nprivate fun loadLastStrike() {\r\n        inBackground {\r", "choices": [{"text": "lastStrike = LightningStrike.getLastStrike()\r\n        }\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/862", "ground_truth": "            lastStrike = repo.getLast()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\lightning\\ui\\FragmentToolLightning.kt"}}
{"prompt": "\n import com.kylecorry.sol.math.geometry.Size\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nfun getMagnifierPosition(tapPosition: PixelCoordinate): PixelCoordinate {\r\n        val x = if (tapPosition.x > imageSize.width / 2) {\r\n            0f\r\n        } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/864", "ground_truth": "            imageSize.width - magnifierSize.width\r\n        }\r\n\r\n        return PixelCoordinate(x, 0f)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\domain\\ImageMagnifier.kt"}}
{"prompt": "\n import com.kylecorry.sol.math.geometry.Size\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nimport android.graphics.Color\nimport android.graphics.Canvas\nimport android.graphics.Bitmap\nfun magnify(\r\n        source: Bitmap,\r\n        sourceCenter: PixelCoordinate,\r\n        dest: Bitmap = Bitmap.createBitmap(\r\n            magnifierSize.width.toInt(),\r\n            magnifierSize.height.toInt(),\r\n            Bitmap.Config.ARGB_8888\r\n        )\r\n    ): Bitmap {\r\n        val canvas = Canvas(dest)\r\n        canvas.drawColor(Color.BLACK)\r\n\r\n        val leftOffset = -(sourceCenter.x - magnifierSize.width / 2f)\r\n        val topOffset = -(sourceCenter.y - magnifierSize.height / 2f)\r", "choices": [{"text": "//        canvas.drawBitmap(source, leftOffset, topOffset, null)\r\n        canvas.drawBitmap(source, leftOffset, topOffset, null)\r\n        return dest\r\n    }\r\n\r\nfun magnify(\r\n        source: Bitmap,\r\n        sourceCenter: PixelCoordinate,\r\n        dest: Bitmap = Bitmap.createBitmap(\r\n            magnifierSize.width.toInt(),\r\n            magnifierSize.height.toInt(),\r\n            Bitmap.Config.ARGB_8888\r\n        )\r\n    ): Bitmap {\r\n        val canvas = Canvas(dest)\r\n        canvas.drawColor(Color.BLACK)\r\n\r\n        val leftOffset = -(sourceCenter"}], "metadata": {"task_id": "Trail-Sense/865", "ground_truth": "\r\n        canvas.drawBitmap(source, leftOffset, topOffset, paint)\r\n\r\n        return dest\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\domain\\ImageMagnifier.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\nfun calibrate(index: Int, location: PercentCoordinate) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/867", "ground_truth": "        points[index] = MapCalibrationPoint(points[index].location, location)\r\n        onCalibrationChange()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\domain\\MapCalibrationManager.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\nfun calibrate(index: Int, coordinate: Coordinate?) {\r\n        points[index] =\r\n            MapCalibrationPoint(coordinate ?: Coordinate.zero, points[index].imageLocation)\r\n        if (coordinate == null) {\r\n            calibratedPoints.remove(index)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/868", "ground_truth": "        } else {\r\n            calibratedPoints.add(index)\r\n        }\r\n        onCalibrationChange()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\domain\\MapCalibrationManager.kt"}}
{"prompt": "\nvar points\nvar originalPoints\nvar calibratedPoints\n private fun fillCalibrationPoints() {\r\n        while (points.size < maxPoints) {\r", "choices": [{"text": "//            val point = Point(\r\n//                (Math.random() * 100).toInt(),\r\n//                (Math.random() * 100).toInt()\r\n//            )\r\n            val point = Point(\r\n                (Math.random() * 100).toInt(),\r\n                (Math.random() * 100).toInt()\r\n            )\r\n            points.add(point)\r\n        }\r\n        originalPoints = points.clone() as ArrayList<Point>\r\n        calibratedPoints = points.clone() as ArrayList<Point>\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/871", "ground_truth": "            points.add(MapCalibrationPoint(Coordinate.zero, PercentCoordinate(0.5f, 0.5f)))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\domain\\MapCalibrationManager.kt"}}
{"prompt": " import androidx.room.Entity\nvar id Long\nfun from(group: MapGroup): MapGroupEntity {\r\n            return MapGroupEntity(group.name, group.parentId).also {\r", "choices": [{"text": "it.id = group.id\r\n            }\r\n        }\n"}], "metadata": {"task_id": "Trail-Sense/872", "ground_truth": "                it.id = group.id\r\n            }\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\domain\\MapGroupEntity.kt"}}
{"prompt": "\n import com.kylecorry.sol.science.geography.projections.MercatorProjection\nimport com.kylecorry.sol.science.geography.projections.IMapProjection\nfun getProjection(type: MapProjectionType): IMapProjection {\r\n        return when (type) {\r\n            MapProjectionType.Mercator -> MercatorProjection()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/873", "ground_truth": "            MapProjectionType.CylindricalEquidistant -> CylindricalEquidistantProjection()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\domain\\MapProjectionFactory.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.science.geography.projections.IMapProjection\nfun IMapProjection.distancePerPixel(location1: Coordinate, location2: Coordinate): Distance? {\r\n    val meters = location1.distanceTo(location2)\r\n    val pixels = toPixels(location1).distanceTo(toPixels(location2))\r\n\r", "choices": [{"text": "//    return meters / pixels\r\n    return meters / pixels\r\n}<file_sep>/app/src/main/java/com/kylecorry/sol/app/fragments/settings/SettingsFragment.kt\npackage com.kylecorry.sol.app.fragments.settings\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\nimport androidx.navigation.fragment.findNavController\nimport com.kylecorry.sol.app.R\nimport com.k"}], "metadata": {"task_id": "Trail-Sense/877", "ground_truth": "    // Unable to calculate\r\n    if (meters == 0f || pixels == 0f) return null\r\n\r\n    return Distance.meters(meters / pixels)\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\domain\\projections\\ProjectionExtensions.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.math.Vector2\noverride fun toCoordinate(pixel: Vector2): Coordinate {\r", "choices": [{"text": "return Coordinate(pixel.x, pixel.y)\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/878", "ground_truth": "        val rotated = pixel.rotateInRect(rotation, size, rotatedSize)\r\n        return projection.toCoordinate(rotated)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\domain\\projections\\RotatedProjection.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.domain.PixelBounds\nimport com.kylecorry.andromeda.core.bitmap.BitmapUtils.fixPerspective\nimport androidx.annotation.ColorInt\nimport android.graphics.Bitmap\nfun Bitmap.fixPerspective(\r\n    bounds: PixelBounds,\r\n    shouldRecycleOriginal: Boolean = false,\r\n    @ColorInt backgroundColor: Int? = null\r\n): Bitmap {\r\n    return fixPerspective(\r\n        bounds.topLeft,\r\n        bounds.topRight,\r\n        bounds.bottomLeft,\r", "choices": [{"text": "//        bounds.bottomRight,\r\n        this,\r\n        shouldRecycleOriginal,\r\n        backgroundColor\r\n    )\r\n}<file_sep>/app/src/main/java/com/kylecorry/trail_sense/tools/maps/domain/MapBounds.kt\npackage com.kylecorry.trail_sense.tools.maps.domain\n\nimport com.kylecorry.trail_sense.shared.domain.Coordinate\nimport com.kylecorry.trail_sense.shared.domain.Distance\nimport com.kylecorry.trail_sense.shared.domain.Pixel"}], "metadata": {"task_id": "Trail-Sense/882", "ground_truth": "        bounds.bottomRight,\r\n        shouldRecycleOriginal,\r\n        backgroundColor\r\n    )\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\BitmapExtensions.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\nimport com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.andromeda.core.text.slugify\nsuspend fun execute(map: PhotoMap): Boolean = onIO {\r\n        onMain {\r\n            loading.show()\r\n        }\r\n        val success = exporter.export(map, \"${map.name.slugify()}.pdf\")\r", "choices": [{"text": "//        val success = exporter.export(map, \"map.pdf\")\r\n        onMain {\r\n            loading.hide()\r\n        }\r\n        success\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/883", "ground_truth": "        onMain {\r\n            loading.hide()\r\n        }\r\n        success\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\commands\\ExportMapCommand.kt"}}
{"prompt": " import com.kylecorry.sol.units.Coordinate\nvar location Coordinate?\nvar bearing Float?\nvar bounds CoordinateBounds?\noverride fun onLocationChanged(location: Coordinate, accuracy: Float?) {\r", "choices": [{"text": "this.location = location\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/886", "ground_truth": "        this.location = location\r\n        this.accuracy = accuracy\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\BaseLayerManager.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.science.geology.CoordinateBounds\noverride fun onBoundsChanged(bounds: CoordinateBounds?) {\r\n        if (bounds == lastBounds) {\r\n            return\r\n        }\r", "choices": [{"text": ""}], "metadata": {"task_id": "Trail-Sense/888", "ground_truth": "        lastBounds = bounds\r\n        managers.forEach {\r\n            it.onBoundsChanged(bounds)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\MultiLayerManager.kt"}}
{"prompt": " import com.kylecorry.sol.units.Coordinate\nvar lastBounds CoordinateBounds?\noverride fun onLocationChanged(location: Coordinate, accuracy: Float?) {\r\n        managers.forEach {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/889", "ground_truth": "            it.onLocationChanged(location, accuracy)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\MultiLayerManager.kt"}}
{"prompt": "\nvar lastBounds CoordinateBounds?\n override fun onBearingChanged(bearing: Float) {\r\n        managers.forEach {\r", "choices": [{"text": "//            it.onBearingChanged(bearing)\r\n            it.onBearingChanged(bearing, lastBounds)\r\n        }\r\n        lastBounds = null\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/890", "ground_truth": "            it.onBearingChanged(bearing)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\MultiLayerManager.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\noverride fun onLocationChanged(location: Coordinate, accuracy: Float?) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/891", "ground_truth": "        super.onLocationChanged(location, accuracy)\r\n        layer.setLocation(location, accuracy)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\MyAccuracyLayerManager.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\noverride fun onLocationChanged(location: Coordinate, accuracy: Float?) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/892", "ground_truth": "        super.onLocationChanged(location, accuracy)\r\n        layer.setLocation(location)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\MyLocationLayerManager.kt"}}
{"prompt": "\n override fun onBearingChanged(bearing: Float) {\r", "choices": [{"text": "// TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\r\n }\r\n\r\n override fun onPositionChanged(position: LatLng) {\r\n// TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\r\n }\r\n\r\n override fun onCameraMoveStarted(reason: Int) {\r\n// TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\r\n }\r\n\r\n override fun onCameraMove() {\r\n// TODO(\"not implemented\") //To change body of created functions use File | Settings |"}], "metadata": {"task_id": "Trail-Sense/893", "ground_truth": "        super.onBearingChanged(bearing)\r\n        layer.setAzimuth(bearing)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\MyLocationLayerManager.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.kylecorry.andromeda.core.ui.Colors.withAlpha\noverride fun start() {\r\n        scope.launch {\r\n            // Load destination\r\n            navigator.destination.collect {\r\n                if (it != null) {\r\n                    val colorWithAlpha = it.color.withAlpha(127)\r\n                    layer.setColor(colorWithAlpha)\r\n                    layer.setEnd(it.coordinate)\r\n                } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/894", "ground_truth": "                    layer.setEnd(null)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\NavigationLayerManager.kt"}}
{"prompt": " import com.kylecorry.sol.units.Coordinate\nval scope\nval navigator\noverride fun onLocationChanged(location: Coordinate, accuracy: Float?) {\r", "choices": [{"text": "scope.launch {\r\nnavigator.navigate(location)\r\n}\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/895", "ground_truth": "        super.onLocationChanged(location, accuracy)\r\n        layer.setStart(location)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\NavigationLayerManager.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\noverride fun start() {\r\n        loaded = false\r\n        scope.launch {\r\n            listenerRunner.skipIfRunning {\r\n                pathService.getPaths().collect {\r\n                    paths = it.filter { path -> path.style.visible }\r\n                    loaded = false\r\n                    loadRunner.replace {\r\n                        loadPaths(true)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/896", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\PathLayerManager.kt"}}
{"prompt": " import kotlinx.coroutines.cancel\nvar paths\nval pathLoader\nvar loaded\noverride fun stop() {\r\n        listenerRunner.cancel()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/897", "ground_truth": "        loadRunner.cancel()\r\n        scope.cancel()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\PathLayerManager.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.science.geology.CoordinateBounds\noverride fun onBoundsChanged(bounds: CoordinateBounds?) {\r\n        super.onBoundsChanged(bounds)\r\n        scope.launch {\r", "choices": [{"text": "//            val bounds = mapView.getBounds()\r\n//            val bounds = mapView.getBounds()\r\n//            val bounds = mapView.getBounds()\r\n//            val bounds = mapView.getBounds()\r\n//            val bounds = mapView.getBounds()\r\n//            val bounds = mapView.getBounds()\r\n//            val bounds = mapView.getBounds()\r\n//            val bounds = mapView.getBounds()\r\n//            val bounds = mapView.getBounds()\r\n//            val bounds = mapView.getBounds"}], "metadata": {"task_id": "Trail-Sense/898", "ground_truth": "            loadRunner.enqueue {\r\n                loadPaths(false)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\PathLayerManager.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.kylecorry.sol.units.Coordinate\noverride fun onLocationChanged(location: Coordinate, accuracy: Float?) {\r\n        super.onLocationChanged(location, accuracy)\r\n        scope.launch {\r", "choices": [{"text": "//            val weather = weatherService.getWeather(location)\r\n//            val weather = weatherService.getWeather(location)\r\n//            val weather = weatherService.getWeather(location)\r\n//            val weather = weatherService.getWeather(location)\r\n//            val weather = weatherService.getWeather(location)\r\n//            val weather = weatherService.getWeather(location)\r\n//            val weather = weatherService.getWeather(location)\r\n//            val weather = weatherService.getWeather(location)\r\n//            val weather = weatherService"}], "metadata": {"task_id": "Trail-Sense/899", "ground_truth": "            loadRunner.enqueue {\r\n                loadPaths(false)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\PathLayerManager.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nprivate suspend fun loadPaths(reload: Boolean) = onDefault {\r\n        bounds?.let {\r\n            pathLoader.update(paths, it, it, reload || !loaded)\r\n            loaded = true\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/900", "ground_truth": "        }\r\n\r\n        val points = pathLoader.getPointsWithBacktrack(context)\r\n        onPathsChanged(paths, points)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\PathLayerManager.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nprivate fun onPathsChanged(paths: List<Path>, points: Map<Long, List<PathPoint>>) {\r\n        val mappablePaths = points.mapNotNull {\r\n            val path =\r\n                paths.firstOrNull { p -> p.id == it.key } ?: return@mapNotNull null\r\n\r\n            val correctedPoints = if (shouldCorrectElevations) {\r\n                hikingService.correctElevations(it.value.sortedBy { it.id }).reversed()\r\n            } else {\r\n                it.value\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/901", "ground_truth": "\r\n            correctedPoints.asMappable(context, path)\r\n        }\r\n        layer.setPaths(mappablePaths)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\layers\\PathLayerManager.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\noverride suspend fun export(data: PhotoMap, filename: String): Boolean {\r\n        val pdf = getPDFData(data)\r\n        val uri = uriPicker.create(filename, \"application/pdf\") ?: return false\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\noverride suspend fun export(data: PhotoMap, filename: String): Boolean {\r\n        val pdf = getPDFData(data)\r\n        val uri = uriPicker.create(filename, \"application/pdf\")?: return false\r\r\n        val file = File(uri.path)\r\n        file.writeBytes(pdf)\r\n        return true\r\n    }\r\n\r\n    private suspend fun getPDFData(data: PhotoMap): ByteArray {\r\n        val pdf = PDFDocument()\r\n        pdf.addPage(getPhotoMapPage(data))\r\n        return pdf.toByteArray()\r\n    }\r\n\r\n    private fun getPhotoMapPage(data: PhotoMap): PDFPage {\r\n        val page = PDFPage()\r\n        page.addImage(getPhotoMapImage(data))\r\n        return page\r\n    }\r\n\r\n    private fun getPhotoMapImage(data: PhotoMap): PDFImage {\r\n        val image = PDF"}], "metadata": {"task_id": "Trail-Sense/902", "ground_truth": "        uriService.outputStream(uri)?.use {\r\n            PdfConvert.toPDF(pdf, it)\r\n        }\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\MapExportService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.domain.IMap\noverride suspend fun load(search: String?, group: Long?): List<IMap> {\r\n        return if (search.isNullOrBlank()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/903", "ground_truth": "            getPathsByGroup(group)\r\n        } else {\r\n            getPathsBySearch(search, group)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\MapGroupLoader.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.coroutines.onIO\nprivate suspend fun getPathsBySearch(search: String, groupFilter: Long?) = onIO {\r\n        filter.filter(groupFilter) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/904", "ground_truth": "            it.name.contains(search, ignoreCase = true)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\MapGroupLoader.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\nimport com.kylecorry.andromeda.core.coroutines.onIO\nval mapGroupDao\nval mapDao\nval files\noverride suspend fun deleteMap(map: PhotoMap) = onIO {\r", "choices": [{"text": "   mapGroupDao.delete(map.group)\r    mapDao.delete(map)\r}\noverride suspend fun getMap(id: Long): PhotoMap? = onIO {\r    mapDao.get(id)\r}\noverride suspend fun getMaps(group: PhotoMapGroup): List<PhotoMap> = onIO {\r    mapDao.getMaps(group)\r}\noverride suspend fun getMapGroups(): List<PhotoMapGroup> = onIO {\r    mapGroupDao.getGroups()\r}\noverride suspend fun getMapGroup(id: Long): PhotoMap"}], "metadata": {"task_id": "Trail-Sense/905", "ground_truth": "        tryOrNothing { files.delete(map.filename) }\r\n        mapDao.delete(MapEntity.from(map))\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\MapRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.domain.MapGroupEntity\nimport com.kylecorry.trail_sense.tools.maps.domain.MapGroup\nimport com.kylecorry.andromeda.core.coroutines.onIO\noverride suspend fun addMapGroup(group: MapGroup): Long = onIO {\r\n        if (group.id != 0L) {\r\n            mapGroupDao.update(MapGroupEntity.from(group))\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/906", "ground_truth": "            group.id\r\n        } else {\r\n            mapGroupDao.insert(MapGroupEntity.from(group))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\MapRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\nimport com.kylecorry.trail_sense.tools.maps.domain.MapEntity\nimport com.kylecorry.andromeda.core.coroutines.onIO\noverride suspend fun addMap(map: PhotoMap): Long = onIO {\r\n        if (map.id == 0L) {\r\n            mapDao.insert(MapEntity.from(map))\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/907", "ground_truth": "        } else {\r\n            mapDao.update(MapEntity.from(map))\r\n            map.id\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\MapRepo.kt"}}
{"prompt": "\n import android.content.Context\n @Synchronized\r\n        fun getInstance(context: Context): MapRepo {\r\n            if (instance == null) {\r\n                instance = MapRepo(context.applicationContext)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/909", "ground_truth": "            }\r\n            return instance!!\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\MapRepo.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.maps.domain.IMap\nvar instance MapService?\nval loader\nval counter\nsuspend fun add(map: IMap): Long {\r\n        return if (map.isGroup) {\r", "choices": [{"text": "//            val group = map.group\r\n//            val id = group.id\r\n//            val name = group.name\r\n//            val description = group.description\r\n//            val icon = group.icon\r\n//            val color = group.color\r\n//            val isPublic = group.isPublic\r\n//            val isPrivate = group.isPrivate\r\n//            val isArchived = group.isArchived\r\n//            val isDeleted = group.isDeleted\r\n//            val isFavorite = group.isFavorite\r\n//            val isDefault"}], "metadata": {"task_id": "Trail-Sense/910", "ground_truth": "            repo.addMapGroup(map as MapGroup)\r\n        } else {\r\n            repo.addMap(map as PhotoMap)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\MapService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\nimport com.kylecorry.trail_sense.tools.maps.domain.MapProjectionType\nsuspend fun setProjection(map: PhotoMap, projection: MapProjectionType): PhotoMap {\r\n        val newMap = map.copy(metadata = map.metadata.copy(projection = projection))\r", "choices": [{"text": "//        val newMap = map.copy(metadata = map.metadata.copy(projection = projection))\r\n        return newMap\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/911", "ground_truth": "        repo.addMap(newMap)\r\n        return newMap\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\MapService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.domain.IMap\nprivate suspend fun getChildren(parentId: Long?): List<IMap> {\r\n        val paths = repo.getMaps(parentId)\r", "choices": [{"text": ""}], "metadata": {"task_id": "Trail-Sense/912", "ground_truth": "        val groups = getGroups(parentId)\r\n        return paths + groups\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\MapService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.domain.MapGroup\nsuspend fun getGroup(id: Long?): MapGroup? {\r", "choices": [{"text": "-    return if (id == null) {\r\n-        null\r\n-    } else {\r\n-        val group = MapGroup.getById(id)\r\n-        if (group == null) {\r\n-            null\r\n-        } else {\r\n-            group\r\n-        }\r\n-    }\r\n+    return MapGroup.getById(id)\r\n }\r\n \r\n suspend fun getGroup(name: String?): MapGroup? {\r\n-    return if (name == null) {\r\n-        null\r\n-    } else {"}], "metadata": {"task_id": "Trail-Sense/913", "ground_truth": "        id ?: return null\r\n        return repo.getMapGroup(id)?.copy(count = counter.count(id))\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\MapService.kt"}}
{"prompt": "\n import android.content.Context\n @Synchronized\r\n        fun getInstance(context: Context): MapService {\r\n            if (instance == null) {\r\n                instance = MapService(MapRepo.getInstance(context))\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/914", "ground_truth": "            }\r\n            return instance!!\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\infrastructure\\MapService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.navigation.ui.layers.ILayer\noverride fun setLayers(layers: List<ILayer>) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/917", "ground_truth": "        this.layers.clear()\r\n        this.layers.addAll(layers)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\BasePhotoMapView.kt"}}
{"prompt": "\n override fun setup() {\r", "choices": [{"text": "//    val intent = Intent(this, MainActivity::class.java)\r\n//    intent.putExtra(\"name\", \"<NAME>\")\r\n//    startActivity(intent)\r\n//    finish()\r\n    val intent = Intent(this, MainActivity::class.java)\r\n    intent.putExtra(\"name\", \"<NAME>\")\r\n    startActivityForResult(intent, 100)\r\n}\r\n\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n    super.onActivityResult(requestCode, resultCode, data)\r\n    if (requestCode == 100"}], "metadata": {"task_id": "Trail-Sense/919", "ground_truth": "        super.setup()\r\n        setBackgroundColor(Resources.color(context, R.color.colorSecondary))\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\BasePhotoMapView.kt"}}
{"prompt": "\n override fun onScaleChanged(oldScale: Float, newScale: Float) {\r", "choices": [{"text": "//     Log.d(\"onScaleChanged\", \"oldScale: $oldScale, newScale: $newScale\")\r\n }\r\n\r\n override fun onScaleBegin(detector: ScaleGestureDetector): Boolean {\r\n//     Log.d(\"onScaleBegin\", \"onScaleBegin\")\r\n     return true\r\n }\r\n\r\n override fun onScaleEnd(detector: ScaleGestureDetector) {\r\n//     Log.d(\"onScaleEnd\", \"onScaleEnd\")\r\n }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/920", "ground_truth": "        super.onScaleChanged(oldScale, newScale)\r\n        layers.forEach { it.invalidate() }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\BasePhotoMapView.kt"}}
{"prompt": "\n import kotlin.math.min\nimport kotlin.math.max\nimport com.kylecorry.trail_sense.R\noverride fun draw() {\r\n        super.draw()\r\n        val map = map ?: return\r\n\r\n        if (!map.isCalibrated) {\r\n            return\r\n        }\r\n        maxScale = getScale(0.1f).coerceAtLeast(2 * minScale)\r\n        if (shouldRecenter && isImageLoaded) {\r\n            recenter()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/922", "ground_truth": "            shouldRecenter = false\r\n        }\r\n\r\n        layers.forEach { it.draw(drawer, this) }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\BasePhotoMapView.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.math.SolMath\nopen fun showMap(map: PhotoMap) {\r\n        this.map = map\r\n        val rotation = map.calibration.rotation\r\n        mapRotation = SolMath.deltaAngle(rotation, map.baseRotation().toFloat())\r\n        fullMetersPerPixel = map.distancePerPixel()?.meters()?.distance ?: 1f\r\n        projection = map.projection\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.math.SolMath\nopen fun showMap(map: PhotoMap) {\r\n        this.map = map\r\n        val rotation = map.calibration.rotation\r\n        mapRotation = SolMath.deltaAngle(rotation, map.baseRotation().toFloat())\r\n        fullMetersPerPixel = map.distancePerPixel()?.meters()?.distance?: 1f\r\n        projection = map.projection\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/923", "ground_truth": "        if (keepMapUp){\r\n            mapAzimuth = 0f\r\n        }\r\n        setImage(map.filename, rotation)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\BasePhotoMapView.kt"}}
{"prompt": "\nvar map PhotoMap?\nvar projection IMapProjection?\nvar mapCenter Coordinate\n override fun onImageLoaded() {\r\n        super.onImageLoaded()\r", "choices": [{"text": "//        mapView.setMapCenter(mapCenter)\r\n        mapView.setMapCenter(mapCenter)\r\n        mapView.setMapZoom(15)\r\n        mapView.setMapRotation(0)\r\n        mapView.setMapTilt(0)\r\n        mapView.setMapBearing(0)\r\n        mapView.setMapStyle(MapStyle.MAP_STYLE_NORMAL)\r\n        mapView.setMapType(MapType.MAP_TYPE_NORMAL)\r\n        mapView.setMapLanguage(MapLanguage.MAP_LANGUAGE_EN)\r\n        mapView.setMapLanguage(MapLanguage"}], "metadata": {"task_id": "Trail-Sense/924", "ground_truth": "        shouldRecenter = true\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\BasePhotoMapView.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nprivate fun getPixelCoordinate(coordinate: Coordinate): PixelCoordinate? {\r\n        val source = projection?.toPixels(coordinate) ?: return null\r", "choices": [{"text": "\n import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nprivate fun getPixelCoordinate(coordinate: Coordinate): PixelCoordinate? {\r\n        val source = projection?.toPixels(coordinate)?: return null\r\r\n        return PixelCoordinate(source.x, source.y)\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/925", "ground_truth": "        val view = toView(source.x, source.y)\r\n        return PixelCoordinate(view?.x ?: 0f, view?.y ?: 0f)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\BasePhotoMapView.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport android.graphics.PointF\nprotected fun toViewNoRotation(view: PointF): PointF? {\r", "choices": [{"text": "val viewCenter = PointF(view.x, view.y)\r\nval viewRotation = 0f\r\nval viewScale = 1f\r\nval viewWidth = view.x\r\nval viewHeight = view.y\r\nval viewCenterX = viewCenter.x\r\nval viewCenterY = viewCenter.y\r\nval viewRotationRadians = Math.toRadians(viewRotation.toDouble())\r\nval viewScaleX = viewScale\r\nval viewScaleY = viewScale\r\nval viewWidthScaled = viewWidth * viewScaleX\r\nval viewHeightScaled"}], "metadata": {"task_id": "Trail-Sense/926", "ground_truth": "        val source = toSource(view.x, view.y, true) ?: return null\r\n        return toView(source.x, source.y, false)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\BasePhotoMapView.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.CoroutinePickers\noverride suspend fun execute(value: Long?) {\r\n        val name = onMain {\r\n            CoroutinePickers.text(context, context.getString(R.string.name))\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/927", "ground_truth": "        } ?: return\r\n        mapService.add(MapGroup(0, name, value))\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\commands\\CreateMapGroupCommand.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.PathMetadata\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.coroutines.onIO\noverride suspend fun execute(value: List<Coordinate>) = onIO {\r\n        val newPath = Path(\r\n            0,\r\n            map.name,\r\n            prefs.defaultPathStyle,\r\n            PathMetadata.empty\r\n        )\r\n\r\n        val newPathId = pathService.addPath(newPath)\r\n\r\n        val waypoints = value.map {\r\n            PathPoint(0, newPathId, it)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/928", "ground_truth": "        }\r\n\r\n        pathService.addWaypointsToPath(waypoints, newPathId)\r\n        newPathId\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\commands\\CreatePathCommand.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\nimport com.kylecorry.trail_sense.tools.maps.domain.IMap\nimport com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.alerts.CoroutineAlerts\noverride suspend fun execute(value: IMap) {\r\n        val shouldDelete = onMain {\r\n            !CoroutineAlerts.dialog(\r\n                context,\r\n                context.getString(R.string.delete),\r\n                if (value is PhotoMap) value.name else context.getString(\r\n                    R.string.delete_map_group_message,\r\n                    value.name\r\n                )\r\n            )\r\n        }\r\n\r\n        if (!shouldDelete) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/929", "ground_truth": "            return\r\n        }\r\n\r\n        mapService.delete(value)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\commands\\DeleteMapCommand.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        pathLayer.setShouldRenderWithDrawLines(prefs.navigation.useFastPathRendering)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/932", "ground_truth": "        super.onCreate(savedInstanceState)\r\n        mapId = requireArguments().getLong(\"mapId\")\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapCalibrationFragment.kt"}}
{"prompt": "\nval mapRepo\nvar map PhotoMap?\nvar onDone\n override fun onPause() {\r\n        super.onPause()\r", "choices": [{"text": "//        map?.onPause()\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/933", "ground_truth": "        layerManager?.stop()\r\n        layerManager = null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapCalibrationFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nval mapRepo\nvar map PhotoMap?\nvar showRotation\nfun reloadMap() {\r\n        inBackground {\r\n            map = mapRepo.getMap(mapId)\r", "choices": [{"text": "//            map?.setMap(mapView)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/934", "ground_truth": "            onMain {\r\n                map?.let(::onMapLoad)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapCalibrationFragment.kt"}}
{"prompt": "\nval mapRepo\nvar map PhotoMap?\nvar mapId\n private fun loadCalibrationPointsFromMap() {\r", "choices": [{"text": "val map = mapRepo.getMap(mapId)\r\nmap?.let {\r\nval calibrationPoints = map.calibrationPoints\r\nif (calibrationPoints.isEmpty()) {\r\nthrow IllegalStateException(\"Map has no calibration points\")\r\n}\r\ncalibrationPoints.forEach { calibrationPoint ->\r\nval point = calibrationPoint.point\r\nval point3D = calibrationPoint.point3D\r\nval point2D = calibrationPoint.point2D\r\nval point3DInMap = map.getPoint3D(point)\r\nif (point3DInMap == null) {"}], "metadata": {"task_id": "Trail-Sense/939", "ground_truth": "        val map = map ?: return\r\n        manager.reset(map.calibration.calibrationPoints)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapCalibrationFragment.kt"}}
{"prompt": "\n override fun setup() {\r", "choices": [{"text": "//    val intent = Intent(this, MainActivity::class.java)\r\n//    intent.putExtra(\"name\", \"<NAME>\")\r\n//    startActivity(intent)\r\n//    finish()\r\n    val intent = Intent(this, MainActivity::class.java)\r\n    intent.putExtra(\"name\", \"<NAME>\")\r\n    startActivityForResult(intent, 100)\r\n}\r\n\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n    super.onActivityResult(requestCode, resultCode, data)\r\n    if (requestCode == 100"}], "metadata": {"task_id": "Trail-Sense/941", "ground_truth": "        super.setup()\r\n        highlightedColor = Resources.getPrimaryMarkerColor(context)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapCalibrationView.kt"}}
{"prompt": "\nvar onMapClick\nvar movePending\nvar highlightedIndex Int\n override fun postDraw() {\r\n        super.postDraw()\r", "choices": [{"text": "//        if (movePending) {\r\n//            movePending = false\r\n//            moveTo(highlightedIndex)\r\n//        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/942", "ground_truth": "        drawCalibrationPoints()\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapCalibrationView.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\noverride fun showMap(map: PhotoMap) {\r", "choices": [{"text": ""}], "metadata": {"task_id": "Trail-Sense/943", "ground_truth": "        super.showMap(map)\r\n        layers.forEach { it.invalidate() }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapCalibrationView.kt"}}
{"prompt": "\n import androidx.annotation.ColorInt\nimport android.graphics.Color\nfun setPathColor(@ColorInt color: Int) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/945", "ground_truth": "        pathColor = color\r\n        updateLayers()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapDistanceLayer.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\nfun add(location: Coordinate) {\r\n        if (location == points.lastOrNull()) {\r\n            return\r", "choices": [{"text": "}\r\n        points.add(location)\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/946", "ground_truth": "        }\r\n        points.add(location)\r\n        onPathChanged(points.toList())\r\n        updateLayers()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapDistanceLayer.kt"}}
{"prompt": "\n fun undo() {\r\n        if (points.isNotEmpty()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/947", "ground_truth": "            points.removeLast()\r\n            onPathChanged(points.toList())\r\n            updateLayers()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapDistanceLayer.kt"}}
{"prompt": "\nvar isEnabled\nvar points\nval pointLayer\n fun clear() {\r\n        points.clear()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/948", "ground_truth": "        onPathChanged(points.toList())\r\n        updateLayers()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapDistanceLayer.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.navigation.ui.layers.IMapView\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\nvar points\nval pointLayer\nval pathLayer\noverride fun draw(drawer: ICanvasDrawer, map: IMapView) {\r\n        if (!isEnabled) {\r\n            return\r", "choices": [{"text": "\n        }\r\n        if (points.isEmpty()) {\r\n            return\r\r\n        }\r\n        drawer.drawPath(pathLayer.path, pathLayer.color, pathLayer.width)\r\n        drawer.drawPoints(points, pointLayer.color, pointLayer.size)\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/949", "ground_truth": "        }\r\n\r\n        pathLayer.draw(drawer, map)\r\n        pointLayer.draw(drawer, map)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapDistanceLayer.kt"}}
{"prompt": "\n override fun invalidate() {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/950", "ground_truth": "        pointLayer.invalidate()\r\n        pathLayer.invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapDistanceLayer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.navigation.ui.layers.IMapView\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun onClick(drawer: ICanvasDrawer, map: IMapView, pixel: PixelCoordinate): Boolean {\r\n        if (!isEnabled) {\r\n            return false\r\n        }\r\n\r\n        val wasPointClicked = pointLayer.onClick(drawer, map, pixel)\r\n\r\n        if (wasPointClicked) {\r\n            return true\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/951", "ground_truth": "        }\r\n\r\n        add(map.toCoordinate(pixel))\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapDistanceLayer.kt"}}
{"prompt": "\nval pathLayer\nval pointLayer\nvar pathColor Int\n private fun updateLayers() {\r", "choices": [{"text": "pathLayer.setPath(path, pathColor)\r\npointLayer.setPath(path, pathColor)\r\n}\r\nprivate fun updatePath() {\r\npath = Path()\r\npath.moveTo(0f, 0f)\r\npath.lineTo(0f, 0f)\r\npath.lineTo(0f, 0f)\r\npath.lineTo(0f, 0f)\r\npath.lineTo(0f, 0f)\r\npath.lineTo(0f, 0f)\r\npath.lineTo(0f"}], "metadata": {"task_id": "Trail-Sense/952", "ground_truth": "        pointLayer.setBeacons(getBeacons())\r\n        pathLayer.setPaths(listOf(getPath()))\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapDistanceLayer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.navigation.ui.MappablePath\nprivate fun getPath(): MappablePath {\r\n        return MappablePath(\r\n            0,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/953", "ground_truth": "            getBeacons(),\r\n            pathColor,\r\n            LineStyle.Solid\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapDistanceLayer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nprivate fun getBeacons(): List<Beacon> {\r\n        return points.mapIndexed { index, coordinate ->\r\n            Beacon(\r\n                index.toLong(),\r\n                \"\",\r\n                coordinate,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/954", "ground_truth": "                color = pathColor,\r\n                temporary = true\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapDistanceLayer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.domain.sort.MapSortMethod\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nprivate fun changeSort() {\r\n        val sortOptions = MapSortMethod.values()\r\n        Pickers.item(\r\n            requireContext(),\r\n            getString(R.string.sort),\r\n            sortOptions.map { getSortString(it) },\r\n            sortOptions.indexOf(prefs.navigation.mapSort)\r\n        ) { newSort ->\r\n            if (newSort != null) {\r\n                prefs.navigation.mapSort = sortOptions[newSort]\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.tools.maps.domain.sort.MapSortMethod\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nprivate fun changeSort() {\r\n        val sortOptions = MapSortMethod.values()\r\n        Pickers.item(\r\n            requireContext(),\r\n            getString(R.string.sort),\r\n            sortOptions.map { getSortString(it) },\r\n            sortOptions.indexOf(prefs.navigation.mapSort)\r\n        ) { newSort ->\r\n            if (newSort!= null) {\r\n                prefs.navigation.mapSort = sortOptions[newSort]\r\n//                updateMap()\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/956", "ground_truth": "                sort = sortOptions[newSort]\r\n                onSortChanged()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.domain.sort.MostRecentMapSortStrategy\nimport com.kylecorry.trail_sense.tools.maps.domain.sort.MapSortMethod\nimport com.kylecorry.trail_sense.tools.maps.domain.sort.ClosestMapSortStrategy\nimport com.kylecorry.trail_sense.tools.maps.domain.IMap\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nimport com.kylecorry.trail_sense.R\nprivate suspend fun sortMaps(maps: List<IMap>): List<IMap> = onDefault {\r\n        val strategy = when (sort) {\r\n            MapSortMethod.Closest -> ClosestMapSortStrategy(gps.location, mapService.loader)\r\n            MapSortMethod.MostRecent -> MostRecentMapSortStrategy(mapService.loader)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/958", "ground_truth": "            MapSortMethod.Name -> NameMapSortStrategy()\r\n        }\r\n\r\n        strategy.sort(maps)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.ui.commands.ResizeMapCommand\nimport com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun resize(map: PhotoMap) {\r\n        inBackground {\r\n            ResizeMapCommand(requireContext(), mapImportingIndicator).execute(map)\r", "choices": [{"text": "       }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/961", "ground_truth": "            manager.refresh()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.core.coroutines.BackgroundMinimumState\nprivate fun print(map: PhotoMap) {\r\n        inBackground(BackgroundMinimumState.Created) {\r", "choices": [{"text": "//            map.save()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/962", "ground_truth": "            PrintMapCommand(requireContext()).execute(map)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.ui.commands.RenameMapCommand\nimport com.kylecorry.trail_sense.tools.maps.domain.IMap\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun rename(map: IMap) {\r\n        inBackground {\r\n            RenameMapCommand(requireContext(), mapService).execute(map)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/963", "ground_truth": "            manager.refresh()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.ui.commands.MoveMapCommand\nimport com.kylecorry.trail_sense.tools.maps.domain.IMap\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun move(map: IMap) {\r\n        inBackground {\r\n            MoveMapCommand(requireContext(), mapService).execute(map)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/964", "ground_truth": "            manager.refresh()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.ui.commands.DeleteMapCommand\nimport com.kylecorry.trail_sense.tools.maps.domain.IMap\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun delete(map: IMap) {\r\n        inBackground {\r\n            DeleteMapCommand(requireContext(), mapService).execute(map)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/965", "ground_truth": "            manager.refresh()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.domain.MapGroup\nimport com.kylecorry.trail_sense.tools.maps.domain.IMap\nimport androidx.navigation.fragment.findNavController\nprivate fun view(map: IMap) {\r\n        if (map is MapGroup) {\r\n            manager.open(map.id)\r\n        } else {\r\n            findNavController().navigate(\r", "choices": [{"text": "//                R.id.action_map_to_map_view,\r\n                MapFragmentDirections.actionMapToMapView(map.id)\r\n            )\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/966", "ground_truth": "                R.id.action_mapList_to_maps,\r\n                bundleOf(\"mapId\" to map.id)\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.ui.commands.CreateMapGroupCommand\nimport com.kylecorry.trail_sense.tools.maps.domain.MapGroup\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun createMapGroup() {\r\n        inBackground {\r\n            CreateMapGroupCommand(requireContext(), mapService).execute(manager.root?.id)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/967", "ground_truth": "            manager.refresh()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.infrastructure.commands.MapCleanupCommand\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\noverride fun onResume() {\r\n        super.onResume()\r\n        manager.refresh()\r\n        inBackground {\r\n            val mapsDeleted = MapCleanupCommand(requireContext()).execute()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/968", "ground_truth": "            if (mapsDeleted) {\r\n                manager.refresh()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapListFragment.kt"}}
{"prompt": " import com.kylecorry.andromeda.core.tryOrNothing\nval mapLoader\nvar sort\nval mapRepo\noverride fun onPause() {\r\n        super.onPause()\r\n        tryOrNothing {\r", "choices": [{"text": "mapLoader.stop()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/969", "ground_truth": "            lastRoot = manager.root\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\nimport com.kylecorry.trail_sense.tools.maps.domain.IMap\nimport com.kylecorry.andromeda.views.list.ListItem\noverride fun map(value: IMap): ListItem {\r\n        return if (value is PhotoMap) {\r", "choices": [{"text": "//            ListItem(\r\n//                value.name,\r\n//                value.description,\r\n//                value.image,\r\n//                value.id,\r\n//                value.type,\r\n//                value.isFavorite,\r\n//                value.isHidden,\r\n//                value.isLocked,\r\n//                value.isArchived,\r\n//                value.isDeleted,\r\n//                value.isSynced,\r\n//                value.isSynced,\r\n//                value.isSynced,\r\n//                value.is"}], "metadata": {"task_id": "Trail-Sense/970", "ground_truth": "            mapMapper.map(value)\r\n        } else {\r\n            mapGroupMapper.map(value as MapGroup)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\mappers\\IMapMapper.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval intent = Intent(this, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\nval button = findViewById<Button>(R.id.button)"}], "metadata": {"task_id": "Trail-Sense/972", "ground_truth": "        super.onCreate(savedInstanceState)\r\n        mapId = requireArguments().getLong(\"mapId\")\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nimport androidx.fragment.app.Fragment\nimport androidx.core.view.isVisible\nprivate fun calibrate() {\r\n        binding.mapTitle.leftButton.isVisible = true\r\n        val fragment = MapCalibrationFragment.create(mapId, this::showRotation) {\r\n            inBackground {\r\n                autoRotate()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/973", "ground_truth": "                loadMap()\r\n            }\r\n        }\r\n        setFragment(fragment)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.infrastructure.commands.PrintMapCommand\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.core.coroutines.BackgroundMinimumState\nprivate fun print() {\r\n        val command = PrintMapCommand(requireContext())\r\n        inBackground(BackgroundMinimumState.Created) {\r", "choices": [{"text": "//            command.execute()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/976", "ground_truth": "            map?.let {\r\n                command.execute(it)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun export() {\r\n        inBackground {\r\n            map?.let {\r\n                mapRepo.getMap(it.id)?.let { updated ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/977", "ground_truth": "                    exportService.export(updated)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "\n import androidx.fragment.app.Fragment\nimport android.view.View\nprivate fun measure() {\r\n        val fragment = currentFragment\r\n        if (fragment != null && fragment is ViewMapFragment) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/978", "ground_truth": "            fragment.startDistanceMeasurement()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.ui.commands.RenameMapCommand\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun rename() {\r\n        inBackground {\r\n            map?.let {\r\n                mapRepo.getMap(it.id)?.let { updated ->\r\n                    RenameMapCommand(requireContext(), mapService).execute(updated)\r\n                    map = mapRepo.getMap(updated.id)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/979", "ground_truth": "                    binding.mapTitle.title.text = map?.name\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "\n import androidx.fragment.app.Fragment\nimport android.view.View\nprivate fun recenter() {\r\n        val fragment = currentFragment\r\n        if (fragment != null && fragment is ViewMapFragment) {\r\n            fragment.recenter()\r\n        }\r", "choices": [{"text": "\n import androidx.fragment.app.Fragment\nimport android.view.View\nprivate fun recenter() {\r\n        val fragment = currentFragment\r\n        if (fragment!= null && fragment is ViewMapFragment) {\r\n            fragment.recenter()\r\n        }\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/980", "ground_truth": "\r\n        if (fragment != null && fragment is MapCalibrationFragment) {\r\n            fragment.recenter()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "\n import androidx.fragment.app.Fragment\nimport android.view.View\nprivate fun reload() {\r\n        val fragment = currentFragment\r\n        if (fragment != null && fragment is ViewMapFragment) {\r\n            fragment.reloadMap()\r\n        }\r", "choices": [{"text": "\n import androidx.fragment.app.Fragment\nimport android.view.View\nprivate fun reload() {\r\n        val fragment = currentFragment\r\n        if (fragment!= null && fragment is ViewMapFragment) {\r\n            fragment.reloadMap()\r\n        }\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/981", "ground_truth": "\r\n        if (fragment != null && fragment is MapCalibrationFragment) {\r\n            fragment.reloadMap()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.coroutines.onMain\nprivate suspend fun loadMap() {\r\n        map = mapRepo.getMap(mapId)\r\n        onMain {\r", "choices": [{"text": "//            mapView.setMap(map)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/982", "ground_truth": "            map?.let(::onMapLoad)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nimport androidx.fragment.app.Fragment\nimport androidx.core.view.isVisible\nimport androidx.core.os.bundleOf\nprivate fun warp() {\r\n        hideRotation()\r\n        val fragment = WarpMapFragment().apply {\r\n            arguments = bundleOf(\"mapId\" to mapId)\r\n        }.also {\r\n            binding.mapTitle.leftButton.isVisible = false\r\n            it.setOnCompleteListener {\r\n                inBackground {\r\n                    loadMap()\r\n                }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/984", "ground_truth": "            }\r\n        }\r\n\r\n        setFragment(fragment)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport androidx.core.view.isVisible\nprivate fun view() {\r\n        hideRotation()\r\n        binding.mapTitle.leftButton.isVisible = true\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/985", "ground_truth": "        val fragment = ViewMapFragment.create(mapId)\r\n        setFragment(fragment)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\MapsFragment.kt"}}
{"prompt": "\nval formatService\nvar cardinalDirectionColor Int\nval units\n override fun drawOverlay() {\r\n        super.drawOverlay()\r", "choices": [{"text": "//        val canvas = holder.lockCanvas()\r\n//        canvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR)\r\n//        canvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR)\r\n//        canvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR)\r\n//        canvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR)\r\n//        canvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR)\r\n"}], "metadata": {"task_id": "Trail-Sense/987", "ground_truth": "        drawScale()\r\n        drawCompass()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\PhotoMapView.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport android.view.MotionEvent\nimport android.graphics.PointF\noverride fun onLongPress(e: MotionEvent) {\r\n        super.onLongPress(e)\r\n        val viewNoRotation = toViewNoRotation(PointF(e.x, e.y)) ?: return\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.R\nimport android.view.MotionEvent\nimport android.graphics.PointF\noverride fun onLongPress(e: MotionEvent) {\r\n        super.onLongPress(e)\r\n        val viewNoRotation = toViewNoRotation(PointF(e.x, e.y))?: return\r\n//        val view = toView(PointF(e.x, e.y))?: return\r\n        val view = viewNoRotation\r\n        val menu = PopupMenu(context, view)\r\n        menu.menuInflater.inflate(R.menu.menu_map_view, menu.menu)\r\n        menu.setOnMenuItemClickListener {\r\n            when (it.itemId) {\r\n                R.id.menu_map_view_zoom_in -> {\r\n                    mapView.zoomIn()\r\n                    true\r\n                }\r\n                R.id.menu_map_view_zoom_out -> {\r\n                    mapView.zoomOut()\r\n                    true"}], "metadata": {"task_id": "Trail-Sense/988", "ground_truth": "        val coordinate = toCoordinate(toPixel(viewNoRotation))\r\n        onMapLongClick?.invoke(coordinate)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\PhotoMapView.kt"}}
{"prompt": "\n override fun setup() {\r", "choices": [{"text": "//    val intent = Intent(this, MainActivity::class.java)\r\n//    intent.putExtra(\"name\", \"<NAME>\")\r\n//    startActivity(intent)\r\n//    finish()\r\n    val intent = Intent(this, MainActivity::class.java)\r\n    intent.putExtra(\"name\", \"<NAME>\")\r\n    startActivityForResult(intent, 100)\r\n}\r\n\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n    super.onActivityResult(requestCode, resultCode, data)\r\n    if (requestCode == 100"}], "metadata": {"task_id": "Trail-Sense/989", "ground_truth": "        super.setup()\r\n        cardinalDirectionColor = Resources.getCardinalDirectionColor(context)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\PhotoMapView.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nfun reloadMap() {\r\n        inBackground {\r\n            withContext(Dispatchers.IO) {\r\n                map = mapRepo.getMap(mapId)\r\n            }\r\n            withContext(Dispatchers.Main) {\r\n                map?.let {\r", "choices": [{"text": "//                    mapView.setMap(it)\r\n                }\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/991", "ground_truth": "                    onMapLoad(it)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\ViewMapFragment.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.time.Throttle\nprivate fun updateDestination() {\r\n        if (throttle.isThrottled()) {\r\n            return\r\n        }\r\n\r\n        val beacon = destination ?: return\r\n        binding.navigationSheet.show(\r\n            gps.location,\r\n            altimeter.altitude,\r\n            gps.speed.speed,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/992", "ground_truth": "            beacon,\r\n            compass.declination,\r\n            true\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\ViewMapFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.sol.units.Coordinate\nprivate fun selectLocation(location: Coordinate?) {\r\n        selectedPointLayer.setBeacons(\r\n            listOfNotNull(\r\n                if (location == null) {\r\n                    null\r\n                } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/993", "ground_truth": "                    Beacon(0, \"\", location)\r\n                }\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\ViewMapFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.system.GeoUri\nimport androidx.core.os.bundleOf\nprivate fun createBeacon(location: Coordinate) {\r\n        val bundle = bundleOf(\r\n            \"initial_location\" to GeoUri(location)\r", "choices": [{"text": "//            \"initial_location\" to GeoUri(Coordinate(51.4545, -0.9789))\r\n        )\r\n        val intent = Intent(this, BeaconActivity::class.java)\r\n        intent.putExtras(bundle)\r\n        startActivity(intent)\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/994", "ground_truth": "        )\r\n        findNavController().navigate(R.id.place_beacon, bundle)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\ViewMapFragment.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Distance\nprivate fun stopDistanceMeasurement() {\r\n        distanceLayer.isEnabled = false\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/996", "ground_truth": "        distanceLayer.clear()\r\n        binding.distanceSheet.hide()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\ViewMapFragment.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.shared.colors.AppColor\nimport com.kylecorry.trail_sense.tools.beacons.domain.BeaconOwner\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.fragments.inBackground\nimport android.graphics.Color\nprivate fun navigateTo(location: Coordinate) {\r\n        inBackground {\r\n            // Create a temporary beacon\r\n            val beacon = Beacon(\r\n                0L,\r\n                map?.name ?: \"\",\r\n                location,\r\n                visible = false,\r\n                temporary = true,\r\n                color = AppColor.Orange.color,\r\n                owner = BeaconOwner.Maps\r\n            )\r\n            val id = onIO {\r\n                beaconService.add(beacon)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/997", "ground_truth": "            }\r\n\r\n            navigateTo(beacon.copy(id = id))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\ViewMapFragment.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.units.Coordinate\nprivate fun onDistancePathChange(points: List<Coordinate>) {\r\n        // Display distance\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/998", "ground_truth": "        val distance = Geology.getPathDistance(points)\r\n        showDistance(distance)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\ViewMapFragment.kt"}}
{"prompt": "\nval sensorService\nval hasCompass\nval formatService\n private fun hideNavigation() {\r\n        binding.cancelNavigationBtn.hide()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1000", "ground_truth": "        binding.navigationSheet.hide()\r\n        destination = null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\ViewMapFragment.kt"}}
{"prompt": "\nval mapRepo\nval beaconService\nval sensorService\n private fun cancelNavigation() {\r\n        navigator.cancelNavigation()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1001", "ground_truth": "        destination = null\r\n        hideNavigation()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\ViewMapFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\nprivate fun onMapLoad(map: PhotoMap) {\r\n        this.map = map\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1002", "ground_truth": "        binding.map.showMap(map)\r\n        layerManager?.onBoundsChanged(map.boundary())\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\ViewMapFragment.kt"}}
{"prompt": "\nval mapRepo\nval altimeter\nval formatService\n override fun onPause() {\r\n        super.onPause()\r\n        layerManager?.stop()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1003", "ground_truth": "        layerManager = null\r\n        lastDistanceToast?.cancel()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\ViewMapFragment.kt"}}
{"prompt": "\n private fun getNextLockMode(mode: MapLockMode): MapLockMode {\r\n        return when (mode) {\r\n            MapLockMode.Location -> {\r\n                if (hasCompass) {\r\n                    MapLockMode.Compass\r\n                } else {\r\n                    MapLockMode.Free\r\n                }\r\n            }\r\n\r\n            MapLockMode.Compass -> {\r\n                MapLockMode.Free\r\n            }\r\n\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1004", "ground_truth": "            MapLockMode.Free -> {\r\n                MapLockMode.Location\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\ViewMapFragment.kt"}}
{"prompt": "\n import android.view.View\nfun create(mapId: Long): ViewMapFragment {\r\n            return ViewMapFragment().apply {\r", "choices": [{"text": "//                arguments = Bundle().apply {\r\n//                    putLong(ARG_MAP_ID, mapId)\r\n//                }\r\n            }\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/1005", "ground_truth": "                arguments = bundleOf(\"mapId\" to mapId)\r\n            }\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\ViewMapFragment.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval intent = Intent(this, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\nval button = findViewById<Button>(R.id.button)"}], "metadata": {"task_id": "Trail-Sense/1006", "ground_truth": "        super.onCreate(savedInstanceState)\r\n        mapId = requireArguments().getLong(\"mapId\")\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\WarpMapFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r\n        if (isBound) {\r\n            binding.perspective.clearImage()\r", "choices": [{"text": "}\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1007", "ground_truth": "        }\r\n        super.onDestroyView()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\WarpMapFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.maps.domain.PhotoMap\nimport com.kylecorry.trail_sense.R\nprivate fun onMapLoad(map: PhotoMap) {\r\n        this.map = map\r\n        binding.perspective.mapRotation = map.calibration.rotation\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1008", "ground_truth": "        binding.perspective.setImage(map.filename)\r\n        binding.nextButton.isInvisible = false\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\maps\\ui\\WarpMapFragment.kt"}}
{"prompt": "\nval value Boolean\nvar lastTime\nvar lastValue\n fun update(newValue: Boolean) {\r", "choices": [{"text": "if (value!= newValue) {\r\nvalue = newValue\r\nlastTime = System.currentTimeMillis()\r\nlastValue = value\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1009", "ground_truth": "        lastAttemptedValue = newValue\r\n        lastAttemptedTime = System.currentTimeMillis()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\metaldetector\\ui\\Debouncer.kt"}}
{"prompt": "\n override fun onPause() {\r\n        super.onPause()\r\n        magnetometer.stop(this::onMagnetometerUpdate)\r\n        if (prefs.metalDetector.showMetalDirection) {\r\n            lowPassMagnetometer.stop(this::onLowPassMagnetometerUpdate)\r\n            orientation.stop(this::onMagnetometerUpdate)\r\n            gravity.stop(this::onMagnetometerUpdate)\r\n        }\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/1010", "ground_truth": "        calibrateTimer.stop()\r\n        haptics.off()\r\n        isVibrating = false\r\n        audio?.off()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\metaldetector\\ui\\FragmentToolMetalDetector.kt"}}
{"prompt": "\nval metalDetectionService\nval gravity\nval filter\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\ngravity.stop()\r\nfilter.stop()\r\n}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\ngravity = GravitySensor(this)\r\nfilter = Filter(gravity)\r\nfilter.start()\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\ngravity.start()\r\n}\r\noverride fun onPause() {\r\nsuper.onPause()\r\ngravity.stop()\r\n}"}], "metadata": {"task_id": "Trail-Sense/1011", "ground_truth": "        super.onDestroy()\r\n        audio?.release()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\metaldetector\\ui\\FragmentToolMetalDetector.kt"}}
{"prompt": "\n private fun calibrate() {\r\n        referenceMagnitude = readings.takeLast(20).average().toFloat()\r\n        calibratedField = lowPassMagnetometer.magneticField\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/1012", "ground_truth": "        calibratedOrientation = orientation.orientation\r\n        calibrateTimer.stop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\metaldetector\\ui\\FragmentToolMetalDetector.kt"}}
{"prompt": "\nval lowPassMagnetometer\nval metalDetectionService\nval magnetometer\n private fun onLowPassMagnetometerUpdate(): Boolean {\r", "choices": [{"text": "val lowPassMagnetometer = lowPassMagnetometer?: return false\r\nval magnetometer = magnetometer?: return false\r\nval now = System.currentTimeMillis()\r\nval timeDelta = now - lastMagnetometerUpdateTime\r\nval i = 1 / timeDelta.toFloat()\r\nlowPassMagnetometer[0] = i * magnetometer[0] + (1 - i) * lowPassMagnetometer[0]\r\nlowPassMagnetometer[1] = i * magnetometer[1] + (1 - i) * lowPassMagnet"}], "metadata": {"task_id": "Trail-Sense/1013", "ground_truth": "        update()\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\metaldetector\\ui\\FragmentToolMetalDetector.kt"}}
{"prompt": "\n import kotlin.math.absoluteValue\nimport com.kylecorry.sol.math.SolMath\nprivate fun updateMetalSoundIntensity(reading: Float) {\r\n        if (!isMetalDetected.value || !prefs.metalDetector.isMetalAudioEnabled) {\r\n            audio?.off()\r\n            return\r\n        }\r\n        val delta = (reading - referenceMagnitude).absoluteValue\r\n        val volume = SolMath.map(delta - threshold, 0f, 30f, 0f, 1f, true)\r", "choices": [{"text": "\n import kotlin.math.absoluteValue\nimport com.kylecorry.sol.math.SolMath\nprivate fun updateMetalSoundIntensity(reading: Float) {\r\n        if (!isMetalDetected.value ||!prefs.metalDetector.isMetalAudioEnabled) {\r\n            audio?.off()\r\n            return\r\n        }\r\n        val delta = (reading - referenceMagnitude).absoluteValue\r\n        val volume = SolMath.map(delta - threshold, 0f, 30f, 0f, 1f, true)\r\n//        val volume = SolMath.map(delta - threshold, 0f, 30f, 0f, 1f, true)\r\n        audio?.setVolume(volume)\r\n    }\n<file_sep>/app/src/main/java/com/kylecorry/sol/app/alerts/ui/AlertListFragment.kt\npackage com.kylecorry.sol.app.alerts.ui\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app."}], "metadata": {"task_id": "Trail-Sense/1014", "ground_truth": "        audio?.setVolume(volume)\r\n        if (audio?.isOn() != true) {\r\n            audio?.on()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\metaldetector\\ui\\FragmentToolMetalDetector.kt"}}
{"prompt": "\n private fun getCurrentMagneticFieldStrength(): Float {\r\n        val filtered = filter.filter(magnetometer.magneticField.magnitude())\r\n        return if (isHighSensitivity) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1015", "ground_truth": "            magnetometer.magneticField.magnitude()\r\n        } else {\r\n            filtered\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\metaldetector\\ui\\FragmentToolMetalDetector.kt"}}
{"prompt": "\n private fun updateThreshold() {\r\n        threshold = (binding.threshold.progress.toFloat() / 10f).coerceAtLeast(0.1f)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/1017", "ground_truth": "        binding.thresholdAmount.text =\r\n            formatService.formatMagneticField(threshold, decimalPlaces = 1)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\metaldetector\\ui\\FragmentToolMetalDetector.kt"}}
{"prompt": "\nval metalDetectionService\nval magnetometer\nval isMetalDetected\n private fun onMagnetometerUpdate(): Boolean {\r", "choices": [{"text": "val isMetalDetected = metalDetectionService.isMetalDetected()\r\nif (isMetalDetected!= this.isMetalDetected) {\r\nthis.isMetalDetected = isMetalDetected\r\nreturn true\r\n}\r\nreturn false\r\n}\r\noverride fun onSensorChanged(event: SensorEvent) {\r\nif (event.sensor.type == Sensor.TYPE_MAGNETIC_FIELD) {\r\nmagnetometer = event.values.clone()\r\n}\r\nif (event.sensor.type == Sensor.TYPE_ACCELEROMETER) {\r\naccelerometer"}], "metadata": {"task_id": "Trail-Sense/1019", "ground_truth": "        update()\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\metaldetector\\ui\\FragmentToolMetalDetector.kt"}}
{"prompt": "\n fun setFieldStrength(strength: Float) {\r", "choices": [{"text": "//     this.strength = strength\r\n// }\r\n//\r\n// fun getStrength(): Float {\r\n//     return strength\r\n// }\r\n//\r\n// fun setFieldStrength(strength: Float) {\r\n//     this.strength = strength\r\n// }\r\n//\r\n// fun getStrength(): Float {\r\n//     return strength\r\n// }\r\n//\r\n// fun setFieldStrength(strength: Float) {\r\n//     this.strength = strength\r\n// }\r\n//\r\n// fun getStrength(): Float {\r\n"}], "metadata": {"task_id": "Trail-Sense/1021", "ground_truth": "        fieldStrength = strength\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\metaldetector\\ui\\MagnetometerView.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Bearing\nfun setMetalDirection(direction: Pair<Bearing, Bearing>) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/1022", "ground_truth": "        this.direction = direction\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\metaldetector\\ui\\MagnetometerView.kt"}}
{"prompt": "\nvar singlePole\nval formatService\nvar fieldStrength\n fun setSinglePoleMode(singlePole: Boolean) {\r", "choices": [{"text": "this.singlePole = singlePole\r\n}\r\nfun setFormatService(formatService: Boolean) {\r\nthis.formatService = formatService\r\n}\r\nfun setFieldStrength(fieldStrength: Int) {\r\nthis.fieldStrength = fieldStrength\r\n}\r\n}\r\nclass Pole {\r\nvar poleNumber: Int\r\nvar poleType: String\r\nvar poleLength: Int\r\nvar poleWidth: Int\r\nvar poleHeight: Int\r\nvar poleWeight: Int\r\nvar poleColor: String\r\nvar poleMaterial: String"}], "metadata": {"task_id": "Trail-Sense/1023", "ground_truth": "        this.singlePole = singlePole\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\metaldetector\\ui\\MagnetometerView.kt"}}
{"prompt": "\nval formatService\nvar radius\nvar fieldStrength\n fun setSensitivity(sensitivity: Float) {\r", "choices": [{"text": "//    val sensitivity = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}], "metadata": {"task_id": "Trail-Sense/1024", "ground_truth": "        this.sensitivity = sensitivity\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\metaldetector\\ui\\MagnetometerView.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.sense.orientation.DeviceOrientation\nfun getStyle(orientation: DeviceOrientation.Orientation): CompassStyle {\r\n        if (!isCompassAvailable){\r\n            return CompassStyle.Radar\r\n        }\r\n\r\n        return if (useLinearCompass && orientation == DeviceOrientation.Orientation.Portrait) {\r\n            CompassStyle.Linear\r\n        } else if (useRadarCompass) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1025", "ground_truth": "            CompassStyle.Radar\r\n        } else {\r\n            CompassStyle.Round\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\domain\\CompassStyleChooser.kt"}}
{"prompt": "\n import kotlin.math.max\nimport com.kylecorry.sol.units.Coordinate\nprivate fun scarfsDistance(\r\n        from: Coordinate,\r\n        to: Coordinate,\r\n        fromAltitude: Float? = null,\r\n        toAltitude: Float? = null\r\n    ): Float {\r\n        val distance = from.distanceTo(to)\r\n        val elevationGain =\r\n            max(\r\n                if (toAltitude == null || fromAltitude == null) 0f else (toAltitude - fromAltitude),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1028", "ground_truth": "                0f\r\n            )\r\n\r\n        return distance + 7.92f * elevationGain\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\domain\\NavigationService.kt"}}
{"prompt": "\n import kotlin.math.max\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.sol.units.Coordinate\nfun getNearbyBeacons(\r\n        location: Coordinate,\r\n        beacons: Collection<Beacon>,\r\n        numNearby: Int,\r\n        minDistance: Float = 0f,\r\n        maxDistance: Float = Float.POSITIVE_INFINITY\r\n    ): Collection<Beacon> {\r\n        return beacons.asSequence()\r\n            .filter { it.visible }\r\n            .map { Pair(it, location.distanceTo(it.coordinate)) }\r\n            .filter { it.second in minDistance..maxDistance }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1029", "ground_truth": "            .sortedBy { it.second }\r\n            .take(numNearby)\r\n            .map { it.first }\r\n            .toList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\domain\\NavigationService.kt"}}
{"prompt": "\nvar instance Navigator?\nval service\nval destination\n fun navigateTo(beaconId: Long) {\r", "choices": [{"text": "if (instance == null) {\r\ninstance = Navigator()\r\n}\r\ninstance?.navigateTo(beaconId)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1031", "ground_truth": "        prefs.putLong(DESTINATION_ID_KEY, beaconId)\r\n        _destinationId.update { beaconId }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\infrastructure\\Navigator.kt"}}
{"prompt": "\n fun cancelNavigation() {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1032", "ground_truth": "        prefs.remove(DESTINATION_ID_KEY)\r\n        _destinationId.update { null }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\infrastructure\\Navigator.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.andromeda.core.coroutines.onIO\nsuspend fun getDestination(): Beacon? = onIO {\r", "choices": [{"text": "//    val beacon = Beacon(\r\n//        \"00000000-0000-0000-0000-000000000000\",\r\n//        \"00000000-0000-0000-0000-000000000000\",\r\n//        \"00000000-0000-0000-0000-00000"}], "metadata": {"task_id": "Trail-Sense/1033", "ground_truth": "        val id = getDestinationId() ?: return@onIO null\r\n        service.getBeacon(id)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\infrastructure\\Navigator.kt"}}
{"prompt": "\n import android.content.Context\n @Synchronized\r\n        fun getInstance(context: Context): Navigator {\r\n            if (instance == null) {\r\n                instance = Navigator(context.applicationContext)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1034", "ground_truth": "            }\r\n            return instance!!\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\infrastructure\\Navigator.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nimport androidx.lifecycle.map\nimport androidx.lifecycle.LiveData\nprivate fun getWeatherReadings(): LiveData<List<Reading<Float>>> {\r\n        return weatherRepo.getAllLive().map { readings ->\r\n            readings.mapNotNull { reading ->\r\n                if (reading.value.altitude == 0f) {\r\n                    return@mapNotNull null\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1040", "ground_truth": "                }\r\n                Reading(reading.value.altitude, reading.time)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\AltitudeBottomSheet.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nimport androidx.lifecycle.LiveData\nprivate fun getBacktrackReadings(): LiveData<List<Reading<Float>>> {\r\n        return pathService.getRecentAltitudesLive(\r", "choices": [{"text": ")\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/1041", "ground_truth": "            Instant.now().minus(maxFilterHistoryDuration)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\AltitudeBottomSheet.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.navigation.ui.layers.compass.ICompassLayer\noverride fun setCompassLayers(layers: List<ICompassLayer>) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/1042", "ground_truth": "        compassLayers.clear()\r\n        compassLayers.addAll(layers)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\BaseCompassView.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.system.Resources\nimport androidx.core.graphics.drawable.toBitmap\nimport androidx.annotation.DrawableRes\nimport android.graphics.Bitmap\nfun load(@DrawableRes id: Int, size: Int): Bitmap {\r\n        val bitmap = if (icons.containsKey(id)) {\r\n            icons[id]\r\n        } else {\r\n            val drawable = Resources.drawable(context, id)\r\n            val bm = drawable?.toBitmap(size, size)\r", "choices": [{"text": "//            val bm = Bitmap.createScaledBitmap(drawable.toBitmap(), size, size, false)\r\n            icons[id] = bm\r\n            bm\r\n        }\r\n        return bitmap\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1043", "ground_truth": "            icons[id] = bm!!\r\n            icons[id]\r\n        }\r\n        return bitmap!!\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\BitmapLoader.kt"}}
{"prompt": "\n import androidx.annotation.DrawableRes\nfun unload(@DrawableRes id: Int) {\r\n        if (icons.containsKey(id)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1044", "ground_truth": "            icons.remove(id)?.recycle()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\BitmapLoader.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.tryOrNothing\nfun clear() {\r\n        tryOrNothing {\r\n            for (icon in icons) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1045", "ground_truth": "                icon.value.recycle()\r\n            }\r\n            icons.clear()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\BitmapLoader.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.canvas.ICanvasDrawer\nfun draw(drawer: ICanvasDrawer, drawTicks: Boolean = true) {\r\n        drawer.opacity(255)\r\n        drawer.noStroke()\r\n        drawer.fill(backgroundColor)\r\n        drawer.circle(center.x, center.y, radius * 2)\r\n\r\n        if (!drawTicks) return\r\n\r\n        drawer.strokeWeight(drawer.dp(tickThicknessDp))\r\n        drawer.noFill()\r\n        drawer.stroke(tickColor)\r", "choices": [{"text": "//        drawer.stroke(0, 0, 0, 255)\r\n        drawer.circle(center.x, center.y, radius * 2)\r\n\r\n        drawer.strokeWeight(drawer.dp(tickThicknessDp))\r\n        drawer.noFill()\r\n        drawer.stroke(tickColor)\r\n        drawer.circle(center.x, center.y, radius * 2)\r\n\r\n        drawer.strokeWeight(drawer.dp(tickThicknessDp))\r\n        drawer.noFill()\r\n        drawer.stroke(tickColor)\r\n        drawer.circle(center.x, center.y, radius * "}], "metadata": {"task_id": "Trail-Sense/1046", "ground_truth": "        drawer.path(ticks)\r\n\r\n        drawer.stroke(cardinalTickColor)\r\n        drawer.path(cardinalTicks)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\CompassDial.kt"}}
{"prompt": "\nval binding\nval context\nval formatService\n fun hide() {\r", "choices": [{"text": "binding.root.visibility = View.GONE\r\n}\r\nfun show() {\r\nbinding.root.visibility = View.VISIBLE\r\n}\r\nfun setText(text: String) {\r\nbinding.text.text = text\r\n}\r\nfun setText(text: Int) {\r\nbinding.text.text = context.getString(text)\r\n}\r\nfun setText(text: String, color: Int) {\r\nbinding.text.text = text\r\nbinding.text.setTextColor(color)\r\n}\r\nfun setText(text"}], "metadata": {"task_id": "Trail-Sense/1050", "ground_truth": "        view.visibility = View.GONE\r\n        beacon = null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\DestinationPanel.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.units.Bearing\nprivate fun updateDestinationDirection(azimuth: Bearing) {\r\n        binding.beaconDistance.description = formatService.formatDegrees(\r\n            azimuth.value,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1051", "ground_truth": "            replace360 = true\r\n        ) + \" \" + formatService.formatDirection(azimuth.direction)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\DestinationPanel.kt"}}
{"prompt": "\n import androidx.annotation.DrawableRes\nimport android.graphics.Bitmap\nfun load(@DrawableRes id: Int, size: Int): Bitmap {\r\n        return synchronized(lock) {\r\n            val bitmap = if (icons.containsKey(id)) {\r\n                icons[id]\r\n            } else {\r\n                val bm = drawer.loadImage(id, size, size)\r\n                icons[id] = bm\r", "choices": [{"text": "//                bm.recycle()\r\n                bm\r\n            }\r\n            bitmap\r\n        }\r\n    }\n<file_sep>/app/src/main/java/com/example/android/navigationdrawer/ui/main/MainFragment.kt\npackage com.example.android.navigationdrawer.ui.main\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\nimport androidx.lifecycle.ViewModelProviders\nimport androidx.navigation.fragment.findNavController\nimport com.example.android.navigationdrawer.R"}], "metadata": {"task_id": "Trail-Sense/1052", "ground_truth": "                icons[id]\r\n            }\r\n            bitmap!!\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\DrawerBitmapLoader.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.tryOrNothing\nfun clear() {\r\n        tryOrNothing {\r\n            synchronized(lock) {\r\n                for (icon in icons) {\r\n                    icon.value.recycle()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1053", "ground_truth": "                }\r\n                icons.clear()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\DrawerBitmapLoader.kt"}}
{"prompt": "\nval formatter\nvar isTimedOut\nval banner\n fun reset() {\r\n        isTimedOut = false\r\n        isGPSErrorShown = false\r\n        isCompassErrorShown = false\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1054", "ground_truth": "        isPoorCompassShown = false\r\n        possibleErrors.forEach {\r\n            banner.dismiss(it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\errors\\NavigatorUserErrors.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.diagnostics.DiagnosticCode\nprivate fun show(code: DiagnosticCode) {\r\n        val error = errorMap[code]\r\n        if (error != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1055", "ground_truth": "            banner.report(error)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\errors\\NavigatorUserErrors.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.navigation.ui.markers.MapMarker\nfun addMarker(marker: MapMarker) {\r\n        synchronized(lock) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1056", "ground_truth": "            markers.add(marker)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\BaseLayer.kt"}}
{"prompt": "\n fun clearMarkers() {\r\n        synchronized(lock) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1057", "ground_truth": "            markers.clear()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\BaseLayer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nfun setBeacons(beacons: List<Beacon>) {\r\n        synchronized(lock) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1060", "ground_truth": "            _beacons.clear()\r\n            _beacons.addAll(beacons)\r\n        }\r\n        updateMarkers()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\BeaconLayer.kt"}}
{"prompt": "\n protected fun finalize() {\r", "choices": [{"text": "// \tSystem.out.println(\"finalize\");\r\n }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1062", "ground_truth": "        _loader?.clear()\r\n        _loader = null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\BeaconLayer.kt"}}
{"prompt": "\n import androidx.annotation.ColorInt\nimport android.graphics.Color\nfun setOutlineColor(@ColorInt color: Int) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/1063", "ground_truth": "        backgroundColor = color\r\n        updateMarkers()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\BeaconLayer.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nvar _highlighted Beacon?\nval scope\nvar _imageSize\nfun highlight(beacon: Beacon?) {\r", "choices": [{"text": "_highlighted = beacon\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1064", "ground_truth": "        _highlighted = beacon\r\n        updateMarkers()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\BeaconLayer.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nprivate fun updateMarkers() {\r\n        scope.launch {\r\n            runner.replace {\r\n                synchronized(lock) {\r\n                    val markers = convertToMarkers(_beacons)\r\n                    clearMarkers()\r\n                    for (marker in markers) {\r\n                        addMarker(marker)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1065", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\BeaconLayer.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun draw(drawer: ICanvasDrawer, compass: ICompassView) {\r\n        var shouldUpdate = false\r\n\r\n        if (_compass == null) {\r\n            _compass = compass\r\n            shouldUpdate = true\r\n        }\r\n\r\n        if (shouldUpdate) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1067", "ground_truth": "            updateMarkers(compass)\r\n        }\r\n\r\n        markerLayer.draw(drawer, compass)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\compass\\BeaconCompassLayer.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nvar _highlighted Beacon?\nval scope\nval markerLayer\nfun highlight(beacon: Beacon?) {\r", "choices": [{"text": "_highlighted = beacon\r\nmarkerLayer.clear()\r\nif (beacon!= null) {\r\nmarkerLayer.addMarker(beacon.marker)\r\n}\r\n}\r\nfun clearHighlight() {\r\n_highlighted = null\r\nmarkerLayer.clear()\r\n}\r\nfun onBeaconSelected(beacon: Beacon) {\r\nif (beacon == _highlighted) {\r\nclearHighlight()\r\n} else {\r\nhighlight(beacon)\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1068", "ground_truth": "        _highlighted = beacon\r\n        _compass?.let { updateMarkers(it) }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\compass\\BeaconCompassLayer.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nprivate fun updateMarkers(compass: ICompassView) {\r\n        scope.launch {\r\n            runner.replace {\r\n                synchronized(lock) {\r\n                    val markers = convertToMarkers(_beacons, compass)\r\n                    markerLayer.clearMarkers()\r\n                    for (marker in markers) {\r\n                        markerLayer.addMarker(marker.first, marker.second)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1069", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\compass\\BeaconCompassLayer.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.navigation.ui.IMappableBearing\nval bearings\nval lock\nfun addBearing(bearing: IMappableBearing) {\r\n        synchronized(lock) {\r", "choices": [{"text": "bearings.add(bearing)\r\n        }\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1070", "ground_truth": "            bearings.add(bearing)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\compass\\BearingCompassLayer.kt"}}
{"prompt": "\n fun clearBearings() {\r\n        synchronized(lock) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1071", "ground_truth": "            bearings.clear()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\compass\\BearingCompassLayer.kt"}}
{"prompt": " import com.kylecorry.andromeda.canvas.ICanvasDrawer\nval bearings\nval lock\noverride fun draw(drawer: ICanvasDrawer, compass: ICompassView) {\r\n        val bearings = synchronized(lock) {\r\n            bearings.toList()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1072", "ground_truth": "        }\r\n        bearings.forEach {\r\n            compass.draw(it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\compass\\BearingCompassLayer.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\nimport androidx.annotation.ColorInt\nfun setDestination(location: Coordinate, @ColorInt color: Int){\r\n        destination = location\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/1073", "ground_truth": "        bearing = null\r\n        this.color = color\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\compass\\BearingToCompassLayer.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.navigation.ui.IMappableReferencePoint\nval markers\nval lock\nfun setMarkers(markers: List<IMappableReferencePoint>) {\r\n        synchronized(lock) {\r\n            this.markers.clear()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1074", "ground_truth": "            this.markers.addAll(markers.map { it to null })\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\compass\\MarkerCompassLayer.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.navigation.ui.IMappableReferencePoint\nval markers\nval lock\nfun addMarker(marker: IMappableReferencePoint, size: Int? = null) {\r\n        synchronized(lock) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1075", "ground_truth": "            markers.add(marker to size)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\compass\\MarkerCompassLayer.kt"}}
{"prompt": "\n fun clearMarkers() {\r\n        synchronized(lock) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1076", "ground_truth": "            markers.clear()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\compass\\MarkerCompassLayer.kt"}}
{"prompt": " import com.kylecorry.andromeda.canvas.ICanvasDrawer\nval markers\nval lock\noverride fun draw(drawer: ICanvasDrawer, compass: ICompassView) {\r\n        val markers = synchronized(lock) {\r\n            markers.toList()\r", "choices": [{"text": "}\r\n        val marker = markers.firstOrNull { it.id == compass.id }\r\n        if (marker!= null) {\r\n            drawer.drawMarker(marker)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1077", "ground_truth": "        }\r\n        markers.forEach {\r\n            compass.draw(it.first, it.second)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\compass\\MarkerCompassLayer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nfun setDestination(destination: Beacon?) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/1078", "ground_truth": "        this.destination = destination\r\n        bearing = null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\compass\\NavigationCompassLayer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.navigation.ui.IMappableBearing\nfun setDestination(bearing: IMappableBearing?) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/1079", "ground_truth": "        this.bearing = bearing\r\n        destination = null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\compass\\NavigationCompassLayer.kt"}}
{"prompt": " import com.kylecorry.sol.units.Coordinate\nvar _location Coordinate?\nvar _accuracy Float?\nvar _opacity Int\nfun setLocation(location: Coordinate?, accuracy: Float?) {\r\n        _location = location\r", "choices": [{"text": "       _accuracy = accuracy\r}\nfun getLocation(): Coordinate? {\r\n        return _location\r}\nfun setAccuracy(accuracy: Float?) {\r\n        _accuracy = accuracy\r}\nfun getAccuracy(): Float? {\r\n        return _accuracy\r}\nfun setOpacity(opacity: Int) {\r\n        _opacity = opacity\r}\nfun getOpacity(): Int {\r\n        return _opacity\r}\n<file_sep>/app/src/main/java/com/kylecorry/sol/science/astronomy/moon/MoonPhase.kt\npackage com.kylecorry.sol.science.astronomy"}], "metadata": {"task_id": "Trail-Sense/1080", "ground_truth": "        _accuracy = accuracy\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\MyAccuracyLayer.kt"}}
{"prompt": " import androidx.annotation.ColorInt\nimport android.graphics.Color\nvar _fillColor Int\nvar _strokeColor Int\nvar _location Coordinate?\nfun setColors(@ColorInt fillColor: Int, @ColorInt strokeColor: Int, opacity: Int = 50) {\r\n        _fillColor = fillColor\r\n        _strokeColor = strokeColor\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1081", "ground_truth": "        _opacity = opacity\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\MyAccuracyLayer.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun draw(drawer: ICanvasDrawer, map: IMapView) {\r", "choices": [{"text": "drawer.drawText(map.getCenter(), \"Hello World\", Color.WHITE, 100f)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1082", "ground_truth": "        updateMarker(drawer, map)\r\n        super.draw(drawer, map)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\MyAccuracyLayer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.navigation.ui.markers.CircleMapMarker\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\nimport android.graphics.Color\nprivate fun updateMarker(drawer: ICanvasDrawer, map: IMapView){\r\n        val accuracy = _accuracy ?: return\r\n        val location = _location ?: return\r\n        if (map.metersPerPixel <= 0) return\r\n\r\n        val sizePixels = 2 * accuracy / map.metersPerPixel * map.layerScale\r\n        val sizeDp = sizePixels / drawer.dp(1f)\r\n\r\n        clearMarkers()\r\n        addMarker(\r\n            CircleMapMarker(\r\n                location,\r\n                _fillColor,\r\n                _strokeColor,\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.tools.navigation.ui.markers.CircleMapMarker\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\nimport android.graphics.Color\nprivate fun updateMarker(drawer: ICanvasDrawer, map: IMapView){\r\n        val accuracy = _accuracy?: return\r\n        val location = _location?: return\r\n        if (map.metersPerPixel <= 0) return\r\n\r\n        val sizePixels = 2 * accuracy / map.metersPerPixel * map.layerScale\r\n        val sizeDp = sizePixels / drawer.dp(1f)\r\n\r\n        clearMarkers()\r\n        addMarker(\r\n            CircleMapMarker(\r\n                location,\r\n                _fillColor,\r\n                _strokeColor,\r\n//                _strokeWidth,\r\n                sizeDp,\r\n                _strokeWidth\r\n            )\r\n        )\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1083", "ground_truth": "                _opacity,\r\n                sizeDp\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\MyAccuracyLayer.kt"}}
{"prompt": "\nvar _showDirection\nvar _location Coordinate?\nvar _path Path?\n fun setShowDirection(show: Boolean) {\r", "choices": [{"text": "_showDirection = show\r\n}\r\nfun getShowDirection(): Boolean {\r\nreturn _showDirection\r\n}\r\nfun setLocation(location: Coordinate) {\r\n_location = location\r\n}\r\nfun getLocation(): Coordinate? {\r\nreturn _location\r\n}\r\nfun setPath(path: Path) {\r\n_path = path\r\n}\r\nfun getPath(): Path? {\r\nreturn _path\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1084", "ground_truth": "        _showDirection = show\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\MyLocationLayer.kt"}}
{"prompt": " import com.kylecorry.sol.units.Coordinate\nvar _location Coordinate?\nvar _path Path?\nvar _showDirection\nfun setLocation(location: Coordinate) {\r", "choices": [{"text": "_location = location\r\n}\nfun setPath(path: Path) {\r\n_path = path\r\n}\nfun setShowDirection(showDirection: Boolean) {\r\n_showDirection = showDirection\r\n}\nfun getLocation(): Coordinate? {\r\nreturn _location\r\n}\nfun getPath(): Path? {\r\nreturn _path\r\n}\nfun getShowDirection(): Boolean {\r\nreturn _showDirection\r\n}\n}\n<file_sep>/src/main/kotlin/com/kylecorry/sol/math/distributions/NormalDistribution.kt\npackage com"}], "metadata": {"task_id": "Trail-Sense/1085", "ground_truth": "        _location = location\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\MyLocationLayer.kt"}}
{"prompt": "\nvar _azimuth Float?\nvar _path Path?\nvar _showDirection\n fun setAzimuth(azimuth: Float) {\r", "choices": [{"text": "_azimuth = azimuth\r\n}\r\nfun setPath(path: Path) {\r\n_path = path\r\n}\r\nfun setShowDirection(showDirection: Boolean) {\r\n_showDirection = showDirection\r\n}\r\nfun getAzimuth(): Float? {\r\nreturn _azimuth\r\n}\r\nfun getPath(): Path? {\r\nreturn _path\r\n}\r\nfun getShowDirection(): Boolean {\r\nreturn _showDirection\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1086", "ground_truth": "        _azimuth = azimuth\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\MyLocationLayer.kt"}}
{"prompt": "\n import androidx.annotation.ColorInt\nimport android.graphics.Color\nfun setColor(@ColorInt color: Int) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/1087", "ground_truth": "        _color = color\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\MyLocationLayer.kt"}}
{"prompt": " import com.kylecorry.andromeda.canvas.ICanvasDrawer\nvar _path Path?\nvar _azimuth Float?\nvar _location Coordinate?\noverride fun draw(drawer: ICanvasDrawer, map: IMapView) {\r\n        if (_showDirection) {\r\n            drawArrow(drawer, map)\r", "choices": [{"text": "//            drawPath(drawer, map)\r\n        }\r\n    }\noverride fun drawArrow(drawer: ICanvasDrawer, map: IMapView) {\r\n        if (_azimuth == null || _location == null) {\r\n            return\r\n        }\r\n        val arrow = Arrow(\r\n            _location.toGeoPoint(map.projection),\r\n            _azimuth.toRadians(),\r\n            _length,\r\n            _width,\r\n            _color,\r\n            _arrowColor,\r\n            _arrowWidth\r\n        )\r\n        drawer.drawArrow(arrow)\r\n    }\n\r\noverride fun drawPath(drawer: ICanvasDrawer, map: IMapView)"}], "metadata": {"task_id": "Trail-Sense/1088", "ground_truth": "        } else {\r\n            drawCircle(map)\r\n        }\r\n        super.draw(drawer, map)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\MyLocationLayer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.navigation.ui.markers.CircleMapMarker\nimport android.graphics.Color\nprivate fun drawCircle(map: IMapView) {\r\n        clearMarkers()\r\n        addMarker(\r\n            CircleMapMarker(\r\n                _location ?: map.mapCenter,\r\n                color = _color,\r\n                strokeColor = Color.WHITE,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1089", "ground_truth": "                strokeWeight = 2f,\r\n                size = 16f\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\MyLocationLayer.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\nfun setStart(location: Coordinate?) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/1090", "ground_truth": "        _start = location\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\NavigationLayer.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\nfun setEnd(location: Coordinate?) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/1091", "ground_truth": "        _end = location\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\NavigationLayer.kt"}}
{"prompt": "\n import androidx.annotation.ColorInt\nimport android.graphics.Color\nfun setColor(@ColorInt color: Int){\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/1092", "ground_truth": "        _color = color\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\NavigationLayer.kt"}}
{"prompt": "\n fun setShouldRenderWithDrawLines(shouldRenderWithDrawLines: Boolean) {\r", "choices": [{"text": "+    this.shouldRenderWithDrawLines = shouldRenderWithDrawLines\r\n+  }\r\n+\r\n+  fun getShouldRenderWithDrawLines(): Boolean {\r\n+    return shouldRenderWithDrawLines\r\n+  }\r\n+\r\n+  fun setShouldRenderWithDrawLines(shouldRenderWithDrawLines: Boolean) {\r\n     this.shouldRenderWithDrawLines = shouldRenderWithDrawLines\r\n   }\r\n \r\n   fun getShouldRenderWithDrawLines(): Boolean {\r\n     return shouldRenderWithDrawLines\r\n   }\r\n \r\n   fun setShouldRenderWithDrawLines(shouldRenderWithDraw"}], "metadata": {"task_id": "Trail-Sense/1094", "ground_truth": "        this.shouldRenderWithDrawLines = shouldRenderWithDrawLines\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\PathLayer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.navigation.ui.IMappablePath\nimport android.graphics.Path\noverride fun setPaths(paths: List<IMappablePath>) {\r\n        synchronized(lock) {\r", "choices": [{"text": "//            val paths = paths.map { it.toPath() }\r\n            val paths = paths.map { it.toPath() }\r\n            this.paths = paths\r\n            invalidate()\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "Trail-Sense/1095", "ground_truth": "            _paths.clear()\r\n            _paths.addAll(paths)\r\n            invalidate()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\PathLayer.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.kylecorry.trail_sense.tools.paths.ui.drawing.RenderedPath\nimport com.kylecorry.trail_sense.tools.paths.ui.drawing.IRenderedPathFactory\nimport android.graphics.Path\nprivate fun renderInBackground(renderer: IRenderedPathFactory) {\r\n        renderInProgress = true\r\n        scope.launch {\r", "choices": [{"text": "//            val path = renderer.render()\r\n//            renderInProgress = false\r\n//            renderPath(path)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1096", "ground_truth": "            runner.replace {\r\n                render(renderer)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\PathLayer.kt"}}
{"prompt": "\n override fun invalidate() {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1098", "ground_truth": "        pathsRendered = false\r\n        renderInProgress = false\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\PathLayer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nimport com.kylecorry.sol.science.oceanography.TideType\nfun setTides(tides: List<Pair<TideTable, TideType?>>) {\r\n        synchronized(lock) {\r", "choices": [{"text": "tides.forEach { (table, type) ->\r\n    if (type == null) {\r\n        tideTables.remove(table)\r\n    } else {\r\n        tideTables[table] = type\r\n    }\r\n}\r\n        }\r\n    }<file_sep>/app/src/main/java/com/kylecorry/trail_sense/tools/tides/domain/TideTable.kt\npackage com.kylecorry.trail_sense.tools.tides.domain\n\nimport com.kylecorry.sol.science.oceanography.TideType\nimport com"}], "metadata": {"task_id": "Trail-Sense/1100", "ground_truth": "            _tides.clear()\r\n            _tides.addAll(tides)\r\n        }\r\n        invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\TideLayer.kt"}}
{"prompt": "\n import kotlin.reflect.KMutableProperty0\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.canvas.ICanvasDrawer\nimport androidx.annotation.DrawableRes\nimport android.graphics.Bitmap\nprivate fun loadImage(\r\n        @DrawableRes id: Int,\r\n        drawer: ICanvasDrawer,\r\n        setter: KMutableProperty0<Bitmap?>\r\n    ): Bitmap {\r\n        val size = drawer.dp(12f).toInt()\r\n        val img = drawer.loadImage(id, size, size)\r", "choices": [{"text": "//        img.setHasAlpha(true)\r\n        setter.set(img)\r\n        return img\r\n    }\n\nfun loadImage(\r\n        @DrawableRes id: Int,\r\n        drawer: ICanvasDrawer,\r\n        setter: KMutableProperty0<Bitmap?>\r\n    ): Bitmap {\r\n        val size = drawer.dp(12f).toInt()\r\n        val img = drawer.loadImage(id, size, size)\r\n//        img.setHasAlpha(true)\r\n        setter.set(img)\r\n        return img\r\n    }\n\nfun loadImage(\r\n        @DrawableRes id: Int,\r\n        drawer:"}], "metadata": {"task_id": "Trail-Sense/1102", "ground_truth": "        setter.set(img)\r\n        return img\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\TideLayer.kt"}}
{"prompt": "\n protected fun finalize() {\r\n        _halfTideImg?.recycle()\r\n        _highTideImg?.recycle()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1103", "ground_truth": "        _lowTideImg?.recycle()\r\n        _halfTideImg = null\r\n        _highTideImg = null\r\n        _lowTideImg = null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\layers\\TideLayer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.math.geometry.Size\nimport com.kylecorry.andromeda.core.system.Resources\nimport com.kylecorry.andromeda.canvas.ImageMode\nprivate fun drawAzimuth() {\r\n        tint(Resources.androidTextColorPrimary(context))\r\n        imageMode(ImageMode.Corner)\r\n        image(\r\n            getBitmap(R.drawable.ic_arrow_target, iconSize),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1104", "ground_truth": "            width / 2f - iconSize / 2f,\r\n            0f\r\n        )\r\n        noTint()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\LinearCompassView.kt"}}
{"prompt": " import androidx.core.view.isVisible\nvar range\nval west\nval south\noverride fun draw() {\r\n        if (!isVisible) {\r\n            return\r\n        }\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1106", "ground_truth": "        clear()\r\n        drawAzimuth()\r\n        drawCompass()\r\n        drawCompassLayers()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\LinearCompassView.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.camera.AugmentedRealityUtils\nimport com.kylecorry.trail_sense.R\nprivate fun toPixel(bearing: Float): Float {\r\n        return AugmentedRealityUtils.getPixelLinear(\r\n            bearing,\r\n            azimuth.value,\r\n            0f,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1108", "ground_truth": "            0f,\r\n            Size(width.toFloat(), height.toFloat()),\r\n            Size(range, 0f)\r\n        ).x\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\LinearCompassView.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nprivate fun resume() {\r\n        synchronized(lock) {\r\n            if (isResumed) {\r\n                return\r\n            }\r\n            isResumed = true\r\n            showSightingCompass = false\r\n            viewTreeObserver.addOnGlobalLayoutListener(globalLayoutListener)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1109", "ground_truth": "        }\r\n        if (isVisible) {\r\n            start()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\LinearSightingCompassView.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\nfinish()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1113", "ground_truth": "        super.onResume()\r\n        intervalometer.interval(100)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\LocationBottomSheet.kt"}}
{"prompt": "\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nmMapView.onPause()\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nmMapView.onResume()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nmMapView.onDestroy()\r\n}\r\noverride fun onLowMemory() {\r\nsuper.onLowMemory()\r\nmMapView.onLowMemory()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1114", "ground_truth": "        super.onPause()\r\n        intervalometer.stop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\LocationBottomSheet.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.permissions.requestActivityRecognition\nimport com.kylecorry.trail_sense.R\nprivate fun onCurrentPaceSpeedometerSelected() {\r\n        requestActivityRecognition { hasPermission ->\r", "choices": [{"text": "if (hasPermission) {\r\n                val intent = Intent(this, SpeedometerActivity::class.java)\r\n                startActivity(intent)\r\n            } else {\r\n                requestActivityRecognition()\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1117", "ground_truth": "            if (!hasPermission) {\r\n                alertNoActivityRecognitionPermission()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigationSettingsFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r\n        super.onDestroyView()\r\n        activity?.let {\r", "choices": [{"text": "//            it.unregisterReceiver(receiver)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1118", "ground_truth": "            tryOrNothing {\r\n                Screen.setShowWhenLocked(it, false)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigatorFragment.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Bearing\nimport com.kylecorry.andromeda.core.system.Screen\nprivate fun handleShowWhenLocked() {\r\n        activity?.let {\r\n            val shouldShow =\r\n                isBound && lockScreenPresence && (destination != null || destinationBearing != null)\r", "choices": [{"text": "\n import com.kylecorry.sol.units.Bearing\nimport com.kylecorry.andromeda.core.system.Screen\nprivate fun handleShowWhenLocked() {\r\n        activity?.let {\r\n            val shouldShow =\r\n                isBound && lockScreenPresence && (destination!= null || destinationBearing!= null)\r\n//            if (shouldShow) {\r\n//                val intent = Intent(activity, LockScreenService::class.java)\r\n//                intent.putExtra(LockScreenService.EXTRA_SHOW_WHEN_LOCKED, true)\r\n//                activity?.startService(intent)\r\n//            } else {\r\n//                val intent = Intent(activity, LockScreenService::class.java)\r\n//                intent.putExtra(LockScreenService.EXTRA_SHOW_WHEN_LOCKED, false)\r\n//                activity?.startService(intent)\r\n//            }\r\n       "}], "metadata": {"task_id": "Trail-Sense/1120", "ground_truth": "            tryOrNothing {\r\n                Screen.setShowWhenLocked(it, shouldShow)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigatorFragment.kt"}}
{"prompt": "\nval myAccuracyLayer\nval orientation\nval speedometer\n fun displayAccuracyTips() {\r\n        context ?: return\r\n\r", "choices": [{"text": "\nval myAccuracyLayer\nval orientation\nval speedometer\n fun displayAccuracyTips() {\r\n        context?: return\r\n\r\n//        val accuracyTips = context?.getString(R.string.accuracy_tips)?: return\r\n        val accuracyTips = context?.getString(R.string.accuracy_tips)?: return\r\n        val accuracyTipsDialog = AlertDialog.Builder(context)\r\n           .setTitle(R.string.accuracy_tips_title)\r\n           .setMessage(accuracyTips)\r\n           .setPositiveButton(R.string.accuracy_tips_ok) { dialog, _ ->\r\n                dialog.dismiss()\r\n            }\r\n           .create()\r\n        accuracyTipsDialog.show()\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1121", "ground_truth": "        val alerter = ImproveAccuracyAlerter(requireContext())\r\n        alerter.alert(listOf(gps, compass))\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigatorFragment.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun updateAstronomyData() {\r\n        inBackground {\r\n            if (gps.location == Coordinate.zero) {\r\n                return@inBackground\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1122", "ground_truth": "            }\r\n\r\n            updateAstronomyLayerCommand.execute()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigatorFragment.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Bearing\nprivate fun getDestinationBearing(): Float? {\r\n        val destLocation = destination?.coordinate\r\n        return when {\r\n            destLocation != null -> {\r\n                fromTrueNorth(gps.location.bearingTo(destLocation).value)\r\n            }\r\n\r\n            destinationBearing != null -> {\r\n                destinationBearing\r\n            }\r\n\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1124", "ground_truth": "            else -> {\r\n                null\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigatorFragment.kt"}}
{"prompt": "\n private fun fromTrueNorth(bearing: Float): Float {\r\n        if (useTrueNorth) {\r\n            return bearing\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1125", "ground_truth": "        }\r\n        return DeclinationUtils.fromTrueNorthBearing(bearing, declination)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigatorFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.beacons.domain.Beacon\nimport com.kylecorry.sol.units.Bearing\nprivate fun getFacingBeacon(nearby: Collection<Beacon>): Beacon? {\r\n        return navigationService.getFacingBeacon(\r\n            gps.location,\r\n            compass.rawBearing,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1126", "ground_truth": "            nearby,\r\n            declination,\r\n            useTrueNorth\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigatorFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.diagnostics.status.StatusBadge\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nprivate fun updateSensorStatus() {\r\n        inBackground {\r\n            compassStatusBadge = compassStatusBadgeProvider.getBadge()\r\n            gpsStatusBadge = gpsStatusBadgeProvider.getBadge()\r\n\r\n            val codes = onDefault {\r\n                diagnostics.flatMap { it.scan() }\r\n            }\r\n\r\n            onMain {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1127", "ground_truth": "                errors.update(codes)\r\n            }\r\n\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigatorFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nprivate fun updateNavigationButton() {\r\n        binding.beaconBtn.setImageResource(\r\n            if (destination != null) {\r\n                R.drawable.ic_cancel\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1128", "ground_truth": "            } else {\r\n                R.drawable.ic_beacon\r\n            }\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\NavigatorFragment.kt"}}
{"prompt": "\nvar compassCircle Circle\nval formatService\nvar directionSize\n private fun drawLayers() {\r\n        // TODO: Handle beacon highlighting\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1129", "ground_truth": "        push()\r\n        clip(compassPath)\r\n        layers.forEach { it.draw(this, this) }\r\n        pop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\RadarCompassView.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun drawDirection(degrees: Float, text: String) {\r\n        push()\r\n        rotate(degrees)\r\n        fill(Color.WHITE)\r\n        text(\r\n            text,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1131", "ground_truth": "            width / 2f,\r\n            height / 2f - compassSize / 4f\r\n        )\r\n        pop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\RadarCompassView.kt"}}
{"prompt": "\n import androidx.core.view.isVisible\noverride fun draw() {\r\n        if (!isVisible) {\r\n            return\r\n        }\r\n        clear()\r\n        push()\r\n        rotate(-azimuth.value)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1132", "ground_truth": "        drawCompass()\r\n        drawLayers()\r\n        drawCompassLayers()\r\n        pop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\RadarCompassView.kt"}}
{"prompt": "\n import android.view.MotionEvent\nimport android.view.GestureDetector\noverride fun onTouchEvent(event: MotionEvent): Boolean {\r\n        mScaleDetector.onTouchEvent(event)\r\n        mGestureDetector.onTouchEvent(event)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1133", "ground_truth": "        invalidate()\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\RadarCompassView.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.navigation.ui.layers.ILayer\noverride fun setLayers(layers: List<ILayer>) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Trail-Sense/1134", "ground_truth": "        this.layers.clear()\r\n        this.layers.addAll(layers)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\RadarCompassView.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.system.Resources\nimport com.kylecorry.andromeda.canvas.ImageMode\nimport android.graphics.Color\nprivate fun drawAzimuth() {\r\n        tint(Resources.androidTextColorPrimary(context))\r\n        imageMode(ImageMode.Corner)\r\n        image(\r\n            getBitmap(R.drawable.ic_arrow_target, iconSize),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1136", "ground_truth": "            width / 2f - iconSize / 2f,\r\n            0f\r\n        )\r\n        noTint()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\RoundCompassView.kt"}}
{"prompt": "\n import androidx.core.view.isVisible\noverride fun draw() {\r\n        if (!isVisible) {\r\n            return\r\n        }\r\n        clear()\r\n        drawAzimuth()\r\n        push()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1137", "ground_truth": "        rotate(-azimuth.value)\r\n        drawCompass()\r\n        drawCompassLayers()\r\n        pop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\RoundCompassView.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.math.SolMath.deltaAngle\noverride fun draw(bearing: IMappableBearing, stopAt: Coordinate?) {\r\n        push()\r\n        fill(bearing.color)\r\n        opacity(100)\r\n        val dp2 = dp(2f)\r\n        arc(\r\n            iconSize.toFloat() + dp2,\r\n            iconSize.toFloat() + dp2,\r\n            compassSize.toFloat(),\r\n            compassSize.toFloat(),\r\n            azimuth.value - 90,\r\n            azimuth.value - 90 + deltaAngle(azimuth.value, bearing.bearing.value),\r", "choices": [{"text": "//            azimuth.value - 90,\r\n//            azimuth.value - 90 + bearing.bearing.value,\r\n            true\r\n        )\r\n        pop()\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1138", "ground_truth": "            ArcMode.Pie\r\n        )\r\n        opacity(255)\r\n        pop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\navigation\\ui\\RoundCompassView.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.notes.domain.Note\noverride suspend fun addNote(note: Note): Long {\r\n        return if (note.id != 0L){\r\n            noteDao.update(note)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1140", "ground_truth": "            note.id\r\n        } else {\r\n            noteDao.insert(note)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\notes\\infrastructure\\NoteRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.notes.domain.Note\nimport android.content.Context\n @Synchronized\r\n        fun getInstance(context: Context): NoteRepo {\r\n            if (instance == null) {\r\n                instance = NoteRepo(context.applicationContext)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1141", "ground_truth": "            }\r\n            return instance!!\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\notes\\infrastructure\\NoteRepo.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval intent = Intent(this, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\nval button = findViewById<Button>(R.id.button)"}], "metadata": {"task_id": "Trail-Sense/1147", "ground_truth": "        super.onCreate(savedInstanceState)\r\n        noteId = arguments?.getLong(\"edit_note_id\") ?: 0L\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\notes\\ui\\FragmentToolNotesCreate.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.tools.notes.domain.Note\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun loadEditingNote(id: Long) {\r\n        inBackground {\r\n            withContext(Dispatchers.IO) {\r\n                editingNote = notesRepo.getNote(id)\r\n            }\r\n\r\n            withContext(Dispatchers.Main) {\r\n                if (isBound) {\r\n                    editingNote?.let {\r\n                        binding.titleEdit.setText(it.title ?: \"\")\r\n                        binding.contentEdit.setText(it.contents ?: \"\")\r\n                    }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1150", "ground_truth": "                }\r\n            }\r\n\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\notes\\ui\\FragmentToolNotesCreate.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.packs.domain.PackItem\noverride fun sort(items: List<PackItem>): List<PackItem> {\r\n        return items.sortedWith(\r\n            compareBy(\r\n                { it.category.name },\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1153", "ground_truth": "                { it.name },\r\n                { it.id }\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\domain\\sort\\CategoryPackItemSort.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.packs.domain.PackItem\noverride fun sort(items: List<PackItem>): List<PackItem> {\r\n        return items.sortedWith(\r\n            compareBy(\r\n                { if (ascending) it.percentPacked else -it.percentPacked },\r\n                { it.category.name },\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1154", "ground_truth": "                { it.name },\r\n                { it.id }\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\domain\\sort\\PackedPercentPackItemSort.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport com.kylecorry.sol.units.Weight\nfun mapToPackItem(item: PackItemEntity): PackItem {\r\n        val weight = if (item.weight != null && item.weightUnits != null) {\r\n            Weight(item.weight, item.weightUnits)\r\n        } else {\r\n            null\r\n        }\r\n        return PackItem(\r\n            item.id,\r\n            item.packId,\r\n            item.name,\r\n            item.category,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1155", "ground_truth": "            item.amount,\r\n            item.desiredAmount,\r\n            weight\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\infrastructure\\PackMapper.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nfun mapToItemEntity(item: PackItem): PackItemEntity {\r\n        return PackItemEntity(\r\n            item.name,\r\n            item.packId,\r\n            item.category,\r\n            item.amount,\r\n            item.desiredAmount,\r\n            item.weight?.weight,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1156", "ground_truth": "            item.weight?.units\r\n        ).also {\r\n            it.id = item.id\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\infrastructure\\PackMapper.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.packs.domain.Pack\nfun mapToPackEntity(pack: Pack): PackEntity {\r\n        return PackEntity(pack.name).also {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1157", "ground_truth": "            it.id = pack.id\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\infrastructure\\PackMapper.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport androidx.lifecycle.map\nimport androidx.lifecycle.LiveData\noverride fun getItemsFromPack(packId: Long): LiveData<List<PackItem>> {\r\n        return inventoryItemDao.getFromPack(packId).map {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1158", "ground_truth": "            it.map { item -> mapper.mapToPackItem(item) }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\infrastructure\\PackRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.packs.domain.Pack\noverride suspend fun getPack(packId: Long): Pack? {\r", "choices": [{"text": "-    return packs.find { it.id == packId }\r\n+    return packs.find { it.id == packId }?.copy(\r\n+        items = it.items.map { item ->\r\n+            item.copy(\r\n+                id = item.id,\r\n+                packId = item.packId,\r\n+                name = item.name,\r\n+                description = item.description,\r\n+                icon = item.icon,\r\n+                iconTint = item.iconTint,\r\n+                iconTint"}], "metadata": {"task_id": "Trail-Sense/1159", "ground_truth": "        val pack = packDao.get(packId) ?: return null\r\n        return mapper.mapToPack(pack)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\infrastructure\\PackRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\noverride suspend fun getItem(id: Long): PackItem? {\r", "choices": [{"text": "return packs.find { it.id == id }\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1160", "ground_truth": "        val item = inventoryItemDao.get(id) ?: return null\r\n        return mapper.mapToPackItem(item)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\infrastructure\\PackRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.packs.domain.Pack\noverride suspend fun deletePack(pack: Pack) {\r", "choices": [{"text": "}\r\noverride suspend fun getPacks(): List<Pack> {\r\nreturn emptyList()\r\n}\r\noverride suspend fun getPack(id: String): Pack? {\r\nreturn null\r\n}\r\noverride suspend fun getPacks(ids: List<String>): List<Pack> {\r\nreturn emptyList()\r\n}\r\noverride suspend fun getPacks(ids: List<String>, includeDeleted: Boolean): List<Pack> {\r\nreturn emptyList()\r\n}\r\noverride suspend fun getPacks(ids: List<String>, includeDeleted:"}], "metadata": {"task_id": "Trail-Sense/1161", "ground_truth": "        inventoryItemDao.deleteAllFromPack(pack.id)\r\n        packDao.delete(mapper.mapToPackEntity(pack))\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\infrastructure\\PackRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport androidx.lifecycle.map\noverride suspend fun addPack(pack: Pack): Long {\r\n        return if (pack.id == 0L) {\r\n            packDao.insert(mapper.mapToPackEntity(pack))\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1162", "ground_truth": "        } else {\r\n            packDao.update(mapper.mapToPackEntity(pack))\r\n            pack.id\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\infrastructure\\PackRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport androidx.lifecycle.map\noverride suspend fun copyPack(fromPack: Pack, toPack: Pack): Long {\r\n        val newId = addPack(toPack)\r\n        val items = getItemsFromPackAsync(fromPack.id)\r\n        val toItems = items.map { it.copy(id = 0, packId = newId) }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1163", "ground_truth": "        toItems.forEach {\r\n            addItem(it)\r\n        }\r\n        return newId\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\infrastructure\\PackRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport android.content.Context\n @Synchronized\r\n        fun getInstance(context: Context): PackRepo {\r\n            if (instance == null) {\r\n                instance = PackRepo(context.applicationContext)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1165", "ground_truth": "            }\r\n            return instance!!\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\infrastructure\\PackRepo.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        itemId = arguments?.getLong(\"edit_item_id\") ?: 0L\r", "choices": [{"text": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        itemId = arguments?.getLong(\"edit_item_id\")?: 0L\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1166", "ground_truth": "        packId = arguments?.getLong(\"pack_id\") ?: 0L\r\n\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\CreateItemFragment.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval intent = Intent(this, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\nval button = findViewById<Button>(R.id.button)"}], "metadata": {"task_id": "Trail-Sense/1167", "ground_truth": "        super.onCreate(savedInstanceState)\r\n        packId = arguments?.getLong(\"pack_id\") ?: 0L\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackItemListFragment.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.fragments.inBackground\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        inBackground {\r", "choices": [{"text": "//            val data = getLocationData()\r\n//            val location = data.location\r\n//            val accuracy = data.accuracy\r\n//            val altitude = data.altitude\r\n//            val speed = data.speed\r\n//            val bearing = data.bearing\r\n//            val timestamp = data.timestamp\r\n//            val altitudeAccuracy = data.altitudeAccuracy\r\n//            val bearingAccuracy = data.bearingAccuracy\r\n//            val speedAccuracy = data.speedAccuracy\r\n//            val latitude = location.latitude\r\n//            val longitude"}], "metadata": {"task_id": "Trail-Sense/1168", "ground_truth": "            withContext(Dispatchers.IO) {\r\n                loadPack(packId)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackItemListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nprivate fun onItemCheckboxClicked(item: PackItem) {\r\n        if (!item.isFullyPacked) {\r\n            if (item.desiredAmount == 0.0) {\r\n                setAmount(item, 1.0)\r\n            } else {\r\n                setAmount(item, item.desiredAmount)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1171", "ground_truth": "            }\r\n        } else {\r\n            setAmount(item, 0.0)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackItemListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun deleteItem(item: PackItem) {\r\n        inBackground {\r", "choices": [{"text": "//            val pack = Pack.get(item.packId)\r\n//            pack.items.remove(item)\r\n//            pack.save()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1172", "ground_truth": "            withContext(Dispatchers.IO) {\r\n                itemRepo.deleteItem(item)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackItemListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nprivate fun add(item: PackItem) {\r\n        Pickers.number(\r\n            requireContext(),\r\n            getString(R.string.add),\r\n            null,\r\n            null,\r\n            allowNegative = false,\r\n            hint = getString(R.string.dialog_item_amount)\r\n        ) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1175", "ground_truth": "            if (it != null) {\r\n                addAmount(item, it.toDouble())\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackItemListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nprivate fun subtract(item: PackItem) {\r\n        Pickers.number(\r\n            requireContext(),\r\n            getString(R.string.subtract),\r\n            null,\r\n            null,\r\n            allowNegative = false,\r\n            hint = getString(R.string.dialog_item_amount)\r\n        ) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1176", "ground_truth": "            if (it != null) {\r\n                addAmount(item, -it.toDouble())\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackItemListFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun addAmount(item: PackItem, amount: Double) {\r\n        inBackground {\r\n            withContext(Dispatchers.IO) {\r\n                itemRepo.addItem(\r", "choices": [{"text": "//                    item.id,\r\n                    item.name,\r\n                    item.type,\r\n                    item.unit,\r\n                    item.unitType,\r\n                    item.unitAmount,\r\n                    item.unitAmountType,\r\n                    item.unitAmountType,\r\n                    item.unitAmountType,\r\n                    item.unitAmountType,\r\n                    item.unitAmountType,\r\n                    item.unitAmountType,\r\n                    item.unitAmountType,\r\n                    item.unitAmountType,\r\n                    item.unitAmountType,\r\n                    item.unitAmountType,\r\n                    item.unitAmountType,\r\n                    item.unitAmountType,\r\n                    item.unitAmountType,\r\n                    item."}], "metadata": {"task_id": "Trail-Sense/1177", "ground_truth": "                    item.copy(amount = max(0.0, item.amount + amount))\r\n                )\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackItemListFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.tools.packs.domain.PackItem\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun setAmount(item: PackItem, amount: Double) {\r\n        inBackground {\r\n            withContext(Dispatchers.IO) {\r\n                itemRepo.addItem(\r", "choices": [{"text": "//                    item.id,\r\n                    item.packId,\r\n                    item.name,\r\n                    item.unit,\r\n                    amount,\r\n                    item.unitAmount,\r\n                    item.unitName,\r\n                    item.unitAmountName,\r\n                    item.unitAmountNamePlural,\r\n                    item.unitNamePlural,\r\n                    item.unitAmountNamePlural,\r\n                    item.unitNamePlural,\r\n                    item.unitAmountNamePlural,\r\n                    item.unitNamePlural,\r\n                    item.unitAmountNamePlural,\r\n                    item.unitNamePlural,\r\n                    item.unitAmountNamePlural,\r\n                    item.unitNamePlural,\r\n                    item.unitAmountNamePlural,"}], "metadata": {"task_id": "Trail-Sense/1178", "ground_truth": "                    item.copy(amount = amount)\r\n                )\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackItemListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nprivate fun changeSort() {\r\n        val options = listOf(\"category\", \"percent_asc\", \"percent_desc\", \"weight_asc\", \"weight_desc\")\r\n        Pickers.item(\r\n            requireContext(),\r\n            getString(R.string.sort),\r\n            options.map { getSortTitle(it) },\r\n            options.indexOf(prefs.packs.packSort)\r\n        ) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1179", "ground_truth": "            if (it != null) {\r\n                onSortChange(options[it])\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackItemListFragment.kt"}}
{"prompt": "\n import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onViewCreated(view, savedInstanceState)\r\nview.findViewById<View>(R.id.button).setOnClickListener {\r\nval intent = Intent(activity, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1181", "ground_truth": "        super.onViewCreated(view, savedInstanceState)\r\n        loadPacks()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackListFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun renamePack(pack: Pack) {\r\n        Pickers.text(\r\n            requireContext(),\r\n            getString(R.string.rename),\r\n            null,\r\n            pack.name,\r\n            hint = getString(R.string.name)\r\n        ) {\r\n            if (it != null) {\r\n                inBackground {\r\n                    withContext(Dispatchers.IO) {\r\n                        packRepo.addPack(pack.copy(name = it))\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1184", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackListFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.alerts.Alerts\nprivate fun deletePack(pack: Pack) {\r\n        Alerts.dialog(\r\n            requireContext(),\r\n            getString(R.string.delete_pack),\r\n            pack.name\r\n        ) { cancelled ->\r\n            if (!cancelled) {\r\n                inBackground {\r\n                    withContext(Dispatchers.IO) {\r\n                        packRepo.deletePack(pack)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1185", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.packs.domain.Pack\nimport com.kylecorry.andromeda.core.tryOrNothing\nimport androidx.core.os.bundleOf\nprivate fun openPack(packId: Long) {\r\n        tryOrNothing {\r\n            val bundle = bundleOf(\"pack_id\" to packId)\r", "choices": [{"text": "//            val intent = Intent(context, PackActivity::class.java)\r\n//            intent.putExtras(bundle)\r\n//            context.startActivity(intent)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1186", "ground_truth": "            findNavController().navigate(R.id.action_pack_to_pack_items, bundle)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\packs\\ui\\PackListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.tools.beacons.domain.Beacon\noverride fun toBeacon(path: Path, point: PathPoint): Beacon {\r\n        return Beacon(\r\n            0L,\r\n            path.name ?: defaultName,\r\n            point.coordinate,\r\n            visible = false,\r\n            elevation = point.elevation,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1187", "ground_truth": "            temporary = true,\r\n            color = path.style.color,\r\n            owner = BeaconOwner.Path\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\beacon\\TemporaryPathPointBeaconConverter.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.waypointcolors.IPointColoringStrategy\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport android.util.Range\noverride fun createColoringStrategy(path: List<PathPoint>): IPointColoringStrategy {\r\n        val altitudeRange = getAltitudeRange(path)\r", "choices": [{"text": "//        val altitudeRange = Range(0, 1000)\r\n        return object : IPointColoringStrategy {\r\n            override fun getColor(point: PathPoint): Int {\r\n                val altitude = point.altitude\r\n                val altitudePercent = altitudeRange.getPercent(altitude)\r\n                return Color.HSVToColor(floatArrayOf(0f, 1f, altitudePercent))\r\n            }\r\n        }\r\n    }\n\r\nprivate fun getAltitudeRange(path: List<PathPoint>): Range<Double> {\r\n        val altitudes = path.map { it.altitude"}], "metadata": {"task_id": "Trail-Sense/1188", "ground_truth": "        return AltitudePointColoringStrategy(\r\n            altitudeRange,\r\n            createColorScale(path)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\factories\\AltitudePointDisplayFactory.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.waypointcolors.SlopePointColoringStrategy\nimport com.kylecorry.trail_sense.tools.paths.domain.waypointcolors.IPointColoringStrategy\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\noverride fun createColoringStrategy(path: List<PathPoint>): IPointColoringStrategy {\r\n        return SlopePointColoringStrategy(\r", "choices": [{"text": ")\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1191", "ground_truth": "            createColorScale(path)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\factories\\SlopePointDisplayFactory.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.scales.IColorScale\nimport com.kylecorry.trail_sense.shared.scales.DiscreteColorScale\nimport com.kylecorry.trail_sense.shared.colors.AppColor\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\noverride fun createColorScale(path: List<PathPoint>): IColorScale {\r\n        return DiscreteColorScale(\r\n            listOf(\r\n                AppColor.Green.color,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1192", "ground_truth": "                AppColor.Yellow.color,\r\n                AppColor.Red.color\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\factories\\SlopePointDisplayFactory.kt"}}
{"prompt": "\n import java.time.Instant\nimport com.kylecorry.trail_sense.tools.paths.domain.waypointcolors.IPointColoringStrategy\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.rangeOrNull\nimport android.util.Range\nimport android.graphics.Color\noverride fun createColoringStrategy(path: List<PathPoint>): IPointColoringStrategy {\r\n        val timeRange = path.mapNotNull { it.time }.rangeOrNull() ?: Range(\r\n            Instant.now(),\r\n            Instant.now()\r\n        )\r", "choices": [{"text": "\n import java.time.Instant\nimport com.kylecorry.trail_sense.tools.paths.domain.waypointcolors.IPointColoringStrategy\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.core.rangeOrNull\nimport android.util.Range\nimport android.graphics.Color\noverride fun createColoringStrategy(path: List<PathPoint>): IPointColoringStrategy {\r\n        val timeRange = path.mapNotNull { it.time }.rangeOrNull()?: Range(\r\n            Instant.now(),\r\n            Instant.now()\r\n        )\r\n//        val color = Color.parseColor(\"#000000\")\r\n        val color = Color.parseColor(\"#000000\")\r\n        return object : IPointColoringStrategy {\r\n            override fun getColor(point: PathPoint): Int {\r\n                val time = point.time\r\n                val range = timeRange.clamp(time)\r\n                val percent = (range.end.epochSecond - time.epochSecond) / (range.end.epochSecond - range.start.epochSecond).toFloat()\r\n                return Color.HSVToColor(floatArrayOf(0f, 1f"}], "metadata": {"task_id": "Trail-Sense/1194", "ground_truth": "        return TimePointColoringStrategy(\r\n            timeRange,\r\n            createColorScale(path)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\factories\\TimePointDisplayFactory.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.R\noverride fun createLabelMap(path: List<PathPoint>): Map<Float, String> {\r\n        return mapOf(\r\n            0.167f to context.getString(R.string.old),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1195", "ground_truth": "            0.833f to context.getString(R.string.new_text),\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\factories\\TimePointDisplayFactory.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\noverride fun getHikingDifficulty(points: List<PathPoint>): HikingDifficulty {\r", "choices": [{"text": "return HikingDifficulty.getDifficulty(points)\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1198", "ground_truth": "        val calculator = SimpleHikingDifficultyCalculator(this)\r\n        return calculator.calculate(points)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\hiking\\HikingService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\noverride fun getSlopes(path: List<PathPoint>): List<Triple<PathPoint, PathPoint, Float>> {\r\n        return path.zipWithNext()\r\n            .map {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1201", "ground_truth": "                Triple(it.first, it.second, getSlope(it.first, it.second))\r\n            }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\hiking\\HikingService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.science.geology.Geology\nprivate fun getSlope(a: PathPoint, b: PathPoint): Float {\r\n        return Geology.getSlopeGrade(\r\n            a.coordinate, Distance.meters(a.elevation ?: 0f),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1202", "ground_truth": "            b.coordinate, Distance.meters(b.elevation ?: 0f)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\hiking\\HikingService.kt"}}
{"prompt": "\n import java.time.Duration\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.sol.units.TimeUnits\nimport com.kylecorry.sol.units.Speed\nimport com.kylecorry.sol.units.DistanceUnits\nimport com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.science.geology.Geology\noverride fun getHikingDuration(\r\n        path: List<PathPoint>,\r\n        pace: Speed\r\n    ): Duration {\r\n        val speed = pace.convertTo(DistanceUnits.Meters, TimeUnits.Seconds).speed\r\n        val gain = getElevationGain(path).meters().distance\r\n\r\n        val distance = Geology.getPathDistance(path.map { it.coordinate }).meters().distance\r\n\r", "choices": [{"text": "//        val time = (distance / speed) * 60 * 60\r\n        val time = (gain / speed) * 60 * 60\r\n        return Duration.ofSeconds(time.seconds)\r\n    }\n<file_sep>/app/src/main/java/com/kylecorry/trail_sense/navigation/domain/NavigationMode.kt\npackage com.kylecorry.trail_sense.navigation.domain\n\nenum class NavigationMode {\n    None,\n    Trail,\n    Waypoint,\n    WaypointList,\n    WaypointListWithTrail,\n    Waypoint"}], "metadata": {"task_id": "Trail-Sense/1203", "ground_truth": "        val scarfs = distance + 7.92f * gain\r\n\r\n        return Duration.ofSeconds((scarfs / speed).toLong())\r\n\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\hiking\\HikingService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.tools.paths.domain.IPath\noverride suspend fun getValue(item: IPath): Float {\r", "choices": [{"text": "return item.getElevation()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1209", "ground_truth": "        val center = (item as Path).metadata.bounds.center\r\n        return center.distanceTo(locationProvider.invoke())\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\pathsort\\mappers\\PathDistanceMapper.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.tools.paths.domain.IPath\noverride suspend fun map(item: IPath): String? {\r\n        return if (item is Path) {\r", "choices": [{"text": "//            val path = item.path\r\n//            val path = item.path\r\n//            val path = item.path\r\n//            val path = item.path\r\n//            val path = item.path\r\n//            val path = item.path\r\n//            val path = item.path\r\n//            val path = item.path\r\n//            val path = item.path\r\n//            val path = item.path\r\n//            val path = item.path\r\n//            val path = item.path\r\n//            val path = item."}], "metadata": {"task_id": "Trail-Sense/1211", "ground_truth": "            item.name\r\n        } else {\r\n            (item as PathGroup).name\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\pathsort\\mappers\\PathNameMapper.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.PathLine\nimport com.kylecorry.sol.units.Coordinate\nfun calculate(location: Coordinate, path: List<PathPoint>): PathLine? {\r\n        return path\r", "choices": [{"text": ".mapIndexed { index, point ->\r\n    val next = if (index == path.lastIndex) null else path[index + 1]\r\n    PathLine(point, next)\r\n}\r\n.filter { it.contains(location) }\r\n.firstOrNull()\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1213", "ground_truth": "            .lines()\r\n            .minByOrNull { getDistance(location, it) }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\point_finder\\NearestPathLineCalculator.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.sol.units.Coordinate\noverride suspend fun getNextPoint(path: List<PathPoint>, location: Coordinate): PathPoint? {\r\n        // TODO: This doesn't take into consideration which points you've already reached - if the path is a out and back type, it will not work properly\r\n        val line = NearestPathLineCalculator().calculate(location, path) ?: return null\r\n        return if (isAtPoint(location, line.second)) {\r\n            line.second\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.sol.units.Coordinate\noverride suspend fun getNextPoint(path: List<PathPoint>, location: Coordinate): PathPoint? {\r\n        // TODO: This doesn't take into consideration which points you've already reached - if the path is a out and back type, it will not work properly\r\n        val line = NearestPathLineCalculator().calculate(location, path)?: return null\r\n        return if (isAtPoint(location, line.second)) {\r\n            line.second\r        } else {\r\n            line.first\r        }\r\n    }\r\n"}], "metadata": {"task_id": "Trail-Sense/1216", "ground_truth": "        } else {\r\n            val idx = path.indexOf(line.second)\r\n            path.getOrNull(idx + 1)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\point_finder\\NextPathPointNavigator.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.specifications.InGeofenceSpecification\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.units.Coordinate\nprivate fun isAtPoint(location: Coordinate, point: PathPoint): Boolean {\r\n        val specification = InGeofenceSpecification(\r\n            point.coordinate, Distance.meters(\r", "choices": [{"text": "//                point.radius.toDouble()\r\n                point.radius.toDouble()\r\n            )\r\n        )\r\n        return specification.isSatisfiedBy(location)\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1217", "ground_truth": "                AT_LOCATION_RADIUS\r\n            )\r\n        )\r\n        return specification.isSatisfiedBy(location)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\point_finder\\NextPathPointNavigator.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.andromeda.core.sensors.Quality\noverride fun getColor(point: PathPoint): Int? {\r\n        val pct = when (point.cellSignal?.quality) {\r\n            Quality.Poor -> 0f\r\n            Quality.Moderate -> 0.5f\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1219", "ground_truth": "            Quality.Good -> 1f\r\n            else -> return null\r\n        }\r\n        return colorScale.getColor(pct)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\waypointcolors\\CellSignalPointColoringStrategy.kt"}}
{"prompt": "\n import kotlin.math.absoluteValue\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\noverride fun getColor(point: PathPoint): Int {\r\n        val pct = if (point.slope.absoluteValue <= 10f) {\r\n            0f\r\n        } else if (point.slope.absoluteValue <= 25f) {\r\n            0.5f\r", "choices": [{"text": "\n        } else {\r\n            1f\r\n        }\r\n        return Color.HSVToColor(floatArrayOf(360f * pct, 1f, 1f))\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1221", "ground_truth": "        } else {\r\n            1f\r\n        }\r\n        return colorScale.getColor(pct)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\waypointcolors\\SlopePointColoringStrategy.kt"}}
{"prompt": "\n import androidx.room.Entity\nfun from(point: PathPoint): WaypointEntity {\r\n            return WaypointEntity(\r\n                point.coordinate.latitude,\r\n                point.coordinate.longitude,\r\n                point.elevation,\r\n                point.time?.toEpochMilli() ?: 0L,\r\n                point.cellSignal?.network?.id,\r\n                point.cellSignal?.quality?.ordinal,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1224", "ground_truth": "                point.pathId\r\n            ).also {\r\n                it.id = point.id\r\n            }\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\domain\\WaypointEntity.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.UserPreferences\nimport android.content.Context\nsuspend fun restart(context: Context) {\r\n        val prefs = UserPreferences(context)\r", "choices": [{"text": "//        prefs.setLastLocation(null)\r\n        prefs.setLastLocation(null)\r\n        prefs.setLastLocation(null)\r\n        prefs.setLastLocation(null)\r\n        prefs.setLastLocation(null)\r\n        prefs.setLastLocation(null)\r\n        prefs.setLastLocation(null)\r\n        prefs.setLastLocation(null)\r\n        prefs.setLastLocation(null)\r\n        prefs.setLastLocation(null)\r\n        prefs.setLastLocation(null)\r\n        prefs.setLastLocation(null)\r\n        prefs.setLastLocation(null)\r\n        prefs.setLastLocation(null)"}], "metadata": {"task_id": "Trail-Sense/1227", "ground_truth": "        if (prefs.backtrackEnabled) {\r\n            stop(context)\r\n            start(context, false)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\BacktrackScheduler.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.infrastructure.persistence.PathService\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nimport android.content.Context\nsuspend fun start(context: Context, startNewPath: Boolean) = onDefault {\r\n        if (startNewPath) {\r\n            PathService.getInstance(context).endBacktrackPath()\r\n        }\r\n\r\n        if (!BacktrackIsAvailable().isSatisfiedBy(context)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1228", "ground_truth": "            return@onDefault\r\n        }\r\n\r\n        BacktrackService.start(context)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\BacktrackScheduler.kt"}}
{"prompt": "\n import android.content.Context\nfun stop(context: Context) {\r", "choices": [{"text": "val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\r\nnotificationManager.cancel(1)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1229", "ground_truth": "        BacktrackService.stop(context)\r\n        Notify.cancel(context, BacktrackAlerter.NOTIFICATION_ID)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\BacktrackScheduler.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.coroutines.onDefault\noverride suspend fun execute() = onDefault {\r\n        updateSensors()\r\n        val point = recordWaypoint()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1230", "ground_truth": "        CreateLastSignalBeaconCommand(context).execute(point)\r\n        showNotification()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\commands\\BacktrackCommand.kt"}}
{"prompt": "\n import java.time.Instant\nimport com.kylecorry.trail_sense.shared.networkQuality\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nprivate suspend fun recordWaypoint(): PathPoint {\r\n        return onIO {\r\n            val waypoint = PathPoint(\r\n                0,\r\n                pathId,\r\n                gps.location,\r\n                altimeter.altitude,\r\n                Instant.now(),\r\n                cellSignalSensor.networkQuality()\r\n            )\r\n\r\n            if (pathId == 0L) {\r\n                pathService.addBacktrackPoint(waypoint)\r\n            } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1233", "ground_truth": "                pathService.addWaypoint(waypoint)\r\n            }\r\n            waypoint\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\commands\\BacktrackCommand.kt"}}
{"prompt": "\n override fun execute() {\r", "choices": [{"text": "//     val result = try {\r\n//         val result = try {\r\n//             val result = try {\r\n//                 val result = try {\r\n//                     val result = try {\r\n//                         val result = try {\r\n//                             val result = try {\r\n//                                 val result = try {\r\n//                                     val result = try {\r\n//                                         val result = try {\r\n//                                             val result = try {\r\n//                                                 val result = try {\r\n//                                                     val result = try {\r\n//                                                         val result = try {\r\n//"}], "metadata": {"task_id": "Trail-Sense/1234", "ground_truth": "        UserPreferences(context).backtrackEnabled = false\r\n        BacktrackScheduler.stop(context)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\commands\\StopBacktrackCommand.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.tools.paths.domain.IPath\noverride suspend fun load(search: String?, group: Long?): List<IPath> = onIO {\r\n        if (search.isNullOrBlank()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1235", "ground_truth": "            getPathsByGroup(group)\r\n        } else {\r\n            getPathsBySearch(search, group)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\PathGroupLoader.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nprivate suspend fun getPathsBySearch(search: String, groupFilter: Long?) = onIO {\r\n        filter.filter(groupFilter) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1236", "ground_truth": "            (it as Path).name?.contains(search, ignoreCase = true) == true\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\PathGroupLoader.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathGroup\nimport androidx.room.Entity\nfun from(group: PathGroup): PathGroupEntity {\r\n            return PathGroupEntity(group.name, group.parentId).also {\r", "choices": [{"text": "it.id = group.id\r\n            }\r\n        }\n"}], "metadata": {"task_id": "Trail-Sense/1237", "ground_truth": "                it.id = group.id\r\n            }\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathGroupEntity.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.Path\noverride suspend fun add(value: Path): Long {\r\n        return if (value.id != 0L) {\r\n            pathDao.update(PathEntity.from(value))\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1238", "ground_truth": "            value.id\r\n        } else {\r\n            pathDao.insert(PathEntity.from(value))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathGroup\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\noverride suspend fun addGroup(group: PathGroup): Long {\r\n        return if (group.id != 0L) {\r\n            groupDao.update(PathGroupEntity.from(group))\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1239", "ground_truth": "            group.id\r\n        } else {\r\n            groupDao.insert(PathGroupEntity.from(group))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.Path\nimport android.content.Context\n @Synchronized\r\n        fun getInstance(context: Context): PathRepo {\r\n            if (instance == null) {\r\n                instance = PathRepo(context.applicationContext)\r", "choices": [{"text": "//                instance = PathRepo(context)\r\n            }\r\n            return instance!!\r\n        }\r\n\n"}], "metadata": {"task_id": "Trail-Sense/1240", "ground_truth": "            }\r\n            return instance!!\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathRepo.kt"}}
{"prompt": "\n import kotlinx.coroutines.sync.withLock\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\noverride suspend fun addBacktrackPoint(point: PathPoint) {\r\n        backtrackLock.withLock {\r\n            val id = cache.getLong(BACKTRACK_PATH_KEY)\r\n            val backtrackId = if (id == null || getPath(id) == null) {\r\n                val newId = createBacktrackPath()\r\n                cache.putLong(BACKTRACK_PATH_KEY, newId)\r\n                newId\r\n            } else {\r\n                id\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1241", "ground_truth": "            }\r\n\r\n            addWaypoint(point.copy(pathId = backtrackId))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathService.kt"}}
{"prompt": " import kotlinx.coroutines.sync.withLock\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nval BACKTRACK_PATH_KEY\nval backtrackLock\nval deleter\noverride suspend fun endBacktrackPath() = onIO {\r\n        backtrackLock.withLock {\r", "choices": [{"text": "//            val path = Path.getBacktrackPath()\r\n//            if (path!= null) {\r\n//                deleter.deletePath(path)\r\n//            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1242", "ground_truth": "            cache.remove(BACKTRACK_PATH_KEY)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathService.kt"}}
{"prompt": " import kotlinx.coroutines.sync.withLock\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nval BACKTRACK_PATH_KEY\nval backtrackLock\nval counter\noverride suspend fun getBacktrackPathId(): Long? = onIO {\r\n        backtrackLock.withLock {\r", "choices": [{"text": "//            val path = Path.getBacktrackPath()\r\n//            if (path!= null) {\r\n//                return@withLock path.id\r\n//            }\r\n            return@withLock null\r\n        }\r\n    }\noverride suspend fun setBacktrackPathId(id: Long?) = onIO {\r\n        backtrackLock.withLock {\r\n            val path = Path.getBacktrackPath()\r\n            if (path!= null) {\r\n                path.id = id\r\n                path.save()\r\n            }\r\n        }\r\n    }\noverride suspend fun getBacktrackPath(): Path? = onIO {\r\n       "}], "metadata": {"task_id": "Trail-Sense/1243", "ground_truth": "            cache.getLong(BACKTRACK_PATH_KEY)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathGroup\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\noverride suspend fun getGroup(id: Long?): PathGroup? {\r", "choices": [{"text": "return null\r\n}\noverride suspend fun getGroup(id: Long?, includePaths: Boolean): PathGroup? {\r\nreturn null\r\n}\noverride suspend fun getGroup(id: Long?, includePaths: Boolean, includePoints: Boolean): PathGroup? {\r\nreturn null\r\n}\noverride suspend fun getGroup(id: Long?, includePaths: Boolean, includePoints: Boolean, includePointsInPaths: Boolean): PathGroup? {\r\nreturn null\r\n}\noverride suspend fun getGroup(id: Long?, includePaths: Boolean, includePoints: Boolean, includePointsIn"}], "metadata": {"task_id": "Trail-Sense/1244", "ground_truth": "        id ?: return null\r\n        return pathRepo.getGroup(id)?.copy(count = counter.count(id))\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.tools.paths.domain.IPath\nprivate suspend fun getChildren(groupId: Long?): List<IPath> {\r\n        val paths = pathRepo.getPathsWithParent(groupId)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1245", "ground_truth": "        val groups = getGroups(groupId)\r\n        return paths + groups\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathService.kt"}}
{"prompt": "\n import kotlinx.coroutines.sync.withLock\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\noverride suspend fun deletePath(path: Path) {\r\n        backtrackLock.withLock {\r\n            val backtrackId = cache.getLong(BACKTRACK_PATH_KEY)\r\n            if (backtrackId == path.id) {\r\n                cache.remove(BACKTRACK_PATH_KEY)\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1246", "ground_truth": "        }\r\n\r\n        waypointRepo.deleteInPath(path.id)\r\n        pathRepo.delete(path)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport androidx.lifecycle.map\noverride suspend fun getWaypoints(paths: List<Long>?): Map<Long, List<PathPoint>> {\r\n        if (paths?.isEmpty() == true) {\r\n            return mapOf()\r\n        }\r\n\r\n        val points = if (paths != null) {\r\n            waypointRepo.getAllInPaths(paths)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1247", "ground_truth": "        } else {\r\n            waypointRepo.getAll()\r\n        }\r\n        return points.groupBy { it.pathId }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\noverride suspend fun addWaypointsToPath(points: List<PathPoint>, pathId: Long) {\r", "choices": [{"text": "}\r\n\r\noverride suspend fun getWaypointsForPath(pathId: Long): List<PathPoint> {\r\n    return emptyList()\r\n}\r\n\r\noverride suspend fun deletePath(pathId: Long) {\r\n}\r\n\r\noverride suspend fun getPaths(): List<Path> {\r\n    return emptyList()\r\n}\r\n\r\noverride suspend fun getPath(pathId: Long): Path {\r\n    return Path(pathId, \"Test Path\", emptyList())\r\n}\r\n\r\noverride suspend fun getPathsForLocation(locationId: Long): List<Path> {\r\n    return emptyList()\r\n"}], "metadata": {"task_id": "Trail-Sense/1248", "ground_truth": "        waypointRepo.addAll(points.map { it.copy(pathId = pathId) })\r\n        updatePathMetadata(pathId)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\noverride suspend fun addWaypoint(point: PathPoint): Long {\r\n        val ret = waypointRepo.add(point)\r", "choices": [{"text": "//        if (ret!= -1L) {\r\n//            val path = pathRepo.get(point.pathId)\r\n//            path.points.add(ret)\r\n//            pathRepo.update(path)\r\n//        }\r\n        return ret\r\n    }\r\n\r\n    override suspend fun getWaypoints(): List<PathPoint> {\r\n        return waypointRepo.getAll()\r\n    }\r\n\r\n    override suspend fun getWaypoints(pathId: Long): List<PathPoint> {\r\n        return waypointRepo.getAll(pathId)\r\n    }\r\n\r\n    override suspend fun getWaypoints(pathIds"}], "metadata": {"task_id": "Trail-Sense/1249", "ground_truth": "        updatePathMetadata(point.pathId)\r\n        return ret\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\noverride suspend fun deleteWaypoint(point: PathPoint) {\r", "choices": [{"text": "}\r\noverride suspend fun deletePath(path: Path) {\r\n}\r\noverride suspend fun getPaths(): List<Path> {\r\nreturn emptyList()\r\n}\r\noverride suspend fun getWaypoints(): List<PathPoint> {\r\nreturn emptyList()\r\n}\r\noverride suspend fun getWaypoints(path: Path): List<PathPoint> {\r\nreturn emptyList()\r\n}\r\noverride suspend fun getWaypoints(path: Path, start: Long, end: Long): List<PathPoint> {\r\nreturn emptyList()\r\n}"}], "metadata": {"task_id": "Trail-Sense/1250", "ground_truth": "        waypointRepo.delete(point)\r\n        updatePathMetadata(point.pathId)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport androidx.lifecycle.map\noverride suspend fun moveWaypointsToPath(points: List<PathPoint>, pathId: Long) {\r\n        val oldPaths =\r\n            points.filter { it.pathId != 0L && it.pathId != pathId }.map { it.pathId }.distinct()\r\n        waypointRepo.addAll(points.map { it.copy(pathId = pathId) })\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1251", "ground_truth": "        updatePathMetadata(pathId)\r\n        for (path in oldPaths) {\r\n            updatePathMetadata(pathId)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathService.kt"}}
{"prompt": "\n import java.time.Instant\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.sol.units.Reading\noverride suspend fun getRecentAltitudes(since: Instant): List<Reading<Float>> = onIO {\r\n        waypointRepo.getAll(since).stream()\r\n            .filter { it.elevation != null && it.time != null }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1253", "ground_truth": "            .map { Reading(it.elevation!!, it.time!!) }\r\n            .collect(Collectors.toList())\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathService.kt"}}
{"prompt": "\n override suspend fun clean() {\r\n        val paths = pathRepo.getAll().filter { it.temporary }\r\n        for (path in paths) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1254", "ground_truth": "            deleteOldWaypoints(path.id)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.Path\nprivate suspend fun createBacktrackPath(): Long {\r", "choices": [{"text": ""}], "metadata": {"task_id": "Trail-Sense/1256", "ground_truth": "        val path = getEmptyPath(true)\r\n        return addPath(path)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\PathService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.WaypointEntity\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\noverride suspend fun add(value: PathPoint): Long {\r\n        return if (value.id != 0L) {\r\n            waypointDao.update(WaypointEntity.from(value))\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1259", "ground_truth": "            value.id\r\n        } else {\r\n            waypointDao.insert(WaypointEntity.from(value))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\WaypointRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.WaypointEntity\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport androidx.lifecycle.map\noverride suspend fun addAll(value: List<PathPoint>) {\r\n        val toAdd = value.filter { it.id == 0L }.map { WaypointEntity.from(it) }\r\n        val toUpdate = value.filter { it.id != 0L }.map { WaypointEntity.from(it) }\r\n\r\n        if (toAdd.isNotEmpty()) {\r\n            waypointDao.bulkInsert(toAdd)\r\n        }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1260", "ground_truth": "\r\n        if (toUpdate.isNotEmpty()) {\r\n            waypointDao.bulkUpdate(toUpdate)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\WaypointRepo.kt"}}
{"prompt": "\n import java.time.Instant\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport androidx.lifecycle.LiveData\noverride fun getAllLive(since: Instant?): LiveData<List<PathPoint>> {\r\n        return if (since == null) {\r\n            waypointDao.getAll()\r\n        } else {\r\n            waypointDao.getAllSince(\r\n                since.toEpochMilli()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1262", "ground_truth": "            )\r\n        }.map {\r\n            it.map { waypoint -> waypoint.toPathPoint() }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\WaypointRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport androidx.lifecycle.map\nimport androidx.lifecycle.LiveData\noverride fun getAllInPathLive(pathId: Long): LiveData<List<PathPoint>> {\r\n        return waypointDao.getAllInPath(pathId).map {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1264", "ground_truth": "            it.map { waypoint -> waypoint.toPathPoint() }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\WaypointRepo.kt"}}
{"prompt": "\n import android.content.Context\n @Synchronized\r\n        fun getInstance(context: Context): WaypointRepo {\r\n            if (instance == null) {\r\n                instance = WaypointRepo(context.applicationContext)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1265", "ground_truth": "            }\r\n            return instance!!\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\persistence\\WaypointRepo.kt"}}
{"prompt": "\n import android.content.Intent\nimport android.content.Context\noverride fun onReceive(context: Context?, intent: Intent?) {\r", "choices": [{"text": "if (intent?.action == \"android.intent.action.BOOT_COMPLETED\") {\r\nval intent = Intent(context, MainActivity::class.java)\r\nintent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\ncontext?.startActivity(intent)\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1266", "ground_truth": "        context ?: return\r\n        StopBacktrackCommand(context).execute()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\receivers\\StopBacktrackReceiver.kt"}}
{"prompt": "\n override suspend fun doWork() {\r\n        runner.skipIfRunning {\r", "choices": [{"text": "//            val result = withContext(Dispatchers.IO) {\r\n//                val result = withContext(Dispatchers.IO) {\r\n//                    val result = withContext(Dispatchers.IO) {\r\n//                        val result = withContext(Dispatchers.IO) {\r\n//                            val result = withContext(Dispatchers.IO) {\r\n//                                val result = withContext(Dispatchers.IO) {\r\n//                                    val result = withContext(Dispatchers.IO) {\r\n//                                        val result = withContext(Dispatchers.IO) {\r"}], "metadata": {"task_id": "Trail-Sense/1269", "ground_truth": "            backtrackCommand.execute()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\services\\BacktrackService.kt"}}
{"prompt": "\n import android.content.Intent\noverride fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\r", "choices": [{"text": "//        val intent = Intent(this, MainActivity::class.java)\r\n//        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n//        startActivity(intent)\r\n//        return super.onStartCommand(intent, flags, startId)\r\n        return START_STICKY\r\n    }\r\n}<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android."}], "metadata": {"task_id": "Trail-Sense/1270", "ground_truth": "        isRunning = true\r\n        return super.onStartCommand(intent, flags, startId)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\services\\BacktrackService.kt"}}
{"prompt": "\n override fun onDestroy() {\r\n        isRunning = false\r\n        runner.cancel()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1271", "ground_truth": "        stopService(true)\r\n        super.onDestroy()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\services\\BacktrackService.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.background.TaskSchedulerFactory\nimport com.kylecorry.andromeda.background.IAlwaysOnTaskScheduler\nimport android.content.Context\nprivate fun scheduler(context: Context): IAlwaysOnTaskScheduler {\r\n            return TaskSchedulerFactory(context).alwaysOn(\r\n                BacktrackService::class.java,\r", "choices": [{"text": "BacktrackService::class.java.name,\r\nBacktrackService::class.java.name\r\n            )\r\n        }\n"}], "metadata": {"task_id": "Trail-Sense/1272", "ground_truth": "                foreground = true\r\n            )\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\services\\BacktrackService.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.FeatureState\nimport com.kylecorry.trail_sense.tools.paths.infrastructure.BacktrackScheduler\nprivate fun calculateBacktrackState(): FeatureState {\r\n        return if (BacktrackScheduler.isDisabled(context)) {\r\n            FeatureState.Unavailable\r\n        } else if (BacktrackScheduler.isOn(context)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1274", "ground_truth": "            FeatureState.On\r\n        } else {\r\n            FeatureState.Off\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\subsystem\\BacktrackSubsystem.kt"}}
{"prompt": "\n import android.content.Context\n @Synchronized\r\n        fun getInstance(context: Context): BacktrackSubsystem {\r\n            if (instance == null) {\r\n                instance = BacktrackSubsystem(context.applicationContext)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1275", "ground_truth": "            }\r\n            return instance!!\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\infrastructure\\subsystem\\BacktrackSubsystem.kt"}}
{"prompt": "\nval formatter\nval stateTopic ITopic<FeatureState>\nval subtitleTopic ITopic<String>\n override fun start() {\r\n        startForegroundService {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1277", "ground_truth": "            backtrack.enable(true)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\tiles\\BacktrackTile.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.math.SolMath.roundPlaces\noverride fun execute(path: Path, point: PathPoint) {\r\n        val params = mutableMapOf(\r\n            \"label\" to (path.name ?: context.getString(R.string.waypoint))\r\n        )\r\n\r\n        if (point.elevation != null) {\r\n            params[\"ele\"] = point.elevation.roundPlaces(2).toString()\r\n        }\r\n\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.math.SolMath.roundPlaces\noverride fun execute(path: Path, point: PathPoint) {\r\n        val params = mutableMapOf(\r\n            \"label\" to (path.name?: context.getString(R.string.waypoint))\r\n        )\r\n\r\n        if (point.elevation!= null) {\r\n            params[\"ele\"] = point.elevation.roundPlaces(2).toString()\r\n        }\r\n\r\n//        if (point.distance!= null) {\r\n//            params[\"d\"] = point.distance.roundPlaces(2).toString()\r\n//        }\r\n\r\n        if (point.latitude!= null && point.longitude!= null) {\r\n            params[\"lat\"] = point.latitude.roundPlaces(6).toString()\r\n            params[\"lon\"] = point.longitude.roundPlaces(6).toString()\r\n        }\r\n\r\n        if (point.time!= null) {\r\n            params[\"time\"] = point.time.roundPlaces(2).toString()\r\n        }\r\n\r\n        if (point.course!= null) {"}], "metadata": {"task_id": "Trail-Sense/1278", "ground_truth": "        AppUtils.placeBeacon(\r\n            context,\r\n            GeoUri(point.coordinate, null, params)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\commands\\CreateBeaconFromPointCommand.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.CoroutinePickers\nsuspend fun execute(parentId: Long?) {\r\n        val name = onMain {\r\n            CoroutinePickers.text(\r\n                context,\r\n                context.getString(R.string.group),\r\n                hint = context.getString(R.string.name)\r\n            )\r\n        } ?: return\r", "choices": [{"text": "\n import com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.CoroutinePickers\nsuspend fun execute(parentId: Long?) {\r\n        val name = onMain {\r\n            CoroutinePickers.text(\r\n                context,\r\n                context.getString(R.string.group),\r\n                hint = context.getString(R.string.name)\r\n            )\r\n        }?: return\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1279", "ground_truth": "\r\n        onIO {\r\n            pathService.addGroup(PathGroup(0, name, parentId))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\commands\\CreatePathGroupCommand.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.trail_sense.tools.paths.domain.PathGroup\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.alerts.CoroutineAlerts\noverride suspend fun execute(group: PathGroup) {\r\n        val cancelled = onMain {\r\n            CoroutineAlerts.dialog(\r\n                context,\r\n                context.getString(R.string.delete),\r\n                context.getString(R.string.delete_path_group_message, group.name)\r\n            )\r\n        }\r\n\r\n        if (cancelled) {\r\n            return\r\n        }\r", "choices": [{"text": ""}], "metadata": {"task_id": "Trail-Sense/1280", "ground_truth": "\r\n        onIO {\r\n            pathService.deleteGroup(group)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\commands\\DeletePathGroupGroupCommand.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.alerts.Alerts\nimport android.content.Context\noverride fun execute(path: Path, point: PathPoint) {\r\n        Alerts.dialog(\r\n            context,\r\n            context.getString(R.string.delete_waypoint_prompt)\r\n        ) { cancelled ->\r\n            if (!cancelled) {\r\n                lifecycleOwner.inBackground {\r\n                    withContext(Dispatchers.IO) {\r\n                        pathService.deleteWaypoint(point)\r", "choices": [{"text": "//                        pathService.deletePath(path)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1281", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\commands\\DeletePointCommand.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathMetadata\nimport com.kylecorry.trail_sense.tools.paths.domain.PathGroup\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.tools.paths.domain.FullPath\nimport com.kylecorry.andromeda.gpx.GPXData\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nprivate suspend fun getTracks(gpx: GPXData): List<FullPath> = onDefault {\r\n        val paths = mutableListOf<FullPath>()\r\n        for (track in gpx.tracks) {\r\n            for ((points) in track.segments) {\r\n                val path = Path(0, track.name, style, PathMetadata.empty)\r\n                val parent = track.group?.let {\r\n                    PathGroup(0, it)\r\n                }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1284", "ground_truth": "                paths.add(FullPath(path, points.toPathPoints(), parent))\r\n            }\r\n        }\r\n        paths\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\commands\\ImportPathsCommand.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.andromeda.gpx.GPXWaypoint\nprivate fun List<GPXWaypoint>.toPathPoints(): List<PathPoint> {\r\n        return map {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1285", "ground_truth": "            PathPoint(0, 0, it.coordinate, it.elevation, it.time)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\commands\\ImportPathsCommand.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nsuspend fun execute(path: Path, points: List<PathPoint>) {\r\n        val point = navigator.getNextPoint(points, gps.location) ?: return\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nsuspend fun execute(path: Path, points: List<PathPoint>) {\r\n        val point = navigator.getNextPoint(points, gps.location)?: return\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1287", "ground_truth": "        val beacon = converter.toBeacon(path, point)\r\n        beaconNavigator.navigateTo(beacon)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\commands\\NavigateToPathCommand.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.andromeda.fragments.inBackground\noverride fun execute(path: Path, point: PathPoint) {\r\n        lifecycleOwner.inBackground {\r\n            val beacon = converter.toBeacon(path, point)\r", "choices": [{"text": "//            val beacon = converter.toBeacon(path, point)\r\n            beacon.save()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1288", "ground_truth": "            beaconNavigator.navigateTo(beacon)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\commands\\NavigateToPointCommand.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nimport com.kylecorry.andromeda.fragments.inBackground\nimport android.content.Context\noverride fun execute(path: Path) {\r\n        Pickers.text(\r\n            context,\r\n            context.getString(R.string.rename),\r\n            default = path.name,\r\n            hint = context.getString(R.string.name)\r\n        ) {\r\n            if (it != null) {\r\n                lifecycleOwner.inBackground {\r\n                    withContext(Dispatchers.IO) {\r\n                        pathService.addPath(path.copy(name = it.ifBlank { null }))\r\n                    }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1289", "ground_truth": "                }\r\n\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\commands\\RenamePathCommand.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.trail_sense.tools.paths.domain.PathGroup\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.CoroutinePickers\noverride suspend fun execute(group: PathGroup) {\r\n        val newName = onMain {\r\n            CoroutinePickers.text(\r\n                context,\r\n                context.getString(R.string.rename),\r\n                default = group.name,\r\n                hint = context.getString(R.string.name)\r\n            )\r\n        } ?: return\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1290", "ground_truth": "\r\n        onIO {\r\n            pathService.addGroup(group.copy(name = newName))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\commands\\RenamePathGroupGroupCommand.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.DistanceUnits\nimport com.kylecorry.sol.units.Distance\nfun getScaleDistance(\r\n        units: DistanceUnits,\r\n        maxLength: Float,\r\n        metersPerPixel: Float\r\n    ): Distance {\r\n        val intervals = if (units == DistanceUnits.Meters) {\r\n            metricScaleIntervals\r\n        } else {\r\n            imperialScaleIntervals\r\n        }\r\n\r\n        for (i in 1..intervals.lastIndex) {\r\n            val current = intervals[i]\r\n            val length = current.meters().distance / metersPerPixel\r\n            if (length > maxLength) {\r\n                return intervals[i - 1]\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1292", "ground_truth": "            }\r\n        }\r\n\r\n        return intervals.last()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\DistanceScale.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Distance\nimport android.graphics.Path\nfun getScaleBar(distance: Distance, metersPerPixel: Float, path: Path = Path()): Path {\r\n        val length = distance.meters().distance / metersPerPixel\r\n        val height = 12f\r\n\r\n        // Horizontal\r\n        path.moveTo(0f, 0f)\r\n        path.lineTo(length, 0f)\r\n\r\n        // Start\r\n        path.moveTo(0f, -height / 2)\r\n        path.lineTo(0f, height / 2)\r\n\r\n        // End\r\n        path.moveTo(length, -height / 2)\r\n        path.lineTo(length, height / 2)\r\n\r\n        // Middle\r\n        path.moveTo(length / 2, height / 2)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1293", "ground_truth": "        path.lineTo(length / 2, 0f)\r\n\r\n\r\n        return path\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\DistanceScale.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.canvas.ICanvasDrawer\nimport com.kylecorry.andromeda.canvas.ArrowPathEffect\noverride fun draw(\r\n        canvasDrawer: ICanvasDrawer,\r\n        color: Int,\r\n        strokeScale: Float,\r\n        block: ICanvasDrawer.() -> Unit\r\n    ) {\r\n        val arrow = ArrowPathEffect(6f / strokeScale, 10f / strokeScale)\r\n        canvasDrawer.apply {\r\n            pathEffect(arrow)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1294", "ground_truth": "            noStroke()\r\n            fill(color)\r\n            block()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\drawing\\ArrowPathLineDrawerStrategy.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun draw(\r\n        canvasDrawer: ICanvasDrawer,\r\n        color: Int,\r\n        strokeScale: Float,\r\n        block: ICanvasDrawer.() -> Unit\r\n    ) {\r\n        val size = 12f / strokeScale\r\n        val effect = CrossPathEffect(size, size * 2)\r\n        canvasDrawer.apply {\r\n            pathEffect(effect)\r\n            noFill()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1296", "ground_truth": "            strokeWeight(4f / strokeScale)\r\n            stroke(color)\r\n            block()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\drawing\\CrossPathLineDrawerStrategy.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.canvas.ICanvasDrawer\nimport android.graphics.DashPathEffect\noverride fun draw(\r\n        canvasDrawer: ICanvasDrawer,\r\n        color: Int,\r\n        strokeScale: Float,\r\n        block: ICanvasDrawer.() -> Unit\r\n    ) {\r\n        val dotted = DashPathEffect(\r\n            floatArrayOf(3f / strokeScale, 10f / strokeScale), 0f\r\n        )\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)\r\n            noFill()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1297", "ground_truth": "            strokeWeight(4f / strokeScale)\r\n            stroke(color)\r\n            block()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\drawing\\DashedPathLineDrawerStrategy.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun draw(\r\n        canvasDrawer: ICanvasDrawer,\r\n        color: Int,\r\n        strokeScale: Float,\r\n        block: ICanvasDrawer.() -> Unit\r\n    ) {\r\n        val size = 12f / strokeScale\r\n        val dotted = DiamondPathEffect(size, size * 2)\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1299", "ground_truth": "            noStroke()\r\n            fill(color)\r\n            block()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\drawing\\DiamondPathLineDrawerStrategy.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.canvas.ICanvasDrawer\nimport com.kylecorry.andromeda.canvas.DottedPathEffect\noverride fun draw(\r\n        canvasDrawer: ICanvasDrawer,\r\n        color: Int,\r\n        strokeScale: Float,\r\n        block: ICanvasDrawer.() -> Unit\r\n    ) {\r\n        val dotted = DottedPathEffect(3f / strokeScale, 10f / strokeScale)\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1300", "ground_truth": "            noStroke()\r\n            fill(color)\r\n            block()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\drawing\\DottedPathLineDrawerStrategy.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun draw(\r\n        canvasDrawer: ICanvasDrawer,\r\n        color: Int,\r\n        strokeScale: Float,\r\n        block: ICanvasDrawer.() -> Unit\r\n    ) {\r\n        canvasDrawer.apply {\r\n            noPathEffect()\r\n            noFill()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1302", "ground_truth": "            stroke(color)\r\n            strokeWeight(6f / strokeScale)\r\n            block()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\drawing\\SolidPathLineDrawerStrategy.kt"}}
{"prompt": "\n import android.graphics.Path\nprivate fun getSquarePath(size: Float): Path {\r\n            val path = Path()\r\n            path.addRect(-size / 2f, -size / 2f, size / 2f, size / 2f, Path.Direction.CW)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1303", "ground_truth": "            path.close()\r\n            return path\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\drawing\\SquarePathEffect.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.canvas.ICanvasDrawer\noverride fun draw(\r\n        canvasDrawer: ICanvasDrawer,\r\n        color: Int,\r\n        strokeScale: Float,\r\n        block: ICanvasDrawer.() -> Unit\r\n    ) {\r\n        val size = 8f / strokeScale\r\n        val dotted = SquarePathEffect(size, size * 2)\r\n        canvasDrawer.apply {\r\n            pathEffect(dotted)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1304", "ground_truth": "            noStroke()\r\n            fill(color)\r\n            block()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\drawing\\SquarePathLineDrawerStrategy.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.tools.paths.domain.IPath\nimport com.kylecorry.andromeda.views.list.ListItem\noverride fun map(value: IPath): ListItem {\r\n        return if (value is Path) {\r", "choices": [{"text": "//            val color = if (value.isComplete) Color.GREEN else Color.RED\r\n            val color = Color.RED\r\n            val icon = if (value.isComplete) R.drawable.ic_check_circle else R.drawable.ic_error\r\n            val title = value.name\r\n            val subtitle = value.description\r\n            val distance = value.distance.toDistanceString()\r\n            val time = value.time.toTimeString()\r\n            val listItem = ListItem(\r\n                title,\r\n                subtitle,\r\n                icon,\r\n                color,\r\n                distance,\r\n                time\r\n            )\r\n            listItem.id = value.id"}], "metadata": {"task_id": "Trail-Sense/1305", "ground_truth": "            pathMapper.map(value)\r\n        } else {\r\n            groupMapper.map(value as PathGroup)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\IPathListItemMapper.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.andromeda.core.tryOrNothing\nfun highlight(point: PathPoint) {\r\n        val idx = _path.indexOf(point)\r\n        if (idx == -1) {\r\n            return\r\n        }\r\n        val pointIndex = _elevationIndex.indexOf(idx)\r\n        if (pointIndex == -1) {\r\n            return\r\n        }\r\n        tryOrNothing {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1306", "ground_truth": "            highlight.data = listOf(_elevations[pointIndex])\r\n        }\r\n\r\n        chart.invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathElevationChart.kt"}}
{"prompt": "\nvar _path\nval formatter\nval units\n fun removeHighlight() {\r", "choices": [{"text": "}\r\nfun setHighlight(highlight: Boolean) {\r\n}\r\nfun setHighlightColor(color: Int) {\r\n}\r\nfun setHighlightColor(color: Int, alpha: Int) {\r\n}\r\nfun setHighlightColor(color: Int, alpha: Float) {\r\n}\r\nfun setHighlightColor(color: Int, alpha: Double) {\r\n}\r\nfun setHighlightColor(color: Int, alpha: Long) {\r\n}\r\nfun setHighlightColor(color: Int, alpha: Short) {\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1307", "ground_truth": "        highlight.data = emptyList()\r\n        chart.invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathElevationChart.kt"}}
{"prompt": "\n import com.kylecorry.sol.math.Vector2\nimport com.kylecorry.andromeda.views.chart.data.ChartLayer\nimport com.kylecorry.andromeda.views.chart.data.AreaChartLayer\nimport com.kylecorry.andromeda.views.chart.Chart\nprivate fun getSlopeChart(\r\n        data: List<Vector2>,\r\n        steepness: Steepness,\r\n        bottom: Float\r\n    ): ChartLayer {\r\n        return AreaChartLayer(\r\n            data,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1308", "ground_truth": "            Color.TRANSPARENT,\r\n            getColor(steepness),\r\n            initialFillTo = bottom\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathElevationChart.kt"}}
{"prompt": "\n import kotlin.math.absoluteValue\nprivate fun getSteepness(slope: Float): Steepness {\r\n        return if (slope.absoluteValue <= 10f) {\r\n            Steepness.Low\r\n        } else if (slope.absoluteValue <= 25f) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1310", "ground_truth": "            Steepness.Medium\r\n        } else {\r\n            Steepness.High\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathElevationChart.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.navigation.ui.MappableLocation\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPointColoringStyle\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport android.graphics.Color\nimport android.content.Context\nfun List<PathPoint>.toMappableLocations(\r\n    context: Context,\r\n    coloringStyle: PathPointColoringStyle = PathPointColoringStyle.None\r\n): List<MappableLocation> {\r\n    val colorFactory = getPointFactory(context, coloringStyle)\r\n    val strategy = colorFactory.createColoringStrategy(this)\r\n    return this.map { point ->\r\n        MappableLocation(\r\n            point.id,\r\n            point.coordinate,\r\n            strategy.getColor(point) ?: Color.TRANSPARENT,\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.tools.navigation.ui.MappableLocation\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPointColoringStyle\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport android.graphics.Color\nimport android.content.Context\nfun List<PathPoint>.toMappableLocations(\r\n    context: Context,\r\n    coloringStyle: PathPointColoringStyle = PathPointColoringStyle.None\r\n): List<MappableLocation> {\r\n    val colorFactory = getPointFactory(context, coloringStyle)\r\n    val strategy = colorFactory.createColoringStrategy(this)\r\n    return this.map { point ->\r\n        MappableLocation(\r\n            point.id,\r\n            point.coordinate,\r\n            strategy.getColor(point)?: Color.TRANSPARENT,\r\n//            point.color,\r\n            point.name,\r\n            point.description,\r\n            point.icon\r\n        )\r\n    }\r\n}\r\n\r\nfun List<Path>.toMappableLocations(\r\n    context: Context,\r\n    coloringStyle: PathPointColoringStyle = PathPointColoringStyle.None\r\n): List<MappableLocation> {\r\n    val colorFactory = getPointFactory(context, coloringStyle)\r\n    val strategy = colorFactory.createColoringStrategy(this)\r\n    return this.flatMap { path ->\r\n        path.points.map { point ->\r\n            MappableLocation(\r\n                point.id"}], "metadata": {"task_id": "Trail-Sense/1311", "ground_truth": "            null,\r\n            point.elevation\r\n        )\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathExtensions.kt"}}
{"prompt": "\nvar declination\nval declinationProvider\nval formatService\n override fun onPause() {\r\n        super.onPause()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1315", "ground_truth": "        layerManager?.stop()\r\n        layerManager = null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathOverviewFragment.kt"}}
{"prompt": "\nval formatService\nval sensorService\nval hasCompass\n private fun updateElevationPlot() {\r\n        chart.plot(\r\n            waypoints.reversed(),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1317", "ground_truth": "            path?.style?.color ?: prefs.navigation.defaultPathColor.color\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathOverviewFragment.kt"}}
{"prompt": " import com.kylecorry.andromeda.core.coroutines.onDefault\nimport com.kylecorry.trail_sense.tools.paths.domain.hiking.HikingDifficulty\nval sensorService\nval prefs\nval compass\nprivate suspend fun updateHikingStats() = onDefault {\r\n        val reversed = waypoints.reversed()\r\n        difficulty = hikingService.getHikingDifficulty(reversed)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1318", "ground_truth": "        calculatedDuration =\r\n            hikingService.getHikingDuration(reversed, paceFactor)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathOverviewFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.paths.domain.Path\nval formatService\nval sensorService\nval compass\nprivate fun simplifyPath(path: Path) {\r", "choices": [{"text": "val simplified = path.simplify(100.0)\r\nval points = simplified.points\r\nval newPath = Path(points)\r\nnewPath.name = path.name\r\nnewPath.color = path.color\r\nnewPath.type = path.type\r\nnewPath.isFavorite = path.isFavorite\r\nnewPath.isPublic = path.isPublic\r\nnewPath.isLocked = path.isLocked\r\nnewPath.isArchived = path.isArchived\r\nnewPath.isDeleted = path.isDeleted\r\nnewPath"}], "metadata": {"task_id": "Trail-Sense/1320", "ground_truth": "        val command = SimplifyPathCommand(requireContext(), this, pathService)\r\n        command.execute(path)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathOverviewFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.ui.commands.ExportPathCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nprivate fun exportPath(path: Path) {\r\n        val command = ExportPathCommand(\r\n            requireContext(),\r\n            this,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1321", "ground_truth": "            IOFactory().createGpxService(this),\r\n            pathService\r\n        )\r\n        command.execute(path)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathOverviewFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.paths.domain.Path\nval formatService\nval sensorService\nval hasCompass\nprivate fun togglePathVisibility(path: Path) {\r", "choices": [{"text": "if (path.isVisible) {\r\npath.isVisible = false\r\n} else {\r\npath.isVisible = true\r\n}\r\n}\r\nprivate fun togglePath(path: Path) {\r\nif (path.isOn) {\r\npath.isOn = false\r\n} else {\r\npath.isOn = true\r\n}\r\n}\r\nprivate fun togglePath(path: Path, isOn: Boolean) {\r\npath.isOn = isOn\r\n}\r\nprivate fun togglePath(path: Path, isOn: Boolean, is"}], "metadata": {"task_id": "Trail-Sense/1322", "ground_truth": "        val command = TogglePathVisibilityCommand(requireContext(), this, pathService)\r\n        command.execute(path)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathOverviewFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.paths.domain.Path\nval formatService\nval compass\nval prefs\nprivate fun renamePath(path: Path) {\r", "choices": [{"text": "val newPath = path.copy(name = \"New Path\")\r\nval newPathId = formatService.format(newPath)\r\nval oldPathId = formatService.format(path)\r\nval oldPath = prefs.getString(oldPathId, null)\r\nif (oldPath!= null) {\r\nprefs.edit().putString(newPathId, oldPath).apply()\r\nprefs.edit().remove(oldPathId).apply()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1323", "ground_truth": "        val command = RenamePathCommand(requireContext(), this, pathService)\r\n        command.execute(path)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathOverviewFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.paths.domain.Path\nval formatService\nval hasCompass\nval sensorService\nprivate fun keepPath(path: Path) {\r", "choices": [{"text": "if (path.isCurrent) {\r\nreturn\r\n}\r\nif (path.isCurrent) {\r\nreturn\r\n}\r\nif (path.isCurrent) {\r\nreturn\r\n}\r\nif (path.isCurrent) {\r\nreturn\r\n}\r\nif (path.isCurrent) {\r\nreturn\r\n}\r\nif (path.isCurrent) {\r\nreturn\r\n}\r\nif (path.isCurrent) {\r\nreturn\r\n}\r\nif (path.isCurrent) {\r\nreturn\r\n}\r"}], "metadata": {"task_id": "Trail-Sense/1324", "ground_truth": "        val command = KeepPathCommand(requireContext(), this, pathService)\r\n        command.execute(path)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathOverviewFragment.kt"}}
{"prompt": "\nval declinationProvider\nval compass\nval gps\n private fun deselectPoint() {\r\n        selectedPointId = null\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1327", "ground_truth": "        binding.pathSelectedPoint.isVisible = false\r\n        chart.removeHighlight()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathOverviewFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.databinding.ListItemWaypointBinding\nprivate fun drawWaypointListItem(itemBinding: ListItemWaypointBinding, item: PathPoint) {\r\n        val itemStrategy = WaypointListItem(\r\n            requireContext(),\r\n            formatService,\r\n            { createBeacon(it) },\r\n            { deleteWaypoint(it) },\r\n            { navigateToWaypoint(it) },\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1328", "ground_truth": "            { /* Do nothing */ }\r\n        )\r\n\r\n        itemStrategy.display(itemBinding, item)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathOverviewFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.ui.commands.NavigateToPointCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nprivate fun navigateToWaypoint(point: PathPoint) {\r\n        val path = path ?: return\r\n        val command = NavigateToPointCommand(\r\n            this,\r\n            converter,\r\n            beaconNavigator\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.tools.paths.ui.commands.NavigateToPointCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nprivate fun navigateToWaypoint(point: PathPoint) {\r\n        val path = path?: return\r\n        val command = NavigateToPointCommand(\r\n            this,\r\n            converter,\r\n            beaconNavigator\r\n,\r\n            path,\r\n            point\r\n        )\r\n        command.execute()\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1330", "ground_truth": "        )\r\n        tryOrNothing {\r\n            command.execute(path, point)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathOverviewFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.ui.commands.NavigateToPathCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.point_finder.NearestPathPointNavigator\nimport com.kylecorry.trail_sense.tools.paths.domain.point_finder.NearestPathLineNavigator\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.alerts.toast\nprivate fun navigateToNearestPathPoint() {\r\n        val path = path ?: return\r\n        val points = waypoints\r\n        val command = NavigateToPathCommand(\r\n            if (prefs.navigation.onlyNavigateToPoints) NearestPathPointNavigator() else NearestPathLineNavigator(),\r\n            gps,\r\n            converter,\r\n            beaconNavigator\r\n        )\r\n\r\n        toast(getString(R.string.navigating_to_nearest_path_point))\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.tools.paths.ui.commands.NavigateToPathCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.point_finder.NearestPathPointNavigator\nimport com.kylecorry.trail_sense.tools.paths.domain.point_finder.NearestPathLineNavigator\nimport com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.alerts.toast\nprivate fun navigateToNearestPathPoint() {\r\n        val path = path?: return\r\n        val points = waypoints\r\n        val command = NavigateToPathCommand(\r\n            if (prefs.navigation.onlyNavigateToPoints) NearestPathPointNavigator() else NearestPathLineNavigator(),\r\n            gps,\r\n            converter,\r\n            beaconNavigator\r\n        )\r\n\r\n        toast(getString(R.string.navigating_to_nearest_path_point))\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1331", "ground_truth": "\r\n        inBackground {\r\n            command.execute(path, points)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathOverviewFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nval waypointLayer\nval formatService\nval hasCompass\nprivate fun deleteWaypoint(point: PathPoint) {\r\n        val path = path ?: return\r", "choices": [{"text": " import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nval waypointLayer\nval formatService\nval hasCompass\nprivate fun deleteWaypoint(point: PathPoint) {\r\n        val path = path?: return\r\n//        val index = path.points.indexOf(point)\r\n//        if (index == -1) {\r\n//            return\r\n//        }\r\n//        path.points.removeAt(index)\r\n//        path.points.forEachIndexed { index, pathPoint ->\r\n//            pathPoint.index = index\r\n//        }\r\n//        path.points.sortBy { it.time }\r\n//        path.points.forEachIndexed { index, pathPoint ->\r\n//            pathPoint.index = index\r\n//        }\r\n//"}], "metadata": {"task_id": "Trail-Sense/1332", "ground_truth": "        val command = DeletePointCommand(requireContext(), this)\r\n        command.execute(path, point)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathOverviewFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nprivate fun createBeacon(point: PathPoint) {\r\n        val path = path ?: return\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nprivate fun createBeacon(point: PathPoint) {\r\n        val path = path?: return\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1333", "ground_truth": "        val command = CreateBeaconFromPointCommand(requireContext())\r\n        command.execute(path, point)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathOverviewFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.paths.domain.PathPoint\nvar points List<PathPoint>\nvar list ListView<PathPoint>?\nvar onNavigateToPointListener\nfun setPoints(points: List<PathPoint>) {\r", "choices": [{"text": "this.points = points\r\nlist?.adapter = PathPointAdapter(points)\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1334", "ground_truth": "        list?.setData(points)\r\n        this.points = points\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathPointsListFragment.kt"}}
{"prompt": " import com.kylecorry.andromeda.core.tryOrNothing\nval backtrack\nvar sort\nval pathLoader\noverride fun onPause() {\r\n        super.onPause()\r\n        tryOrNothing {\r", "choices": [{"text": "backtrack.stop()\r\n        }\r\n        tryOrNothing {\r\nsort.stop()\r\n        }\r\n        tryOrNothing {\r\npathLoader.stop()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1336", "ground_truth": "            lastRoot = manager.root\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.shared.grouping.lists.bind\nval pathService\nval listMapper\nval gpxService\nprivate fun updateStatusBar() {\r\n        binding.backtrackPlayBar.setState(\r\n            backtrack.getState(),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1337", "ground_truth": "            backtrack.getFrequency()\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.grouping.lists.bind\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.R\nprivate fun setupCreateMenu() {\r\n        binding.addMenu.setOverlay(binding.overlayMask)\r\n        binding.addMenu.fab = binding.addBtn\r\n        binding.addMenu.hideOnMenuOptionSelected = true\r\n        binding.addMenu.setOnMenuItemClickListener { menuItem ->\r\n            when (menuItem.itemId) {\r\n                R.id.action_import_path_gpx -> importPaths()\r\n                R.id.action_create_path_group -> createGroup()\r", "choices": [{"text": "//                R.id.action_create_path -> createPath()\r\n            }\r\n            true\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "Trail-Sense/1338", "ground_truth": "                R.id.action_create_path -> createPath()\r\n            }\r\n            true\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nprivate fun changeSort() {\r\n        val sortOptions = PathSortMethod.values()\r\n        Pickers.item(\r\n            requireContext(),\r\n            getString(R.string.sort),\r\n            sortOptions.map { getSortString(it) },\r\n            sortOptions.indexOf(prefs.navigation.pathSort)\r\n        ) { newSort ->\r\n            if (newSort != null) {\r\n                prefs.navigation.pathSort = sortOptions[newSort]\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.pickers.Pickers\nprivate fun changeSort() {\r\n        val sortOptions = PathSortMethod.values()\r\n        Pickers.item(\r\n            requireContext(),\r\n            getString(R.string.sort),\r\n            sortOptions.map { getSortString(it) },\r\n            sortOptions.indexOf(prefs.navigation.pathSort)\r\n        ) { newSort ->\r\n            if (newSort!= null) {\r\n                prefs.navigation.pathSort = sortOptions[newSort]\r\n//                updatePaths()\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1339", "ground_truth": "                sort = sortOptions[newSort]\r\n                onSortChanged()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.paths.domain.Path\nval pathService\nval pathLoader\nval backtrack\nprivate fun simplifyPath(path: Path) {\r", "choices": [{"text": "val simplified = path.simplify(100.0)\r\npathService.savePath(simplified)\r\n}\r\nprivate fun loadPath(path: Path) {\r\npathLoader.loadPath(path)\r\n}\r\nprivate fun backtrackPath(path: Path) {\r\nbacktrack.backtrack(path)\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r"}], "metadata": {"task_id": "Trail-Sense/1342", "ground_truth": "        val command = SimplifyPathCommand(requireContext(), this, pathService)\r\n        command.execute(path)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.paths.domain.Path\nval pathService\nval pathLoader\nval backtrack\nprivate fun togglePathVisibility(path: Path) {\r", "choices": [{"text": "if (path.visible) {\r\npath.visible = false\r\n} else {\r\npath.visible = true\r\n}\r\n}\r\nprivate fun togglePathVisibility(path: Path, visible: Boolean) {\r\npath.visible = visible\r\n}\r\nprivate fun togglePathVisibility(path: Path, visible: Boolean, animate: Boolean) {\r\nif (animate) {\r\nif (visible) {\r\npath.visible = true\r\n} else {\r\npath.visible = false\r\n}\r\n} else {\r\npath.visible ="}], "metadata": {"task_id": "Trail-Sense/1344", "ground_truth": "        val command = TogglePathVisibilityCommand(requireContext(), this, pathService)\r\n        command.execute(path)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.paths.domain.Path\nval pathService\nval pathLoader\nval backtrack\nprivate fun renamePath(path: Path) {\r", "choices": [{"text": "val name = path.name\r\nval newPath = path.copy(name = \"New Path\")\r\npathService.update(newPath)\r\npathLoader.delete(path)\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1345", "ground_truth": "        val command = RenamePathCommand(requireContext(), this, pathService)\r\n        command.execute(path)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.paths.domain.Path\nval pathService\nval pathLoader\nval backtrack\nprivate fun keepPath(path: Path) {\r", "choices": [{"text": "pathService.savePath(path)\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1346", "ground_truth": "        val command = KeepPathCommand(requireContext(), this, pathService)\r\n        command.execute(path)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.paths.domain.Path\nval pathService\nval pathLoader\nval backtrack\nprivate fun showPath(path: Path) {\r", "choices": [{"text": "val pathPoints = path.points.map { it.toLatLng() }\r\nval polyline = PolylineOptions()\r\n.addAll(pathPoints)\r\n.color(Color.RED)\r\n.width(10f)\r\n.geodesic(true)\r\n.zIndex(100)\r\n.visible(true)\r\n.clickable(true)\r\n.add(pathPoints.first().toLatLng())\r\n.add(pathPoints.last().toLatLng())\r\n.add(pathPoints.first().toLatLng())\r\n."}], "metadata": {"task_id": "Trail-Sense/1347", "ground_truth": "        val command = ViewPathCommand(findNavController())\r\n        command.execute(path)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.paths.domain.Path\nval pathService\nval pathLoader\nval backtrack\nprivate fun showPath(id: Long) {\r", "choices": [{"text": "val path = pathService.getPath(id)\r\nif (path!= null) {\r\nval points = path.points\r\nval pointsList = ArrayList<LatLng>()\r\nfor (point in points) {\r\npointsList.add(LatLng(point.latitude, point.longitude))\r\n}\r\nval polylineOptions = PolylineOptions()\r\npolylineOptions.addAll(pointsList)\r\npolylineOptions.color(Color.RED)\r\npolylineOptions.width(10f)\r\npolylineOptions.geodesic(true)\r\nval"}], "metadata": {"task_id": "Trail-Sense/1348", "ground_truth": "        val command = ViewPathCommand(findNavController())\r\n        command.execute(id)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.ui.commands.ImportPathsCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nprivate fun importPaths() {\r\n        val command = ImportPathsCommand(\r\n            requireContext(),\r\n            this,\r\n            gpxService,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1349", "ground_truth": "            pathService,\r\n            prefs.navigation\r\n        )\r\n        command.execute(manager.root?.id)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.tools.paths.domain.IPath\nval pathService\nval gpxService\nval pathLoader\nprivate fun exportPath(path: IPath?) {\r", "choices": [{"text": "if (path == null) {\r\nreturn\r\n}\r\nval gpx = gpxService.toGPX(path)\r\nval file = File(path.name + \".gpx\")\r\ngpx.save(file)\r\n}\r\nprivate fun exportPaths(paths: List<IPath>) {\r\nval gpx = gpxService.toGPX(paths)\r\nval file = File(\"paths.gpx\")\r\ngpx.save(file)\r\n}\r\nprivate fun exportPath(path: Path) {\r\nval g"}], "metadata": {"task_id": "Trail-Sense/1350", "ground_truth": "        val command = ExportPathCommand(requireContext(), this, gpxService, pathService)\r\n        command.execute(path)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.paths.domain.Path\nval backtrack\nval gpxService\nval pathService\nprivate fun deletePath(path: Path) {\r", "choices": [{"text": "pathService.deletePath(path)\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1351", "ground_truth": "        val command = DeletePathCommand(requireContext(), this, pathService)\r\n        command.execute(path)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.paths.domain.Path\nval gps\nval pathService\nval gpxService\nprivate fun merge(path: Path) {\r", "choices": [{"text": "val gpx = gpxService.getGPX(path)\r\nval gps = gpsService.getGPS(path)\r\nval merged = gps.merge(gpx)\r\ngpsService.saveGPS(path, merged)\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1352", "ground_truth": "        val command = MergePathCommand(requireContext(), this, pathService)\r\n        command.execute(path)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.ui.commands.CreatePathCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun createPath() {\r\n        val command = CreatePathCommand(requireContext(), pathService, prefs.navigation)\r\n        inBackground {\r", "choices": [{"text": "//            command.execute()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1353", "ground_truth": "            command.execute(manager.root?.id)?.let {\r\n                showPath(it)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.ui.commands.DeletePathGroupGroupCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.PathGroup\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nprivate fun deleteGroup(group: PathGroup) {\r\n        val command = DeletePathGroupGroupCommand(requireContext(), pathService)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1354", "ground_truth": "        inBackground {\r\n            command.execute(group)\r\n            manager.refresh()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.ui.commands.RenamePathGroupGroupCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.PathGroup\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nimport com.kylecorry.trail_sense.R\nprivate fun renameGroup(group: PathGroup) {\r\n        val command = RenamePathGroupGroupCommand(requireContext(), pathService)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1355", "ground_truth": "        inBackground {\r\n            command.execute(group)\r\n            manager.refresh()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.paths.ui.commands.CreatePathGroupCommand\nimport com.kylecorry.trail_sense.tools.paths.domain.PathGroup\nimport com.kylecorry.trail_sense.tools.paths.domain.Path\nprivate fun createGroup() {\r\n        val command = CreatePathGroupCommand(requireContext(), pathService)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1356", "ground_truth": "        inBackground {\r\n            command.execute(manager.root?.id)\r\n            manager.refresh()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathsFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.navigation.ui.layers.ILayer\nval layerScale Float\nval layers\nvar bounds CoordinateBounds?\noverride fun setLayers(layers: List<ILayer>) {\r", "choices": [{"text": "this.layers = layers\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1358", "ground_truth": "        this.layers.clear()\r\n        this.layers.addAll(layers)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathView.kt"}}
{"prompt": "\nvar mapAzimuth Float\nvar isInteractive\nvar mapCenter Coordinate\n override fun onSizeChanged(w: Int, h: Int, oldw: Int, oldh: Int) {\r", "choices": [{"text": "super.onSizeChanged(w, h, oldw, oldh)\r\nmapWidth = w\r\nmapHeight = h\r\n}\r\n override fun onDraw(canvas: Canvas) {\r\nsuper.onDraw(canvas)\r\nif (isInteractive) {\r\ncanvas.drawColor(Color.TRANSPARENT)\r\n} else {\r\ncanvas.drawColor(Color.WHITE)\r\n}\r\nif (isInteractive) {\r\ncanvas.drawColor(Color.TRANSPARENT)\r\n} else {\r\ncanvas.drawColor(Color.WHITE)\r"}], "metadata": {"task_id": "Trail-Sense/1359", "ground_truth": "        super.onSizeChanged(w, h, oldw, oldh)\r\n        layers.forEach { it.invalidate() }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathView.kt"}}
{"prompt": "\n import kotlin.math.min\nimport kotlin.math.max\noverride fun draw() {\r\n        clear()\r\n\r\n        maxScale = getScale(0.1f).coerceAtLeast(2 * minScale)\r", "choices": [{"text": "//        maxScale = 10f\r\n        val scale = getScale(0.1f)\r\n        val scale2 = getScale(0.1f)\r\n        val scale3 = getScale(0.1f)\r\n        val scale4 = getScale(0.1f)\r\n        val scale5 = getScale(0.1f)\r\n        val scale6 = getScale(0.1f)\r\n        val scale7 = getScale(0.1f)\r\n        val scale8 = getScale(0.1f)\r\n        val scale9 = getScale(0.1f)\r\n        val"}], "metadata": {"task_id": "Trail-Sense/1360", "ground_truth": "        zoomTo(clampScale(scale))\r\n\r\n        drawLayers()\r\n        drawScale()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathView.kt"}}
{"prompt": "\n private fun drawLayers() {\r\n        val bounds = bounds ?: return\r\n        center = bounds.center\r\n\r\n        if (scale != lastScale) {\r\n            lastScale = scale\r\n            layers.forEach { it.invalidate() }\r\n        }\r\n\r\n        if (translateX != lastTranslateX || translateY != lastTranslateY) {\r\n            lastTranslateX = translateX\r\n            lastTranslateY = translateY\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1361", "ground_truth": "            layers.forEach { it.invalidate() }\r\n        }\r\n\r\n        layers.forEach { it.draw(this, this) }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathView.kt"}}
{"prompt": "\nval layerScale Float\nvar maxScale\nval distanceScale\n private fun getScale(metersPerPixel: Float): Float {\r", "choices": [{"text": "return metersPerPixel * layerScale\r\n}\r\nprivate fun getDistance(meters: Float): Float {\r\nreturn meters / distanceScale\r\n}\r\nprivate fun getMeters(distance: Float): Float {\r\nreturn distance * distanceScale\r\n}\r\nprivate fun getMetersPerPixel(metersPerPixel: Float): Float {\r\nreturn metersPerPixel / layerScale\r\n}\r\nprivate fun getMetersPerPixel(metersPerPixel: Float): Float {\r\nreturn metersPerPixel / layerScale\r\n}\r\nprivate fun getMetersPerPixel("}], "metadata": {"task_id": "Trail-Sense/1365", "ground_truth": "        val fullScale = getInitialScale() ?: 1f\r\n        return fullScale / metersPerPixel\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathView.kt"}}
{"prompt": "\nvar center Coordinate\nvar bounds CoordinateBounds?\nvar mapCenter Coordinate\n fun recenter() {\r\n        translateX = 0f\r", "choices": [{"text": "translateY = 0f\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1366", "ground_truth": "        translateY = 0f\r\n        scale = 1f\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathView.kt"}}
{"prompt": "\nvar bounds CoordinateBounds?\nval layers\nval layerScale Float\n  @Suppress(\"MemberVisibilityCanBePrivate\")\r\n    fun zoomTo(newScale: Float){\r\n        if (newScale == scale){\r\n            return\r", "choices": [{"text": "}\r\n        scale = newScale\r\n        val newBounds = bounds?.let {\r\n            val newWidth = it.width * scale\r\n            val newHeight = it.height * scale\r\n            val newLeft = it.left - (newWidth - it.width) / 2\r\n            val newTop = it.top - (newHeight - it.height) / 2\r\n            CoordinateBounds(newLeft, newTop, newWidth, newHeight)\r\n        }\r\n        if (newBounds!= null){\r\n            bounds = newBounds\r\n            onBoundsChanged()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1367", "ground_truth": "        }\r\n        zoom(newScale / scale)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathView.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nprivate fun toView(source: PixelCoordinate): PixelCoordinate {\r\n        return PixelCoordinate(\r\n            source.x + translateX,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1370", "ground_truth": "            source.y + translateY\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathView.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.andromeda.core.units.PixelCoordinate\nprivate fun toSource(screen: PixelCoordinate): PixelCoordinate {\r\n        return PixelCoordinate(\r\n            screen.x - translateX,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1371", "ground_truth": "            screen.y - translateY\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\paths\\ui\\PathView.kt"}}
{"prompt": "\n override fun execute() {\r\n        val wasResetToday = counter.startTime?.let(isToday::isSatisfiedBy) ?: false\r\n        if (!wasResetToday && preferences.resetDaily) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1372", "ground_truth": "            counter.reset()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\domain\\DailyStepResetCommand.kt"}}
{"prompt": "\n import java.time.Duration\nimport com.kylecorry.sol.units.Speed\noverride fun speed(steps: Long, time: Duration): Speed {\r\n        val d = distance(steps)\r\n        val seconds = time.seconds\r\n        if (seconds <= 0) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1374", "ground_truth": "            return ZERO_SPEED\r\n        }\r\n\r\n        return Speed(d.distance / seconds, d.units, TimeUnits.Seconds)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\domain\\StrideLengthPaceCalculator.kt"}}
{"prompt": "\nval timer\nvar hasValidReading Boolean\nvar speed Speed\n private fun reset() {\r", "choices": [{"text": "timer = Timer()\r\nhasValidReading = false\r\nspeed = Speed.ZERO\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1375", "ground_truth": "        hasValidReading = false\r\n        speed = ZERO_SPEED\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\AveragePaceSpeedometer.kt"}}
{"prompt": "\nval timer\nvar lastTime\nvar lastSteps\n override fun stopImpl() {\r", "choices": [{"text": "timer.cancel()\r\n}\r\noverride fun startImpl() {\r\ntimer = Timer()\r\ntimer.schedule(object : TimerTask() {\r\noverride fun run() {\r\nval steps = getSteps()\r\nif (steps!= lastSteps) {\r\nlastSteps = steps\r\nval time = SystemClock.elapsedRealtime() - lastTime\r\nval speed = steps / time * 1000\r\nval speedString = String.format(\"%.2f\", speed)\r\nval speedText = \"Speed: $speedString steps/s\"\r\nval"}], "metadata": {"task_id": "Trail-Sense/1377", "ground_truth": "        pedometer.stop(this::onPedometerUpdate)\r\n        timer.stop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\CurrentPaceSpeedometer.kt"}}
{"prompt": "\n import java.time.Instant\nimport java.time.Duration\nimport com.kylecorry.sol.units.Speed\nprivate fun updateSpeed(){\r\n        if (lastTime == Instant.MIN) {\r\n            lastSteps = pedometer.steps\r\n            lastTime = Instant.now()\r\n            return\r\n        }\r\n\r\n        val steps = pedometer.steps - lastSteps\r\n        val duration = Duration.between(lastTime, Instant.now())\r\n        speed = paceCalculator.speed(steps.toLong(), duration)\r\n        hasValidReading = true\r\n\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1378", "ground_truth": "        lastTime = Instant.now()\r\n        lastSteps = pedometer.steps\r\n\r\n        notifyListeners()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\CurrentPaceSpeedometer.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.pedometer.domain.DistanceAlertCommand\nimport com.kylecorry.trail_sense.shared.commands.Command\nval prefs\nval counter\nval paceCalculator\nfun getDistanceAlert(): Command {\r\n        return DistanceAlertCommand(\r\n            prefs.pedometer,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1379", "ground_truth": "            counter,\r\n            paceCalculator,\r\n            DistanceAlerter(context)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\PedometerCommandFactory.kt"}}
{"prompt": "\nval LAST_RESET_KEY\nval STEPS_KEY\nval steps Long\n override fun reset(){\r\n        synchronized(this){\r\n            preferences.remove(STEPS_KEY)\r", "choices": [{"text": "}\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1381", "ground_truth": "            preferences.putInstant(LAST_RESET_KEY, Instant.now())\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\StepCounter.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.commands.Command\nimport com.kylecorry.trail_sense.R\nimport android.content.Intent\noverride fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\r\n        val flag = super.onStartCommand(intent, flags, startId)\r\n        isRunning = true\r", "choices": [{"text": "//        val intent = Intent(this, MainActivity::class.java)\r\n//        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n//        startActivity(intent)\r\n        return flag\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        isRunning = false\r\n    }\r\n\r\n    override fun onBind(intent: Intent?): IBinder? {\r\n        return null\r\n    }\r\n\r\n    override fun onUnbind(intent: Intent?): Boolean {\r\n        return super.onUnbind(intent)\r\n    }\r\n\r\n    override fun onRebind(intent: Intent?) {\r\n        super.on"}], "metadata": {"task_id": "Trail-Sense/1382", "ground_truth": "        pedometer.start(this::onPedometer)\r\n        return flag\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\StepCounterService.kt"}}
{"prompt": " import com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.sense.pedometer.Pedometer\nval counter\nval distanceAlertCommand Command\nval subsystem\noverride fun onDestroy() {\r\n        isRunning = false\r\n        pedometer.stop(this::onPedometer)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1384", "ground_truth": "        stopService(true)\r\n        super.onDestroy()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\StepCounterService.kt"}}
{"prompt": "\n import android.content.Intent\nimport android.content.Context\noverride fun onReceive(context: Context?, intent: Intent?) {\r", "choices": [{"text": "if (intent?.action == \"android.intent.action.BOOT_COMPLETED\") {\r\nval intent = Intent(context, MainActivity::class.java)\r\nintent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\ncontext?.startActivity(intent)\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1386", "ground_truth": "        context ?: return\r\n        PedometerSubsystem.getInstance(context).disable()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\StopPedometerReceiver.kt"}}
{"prompt": "\nvar startSteps Long?\nvar startLocation Coordinate?\nvar strideLength Distance?\n override fun startImpl() {\r", "choices": [{"text": "// TODO: Implement this method\r\n}\r\noverride fun stopImpl() {\r\n// TODO: Implement this method\r\n}\r\noverride fun pauseImpl() {\r\n// TODO: Implement this method\r\n}\r\noverride fun resumeImpl() {\r\n// TODO: Implement this method\r\n}\r\noverride fun setStrideLengthImpl(strideLength: Distance) {\r\n// TODO: Implement this method\r\n}\r\noverride fun setStartLocationImpl(startLocation: Coordinate) {\r\n// TODO: Implement this method\r\n}\r\noverride fun setStartStepsImpl("}], "metadata": {"task_id": "Trail-Sense/1387", "ground_truth": "        gps.start(this::onGPS)\r\n        pedometer.start(this::onPedometer)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\stride_length\\EndPointStrideLengthEstimator.kt"}}
{"prompt": "\nvar strideLength Distance?\nvar startSteps Long?\nvar startLocation Coordinate?\n override fun stopImpl() {\r", "choices": [{"text": "super.stopImpl()\r\n}\r\noverride fun startImpl() {\r\nsuper.startImpl()\r\n}\r\noverride fun setStrideLength(strideLength: Distance?) {\r\nsuper.setStrideLength(strideLength)\r\n}\r\noverride fun setStartSteps(startSteps: Long?) {\r\nsuper.setStartSteps(startSteps)\r\n}\r\noverride fun setStartLocation(startLocation: Coordinate?) {\r\nsuper.setStartLocation(startLocation)\r\n}\r\noverride fun getStrideLength(): Distance? {\r\nreturn super.get"}], "metadata": {"task_id": "Trail-Sense/1388", "ground_truth": "        gps.stop(this::onGPS)\r\n        pedometer.stop(this::onPedometer)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\stride_length\\EndPointStrideLengthEstimator.kt"}}
{"prompt": "\n private fun onGPS(): Boolean {\r\n        if (startLocation == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1389", "ground_truth": "            startLocation = gps.location\r\n        }\r\n        updateStrideLength()\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\stride_length\\EndPointStrideLengthEstimator.kt"}}
{"prompt": "\n private fun onPedometer(): Boolean {\r\n        if (startSteps == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1390", "ground_truth": "            startSteps = pedometer.steps.toLong()\r\n        }\r\n        updateStrideLength()\r\n        return true\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\stride_length\\EndPointStrideLengthEstimator.kt"}}
{"prompt": "\nvar strideLength Distance?\nvar startSteps Long?\nvar startLocation Coordinate?\n override fun reset() {\r\n        startLocation = null\r", "choices": [{"text": "startSteps = null\r\nstrideLength = null\r\n}\r\n override fun toString() = buildString {\r\nappend(\"StrideLength: \").append(strideLength?.toString()?: \"null\").append(\"\\n\")\r\nappend(\"StartSteps: \").append(startSteps?.toString()?: \"null\").append(\"\\n\")\r\nappend(\"StartLocation: \").append(startLocation?.toString()?: \"null\").append(\"\\n\")\r\n}\r\n override fun equals(other: Any?): Boolean {\r\nif (this === other) return true\r\nif (other!is StrideLength) return"}], "metadata": {"task_id": "Trail-Sense/1391", "ground_truth": "        startSteps = null\r\n        updateStrideLength()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\stride_length\\EndPointStrideLengthEstimator.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Distance\nprivate fun updateStrideLength() {\r\n        val startLocation = startLocation\r\n        val startSteps = startSteps\r\n\r\n        if (startLocation == null || startSteps == null) {\r\n            strideLength = null\r\n            return\r\n        }\r\n\r\n        val distance = gps.location.distanceTo(startLocation)\r\n        val steps = pedometer.steps - startSteps\r\n\r\n        strideLength = if (steps == 0L) {\r\n            Distance.meters(0f)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1392", "ground_truth": "        } else {\r\n            Distance.meters(distance / steps)\r\n        }\r\n        notifyListeners()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\stride_length\\EndPointStrideLengthEstimator.kt"}}
{"prompt": "\nval _steps\nval steps ITopic<Long>\nval _pace\n override fun enable() {\r", "choices": [{"text": "_steps.subscribe(this)\r\n_pace.subscribe(this)\r\n}\r\noverride fun disable() {\r\n_steps.unsubscribe(this)\r\n_pace.unsubscribe(this)\r\n}\r\noverride fun onNext(t: Long) {\r\nval pace = _pace.value\r\nval steps = _steps.value\r\nval distance = steps * pace\r\n_distance.value = distance\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1393", "ground_truth": "        prefs.pedometer.isEnabled = true\r\n        StepCounterService.start(context)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\subsystem\\PedometerSubsystem.kt"}}
{"prompt": "\nval _distance\nval _steps\nval steps ITopic<Long>\n override fun disable() {\r", "choices": [{"text": "_distance.disable()\r\n_steps.disable()\r\n}\r\noverride fun enable() {\r\n_distance.enable()\r\n_steps.enable()\r\n}\r\noverride fun reset() {\r\n_distance.reset()\r\n_steps.reset()\r\n}\r\noverride fun getDistance(): Long {\r\nreturn _distance.get()\r\n}\r\noverride fun getSteps(): Long {\r\nreturn _steps.get()\r\n}\r\noverride fun getDistanceTopic(): ITopic<Long> {\r\nreturn _distance\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1394", "ground_truth": "        prefs.pedometer.isEnabled = false\r\n        StepCounterService.stop(context)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\subsystem\\PedometerSubsystem.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.FeatureState\nprivate fun calculateState(): FeatureState {\r\n        return if (isDisabled()) {\r\n            FeatureState.Unavailable\r\n        } else if (prefs.pedometer.isEnabled) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1395", "ground_truth": "            FeatureState.On\r\n        } else {\r\n            FeatureState.Off\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\subsystem\\PedometerSubsystem.kt"}}
{"prompt": "\n import android.content.Context\n @Synchronized\r\n        fun getInstance(context: Context): PedometerSubsystem {\r\n            if (instance == null) {\r\n                instance = PedometerSubsystem(context.applicationContext)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1399", "ground_truth": "            }\r\n            return instance!!\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\infrastructure\\subsystem\\PedometerSubsystem.kt"}}
{"prompt": "\nval formatter\nval stateTopic ITopic<FeatureState>\nval subtitleTopic ITopic<String>\n override fun start() {\r\n        startForegroundService {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1401", "ground_truth": "            pedometer.enable()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\tiles\\PedometerTile.kt"}}
{"prompt": "\nval estimator\nval units\nval formatter\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nif (isFinishing) {\r\nif (units!= null) {\r\nunits.unregisterListener(listener)\r\n}\r\n}\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nif (units!= null) {\r\nunits.registerListener(listener)\r\n}\r\n}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nunits = Units.get(this)\r\nunits.register"}], "metadata": {"task_id": "Trail-Sense/1402", "ground_truth": "        super.onPause()\r\n        estimator.stop(this::onStrideLengthChanged)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\ui\\FragmentStrideLengthEstimation.kt"}}
{"prompt": " import com.kylecorry.trail_sense.R\nval units\nval formatter\nval prefs\noverride fun onResume() {\r\n        super.onResume()\r\n        if (isRunning) {\r", "choices": [{"text": "//            val time = prefs.getLong(getString(R.string.pref_last_run_time), 0)\r\n//            val timeString = if (time == 0L) getString(R.string.pref_last_run_never) else DateUtils.getRelativeTimeSpanString(time, System.currentTimeMillis(), DateUtils.MINUTE_IN_MILLIS)\r\n//            lastRun.text = getString(R.string.pref_last_run_time, timeString)\r\n            val lastRun = prefs.getLong(getString(R.string.pref_last_"}], "metadata": {"task_id": "Trail-Sense/1403", "ground_truth": "            estimator.start(this::onStrideLengthChanged)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\ui\\FragmentStrideLengthEstimation.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.permissions.requestActivityRecognition\nimport com.kylecorry.trail_sense.R\nprivate fun start(){\r\n        requestActivityRecognition { hasPermission ->\r\n            if (hasPermission){\r\n                isRunning = true\r\n                estimator.start(this::onStrideLengthChanged)\r\n            } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1404", "ground_truth": "                isRunning = false\r\n                alertNoActivityRecognitionPermission()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\ui\\FragmentStrideLengthEstimation.kt"}}
{"prompt": "\nval formatService\nval counter\nval prefs\n private fun updateStatusBar() {\r\n        binding.pedometerPlayBar.setState(\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1405", "ground_truth": "            pedometer.state.getOrNull() ?: FeatureState.Off\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\ui\\FragmentToolPedometer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nprivate fun updateAverageSpeed() {\r\n        val speed = averageSpeedometer.speed\r\n        binding.pedometerAverageSpeed.title = if (averageSpeedometer.hasValidReading) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1406", "ground_truth": "            formatService.formatSpeed(speed.speed)\r\n        } else {\r\n            getString(R.string.dash)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\ui\\FragmentToolPedometer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nprivate fun updateCurrentSpeed() {\r\n        val speed = instantSpeedometer.speed\r\n        binding.pedometerSpeed.title = if (averageSpeedometer.hasValidReading) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1407", "ground_truth": "            formatService.formatSpeed(speed.speed)\r\n        } else {\r\n            getString(R.string.dash)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\ui\\FragmentToolPedometer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.pedometer.infrastructure.StepCounter\nimport com.kylecorry.trail_sense.shared.permissions.requestActivityRecognition\nimport com.kylecorry.trail_sense.R\nprivate fun startStepCounter() {\r\n        requestActivityRecognition { hasPermission ->\r\n            if (hasPermission) {\r\n                pedometer.enable()\r\n            } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1409", "ground_truth": "                pedometer.disable()\r\n                alertNoActivityRecognitionPermission()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\ui\\FragmentToolPedometer.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport androidx.preference.Preference\nimport android.os.Bundle\noverride fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {\r\n        setPreferencesFromResource(R.xml.odometer_calibration, rootKey)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1410", "ground_truth": "        setIconColor(Resources.androidTextColorSecondary(requireContext()))\r\n        bindPreferences()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\ui\\PedometerSettingsFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.R\nval userPrefs\nvar permissionPref Preference\nval cache\noverride fun onResume() {\r\n        super.onResume()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1411", "ground_truth": "        wasEnabled = userPrefs.pedometer.isEnabled\r\n        intervalometer.interval(20)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\ui\\PedometerSettingsFragment.kt"}}
{"prompt": "\nvar permissionPref Preference\nval cache\nvar enabledPref SwitchPreferenceCompat?\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nif (enabledPref!= null) {\r\nenabledPref!!.isChecked = false\r\n}\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nif (enabledPref!= null) {\r\nenabledPref!!.isChecked = true\r\n}\r\n}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nsetSupportActionBar(toolbar)\r\nval toggle = ActionBarDrawerToggle(\r\nthis, drawer_layout, toolbar"}], "metadata": {"task_id": "Trail-Sense/1412", "ground_truth": "        intervalometer.stop()\r\n        super.onPause()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\pedometer\\ui\\PedometerSettingsFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.notes.domain.Note\noverride fun encode(value: Note): String {\r\n        val title = if (value.title != null) {\r\n            \"${value.title}\\n\\n\\n\"\r\n        } else {\r\n            \"\"\r\n        }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1414", "ground_truth": "\r\n        val contents = value.contents ?: \"\"\r\n\r\n        return \"$title$contents\"\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\qr\\infrastructure\\NoteQREncoder.kt"}}
{"prompt": " import android.view.View\nval cameraSize\nval haptics\nvar lastMessage String?\noverride fun onDestroyView() {\r\n        if (isBound) {\r\n            binding.camera.stop()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1417", "ground_truth": "        }\r\n        super.onDestroyView()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\qr\\ui\\ScanQRBottomSheet.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.qr.QR\nimport com.kylecorry.andromeda.core.tryOrNothing\nimport android.graphics.Bitmap\nprivate fun onCameraUpdate(bitmap: Bitmap) {\r\n        if (!isBound) {\r\n            bitmap.recycle()\r\n            return\r\n        }\r\n        var message: String? = null\r\n        tryOrNothing {\r\n            message = QR.decode(bitmap)\r\n            bitmap.recycle()\r\n        }\r\n        if (message != null && lastMessage != message) {\r\n            haptics.click()\r\n            lastMessage = message\r", "choices": [{"text": "\n import com.kylecorry.andromeda.qr.QR\nimport com.kylecorry.andromeda.core.tryOrNothing\nimport android.graphics.Bitmap\nprivate fun onCameraUpdate(bitmap: Bitmap) {\r\n        if (!isBound) {\r\n            bitmap.recycle()\r\n            return\r\n        }\r\n        var message: String? = null\r\n        tryOrNothing {\r\n            message = QR.decode(bitmap)\r\n            bitmap.recycle()\r\n        }\r\n        if (message!= null && lastMessage!= message) {\r\n            haptics.click()\r\n            lastMessage = message\r\n//            if (message.startsWith(\"http\")) {\r\n//                val intent = Intent(Intent.ACTION_VIEW, Uri.parse(message))\r\n//                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n//                context.startActivity(intent)\r\n//            } else {\r\n//                val intent = Intent(context, QRActivity::class.java)\r\n//                intent.putExtra(QRActivity.EXTRA_MESSAGE, message)\r\n//                context.startActivity(intent)\r\n//            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1418", "ground_truth": "            if (!onTextScanned(message)) {\r\n                dismiss()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\qr\\ui\\ScanQRBottomSheet.kt"}}
{"prompt": " import android.content.DialogInterface\nval cameraSize\nval haptics\nvar lastMessage String?\noverride fun onDismiss(dialog: DialogInterface) {\r\n        super.onDismiss(dialog)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1419", "ground_truth": "        binding.camera.stop()\r\n        haptics.off()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\qr\\ui\\ScanQRBottomSheet.kt"}}
{"prompt": "\nval files\nvar history\nval noteQREncoder\n private fun openMap(text: String) {\r", "choices": [{"text": "val intent = Intent(this, MapsActivity::class.java)\r\nintent.putExtra(\"text\", text)\r\nstartActivity(intent)\r\n}\r\nprivate fun openHistory() {\r\nval intent = Intent(this, HistoryActivity::class.java)\r\nstartActivity(intent)\r\n}\r\nprivate fun openNote() {\r\nval intent = Intent(this, NoteActivity::class.java)\r\nstartActivity(intent)\r\n}\r\nprivate fun openSettings() {\r\nval intent = Intent(this, SettingsActivity::class.java)\r\nstartActivity("}], "metadata": {"task_id": "Trail-Sense/1420", "ground_truth": "        val intent = Intents.url(text)\r\n        Intents.openChooser(requireContext(), intent, text)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\qr\\ui\\ScanQRFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.shared.permissions.requestCamera\nimport com.kylecorry.trail_sense.R\nvar qrHistoryList ListView<String>\nvar history\nval noteQREncoder\noverride fun onResume() {\r\n        super.onResume()\r\n        updateHistoryList()\r\n        requestCamera { hasPermission ->\r\n            if (hasPermission) {\r\n                startCamera()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1422", "ground_truth": "            } else {\r\n                alertNoCameraPermission()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\qr\\ui\\ScanQRFragment.kt"}}
{"prompt": " import android.util.Size\nval pickMediaLoadingIndicator\nvar qrHistoryList ListView<String>\nval cameraSize\nprivate fun startCamera() {\r\n        if (!isBound) return\r\n        binding.camera.start(cameraSize) {\r", "choices": [{"text": "//            binding.camera.start(Size(1920, 1080)) {\r\n                binding.camera.start(Size(1280, 720)) {\r\n                    binding.camera.start(Size(640, 480)) {\r\n                        binding.camera.start(Size(320, 240)) {\r\n                            binding.camera.start(Size(160, 120)) {\r\n                                binding.camera.start(Size(80, 60)) {\r\n                                    binding.camera.start(Size(40"}], "metadata": {"task_id": "Trail-Sense/1423", "ground_truth": "            onCameraUpdate(it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\qr\\ui\\ScanQRFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.R\nval noteQREncoder\nval pickMediaLoadingIndicator\nval files\nprivate fun addReading(text: String) {\r\n        if (history.contains(text)) {\r\n            history.remove(text)\r\n        }\r\n\r\n        history.add(0, text)\r\n\r\n        while (history.size > 10) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1424", "ground_truth": "            history.removeLast()\r\n        }\r\n\r\n        updateHistoryList()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\qr\\ui\\ScanQRFragment.kt"}}
{"prompt": "\nvar qrHistoryList ListView<String>\nvar history\nval pickMediaLoadingIndicator\n private fun updateHistoryList(scrollToTop: Boolean = true) {\r\n        qrHistoryList.setData(if (history.isEmpty()) listOf(\"\") else history)\r\n        if (scrollToTop) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1425", "ground_truth": "            qrHistoryList.scrollToPosition(0, true)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\qr\\ui\\ScanQRFragment.kt"}}
{"prompt": "\nval pickMediaLoadingIndicator\nval noteQREncoder\nvar qrHistoryList ListView<String>\n override fun onPause() {\r\n        super.onPause()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1427", "ground_truth": "        binding.camera.stop()\r\n        haptics.off()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\qr\\ui\\ScanQRFragment.kt"}}
{"prompt": "\n import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r", "choices": [{"text": "}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n}\r\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\noverride fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)\r\n}\r\noverride fun onViewStateRestored(savedInstanceState: Bundle?) {\r\n        super.onViewStateRestored(savedInstanceState)\r\n}\r\noverride fun onStart() {\r\n        super"}], "metadata": {"task_id": "Trail-Sense/1428", "ground_truth": "        binding.qrCode.clipToOutline = true\r\n        updateUI()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\qr\\ui\\ViewQRBottomSheet.kt"}}
{"prompt": "\nval prefs\nvar ruler RulerView?\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nprefs.unregisterOnSharedPreferenceChangeListener(this)\r\n}\r\noverride fun onSharedPreferenceChanged(sharedPreferences: SharedPreferences?, key: String?) {\r\nif (key == \"ruler_color\") {\r\nruler?.setRulerColor(prefs.getInt(\"ruler_color\", 0))\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1431", "ground_truth": "        super.onDestroy()\r\n        removeRuler()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\ruler\\quickactions\\QuickActionRuler.kt"}}
{"prompt": " import com.kylecorry.trail_sense.R\nval formatService\nvar rulerUnits\nval mapPrecision\noverride fun onResume() {\r\n        super.onResume()\r\n        binding.ruler.highlight = null\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1433", "ground_truth": "        units = prefs.distanceUnits\r\n        binding.measurement.text = \"\"\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\ruler\\ui\\RulerFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.CustomUiUtils.getPrimaryColor\nimport com.kylecorry.andromeda.core.system.Screen\nimport com.kylecorry.andromeda.core.system.Resources\nimport android.graphics.Color\noverride fun setup() {\r\n        dpi = Screen.ydpi(context)\r\n        scale = prefs.navigation.rulerScale\r\n        lineColor = Resources.androidTextColorPrimary(context)\r\n        highlightColor = Resources.getPrimaryColor(context)\r\n        offset = dp(8f)\r\n        wholeSize = dp(40f)\r\n        halfSize = dp(24f)\r\n        quarterSize = dp(12f)\r\n        eighthSize = dp(6f)\r\n        tenthSize = dp(12f)\r\n\r", "choices": [{"text": "}\n\noverride fun draw(canvas: Canvas, x: Float, y: Float, width: Float, height: Float) {\r\n        val scale = prefs.navigation.rulerScale\r\n        val offset = dp(8f)\r\n        val wholeSize = dp(40f)\r\n        val halfSize = dp(24f)\r\n        val quarterSize = dp(12f)\r\n        val eighthSize = dp(6f)\r\n        val tenthSize = dp(12f)\r\n        val lineColor = Resources.androidTextColorPrimary(context)\r\n        val highlightColor = Resources.getPrimaryColor"}], "metadata": {"task_id": "Trail-Sense/1436", "ground_truth": "        lineThickness = dp(1f)\r\n        highlightLineThickness = dp(2f)\r\n\r\n        textSize(sp(12f))\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\ruler\\ui\\RulerView.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Distance\nimport android.annotation.SuppressLint\n @SuppressLint(\"ClickableViewAccessibility\")\r\n    fun setOnTouchListener(listener: (Distance) -> Unit) {\r\n        setOnTouchListener { _, event ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1437", "ground_truth": "            val distance = getDistance(event.y)\r\n            listener.invoke(distance)\r\n            true\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\ruler\\ui\\RulerView.kt"}}
{"prompt": " import com.kylecorry.sol.units.Distance\nimport android.graphics.Color\nvar lineThickness Float\nvar lineColor Int\nvar highlightLineThickness Float\nprivate fun drawLine(distance: Distance, lineWidth: Float, lineColor: Int, lineWeight: Float) {\r\n        val y = getPosition(distance)\r\n        stroke(lineColor)\r", "choices": [{"text": "//        strokeWeight(lineWeight)\r\n        strokeWeight(lineWidth)\r\n        line(0f, y, width.toFloat(), y)\r\n    }\n\nprivate fun drawHighlightLine(distance: Distance, lineWidth: Float, lineColor: Int, lineWeight: Float) {\r\n        val y = getPosition(distance)\r\n        stroke(lineColor)\r\n//        strokeWeight(lineWeight)\r\n        strokeWeight(lineWidth)\r\n        line(0f, y, width.toFloat(), y)\r\n    }\n\nprivate fun drawHighlightLine(distance: Distance, lineWidth: Float, lineColor: Int, lineWeight"}], "metadata": {"task_id": "Trail-Sense/1440", "ground_truth": "        strokeWeight(lineWeight)\r\n        line(0f, y, lineWidth, y)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\ruler\\ui\\RulerView.kt"}}
{"prompt": "\n import java.time.Duration\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.units.Bearing\nimport com.kylecorry.sol.time.Time.atEndOfDay\nimport com.kylecorry.sol.time.Time\nfun getSolarEnergy(\r\n        location: Coordinate,\r\n        tilt: Float,\r\n        azimuth: Bearing,\r\n        duration: Duration = Duration.ofDays(1),\r\n        restrictToToday: Boolean = false\r\n    ): Float {\r\n        val time = timeProvider.getTime()\r\n        var end = time.plus(duration)\r\n        if (end.toLocalDate() != time.toLocalDate() && restrictToToday) {\r\n            end = time.atEndOfDay()\r\n        }\r\n        return getSolarRadiation(\r\n            time,\r\n            end,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1445", "ground_truth": "            location,\r\n            tilt,\r\n            azimuth\r\n        ).toFloat()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\solarpanel\\domain\\SolarPanelService.kt"}}
{"prompt": "\n import kotlin.math.max\nimport java.time.Duration\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.units.Bearing\nfun getBestPosition(\r\n        location: Coordinate,\r\n        maxDuration: Duration,\r\n        restrictToToday: Boolean = false\r\n    ): Pair<Float, Bearing> {\r\n        val duration = if (maxDuration <= Duration.ofMinutes(15).plusSeconds(5)) {\r\n            Duration.ofMinutes(15).plusSeconds(15)\r\n        } else {\r\n            maxDuration\r\n        }\r\n\r\n        return getBestPosition(\r\n            location,\r\n            maxDuration = duration,\r\n            energyResolution = if (duration < Duration.ofHours(6)) Duration.ofMinutes(15) else Duration.ofMinutes(\r", "choices": [{"text": "                30\r\n            ),\r\n            restrictToToday = restrictToToday\r\n        )\r\n    }\r\n\r\n    fun getBestPosition(\r\n        location: Coordinate,\r\n        maxDuration: Duration,\r\n        energyResolution: Duration,\r\n        restrictToToday: Boolean = false\r\n    ): Pair<Float, Bearing> {\r\n        val start = System.currentTimeMillis()\r\n        val end = start + maxDuration.toMillis()\r\n        val energy = Energy(location, start, end, energyResolution)\r\n        val best = energy.getBestPosition()\r\n        val duration = Duration.ofMillis(System.currentTimeMillis() - start)\r\n        return Pair(best.first, best"}], "metadata": {"task_id": "Trail-Sense/1446", "ground_truth": "                30\r\n            ),\r\n            restrictToToday = restrictToToday\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\solarpanel\\domain\\SolarPanelService.kt"}}
{"prompt": " import com.kylecorry.trail_sense.R\nval formatService\nval compass\nvar position Pair<Float, Bearing>?\noverride fun onResume() {\r\n        super.onResume()\r\n        if (position == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1448", "ground_truth": "            gps.start(this::onGPSUpdate)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\solarpanel\\ui\\FragmentToolSolarPanel.kt"}}
{"prompt": "\nval declination\nval solarPanelService\nvar position Pair<Float, Bearing>?\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nposition = null\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nposition = null\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nposition = null\r\n}\r\noverride fun onMapReady(googleMap: GoogleMap) {\r\nmap = googleMap\r\nmap.uiSettings.isMyLocationButtonEnabled = false\r\nmap.uiSettings.isZoomControlsEnabled = false\r\nmap.uiSettings.isCompassEnabled = false\r\nmap.uiSettings."}], "metadata": {"task_id": "Trail-Sense/1449", "ground_truth": "        super.onPause()\r\n        gps.stop(this::onGPSUpdate)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\solarpanel\\ui\\FragmentToolSolarPanel.kt"}}
{"prompt": "\n private fun onGPSUpdate(): Boolean {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1450", "ground_truth": "        updatePosition()\r\n        return false\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\solarpanel\\ui\\FragmentToolSolarPanel.kt"}}
{"prompt": "\n import java.time.Duration\nimport kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun updatePosition() {\r\n        inBackground {\r\n            withContext(Dispatchers.IO) {\r\n                position = solarPanelService.getBestPosition(\r\n                    gps.location,\r\n                    if (alignToRestOfDay) Duration.ofDays(1) else nowDuration,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1451", "ground_truth": "                    restrictToToday = alignToRestOfDay\r\n                )\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\solarpanel\\ui\\FragmentToolSolarPanel.kt"}}
{"prompt": " import com.kylecorry.trail_sense.R\nval formatService\nval location\nval sensorService\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nformatService = FormatService(this)\r\nlocation = LocationService(this)\r\nsensorService = SensorService(this)\r\n}\r\noverride fun onPause() {\r\nsuper.onPause()\r\nformatService.stop()\r\nlocation.stop()\r\nsensorService.stop()\r\n}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1455", "ground_truth": "        super.onResume()\r\n        intervalometer.interval(200)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\temperature_estimation\\ui\\TemperatureEstimationFragment.kt"}}
{"prompt": "\nval location\nval temperatureUnits\nval formatService\n override fun onPause() {\r\n        super.onPause()\r\n        intervalometer.stop()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1456", "ground_truth": "        binding.tempEstBaseElevation.pause()\r\n        binding.tempEstDestElevation.pause()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\temperature_estimation\\ui\\TemperatureEstimationFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.Units\nimport com.kylecorry.sol.units.TemperatureUnits\nimport com.kylecorry.sol.units.Temperature\nprivate fun getBaseTemperature(): Temperature? {\r\n        val amount = binding.tempEstBaseTemperature.amount?.toFloat() ?: return null\r\n        val units = binding.tempEstBaseTemperature.unit as TemperatureUnits\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1459", "ground_truth": "        val uiTemp = Temperature(amount, units)\r\n        return uiTemp.convertTo(TemperatureUnits.C)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\temperature_estimation\\ui\\TemperatureEstimationFragment.kt"}}
{"prompt": " import com.kylecorry.sol.units.Distance\nval location\nval formatService\nval temperatureUnits\nprivate fun getBaseElevation(): Distance? {\r", "choices": [{"text": "return location?.elevation?.toDistance(temperatureUnits)\n}\n"}], "metadata": {"task_id": "Trail-Sense/1460", "ground_truth": "        val distance = binding.tempEstBaseElevation.elevation ?: return null\r\n        return distance.meters()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\temperature_estimation\\ui\\TemperatureEstimationFragment.kt"}}
{"prompt": " import com.kylecorry.sol.units.Distance\nval formatService\nval location\nval sensorService\nprivate fun getDestElevation(): Distance? {\r", "choices": [{"text": "val elevation = sensorService.getElevation()\r\nif (elevation!= null) {\r\nreturn Distance(elevation, Distance.Units.Meters)\r\n}\r\nreturn null\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1461", "ground_truth": "        val distance = binding.tempEstDestElevation.elevation ?: return null\r\n        return distance.meters()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\temperature_estimation\\ui\\TemperatureEstimationFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nimport com.kylecorry.sol.science.oceanography.TideType\nsuspend fun execute(table: TideTable): TideType? = onDefault {\r", "choices": [{"text": "   table.tideType\r}\r<file_sep>/app/src/main/java/com/kylecorry/trail_sense/tools/tides/domain/TideTable.kt\npackage com.kylecorry.trail_sense.tools.tides.domain\n\nimport com.kylecorry.sol.science.oceanography.TideType\n\ndata class TideTable(\n    val tideType: TideType,\n    val tideHeight: Float,\n    val tideTime: Float,\n    val tideTimeOffset: Float,\n    val"}], "metadata": {"task_id": "Trail-Sense/1463", "ground_truth": "        val now = timeProvider.getTime()\r\n        tideService.getCurrentTide(table, now)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\domain\\commands\\CurrentTideTypeCommand.kt"}}
{"prompt": "\n import java.time.LocalDate\nimport com.kylecorry.trail_sense.tools.tides.ui.DailyTideData\nimport com.kylecorry.trail_sense.tools.tides.domain.TideTable\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nsuspend fun execute(table: TideTable, date: LocalDate): DailyTideData = onDefault {\r\n        val levels = tideService.getWaterLevels(table, date)\r\n        val tides = tideService.getTides(table, date)\r", "choices": [{"text": "//        val tide = tideService.getTide(table, date)\r\n        val waterLevel = tideService.getWaterLevel(table, date)\r\n        val waterLevelChange = tideService.getWaterLevelChange(table, date)\r\n        val waterLevelChangePercent = tideService.getWaterLevelChangePercent(table, date)\r\n        val waterLevelChangePercentChange = tideService.getWaterLevelChangePercentChange(table, date)\r\n        val waterLevelChangePercentChangePercent = tideService.getWaterLevelChangePercentChangePercent(table, date)\r\n        val waterLevelChange"}], "metadata": {"task_id": "Trail-Sense/1464", "ground_truth": "        val range = tideService.getRange(table)\r\n        DailyTideData(levels, tides, range)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\domain\\commands\\DailyTideCommand.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nimport com.kylecorry.andromeda.core.coroutines.onIO\nsuspend fun execute(): TideTable? = onIO {\r", "choices": [{"text": "//    val tideTable = TideTable(\r\n//        \"https://tidesandcurrents.noaa.gov/api/datagetter?product=predictions&application=NOS.COOPS.TAC.WL&begin_date=20200101&end_date=20200101&datum=MLLW&station=8724950&time_zone=lst_ldt&units=english&format=json\"\r\n//    )\r\n//    tideTable.load()\r\n//   "}], "metadata": {"task_id": "Trail-Sense/1465", "ground_truth": "        val loader = TideLoaderFactory().getTideLoader(context)\r\n        loader.getTideTable()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\domain\\commands\\LoadTideTableCommand.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nval repo\nsuspend fun execute(table: TideTable): TideTable {\r\n        val newTable = table.copy(isVisible = !table.isVisible)\r", "choices": [{"text": " import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nval repo\nsuspend fun execute(table: TideTable): TideTable {\r\n        val newTable = table.copy(isVisible =!table.isVisible)\r\nrepo.update(newTable)\r\n        return newTable\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1466", "ground_truth": "        onIO {\r\n            repo.addTideTable(newTable)\r\n        }\r\n        return newTable\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\domain\\commands\\ToggleTideTableVisibilityCommand.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.kylecorry.trail_sense.tools.tides.domain.TideTable\noverride suspend fun getTideTable(): TideTable? = withContext(Dispatchers.IO) {\r", "choices": [{"text": "val tideTable = TideTable(\r\ntideHeight = 1.0,\r\ntideTime = 1.0,\r\ntideDirection = 1.0,\r\ntideType = 1.0,\r\ntideQuality = 1.0,\r\ntideQualityText = 1.0,\r\ntideQualityIcon = 1.0,\r\ntideQualityColor = 1.0,\r\ntideQualityTextColor = 1.0,\r\ntideQualityTextColor = 1.0,\r\n"}], "metadata": {"task_id": "Trail-Sense/1467", "ground_truth": "        val tides = tideRepo.getTideTables()\r\n        strategy.getTide(tides)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\domain\\loading\\TideLoaderImpl.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nimport com.kylecorry.sol.math.Range\noverride fun getRange(table: TideTable): Range<Float> {\r\n        val lows = table.tides.filter { !it.isHigh }.mapNotNull { it.height }\r\n        val highs = table.tides.filter { it.isHigh }.mapNotNull { it.height }\r\n        var min = lows.minByOrNull { it }\r\n        var max = highs.maxByOrNull { it }\r\n\r\n        if (min == null){\r\n            min = (max ?: 1f) - 1f\r\n        }\r\n\r\n        if (max == null){\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1468", "ground_truth": "            max = min + 1f\r\n        }\r\n\r\n        return Range(min, max)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\domain\\range\\TideTableRangeCalculator.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.tides.domain.TideTable\noverride suspend fun getTide(tides: List<TideTable>): TideTable? {\r\n        for (strategy in strategies) {\r\n            val tide = strategy.getTide(tides)\r\n            if (tide != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1469", "ground_truth": "                return tide\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\domain\\selection\\FallbackTideSelectionStrategy.kt"}}
{"prompt": " import java.time.ZonedDateTime\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.science.oceanography.Tide\nval maxSearchIterations\nval ocean\noverride fun getWaterLevel(table: TideTable, time: ZonedDateTime): Float {\r", "choices": [{"text": "val tide = Tide.get(time)\r\nval tideTime = Time.toUnixTime(tide.time)\r\nval tideIndex = table.getTideIndex(tideTime)\r\nval tideHeight = table.getTideHeight(tideIndex)\r\nval tideTime2 = Time.toUnixTime(tide.time.plusSeconds(1))\r\nval tideIndex2 = table.getTideIndex(tideTime2)\r\nval tideHeight2 = table.getTideHeight(tideIndex2)\r\n"}], "metadata": {"task_id": "Trail-Sense/1473", "ground_truth": "        val strategy = TideTableWaterLevelCalculator(table)\r\n        return strategy.calculate(time)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\domain\\TideService.kt"}}
{"prompt": "\n import java.time.ZoneId\nimport java.time.LocalDate\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.time.Time\nimport com.kylecorry.sol.science.oceanography.Tide\noverride fun getWaterLevels(table: TideTable, date: LocalDate): List<Reading<Float>> {\r\n        return Time.getReadings(\r\n            date,\r\n            ZoneId.systemDefault(),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1474", "ground_truth": "            Duration.ofMinutes(10)\r\n        ) {\r\n            getWaterLevel(table, it)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\domain\\TideService.kt"}}
{"prompt": "\n import com.kylecorry.sol.science.oceanography.waterlevel.TideClockWaterLevelCalculator\nimport com.kylecorry.sol.science.oceanography.waterlevel.IWaterLevelCalculator\nimport com.kylecorry.sol.science.oceanography.Tide\nprivate fun getPastFutureCalculator(tide: Tide): IWaterLevelCalculator {\r\n        val amplitude = (if (!tide.isHigh) -1 else 1) * getAmplitude()\r\n        val z0 = tide.height!! - amplitude\r\n        return TideClockWaterLevelCalculator(\r\n            tide,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1478", "ground_truth": "            table.principalFrequency,\r\n            getAmplitude(),\r\n            z0\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\domain\\waterlevel\\TideTableWaterLevelCalculator.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nimport com.kylecorry.sol.science.oceanography.Tide\noverride suspend fun getTideTables(): List<TideTable> {\r\n        val tableEntities = dao.getTideTables()\r\n        val tables = mutableListOf<TideTable>()\r\n\r\n        for (entity in tableEntities) {\r\n            val rows = dao.getTideTableRows(entity.id).map { it.toTide() }.sortedBy { it.time }\r", "choices": [{"text": "//            val rows = dao.getTideTableRows(entity.id).map { it.toTide() }.sortedBy { it.time }\r\n            tables.add(TideTable(entity.id, entity.name, rows))\r\n        }\r\n\r\n        return tables\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1481", "ground_truth": "            tables.add(entity.toTable(rows))\r\n        }\r\n\r\n        return tables\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\infrastructure\\persistence\\TideTableRepo.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nimport com.kylecorry.sol.science.oceanography.Tide\nvar instance TideTableRepo?\noverride suspend fun deleteTideTable(table: TideTable) {\r", "choices": [{"text": "}\noverride suspend fun getTideTable(id: String): TideTable? {\r\n}\noverride suspend fun getTideTables(): List<TideTable> {\r\n}\noverride suspend fun saveTideTable(table: TideTable) {\r\n}\n<file_sep>/app/src/main/java/com/kylecorry/trail_sense/navigation/domain/NavigationService.kt\npackage com.kylecorry.trail_sense.navigation.domain\n\nimport com.kylecorry.trail_sense.navigation.infrastructure.NavigationRepo\n"}], "metadata": {"task_id": "Trail-Sense/1484", "ground_truth": "        deleteTides(table.id)\r\n        dao.delete(TideTableEntity.from(table))\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\infrastructure\\persistence\\TideTableRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nimport com.kylecorry.trail_sense.main.persistence.AppDatabase\nimport com.kylecorry.sol.science.oceanography.Tide\nimport android.content.Context\n @Synchronized\r\n        fun getInstance(context: Context): TideTableRepo {\r\n            if (instance == null) {\r\n                instance = TideTableRepo(AppDatabase.getInstance(context).tideTableDao())\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1485", "ground_truth": "            }\r\n            return instance!!\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\infrastructure\\persistence\\TideTableRepo.kt"}}
{"prompt": "\n import com.kylecorry.sol.science.oceanography.Tide\nfun toTide(): Tide {\r\n        return Tide(\r", "choices": [{"text": "-            height = height,\r\n-            time = time,\r\n-            type = type,\r\n-            name = name\r\n+            height = height,\r\n+            time = time,\r\n+            type = type,\r\n+            name = name,\r\n+            id = id\r\n         )\r\n     }\r\n }\r\n"}], "metadata": {"task_id": "Trail-Sense/1486", "ground_truth": "            time.atZone(ZoneId.systemDefault()),\r\n            isHigh,\r\n            heightMeters\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\infrastructure\\persistence\\TideTableRowEntity.kt"}}
{"prompt": "\n import com.kylecorry.sol.science.oceanography.Tide\nimport androidx.room.Entity\nfun from(id: Long, tableId: Long, tide: Tide): TideTableRowEntity {\r\n            return TideTableRowEntity(\r\n                id,\r\n                tableId,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1487", "ground_truth": "                tide.time.toInstant(),\r\n                tide.isHigh,\r\n                tide.height\r\n            )\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\infrastructure\\persistence\\TideTableRowEntity.kt"}}
{"prompt": " import android.os.Bundle\nval units\nval formatService\nvar tides\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nunits = findViewById(R.id.units)\r\nformatService = findViewById(R.id.formatService)\r\ntides = findViewById(R.id.tides)\r\nunits.setOnClickListener {\r\nval intent = Intent(this, UnitsActivity::class.java)\r\nstartActivity(intent)\r\n}\r\nformatService.setOnClickListener {\r\nval intent = Intent(this, FormatServiceActivity::class.java)\r\nstartActivity(intent)\r\n}\r\ntides"}], "metadata": {"task_id": "Trail-Sense/1488", "ground_truth": "        super.onCreate(savedInstanceState)\r\n        editingId = arguments?.getLong(\"edit_tide_id\") ?: 0L\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\CreateTideFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.R\nval formatService\nval units\nvar backCallback OnBackPressedCallback?\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nbackCallback = object : OnBackPressedCallback(true) {\r\noverride fun handleOnBackPressed() {\r\nfinish()\r\n}\r\n}\r\nrequireActivity().onBackPressedDispatcher.addCallback(backCallback!!)\r\n}\r\noverride fun onPause() {\r\nsuper.onPause()\r\nrequireActivity().onBackPressedDispatcher.removeCallback(backCallback!!)\r\n}\r\noverride fun onCreateView(\r\ninflater: LayoutInflater,\r\ncontainer: ViewGroup?,\r\nsavedInstanceState: Bundle?\r\n): View? {"}], "metadata": {"task_id": "Trail-Sense/1489", "ground_truth": "        super.onResume()\r\n        intervalometer.interval(20)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\CreateTideFragment.kt"}}
{"prompt": "\nvar editingId Long\nval units\nvar editingTide TideTable?\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nif (editingId!= null) {\r\neditingTide?.let {\r\nit.id = editingId\r\n}\r\n}\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nif (editingId!= null) {\r\neditingTide = tideRepository.getTide(editingId)\r\n}\r\n}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_tide_editor)\r\nval toolbar ="}], "metadata": {"task_id": "Trail-Sense/1490", "ground_truth": "        intervalometer.stop()\r\n        super.onPause()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\CreateTideFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.science.oceanography.TideType\nimport com.kylecorry.andromeda.views.list.ResourceListIcon\nimport com.kylecorry.andromeda.views.list.ListIcon\nprivate fun getIcon(tide: TideTable, type: TideType?): ListIcon {\r\n        return ResourceListIcon(\r\n            if (tide.isVisible) getTideIcon(type) else R.drawable.ic_not_visible,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1492", "ground_truth": "            if (tide.isVisible) null else Resources.androidTextColorSecondary(context)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\mappers\\TideTableListItemMapper.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nprivate fun getDescription(tide: TideTable): String {\r\n        return context.resources.getQuantityString(\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1494", "ground_truth": "            R.plurals.tides_entered_count,\r\n            tide.tides.size,\r\n            tide.tides.size\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\mappers\\TideTableListItemMapper.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nprivate fun getTideTitle(tide: TideTable): String {\r\n        return tide.name\r\n            ?: if (tide.location != null) formatter.formatLocation(tide.location) else context.getString(\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nprivate fun getTideTitle(tide: TideTable): String {\r\n        return tide.name\r\n           ?: if (tide.location!= null) formatter.formatLocation(tide.location) else context.getString(\r\n"}], "metadata": {"task_id": "Trail-Sense/1495", "ground_truth": "                android.R.string.untitled\r\n            )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\mappers\\TideTableListItemMapper.kt"}}
{"prompt": " import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.math.Range\nval level\nval levelColor\nval highlight\nfun plot(data: List<Reading<Float>>, range: Range<Float>) {\r\n        val first = data.firstOrNull()?.time\r\n        startTime = first\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1496", "ground_truth": "        level.data = convert(data, range)\r\n        chart.invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TideChart.kt"}}
{"prompt": " import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.math.Range\nval highlight\nval level\nval levelColor\nfun highlight(point: Reading<Float>, range: Range<Float>) {\r\n        val value = convert(listOf(point), range)\r", "choices": [{"text": "}\nfun level(point: Reading<Float>, range: Range<Float>) {\r\n        val value = convert(listOf(point), range)\r\n}\nfun levelColor(point: Reading<Float>, range: Range<Float>) {\r\n        val value = convert(listOf(point), range)\r\n}\n<file_sep>/app/src/main/java/com/kylecorry/trail_sense/shared/sensors/SensorService.kt\npackage com.kylecorry.trail_sense.shared.sensors\n\nimport android.content.Context\nimport android.hardware.Sensor"}], "metadata": {"task_id": "Trail-Sense/1497", "ground_truth": "        highlight.data = value\r\n        chart.invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TideChart.kt"}}
{"prompt": "\nval level\nval levelColor\nval highlight\n fun removeHighlight() {\r", "choices": [{"text": "if (highlight!= null) {\r\nhighlight.remove()\r\nhighlight = null\r\n}\r\n}\r\nfun highlight(color: Int) {\r\nremoveHighlight()\r\nhighlight = getView().background.mutate().apply {\r\nsetColorFilter(color, PorterDuff.Mode.SRC_IN)\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}"}], "metadata": {"task_id": "Trail-Sense/1498", "ground_truth": "        highlight.data = emptyList()\r\n        chart.invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TideChart.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.math.Vector2\nimport com.kylecorry.sol.math.Range\nimport com.kylecorry.andromeda.views.chart.Chart\nprivate fun convert(readings: List<Reading<Float>>, range: Range<Float>): List<Vector2> {\r\n        return Chart.getDataFromReadings(readings, startTime) {\r", "choices": [{"text": "-            Vector2(it.time.toMillis(), it.value)\r\n+            Vector2(it.time.toMillis(), it.value.toFloat())\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1499", "ground_truth": "            norm(it, range.start - 0.5f, range.end + 0.5f)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TideChart.kt"}}
{"prompt": "\n import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        binding.tideList.emptyView = binding.tidesEmptyText\r\n\r\n        refreshTides()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1500", "ground_truth": "\r\n        binding.addBtn.setOnClickListener {\r\n            createTide()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TideListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.alerts.Alerts\nprivate fun deleteTide(tide: TideTable) {\r\n        Alerts.dialog(\r\n            requireContext(),\r\n            getString(R.string.delete_tide_prompt),\r\n            getTideTitle(tide)\r\n        ) { cancelled ->\r\n            if (!cancelled) {\r\n                inBackground {\r\n                    onIO {\r\n                        tideRepo.deleteTideTable(tide)\r\n                    }\r\n\r", "choices": [{"text": "                   requireActivity().runOnUiThread {\r\n                       tideRepo.getTideTables().observe(viewLifecycleOwner, Observer {\r\n                           tides.value = it\r\n                       })\r\n                   }\r\n                }\r\n            }\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "Trail-Sense/1501", "ground_truth": "                    refreshTides()\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TideListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.tides.domain.commands.ToggleTideTableVisibilityCommand\nimport com.kylecorry.trail_sense.tools.tides.domain.TideTable\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun toggleVisibility(tide: TideTable){\r\n        inBackground {\r\n            ToggleTideTableVisibilityCommand(requireContext()).execute(tide)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1503", "ground_truth": "            refreshTides()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TideListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nimport com.kylecorry.trail_sense.R\nimport androidx.navigation.fragment.findNavController\nprivate fun editTide(tide: TideTable) {\r\n        findNavController().navigate(\r\n            R.id.action_tideList_to_createTide,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1504", "ground_truth": "            bundleOf(\"edit_tide_id\" to tide.id)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TideListFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nval tideRepo\nval tideTypeCommand\nval formatService\nprivate fun selectTide(tide: TideTable) {\r", "choices": [{"text": "tideTypeCommand.execute(tide.type)\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1505", "ground_truth": "        prefs.tides.lastTide = tide.id\r\n        findNavController().navigateUp()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TideListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nprivate fun getTideTitle(tide: TideTable): String {\r\n        return tide.name\r\n            ?: if (tide.location != null) formatService.formatLocation(tide.location) else getString(\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.tools.tides.domain.TideTable\nprivate fun getTideTitle(tide: TideTable): String {\r\n        return tide.name\r\n           ?: if (tide.location!= null) formatService.formatLocation(tide.location) else getString(\r\n"}], "metadata": {"task_id": "Trail-Sense/1506", "ground_truth": "                android.R.string.untitled\r\n            )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TideListFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.science.oceanography.Tide\nimport androidx.navigation.fragment.findNavController\nimport androidx.core.view.isVisible\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        chart = TideChart(binding.chart)\r\n\r\n        binding.tideTitle.rightButton.setOnClickListener {\r\n            findNavController().navigate(R.id.action_tides_to_tideList)\r\n        }\r\n\r\n        binding.loading.isVisible = true\r\n\r\n        binding.tideListDate.setOnDateChangeListener {\r", "choices": [{"text": "                                                                    _, year, month, dayOfMonth ->\r\n            val date = Date(year, month, dayOfMonth)\r\n            binding.tideListDate.text = date.format(DateFormat.FULL)\r\n            binding.loading.isVisible = true\r\n            viewModel.getTides(date)\r\n        }\r\n\r\n        viewModel.tides.observe(viewLifecycleOwner, Observer {\r\n            chart.setTides(it)\r\n            binding.loading.isVisible = false\r\n        })\r\n\r\n        viewModel.error.observe(viewLifecycleOwner, Observer {\r\n            binding.loading.isVisible = false\r\n            binding.error.isVisible = true\r\n        })\r\n    }\n}\n"}], "metadata": {"task_id": "Trail-Sense/1507", "ground_truth": "            onDisplayDateChanged()\r\n        }\r\n\r\n        scheduleUpdates(20)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TidesFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.science.oceanography.Tide\nprivate fun onTideLoaded() {\r\n        if (!isBound) return\r\n        val tide = table ?: return\r\n        binding.tideTitle.subtitle.text = tide.name\r\n            ?: if (tide.location != null) formatService.formatLocation(tide.location) else getString(\r\n                android.R.string.untitled\r\n            )\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.science.oceanography.Tide\nprivate fun onTideLoaded() {\r\n        if (!isBound) return\r\n        val tide = table?: return\r\n        binding.tideTitle.subtitle.text = tide.name\r\n           ?: if (tide.location!= null) formatService.formatLocation(tide.location) else getString(\r\n                android.R.string.untitled\r\n            )\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1508", "ground_truth": "        inBackground {\r\n            refreshDaily()\r\n            refreshCurrent()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TidesFragment.kt"}}
{"prompt": " import com.kylecorry.andromeda.fragments.inBackground\nvar daily DailyTideData?\nval tideService\nval formatService\nprivate fun onDisplayDateChanged() {\r\n        if (!isBound) return\r\n        inBackground {\r", "choices": [{"text": "//            val date = displayDate.value?: return@inBackground\r\n            val date = displayDate.value?: return@inBackground\r\n            val tide = tideService.getTide(date)\r\n            val formatted = formatService.formatTide(tide)\r\n            daily.value = formatted\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1509", "ground_truth": "            refreshDaily()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TidesFragment.kt"}}
{"prompt": "\nvar daily DailyTideData?\nval tideService\nval mapper\n private fun updateDaily() {\r\n        if (!isBound) return\r\n        val daily = daily ?: return\r", "choices": [{"text": "\nvar daily DailyTideData?\nval tideService\nval mapper\n private fun updateDaily() {\r\n        if (!isBound) return\r\n        val daily = daily?: return\r\n//        val daily = tideService.getDaily(lat, lon)\r\n        if (daily == null) return\r\n        daily.let {\r\n            val dailyData = it.data\r\n            val dailyData2 = dailyData.map { it.copy(time = it.time.toLong()) }\r\n            dailyData.clear()\r\n            dailyData.addAll(dailyData2)\r\n            dailyData.sortBy { it.time }\r\n            daily.data = dailyData\r\n            daily.let {\r\n                daily.data = dailyData\r\n                daily.let {\r\n                    daily.data = dailyData\r\n                    daily.let {\r\n                        daily."}], "metadata": {"task_id": "Trail-Sense/1510", "ground_truth": "        chart.plot(daily.waterLevels, daily.waterLevelRange)\r\n        updateTideList(daily.tides)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TidesFragment.kt"}}
{"prompt": "\n import com.kylecorry.sol.science.oceanography.Tide\nprivate fun updateTideList(tides: List<Tide>) {\r\n        val updatedTides = tides.map {\r\n            val isEstimated = this.table?.tides?.firstOrNull { t -> t.time == it.time } == null\r\n\r\n            if (isEstimated) {\r\n                it.copy(height = null)\r\n            } else {\r\n                it\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1511", "ground_truth": "            }\r\n        }\r\n\r\n        binding.tideList.setItems(updatedTides, mapper)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TidesFragment.kt"}}
{"prompt": "\nvar table TideTable?\nval units\nvar current CurrentTideData?\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nif (table!= null) {\r\ntable!!.close()\r\n}\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nif (table == null) {\r\ntable = TideTable(this)\r\n}\r\n}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById(R.id.button) as Button\r\nbutton.setOnClickListener {\r\nval intent = Intent(this"}], "metadata": {"task_id": "Trail-Sense/1513", "ground_truth": "        super.onPause()\r\n        currentRefreshTimer.stop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TidesFragment.kt"}}
{"prompt": "\nval formatService\nvar daily DailyTideData?\nvar current CurrentTideData?\n override fun onUpdate() {\r", "choices": [{"text": "//        val formatService = FormatService()\r\n//        val daily = formatService.getDailyTideData(this)\r\n//        val current = formatService.getCurrentTideData(this)\r\n//        this.daily = daily\r\n//        this.current = current\r\n//        notifyDataSetChanged()\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1514", "ground_truth": "        super.onUpdate()\r\n        updateCurrent()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TidesFragment.kt"}}
{"prompt": " import com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.sol.science.oceanography.Tide\nval formatService\nvar current CurrentTideData?\nval tideService\nprivate suspend fun refreshCurrent() {\r\n        current = getCurrentTideData()\r\n        onMain {\r", "choices": [{"text": "//            current = null\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "Trail-Sense/1515", "ground_truth": "            updateCurrent()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TidesFragment.kt"}}
{"prompt": " import com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.sol.science.oceanography.Tide\nvar daily DailyTideData?\nval tideService\nval mapper\nprivate suspend fun refreshDaily() {\r\n        daily = getDailyTideData(binding.tideListDate.date)\r\n        onMain {\r", "choices": [{"text": "//            binding.tideListDate.date = daily!!.date\r\n            binding.tideListDate.date = daily!!.date\r\n            binding.tideListDate.refresh()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1516", "ground_truth": "            updateDaily()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tides\\ui\\TidesFragment.kt"}}
{"prompt": "\nval pinned\nval lock\n private fun getPinnedToolIds(): List<Long> {\r\n        return synchronized(lock) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1520", "ground_truth": "            pinned.toList()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tools\\ui\\PinnedToolManager.kt"}}
{"prompt": "\nval pinned\nval lock\n fun pin(toolId: Long) {\r\n        synchronized(lock) {\r\n            pinned.add(toolId)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1522", "ground_truth": "        }\r\n        prefs.toolPinnedIds = getPinnedToolIds()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tools\\ui\\PinnedToolManager.kt"}}
{"prompt": "\nval pinned\nval lock\n fun unpin(toolId: Long) {\r\n        synchronized(lock) {\r\n            pinned.remove(toolId)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1523", "ground_truth": "        }\r\n        prefs.toolPinnedIds = getPinnedToolIds()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tools\\ui\\PinnedToolManager.kt"}}
{"prompt": "\nval pinned\nval lock\n fun isPinned(toolId: Long): Boolean {\r\n        return synchronized(lock) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1524", "ground_truth": "            pinned.contains(toolId)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tools\\ui\\PinnedToolManager.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.tools.ui.Tool\nval groupNameMap\noverride fun sort(tools: List<Tool>): List<CategorizedTools> {\r\n        return tools.groupBy { it.category }.map { (category, tools) ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1525", "ground_truth": "            CategorizedTools(groupNameMap[category], tools.sortedBy { it.name })\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tools\\ui\\sort\\CategoricalToolSort.kt"}}
{"prompt": "\n fun getToolSort(sort: ToolSortType): ToolSort {\r\n        return when (sort) {\r\n            ToolSortType.Name -> AlphabeticalToolSort()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1526", "ground_truth": "            ToolSortType.Category -> CategoricalToolSort(context)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tools\\ui\\sort\\ToolSortFactory.kt"}}
{"prompt": " import com.kylecorry.trail_sense.R\nvar pinnedListItems\nval pinnedToolManager\nvar toolListView GridView<ToolListItem>\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\npinnedListItems = pinnedToolManager.getPinnedTools()\r\ntoolListView.adapter = ToolListAdapter(pinnedListItems, this)\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1528", "ground_truth": "        super.onResume()\r\n        tools = Tools.getTools(requireContext())\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tools\\ui\\ToolsFragment.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nprivate fun updateTools() {\r\n        inBackground {\r\n            onDefault {\r\n                val filteredTools = filterTools(tools)\r\n                val sorter = toolSortFactory.getToolSort(prefs.toolSort)\r\n                toolListItems = listOf(toolHeader) + getToolItemList(sorter.sort(filteredTools))\r", "choices": [{"text": "//                toolListItems = listOf(toolHeader) + getToolItemList(sorter.sort(tools))\r\n            }\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "Trail-Sense/1529", "ground_truth": "            }\r\n\r\n            updateList()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tools\\ui\\ToolsFragment.kt"}}
{"prompt": "\n private fun filterTools(tools: List<Tool>): List<Tool> {\r\n        val filter = binding.searchbox.query\r\n        return if (filter.isNullOrBlank()) {\r\n            tools\r\n        } else {\r\n            tools.filter {\r\n                it.name.contains(filter, true) || it.description?.contains(\r\n                    filter,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1530", "ground_truth": "                    true\r\n                ) == true\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tools\\ui\\ToolsFragment.kt"}}
{"prompt": "\n import android.view.View\nprivate fun updateList() {\r\n        val filter = binding.searchbox.query\r\n\r\n        // Hide pinned when searching\r\n        synchronized(listLock) {\r\n            if (filter.isNullOrBlank()) {\r\n                toolListView.setSpannedData(pinnedListItems + toolListItems)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1531", "ground_truth": "            } else {\r\n                toolListView.setSpannedData(toolListItems)\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tools\\ui\\ToolsFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.tools.ui.items.ToolListItemStyle\nimport com.kylecorry.trail_sense.tools.tools.ui.items.ToolListItem\nimport com.kylecorry.andromeda.list.GridView\nimport android.view.View\nprivate fun getToolHeaderListItem(\r\n        name: String,\r\n        icon: Int,\r\n        action: () -> Unit\r\n    ): GridView.SpannedItem<ToolListItem> {\r\n        return GridView.SpannedItem(\r\n            ToolListItem(\r\n                name,\r\n                ToolListItemStyle.Header,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1532", "ground_truth": "                icon,\r\n                onClick = { action() }\r\n            ), 2\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tools\\ui\\ToolsFragment.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nprivate fun updatePinnedTools() {\r\n        inBackground {\r\n            onDefault {\r\n                val pinned = tools.filter {\r\n                    pinnedToolManager.isPinned(it.id)\r\n                }\r\n\r\n                pinnedListItems = listOf(pinnedHeader) + getToolItemList(pinnedSorter.sort(pinned))\r", "choices": [{"text": "//                pinnedListItems = listOf(pinnedHeader) + getToolItemList(pinnedSorter.sort(pinned))\r\n            }\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "Trail-Sense/1533", "ground_truth": "            }\r\n\r\n            updateList()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tools\\ui\\ToolsFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.tools.ui.sort.CategorizedTools\nimport com.kylecorry.trail_sense.tools.tools.ui.items.ToolListItem\nimport com.kylecorry.andromeda.list.GridView\nimport android.view.View\nprivate fun getToolItemList(tools: List<CategorizedTools>): List<GridView.SpannedItem<ToolListItem>> {\r\n        return if (tools.size == 1) {\r\n            tools.first().tools.map { tool ->\r\n                getToolListItem(tool)\r\n            }\r\n        } else {\r\n            tools.flatMap {\r\n                listOf(getToolCategoryListItem(it.categoryName)) +\r\n                        it.tools.map { tool ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1534", "ground_truth": "                            getToolListItem(tool)\r\n                        }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\tools\\ui\\ToolsFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.R\nval pathLayer\nval formatService\nvar location Coordinate?\noverride fun onResume() {\r\n        super.onResume()\r\n        binding.bearing1.start()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1537", "ground_truth": "        binding.bearing2.start()\r\n        restoreState()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\triangulate\\ui\\FragmentToolTriangulate.kt"}}
{"prompt": "\n import java.time.Duration\nimport com.kylecorry.sol.units.DistanceUnits\nimport com.kylecorry.sol.units.Distance\noverride fun getPurificationTime(altitude: Distance?): Duration {\r\n        if (altitude == null || altitude.convertTo(DistanceUnits.Meters).distance >= 1000f){\r", "choices": [{"text": "//            return Duration.ofSeconds(10)\r\n            return Duration.ofSeconds(10)\r\n        }\r\n        return Duration.ofSeconds(10)\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1540", "ground_truth": "            return Duration.ofMinutes(3)\r\n        }\r\n\r\n        return Duration.ofMinutes(1)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\waterpurification\\domain\\WaterService.kt"}}
{"prompt": "\n import android.content.Intent\noverride fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\r\n        seconds = intent?.extras?.getLong(KEY_SECONDS, DEFAULT_SECONDS) ?: DEFAULT_SECONDS\r\n        super.onStartCommand(intent, flags, startId)\r", "choices": [{"text": "\n import android.content.Intent\noverride fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\r\n        seconds = intent?.extras?.getLong(KEY_SECONDS, DEFAULT_SECONDS)?: DEFAULT_SECONDS\r\n        super.onStartCommand(intent, flags, startId)\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1542", "ground_truth": "        startTimer(seconds)\r\n        return START_STICKY\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\waterpurification\\infrastructure\\WaterPurificationTimerService.kt"}}
{"prompt": "\n import android.content.Intent\nimport android.content.Context\nfun intent(context: Context, seconds: Long = DEFAULT_SECONDS): Intent {\r\n            val i = Intent(context.applicationContext, WaterPurificationTimerService::class.java)\r", "choices": [{"text": "i.putExtra(WaterPurificationTimerService.EXTRA_SECONDS, seconds)\r\nreturn i\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1543", "ground_truth": "            i.putExtra(KEY_SECONDS, seconds)\r\n            return i\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\waterpurification\\infrastructure\\WaterPurificationTimerService.kt"}}
{"prompt": " import com.kylecorry.trail_sense.R\nval formatService\nval cache\nval runner\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nformatService = FormatService(this)\r\ncache = Cache(this)\r\nrunner = Runner(this)\r\n}\r\noverride fun onPause() {\r\nsuper.onPause()\r\nformatService.stop()\r\ncache.stop()\r\nrunner.stop()\r\n}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1544", "ground_truth": "        super.onResume()\r\n        updateSelectedDuration()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\waterpurification\\ui\\WaterPurificationFragment.kt"}}
{"prompt": "\n import java.time.Duration\nimport com.kylecorry.andromeda.core.coroutines.onMain\nimport com.kylecorry.andromeda.fragments.inBackground\nprivate fun updateSelectedDuration() {\r\n        duration = null\r\n        inBackground {\r\n            runner.replace {\r\n                val duration = getSelectedDuration()\r\n\r\n                onMain {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1547", "ground_truth": "                    setBoilTime(duration)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\waterpurification\\ui\\WaterPurificationFragment.kt"}}
{"prompt": "\n import java.time.Instant\nimport java.time.Duration\nimport com.kylecorry.trail_sense.R\nprivate fun getRemainingTime(): Duration? {\r\n        val lastEndTime =\r\n            cache.getInstant(WATER_PURIFICATION_END_TIME_KEY) ?: return null\r\n        val oldDuration = Duration.between(Instant.now(), lastEndTime)\r\n        return if (!oldDuration.isNegative && !oldDuration.isZero) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1548", "ground_truth": "            oldDuration\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\waterpurification\\ui\\WaterPurificationFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.weather.domain.WeatherAlert\nimport com.kylecorry.trail_sense.tools.weather.domain.CurrentWeather\nimport com.kylecorry.sol.science.meteorology.WeatherCondition\noverride fun getAlerts(weather: CurrentWeather): List<WeatherAlert> {\r\n        val alerts = mutableListOf<WeatherAlert>()\r\n\r\n        if (weather.prediction.hourly.contains(WeatherCondition.Storm)) {\r\n            alerts.add(WeatherAlert.Storm)\r\n        }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1549", "ground_truth": "\r\n        alerts.addAll(getTemperatureAlerts(weather))\r\n\r\n        return alerts\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\forecasting\\alerts\\WeatherAlertGenerator.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.weather.infrastructure.subsystem.WeatherSubsystem\nimport com.kylecorry.trail_sense.tools.weather.domain.WeatherAlert\nimport com.kylecorry.trail_sense.tools.weather.domain.CurrentWeather\nprivate fun getTemperatureAlerts(weather: CurrentWeather): List<WeatherAlert> {\r\n        weather.prediction.temperature ?: return emptyList()\r\n\r\n        val alerts = mutableListOf<WeatherAlert>()\r\n\r\n        if (weather.prediction.temperature.low.celsius().temperature <= WeatherSubsystem.COLD) {\r\n            alerts.add(WeatherAlert.Cold)\r\n        }\r\n\r\n        if (weather.prediction.temperature.high.celsius().temperature >= WeatherSubsystem.HOT) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1550", "ground_truth": "            alerts.add(WeatherAlert.Hot)\r\n        }\r\n\r\n        return alerts\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\forecasting\\alerts\\WeatherAlertGenerator.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.units.Reading\noverride suspend fun getTemperatures(\r\n        start: ZonedDateTime,\r\n        end: ZonedDateTime\r\n    ): List<Reading<Temperature>> {\r\n        return service.getTemperatures(start, end).map {\r", "choices": [{"text": "Reading(it.time, Temperature(it.value, it.unit))\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1553", "ground_truth": "            it.copy(value = calibrator.calibrate(it.value))\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\forecasting\\temperatures\\CalibratedTemperatureService.kt"}}
{"prompt": "\n import java.time.LocalDate\nimport com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.math.Range\noverride suspend fun getTemperatureRanges(year: Int): List<Pair<LocalDate, Range<Temperature>>> {\r\n        return service.getTemperatureRanges(year).map {\r\n            it.copy(\r\n                second = Range(\r\n                    calibrator.calibrate(it.second.start),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1556", "ground_truth": "                    calibrator.calibrate(it.second.end),\r\n                )\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\forecasting\\temperatures\\CalibratedTemperatureService.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nimport com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.science.meteorology.Meteorology\noverride suspend fun getTemperature(time: ZonedDateTime): Temperature = onDefault {\r\n        val temperature = repo.getTemperature(location, time)\r\n        Meteorology.getTemperatureAtElevation(\r", "choices": [{"text": "//            temperature,\r\n            temperature,\r\n            elevation,\r\n            time\r\n        )\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1557", "ground_truth": "            temperature,\r\n            Distance.meters(0f),\r\n            elevation\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\forecasting\\temperatures\\HistoricTemperatureService.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nimport com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.science.meteorology.Meteorology\noverride suspend fun getTemperatures(\r\n        start: ZonedDateTime,\r\n        end: ZonedDateTime\r\n    ): List<Reading<Temperature>> = onDefault {\r\n        val temperatures = repo.getTemperatures(location, start, end)\r\n        temperatures.map {\r\n            it.copy(\r\n                value = Meteorology.getTemperatureAtElevation(\r\n                    it.value,\r\n                    Distance.meters(0f),\r", "choices": [{"text": "//                    elevation,\r\n                    location.elevation\r\n                )\r\n            )\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1558", "ground_truth": "                    elevation\r\n                )\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\forecasting\\temperatures\\HistoricTemperatureService.kt"}}
{"prompt": "\n import java.time.LocalDate\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nimport com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.science.meteorology.Meteorology\nimport com.kylecorry.sol.math.Range\noverride suspend fun getTemperatureRange(date: LocalDate): Range<Temperature> = onDefault {\r\n        val temperatures = repo.getDailyTemperatureRange(location, date)\r\n        Range(\r\n            Meteorology.getTemperatureAtElevation(\r\n                temperatures.start,\r\n                Distance.meters(0f),\r\n                elevation\r\n            ),\r\n            Meteorology.getTemperatureAtElevation(\r\n                temperatures.end,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1559", "ground_truth": "                Distance.meters(0f),\r\n                elevation\r\n            )\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\forecasting\\temperatures\\HistoricTemperatureService.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nimport com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.math.Range\noverride suspend fun getTemperatureRange(\r\n        start: ZonedDateTime,\r\n        end: ZonedDateTime\r\n    ): Range<Temperature> = onDefault {\r", "choices": [{"text": "-        val startTemp = getTemperature(start)\r\n-        val endTemp = getTemperature(end)\r\n-        Range(startTemp, endTemp)\r\n+        val startTemp = getTemperature(start)\r\n+        val endTemp = getTemperature(end)\r\n+        Range(startTemp, endTemp)\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1560", "ground_truth": "        val forecast = getTemperatures(start, end)\r\n        forecast.map { it.value }.range()!!\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\forecasting\\temperatures\\HistoricTemperatureService.kt"}}
{"prompt": "\n import com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Pressure\nimport com.kylecorry.sol.science.meteorology.clouds.CloudGenus\nimport com.kylecorry.sol.science.meteorology.WeatherForecast\nimport com.kylecorry.sol.science.meteorology.Meteorology\nimport com.kylecorry.sol.math.Range\nprivate fun getForecast(\r\n        pressures: List<Reading<Pressure>>,\r\n        clouds: List<Reading<CloudGenus?>>,\r\n        temperatureRange: Range<Temperature>?\r\n    ): List<WeatherForecast> {\r\n        return Meteorology.forecast(\r\n            pressures,\r\n            clouds,\r\n            temperatureRange,\r", "choices": [{"text": "//            WeatherForecast.Builder()\r\n//               .setCloudGenus(CloudGenus.Overcast)\r\n//               .setPressure(Pressure(1013.25, Pressure.Units.hPa))\r\n//               .setTemperature(Temperature(20, Temperature.Units.Celsius))\r\n//               .setWindSpeed(WindSpeed(10, WindSpeed.Units.knots))\r\n//               .setWindDirection(WindDirection(180, WindDirection.Units.degrees))\r\n//               .setHumidity("}], "metadata": {"task_id": "Trail-Sense/1562", "ground_truth": "            hourlyForecastChangeThreshold / 3f,\r\n            stormThreshold / 3f,\r\n            Instant.now()\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\forecasting\\WeatherForecaster.kt"}}
{"prompt": "\n import java.time.ZonedDateTime\nimport java.time.Duration\nimport com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.math.Range\nprivate suspend fun getHighLowTemperature(\r\n        startTime: ZonedDateTime,\r\n        start: Duration,\r\n        duration: Duration\r\n    ): Range<Temperature> {\r\n        return temperatureService.getTemperatureRange(\r\n            startTime.plus(start),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1563", "ground_truth": "            startTime.plus(start).plus(duration)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\forecasting\\WeatherForecaster.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.weather.domain.RawWeatherObservation\nimport com.kylecorry.trail_sense.shared.data.DataUtils\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Pressure\noverride fun calibrate(readings: List<Reading<RawWeatherObservation>>): List<Reading<Pressure>> {\r\n        val seaLevel = baseStrategy.calibrate(readings)\r\n        return DataUtils.smoothTemporal(\r\n            seaLevel,\r\n            smoothing,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1565", "ground_truth": "            { it.pressure }\r\n        ) { reading, value ->\r\n            reading.copy(pressure = value)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\sealevel\\LoessSeaLevelCalibrationStrategy.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.weather.domain.RawWeatherObservation\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.units.Pressure\noverride fun calibrate(readings: List<Reading<RawWeatherObservation>>): List<Reading<Pressure>> {\r\n        return readings.map {\r\n            Reading(\r", "choices": [{"text": "//                it.time,\r\n                it.value.pressure,\r\n                it.value.pressure.unit\r\n            )\r\n        }\r\n    }\r\n}<file_sep>/app/src/main/java/com/kylecorry/trail_sense/tools/weather/domain/WeatherTool.kt\npackage com.kylecorry.trail_sense.tools.weather.domain\n\nimport com.kylecorry.trail_sense.shared.domain.Tool\nimport com.kylecorry.trail_sense.shared.domain.ToolType\nimport com.kylecorry.trail"}], "metadata": {"task_id": "Trail-Sense/1567", "ground_truth": "                it.value.seaLevel(useTemperature),\r\n                it.time\r\n            )\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\sealevel\\SimpleSeaLevelCalibrationStrategy.kt"}}
{"prompt": "\n import com.kylecorry.sol.science.meteorology.WeatherForecast\nimport com.kylecorry.sol.science.meteorology.PressureTendency\nfun WeatherForecast.get3hTendency(): PressureTendency {\r\n    return (tendency ?: PressureTendency.zero).let {\r", "choices": [{"text": "\n import com.kylecorry.sol.science.meteorology.WeatherForecast\nimport com.kylecorry.sol.science.meteorology.PressureTendency\nfun WeatherForecast.get3hTendency(): PressureTendency {\r\n    return (tendency?: PressureTendency.zero).let {\r\n//        if (it == PressureTendency.zero) {\r\n//            return PressureTendency.zero\r\n//        }\r\n        it\r\n    }\r\n}<file_sep>/app/src/main/java/com/kylecorry/sol/app/weather/ui/settings/SettingsFragment.kt\npackage com.kylecorry.sol.app.weather.ui.settings\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\n"}], "metadata": {"task_id": "Trail-Sense/1568", "ground_truth": "        it.copy(amount = it.amount * 3)\r\n    }\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\WeatherExtensions.kt"}}
{"prompt": "\n import java.time.Instant\nimport java.time.Duration\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.science.meteorology.clouds.CloudGenus\nfun List<Reading<CloudGenus?>>.getLastCloud(\r\n    maxTime: Duration,\r\n    now: Instant = Instant.now()\r\n): Reading<CloudGenus?>? {\r\n    val lastCloud = lastOrNull() ?: return null\r", "choices": [{"text": "\n import java.time.Instant\nimport java.time.Duration\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.sol.science.meteorology.clouds.CloudGenus\nfun List<Reading<CloudGenus?>>.getLastCloud(\r\n    maxTime: Duration,\r\n    now: Instant = Instant.now()\r\n): Reading<CloudGenus?>? {\r\n    val lastCloud = lastOrNull()?: return null\r\n//    val lastCloud = this.lastOrNull()?: return null\r\n    val lastCloudTime = lastCloud.time\r\n    val timeSinceLastCloud = Duration.between(lastCloudTime, now)\r\n    if (timeSinceLastCloud > maxTime) {\r\n        return null\r\n    }\r\n    return lastCloud\r\n}<file_sep>/src/main/kotlin/com/kylecorry/sol/science/meteorology/clouds/CloudGenus.kt\npackage com.kylecorry.sol.science.meteorology.clouds\r\n\r\nimport com.kylecorry.sol.science.meteorology"}], "metadata": {"task_id": "Trail-Sense/1569", "ground_truth": "    if (Duration.between(lastCloud.time, now).abs() > maxTime) {\r\n        return null\r\n    }\r\n    return lastCloud\r\n}", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\WeatherExtensions.kt"}}
{"prompt": "\n import java.time.LocalTime\noverride fun isSatisfiedBy(value: LocalTime): Boolean {\r", "choices": [{"text": "return value.hour == 12\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1570", "ground_truth": "        val end = startTime.plusHours(3)\r\n        return value >= startTime && value <= end\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\domain\\WeatherSpecifications.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.weather.infrastructure.subsystem.WeatherSubsystem\nimport android.content.Context\nfun create(context: Context): BackfillHistoricalTemperaturesCommand {\r\n            return BackfillHistoricalTemperaturesCommand(\r\n                WeatherSubsystem.getInstance(context),\r", "choices": [{"text": "//                WeatherService.getInstance(context),\r\n                WeatherService.getInstance(context),\r\n                WeatherService.getInstance(context),\r\n                WeatherService.getInstance(context),\r\n                WeatherService.getInstance(context),\r\n                WeatherService.getInstance(context),\r\n                WeatherService.getInstance(context),\r\n                WeatherService.getInstance(context),\r\n                WeatherService.getInstance(context),\r\n                WeatherService.getInstance(context),\r\n                WeatherService.getInstance(context),\r\n                WeatherService.getInstance(context),\r\n                WeatherService.getInstance(context),\r\n                WeatherService.getInstance(context),\r\n                WeatherService.getInstance(context),\r\n                WeatherService.getInstance("}], "metadata": {"task_id": "Trail-Sense/1573", "ground_truth": "                WeatherRepo.getInstance(context)\r\n            )\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\commands\\BackfillHistoricalTemperaturesCommand.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.weather.domain.CurrentWeather\noverride fun execute(weather: CurrentWeather) {\r\n        if (prefs.shouldMonitorWeather) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1574", "ground_truth": "            alerter.alert(weather)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\commands\\CurrentWeatherAlertCommand.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.weather.infrastructure.alerts.CurrentWeatherAlerter\nimport com.kylecorry.trail_sense.tools.weather.domain.CurrentWeather\nimport com.kylecorry.trail_sense.shared.commands.generic.Command\nimport com.kylecorry.trail_sense.shared.UserPreferences\nimport com.kylecorry.trail_sense.shared.FormatService\nimport android.content.Context\nfun create(context: Context): CurrentWeatherAlertCommand {\r\n            val prefs = UserPreferences(context)\r\n            return CurrentWeatherAlertCommand(\r\n                prefs.weather,\r\n                CurrentWeatherAlerter(\r\n                    context,\r\n                    FormatService.getInstance(context),\r\n                    prefs.pressureUnits,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1575", "ground_truth": "                    prefs.temperatureUnits,\r\n                    prefs.weather\r\n                )\r\n            )\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\commands\\CurrentWeatherAlertCommand.kt"}}
{"prompt": "\n override suspend fun execute() {\r", "choices": [{"text": "//     val result = withContext(Dispatchers.IO) {\r\n//         // do something\r\n//     }\r\n//     withContext(Dispatchers.Main) {\r\n//         // do something\r\n//     }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1577", "ground_truth": "        updateWeather()\r\n        sendWeatherNotifications()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\commands\\MonitorWeatherCommand.kt"}}
{"prompt": "\n private suspend fun updateWeather() {\r", "choices": [{"text": "-    val weather = weatherRepository.getWeather()\r\n-    weather.let {\r\n-        if (it.isSuccess) {\r\n-            _weather.value = it.getOrNull()\r\n-        } else {\r\n-            _weather.value = null\r\n-        }\r\n-    }\r\n+    _weather.value = weatherRepository.getWeather()\r\n }\r\n"}], "metadata": {"task_id": "Trail-Sense/1578", "ground_truth": "        val reading = observer.getWeatherObservation()\r\n        reading?.let { repo.add(it) }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\commands\\MonitorWeatherCommand.kt"}}
{"prompt": "\n private suspend fun sendWeatherNotifications() {\r", "choices": [{"text": "-    val weather = weatherRepository.getWeather()\r\n-    val notification = weather.toNotification()\r\n-    notificationManager.notify(notification)\r\n+    val weather = weatherRepository.getWeather()?: return\r\n+    val notification = weather.toNotification()?: return\r\n+    notificationManager.notify(notification)\r\n }\r\n"}], "metadata": {"task_id": "Trail-Sense/1579", "ground_truth": "        val weather = subsystem.getWeather()\r\n        alerter.execute(weather)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\commands\\MonitorWeatherCommand.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.UserPreferences\noverride fun execute() {\r\n        val prefs = UserPreferences(context)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1582", "ground_truth": "        prefs.weather.shouldMonitorWeather = false\r\n        WeatherUpdateScheduler.stop(context)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\commands\\StopWeatherMonitorCommand.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.weather.domain.WeatherAlert\nimport com.kylecorry.trail_sense.tools.weather.domain.CurrentWeather\nimport com.kylecorry.trail_sense.shared.preferences.Flag\noverride fun execute(weather: CurrentWeather) {\r\n        val sentAlert = justShownFlag.get()\r\n\r\n        if (weather.prediction.alerts.contains(WeatherAlert.Storm)) {\r\n            val shouldSend = prefs.sendStormAlerts && prefs.shouldMonitorWeather\r\n            if (shouldSend && !sentAlert) {\r\n                alerter.alert()\r\n                justShownFlag.set(true)\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1583", "ground_truth": "        } else {\r\n            alerter.dismiss()\r\n            justShownFlag.set(false)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\commands\\StormAlertCommand.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.weather.domain.RawWeatherObservation\nimport com.kylecorry.sol.units.Reading\nfun toWeatherObservation(): Reading<RawWeatherObservation> {\r\n        return Reading(\r\n            RawWeatherObservation(\r\n                id,\r\n                pressure,\r\n                altitude,\r\n                temperature,\r\n                altitudeAccuracy,\r\n                humidity,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1585", "ground_truth": "                Coordinate(latitude, longitude)\r\n            ),\r\n            Instant.ofEpochMilli(time)\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\persistence\\PressureReadingEntity.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.weather.domain.RawWeatherObservation\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.sol.units.Reading\noverride suspend fun add(reading: Reading<RawWeatherObservation>): Long = onIO {\r\n        val entity = PressureReadingEntity.from(reading)\r\n\r\n        val id = if (entity.id != 0L) {\r\n            pressureDao.update(entity)\r\n            entity.id\r\n        } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1587", "ground_truth": "            pressureDao.insert(entity)\r\n        }\r\n        _readingsChanged.publish()\r\n        id\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\persistence\\WeatherRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.weather.domain.RawWeatherObservation\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.sol.units.Reading\noverride suspend fun delete(reading: Reading<RawWeatherObservation>) = onIO {\r\n        val entity = PressureReadingEntity.from(reading)\r", "choices": [{"text": "//        val entity = reading.toEntity()\r\n        val deleted = database.pressureDao().delete(entity)\r\n        if (deleted == 0) {\r\n            throw Exception(\"Failed to delete reading\")\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1588", "ground_truth": "        pressureDao.delete(entity)\r\n        _readingsChanged.publish()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\persistence\\WeatherRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.weather.domain.RawWeatherObservation\nimport com.kylecorry.sol.units.Reading\nimport androidx.lifecycle.map\nimport androidx.lifecycle.LiveData\noverride fun getAllLive(): LiveData<List<Reading<RawWeatherObservation>>> {\r\n        return pressureDao.getAll().map {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1589", "ground_truth": "            it.map { reading -> reading.toWeatherObservation() }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\persistence\\WeatherRepo.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.weather.domain.RawWeatherObservation\nimport com.kylecorry.andromeda.core.coroutines.onIO\nimport com.kylecorry.sol.units.Reading\nimport androidx.lifecycle.map\nsuspend fun addAll(value: List<Reading<RawWeatherObservation>>) = onIO {\r\n        val entities = value.map { PressureReadingEntity.from(it) }\r\n        val toAdd = entities.filter { it.id == 0L }\r\n        val toUpdate = entities.filter { it.id != 0L }\r\n\r\n        if (toAdd.isNotEmpty()) {\r\n            pressureDao.bulkInsert(toAdd)\r\n        }\r\n\r\n        if (toUpdate.isNotEmpty()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1590", "ground_truth": "            pressureDao.bulkUpdate(toUpdate)\r\n        }\r\n\r\n        _readingsChanged.publish()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\persistence\\WeatherRepo.kt"}}
{"prompt": "\n import java.time.Instant\nimport com.kylecorry.andromeda.core.coroutines.onIO\noverride suspend fun clean() = onIO {\r\n        pressureDao.deleteOlderThan(Instant.now().minus(PRESSURE_HISTORY_DURATION).toEpochMilli())\r\n\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1591", "ground_truth": "        // TODO: Only do this if there was a change\r\n        _readingsChanged.publish()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\persistence\\WeatherRepo.kt"}}
{"prompt": "\n import android.content.Context\n @Synchronized\r\n        fun getInstance(context: Context): WeatherRepo {\r\n            if (instance == null) {\r\n                instance = WeatherRepo(context.applicationContext)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1592", "ground_truth": "            }\r\n            return instance!!\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\persistence\\WeatherRepo.kt"}}
{"prompt": "\n import android.content.Intent\nimport android.content.Context\noverride fun onReceive(context: Context?, intent: Intent?) {\r", "choices": [{"text": "if (intent?.action == \"android.intent.action.BOOT_COMPLETED\") {\r\nval intent = Intent(context, MainActivity::class.java)\r\nintent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\ncontext?.startActivity(intent)\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1593", "ground_truth": "        context ?: return\r\n        StopWeatherMonitorCommand(context).execute()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\receivers\\WeatherStopMonitoringReceiver.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.weather.domain.CurrentWeather\nimport com.kylecorry.andromeda.core.coroutines.onIO\nval weatherRepo\nvar updateWeatherMutex\nval temperatureRepo\noverride suspend fun getWeather(): CurrentWeather = onIO {\r\n        if (!isValid) {\r\n            refresh()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1594", "ground_truth": "        }\r\n        cachedValue.getOrPut { populateCache() }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\subsystem\\WeatherSubsystem.kt"}}
{"prompt": "\n import java.time.LocalDate\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.math.Range\noverride suspend fun getTemperatureRange(\r\n        date: LocalDate,\r\n        location: Coordinate?,\r\n        elevation: Distance?,\r\n        calibrated: Boolean\r\n    ): Range<Temperature> = onDefault {\r", "choices": [{"text": "//        val temperature = getTemperature(date, location, elevation, calibrated)\r\n//        val range = temperature.getRange()\r\n//        range.min = range.min.coerceAtLeast(Temperature.Celsius(-100))\r\n//        range.max = range.max.coerceAtMost(Temperature.Celsius(100))\r\n//        range\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1597", "ground_truth": "        val service = getTemperatureService(location, elevation, calibrated)\r\n        service.getTemperatureRange(date)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\subsystem\\WeatherSubsystem.kt"}}
{"prompt": "\n import java.time.LocalDate\nimport com.kylecorry.andromeda.core.coroutines.onDefault\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Temperature\nimport com.kylecorry.sol.units.Distance\nimport com.kylecorry.sol.units.Coordinate\nimport com.kylecorry.sol.math.Range\noverride suspend fun getTemperatureRanges(\r\n        year: Int,\r\n        location: Coordinate?,\r\n        elevation: Distance?,\r\n        calibrated: Boolean\r\n    ): List<Pair<LocalDate, Range<Temperature>>> = onDefault {\r", "choices": [{"text": "//        val temperatures = getTemperatures(year, location, elevation, calibrated)\r\n//        val ranges = temperatures.map {\r\n//            Pair(it.date, Range(it.temperature, it.temperature))\r\n//        }\r\n//        return ranges\r\n        emptyList()\r\n    }\r\n\r\n    override suspend fun getTemperatures(\r\n        year: Int,\r\n        location: Coordinate?,\r\n        elevation: Distance?,\r\n        calibrated: Boolean\r\n    ): List<Temperature> = onDefault {\r\n        val temperatures = getTemperatures(year, location, elevation, calibrated)"}], "metadata": {"task_id": "Trail-Sense/1598", "ground_truth": "        val service = getTemperatureService(location, elevation, calibrated)\r\n        service.getTemperatureRanges(year)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\subsystem\\WeatherSubsystem.kt"}}
{"prompt": "\nvar cachedValue\nval _weatherMonitorFrequency\nval weatherMonitorFrequency com.kylecorry.andromeda.core.topics.generic.ITopic<Duration>\n override fun enableMonitor() {\r", "choices": [{"text": "weatherMonitorFrequency.subscribe(this)\r\n}\r\noverride fun disableMonitor() {\r\nweatherMonitorFrequency.unsubscribe(this)\r\n}\r\noverride fun onTopicChanged(topic: ITopic<Duration>, value: Duration) {\r\nif (topic == weatherMonitorFrequency) {\r\ncachedValue = value\r\n}\r\n}\r\noverride fun getCachedValue(): Duration {\r\nreturn cachedValue\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1600", "ground_truth": "        prefs.weather.shouldMonitorWeather = true\r\n        WeatherUpdateScheduler.start(context)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\subsystem\\WeatherSubsystem.kt"}}
{"prompt": "\nval weatherMonitorStatePrefKeys\nval weatherMonitorFrequencyPrefKeys\nval _weatherMonitorState\n override fun disableMonitor() {\r", "choices": [{"text": "_weatherMonitorState.set(false)\r\n}\r\noverride fun enableMonitor() {\r\n_weatherMonitorState.set(true)\r\n}\r\noverride fun isMonitorEnabled(): Boolean {\r\nreturn _weatherMonitorState.get()\r\n}\r\noverride fun getMonitorFrequency(): Int {\r\nreturn _weatherMonitorFrequency.get()\r\n}\r\noverride fun setMonitorFrequency(frequency: Int) {\r\n_weatherMonitorFrequency.set(frequency)\r\n}\r\noverride fun getMonitorState(): Boolean {\r\nreturn _weatherMonitorState.get()"}], "metadata": {"task_id": "Trail-Sense/1601", "ground_truth": "        prefs.weather.shouldMonitorWeather = false\r\n        WeatherUpdateScheduler.stop(context)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\subsystem\\WeatherSubsystem.kt"}}
{"prompt": "\nval weatherRepo\nvar updateWeatherMutex\nval invalidationPrefKeys\n private fun invalidate() {\r\n        synchronized(validLock) {\r\n            isValid = false\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1604", "ground_truth": "        }\r\n        _weatherChanged.publish()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\subsystem\\WeatherSubsystem.kt"}}
{"prompt": "\nvar cachedValue\nval location\nval sharedPrefs\n private suspend fun refresh() {\r\n        cachedValue.reset()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1605", "ground_truth": "        delay(50)\r\n        synchronized(validLock) {\r\n            isValid = true\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\subsystem\\WeatherSubsystem.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.FeatureState\nprivate fun calculateWeatherMonitorState(): FeatureState {\r\n        return if (WeatherMonitorIsEnabled().isSatisfiedBy(context)) {\r\n            FeatureState.On\r\n        } else if (WeatherMonitorIsAvailable().not().isSatisfiedBy(context)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1608", "ground_truth": "            FeatureState.Unavailable\r\n        } else {\r\n            FeatureState.Off\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\subsystem\\WeatherSubsystem.kt"}}
{"prompt": "\n import android.content.Context\n @Synchronized\r\n        fun getInstance(context: Context): WeatherSubsystem {\r\n            if (instance == null) {\r\n                instance = WeatherSubsystem(context.applicationContext)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1611", "ground_truth": "            }\r\n            return instance!!\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\subsystem\\WeatherSubsystem.kt"}}
{"prompt": "\nval weather\nval runner\nval timer\n fun stop() {\r", "choices": [{"text": "weather.stop()\r\nrunner.stop()\r\ntimer.stop()\r\n}\r\n}\r\nclass Weather(val context: Context) : Thread() {\r\noverride fun run() {\r\nwhile (true) {\r\ntry {\r\nThread.sleep(1000)\r\n} catch (e: InterruptedException) {\r\ne.printStackTrace()\r\n}\r\nval weather = WeatherData()\r\nweather.temperature = (Math.random() * 100).toInt()\r\nweather.humidity = (Math.random() * 100"}], "metadata": {"task_id": "Trail-Sense/1612", "ground_truth": "        timer.stop()\r\n        runner.cancel()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\WeatherLogger.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.UserPreferences\nimport com.kylecorry.andromeda.sense.Sensors\nimport android.content.Context\noverride fun isSatisfiedBy(value: Context): Boolean {\r\n        val prefs = UserPreferences(value)\r\n        return !(prefs.isLowPowerModeOn && prefs.lowPowerModeDisablesWeather) && Sensors.hasBarometer(\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.shared.UserPreferences\nimport com.kylecorry.andromeda.sense.Sensors\nimport android.content.Context\noverride fun isSatisfiedBy(value: Context): Boolean {\r\n        val prefs = UserPreferences(value)\r\n        return!(prefs.isLowPowerModeOn && prefs.lowPowerModeDisablesWeather) && Sensors.hasBarometer(\r\nvalue)\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1613", "ground_truth": "            value\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\WeatherMonitorIsAvailable.kt"}}
{"prompt": "\n import android.content.Intent\noverride fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\r", "choices": [{"text": "//        val intent = Intent(this, MainActivity::class.java)\r\n//        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n//        startActivity(intent)\r\n//        return super.onStartCommand(intent, flags, startId)\r\n        return START_STICKY\r\n    }\r\n}<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android."}], "metadata": {"task_id": "Trail-Sense/1615", "ground_truth": "        isRunning = true\r\n        return super.onStartCommand(intent, flags, startId)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\WeatherMonitorService.kt"}}
{"prompt": "\nval uniqueId Int\nval period Duration\nval prefs\n override fun onDestroy() {\r\n        isRunning = false\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1616", "ground_truth": "        stopService(true)\r\n        super.onDestroy()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\WeatherMonitorService.kt"}}
{"prompt": "\n import com.kylecorry.andromeda.background.TaskSchedulerFactory\nimport com.kylecorry.andromeda.background.IAlwaysOnTaskScheduler\nimport android.content.Context\nprivate fun scheduler(context: Context): IAlwaysOnTaskScheduler {\r\n            return TaskSchedulerFactory(context).alwaysOn(\r\n                WeatherMonitorService::class.java,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1617", "ground_truth": "                foreground = true\r\n            )\r\n        }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\WeatherMonitorService.kt"}}
{"prompt": " import android.content.Context\nval WEATHER_NOTIFICATION_ID\nfun restart(context: Context) {\r\n        if (WeatherMonitorIsEnabled().isSatisfiedBy(context)) {\r\n            stop(context)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1618", "ground_truth": "            start(context)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\WeatherUpdateScheduler.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.receivers.ServiceRestartAlerter\nimport com.kylecorry.andromeda.permissions.Permissions\nimport android.util.Log\nimport android.content.Context\nfun start(context: Context) {\r\n        if (!WeatherMonitorIsAvailable().isSatisfiedBy(context)) {\r\n            return\r\n        }\r\n\r\n        if (!hasPermissions(context)) {\r\n            ServiceRestartAlerter(context).alert()\r\n            Log.d(\"WeatherUpdateScheduler\", \"Cannot start weather monitoring\")\r\n            return\r\n        }\r", "choices": [{"text": ""}], "metadata": {"task_id": "Trail-Sense/1619", "ground_truth": "\r\n        tryStartForegroundOrNotify(context) {\r\n            WeatherMonitorService.start(context)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\WeatherUpdateScheduler.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.permissions.canStartLocationForgroundService\nimport com.kylecorry.andromeda.permissions.Permissions\nimport android.content.Context\nprivate fun hasPermissions(context: Context): Boolean {\r\n        // Either it didn't need location or it has foreground location permission (runtime check)\r\n        return !Permissions.canGetLocation(context) || Permissions.canStartLocationForgroundService(\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.shared.permissions.canStartLocationForgroundService\nimport com.kylecorry.andromeda.permissions.Permissions\nimport android.content.Context\nprivate fun hasPermissions(context: Context): Boolean {\r\n        // Either it didn't need location or it has foreground location permission (runtime check)\r\n        return!Permissions.canGetLocation(context) || Permissions.canStartLocationForgroundService(\r\ncontext)\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1620", "ground_truth": "            context\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\WeatherUpdateScheduler.kt"}}
{"prompt": " import android.content.Context\nval WEATHER_NOTIFICATION_ID\nfun stop(context: Context) {\r", "choices": [{"text": "val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\r\nnotificationManager.cancel(WEATHER_NOTIFICATION_ID)\r\n}\r\nfun start(context: Context) {\r\nval notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\r\nval notification = NotificationCompat.Builder(context, \"weather\")\r\n.setSmallIcon(R.drawable.ic_launcher)\r\n.setContentTitle(\"Weather\")\r\n.setContentText(\"Weather is ready\")\r\n.setPriority(NotificationCompat.PRIORITY_DEFAULT)\r"}], "metadata": {"task_id": "Trail-Sense/1621", "ground_truth": "        WeatherMonitorService.stop(context)\r\n        Notify.cancel(context, WEATHER_NOTIFICATION_ID)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\infrastructure\\WeatherUpdateScheduler.kt"}}
{"prompt": "\nval formatter\nval stateTopic ITopic<FeatureState>\nval subtitleTopic ITopic<String>\n override fun start() {\r\n        startForegroundService {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1623", "ground_truth": "            weather.enableMonitor()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\tiles\\WeatherMonitorTile.kt"}}
{"prompt": "\n import java.time.Instant\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.andromeda.views.chart.Chart\nfun plot(data: List<Reading<Float>>) {\r\n        startTime = data.firstOrNull()?.time ?: Instant.now()\r\n        val values = Chart.getDataFromReadings(data, startTime) { it }\r", "choices": [{"text": "\n import java.time.Instant\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.andromeda.views.chart.Chart\nfun plot(data: List<Reading<Float>>) {\r\n        startTime = data.firstOrNull()?.time?: Instant.now()\r\n        val values = Chart.getDataFromReadings(data, startTime) { it }\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1624", "ground_truth": "        chart.plot(LineChartLayer(values, color))\r\n        chart.invalidate()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\ui\\charts\\HumidityChart.kt"}}
{"prompt": "\nval formatter\n override fun format(value: Float): String {\r\n        val dayOfYear = value.toInt()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1625", "ground_truth": "        val date = LocalDate.ofYearDay(year, dayOfYear)\r\n        return formatter.formatMonth(date.month, true)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\ui\\charts\\MonthChartLabelFormatter.kt"}}
{"prompt": " import com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nvar chart TemperatureChart?\nvar data List<Reading<Float>>\nvar raw List<Reading<Float>>?\nfun plot(data: List<Reading<Float>>, raw: List<Reading<Float>>? = null) {\r\n        this.data = data\r", "choices": [{"text": "this.raw = raw\r\nchart = TemperatureChart(this)\r\nchart!!.plot(data, raw)\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1629", "ground_truth": "        this.raw = raw\r\n        chart?.plot(data, raw)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\ui\\charts\\TemperatureChartPreference.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.clouds.infrastructure.CloudDetailsService\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.views.list.ResourceListIcon\nimport com.kylecorry.andromeda.views.list.ListItem\nimport android.content.Context\noverride fun getListItem(context: Context): ListItem? {\r\n        cloud ?: return null\r\n        val cloudDetailsService = CloudDetailsService(context)\r\n        val name = cloudDetailsService.getCloudName(cloud.value)\r\n\r\n        return ListItem(\r\n            7,\r\n            context.getString(R.string.clouds),\r\n            icon = ResourceListIcon(R.drawable.cloudy),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1633", "ground_truth": "            trailingText = name\r\n        ) {\r\n            CloudDetailsModal(context).show(cloud.value)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\ui\\fields\\CloudWeatherField.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.colors.AppColor\nimport com.kylecorry.trail_sense.shared.FormatService\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.views.list.ResourceListIcon\nimport com.kylecorry.andromeda.views.list.ListItem\nimport com.kylecorry.andromeda.sense.Sensors\nimport android.content.Context\noverride fun getListItem(context: Context): ListItem? {\r\n        humidity ?: return null\r\n        if (!Sensors.hasHygrometer(context)) {\r\n            return null\r\n        }\r\n\r\n        val formatter = FormatService.getInstance(context)\r\n        val value = formatter.formatPercentage(humidity)\r\n\r\n        return ListItem(\r\n            6,\r\n            context.getString(R.string.humidity),\r\n            icon = ResourceListIcon(R.drawable.ic_category_water, AppColor.Blue.color),\r", "choices": [{"text": "\n import com.kylecorry.trail_sense.shared.colors.AppColor\nimport com.kylecorry.trail_sense.shared.FormatService\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.andromeda.views.list.ResourceListIcon\nimport com.kylecorry.andromeda.views.list.ListItem\nimport com.kylecorry.andromeda.sense.Sensors\nimport android.content.Context\noverride fun getListItem(context: Context): ListItem? {\r\n        humidity?: return null\r\n        if (!Sensors.hasHygrometer(context)) {\r\n            return null\r\n        }\r\n\r\n        val formatter = FormatService.getInstance(context)\r\n        val value = formatter.formatPercentage(humidity)\r\n\r\n        return ListItem(\r\n            6,\r\n            context.getString(R.string.humidity),\r\n            icon = ResourceListIcon(R.drawable.ic_category_water, AppColor.Blue.color),\r\n//            icon = ResourceListIcon(R.drawable.ic_category_water, AppColor.Blue.color),\r\n            value = value,\r\n            secondaryValue = context.getString(R.string.percent),\r\n            onClick = {\r\n                context.startActivity(Intent(context, HumidityActivity::class.java))\r\n            }\r\n        )\r\n    }\n<file_sep>/app/src/main/java/com/kylecorry/trail_sense/shared/sensors/SensorService.kt\npackage com.kylecorry.trail_sense.shared.sensors\n\nimport android.content.Context\nimport"}], "metadata": {"task_id": "Trail-Sense/1634", "ground_truth": "            trailingText = value\r\n        ) {\r\n            onClick()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\ui\\fields\\HumidityWeatherField.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.shared.extensions.getOrNull\nimport com.kylecorry.trail_sense.shared.FeatureState\nprivate fun updateStatusBar() {\r\n        binding.weatherPlayBar.setState(\r\n            weatherSubsystem.weatherMonitorState.getOrNull() ?: FeatureState.Off,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1636", "ground_truth": "            weatherSubsystem.weatherMonitorFrequency.getOrNull()\r\n        )\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\ui\\WeatherFragment.kt"}}
{"prompt": "\nvar units\nvar chart PressureChart\nval temperatureUnits\n override fun onPause() {\r\n        super.onPause()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1638", "ground_truth": "        logger.stop()\r\n        loadingIndicator.hide()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\ui\\WeatherFragment.kt"}}
{"prompt": "\n import java.time.Instant\nimport java.time.Duration\nimport com.kylecorry.trail_sense.R\nimport com.kylecorry.sol.units.Reading\nimport com.kylecorry.andromeda.fragments.inBackground\nimport com.kylecorry.andromeda.core.coroutines.onIO\nprivate fun updateWeather() {\r\n        inBackground {\r\n            onIO {\r\n                history = weatherSubsystem.getHistory().filter {\r\n                    Duration.between(it.time, Instant.now()) <= prefs.weather.pressureHistory\r\n                }\r\n\r\n                loadRawWeatherReadings()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1639", "ground_truth": "\r\n                weather = weatherSubsystem.getWeather()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\ui\\WeatherFragment.kt"}}
{"prompt": "\n import com.kylecorry.trail_sense.tools.weather.ui.charts.PressureChart\nimport com.kylecorry.sol.units.Pressure\noverride fun onUpdate() {\r\n        super.onUpdate()\r\n\r\n        effect(\"chart\", history, rawHistory) {\r\n            displayPressureChart(history, rawHistory)\r\n        }\r\n\r\n        effect(\"list\", weather) {\r\n            updateList()\r\n        }\r\n\r\n        effect(\"forecast\", weather) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1640", "ground_truth": "            inBackground {\r\n                updateForecast()\r\n            }\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\ui\\WeatherFragment.kt"}}
{"prompt": " import com.kylecorry.andromeda.fragments.inBackground\nval temperatureUnits\nval weatherSubsystem\nval prefs\nprivate fun showTemperatureForecast() {\r\n        inBackground {\r", "choices": [{"text": "//            val forecast = weatherSubsystem.getForecast(prefs.location)\r\n//            val temperature = forecast.temperature\r\n//            val unit = temperatureUnits.getUnit(temperature)\r\n//            val temperatureString = temperatureUnits.format(temperature, unit)\r\n//            val temperatureView = findViewById<TextView>(R.id.temperature)\r\n//            temperatureView.text = temperatureString\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1642", "ground_truth": "            ShowHighLowTemperatureDialogCommand(this@WeatherFragment).execute()\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\weather\\ui\\WeatherFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.R\nvar whistle ISoundPlayer?\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nwhistle = SoundPlayer(this)\r\nwhistle?.play(R.raw.whistle)\r\n}\n"}], "metadata": {"task_id": "Trail-Sense/1643", "ground_truth": "        super.onResume()\r\n        CustomUiUtils.setButtonState(button, false)\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\whistle\\quickactions\\QuickActionWhistle.kt"}}
{"prompt": "\nvar whistle ISoundPlayer?\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nwhistle?.stop()\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nwhistle = SoundPlayer(this)\r\nwhistle?.play(R.raw.whistle)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1644", "ground_truth": "        super.onPause()\r\n        whistle?.off()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\whistle\\quickactions\\QuickActionWhistle.kt"}}
{"prompt": "\nvar whistle ISoundPlayer?\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nwhistle?.stop()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1645", "ground_truth": "        super.onDestroy()\r\n        whistle?.release()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\whistle\\quickactions\\QuickActionWhistle.kt"}}
{"prompt": "\nval emergencySignal\nvar whistle ISoundPlayer?\nval sosSignal\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nwhistle?.stop()\r\n}\r\noverride fun onPause() {\r\nsuper.onPause()\r\nwhistle?.stop()\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nwhistle?.start()\r\n}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nwhistle = SoundPlayer(this)\r\nwhistle?.start()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1646", "ground_truth": "        super.onDestroy()\r\n        whistle?.release()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\whistle\\ui\\ToolWhistleFragment.kt"}}
{"prompt": "\nval morseDurationMs\nval whereAreYouAndAcknowledgedSignal\nval sosSignal\n override fun onPause() {\r\n        super.onPause()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Trail-Sense/1647", "ground_truth": "        whistle?.off()\r\n        signalWhistle?.cancel()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\whistle\\ui\\ToolWhistleFragment.kt"}}
{"prompt": " import com.kylecorry.trail_sense.tools.whistle.infrastructure.Whistle\nimport com.kylecorry.trail_sense.shared.morse.Signals\nimport com.kylecorry.trail_sense.shared.morse.Signal\nvar signalWhistle SignalPlayer?\nvar whistle ISoundPlayer?\nval morseDurationMs\nprivate fun toggleOffInternationWhistleSignals() {\r\n        state = WhistleState.Off\r\n        signalWhistle?.cancel()\r", "choices": [{"text": "}\n\nprivate fun toggleOnInternationWhistleSignals() {\r\n        state = WhistleState.On\r\n        signalWhistle?.cancel()\r\n        signalWhistle = SignalPlayer(Signals.International)\r\n        signalWhistle?.play()\r\n}\n\nprivate fun toggleOffLocalWhistleSignals() {\r\n        state = WhistleState.Off\r\n        signalWhistle?.cancel()\r\n}\n\nprivate fun toggleOnLocalWhistleSignals() {\r\n        state = WhistleState.On\r\n        signalWhistle?.cancel()\r\n        signalWhistle = SignalPlayer"}], "metadata": {"task_id": "Trail-Sense/1649", "ground_truth": "        binding.whistleEmergencyBtn.setText(getText(R.string.help).toString())\r\n        updateUI()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\whistle\\ui\\ToolWhistleFragment.kt"}}
{"prompt": "\n import android.content.Intent\nimport android.content.Context\noverride fun onReceive(context: Context?, intent: Intent?) {\r", "choices": [{"text": "if (intent?.action == \"android.intent.action.BOOT_COMPLETED\") {\r\nval intent = Intent(context, MainActivity::class.java)\r\nintent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\ncontext?.startActivity(intent)\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1650", "ground_truth": "        context ?: return\r\n        context.stopService(WhiteNoiseService.intent(context))\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\whitenoise\\infrastructure\\WhiteNoiseOffReceiver.kt"}}
{"prompt": "\n import java.time.Instant\nimport java.time.Duration\nimport com.kylecorry.trail_sense.R\nimport android.content.Intent\noverride fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\r\n        super.onStartCommand(intent, flags, startId)\r\n        acquireWakelock()\r\n        isRunning = true\r\n        val stopAt = cache.getInstant(CACHE_KEY_OFF_TIME)\r\n        if (stopAt != null && Instant.now() < stopAt) {\r\n            offTimer.once(Duration.between(Instant.now(), stopAt))\r\n        }\r", "choices": [{"text": "\n import java.time.Instant\nimport java.time.Duration\nimport com.kylecorry.trail_sense.R\nimport android.content.Intent\noverride fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\r\n        super.onStartCommand(intent, flags, startId)\r\n        acquireWakelock()\r\n        isRunning = true\r\n        val stopAt = cache.getInstant(CACHE_KEY_OFF_TIME)\r\n        if (stopAt!= null && Instant.now() < stopAt) {\r\n            offTimer.once(Duration.between(Instant.now(), stopAt))\r\n        }\r\n"}], "metadata": {"task_id": "Trail-Sense/1651", "ground_truth": "\r\n        whiteNoise = PinkNoise()\r\n        whiteNoise?.fadeOn()\r\n        return START_STICKY\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\whitenoise\\infrastructure\\WhiteNoiseService.kt"}}
{"prompt": " import com.kylecorry.trail_sense.R\nval NOTIFICATION_ID\nval offTimer\nval NOTIFICATION_CHANNEL_ID\noverride fun onDestroy() {\r\n        releaseWakelock()\r\n        offTimer.stop()\r\n        isRunning = false\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Trail-Sense/1653", "ground_truth": "        whiteNoise?.fadeOff(true)\r\n        stopService(true)\r\n        clearSleepTimer(this)\r\n        super.onDestroy()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\whitenoise\\infrastructure\\WhiteNoiseService.kt"}}
{"prompt": " import com.kylecorry.trail_sense.R\nval intervalometer\noverride fun onResume() {\r\n        super.onResume()\r\n        if (!intervalometer.isRunning()) {\r", "choices": [{"text": "//            intervalometer.start()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Trail-Sense/1656", "ground_truth": "            intervalometer.interval(20)\r\n        }\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\whitenoise\\quickactions\\QuickActionWhiteNoise.kt"}}
{"prompt": "\nval intervalometer\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nintervalometer.stop()\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nintervalometer.start()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1657", "ground_truth": "        super.onPause()\r\n        intervalometer.stop()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\whitenoise\\quickactions\\QuickActionWhiteNoise.kt"}}
{"prompt": "\nval intervalometer\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nintervalometer.stop()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Trail-Sense/1658", "ground_truth": "        super.onDestroy()\r\n        onPause()\r\n    }", "fpath": "Trail-Sense\\app\\src\\main\\java\\com\\kylecorry\\trail_sense\\tools\\whitenoise\\quickactions\\QuickActionWhiteNoise.kt"}}
{"prompt": "\nval unixTime Long\nval rateLimitTime Long\nval iconBackgroundId Int\n private fun String?.removeAds(): String? {\r", "choices": [{"text": "if (this == null) return null\r\nreturn this.replace(\"https://cdn.discordapp.com/attachments/750511991156445204/750512000121290782/ads.png\", \"\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "QuickNovel/0", "ground_truth": "    if (this.isNullOrBlank()) return null\r\n    return this.replace(\"(adsbygoogle = window.adsbygoogle || []).push({});\", \"\")\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\APIRepository.kt"}}
{"prompt": " import com.lagradost.quicknovel.mvvm.safeApiCall\nimport com.lagradost.quicknovel.mvvm.Resource\nval name String\nval hasReviews Boolean\nval mainCategories List<Pair<String, String>>\nsuspend fun search(query: String): Resource<List<SearchResponse>> {\r\n        return safeApiCall {\r", "choices": [{"text": "//            api.search(query)\r\n            api.search(query)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "QuickNovel/1", "ground_truth": "            api.search(query) ?: throw ErrorLoadingException(\"No data\")\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\APIRepository.kt"}}
{"prompt": "\nval hasReviews Boolean\nval mainUrl String\nval iconId Int?\n suspend fun loadHtml(url: String): String? {\r\n        return try {\r\n            api.loadHtml(api.fixUrl(url))?.removeAds()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/2", "ground_truth": "        } catch (e: Exception) {\r\n            logError(e)\r\n            null\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\APIRepository.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.mvvm.safeApiCall\nimport com.lagradost.quicknovel.mvvm.Resource\nsuspend fun loadReviews(\r\n        url: String,\r\n        page: Int,\r\n        showSpoilers: Boolean = false\r\n    ): Resource<List<UserReview>> {\r\n        return safeApiCall {\r", "choices": [{"text": "//            val response = api.getReviews(url, page, showSpoilers)\r\n            val response = api.getReviews(url, page, showSpoilers)\r\n            response.body()?.let {\r\n                Resource.Success(it)\r\n            }?: Resource.Error(Exception(\"No reviews found\"))\r\n        }\r\n    }\n"}], "metadata": {"task_id": "QuickNovel/3", "ground_truth": "            api.loadReviews(url, page, showSpoilers)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\APIRepository.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.mvvm.safeApiCall\nimport com.lagradost.quicknovel.mvvm.Resource\nsuspend fun loadMainPage(\r\n        page: Int,\r\n        mainCategory: String?,\r\n        orderBy: String?,\r\n        tag: String?,\r\n    ): Resource<HeadMainPageResponse> {\r\n        return safeApiCall {\r", "choices": [{"text": "//            apiService.getMainPage(page, mainCategory, orderBy, tag)\r\n            apiService.getMainPage(page, mainCategory, orderBy, tag)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "QuickNovel/4", "ground_truth": "            api.loadMainPage(page, mainCategory, orderBy, tag)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\APIRepository.kt"}}
{"prompt": "\n import android.content.Context\noverride fun attachBaseContext(base: Context?) {\r", "choices": [{"text": "super.attachBaseContext(base)\r\nMultiDex.install(this)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "QuickNovel/5", "ground_truth": "        super.attachBaseContext(base)\r\n        context = base\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BaseApplication.kt"}}
{"prompt": "\n import java.io.File\nimport nl.siegmann.epublib.domain.Book\nimport nl.siegmann.epublib.domain.Author\nimport com.lagradost.quicknovel.BookDownloader2Helper.generateId\nfun generateId(apiName: String, author: String?, name: String): Int {\r\n        val sApiname = sanitizeFilename(apiName)\r\n        val sAuthor = if (author == null) \"\" else sanitizeFilename(author)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/8", "ground_truth": "        val sName = sanitizeFilename(name)\r\n        return \"$sApiname$sAuthor$sName\".hashCode()\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "\n import androidx.core.app.ActivityCompat\nimport android.app.Activity\nimport android.Manifest.permission.WRITE_EXTERNAL_STORAGE\nfun Activity.requestRW() {\r\n        ActivityCompat.requestPermissions(\r\n            this,\r\n            arrayOf(\r\n                WRITE_EXTERNAL_STORAGE,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/10", "ground_truth": "                READ_EXTERNAL_STORAGE\r\n            ),\r\n            1337\r\n        )\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "\n import java.io.File\nimport androidx.annotation.RequiresApi\nimport android.os.Build\nimport android.net.Uri\nimport android.content.ContentResolver\n @RequiresApi(Build.VERSION_CODES.Q)\r\n    fun ContentResolver.getFileLength(fileUri: Uri): Long? {\r\n        return try {\r\n            this.openFileDescriptor(fileUri, \"r\")\r", "choices": [{"text": "?.fileDescriptor?.let { fileDescriptor ->\r\n                val stat = StatFs(fileDescriptor)\r\n                stat.blockSizeLong * stat.blockCountLong\r\n            }\r\n        } catch (e: Exception) {\r\n            null\r\n        }\r\n    }\n"}], "metadata": {"task_id": "QuickNovel/11", "ground_truth": "                .use { it?.statSize ?: 0 }\r\n        } catch (e: Exception) {\r\n            null\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.CommonActivity.activity\nimport android.net.Uri\nimport android.content.Intent\nimport android.app.Activity\nfun openQuickStream(activity: Activity?, uri: Uri?) {\r\n        if (uri == null || activity == null) return\r\n        val myIntent = Intent(activity, ReadActivity2::class.java)\r", "choices": [{"text": "//        myIntent.putExtra(\"uri\", uri.toString())\r\n        myIntent.putExtra(\"uri\", uri.toString())\r\n        activity.startActivity(myIntent)\r\n    }<file_sep>/app/src/main/java/com/lagradost/quicknovel/CommonActivity/activity/ReadActivity2.kt\npackage com.lagradost.quicknovel.CommonActivity.activity\n\nimport android.content.Intent\nimport android.net.Uri\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\n"}], "metadata": {"task_id": "QuickNovel/12", "ground_truth": "        myIntent.setDataAndType(uri, \"quickstream\")\r\n        activity.startActivity(myIntent)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "\n import androidx.annotation.WorkerThread\n @WorkerThread\r\n    suspend fun stream(res: LoadResponse, apiName: String) {\r\n        when (res) {\r\n            is StreamResponse -> {\r\n                stream(res, apiName)\r\n            }\r\n\r", "choices": [{"text": ""}], "metadata": {"task_id": "QuickNovel/16", "ground_truth": "            is EpubResponse -> {\r\n                stream(res, apiName)\r\n            }\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": " import androidx.annotation.WorkerThread\nval CHANNEL_ID\nval CHANNEL_NAME\nval streamResultMutex\n @WorkerThread\r\n    suspend fun stream(res: EpubResponse, apiName: String) {\r", "choices": [{"text": "//        val result = res.result\r\n//        val result = res.result\r\n//        val result = res.result\r\n//        val result = res.result\r\n//        val result = res.result\r\n//        val result = res.result\r\n//        val result = res.result\r\n//        val result = res.result\r\n//        val result = res.result\r\n//        val result = res.result\r\n//        val result = res.result\r\n//        val result = res.result\r\n//        val result = res."}], "metadata": {"task_id": "QuickNovel/17", "ground_truth": "        downloadAsync(res, getApiFromName(apiName))\r\n        readEpub(res.author, res.name, apiName)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.CommonActivity.showToast\nimport android.widget.Toast\nprivate fun generateAndReadEpub(author: String?, name: String, apiName: String) {\r\n        showToast(R.string.generating_epub)\r\n        if (!turnToEpub(author, name, apiName)) {\r", "choices": [{"text": "//            showToast(R.string.epub_generation_failed)\r\n        } else {\r\n            showToast(R.string.epub_generation_success)\r\n        }\r\n    }\r\nprivate fun turnToEpub(author: String?, name: String, apiName: String): Boolean {\r\n        val epub = Epub(author, name, apiName)\r\n        return epub.generateEpub()\r\n    }\r\n//    private fun turnToEpub(author: String?, name: String, apiName: String): Boolean {\r\n//        val epub = Epub(author"}], "metadata": {"task_id": "QuickNovel/19", "ground_truth": "            showToast(R.string.error_loading_novel)\r\n            return\r\n        }\r\n        openEpub(name)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "\nval readEpubMutex\nval CHANNEL_ID\nval LOCAL_EPUB_MIN_SIZE Long\n private fun readEpub(author: String?, name: String, apiName: String) {\r\n        if (hasEpub(name)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/20", "ground_truth": "            openEpub(name)\r\n        } else {\r\n            generateAndReadEpub(author, name, apiName)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "\n import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nimport com.lagradost.quicknovel.BaseApplication.Companion.getKey\nimport androidx.annotation.WorkerThread\n @WorkerThread\r\n    suspend fun readEpub(\r\n        id: Int,\r\n        downloadedCount: Int,\r\n        author: String?,\r\n        name: String,\r\n        apiName: String\r\n    ) {\r\n        if (readEpubMutex.isLocked) return\r\n        readEpubMutex.withLock {\r\n            val downloaded = getKey(DOWNLOAD_EPUB_SIZE, id.toString(), 0)!!\r\n            val shouldUpdate = downloadedCount - downloaded != 0\r\n            if (shouldUpdate) {\r\n                generateAndReadEpub(author, name, apiName)\r", "choices": [{"text": "\n import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nimport com.lagradost.quicknovel.BaseApplication.Companion.getKey\nimport androidx.annotation.WorkerThread\n @WorkerThread\r\n    suspend fun readEpub(\r\n        id: Int,\r\n        downloadedCount: Int,\r\n        author: String?,\r\n        name: String,\r\n        apiName: String\r\n    ) {\r\n        if (readEpubMutex.isLocked) return\r\n        readEpubMutex.withLock {\r\n            val downloaded = getKey(DOWNLOAD_EPUB_SIZE, id.toString(), 0)!!\r\n            val shouldUpdate = downloadedCount - downloaded!= 0\r\n            if (shouldUpdate) {\r\n                generateAndReadEpub(author, name, apiName)\r\n//                val epub = getEpub(id)\r\n//                if (epub!= null) {\r\n//                    val epubFile = File(getEpubPath(id))\r\n//                    if (epubFile.exists()) {\r\n//                        epubFile.delete()\r\n//                    }\r\n//                    epubFile.createNewFile()\r\n//                    epubFile.writeBytes(epub)\r\n//                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private suspend fun generateAndReadEpub(author: String?, name: String, apiName:"}], "metadata": {"task_id": "QuickNovel/21", "ground_truth": "            } else {\r\n                readEpub(author, name, apiName)\r\n            }\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "\n import nl.siegmann.epublib.domain.Book\nimport com.lagradost.quicknovel.CommonActivity.activity\nprivate fun openEpub(name: String, openInApp: Boolean? = null) {\r\n        if (!BookDownloader2Helper.openEpub(activity, name, openInApp)) {\r", "choices": [{"text": "//            Toast.makeText(activity, \"Epub not found\", Toast.LENGTH_SHORT).show()\r\n            activity.startActivity(Intent(activity, NovelActivity::class.java).apply {\r\n                putExtra(NovelActivity.EXTRA_NOVEL_NAME, name)\r\n            })\r\n        }\r\n    }\n"}], "metadata": {"task_id": "QuickNovel/22", "ground_truth": "            showToast(R.string.error_loading_novel)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "\n import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nprivate suspend fun addPendingActionAsync(id: Int, action: DownloadActionType) {\r\n        currentDownloadsMutex.withLock {\r\n            if (!currentDownloads.contains(id)) {\r\n                return\r\n            }\r\n        }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/23", "ground_truth": "\r\n        pendingActionMutex.withLock {\r\n            pendingAction[id] = action\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.CommonActivity.activity\nprivate suspend fun createNotification(\r\n        id: Int,\r\n        load: LoadResponse,\r\n        stateProgressState: DownloadProgressState,\r\n        show: Boolean = true,\r\n        progressInBytes: Boolean = false\r\n    ) {\r\n        NotificationHelper.createNotification(\r\n            activity,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/24", "ground_truth": "            load.url, id, load, stateProgressState, show, progressInBytes\r\n        )\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "\n import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nprivate suspend fun consumeAction(id: Int): DownloadActionType? {\r\n        pendingActionMutex.withLock {\r\n            pendingAction[id]?.let { action ->\r\n                pendingAction -= id\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/25", "ground_truth": "                return action\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "\n import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nprivate suspend fun changeDownload(\r\n        id: Int,\r\n        action: DownloadProgressState.() -> Unit\r\n    ): DownloadProgressState? {\r\n        val data = downloadInfoMutex.withLock {\r\n            downloadProgress[id]?.apply {\r\n                action()\r\n                lastUpdatedMs = System.currentTimeMillis()\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/26", "ground_truth": "        }\r\n\r\n        downloadProgressChanged.invoke(Pair(id, data ?: return null))\r\n        return data\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": "\n fun download(load: LoadResponse, api: APIRepository) {\r\n        when (load) {\r\n            is StreamResponse -> {\r\n                download(load, api, 0 until load.data.size)\r\n            }\r\n\r\n            is EpubResponse -> {\r\n                download(load, api)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/27", "ground_truth": "            }\r\n\r\n            else -> throw NotImplementedError()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\BookDownloader2.kt"}}
{"prompt": " import androidx.annotation.StringRes\nimport androidx.annotation.MainThread\nimport android.widget.Toast\nimport android.app.Activity\nvar currentToast Toast?\nval TAG\nvar _activity WeakReference<Activity>?\n @MainThread\r\n    fun showToast(act: Activity?, @StringRes message: Int, duration: Int? = null) {\r", "choices": [{"text": "_activity = WeakReference(act)\r\n        if (duration == null) {\r\n            Toast.makeText(act, message, Toast.LENGTH_SHORT).show()\r\n        } else {\r\n            Toast.makeText(act, message, duration).show()\r\n        }\r\n    }\r\n\r\n    fun showToast(message: String, duration: Int? = null) {\r\n        if (duration == null) {\r\n            Toast.makeText(_activity?.get(), message, Toast.LENGTH_SHORT).show()\r\n        } else {\r\n            Toast.makeText(_activity?.get(), message, duration).show()\r\n        }\r\n    }\r\n\r\n    fun showToast(message"}], "metadata": {"task_id": "QuickNovel/29", "ground_truth": "        if (act == null) return\r\n        showToast(act, act.getString(message), duration)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\CommonActivity.kt"}}
{"prompt": " import android.content.Context\nval mapper JsonMapper\nfun Context.containsKey(path: String): Boolean {\r", "choices": [{"text": "return this.getSharedPreferences(path, Context.MODE_PRIVATE).contains(path)\r\n}\r\nfun Context.put(path: String, key: String, value: String) {\r\nval editor = this.getSharedPreferences(path, Context.MODE_PRIVATE).edit()\r\neditor.putString(key, value)\r\neditor.apply()\r\n}\r\nfun Context.get(path: String, key: String): String? {\r\nreturn this.getSharedPreferences(path, Context.MODE_PRIVATE).getString(key, null)\r\n}\r\nfun Context"}], "metadata": {"task_id": "QuickNovel/30", "ground_truth": "        val prefs = getSharedPrefs()\r\n        return prefs.contains(path)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\DataStore.kt"}}
{"prompt": " import android.content.SharedPreferences\nimport android.content.Context\nval mapper JsonMapper\nfun Context.removeKey(path: String) {\r\n        try {\r\n            val prefs = getSharedPrefs()\r\n            if (prefs.contains(path)) {\r\n                val editor: SharedPreferences.Editor = prefs.edit()\r\n                editor.remove(path)\r\n                editor.apply()\r", "choices": [{"text": "//                editor.commit()\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "QuickNovel/31", "ground_truth": "            }\r\n        } catch (e: Exception) {\r\n            logError(e)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\DataStore.kt"}}
{"prompt": " import android.content.Context\nval mapper JsonMapper\nfun Context.removeKeys(folder: String): Int {\r\n        val keys = getKeys(folder)\r", "choices": [{"text": "//        val keys = getKeys(folder).filter { it.contains(\"1500000000000\") }\r\n        keys.forEach {\r\n            removeKey(folder, it)\r\n        }\r\n        return keys.size\r\n    }\r\nfun Context.getKeys(folder: String): List<String> {\r\n        val keys = mutableListOf<String>()\r\n        val file = File(filesDir, folder)\r\n        if (file.exists()) {\r\n            file.listFiles()?.forEach {\r\n                keys.add(it.name)\r\n            }\r\n        }\r\n        return keys\r\n    }\r\nfun"}], "metadata": {"task_id": "QuickNovel/32", "ground_truth": "        keys.forEach { value ->\r\n            removeKey(value)\r\n        }\r\n        return keys.size\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\DataStore.kt"}}
{"prompt": " import android.content.SharedPreferences\nimport android.content.Context\nval mapper JsonMapper\nfun <T> Context.setKey(path: String, value: T) {\r\n        try {\r\n            val editor: SharedPreferences.Editor = getSharedPrefs().edit()\r\n            editor.putString(path, mapper.writeValueAsString(value))\r", "choices": [{"text": "//            editor.apply()\r\n            editor.commit()\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\nfun <T> Context.getKey(path: String, type: Class<T>): T? {\r\n        try {\r\n            val json = getSharedPrefs().getString(path, \"\")\r\n            return if (json.isEmpty()) null else mapper.readValue(json, type)\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n            return null\r\n        }\r\n    }\nfun Context.getSharedPrefs(): SharedPreferences {\r\n        return getSharedPreferences(\"com.example.myapplication"}], "metadata": {"task_id": "QuickNovel/33", "ground_truth": "            editor.apply()\r\n        } catch (e: Exception) {\r\n            logError(e)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\DataStore.kt"}}
{"prompt": " import android.content.Context\nval mapper JsonMapper\ninline fun <reified T : Any> Context.getKey(path: String, defVal: T?): T? {\r\n        try {\r\n            val json: String = getSharedPrefs().getString(path, null) ?: return defVal\r", "choices": [{"text": " import android.content.Context\nval mapper JsonMapper\ninline fun <reified T : Any> Context.getKey(path: String, defVal: T?): T? {\r\n        try {\r\n            val json: String = getSharedPrefs().getString(path, null)?: return defVal\r\n//            return mapper.readValue(json, T::class.java)\r\n            return mapper.readValue(json, T::class.java)\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n            return defVal\r\n        }\r\n    }\r\ninline fun <reified T : Any> Context.putKey(path: String, value: T) {\r\n        try {\r\n            val json = mapper.writeValueAsString(value)\r\n            getSharedPrefs().edit().putString(path, json).apply()\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "QuickNovel/34", "ground_truth": "            return json.toKotlinObject()\r\n        } catch (e: Exception) {\r\n            return null\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\DataStore.kt"}}
{"prompt": " import android.content.Context\nval mapper JsonMapper\nfun <T> Context.getKey(path: String, valueType: Class<T>): T? {\r\n        try {\r\n            val json: String = getSharedPrefs().getString(path, null) ?: return null\r", "choices": [{"text": " import android.content.Context\nval mapper JsonMapper\nfun <T> Context.getKey(path: String, valueType: Class<T>): T? {\r\n        try {\r\n            val json: String = getSharedPrefs().getString(path, null)?: return null\r\n//            val json = getSharedPrefs().getString(path, null)?: return null\r\n            return mapper.readValue(json, valueType)\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n            return null\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "QuickNovel/35", "ground_truth": "            return json.toKotlinObject(valueType)\r\n        } catch (e: Exception) {\r\n            return null\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\DataStore.kt"}}
{"prompt": "\n fun ExtractorApi.fixUrl(url: String): String {\r\n    if (url.startsWith(\"http\") ||\r\n        // Do not fix JSON objects when passed as urls.\r\n        url.startsWith(\"{\\\"\")\r\n    ) {\r\n        return url\r\n    }\r\n    if (url.isEmpty()) {\r\n        return \"\"\r\n    }\r\n\r\n    val startsWithNoHttp = url.startsWith(\"//\")\r\n    if (startsWithNoHttp) {\r\n        return \"https:$url\"\r\n    } else {\r\n        if (url.startsWith('/')) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/36", "ground_truth": "            return mainUrl + url\r\n        }\r\n        return \"$mainUrl/$url\"\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\extractors\\ExtractorApi.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.DownloadLinkType\nimport com.lagradost.quicknovel.DownloadLink\nimport com.lagradost.quicknovel.DownloadExtractLink\nimport androidx.annotation.WorkerThread\n @WorkerThread\r\n    suspend fun getSafeUrl(\r\n        link: DownloadExtractLink\r\n    ): List<DownloadLinkType> {\r\n        return try {\r\n            getUrl(link) ?: emptyList()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/37", "ground_truth": "        } catch (e: Exception) {\r\n            logError(e)\r\n            emptyList()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\extractors\\ExtractorApi.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.get\nimport com.lagradost.quicknovel.DownloadLinkType\nimport com.lagradost.quicknovel.DownloadLink\nimport com.lagradost.quicknovel.DownloadExtractLink\nimport androidx.annotation.WorkerThread\n @WorkerThread\r\n    override suspend fun getUrl(link : DownloadExtractLink): List<DownloadLinkType>? {\r\n        val document = link.get().document\r\n        val url = fixUrlNull(document.selectFirst(\"tbody>tr>td>a\")?.attr(\"href\"))\r\n        return listOf(\r\n            DownloadLink(\r\n                url = url ?: return null,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/38", "ground_truth": "                name = name,\r\n                kbPerSec = 200\r\n            )\r\n        )\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\extractors\\LibgenLi.kt"}}
{"prompt": "\n import java.io.File\nimport com.lagradost.quicknovel.util.UIHelper.parseFontFileName\nimport android.widget.TextView\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun getView(position: Int, convertView: View?, parent: ViewGroup?): View {\r\n        val view =\r\n            (convertView ?: LayoutInflater.from(context)\r\n                .inflate(R.layout.sort_bottom_single_choice, parent, false)) as TextView\r\n\r\n        val font = fonts[position]\r\n        view.text = parseFontFileName(font?.name)\r\n        view.isSelected = position == checked\r", "choices": [{"text": "\n import java.io.File\nimport com.lagradost.quicknovel.util.UIHelper.parseFontFileName\nimport android.widget.TextView\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun getView(position: Int, convertView: View?, parent: ViewGroup?): View {\r\n        val view =\r\n            (convertView?: LayoutInflater.from(context)\r\n               .inflate(R.layout.sort_bottom_single_choice, parent, false)) as TextView\r\n\r\n        val font = fonts[position]\r\n        view.text = parseFontFileName(font?.name)\r\n        view.isSelected = position == checked\r\n//        view.setOnClickListener {\r\n//            checked = position\r\n//            notifyDataSetChanged()\r\n//        }\r\n        return view\r\n    }\n"}], "metadata": {"task_id": "QuickNovel/39", "ground_truth": "        if (font != null) {\r\n            view.typeface = Typeface.createFromFile(font)\r\n        }\r\n        return view\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\FontAdapter.kt"}}
{"prompt": "\n import androidx.navigation.fragment.NavHostFragment\nimport androidx.fragment.app.FragmentActivity\nimport androidx.annotation.IdRes\nimport android.os.Bundle\nimport android.app.Activity\nfun Activity?.navigate(@IdRes navigation: Int, arguments: Bundle? = null) {\r\n            try {\r\n                if (this is FragmentActivity) {\r\n                    val navHostFragment = supportFragmentManager.findFragmentById(R.id.nav_host_fragment) as? NavHostFragment?\r\n                    navHostFragment?.navController?.navigate(navigation, arguments)\r", "choices": [{"text": "//                    navHostFragment?.navController?.navigate(navigation, arguments)\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            }\r\n        }<file_sep>/app/src/main/java/com/example/myapplication/ui/home/HomeFragment.kt\npackage com.example.myapplication.ui.home\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Toast\nimport androidx.fragment.app.Fragment\nimport androidx.lifecycle.Observer\nimport androidx"}], "metadata": {"task_id": "QuickNovel/40", "ground_truth": "                }\r\n            } catch (t: Throwable) {\r\n                logError(t)\r\n            }\r\n        }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\MainActivity.kt"}}
{"prompt": "\nvar bottomPreviewPopup BottomSheetDialog?\nvar bottomPreviewBinding BottomPreviewBinding?\nvar navOptions NavOptions\n private fun hidePreviewPopupDialog() {\r", "choices": [{"text": "bottomPreviewPopup?.dismiss()\r\n}\n"}], "metadata": {"task_id": "QuickNovel/41", "ground_truth": "        viewModel.clear()\r\n        bottomPreviewPopup.dismissSafe(this)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\MainActivity.kt"}}
{"prompt": "\nval viewModel ResultViewModel\nvar bottomPreviewBinding BottomPreviewBinding?\nvar app\n override fun onResume() {\r\n        super.onResume()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "QuickNovel/42", "ground_truth": "        activity = this\r\n        mainActivity = this\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\MainActivity.kt"}}
{"prompt": " import android.content.Intent\nvar _mainActivity WeakReference<MainActivity>?\nvar mainActivity\nvar navOptions NavOptions\noverride fun onNewIntent(intent: Intent?) {\r", "choices": [{"text": "super.onNewIntent(intent)\r\n_mainActivity?.get()?.onNewIntent(intent)\r\n}\n"}], "metadata": {"task_id": "QuickNovel/43", "ground_truth": "        handleIntent(intent)\r\n        super.onNewIntent(intent)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\MainActivity.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.util.Coroutines.main\nimport androidx.navigation.NavDestination\nprivate fun updateNavBar(destination: NavDestination) {\r\n        //this.hideKeyboard()\r\n\r\n        val isNavVisible = listOf(\r\n            R.id.navigation_mainpage,\r\n            R.id.navigation_homepage,\r\n            R.id.navigation_history,\r\n            R.id.navigation_download,\r\n            R.id.navigation_search,\r\n            R.id.navigation_settings,\r\n        ).contains(destination.id)\r", "choices": [{"text": "//        val isNavVisible = destination.id == R.id.navigation_mainpage || destination.id == R.id.navigation_homepage || destination.id == R.id.navigation_history || destination.id == R.id.navigation_download || destination.id == R.id.navigation_search || destination.id == R.id.navigation_settings\r\n        if (isNavVisible) {\r\n            binding.bottomNav.visibility = View.VISIBLE\r\n        } else {\r\n            binding.bottomNav.visibility = View.GONE\r\n        }\r\n    }\n"}], "metadata": {"task_id": "QuickNovel/44", "ground_truth": "\r\n        binding?.apply {\r\n            navView.isVisible = isNavVisible\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\MainActivity.kt"}}
{"prompt": "\nval rateLimitTime Long\nval posterUrl String?\nval usesCloudFlareKiller\n fun MainAPI.fixUrlNull(url: String?): String? {\r\n    if (url.isNullOrEmpty()) {\r\n        return null\r", "choices": [{"text": "}\r\n    return url\r\n}\n"}], "metadata": {"task_id": "QuickNovel/46", "ground_truth": "    }\r\n    return fixUrl(url)\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\MainAPI.kt"}}
{"prompt": "\n fun MainAPI.fixUrl(url: String): String {\r\n    if (url.startsWith(\"http\")) {\r\n        return url\r\n    }\r\n\r\n    val startsWithNoHttp = url.startsWith(\"//\")\r\n    if (startsWithNoHttp) {\r\n        return \"https:$url\"\r\n    } else {\r\n        if (url.startsWith('/')) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/47", "ground_truth": "            return mainUrl + url\r\n        }\r\n        return \"$mainUrl/$url\"\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\MainAPI.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.BuildConfig\ninline fun debugException(message: () -> String) {\r\n    if (BuildConfig.DEBUG) {\r", "choices": [{"text": "//        throw RuntimeException(message())\r\n    }\r\n}\n"}], "metadata": {"task_id": "QuickNovel/48", "ground_truth": "        throw DebugException(message.invoke())\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.BuildConfig\ninline fun debugWarning(message: () -> String) {\r\n    if (BuildConfig.DEBUG) {\r", "choices": [{"text": "//        Log.w(TAG, message())\r\n    }\r\n}\n"}], "metadata": {"task_id": "QuickNovel/49", "ground_truth": "        logError(DebugException(message.invoke()))\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.BuildConfig\ninline fun debugAssert(assert: () -> Boolean, message: () -> String) {\r\n    if (BuildConfig.DEBUG && assert.invoke()) {\r", "choices": [{"text": "//        throw AssertionError(message.invoke())\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "QuickNovel/50", "ground_truth": "        throw DebugException(message.invoke())\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.BuildConfig\ninline fun debugWarning(assert: () -> Boolean, message: () -> String) {\r\n    if (BuildConfig.DEBUG && assert.invoke()) {\r", "choices": [{"text": "//        Log.w(TAG, message.invoke())\r\n    }\r\n}\n"}], "metadata": {"task_id": "QuickNovel/51", "ground_truth": "        logError(DebugException(message.invoke()))\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "\n inline fun <reified T : Any> some(value: T?): Some<T> {\r\n    return if (value == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/52", "ground_truth": "        Some.None\r\n    } else {\r\n        Some.Success(value)\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "\n override fun toString(): String {\r\n        return when (this) {\r\n            is None -> \"None\"\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/53", "ground_truth": "            is Success -> \"Some(${value.toString()})\"\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "\n fun <T> normalSafeApiCall(apiCall: () -> T): T? {\r\n    return try {\r\n        apiCall.invoke()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/55", "ground_truth": "    } catch (throwable: Throwable) {\r\n        logError(throwable)\r\n        return null\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "\n suspend fun <T> suspendSafeApiCall(apiCall: suspend () -> T): T? {\r\n    return try {\r\n        apiCall.invoke()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/56", "ground_truth": "    } catch (throwable: Throwable) {\r\n        logError(throwable)\r\n        return null\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "\n import kotlin.coroutines.EmptyCoroutineContext\nimport kotlin.coroutines.CoroutineContext\nfun CoroutineScope.launchSafe(\r\n    context: CoroutineContext = EmptyCoroutineContext,\r\n    start: CoroutineStart = CoroutineStart.DEFAULT,\r\n    block: suspend CoroutineScope.() -> Unit\r\n): Job {\r\n    val obj: suspend CoroutineScope.() -> Unit = {\r\n        try {\r\n            block()\r\n        } catch (e: Exception) {\r\n            logError(e)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/58", "ground_truth": "        }\r\n    }\r\n\r\n    return this.launch(context, start, obj)\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "\n suspend fun <T, V> Resource<T>.map(transform : suspend (T) -> V) : Resource<V> {\r\n    return when(this) {\r\n        is Resource.Failure -> Resource.Failure(this.isNetworkError,this.errorCode,this.errorResponse,this.errorString)\r\n        is Resource.Loading -> Resource.Loading(this.url)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/59", "ground_truth": "        is Resource.Success -> {\r\n            Resource.Success(transform(this.value))\r\n        }\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "\n fun <T, V> Resource<T>?.letInner(transform : (T) -> V) : V? {\r\n    return when(this) {\r\n        is Resource.Success -> {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/60", "ground_truth": "            transform(this.value)\r\n        }\r\n        else -> null\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.MainActivity.Companion.app\nimport com.lagradost.nicehttp.getHeaders\nimport com.lagradost.nicehttp.cookies\nprivate suspend fun proceed(request: Request, cookies: Map<String, String>): Response {\r\n        val userAgentMap = WebViewResolver.getWebViewUserAgent()?.let {\r\n            mapOf(\"user-agent\" to it)\r\n        } ?: emptyMap()\r\n\r\n        val headers =\r\n            getHeaders(request.headers.toMap() + userAgentMap, null, cookies + request.cookies)\r\n        return app.baseClient.newCall(\r", "choices": [{"text": "\n import com.lagradost.quicknovel.MainActivity.Companion.app\nimport com.lagradost.nicehttp.getHeaders\nimport com.lagradost.nicehttp.cookies\nprivate suspend fun proceed(request: Request, cookies: Map<String, String>): Response {\r\n        val userAgentMap = WebViewResolver.getWebViewUserAgent()?.let {\r\n            mapOf(\"user-agent\" to it)\r\n        }?: emptyMap()\r\n\r\n        val headers =\r\n            getHeaders(request.headers.toMap() + userAgentMap, null, cookies + request.cookies)\r\n        return app.baseClient.newCall(\r\n//            request.newBuilder().headers(headers).build()\r\n            request.newBuilder().headers(headers).build()\r\n        ).execute()\r\n    }\n"}], "metadata": {"task_id": "QuickNovel/64", "ground_truth": "            request.newBuilder()\r\n                .headers(headers)\r\n                .build()\r\n        ).await()\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\network\\CloudflareKiller.kt"}}
{"prompt": "\n import kotlinx.coroutines.runBlocking\nimport com.lagradost.quicknovel.BaseApplication.Companion.context\nimport com.lagradost.quicknovel.util.Coroutines.mainWork\nimport com.lagradost.quicknovel.util.Coroutines.main\n @JvmName(\"getWebViewUserAgent1\")\r\n        fun getWebViewUserAgent(): String? {\r\n            return webViewUserAgent ?: context?.let { ctx ->\r\n                runBlocking {\r\n                    mainWork {\r\n                        WebView(ctx).settings.userAgentString.also { userAgent ->\r\n                            webViewUserAgent = userAgent\r", "choices": [{"text": "\n import kotlinx.coroutines.runBlocking\nimport com.lagradost.quicknovel.BaseApplication.Companion.context\nimport com.lagradost.quicknovel.util.Coroutines.mainWork\nimport com.lagradost.quicknovel.util.Coroutines.main\n @JvmName(\"getWebViewUserAgent1\")\r\n        fun getWebViewUserAgent(): String? {\r\n            return webViewUserAgent?: context?.let { ctx ->\r\n                runBlocking {\r\n                    mainWork {\r\n                        WebView(ctx).settings.userAgentString.also { userAgent ->\r\n                            webViewUserAgent = userAgent\r\n//                            Log.d(\"getWebViewUserAgent\", \"userAgent: $userAgent\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\n"}], "metadata": {"task_id": "QuickNovel/65", "ground_truth": "                        }\r\n                    }\r\n                }\r\n            }\r\n        }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\network\\WebViewResolver.kt"}}
{"prompt": "\n import okhttp3.Request\nsuspend fun resolveUsingWebView(\r\n        url: String,\r\n        referer: String? = null,\r\n        method: String = \"GET\",\r\n        requestCallBack: (Request) -> Boolean = { false },\r\n    ): Pair<Request?, List<Request>> {\r\n        return resolveUsingWebView(\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/67", "ground_truth": "            requestCreator(method, url, referer = referer), requestCallBack\r\n        )\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\network\\WebViewResolver.kt"}}
{"prompt": "\n import okhttp3.Request\nimport com.lagradost.nicehttp.requestCreator\nfun WebResourceRequest.toRequest(): Request {\r\n    val webViewUrl = this.url.toString()\r\n\r\n    return requestCreator(\r", "choices": [{"text": "//        url = webViewUrl,\r\n        url = this.url.toString(),\r\n        method = this.method,\r\n        headers = this.headers.toMultimap(),\r\n        body = this.body?.readBytes()\r\n    )\r\n}\n"}], "metadata": {"task_id": "QuickNovel/68", "ground_truth": "        this.method,\r\n        webViewUrl,\r\n        this.requestHeaders,\r\n    )\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\network\\WebViewResolver.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.DownloadLinkType\nimport com.lagradost.quicknovel.DownloadLink\nimport com.lagradost.quicknovel.DownloadExtractLink\nprivate fun extract(url: String, name: String): DownloadLinkType {\r\n        return if (url.contains(\".epub\")) {\r\n            DownloadLink(\r\n                url = url,\r\n                name = name,\r\n                kbPerSec = 2\r\n            )\r\n        } else {\r\n            DownloadExtractLink(\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/70", "ground_truth": "                url = url,\r\n                name = name\r\n            )\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\providers\\AnnasArchive.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.MainActivity.Companion.app\noverride suspend fun loadHtml(url: String): String? {\r\n        val response = app.get(url)\r", "choices": [{"text": "return response.body?.string()\r\n    }\n"}], "metadata": {"task_id": "QuickNovel/75", "ground_truth": "        val document = Jsoup.parse(response.text)\r\n        return document.selectFirst(\"div.chapter-content\")?.html()\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\providers\\EngNovelProvider.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.MainActivity.Companion.app\noverride suspend fun loadHtml(url: String): String? {\r\n        val response = app.get(url)\r", "choices": [{"text": "return response.body?.string()\r\n    }\n"}], "metadata": {"task_id": "QuickNovel/77", "ground_truth": "        val document = Jsoup.parse(response.text)\r\n        return document.selectFirst(\"div.entry-content\")?.html()\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\providers\\KolNovelProvider.kt"}}
{"prompt": "\n override suspend fun loadHtml(url: String): String? {\r\n        val response = MainActivity.app.get(url)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/81", "ground_truth": "        val document = Jsoup.parse(response.text)\r\n        return document.selectFirst(\"div.chapter-content\")!!.html()\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\providers\\MNovelFreeProvider.kt"}}
{"prompt": "\n import org.jsoup.Jsoup\nimport com.lagradost.quicknovel.MainActivity.Companion.app\nprivate suspend fun getChapterData(url: String): List<ChapterData> {\r\n        val container = app.get(url).text\r\n        val doc = Jsoup.parse(container)\r\n        val root = doc.select(\"rootfile[full-path]\")\r\n\r\n        val rootPath = root.attr(\"full-path\")\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/84", "ground_truth": "\r\n        val mainUrl = url.removeSuffix(containerUrl)\r\n\r\n        return scrapeOPFList(mainUrl + rootPath)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\providers\\ReadAnyBookProvider.kt"}}
{"prompt": "\nval mainUrl\nval name\n fun getName(url: String?): String? {\r\n        return Regex(\"reddit\\\\.com/r/.*?/comments.*?/.*?/(.*)/\").find(\r", "choices": [{"text": "url?: \"\")?.groupValues?.get(1)\r\n    }\n"}], "metadata": {"task_id": "QuickNovel/87", "ground_truth": "            url ?: return null\r\n        )?.groupValues?.getOrNull(1)?.replace('_', ' ')\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\providers\\RedditProvider.kt"}}
{"prompt": "\n private fun findComment(url: String): String? {\r\n        val str = Regex(\"comment/(\\\\w*?)/\").find(url)?.groupValues?.get(1)\r\n            ?: Regex(\"comments/\\\\w*?/\\\\w*?/(\\\\w*?)/\").find(url)?.groupValues?.get(1)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/88", "ground_truth": "        if(str.isNullOrBlank() || str.length < 4) {\r\n            return null\r\n        }\r\n        return str\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\providers\\RedditProvider.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.MainActivity.Companion.app\noverride suspend fun loadHtml(url: String): String? {\r\n        val response = app.get(url)\r", "choices": [{"text": "return response.body?.string()\r\n    }\n"}], "metadata": {"task_id": "QuickNovel/89", "ground_truth": "        val document = Jsoup.parse(response.text)\r\n        return document.selectFirst(\"div.entry-content\")?.html()\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\providers\\RewayatArProvider.kt"}}
{"prompt": "\n import android.graphics.Color\noverride fun onColorSelected(dialog: Int, color: Int) {\r\n        when (dialog) {\r\n            0 -> setBackgroundColor(color)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/93", "ground_truth": "            1 -> setTextColor(color)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivity2.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.TTSNotifications.TTS_NOTIFICATION_ID\nimport androidx.core.app.NotificationManagerCompat\nprivate fun kill() {\r\n        with(NotificationManagerCompat.from(this)) { // KILLS NOTIFICATION\r\n            cancel(TTS_NOTIFICATION_ID)\r", "choices": [{"text": "//            cancel(TTS_NOTIFICATION_ID)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "QuickNovel/94", "ground_truth": "        }\r\n        finish()\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivity2.kt"}}
{"prompt": " import com.lagradost.quicknovel.ui.ScrollVisibilityItem\nvar currentOverScroll Float\nvar currentScroll Int\nvar currentOverScrollValue\nprivate fun transformIndexToScrollVisibilityItem(adapterPosition: Int): ScrollVisibilityItem {\r\n        return ScrollVisibilityItem(\r\n            adapterPosition = adapterPosition,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/95", "ground_truth": "            viewHolder = binding.realText.findViewHolderForAdapterPosition(adapterPosition),\r\n        )\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivity2.kt"}}
{"prompt": "\nvar lockTop Int?\nvar binding ReadMainBinding\nvar _imageHolder WeakReference<LinearLayout>?\n private fun getTopY(): Int {\r\n        val outLocation = IntArray(2)\r\n        binding.readTopItem.getLocationInWindow(outLocation)\r", "choices": [{"text": "//        Log.e(\"outLocation\", \"outLocation[0] = \" + outLocation[0] + \" outLocation[1] = \" + outLocation[1])\r\n        return outLocation[1]\r\n    }\r\n\r\n    private fun getBottomY(): Int {\r\n        val outLocation = IntArray(2)\r\n        binding.readBottomItem.getLocationInWindow(outLocation)\r\n//        Log.e(\"outLocation\", \"outLocation[0] = \" + outLocation[0] + \" outLocation[1] = \" + outLocation[1])\r\n        return outLocation[1]"}], "metadata": {"task_id": "QuickNovel/96", "ground_truth": "        val (_, topY) = outLocation\r\n        return topY + binding.realText.paddingTop\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivity2.kt"}}
{"prompt": "\n import android.content.res.Configuration\noverride fun onConfigurationChanged(newConfig: Configuration) {\r\n        // we save this just in case the user fucks it up somehow\r", "choices": [{"text": "val oldConfig = this.resources.configuration\r\n// we set the new config to the old one\r\nthis.resources.updateConfiguration(oldConfig, this.resources.displayMetrics)\r\n// we call the super method\r\nsuper.onConfigurationChanged(newConfig)\r\n}\n"}], "metadata": {"task_id": "QuickNovel/100", "ground_truth": "        postDesired(binding.realText)\r\n        super.onConfigurationChanged(newConfig)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivity2.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.util.toPx\nprivate fun updatePadding() {\r\n        val h = viewModel.paddingHorizontal.toPx\r\n        val v = viewModel.paddingVertical.toPx\r\n        binding.realText.apply {\r\n            if (paddingLeft == h && paddingRight == h && paddingBottom == v && paddingTop == v) return\r\n            setPadding(\r\n                h,\r\n                v,\r\n                h,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/102", "ground_truth": "                v\r\n            )\r\n            scrollToDesired()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivity2.kt"}}
{"prompt": " import kotlin.reflect.KProperty\nvar _context WeakReference<ReadActivity2>?\nvar cache T?\nvar cache T\noperator fun setValue(\r\n        self: Any?,\r\n        property: KProperty<*>,\r\n        t: T?\r\n    ) {\r\n        cache = t\r\n        if (t == null) {\r", "choices": [{"text": "//            _context?.get()?.let {\r\n//                it.cache = null\r\n//            }\r\n        } else {\r\n            _context?.get()?.let {\r\n                it.cache = t\r\n            }\r\n        }\r\n    }\r\noperator fun getValue(\r\n        self: Any?,\r\n        property: KProperty<*>\r\n    ): T? {\r\n        return cache\r\n    }\r\n"}], "metadata": {"task_id": "QuickNovel/105", "ground_truth": "            removeKey(key)\r\n        } else {\r\n            setKeyClass(key, t)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": " import kotlin.reflect.KProperty\nvar _context WeakReference<ReadActivity2>?\nvar cache T?\nvar cache T\noperator fun setValue(\r\n        self: Any?,\r\n        property: KProperty<*>,\r\n        t: T?\r\n    ) {\r\n        cache = t ?: default\r\n        _liveData.postValue(cache)\r\n        if (t == null) {\r", "choices": [{"text": " import kotlin.reflect.KProperty\nvar _context WeakReference<ReadActivity2>?\nvar cache T?\nvar cache T\noperator fun setValue(\r\n        self: Any?,\r\n        property: KProperty<*>,\r\n        t: T?\r\n    ) {\r\n        cache = t?: default\r\n        _liveData.postValue(cache)\r\n        if (t == null) {\r\n//            _context?.get()?.let {\r\n//                it.startActivity(Intent(it, ReadActivity2::class.java))\r\n//            }\r\n        }\r\n    }\r\noperator fun getValue(\r\n        self: Any?,\r\n        property: KProperty<*>\r\n    ): T? {\r\n        return cache\r\n    }\r\n//    fun get(context: Context): T? {\r\n//        _context = WeakReference(context)\r\n//        return cache\r\n//    }\r\n}<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\n"}], "metadata": {"task_id": "QuickNovel/106", "ground_truth": "            removeKey(key)\r\n        } else {\r\n            setKeyClass(key, t)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": "\n override suspend fun posterBytes(): ByteArray? {\r\n        val poster = data.poster\r\n        if (poster != null) {\r\n            try {\r\n                return MainActivity.app.get(poster).okhttpResponse.body.bytes()\r\n            } catch (t: Throwable) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/108", "ground_truth": "                logError(t)\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": "\nvar book AbstractBook\nval canReload Boolean\nval canReload\n private fun updateChapters() {\r\n        for (idx in chaptersTitlesInternal.size until book.size()) {\r\n            chaptersTitlesInternal.add(book.getChapterTitle(idx))\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "QuickNovel/110", "ground_truth": "        }\r\n        _chaptersTitles.postValue(chaptersTitlesInternal)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": " import com.lagradost.quicknovel.util.Coroutines.ioSafe\nvar book AbstractBook\nvar cache T?\nvar cache T\nfun reloadChapter(index: Int) = ioSafe {\r\n        hasExpanded.clear() // will unfuck the rest\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "QuickNovel/111", "ground_truth": "        loadIndividualChapter(index, reload = true, notify = false)\r\n        updateReadArea(seekToDesired = false)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": "\n private suspend fun updateIndexAsync(\r\n        index: Int,\r\n        notify: Boolean = true\r\n    ) {\r\n        for (idx in index - chapterPaddingBottom..index + chapterPaddingTop) {\r\n            requested += index\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/112", "ground_truth": "            loadIndividualChapter(idx, false, notify)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": "\n private fun updateIndex(index: Int) {\r\n        var alreadyRequested = false\r\n        for (idx in index - chapterPaddingBottom..index + chapterPaddingTop) {\r\n            if (!requested.contains(index)) {\r\n                alreadyRequested = true\r\n            }\r\n            requested += index\r\n        }\r\n\r\n        if (alreadyRequested) return\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/113", "ground_truth": "\r\n        ioSafe {\r\n            updateIndexAsync(index)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": "\n private fun notifyChapterUpdate(index: Int, seekToDesired: Boolean = false) {\r\n        val cIndex = currentIndex\r\n        if (cIndex - chapterPaddingBottom <= index && index <= cIndex + chapterPaddingTop) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/116", "ground_truth": "            updateReadArea(seekToDesired)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.util.Coroutines.runOnMainThread\nimport com.lagradost.quicknovel.BaseApplication.Companion.context\nimport android.content.Context\nprivate fun initTTSSession(context: Context) {\r\n        runOnMainThread {\r", "choices": [{"text": "//            val tts = TextToSpeech(context, TextToSpeech.OnInitListener { status ->\r\n//                if (status == TextToSpeech.SUCCESS) {\r\n//                    val result = tts.setLanguage(Locale.US)\r\n//                    if (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) {\r\n//                        Log.e(\"TTS\", \"This Language is not supported\")\r\n//                    }\r\n//                } else {\r\n//                    Log.e(\"TTS\", \"Init"}], "metadata": {"task_id": "QuickNovel/117", "ground_truth": "            ttsSession = TTSSession(context, ::parseAction)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": "\nvar pendingTTSSkip Int\nval _ttsLine MutableLiveData<TTSHelper.TTSLine?>\nval ttsLine LiveData<TTSHelper.TTSLine?>\n fun stopTTS() {\r", "choices": [{"text": "if (tts!= null) {\r\ntts!!.stop()\r\ntts!!.shutdown()\r\ntts = null\r\n}\r\n}\r\nfun speak(text: String) {\r\nif (tts == null) {\r\ntts = TTSHelper(this)\r\n}\r\ntts!!.speak(text)\r\n}\r\nfun speak(text: String, callback: TTSHelper.TTSCallback) {\r\nif (tts == null) {\r\ntts = TTSHelper(this)\r\n}\r\ntts!!.speak(text, callback)\r\n"}], "metadata": {"task_id": "QuickNovel/118", "ground_truth": "        if (!ttsSession.ttsInitalized()) return\r\n        currentTTSStatus = TTSHelper.TTSStatus.IsStopped\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": "\nval ttsLines\nval _ttsLine MutableLiveData<TTSHelper.TTSLine?>\nval ttsLine LiveData<TTSHelper.TTSLine?>\n fun pauseTTS() {\r", "choices": [{"text": "tts.pause()\r\n}\r\nfun resumeTTS() {\r\ntts.resume()\r\n}\r\nfun stopTTS() {\r\ntts.stop()\r\n}\r\nfun speak(text: String) {\r\ntts.speak(text)\r\n}\r\nfun speak(text: String, queueMode: Int) {\r\ntts.speak(text, queueMode)\r\n}\r\nfun speak(text: String, queueMode: Int, bundle: Bundle) {\r\ntts.speak(text, queueMode, bundle)\r\n}\r"}], "metadata": {"task_id": "QuickNovel/119", "ground_truth": "        if (!ttsSession.ttsInitalized()) return\r\n        currentTTSStatus = TTSHelper.TTSStatus.IsPaused\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": "\nval _ttsLine MutableLiveData<TTSHelper.TTSLine?>\nval ttsLine LiveData<TTSHelper.TTSLine?>\nval ttsLines\n fun forwardsTTS() {\r", "choices": [{"text": "ttsLine.value?.let {\r\nttsLine.value = it.next\r\n}\r\n}\r\nfun backwardsTTS() {\r\nttsLine.value?.let {\r\nttsLine.value = it.previous\r\n}\r\n}\r\nfun playTTS() {\r\nttsLine.value?.let {\r\nttsLine.value = it.next\r\n}\r\n}\r\nfun pauseTTS() {\r\nttsLine.value?.let {\r\nttsLine.value = it.previous\r\n}\r\n}\r\nfun stopTT"}], "metadata": {"task_id": "QuickNovel/120", "ground_truth": "        if (!ttsSession.ttsInitalized()) return\r\n        pendingTTSSkip += 1\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": "\nval _ttsLine MutableLiveData<TTSHelper.TTSLine?>\nval ttsLine LiveData<TTSHelper.TTSLine?>\nval ttsLines\n fun backwardsTTS() {\r", "choices": [{"text": "ttsLine.value?.let {\r\nttsLine.value = it.previous\r\n}\r\n}\r\nfun forwardsTTS() {\r\nttsLine.value?.let {\r\nttsLine.value = it.next\r\n}\r\n}\r\nfun playTTS() {\r\nttsLine.value?.let {\r\nttsLine.value = it.next\r\n}\r\n}\r\nfun pauseTTS() {\r\nttsLine.value?.let {\r\nttsLine.value = it.next\r\n}\r\n}\r\nfun stopTT"}], "metadata": {"task_id": "QuickNovel/121", "ground_truth": "        if (!ttsSession.ttsInitalized()) return\r\n        pendingTTSSkip -= 1\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": " import com.lagradost.quicknovel.ui.ScrollIndex\nvar scrollWithVolume\nvar cache T?\nvar cache T\nfun scrollToDesired(scrollIndex: ScrollIndex) {\r", "choices": [{"text": "scrollWithVolume = scrollIndex.volume\r\nscrollWithPage = scrollIndex.page\r\n}\n"}], "metadata": {"task_id": "QuickNovel/125", "ground_truth": "        changeIndex(scrollIndex)\r\n        updateReadArea(seekToDesired = true)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.CommonActivity.activity\nimport android.media.MediaPlayer\nprivate fun playDummySound() {\r\n        val act = activity ?: return\r\n        val mMediaPlayer: MediaPlayer = MediaPlayer.create(act, R.raw.dummy_sound_500ms)\r", "choices": [{"text": "\n import com.lagradost.quicknovel.CommonActivity.activity\nimport android.media.MediaPlayer\nprivate fun playDummySound() {\r\n        val act = activity?: return\r\n        val mMediaPlayer: MediaPlayer = MediaPlayer.create(act, R.raw.dummy_sound_500ms)\r\n//        mMediaPlayer.setVolume(0.5f, 0.5f)\r\n        mMediaPlayer.start()\r\n    }\n"}], "metadata": {"task_id": "QuickNovel/126", "ground_truth": "        mMediaPlayer.setOnCompletionListener { mMediaPlayer.release() }\r\n        mMediaPlayer.start()\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": "\nvar _context WeakReference<ReadActivity2>?\nvar markwon Markwon\nval ttsLines\n override fun onCleared() {\r\n        ttsSession.release()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "QuickNovel/127", "ground_truth": "\r\n        super.onCleared()\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ReadActivityViewModel.kt"}}
{"prompt": "\n import org.jsoup.nodes.Document\nimport com.lagradost.quicknovel.MainActivity.Companion.app\nsuspend fun jConnect(\r\n    url: String,\r\n    params: Map<String, String> = mapOf(),\r\n    method: String = \"GET\"\r\n): Document? {\r\n    val head = mapOf(\r\n        \"Accept\" to \"*/*\",\r\n        \"Accept-Encoding\" to \"gzip, deflate\",\r\n        \"User-Agent\" to USER_AGENT\r\n    )\r\n    return try {\r\n        val res = app.custom(method, url = url, headers = head, params = params)\r", "choices": [{"text": "//        println(res.body().string())\r\n        Jsoup.parse(res.body().string())\r\n    } catch (e: Exception) {\r\n        null\r\n    }\r\n}\r\n\r\nsuspend fun jConnect(\r\n    url: String,\r\n    params: Map<String, String> = mapOf(),\r\n    method: String = \"GET\"\r\n): String? {\r\n    val head = mapOf(\r\n        \"Accept\" to \"*/*\",\r\n        \"Accept-Encoding\" to \"gzip, deflate\",\r\n        \"User-Agent\" to USER_AGENT\r\n    )\r\n    return try {\r\n        val res = app."}], "metadata": {"task_id": "QuickNovel/129", "ground_truth": "        if (res.code == 200) Jsoup.parse(res.text) else null\r\n    } catch (e: Exception) {\r\n        null\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\tools.kt"}}
{"prompt": "\n fun String.toRate(maxRate: Int = 10): Int {\r\n    return this\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "QuickNovel/130", "ground_truth": "        .replace(Regex(\"[^.0-9]\"), \"\")\r\n        .toFloatOrNull()\r\n        ?.times(1000 / maxRate)\r\n        ?.toInt() ?: 0\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\tools.kt"}}
{"prompt": "\n fun String.toStatus(): Int {\r\n    return this\r\n        .clean()\r\n        .lowercase(Locale.getDefault())\r\n        .let {\r\n            when (it) {\r\n                \"completed\" -> STATUS_COMPLETE\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/132", "ground_truth": "                \"ongoing\" -> STATUS_ONGOING\r\n                else -> STATUS_NULL\r\n            }\r\n        }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\tools.kt"}}
{"prompt": "\n fun String.clean(): String {\r\n    return this\r", "choices": [{"text": "}\r\n\r\nfun String.clean(regex: Regex): String {\r\n    return this.replace(regex, \"\")\r\n}\r\n\r\nfun String.clean(regex: String): String {\r\n    return this.replace(regex, \"\")\r\n}\r\n\r\nfun String.clean(regex: String, replacement: String): String {\r\n    return this.replace(regex, replacement)\r\n}\r\n\r\nfun String.clean(regex: Regex, replacement: String): String {\r\n    return this.replace(regex, replacement)\r\n}\r\n\r\nfun String.clean(regex: Regex, replacement: (MatchResult"}], "metadata": {"task_id": "QuickNovel/133", "ground_truth": "        .replace(Regex(\"[\\\\n\\\\t\\\\r]\"), \"\")\r\n        .replace(Regex(\"[ ]{2,}\"), \" \")\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\tools.kt"}}
{"prompt": "\n import android.net.Uri\nfun Uri.Builder.ifCase(case: Boolean, action: Uri.Builder.() -> Uri.Builder) = when {\r", "choices": [{"text": "-    case -> this.apply(action)\r\n+    case -> this.apply(action) as Uri.Builder\r\n     else -> this\r\n }\r\n"}], "metadata": {"task_id": "QuickNovel/135", "ground_truth": "    case -> action(this)\r\n    else -> this\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\tools.kt"}}
{"prompt": "\n import android.net.Uri\nfun Uri.Builder.addPath(vararg path: String) =\r", "choices": [{"text": "apply { appendPath(path.joinToString(\"/\")) }\r\n"}], "metadata": {"task_id": "QuickNovel/136", "ground_truth": "    path.fold(this) { builder, s ->\r\n        builder.appendPath(s)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\tools.kt"}}
{"prompt": "\n import android.net.Uri\nfun Uri.Builder.add(vararg query: Pair<String, Any>) =\r", "choices": [{"text": "apply { query.forEach { addQueryParameter(it.first, it.second.toString()) } }\r\n"}], "metadata": {"task_id": "QuickNovel/137", "ground_truth": "    query.fold(this) { builder, s ->\r\n        builder.appendQueryParameter(s.first, s.second.toString())\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\tools.kt"}}
{"prompt": " import android.speech.tts.TextToSpeech\nvar tts TextToSpeech?\nvar focusRequest AudioFocusRequest?\nval intentFilter\nprivate fun clearTTS(tts: TextToSpeech) {\r", "choices": [{"text": "tts.stop()\r\ntts.shutdown()\r\n}\n"}], "metadata": {"task_id": "QuickNovel/138", "ground_truth": "        tts.stop()\r\n        TTSQueue = null\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\TTSHelper.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.BaseApplication.Companion.setKey\nimport com.lagradost.quicknovel.BaseApplication.Companion.removeKey\nimport android.speech.tts.Voice\nfun setVoice(voice: Voice?) {\r\n        if (voice == null) {\r\n            removeKey(EPUB_VOICE)\r\n        } else {\r\n            setKey(EPUB_VOICE, voice.name)\r", "choices": [{"text": "}\r\n}\r\nfun getVoice(): Voice? {\r\n        return if (hasKey(EPUB_VOICE)) {\r\n            Voice(get(EPUB_VOICE))\r\n} else {\r\n            null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "QuickNovel/140", "ground_truth": "        }\r\n        val tts = tts ?: return\r\n        clearTTS(tts)\r\n        tts.voice = voice ?: tts.defaultVoice\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\TTSHelper.kt"}}
{"prompt": "\nvar tts TextToSpeech?\nvar TTSStartSpeakId\nvar TTSEndSpeakId\n private fun interruptTTS() {\r\n        // we don't actually want to initialize tts here\r\n        tts?.let { tts ->\r", "choices": [{"text": "//            tts.stop()\r\n            tts.shutdown()\r\n            tts = null\r\n        }\r\n    }\n"}], "metadata": {"task_id": "QuickNovel/141", "ground_truth": "            clearTTS(tts)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\TTSHelper.kt"}}
{"prompt": "\n import kotlinx.coroutines.delay\nsuspend fun waitForOr(id: Int?, action: () -> Boolean, then: () -> Unit) {\r\n        if (id == null) return\r\n        while (id > TTSEndSpeakId) {\r\n            delay(50)\r\n            if (action()) {\r\n                interruptTTS()\r", "choices": [{"text": "//                Log.d(\"TTS\", \"TTS interrupted\")\r\n                then()\r\n                return\r\n            }\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "QuickNovel/142", "ground_truth": "                then()\r\n                break\r\n            }\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\TTSHelper.kt"}}
{"prompt": "\nval intentFilter\nvar tts TextToSpeech?\nvar focusRequest AudioFocusRequest?\n fun release() {\r\n        tts?.stop()\r", "choices": [{"text": "tts?.shutdown()\r\ntts = null\r\n}\n"}], "metadata": {"task_id": "QuickNovel/144", "ground_truth": "        tts?.shutdown()\r\n        tts = null\r\n\r\n        unregister()\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\TTSHelper.kt"}}
{"prompt": "\nvar TTSEndSpeakId\nvar tts TextToSpeech?\nvar TTSQueueId\n fun unregister() {\r\n        if (!isRegistered) return\r", "choices": [{"text": "\n        if (tts!= null) {\r\n            tts!!.shutdown()\r\n            tts = null\r\n        }\r\n        isRegistered = false\r\n    }\r\nfun register() {\r\n        if (isRegistered) return\r\r\n        tts = TextToSpeech(context, TextToSpeech.OnInitListener { status ->\r\n            if (status == TextToSpeech.SUCCESS) {\r\n                val result = tts!!.setLanguage(Locale.US)\r\n                if (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) {\r\n                    Log.e(\"TTS\", \"This Language is not"}], "metadata": {"task_id": "QuickNovel/145", "ground_truth": "        isRegistered = false\r\n        context.unregisterReceiver(myNoisyAudioStreamReceiver)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\TTSHelper.kt"}}
{"prompt": "\n import java.util.Stack\nimport android.text.Spanned\nprivate fun getNewLineLocations(unsegmented: Spanned): Stack<Int> {\r\n        val loc = Stack<Int>()\r\n        val string = unsegmented.toString()\r\n\r\n\r\n        var next = string.indexOf('\\n')\r\n        while (next > 0) {\r\n            //avoid chains of newline characters\r\n            next = if (string[next - 1] != '\\n') {\r\n                loc.push(next)\r\n                string.indexOf('\\n', loc.peek() + 1)\r\n            } else {\r\n                string.indexOf('\\n', next + 1)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/147", "ground_truth": "            }\r\n            if (next >= string.length) next = -1\r\n        }\r\n        return loc\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\TTSHelper.kt"}}
{"prompt": "\n import io.noties.markwon.Markwon\nimport android.text.Spanned\nfun render(html: String, markwon: Markwon): Spanned {\r\n        return markwon.render(\r\n            markwon.parse(\r\n                html\r\n                /*.replaceAfterIndex( // because markwon is fucked we have to replace newlines with breaklines and becausse I dont want 3 br on top I start after body\r\n                \"\\n\",\r\n                \"<br>\",\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/148", "ground_truth": "                startIndex = index + 7\r\n            )*/\r\n            )\r\n        )\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\TTSHelper.kt"}}
{"prompt": "\n override fun onBindViewHolder(holder: DownloadAdapter2Holder, position: Int) {\r", "choices": [{"text": "//        val item = items[position]\r\n//        holder.bind(item)\r\n//        holder.itemView.setOnClickListener {\r\n//            listener.onItemClick(item)\r\n//        }\r\n//        holder.itemView.setOnLongClickListener {\r\n//            listener.onItemLongClick(item)\r\n//            true\r\n//        }\r\n    }\r\n\r\n    override fun getItemCount(): Int {\r\n        return items.size\r\n    }\r\n\r\n    fun setItems(items: List<DownloadItem>) {\r\n        this.items = items\r\n        notifyDataSetChanged()\r\n    }\r\n\r\n   "}], "metadata": {"task_id": "QuickNovel/150", "ground_truth": "        val currentItem = getItem(position)\r\n        holder.bind(currentItem, viewModel, resView)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\download\\CachedAdapter2.kt"}}
{"prompt": "\n override fun onBindViewHolder(holder: DownloadAdapter2Holder, position: Int) {\r", "choices": [{"text": "//        val item = items[position]\r\n//        holder.bind(item)\r\n//        holder.itemView.setOnClickListener {\r\n//            listener.onItemClick(item)\r\n//        }\r\n//        holder.itemView.setOnLongClickListener {\r\n//            listener.onItemLongClick(item)\r\n//            true\r\n//        }\r\n    }\r\n\r\n    override fun getItemCount(): Int {\r\n        return items.size\r\n    }\r\n\r\n    fun setItems(items: List<DownloadItem>) {\r\n        this.items = items\r\n        notifyDataSetChanged()\r\n    }\r\n\r\n   "}], "metadata": {"task_id": "QuickNovel/152", "ground_truth": "        val currentItem = getItem(position)\r\n        holder.bind(currentItem, viewModel, resView)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\download\\DownloadAdapter2.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.databinding.FragmentDownloadsBinding\nimport androidx.fragment.app.Fragment\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?,\r\n    ): View {\r\n        binding = FragmentDownloadsBinding.inflate(inflater)\r", "choices": [{"text": "//        binding.lifecycleOwner = this\r\n        return binding.root\r\n    }\n}<file_sep>/app/src/main/java/com/lagradost/quicknovel/ui/main/MainViewModel.kt\npackage com.lagradost.quicknovel.ui.main\n\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport com.lagradost.quicknovel.data.model.Book\nimport com.lagradost.quicknovel.data.model.Chapter\nimport com.lagradost.quickno"}], "metadata": {"task_id": "QuickNovel/153", "ground_truth": "        return binding.root\r\n        //return inflater.inflate(R.layout.fragment_downloads, container, false)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\download\\DownloadFragment.kt"}}
{"prompt": " import android.content.res.Configuration\nval sortingMethods\nval image\nval viewModel DownloadViewModel\noverride fun onConfigurationChanged(newConfig: Configuration) {\r", "choices": [{"text": "super.onConfigurationChanged(newConfig)\r\nif (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n//landscape\r\n} else {\r\n//portrait\r\n}\r\n}\n"}], "metadata": {"task_id": "QuickNovel/154", "ground_truth": "        super.onConfigurationChanged(newConfig)\r\n        setupGridView()\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\download\\DownloadFragment.kt"}}
{"prompt": " import com.lagradost.quicknovel.util.ResultCached\nimport com.lagradost.quicknovel.RESULT_BOOKMARK\nimport com.lagradost.quicknovel.R\nimport com.lagradost.quicknovel.BaseApplication.Companion.removeKey\nval cards MutableLiveData<ArrayList<DownloadFragment.DownloadDataLoaded>>\nvar currentTab MutableLiveData<Int>\nval isOnDownloads MutableLiveData<Boolean>\nfun delete(card: ResultCached) {\r\n        removeKey(RESULT_BOOKMARK, card.id.toString())\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "QuickNovel/156", "ground_truth": "        removeKey(RESULT_BOOKMARK_STATE, card.id.toString())\r\n        loadNormalData(currentReadType.value!!)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\download\\DownloadViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.lagradost.quicknovel.ui.ReadType\nimport com.lagradost.quicknovel.R\nimport androidx.lifecycle.viewModelScope\nprivate fun loadData() = viewModelScope.launch {\r\n        currentReadType.postValue(null)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "QuickNovel/157", "ground_truth": "        isOnDownloads.postValue(true)\r\n        cardsDataMutex.withLock {\r\n            postCards()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\download\\DownloadViewModel.kt"}}
{"prompt": "\nvar currentTab MutableLiveData<Int>\nvar currentSortingMethod MutableLiveData<Int>\nval cards MutableLiveData<ArrayList<DownloadFragment.DownloadDataLoaded>>\n fun selectTab(index: Int) {\r\n        currentTab.postValue(index)\r\n        if (index == 0) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/158", "ground_truth": "            loadData()\r\n        } else {\r\n            loadNormalData(readList[index - 1])\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\download\\DownloadViewModel.kt"}}
{"prompt": " import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nimport com.lagradost.quicknovel.util.Coroutines.ioSafe\nvar currentSortingMethod MutableLiveData<Int>\nval cardsData HashMap<Int, DownloadFragment.DownloadDataLoaded>\nval cards MutableLiveData<ArrayList<DownloadFragment.DownloadDataLoaded>>\nfun sortData(sortMethod: Int? = null) = ioSafe {\r\n        cardsDataMutex.withLock {\r", "choices": [{"text": "//            val sortMethod = sortMethod?: currentSortingMethod.value?: 0\r\n            val sortMethod = sortMethod?: currentSortingMethod.value?: 0\r\n            val cards = cardsData.values.toMutableList()\r\n            when (sortMethod) {\r\n                0 -> cards.sortBy { it.title }\r\n                1 -> cards.sortBy { it.title }\r\n                2 -> cards.sortBy { it.title }\r\n                3 -> cards.sortBy { it.title }\r\n                4 -> cards.sortBy { it.title }\r\n                5 -> cards.sortBy { it.title }\r\n                6 -> cards.sortBy { it"}], "metadata": {"task_id": "QuickNovel/159", "ground_truth": "            postCards(sortMethod)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\download\\DownloadViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nimport com.lagradost.quicknovel.util.Coroutines.ioSafe\nimport com.lagradost.quicknovel.DownloadProgressState\nimport com.lagradost.quicknovel.BaseApplication.Companion.context\nprivate fun progressChanged(data: Pair<Int, DownloadProgressState>) =\r\n        ioSafe {\r\n            cardsDataMutex.withLock {\r\n                val (id, state) = data\r\n                cardsData[id]?.apply {\r\n                    downloadedCount = state.progress\r\n                    downloadedTotal = state.total\r\n                    this.state = state.state\r\n                    context?.let { ctx ->\r\n                        this.ETA = state.eta(ctx)\r", "choices": [{"text": "//                        this.ETA = state.eta(ctx)\r\n                        this.speed = state.speed(ctx)\r\n                    }\r\n                }\r\n            }\r\n        }\n\nprivate fun progressChanged(data: Pair<Int, DownloadProgressState>) =\r\n        ioSafe {\r\n            cardsDataMutex.withLock {\r\n                val (id, state) = data\r\n                cardsData[id]?.apply {\r\n                    downloadedCount = state.progress\r\n                    downloadedTotal = state.total\r\n                    this.state = state.state\r\n                    context?.let { ctx ->\r\n                        this.ETA = state.eta(ctx)\r\n//                        this.ETA = state"}], "metadata": {"task_id": "QuickNovel/161", "ground_truth": "                    }\r\n                }\r\n                postCards()\r\n            }\r\n        }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\download\\DownloadViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nimport com.lagradost.quicknovel.util.Coroutines.ioSafe\nimport com.lagradost.quicknovel.R\nprivate fun downloadRemoved(id: Int) = ioSafe {\r\n        cardsDataMutex.withLock {\r\n            cardsData -= id\r", "choices": [{"text": "//            cardsData.remove(id)\r\n        }\r\n    }\n\nprivate fun downloadAdded(id: Int) = ioSafe {\r\n        cardsDataMutex.withLock {\r\n            cardsData += id\r\n//            cardsData.add(id)\r\n        }\r\n    }\n\nprivate fun downloadUpdated(id: Int) = ioSafe {\r\n        cardsDataMutex.withLock {\r\n            cardsData[id] = id\r\n//            cardsData[id] = id\r\n        }\r\n    }\n\nprivate fun downloadUpdated(id: Int, card: Card) = ioSafe {\r\n        cardsDataMutex.with"}], "metadata": {"task_id": "QuickNovel/162", "ground_truth": "            postCards()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\download\\DownloadViewModel.kt"}}
{"prompt": "\n override fun onBindViewHolder(holder: HistoryAdapter2Holder, position: Int) {\r", "choices": [{"text": "//        holder.itemView.setOnClickListener {\r\n//            val intent = Intent(context, HistoryActivity::class.java)\r\n//            intent.putExtra(\"id\", historyList[position].id)\r\n//            intent.putExtra(\"name\", historyList[position].name)\r\n//            intent.putExtra(\"date\", historyList[position].date)\r\n//            intent.putExtra(\"time\", historyList[position].time)\r\n//            intent.putExtra(\"image\", historyList[position].image)\r\n//            intent.putExtra(\"description\", historyList[position]."}], "metadata": {"task_id": "QuickNovel/164", "ground_truth": "        val currentItem = getItem(position)\r\n        holder.bind(currentItem, viewModel)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\history\\HistoryAdapter2.kt"}}
{"prompt": " import android.content.res.Configuration\nvar binding FragmentHistoryBinding\nval viewModel HistoryViewModel\noverride fun onConfigurationChanged(newConfig: Configuration) {\r", "choices": [{"text": "super.onConfigurationChanged(newConfig)\r\nif (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {\r\nbinding.recyclerView.layoutManager = GridLayoutManager(requireContext(), 2)\r\n} else {\r\nbinding.recyclerView.layoutManager = LinearLayoutManager(requireContext())\r\n}\r\n}\n"}], "metadata": {"task_id": "QuickNovel/166", "ground_truth": "        super.onConfigurationChanged(newConfig)\r\n        setupGridView()\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\history\\HistoryFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?,\r\n    ): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\n"}], "metadata": {"task_id": "QuickNovel/167", "ground_truth": "        binding = FragmentHistoryBinding.inflate(inflater)\r\n        return binding.root\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\history\\HistoryFragment.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.util.ResultCached\nimport com.lagradost.quicknovel.util.Coroutines.ioSafe\nimport com.lagradost.quicknovel.R\nimport com.lagradost.quicknovel.HISTORY_FOLDER\nimport com.lagradost.quicknovel.BaseApplication.Companion.getKeys\nimport com.lagradost.quicknovel.BaseApplication.Companion.getKey\nprivate fun updateHistory() {\r\n        ioSafe {\r\n            val list = ArrayList<ResultCached>()\r\n            val keys = getKeys(HISTORY_FOLDER) ?: return@ioSafe\r\n            for (k in keys) {\r\n                val res =\r\n                    getKey<ResultCached>(k) ?: continue\r\n                list.add(res)\r", "choices": [{"text": "\n import com.lagradost.quicknovel.util.ResultCached\nimport com.lagradost.quicknovel.util.Coroutines.ioSafe\nimport com.lagradost.quicknovel.R\nimport com.lagradost.quicknovel.HISTORY_FOLDER\nimport com.lagradost.quicknovel.BaseApplication.Companion.getKeys\nimport com.lagradost.quicknovel.BaseApplication.Companion.getKey\nprivate fun updateHistory() {\r\n        ioSafe {\r\n            val list = ArrayList<ResultCached>()\r\n            val keys = getKeys(HISTORY_FOLDER)?: return@ioSafe\r\n            for (k in keys) {\r\n                val res =\r\n                    getKey<ResultCached>(k)?: continue\r\n                list.add(res)\r\n//                Log.d(\"updateHistory\", \"key: $k\")\r\n            }\r\n            list.sortByDescending { it.date }\r\n            val json = Gson().toJson(list)\r\n            val file = File(HISTORY_FOLDER)\r\n            file.writeText(json)\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "QuickNovel/168", "ground_truth": "            }\r\n            list.sortBy { -it.cachedTime }\r\n            cards.postValue(list)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\history\\HistoryViewModel.kt"}}
{"prompt": " import com.lagradost.quicknovel.util.ResultCached\nimport com.lagradost.quicknovel.R\nval cards MutableLiveData<ArrayList<ResultCached>>\nfun delete(card: ResultCached) {\r", "choices": [{"text": "}\r\nfun add(card: ResultCached) {\r\n}\r\nfun get(id: String): ResultCached? {\r\n}\r\nfun get(id: String, callback: (ResultCached?) -> Unit) {\r\n}\r\nfun get(id: String, callback: (ResultCached?) -> Unit, error: (Throwable) -> Unit) {\r\n}\r\nfun get(id: String, callback: (ResultCached?) -> Unit, error: (Throwable) -> Unit, progress: (Int) -> Unit) {\r\n}\r\nfun get(id"}], "metadata": {"task_id": "QuickNovel/169", "ground_truth": "        removeKey(HISTORY_FOLDER, card.id.toString())\r\n        updateHistory()\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\history\\HistoryViewModel.kt"}}
{"prompt": "\n override fun onBindViewHolder(holder: BrowseAdapter2Holder, position: Int) {\r", "choices": [{"text": "//        val item = items[position]\r\n//        holder.bind(item)\r\n        holder.bind(items[position])\r\n    }\r\n\r\n    override fun getItemCount(): Int = items.size\r\n\r\n    fun setItems(items: List<BrowseItem>) {\r\n        this.items = items\r\n        notifyDataSetChanged()\r\n    }\r\n\r\n    fun addItems(items: List<BrowseItem>) {\r\n        this.items.addAll(items)\r\n        notifyDataSetChanged()\r\n    }\r\n\r\n    fun clearItems() {\r\n        items.clear()\r\n        notifyDataSetChanged()\r\n    }\r\n\r\n    class BrowseAdapter2Holder(view: View) :"}], "metadata": {"task_id": "QuickNovel/171", "ground_truth": "        val currentItem = getItem(position)\r\n        holder.bind(currentItem)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\home\\BrowseAdapter2.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?,\r\n    ): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\n"}], "metadata": {"task_id": "QuickNovel/173", "ground_truth": "        binding = FragmentHomeBinding.inflate(inflater)\r\n        return binding.root\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\home\\HomeFragment.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.mvvm.observe\nimport androidx.recyclerview.widget.GridLayoutManager\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        val browseAdapter = BrowseAdapter2()\r\n        binding.homeBrowselist.apply {\r\n            adapter = browseAdapter\r\n            layoutManager = GridLayoutManager(context, 1)\r\n            setHasFixedSize(true)\r\n        }\r\n\r\n        observe(viewModel.homeApis) { list ->\r", "choices": [{"text": "//            browseAdapter.submitList(list)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "QuickNovel/174", "ground_truth": "            browseAdapter.submitList(list)\r\n        }\r\n\r\n        activity?.fixPaddingStatusbar(binding.homeToolbar)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\home\\HomeFragment.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.databinding.SearchResultGridBinding\nimport com.lagradost.quicknovel.databinding.LoadingBottomBinding\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n        return when (viewType) { // Use 'when' to create the correct holder for any position\r\n            REGULAR_VIEW_TYPE -> MainAdapter2Holder(SearchResultGridBinding.inflate(LayoutInflater.from(parent.context),parent,false))\r\n            FOOTER_VIEW_TYPE -> LoadingHolder(LoadingBottomBinding.inflate(LayoutInflater.from(parent.context),parent,false))\r", "choices": [{"text": "//            else -> throw IllegalArgumentException(\"Invalid view type\")\r\n        }\r\n    }\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        when (holder) {\r\n            is MainAdapter2Holder -> holder.bind(getItem(position))\r\n            is LoadingHolder -> holder.bind(getItem(position))\r\n        }\r\n    }\n\r\noverride fun getItemViewType(position: Int): Int {\r\n        return when (getItem(position)) {\r\n            is SearchResult -> REGULAR_VIEW_TYPE\r\n            is Loading -> FOOTER_VIEW_TYPE\r\n        }\r\n    }\noverride fun getItemCount(): Int {"}], "metadata": {"task_id": "QuickNovel/175", "ground_truth": "            else -> {\r\n                throw NotImplementedError()\r\n            }\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\mainpage\\MainAdapter2.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        when(holder) {\r\n            is MainAdapter2Holder -> {\r\n                val currentItem = getItem(position)\r\n                holder.bind(currentItem, resView)\r\n            }\r", "choices": [{"text": "}\r\n}\n"}], "metadata": {"task_id": "QuickNovel/176", "ground_truth": "            is LoadingHolder -> {\r\n                holder.bind()\r\n            }\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\mainpage\\MainAdapter2.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?,\r\n    ): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\n"}], "metadata": {"task_id": "QuickNovel/177", "ground_truth": "        binding = FragmentMainpageBinding.inflate(inflater)\r\n        return binding.root\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\mainpage\\MainPageFragment.kt"}}
{"prompt": " import android.content.res.Configuration\nvar isLoading\nval viewModel MainPageViewModel\nvar pastVisiblesItems\noverride fun onConfigurationChanged(newConfig: Configuration) {\r", "choices": [{"text": "super.onConfigurationChanged(newConfig)\r\nif (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n//landscape\r\n} else {\r\n//portrait\r\n}\r\n}\n"}], "metadata": {"task_id": "QuickNovel/180", "ground_truth": "        super.onConfigurationChanged(newConfig)\r\n        setupGridView()\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\mainpage\\MainPageFragment.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.CommonActivity.activity\nimport android.net.Uri\nimport android.content.Intent\nfun openInBrowser() {\r\n        try {\r\n            val url = currentUrl.value\r\n            if (url != null) {\r\n                val i = Intent(Intent.ACTION_VIEW)\r\n                i.data = Uri.parse(url)\r\n                activity?.startActivity(i)\r", "choices": [{"text": "\n import com.lagradost.quicknovel.CommonActivity.activity\nimport android.net.Uri\nimport android.content.Intent\nfun openInBrowser() {\r\n        try {\r\n            val url = currentUrl.value\r\n            if (url!= null) {\r\n                val i = Intent(Intent.ACTION_VIEW)\r\n                i.data = Uri.parse(url)\r\n                activity?.startActivity(i)\r\n//                activity?.startActivity(Intent(Intent.ACTION_VIEW, Uri.parse(url)))\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }<file_sep>/app/src/main/java/com/lagradost/quicknovel/CommonActivity/activity/MainActivity.kt\npackage com.lagradost.quicknovel.CommonActivity.activity\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.Menu\nimport android.view.MenuItem\nimport android.view.View\nimport android.widget.Toast"}], "metadata": {"task_id": "QuickNovel/182", "ground_truth": "            }\r\n        } catch (_ : Throwable) {\r\n\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\mainpage\\MainPageViewModel.kt"}}
{"prompt": " import com.lagradost.quicknovel.mvvm.Resource\nval currentMainCategory MutableLiveData<Int>\nval currentCards MutableLiveData<Resource<List<SearchResponse>>>\nval currentOrderBy MutableLiveData<Int>\nfun switchToMain() {\r\n        infCards.value?.let {\r\n            currentCards.postValue(Resource.Success(it))\r", "choices": [{"text": "//            currentMainCategory.postValue(it.first().category)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "QuickNovel/184", "ground_truth": "        }\r\n        isInSearch.postValue(false)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\mainpage\\MainPageViewModel.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.util.Apis\nfun init(apiName : String, mainCategory: Int?,\r\n             orderBy: Int?,\r\n             tag: Int?) {\r\n        if (hasInit) return\r\n        hasInit = true\r\n        repo = MainPageRepository(Apis.getApiFromName(apiName))\r\n        load(\r\n            0,\r", "choices": [{"text": "//            mainCategory,\r\n            orderBy,\r\n            tag\r\n        )\r\n    }\r\n\r\n    fun load(page: Int,\r\n             mainCategory: Int?,\r\n             orderBy: Int?,\r\n             tag: Int?) {\r\n        repo.load(page, mainCategory, orderBy, tag)\r\n    }\r\n\r\n    fun getMainPage(): MainPage {\r\n        return repo.getMainPage()\r\n    }\r\n\r\n    fun getMainPageLiveData(): LiveData<MainPage> {\r\n        return repo.getMainPageLiveData()\r\n    }\r\n\r\n    fun getMainPageError(): LiveData<Throwable> {\r\n        return repo.getMainPageError()\r\n    }\r\n\r\n    fun getMain"}], "metadata": {"task_id": "QuickNovel/185", "ground_truth": "            mainCategory,\r\n            orderBy,\r\n            tag\r\n        )\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\mainpage\\MainPageViewModel.kt"}}
{"prompt": "\n private fun updateScrollHeight() {\r\n        val displayMetrics = context?.resources?.displayMetrics ?: return\r\n        val height = binding.resultDownloadCard.height\r\n        val total = displayMetrics.heightPixels - height\r\n\r\n        binding.resultNovelHolder.apply {\r\n            setPadding(\r\n                paddingLeft,\r\n                paddingTop,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/189", "ground_truth": "                paddingRight,\r\n                maxOf(0, total)\r\n            )\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\result\\ResultFragment.kt"}}
{"prompt": " import android.content.res.Configuration\nvar binding FragmentResultBinding\nval viewModel ResultViewModel\nval api\noverride fun onConfigurationChanged(newConfig: Configuration) {\r\n        super.onConfigurationChanged(newConfig)\r\n        binding.resultHolder.post { // BUG FIX\r", "choices": [{"text": "//            binding.resultHolder.layoutParams.height = binding.resultHolder.height\r\n            binding.resultHolder.layoutParams.height = binding.resultHolder.height\r\n        }\r\n    }\n"}], "metadata": {"task_id": "QuickNovel/190", "ground_truth": "            updateScrollHeight()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\result\\ResultFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.launch\nimport com.lagradost.quicknovel.BookDownloader2\nimport androidx.lifecycle.viewModelScope\nfun readEpub() = viewModelScope.launch {\r\n        loadMutex.withLock {\r\n            if (!hasLoaded) return@launch\r\n            addToHistory()\r\n            BookDownloader2.readEpub(\r\n                loadId,\r\n                downloadState.value?.progress ?: return@launch,\r\n                load.author,\r", "choices": [{"text": "\n import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.launch\nimport com.lagradost.quicknovel.BookDownloader2\nimport androidx.lifecycle.viewModelScope\nfun readEpub() = viewModelScope.launch {\r\n        loadMutex.withLock {\r\n            if (!hasLoaded) return@launch\r\n            addToHistory()\r\n            BookDownloader2.readEpub(\r\n                loadId,\r\n                downloadState.value?.progress?: return@launch,\r\n                load.author,\r\n//                load.title,\r\n                load.title,\r\n                load.cover,\r\n                load.url,\r\n                load.epub,\r\n                load.epub.epub,\r\n                load.epub.epub,\r\n                load.epub.epub,\r\n                load.epub.epub,\r\n                load.epub.epub,\r\n                load.epub.epub,\r\n                load.epub.epub,\r\n                load.epub.epub,\r\n                load.epub.epub,\r\n                load.epub.epub,\r\n                load.epub.epub,\r\n               "}], "metadata": {"task_id": "QuickNovel/193", "ground_truth": "                load.name,\r\n                apiName\r\n            )\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\result\\ResultViewModel.kt"}}
{"prompt": " import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nvar id MutableLiveData<Int>\nvar repo APIRepository\nval api\nfun delete() = viewModelScope.launch {\r\n        loadMutex.withLock {\r\n            if (!hasLoaded) return@launch\r", "choices": [{"text": "//            repo.delete(id.value!!)\r\n//            id.value = null\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "QuickNovel/195", "ground_truth": "            BookDownloader2.deleteNovel(load.author, load.name, apiName)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\result\\ResultViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.launch\nimport com.lagradost.quicknovel.RESULT_BOOKMARK_STATE\nimport com.lagradost.quicknovel.RESULT_BOOKMARK\nimport com.lagradost.quicknovel.R\nimport com.lagradost.quicknovel.BaseApplication.Companion.setKey\nimport androidx.lifecycle.viewModelScope\nfun bookmark(state: Int) = viewModelScope.launch {\r\n        loadMutex.withLock {\r\n            if (!hasLoaded) return@launch\r\n            setKey(\r\n                RESULT_BOOKMARK_STATE, loadId.toString(), state\r\n            )\r", "choices": [{"text": "//            setKey(RESULT_BOOKMARK, loadId.toString(), state)\r\n        }\r\n    }\n\nfun bookmark(state: Boolean) = viewModelScope.launch {\r\n        loadMutex.withLock {\r\n            if (!hasLoaded) return@launch\r\n            setKey(\r\n                RESULT_BOOKMARK_STATE, loadId.toString(), if (state) 1 else 0\r\n            )\r\n//            setKey(RESULT_BOOKMARK, loadId.toString(), if (state) 1 else 0)\r\n        }\r\n    }\n\nfun bookmark(state: Int, id: Int) = viewModelScope"}], "metadata": {"task_id": "QuickNovel/196", "ground_truth": "            updateBookmarkData()\r\n        }\r\n\r\n        readState.postValue(ReadType.fromSpinner(state))\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\result\\ResultViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.launch\nimport com.lagradost.quicknovel.R\nimport androidx.lifecycle.viewModelScope\nprivate fun downloadRemoved(id: Int) = viewModelScope.launch {\r\n        loadMutex.withLock {\r\n            if (!hasLoaded || id != loadId) return@launch\r", "choices": [{"text": "\n import kotlinx.coroutines.sync.withLock\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.launch\nimport com.lagradost.quicknovel.R\nimport androidx.lifecycle.viewModelScope\nprivate fun downloadRemoved(id: Int) = viewModelScope.launch {\r\n        loadMutex.withLock {\r\n            if (!hasLoaded || id!= loadId) return@launch\r\n//            if (id!= loadId) return@launch\r\n            loadId = id\r\n            loadStatus = LoadStatus.LOADING\r\n            loadProgress = 0\r\n            loadMessage = \"\"\r\n            loadError = null\r\n            loadData = null\r\n            loadData = null\r\n            loadData = null\r\n            loadData = null\r\n            loadData = null\r\n            loadData = null\r\n            loadData = null\r\n            loadData = null\r\n            loadData = null\r\n            loadData = null\r\n            loadData = null\r\n            loadData = null\r\n            loadData = null\r\n            loadData = null\r\n            loadData = null\r\n            loadData = null\r\n            loadData = null\r\n           "}], "metadata": {"task_id": "QuickNovel/201", "ground_truth": "            insertZeroData()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\result\\ResultViewModel.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.ui.ReadType\nimport com.lagradost.quicknovel.RESULT_BOOKMARK_STATE\nimport com.lagradost.quicknovel.RESULT_BOOKMARK\nimport com.lagradost.quicknovel.R\nimport com.lagradost.quicknovel.DataStore.getKey\nimport com.lagradost.quicknovel.DOWNLOAD_EPUB_LAST_ACCESS\nimport com.lagradost.quicknovel.BaseApplication.Companion.setKey\nimport com.lagradost.quicknovel.BaseApplication.Companion.getKey\nprivate fun setState(tid: Int) {\r\n        loadId = tid\r\n\r\n        readState.postValue(\r\n            ReadType.fromSpinner(\r\n                getKey(\r\n                    RESULT_BOOKMARK_STATE, tid.toString()\r\n                )\r\n            )\r\n        )\r\n\r\n        setKey(\r\n            DOWNLOAD_EPUB_LAST_ACCESS, tid.toString(), System.currentTimeMillis()\r\n        )\r\n\r\n        updateBookmarkData()\r\n\r", "choices": [{"text": "}\n\nprivate fun updateBookmarkData() {\r\n        val readState = readState.value?: return\r\n\r\n        val bookmark =\r\n            getKey(RESULT_BOOKMARK, loadId.toString())\r\n\r\n        val bookmarkState = readState.bookmarkState\r\n\r\n        if (bookmarkState == BookmarkState.NONE) {\r\n            setBookmark(false)\r\n            return\r\n        }\r\n\r\n        if (bookmarkState == BookmarkState.BOOKMARK) {\r\n            setBookmark(true)\r\n            return\r\n        }\r\n\r\n        if (bookmarkState == BookmarkState.UNBOOKMARK) {\r\n            setBookmark(false)\r\n            return\r\n        }\r\n\r\n        if (bookmarkState == Book"}], "metadata": {"task_id": "QuickNovel/202", "ground_truth": "        hasLoaded = true\r\n\r\n        // insert a download progress if not found\r\n        insertZeroData()\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\result\\ResultViewModel.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.R\nimport android.view.View\noverride fun onBindViewHolder(holder: ReviewAdapter2Holder, position: Int) {\r", "choices": [{"text": "val review = reviews[position]\r\nholder.reviewTitle.text = review.title\r\nholder.reviewContent.text = review.content\r\nholder.reviewAuthor.text = review.author\r\nholder.reviewDate.text = review.date\r\nholder.reviewRating.rating = review.rating.toFloat()\r\nholder.reviewImage.setImageResource(review.image)\r\nholder.reviewImage.setOnClickListener {\r\nval intent = Intent(context, ReviewActivity::class.java)\r\nintent.putExtra(\"review\", review)\r\ncontext.startActivity(intent)"}], "metadata": {"task_id": "QuickNovel/204", "ground_truth": "        val currentItem = getItem(position)\r\n        holder.bind(currentItem)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\result\\ReviewAdapter2.kt"}}
{"prompt": "\n import android.text.Layout\nfun Layout.getLineTopWithoutPadding(line: Int): Int {\r\n    var lineTop = getLineTop(line)\r", "choices": [{"text": "//    if (line == 0) {\r\n//        lineTop += paddingTop\r\n//    }\r\n    return lineTop\r\n}\n"}], "metadata": {"task_id": "QuickNovel/205", "ground_truth": "    if (line == 0) {\r\n        lineTop -= topPadding\r\n    }\r\n    return lineTop\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\roundedbg\\LayoutExtensions.kt"}}
{"prompt": "\n import android.text.Layout\nfun Layout.getLineBottomWithoutPadding(line: Int): Int {\r\n    var lineBottom = getLineBottomWithoutSpacing(line)\r", "choices": [{"text": "//    if (lineBottom > height) {\r\n//        lineBottom = height\r\n//    }\r\n    return lineBottom\r\n}\n"}], "metadata": {"task_id": "QuickNovel/206", "ground_truth": "    if (line == lineCount - 1) {\r\n        lineBottom -= bottomPadding\r\n    }\r\n    return lineBottom\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\roundedbg\\LayoutExtensions.kt"}}
{"prompt": "\n import android.view.View\noverride fun onBindViewHolder(holder: HomeChildItemAdapter2Holder, position: Int) {\r", "choices": [{"text": "holder.itemView.setOnClickListener {\r\nval intent = Intent(context, DetailActivity::class.java)\r\nintent.putExtra(\"id\", list[position].id)\r\nintent.putExtra(\"name\", list[position].name)\r\nintent.putExtra(\"image\", list[position].image)\r\nintent.putExtra(\"price\", list[position].price)\r\nintent.putExtra(\"description\", list[position].description)\r\ncontext.startActivity(intent)\r\n}\r\n}\r\n}\r\nclass HomeChildItemAdapter2Holder(itemView: View) : RecyclerView"}], "metadata": {"task_id": "QuickNovel/212", "ground_truth": "        val currentItem = getItem(position)\r\n        holder.bind(currentItem)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\search\\HomeChildItemAdapter2.kt"}}
{"prompt": "\n override fun onBindViewHolder(holder: ParentItemAdapter2Holder, position: Int) {\r", "choices": [{"text": "//        val item = items[position]\r\n//        holder.bind(item)\r\n//        holder.itemView.setOnClickListener {\r\n//            listener.onItemClick(item)\r\n//        }\r\n    }\r\n\r\n    override fun getItemCount(): Int {\r\n        return items.size\r\n    }\r\n\r\n    fun setItems(items: List<ParentItem>) {\r\n        this.items = items\r\n        notifyDataSetChanged()\r\n    }\r\n\r\n    fun setListener(listener: OnItemClickListener) {\r\n        this.listener = listener\r\n    }\r\n\r\n    interface OnItemClickListener {\r\n        fun onItemClick(item: ParentItem)\r\n    }"}], "metadata": {"task_id": "QuickNovel/214", "ground_truth": "        val currentItem = getItem(position)\r\n        holder.bind(currentItem)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\search\\ParentItemAdapter2.kt"}}
{"prompt": "\n import android.view.View\noverride fun onBindViewHolder(holder: SearchAdapter2Holder, position: Int) {\r", "choices": [{"text": "holder.itemView.setOnClickListener {\r\nval intent = Intent(context, DetailActivity::class.java)\r\nintent.putExtra(\"id\", data[position].id)\r\ncontext.startActivity(intent)\r\n}\r\n}\r\n}\r\nclass SearchAdapter2Holder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\nval title = itemView.findViewById<TextView>(R.id.title)\r\nval image = itemView.findViewById<ImageView>(R.id.image)\r\n}\r\n}\r\nclass SearchAdapter3(val context: Context"}], "metadata": {"task_id": "QuickNovel/216", "ground_truth": "        val currentItem = getItem(position)\r\n        holder.bind(currentItem)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\search\\SearchAdapter2.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.CommonActivity.activity\nimport android.view.WindowManager\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?,\r\n    ): View {\r\n        activity?.window?.setSoftInputMode(\r\n            WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE\r", "choices": [{"text": "//            WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE\r\n        )\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "QuickNovel/217", "ground_truth": "        )\r\n\r\n        binding = FragmentSearchBinding.inflate(inflater)\r\n        return binding.root\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\search\\SearchFragment.kt"}}
{"prompt": " import android.content.res.Configuration\nval configEvent\nvar currentDialog Dialog?\nval viewModel SearchViewModel\noverride fun onConfigurationChanged(newConfig: Configuration) {\r", "choices": [{"text": "super.onConfigurationChanged(newConfig)\r\nif (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n// do something\r\n} else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {\r\n// do something else\r\n}\r\n}\n"}], "metadata": {"task_id": "QuickNovel/218", "ground_truth": "        super.onConfigurationChanged(newConfig)\r\n        fixGrid()\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\search\\SearchFragment.kt"}}
{"prompt": " import com.lagradost.quicknovel.SearchResponse\nval _searchResponse MutableLiveData<Resource<ArrayList<SearchResponse>>>\nval searchResponse LiveData<Resource<ArrayList<SearchResponse>>>\nval _currentSearch MutableLiveData<ArrayList<OnGoingSearch>>\nfun showMetadata(card: SearchResponse) {\r", "choices": [{"text": "}\r\nfun showMetadata(card: OnGoingSearch) {\r\n}\r\nfun showMetadata(card: SearchResponse) {\r\n}\r\nfun showMetadata(card: OnGoingSearch) {\r\n}\r\nfun showMetadata(card: SearchResponse) {\r\n}\r\nfun showMetadata(card: OnGoingSearch) {\r\n}\r\nfun showMetadata(card: SearchResponse) {\r\n}\r\nfun showMetadata(card: OnGoingSearch) {\r\n}\r\nfun showMetadata(card: SearchResponse) {\r"}], "metadata": {"task_id": "QuickNovel/219", "ground_truth": "        MainActivity.loadPreviewPage(card)\r\n        //showToast(card.name)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\search\\SearchViewModel.kt"}}
{"prompt": "\n import androidx.preference.PreferenceFragmentCompat\nimport androidx.preference.Preference\nprivate fun PreferenceFragmentCompat?.getPref(id: Int): Preference? {\r\n        if (this == null) return null\r\n\r\n        return try {\r\n            findPreference(getString(id))\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/220", "ground_truth": "        } catch (e: Exception) {\r\n            logError(e)\r\n            null\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\settings\\SettingsFragment.kt"}}
{"prompt": "\n import java.io.File\nimport com.lagradost.safefile.SafeFile\nimport android.content.Context\nfun getDefaultDir(context: Context): SafeFile? {\r\n            // See https://www.py4u.net/discuss/614761\r\n            return SafeFile.fromMedia(\r", "choices": [{"text": "context.getExternalFilesDir(null)?: context.filesDir)\r\n        }\n"}], "metadata": {"task_id": "QuickNovel/221", "ground_truth": "                context, MediaFileContentType.Downloads\r\n            )?.gotoDirectory(\"Epub\")\r\n        }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\settings\\SettingsFragment.kt"}}
{"prompt": "\nvar span SpanDisplay?\nval cachedFont Typeface\nval fontFile File?\n fun changeHeight(height: Int): Boolean {\r\n        if (config.toolbarHeight == height) return false\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/226", "ground_truth": "        config = config.copy(toolbarHeight = height)\r\n        return true\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\TextAdapter.kt"}}
{"prompt": "\nval cachedFont Typeface\nval fontFile File?\nvar span SpanDisplay?\n fun changeColor(color: Int): Boolean {\r\n        if (config.textColor == color) return false\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/227", "ground_truth": "        config = config.copy(textColor = color)\r\n        return true\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\TextAdapter.kt"}}
{"prompt": "\nval cachedFont Typeface\nvar span SpanDisplay?\nvar currentTTSLine TTSHelper?.TTSLine?\n fun changeSize(size: Int): Boolean {\r\n        if (config.textSize == size) return false\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/228", "ground_truth": "        config = config.copy(textSize = size)\r\n        return true\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\TextAdapter.kt"}}
{"prompt": "\nval fontFile File?\nval cachedFont Typeface\nvar currentTTSLine TTSHelper?.TTSLine?\n fun changeFont(font: String): Boolean {\r\n        if (config.textFont == font) return false\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/229", "ground_truth": "        config = config.copy(textFont = font)\r\n        return true\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\TextAdapter.kt"}}
{"prompt": "\nval cachedFont Typeface\nval fontFile File?\nvar span SpanDisplay?\n fun changeBackgroundColor(color: Int): Boolean {\r\n        if (config.backgroundColor == color) return false\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/230", "ground_truth": "        config = config.copy(backgroundColor = color)\r\n        return true\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\TextAdapter.kt"}}
{"prompt": "\nval cachedFont Typeface\nvar currentTTSLine TTSHelper?.TTSLine?\nvar span SpanDisplay?\n override fun onBindViewHolder(holder: TextAdapterHolder, position: Int) {\r", "choices": [{"text": "val item = items[position]\nholder.bind(item)\nholder.itemView.setOnClickListener {\nif (span!= null) {\nspan!!.onSpanClick(item)\n}\n}\n}\noverride fun getItemCount(): Int {\nreturn items.size\n}\noverride fun getItemViewType(position: Int): Int {\nreturn items[position].type\n}\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): TextAdapterHolder {\nval view = LayoutInflater.from(parent.context).inflate(R.layout.item_text, parent, false)\n"}], "metadata": {"task_id": "QuickNovel/231", "ground_truth": "        val currentItem = getItem(position)\r\n        holder.bind(currentItem, currentTTSLine, config)\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\TextAdapter.kt"}}
{"prompt": "\n import io.noties.markwon.image.AsyncDrawable\nimport com.lagradost.quicknovel.databinding.SingleImageBinding\nprivate fun bindImage(binding : SingleImageBinding, img : AsyncDrawable) {\r\n            val url = img.destination\r\n            if (binding.root.url == url) return\r", "choices": [{"text": "binding.root.url = url\r\nbinding.root.loadImage(url)\r\n}\n"}], "metadata": {"task_id": "QuickNovel/232", "ground_truth": "            binding.root.url = url // don't reload if already set\r\n            UIHelper.bindImage(binding.root, img)\r\n        }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\TextAdapter.kt"}}
{"prompt": "\n import android.content.Context\nfun asStringNull(context: Context?): String? {\r\n        try {\r\n            return asString(context ?: return null)\r\n        } catch (e: Exception) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/236", "ground_truth": "            Log.e(TAG, \"Got invalid data from $this\")\r\n            logError(e)\r\n            return null\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\UiText.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.util.UIHelper.setImage\nimport android.widget.ImageView\nfun ImageView?.setImage(value: UiImage?, fadeIn: Boolean = true) {\r\n    when (value) {\r\n        is UiImage.Image -> setImageImage(value, fadeIn)\r\n        is UiImage.Drawable -> setImageDrawable(value)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/237", "ground_truth": "        null -> {\r\n            this?.isVisible = false\r\n        }\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\UiText.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.util.UIHelper.setImage\nimport android.widget.ImageView\nfun ImageView?.setImageImage(value: UiImage.Image, fadeIn: Boolean = true) {\r", "choices": [{"text": "this?.setImage(value, fadeIn)\r\n}<file_sep>/app/src/main/java/com/lagradost/quicknovel/ui/main/MainViewModel.kt\npackage com.lagradost.quicknovel.ui.main\n\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport com.lagradost.quicknovel.data.model.Book\nimport com.lagradost.quicknovel.data.model.BookStatus\nimport com.lagradost.quicknovel.data.model"}], "metadata": {"task_id": "QuickNovel/238", "ground_truth": "    if (this == null) return\r\n    this.isVisible = setImage(value.url, value.headers, value.errorDrawable, fadeIn)\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\UiText.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.util.UIHelper.setImage\nimport android.widget.ImageView\nfun ImageView?.setImageDrawable(value: UiImage.Drawable) {\r\n    if (this == null) return\r", "choices": [{"text": "}\r\n\r\nfun ImageView?.setImageDrawable(value: UiImage.Drawable?) {\r\n    if (this == null) return\r\n}\r\n\r\nfun ImageView?.setImageDrawable(value: UiImage.Drawable?) {\r\n    if (this == null) return\r\n}\r\n\r\nfun ImageView?.setImageDrawable(value: UiImage.Drawable?) {\r\n    if (this == null) return\r\n}\r\n\r\nfun ImageView?.setImageDrawable(value: UiImage.Drawable?) {\r\n    if (this == null) return\r\n}\r\n\r\nfun ImageView?.setImageDrawable(value: UiImage.Drawable?) {\r\n    if"}], "metadata": {"task_id": "QuickNovel/239", "ground_truth": "    this.isVisible = true\r\n    this.setImage(UiImage.Drawable(value.resId))\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\UiText.kt"}}
{"prompt": "\n import androidx.annotation.DrawableRes\n\r\n@JvmName(\"imgNull\")\r\nfun img(\r\n    url: String?,\r\n    headers: Map<String, String>? = null,\r\n    @DrawableRes errorDrawable: Int? = null\r\n): UiImage? {\r", "choices": [{"text": ""}], "metadata": {"task_id": "QuickNovel/240", "ground_truth": "    if (url.isNullOrBlank()) return null\r\n    return UiImage.Image(url, headers, errorDrawable)\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\UiText.kt"}}
{"prompt": "\n import androidx.annotation.StringRes\n\r\n@JvmName(\"txtNull\")\r\nfun txt(@StringRes resId: Int?, vararg args: Any?): UiText? {\r\n    if (resId == null || args.any { it == null }) {\r\n        return null\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/241", "ground_truth": "    }\r\n    return UiText.StringResource(resId, args.filterNotNull().toList())\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\UiText.kt"}}
{"prompt": "\n import androidx.core.view.isVisible\nimport android.widget.TextView\nfun TextView?.setText(text: UiText?) {\r\n    if (this == null) return\r\n    if (text == null) {\r\n        this.isVisible = false\r\n    } else {\r\n        val str = text.asStringNull(context)?.let {\r\n            if (this.maxLines == 1) {\r\n                it.replace(\"\\n\", \" \")\r\n            } else {\r\n                it\r\n            }\r\n        }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/242", "ground_truth": "\r\n        this.isGone = str.isNullOrBlank()\r\n        this.text = str\r\n    }\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\ui\\UiText.kt"}}
{"prompt": " import com.lagradost.quicknovel.MainAPI\nval apis Array<MainAPI>\nfun getApiFromNameNull(apiName: String?): MainAPI? {\r\n            for (api in apis) {\r", "choices": [{"text": "if (api.name == apiName) {\r\nreturn api\r\n}\r\n}\r\nreturn null\r\n}\n<file_sep>/app/src/main/java/com/lagradost/quicknovel/ui/main/MainViewModel.kt\npackage com.lagradost.quicknovel.ui.main\n\nimport android.app.Application\nimport android.content.Context\nimport android.content.Intent\nimport android.net.Uri\nimport android.os.Build\nimport android.os.Environment\nimport android.provider.Settings\nimport android.util."}], "metadata": {"task_id": "QuickNovel/244", "ground_truth": "                if (apiName == api.name)\r\n                    return api\r\n            }\r\n            return null\r\n        }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\Apis.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.R\nimport androidx.preference.PreferenceManager\nimport android.content.Context\nfun Context.getApiProviderLangSettings(): HashSet<String> {\r\n            val settingsManager = PreferenceManager.getDefaultSharedPreferences(this)\r\n            val hashSet = HashSet<String>()\r\n            hashSet.add(\"en\") // def is only en\r\n            val list = settingsManager.getStringSet(\r\n                this.getString(R.string.provider_lang_key),\r\n                hashSet.toMutableSet()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/247", "ground_truth": "            )\r\n\r\n            if (list.isNullOrEmpty()) return hashSet\r\n            return list.toHashSet()\r\n        }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\Apis.kt"}}
{"prompt": "\n import android.content.Context\nprivate fun <T> Context.restoreMap(\r\n        map: Map<String, T>?,\r\n        isEditingAppSettings: Boolean = false\r\n    ) {\r\n        map?.forEach {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/248", "ground_truth": "            setKeyRaw(it.key, it.value, isEditingAppSettings)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\BackupUtils.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.mvvm.launchSafe\nfun <T> T.main(work: suspend ((T) -> Unit)): Job {\r\n        val value = this\r\n        return CoroutineScope(Dispatchers.Main).launchSafe {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/249", "ground_truth": "            work(value)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\Coroutines.kt"}}
{"prompt": "\n fun <T> T.ioSafe(work: suspend (CoroutineScope.(T) -> Unit)): Job {\r\n        val value = this\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/250", "ground_truth": "\r\n        return CoroutineScope(Dispatchers.IO).launchSafe {\r\n            work(value)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\Coroutines.kt"}}
{"prompt": "\n suspend fun <T, V> V.ioWorkSafe(work: suspend (CoroutineScope.(V) -> T)): T? {\r\n        val value = this\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                work(value)\r\n            } catch (e: Exception) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/251", "ground_truth": "                logError(e)\r\n                null\r\n            }\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\Coroutines.kt"}}
{"prompt": "\n suspend fun <T, V> V.ioWork(work: suspend (CoroutineScope.(V) -> T)): T {\r\n        val value = this\r\n        return withContext(Dispatchers.IO) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/252", "ground_truth": "            work(value)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\Coroutines.kt"}}
{"prompt": "\n suspend fun <T, V> V.mainWork(work: suspend (CoroutineScope.(V) -> T)): T {\r\n        val value = this\r\n        return withContext(Dispatchers.Main) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/253", "ground_truth": "            work(value)\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\Coroutines.kt"}}
{"prompt": "\n import android.os.Looper\nimport android.os.Handler\nfun runOnMainThread(work: (() -> Unit)) {\r\n        val mainHandler = Handler(Looper.getMainLooper())\r\n        mainHandler.post {\r", "choices": [{"text": "//            work()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "QuickNovel/254", "ground_truth": "            work()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\Coroutines.kt"}}
{"prompt": "\n import kotlin.collections.ArrayList\nimport java.util.concurrent.Executors\nimport java.util.concurrent.ExecutorService\nimport java.util.*\nfun <T, R> Iterable<T>.pmap(\r\n    numThreads: Int = maxOf(Runtime.getRuntime().availableProcessors() - 2, 1),\r\n    exec: ExecutorService = Executors.newFixedThreadPool(numThreads),\r\n    transform: (T) -> R,\r\n): List<R> {\r\n\r\n    // default size is just an inlined version of kotlin.collections.collectionSizeOrDefault\r\n    val defaultSize = if (this is Collection<*>) this.size else 10\r\n    val destination = Collections.synchronizedList(ArrayList<R>(defaultSize))\r\n\r\n    for (item in this) {\r\n        exec.submit { destination.add(transform(item)) }\r\n    }\r\n\r", "choices": [{"text": "//    exec.shutdown()\r\n//    exec.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS)\r\n\r\n    return destination\r\n}\r\n\r\nfun main() {\r\n    val list = listOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n    val result = list.pmap { it * 2 }\r\n    println(result)\r\n}<file_sep>/src/main/kotlin/com/example/demo/controller/UserController.kt\npackage com.example.demo.controller\n\n"}], "metadata": {"task_id": "QuickNovel/256", "ground_truth": "    exec.shutdown()\r\n    exec.awaitTermination(1, TimeUnit.DAYS)\r\n\r\n    return ArrayList<R>(destination)\r\n}", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\ParCollections.kt"}}
{"prompt": "\n import kotlinx.coroutines.DelicateCoroutinesApi\n\r\n@OptIn(DelicateCoroutinesApi::class)\r\nsuspend fun <A, B> List<A>.amap(f: suspend (A) -> B): List<B> =\r", "choices": [{"text": "map { a -> f(a) }\r\n"}], "metadata": {"task_id": "QuickNovel/257", "ground_truth": "    with(CoroutineScope(GlobalScope.coroutineContext)) {\r\n        map { async { f(it) } }.map { it.await() }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\ParCollections.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.R\nimport com.google.android.material.bottomsheet.BottomSheetDialog\nimport android.content.Context\nimport android.app.Dialog\nfun Context.showBottomDialog(\r\n        items: List<String>,\r\n        selectedIndex: Int,\r\n        name: String,\r\n        showApply: Boolean,\r\n        dismissCallback: () -> Unit,\r\n        callback: (Int) -> Unit,\r\n    ) {\r\n        val builder =\r\n            BottomSheetDialog(this)\r\n        builder.setContentView(R.layout.bottom_selection_dialog)\r\n\r\n        builder.show()\r\n        showDialog(\r\n            builder,\r\n            items,\r\n            listOf(selectedIndex),\r\n            name,\r\n            showApply,\r", "choices": [{"text": "//            dismissCallback,\r\n            callback\r\n        )\r\n    }\r\n\r\n    private fun showDialog(\r\n        builder: BottomSheetDialog,\r\n        items: List<String>,\r\n        selectedIndex: List<Int>,\r\n        name: String,\r\n        showApply: Boolean,\r\n        dismissCallback: () -> Unit,\r\n        callback: (Int) -> Unit,\r\n    ) {\r\n        val recyclerView = builder.findViewById<RecyclerView>(R.id.recyclerView)\r\n        val applyButton = builder.findViewById<Button>(R.id.applyButton)\r\n        val cancelButton = builder.findViewById<Button>(R.id.cancelButton)\r\n        val title"}], "metadata": {"task_id": "QuickNovel/264", "ground_truth": "            false,\r\n            { callback.invoke(it.first()) },\r\n            dismissCallback\r\n        )\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\SingleSelectionHelper.kt"}}
{"prompt": "\n fun fromLanguageToTwoLetters(input: String): String? {\r\n        for (lang in languages) {\r\n            if (lang.languageName == input || lang.nativeName == input) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/265", "ground_truth": "                return lang.ISO_639_1\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\SubtitleHelper.kt"}}
{"prompt": "\n fun fromTwoLettersToLanguage(input: String): String? {\r\n        if (input.length != 2) return null\r\n        val comparison = input.lowercase(Locale.ROOT)\r\n        for (lang in languages) {\r\n            if (lang.ISO_639_1 == comparison) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/266", "ground_truth": "                return lang.languageName\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\SubtitleHelper.kt"}}
{"prompt": "\n fun fromLanguageToThreeLetters(input: String): String? {\r\n        for (lang in languages) {\r\n            if (lang.languageName == input || lang.nativeName == input) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/267", "ground_truth": "                return lang.ISO_639_2_T\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\SubtitleHelper.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.R\nimport androidx.core.text.HtmlCompat\nimport android.text.Spanned\nprivate fun getHtmlText(text: String): Spanned {\r\n        return try {\r\n            // I have no idea if this can throw any error, but I dont want to try\r\n            HtmlCompat.fromHtml(\r\n                text, HtmlCompat.FROM_HTML_MODE_LEGACY\r\n            )\r", "choices": [{"text": "//            HtmlCompat.fromHtml(\r\n//                text, HtmlCompat.FROM_HTML_MODE_LEGACY\r\n//            )\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n            HtmlCompat.fromHtml(text, HtmlCompat.FROM_HTML_MODE_LEGACY)\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "QuickNovel/268", "ground_truth": "        } catch (e: Exception) {\r\n            logError(e)\r\n            text.toSpanned()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\UIHelper.kt"}}
{"prompt": "\n import android.app.Dialog\nimport android.app.Activity\nfun Dialog?.dismissSafe(activity: Activity?) {\r\n        if (this?.isShowing == true && activity?.isFinishing == false) {\r", "choices": [{"text": "//            this.dismiss()\r\n            activity.runOnUiThread {\r\n                this.dismiss()\r\n            }\r\n        }\r\n    }<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.app.Activity\nimport android.app.Dialog\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\nimport com.example.myapplication"}], "metadata": {"task_id": "QuickNovel/270", "ground_truth": "            this.dismiss()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\UIHelper.kt"}}
{"prompt": "\n import android.content.Context\nfun Context.dimensionFromAttribute(attribute: Int): Int {\r\n        val attributes = obtainStyledAttributes(intArrayOf(attribute))\r\n        val dimension = attributes.getDimensionPixelSize(0, 0)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/273", "ground_truth": "        attributes.recycle()\r\n        return dimension\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\UIHelper.kt"}}
{"prompt": "\n import android.graphics.Color\nimport android.content.Context\nfun Context.colorFromAttribute(attribute: Int): Int {\r\n        val attributes = obtainStyledAttributes(intArrayOf(attribute))\r\n        val color = attributes.getColor(0, 0)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/274", "ground_truth": "        attributes.recycle()\r\n        return color\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\UIHelper.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.util.UIHelper.setImage\nimport com.lagradost.quicknovel.R\nimport com.lagradost.quicknovel.ui.UiImage\nimport androidx.annotation.DrawableRes\nimport android.widget.ImageView\nimport android.view.View\nimport android.graphics.drawable.Drawable\nfun ImageView?.setImage(\r\n        url: String?,\r\n        headers: Map<String, String>? = null,\r\n        @DrawableRes\r\n        errorImageDrawable: Int? = null,\r\n        fadeIn: Boolean = true,\r\n        radius: Int = 0,\r\n        sample: Int = 3,\r\n        //colorCallback: ((Palette) -> Unit)? = null\r\n    ): Boolean {\r\n        if (url.isNullOrBlank()) return false\r\n        this.setImage(\r\n            UiImage.Image(url, headers, errorImageDrawable),\r\n            errorImageDrawable,\r\n            fadeIn,\r\n            radius,\r", "choices": [{"text": "//            colorCallback,\r\n            sample\r\n        )\r\n        return true\r\n    }\r\n\r\nfun ImageView?.setImage(\r\n        image: UiImage.Image,\r\n        @DrawableRes\r\n        errorImageDrawable: Int? = null,\r\n        fadeIn: Boolean = true,\r\n        radius: Int = 0,\r\n        //colorCallback: ((Palette) -> Unit)? = null,\r\n        sample: Int = 3\r\n    ): Boolean {\r\n        if (image.url.isNullOrBlank()) return false\r\n        this.setImage(\r\n            image,\r\n            errorImageDrawable,\r\n            fadeIn,\r\n            radius,\r\n//            colorCallback,\r\n            sample\r\n        )\r\n       "}], "metadata": {"task_id": "QuickNovel/275", "ground_truth": "            sample,\r\n            //colorCallback\r\n        )\r\n        return true\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\UIHelper.kt"}}
{"prompt": "\n import java.io.File\nprivate fun getAllFonts(): Array<File> {\r\n        return try {\r\n            val path = \"/system/fonts\"\r\n            val file = File(path)\r\n            file.listFiles() ?: emptyArray()\r", "choices": [{"text": "\n import java.io.File\nprivate fun getAllFonts(): Array<File> {\r\n        return try {\r\n            val path = \"/system/fonts\"\r\n            val file = File(path)\r\n            file.listFiles()?: emptyArray()\r\n} catch (e: Exception) {\r\n            emptyArray()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "QuickNovel/276", "ground_truth": "        } catch (t: Throwable) {\r\n            logError(t)\r\n            emptyArray()\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\UIHelper.kt"}}
{"prompt": "\n import android.view.View\nimport android.app.Activity\nfun Activity.fixPaddingStatusbar(v: View) {\r\n        v.setPadding(\r\n            v.paddingLeft,\r", "choices": [{"text": "//            v.paddingTop + getStatusBarHeight(this),\r\n            v.paddingTop,\r\n            v.paddingRight,\r\n            v.paddingBottom\r\n        )\r\n    }\n"}], "metadata": {"task_id": "QuickNovel/278", "ground_truth": "            v.paddingTop + getStatusBarHeight(),\r\n            v.paddingRight,\r\n            v.paddingBottom\r\n        )\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\UIHelper.kt"}}
{"prompt": "\n import kotlin.math.roundToInt\nimport com.lagradost.quicknovel.R\nimport androidx.core.graphics.alpha\nimport androidx.annotation.ColorInt\nimport androidx.annotation.AttrRes\nimport android.graphics.Color\nimport android.content.Context\n @ColorInt\r\n    fun Context.getResourceColor(@AttrRes resource: Int, alphaFactor: Float = 1f): Int {\r\n        val typedArray = obtainStyledAttributes(intArrayOf(resource))\r\n        val color = typedArray.getColor(0, 0)\r\n        typedArray.recycle()\r\n\r\n        if (alphaFactor < 1f) {\r\n            val alpha = (color.alpha * alphaFactor).roundToInt()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/279", "ground_truth": "            return Color.argb(alpha, color.red, color.green, color.blue)\r\n        }\r\n\r\n        return color\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\UIHelper.kt"}}
{"prompt": "\n import com.lagradost.quicknovel.R\nimport androidx.appcompat.widget.PopupMenu\nimport androidx.annotation.MenuRes\nimport android.view.View\nimport android.view.MenuItem\nimport android.view.Menu\nimport android.view.Gravity\ninline fun View.popupMenu(\r\n        @MenuRes menuRes: Int,\r\n        noinline initMenu: (Menu.() -> Unit)? = null,\r\n        noinline onMenuItemClick: MenuItem.() -> Unit,\r\n    ): PopupMenu {\r\n        val popup = PopupMenu(context, this, Gravity.NO_GRAVITY, R.attr.actionOverflowMenuStyle, 0)\r\n        popup.menuInflater.inflate(menuRes, popup.menu)\r\n\r\n        if (initMenu != null) {\r\n            popup.menu.initMenu()\r\n        }\r\n        popup.setOnMenuItemClickListener {\r\n            it.onMenuItemClick()\r\n            true\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/281", "ground_truth": "        }\r\n\r\n        popup.show()\r\n        return popup\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\UIHelper.kt"}}
{"prompt": " import androidx.fragment.app.Fragment\nval systemFonts Array<File>\nfun Fragment.hideKeyboard() {\r\n        view.let {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/282", "ground_truth": "            if (it != null) {\r\n                activity?.hideKeyboard(it)\r\n            }\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\util\\UIHelper.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onFocusSearchFailed(\r\n        focused: View,\r\n        focusDirection: Int,\r\n        recycler: RecyclerView.Recycler,\r\n        state: RecyclerView.State\r\n    ): View? {\r\n        return try {\r\n            val fromPos = getPosition(focused)\r\n            println(\"Search failed $fromPos\")\r\n            val nextPos = getNextViewPos(fromPos, focusDirection)\r", "choices": [{"text": "//            println(\"Search failed $nextPos\")\r\n            if (nextPos == RecyclerView.NO_POSITION) {\r\n                null\r\n            } else {\r\n                getChildAt(nextPos)\r\n            }\r\n        } catch (e: Exception) {\r\n            null\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "QuickNovel/284", "ground_truth": "            findViewByPosition(nextPos)\r\n        } catch (e: Exception) {\r\n            null\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\widget\\AutofitRecyclerView.kt"}}
{"prompt": "\n import android.view.View\noverride fun onInterceptFocusSearch(focused: View, direction: Int): View? {\r\n        return try {\r\n            val fromPos = getPosition(focused)\r\n            val nextPos = getNextViewPos(fromPos, direction)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/286", "ground_truth": "            findViewByPosition(nextPos)\r\n        } catch (e: Exception) {\r\n            null\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\widget\\AutofitRecyclerView.kt"}}
{"prompt": "\n import android.view.View\nprivate fun getNextViewPos(fromPos: Int, direction: Int): Int {\r\n        val offset = calcOffsetToNextView(direction)\r\n\r\n        if (hitBorder(fromPos, offset)) {\r", "choices": [{"text": "//            return fromPos + offset\r\n            return fromPos\r\n        }\r\n\r\n        return fromPos + offset\r\n    }\r\n\r\n    private fun hitBorder(fromPos: Int, offset: Int): Boolean {\r\n        return fromPos + offset < 0 || fromPos + offset >= mViewList.size\r\n    }\r\n\r\n    private fun calcOffsetToNextView(direction: Int): Int {\r\n        return if (direction == DIRECTION_LEFT) {\r\n            -1\r\n        } else {\r\n            1\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "QuickNovel/287", "ground_truth": "            return fromPos\r\n        }\r\n\r\n        return fromPos + offset\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\widget\\AutofitRecyclerView.kt"}}
{"prompt": "\n import kotlin.math.abs\nprivate fun hitBorder(from: Int, offset: Int): Boolean {\r\n        val spanCount = spanCount\r\n\r\n        return if (abs(offset) == 1) {\r\n            val spanIndex = from % spanCount\r\n            val newSpanIndex = spanIndex + offset\r\n            newSpanIndex < 0 || newSpanIndex >= spanCount\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "QuickNovel/288", "ground_truth": "        } else {\r\n            val newPos = from + offset\r\n            newPos in spanCount..-1\r\n        }\r\n    }", "fpath": "QuickNovel\\app\\src\\main\\java\\com\\lagradost\\quicknovel\\widget\\AutofitRecyclerView.kt"}}
