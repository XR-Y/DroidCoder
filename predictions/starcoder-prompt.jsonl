{"prompt": "\n import java.util.Date\nopen fun getNewDatesGridAdapter(month: Int, year: Int): CaldroidGridAdapter {\r", "choices": [{"text": "+    val caldroid = CaldroidFragment()\r\n+    val caldroidHelper = CaldroidHelper(caldroid, context)\r\n+    caldroidHelper.initialize(year, month)\r\n+    caldroidHelper.refreshView()\r\n+    return caldroidHelper.caldroidAdapter\r\n+}\r\n"}], "metadata": {"task_id": "aaf-easydiary/0", "ground_truth": "        return CaldroidGridAdapter(requireActivity(), month, year,\r\n                getCaldroidData(), extraData)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt"}}
{"prompt": "\n import com.caldroid.R\nopen fun getNewWeekdayAdapter(themeResource: Int): WeekdayArrayAdapter {\r\n        return WeekdayArrayAdapter(\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/1", "ground_truth": "                activity, android.R.layout.simple_list_item_1,\r\n                daysOfWeek, themeResource)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt"}}
{"prompt": " import java.util.Date\nimport android.graphics.drawable.Drawable\nvar mCaldroidData MutableMap<String, Any?>\nvar caldroidListener CaldroidListener?\nvar mBackgroundForDateTimeMap MutableMap<DateTime, Drawable>\nfun clearBackgroundDrawableForDates(dates: List<Date>?) {\r\n        if (dates == null || dates.size == 0) {\r\n            return\r\n        }\r", "choices": [{"text": "//        val cal = Calendar.getInstance()\r\n//        cal.time = dates[0]\r\n//        val date = cal.time\r\n//        val dateString = DateFormat.getDateInstance(DateFormat.SHORT).format(date)\r\n//        mCaldroidData.remove(dateString)\r\n//        mBackgroundForDateTimeMap.remove(date)\r\n//        caldroidListener?.onBackgroundChanged(date, null)\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/3", "ground_truth": "\r\n        for (date in dates) {\r\n            clearBackgroundDrawableForDate(date)\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt"}}
{"prompt": "\n import hirondelle.date4j.DateTime\nimport java.util.Date\nimport android.text.format.Time\nimport android.graphics.drawable.Drawable\nfun clearBackgroundDrawableForDateTimes(dateTimes: List<DateTime>?) {\r\n        if (dateTimes == null || dateTimes.size == 0) return\r", "choices": [{"text": "\n        for (dateTime in dateTimes) {\r\n            dateTime.clearBackgroundDrawable()\r\n        }\r\n    }\n\nfun clearBackgroundDrawableForDateTimes(dateTimes: List<DateTime>?, drawable: Drawable?) {\r\n        if (dateTimes == null || dateTimes.size == 0) return\r\r\n        for (dateTime in dateTimes) {\r\n            dateTime.clearBackgroundDrawable(drawable)\r\n        }\r\n    }\n\nfun clearBackgroundDrawableForDateTimes(dateTimes: List<DateTime>?, drawable: Drawable?, color: Int) {\r\n        if (dateTimes == null || dateTimes.size == 0) return\r"}], "metadata": {"task_id": "aaf-easydiary/4", "ground_truth": "\r\n        for (dateTime in dateTimes) {\r\n            mBackgroundForDateTimeMap.remove(dateTime)\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt"}}
{"prompt": "\n import java.util.Date\nimport android.graphics.drawable.Drawable\nfun clearBackgroundDrawableForDate(date: Date) {\r", "choices": [{"text": "val drawable = getBackgroundDrawableForDate(date)\r\nif (drawable!= null) {\r\nval background = drawable.current\r\nif (background is Drawable) {\r\nbackground.clearColorFilter()\r\n}\r\n}\r\n}\r\nfun getBackgroundDrawableForDate(date: Date): Drawable? {\r\nval calendar = Calendar.getInstance()\r\ncalendar.time = date\r\nval day = calendar.get(Calendar.DAY_OF_MONTH)\r\nval month = calendar.get(Calendar.MONTH)\r\nval year = calendar.get(Calendar."}], "metadata": {"task_id": "aaf-easydiary/6", "ground_truth": "        val dateTime = CalendarHelper.convertDateToDateTime(date)\r\n        mBackgroundForDateTimeMap.remove(dateTime)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt"}}
{"prompt": " import java.util.Date\nimport android.graphics.Color\nvar mCaldroidData MutableMap<String, Any?>\nvar caldroidListener CaldroidListener?\nvar mTextColorForDateTimeMap MutableMap<DateTime, Int>\nfun clearTextColorForDates(dates: List<Date>?) {\r\n        if (dates == null || dates.size == 0) return\r", "choices": [{"text": "\n        for (date in dates) {\r\n            mCaldroidData.remove(date.toString())\r\n        }\r\n    }\n\r\nfun setTextColorForDates(dates: List<Date>?, color: Int) {\r\n        if (dates == null || dates.size == 0) return\r\r\n        for (date in dates) {\r\n            mCaldroidData.put(date.toString(), color)\r\n        }\r\n    }\r\nfun setTextColorForDate(date: Date?, color: Int) {\r\n        if (date == null) return\r\r\n        mCaldroidData.put(date.toString(),"}], "metadata": {"task_id": "aaf-easydiary/8", "ground_truth": "\r\n        for (date in dates) {\r\n            clearTextColorForDate(date)\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt"}}
{"prompt": "\n import java.util.Date\nimport android.graphics.Color\nfun clearTextColorForDate(date: Date) {\r", "choices": [{"text": "val calendar = Calendar.getInstance()\r\ncalendar.time = date\r\nval day = calendar.get(Calendar.DAY_OF_MONTH)\r\nval month = calendar.get(Calendar.MONTH)\r\nval year = calendar.get(Calendar.YEAR)\r\nval dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH)\r\nval monthOfYear = calendar.get(Calendar.MONTH)\r\nval yearOfCalender = calendar.get(Calendar.YEAR)\r\nval dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK)\r\nval day"}], "metadata": {"task_id": "aaf-easydiary/10", "ground_truth": "        val dateTime = CalendarHelper.convertDateToDateTime(date)\r\n        mTextColorForDateTimeMap.remove(dateTime)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt"}}
{"prompt": "\n import android.os.Bundle\nfun restoreStatesFromKey(savedInstanceState: Bundle?, key: String) {\r\n        if (savedInstanceState != null && savedInstanceState.containsKey(key)) {\r\n            val caldroidSavedState = savedInstanceState.getBundle(key)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/11", "ground_truth": "            arguments = caldroidSavedState\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt"}}
{"prompt": "\n import hirondelle.date4j.DateTime\nimport java.util.Date\nimport android.text.format.Time\nfun setCalendarDateTime(dateTime: DateTime) {\r\n        month = dateTime.month!!\r\n        year = dateTime.year!!\r\n\r\n        // Notify listener\r\n        if (caldroidListener != null) {\r", "choices": [{"text": "\n import hirondelle.date4j.DateTime\nimport java.util.Date\nimport android.text.format.Time\nfun setCalendarDateTime(dateTime: DateTime) {\r\n        month = dateTime.month!!\r\n        year = dateTime.year!!\r\n\r\n        // Notify listener\r\n        if (caldroidListener!= null) {\r\n//            caldroidListener.onMonthChange(caldroidView, month, year)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/13", "ground_truth": "            caldroidListener!!.onChangeMonth(month, year)\r\n        }\r\n\r\n        refreshView()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r\n        if (dialog != null && retainInstance) {\r\n            dialog!!.setDismissMessage(null)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/25", "ground_truth": "        }\r\n        super.onDestroyView()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt"}}
{"prompt": "\n import hirondelle.date4j.DateTime\nimport java.util.Date\nimport android.text.format.Time\nfun setCurrentDateTime(dateTime: DateTime) {\r", "choices": [{"text": "val time = Time()\r\ntime.set(dateTime.getMillis())\r\ntime.year = dateTime.getYear()\r\ntime.month = dateTime.getMonth() - 1\r\ntime.monthDay = dateTime.getDayOfMonth()\r\ntime.hour = dateTime.getHour()\r\ntime.minute = dateTime.getMinute()\r\ntime.second = dateTime.getSecond()\r\ntime.normalize(true)\r\n}\r\nfun getCurrentDateTime(): DateTime {\r\nval time = Time()\r\ntime.setToNow()\r\nreturn DateTime(time."}], "metadata": {"task_id": "aaf-easydiary/27", "ground_truth": "            this.currentDateTime = dateTime\r\n            setCalendarDateTime(currentDateTime!!)\r\n        }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt"}}
{"prompt": "\n import com.caldroid.R\nimport android.os.Bundle\nfun newInstance(dialogTitle: String, month: Int,\r\n                        year: Int): CaldroidFragment {\r\n            val f = CaldroidFragment()\r\n\r\n            // Supply num input as an argument.\r\n            val args = Bundle()\r\n            args.putString(DIALOG_TITLE, dialogTitle)\r\n            args.putInt(MONTH, month)\r\n            args.putInt(YEAR, year)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/29", "ground_truth": "\r\n            f.arguments = args\r\n\r\n            return f\r\n        }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\com\\roomorama\\caldroid\\CaldroidFragmentEx.kt"}}
{"prompt": "\n fun setPickPhotoSize(photoSize: Int): Builder {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/32", "ground_truth": "            pickModel.pickPhotoSize = photoSize\r\n            return this\r\n        }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt"}}
{"prompt": "\n fun setHasPhotoSize(hasSize: Int): Builder {\r", "choices": [{"text": "+    this.hasPhotoSize = hasSize\r\n     return this\r\n }\r\n \r\n fun setHasPhotoSize(hasSize: Boolean): Builder {\r\n+    this.hasPhotoSize = if (hasSize) 1 else 0\r\n     return this\r\n }\r\n \r\n fun setHasPhotoSize(hasSize: String): Builder {\r\n+    this.hasPhotoSize = if (hasSize == \"1\") 1 else 0\r\n     return this\r\n }\r\n \r\n fun setHasPhotoSize(hasSize: IntArray): Builder {\r\n+    this.hasPhotoSize = hasSize."}], "metadata": {"task_id": "aaf-easydiary/33", "ground_truth": "            pickModel.hasPhotoSize = hasSize\r\n            return this\r\n        }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt"}}
{"prompt": "\n fun setAllPhotoSize(allSize: Int): Builder {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/34", "ground_truth": "            pickModel.allPhotoSize = allSize\r\n            return this\r\n        }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt"}}
{"prompt": "\n fun setSpanCount(spanCount: Int): Builder {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/35", "ground_truth": "            pickModel.spanCount = spanCount\r\n            return this\r\n        }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt"}}
{"prompt": "\n fun setShowCamera(showCamera: Boolean): Builder {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/36", "ground_truth": "            pickModel.isShowCamera = showCamera\r\n            return this\r\n        }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt"}}
{"prompt": "\nval pickModel\n fun setClickSelectable(clickSelectable: Boolean): Builder {\r", "choices": [{"text": "this.clickSelectable = clickSelectable\r\nreturn this\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/37", "ground_truth": "            pickModel.isClickSelectable = clickSelectable\r\n            return this\r\n        }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt"}}
{"prompt": "\n fun setToolbarColor(toolbarColor: Int): Builder {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/38", "ground_truth": "            pickModel.toolbarColor = toolbarColor\r\n            return this\r\n        }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt"}}
{"prompt": "\n fun setStatusBarColor(statusBarColor: Int): Builder {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/39", "ground_truth": "            pickModel.statusBarColor = statusBarColor\r\n            return this\r\n        }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt"}}
{"prompt": "\n fun setToolbarTextColor(toolbarTextColor: Int): Builder {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/40", "ground_truth": "            pickModel.toolbarTextColor = toolbarTextColor\r\n            return this\r\n        }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt"}}
{"prompt": "\n fun setSelectIconColor(selectIconColor: Int): Builder {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/41", "ground_truth": "            pickModel.selectIconColor = selectIconColor\r\n            return this\r\n        }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt"}}
{"prompt": "\nval pickModel\n fun setLightStatusBar(lightStatusBar: Boolean): Builder {\r", "choices": [{"text": "this.lightStatusBar = lightStatusBar\r\nreturn this\r\n}\r\nval lightStatusBar\r\nfun setLightNavigationBar(lightNavigationBar: Boolean): Builder {\r\nthis.lightNavigationBar = lightNavigationBar\r\nreturn this\r\n}\r\nval lightNavigationBar\r\nfun setLightNavigationBarColor(lightNavigationBarColor: Int): Builder {\r\nthis.lightNavigationBarColor = lightNavigationBarColor\r\nreturn this\r\n}\r\nval lightNavigationBarColor\r\nfun setLightNavigationBarTransparent(lightNavigationBarTransparent: Boolean): Builder {\r\nthis.lightNavigationBarTransparent = lightNavigationBarTransparent\r\nreturn this\r\n"}], "metadata": {"task_id": "aaf-easydiary/42", "ground_truth": "            pickModel.lightStatusBar = lightStatusBar\r\n            return this\r\n        }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt"}}
{"prompt": "\n fun setShowGif(showGif: Boolean): Builder {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/43", "ground_truth": "            pickModel.isShowGif = showGif\r\n            return this\r\n        }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt"}}
{"prompt": "\nval pickModel\n private fun create(): PickPhotoViewEx {\r", "choices": [{"text": "return PickPhotoViewEx(this)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/44", "ground_truth": "            GlobalData.model = pickModel\r\n            return PickPhotoViewEx(this)\r\n        }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\com\\werb\\pickphotoview\\PickPhotoViewEx.kt"}}
{"prompt": "\n import androidx.biometric.BiometricPrompt\nimport androidx.appcompat.app.AppCompatActivity\nimport android.app.Activity\nfun startListening(activity: AppCompatActivity) {\r\n            when {\r\n                isSdkVersionSupported() && isBiometricPromptEnabled() -> startListeningBiometric(activity)\r", "choices": [{"text": "//                isSdkVersionSupported() && isFingerprintManagerEnabled() -> startListeningFingerprint(activity)\r\n                else -> startListeningFallback(activity)\r\n            }\r\n        }\r\n\n\n"}], "metadata": {"task_id": "aaf-easydiary/45", "ground_truth": "                isSdkVersionSupported() -> startListeningFingerprint(activity)\r\n            }\r\n        }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\BiometricUtils.kt"}}
{"prompt": "\n import androidx.appcompat.app.AppCompatActivity\nimport android.hardware.biometrics.BiometricManager\nimport android.app.Activity\nfun startListeningBiometric(activity: AppCompatActivity) {\r\n            if (isBiometricManagerEnabled() && canAuthenticateWithBiometrics(activity)) {\r", "choices": [{"text": "//                val intent = Intent(activity, BiometricActivity::class.java)\r\n//                activity.startActivity(intent)\r\n            }\r\n        }\n\n"}], "metadata": {"task_id": "aaf-easydiary/46", "ground_truth": "                showBiometricPrompt(activity)\r\n            }\r\n        }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\BiometricUtils.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport androidx.annotation.RequiresApi\nimport android.os.Build\nimport android.hardware.biometrics.BiometricManager\nimport android.content.Context\n @RequiresApi(Build.VERSION_CODES.Q)\r\n        @Suppress(\"DEPRECATION\")\r\n        private fun canAuthenticateWithBiometrics(context: Context): Boolean {\r\n            val biometricManager = context.getSystemService(BiometricManager::class.java)\r\n            return if (biometricManager != null) {\r", "choices": [{"text": "\n import me.blog.korn123.easydiary.R\nimport androidx.annotation.RequiresApi\nimport android.os.Build\nimport android.hardware.biometrics.BiometricManager\nimport android.content.Context\n @RequiresApi(Build.VERSION_CODES.Q)\r\n        @Suppress(\"DEPRECATION\")\r\n        private fun canAuthenticateWithBiometrics(context: Context): Boolean {\r\n            val biometricManager = context.getSystemService(BiometricManager::class.java)\r\n            return if (biometricManager!= null) {\r\n//                biometricManager.canAuthenticate() == BiometricManager.BIOMETRIC_SUCCESS\r\n                biometricManager.canAuthenticate() == BiometricManager.BIOMETRIC_SUCCESS\r\n            } else {\r\n                false\r\n            }\r\n        }\n"}], "metadata": {"task_id": "aaf-easydiary/49", "ground_truth": "                biometricManager.canAuthenticate() == BiometricManager.BIOMETRIC_SUCCESS\r\n            } else false\r\n        }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\BiometricUtils.kt"}}
{"prompt": "\n import java.util.Locale\nimport java.util.Date\nimport java.text.SimpleDateFormat\nimport me.blog.korn123.easydiary.enums.DateTimeFormat\nfun getDateTimeStringFromTimeMillis(\r\n        timeMillis: Long,\r\n        dateFormat: Int = SimpleDateFormat.FULL,\r\n        timeFormat: Int = SimpleDateFormat.SHORT,\r\n        dateTimeFormat: DateTimeFormat? = null,\r\n        locale: Locale = Locale.getDefault()\r\n    ): String {\r\n        val date = Date(timeMillis)\r\n        val simpleDateFormat = when (dateTimeFormat == null) {\r\n            true -> SimpleDateFormat.getDateTimeInstance(dateFormat, timeFormat, locale)\r\n            false -> SimpleDateFormat.getDateTimeInstance(\r\n                dateTimeFormat.getDateKey(),\r\n                dateTimeFormat.getTimeKey(),\r", "choices": [{"text": "//                SimpleDateFormat.SHORT,\r\n//                SimpleDateFormat.SHORT,\r\n                locale\r\n            )\r\n        }\r\n        return simpleDateFormat.format(date)\r\n    }<file_sep>/app/src/main/java/me/blog/korn123/easydiary/ui/main/MainActivity.kt\npackage me.blog.korn123.easydiary.ui.main\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.Menu\nimport android.view.MenuItem\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.fragment.app."}], "metadata": {"task_id": "aaf-easydiary/56", "ground_truth": "                locale\r\n            )\r\n        }\r\n        return simpleDateFormat.format(date)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\DateUtils.kt"}}
{"prompt": "\n import java.util.Date\nfun getCurrentDateTime(pattern: String): String {\r\n        val date = Date()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/57", "ground_truth": "        val dateFormat = SimpleDateFormat(pattern)\r\n        return dateFormat.format(date)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\DateUtils.kt"}}
{"prompt": "\n import java.util.Date\nfun timeMillisToDateTime(timeMillis: Long, pattern: String): String {\r\n        val date = Date(timeMillis)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/58", "ground_truth": "        val dateFormat = SimpleDateFormat(pattern)\r\n        return dateFormat.format(date)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\DateUtils.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nfun convDateToTimeMillis(field: Int, amount: Int, isZeroHour: Boolean = true, isZeroMinute: Boolean = true, isZeroSecond: Boolean = true, isZeroMilliSecond: Boolean = true): Long {\r\n        val calendar = Calendar.getInstance(Locale.getDefault())\r\n        if (isZeroHour) calendar.set(Calendar.HOUR_OF_DAY, 0)\r\n        if (isZeroMinute) calendar.set(Calendar.MINUTE, 0)\r\n        if (isZeroSecond) calendar.set(Calendar.SECOND, 0)\r\n        if (isZeroMilliSecond) calendar.set(Calendar.MILLISECOND, 0)\r", "choices": [{"text": "//        calendar.set(Calendar.YEAR, 2019)\r\n//        calendar.set(Calendar.MONTH, 1)\r\n//        calendar.set(Calendar.DAY_OF_MONTH, 1)\r\n        calendar.add(field, amount)\r\n        return calendar.timeInMillis\r\n    }\r\n\r\nfun convDateToTimeMillis(year: Int, month: Int, day: Int, hour: Int, minute: Int, second: Int, milliSecond: Int): Long {\r\n        val calendar = Calendar.getInstance(Locale.getDefault())\r\n        calendar.set(Calendar."}], "metadata": {"task_id": "aaf-easydiary/63", "ground_truth": "        if (amount != 0) {\r\n            calendar.add(field, amount)\r\n        }\r\n        return calendar.timeInMillis\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt"}}
{"prompt": "\n private fun makeDirectory(path: String) {\r", "choices": [{"text": "-    val dir = File(path)\r\n-    if (!dir.exists()) {\r\n-        dir.mkdirs()\r\n-    }\r\n+    val dir = File(path).apply {\r\n+        if (!exists()) {\r\n+            mkdirs()\r\n+        }\r\n+    }\r\n }\r\n \r\n private fun makeFile(path: String, content: String) {\r\n-    val file = File(path)\r\n-    if (!file.exists()) {\r\n-        file.createNewFile()\r\n-    }"}], "metadata": {"task_id": "aaf-easydiary/69", "ground_truth": "        val workingDirectory = File(path)\r\n        if (!workingDirectory.exists()) workingDirectory.mkdirs()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.extensions.checkPermission\nimport me.blog.korn123.easydiary.R\nimport android.content.Context\nfun initLegacyWorkingDirectory(context: Context) {\r\n        if (context.checkPermission(EXTERNAL_STORAGE_PERMISSIONS)) {\r", "choices": [{"text": "//            val externalStorageDir = context.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS)\r\n//            if (externalStorageDir!= null) {\r\n//                val legacyWorkingDir = File(externalStorageDir, \"EasyDiary\")\r\n//                if (!legacyWorkingDir.exists()) {\r\n//                    legacyWorkingDir.mkdirs()\r\n//                }\r\n//                if (legacyWorkingDir.exists()) {\r\n//                    val legacyWorkingDirFile = File(legacyWorkingDir, \"diary.db\")\r\n//                    if (!legacyWorkingDir"}], "metadata": {"task_id": "aaf-easydiary/70", "ground_truth": "            makeDirectory(getExternalStorageDirectory().absolutePath + BACKUP_EXCEL_DIRECTORY)\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt"}}
{"prompt": "\n import android.content.Context\nfun getApplicationDataDirectory(context: Context): String {\r", "choices": [{"text": "return context.filesDir.absolutePath\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/71", "ground_truth": "//        return Environment.getExternalStorageDirectory().absolutePath\r\n        return context.applicationInfo.dataDir\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt"}}
{"prompt": "\n import java.io.File\nimport me.blog.korn123.easydiary.R\nimport androidx.activity.result.ActivityResultLauncher\nimport android.content.Intent\nfun readFileWithSAF(mimeType: String, activityResultLauncher: ActivityResultLauncher<Intent>) {\r\n        val intent = Intent(Intent.ACTION_GET_CONTENT).apply {\r\n            type = mimeType\r", "choices": [{"text": "//            addCategory(Intent.CATEGORY_OPENABLE)\r\n        }\r\n        activityResultLauncher.launch(intent)\r\n    }\n\n"}], "metadata": {"task_id": "aaf-easydiary/72", "ground_truth": "        }\r\n        activityResultLauncher.launch(intent)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.extensions.config\nimport android.view.View\nimport android.content.Context\nfun boldString(context: Context, textView: TextView?) {\r\n        if (context.config.boldStyleEnable) {\r", "choices": [{"text": "//            textView?.paintFlags = textView?.paintFlags or Paint.STRIKE_THRU_TEXT_FLAG\r\n            textView?.paintFlags = textView?.paintFlags or Paint.STRIKE_THRU_TEXT_FLAG\r\n        } else {\r\n            textView?.paintFlags = textView?.paintFlags and Paint.STRIKE_THRU_TEXT_FLAG.inv()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/74", "ground_truth": "            boldStringForce(textView)\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.models.Diary\nfun sequenceToPageIndex(diaryList: List<Diary>, sequence: Int): Int {\r\n        var pageIndex = 0\r\n        if (sequence > -1) {\r\n            for (i in diaryList.indices) {\r\n                if (diaryList[i].sequence == sequence) {\r\n                    pageIndex = i\r\n                    break\r", "choices": [{"text": "\n                }\r\n            }\r\n        }\r\n        return pageIndex\r\n    }\n<file_sep>/app/src/main/java/me/blog/korn123/easydiary/ui/diary/DiaryViewModel.kt\npackage me.blog.korn123.easydiary.ui.diary\n\nimport android.app.Application\nimport android.content.Context\nimport android.content.Intent\nimport android.net.Uri\nimport android.os.Build\nimport android.os.Environment\nimport android.provider.MediaStore\nimport android.util.Log\nimport androidx"}], "metadata": {"task_id": "aaf-easydiary/78", "ground_truth": "                }\r\n            }\r\n        }\r\n        return pageIndex\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt"}}
{"prompt": "\n fun hashMapToJsonString(map: HashMap<String, Any>): String {\r", "choices": [{"text": "-    return map.entries.joinToString(prefix = \"{\", postfix = \"}\", separator = \", \", transform = { (key, value) ->\r\n-        \"\\\"$key\\\": ${value.toJsonString()}\"\r\n-    })\r\n+    return map.entries.joinToString(prefix = \"{\", postfix = \"}\", separator = \", \", transform = { (key, value) -> \"\\\"$key\\\": ${value.toJsonString()}\" })\r\n }\r\n \r\n fun Any.toJsonString(): String {\r\n-    return when (this) {\r\n-        is String -> \"\\\"$"}], "metadata": {"task_id": "aaf-easydiary/82", "ground_truth": "        val gson = GsonBuilder().setPrettyPrinting().create()\r\n        return gson.toJson(map)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport android.text.Spanned\nimport android.text.Html\nimport android.os.Build\nfun fromHtml(target: String): Spanned {\r\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {\r\n            return Html.fromHtml(target)\r", "choices": [{"text": "       } else {\r\n            return Html.fromHtml(target, Html.FROM_HTML_MODE_LEGACY)\r        }\r\n    }<file_sep>/app/src/main/java/me/blog/korn123/easydiary/ui/main/MainViewModel.kt\npackage me.blog.korn123.easydiary.ui.main\n\nimport android.app.Application\nimport android.content.Context\nimport android.content.SharedPreferences\nimport android.util.Log\nimport androidx.lifecycle.AndroidViewModel\nimport androidx.lifecycle.LiveData\nimport androidx."}], "metadata": {"task_id": "aaf-easydiary/83", "ground_truth": "        }\r\n        return Html.fromHtml(target, Html.FROM_HTML_MODE_LEGACY);\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\EasyDiaryUtils.kt"}}
{"prompt": "\n import org.apache.commons.lang3.StringUtils\nimport android.graphics.Typeface\nprivate fun isValidTypeface(fontArray: Array<String>?, fontName: String?): Boolean {\r\n        var result = false\r\n        if (fontArray != null) {\r\n            for (name in fontArray) {\r\n                if (StringUtils.equalsIgnoreCase(name, fontName)) {\r\n                    result = true\r\n                    break\r", "choices": [{"text": "\n import org.apache.commons.lang3.StringUtils\nimport android.graphics.Typeface\nprivate fun isValidTypeface(fontArray: Array<String>?, fontName: String?): Boolean {\r\n        var result = false\r\n        if (fontArray!= null) {\r\n            for (name in fontArray) {\r\n                if (StringUtils.equalsIgnoreCase(name, fontName)) {\r\n                    result = true\r\n                    break\r\r\n                }\r\n            }\r\n        }\r\n        return result\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/84", "ground_truth": "                }\r\n            }\r\n        }\r\n        return result\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\FontUtils.kt"}}
{"prompt": "\n import android.graphics.Typeface\nimport android.content.Context\nfun getCommonTypeface(context: Context): Typeface? {\r\n        if (sTypeface == null) {\r\n            setCommonTypeface(context)\r", "choices": [{"text": "\n        }\r\n        return sTypeface\r\r\n    }\r\r\nfun setCommonTypeface(context: Context) {\r\n        sTypeface = Typeface.createFromAsset(context.assets, \"fonts/Roboto-Regular.ttf\")\r\r\n    }\r\r\nfun setCommonTypeface(context: Context, typeface: Typeface) {\r\n        sTypeface = typeface\r\r\n    }\r\r\nfun setCommonTypeface(context: Context, typeface: String) {\r\n        sTypeface = Typeface.createFromAsset(context.assets, typeface)\r\r\n    }\r\r\nfun setCommonTypeface(context: Context, typeface"}], "metadata": {"task_id": "aaf-easydiary/87", "ground_truth": "        }\r\n        return sTypeface\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\FontUtils.kt"}}
{"prompt": "\n import android.graphics.Typeface\nimport android.content.Context\nfun setCommonTypeface(context: Context) {\r", "choices": [{"text": "//    val typeface = Typeface.createFromAsset(context.assets, \"fonts/Roboto-Regular.ttf\")\r\n//    val typefaceBold = Typeface.createFromAsset(context.assets, \"fonts/Roboto-Bold.ttf\")\r\n//    val typefaceLight = Typeface.createFromAsset(context.assets, \"fonts/Roboto-Light.ttf\")\r\n//    val typefaceMedium = Typeface.createFromAsset(context.assets, \"fonts/Roboto-Medium.ttf\")\r\n//    val typefaceThin = Typeface.createFromAsset(context."}], "metadata": {"task_id": "aaf-easydiary/88", "ground_truth": "        val commonFontName = context.config.settingFontName\r\n        sTypeface = getTypeface(context, commonFontName)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\FontUtils.kt"}}
{"prompt": "\n import org.apache.commons.lang3.StringUtils\nimport android.view.ViewGroup\nimport android.graphics.Typeface\nimport android.content.Context\nfun setFontsTypeface(context: Context, customFontName: String?, rootView: ViewGroup?, customLineSpacing: Boolean = true) {\r\n        val typeface = if (StringUtils.isNotEmpty(customFontName)) getTypeface(context, customFontName) else getCommonTypeface(context)\r\n        rootView?.let {\r", "choices": [{"text": "           for (i in 0 until it.childCount) {\r                val child = it.getChildAt(i)\r                if (child is ViewGroup) {\r                    setFontsTypeface(context, customFontName, child, customLineSpacing)\r                } else if (child is TextView) {\r                    child.typeface = typeface\r                    if (customLineSpacing) {\r                        child.lineSpacingExtra = 10f\r                        child.lineSpacingMultiplier = 1.2f\r                    }\r                }\r            }\r        }\r    }\r\rfun getTypeface"}], "metadata": {"task_id": "aaf-easydiary/89", "ground_truth": "            setTypeface(context, it, typeface, customLineSpacing)\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\FontUtils.kt"}}
{"prompt": "\n import java.io.File\nimport org.apache.commons.lang3.StringUtils\nimport me.blog.korn123.easydiary.R\nimport android.content.Context\nfun fontFileNameToDisplayName(context: Context, fontFileName: String): String {\r\n        var displayName: String? = null\r\n        val fontNames = context.resources.getStringArray(R.array.pref_list_fonts_values)\r\n        val displayNames = context.resources.getStringArray(R.array.pref_list_fonts_title)\r\n        for (i in fontNames.indices) {\r\n            if (StringUtils.equals(fontFileName, fontNames[i])) {\r\n                displayName = displayNames[i]\r", "choices": [{"text": "//                Log.d(\"fontFileNameToDisplayName\", \"fontFileName: \" + fontFileName + \", displayName: \" + displayName)\r\n                break\r\n            }\r\n        }\r\n        return displayName?: fontFileName\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/90", "ground_truth": "                break\r\n            }\r\n        }\r\n        return displayName ?: FilenameUtils.getBaseName(fontFileName)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\FontUtils.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport android.app.Activity\nfun checkFontSetting(activity: Activity) {\r\n        activity.run {\r\n            // determine device language\r\n            if (!Locale.getDefault().language.matches(CUSTOM_FONTS_SUPPORT_LANGUAGE.toRegex())) {\r\n//                initNanumPenFontSetting(this)\r\n                initDefaultFontSetting(this)\r", "choices": [{"text": "//                initNanumPenFontSetting(this)\r\n            } else {\r\n                initNanumPenFontSetting(this)\r\n            }\r\n        }\r\n    }\r\n<file_sep>/app/src/main/java/me/blog/korn123/easydiary/ui/main/MainActivity.kt\npackage me.blog.korn123.easydiary.ui.main\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.Menu\nimport android.view.MenuItem\nimport android.view.View\nimport androidx.appcompat.app.AppCompatActivity"}], "metadata": {"task_id": "aaf-easydiary/91", "ground_truth": "            } else {\r\n                initDefaultFontSetting(this)\r\n            }\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\commons\\utils\\FontUtils.kt"}}
{"prompt": " import me.blog.korn123.easydiary.models.ActionLog\nvar mNotificationCount\nval mGPSLocationListener\nval mLocationManager\nprivate fun setupActionLog() {\r\n        mBinding.clearLog.setOnClickListener {\r", "choices": [{"text": "//            val actionLog = ActionLog()\r\n//            actionLog.action = \"clear\"\r\n//            actionLog.save()\r\n            mBinding.actionLog.text = \"\"\r\n        }\r\n        mBinding.actionLog.setOnClickListener {\r\n            val actionLog = ActionLog()\r\n            actionLog.action = \"show\"\r\n            actionLog.save()\r\n            mBinding.actionLog.text = \"\"\r\n        }\r\n        mBinding.actionLog.setOnLongClickListener {\r\n            val actionLog = ActionLog()\r\n            actionLog.action = \"hide\"\r\n            actionLog.save()\r\n            mBinding.actionLog."}], "metadata": {"task_id": "aaf-easydiary/97", "ground_truth": "            EasyDiaryDbHelper.deleteActionLogAll()\r\n            updateActionLog()\r\n        }\r\n        updateActionLog()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseDevActivity.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.activity_base_diary_editing, menu)\r\n        menu.findItem(R.id.timePicker).isVisible = mEnableTimePicker\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "aaf-easydiary/99", "ground_truth": "        menu.findItem(R.id.secondsPicker).isVisible = mEnableSecondsPicker\r\n        return true\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseDiaryEditingActivity.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport androidx.appcompat.app.AlertDialog\nimport android.app.Activity\noverride fun onBackPressed() {\r\n        showAlertDialog(\r\n            getString(R.string.back_pressed_confirm), { _, _ ->\r\n                if (isAccessFromOutside()) {\r\n                    startMainActivityWithClearTask()\r\n                } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/100", "ground_truth": "                    super.onBackPressed()\r\n                }\r\n            }, {_, _ -> }, DialogMode.INFO\r\n        )\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseDiaryEditingActivity.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\nfinish()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/101", "ground_truth": "        super.onResume()\r\n        toggleTimePickerTool()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseDiaryEditingActivity.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport android.speech.RecognizerIntent\nimport android.content.Intent\nprotected fun setupRecognizer() {\r\n        mRecognizerIntent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH).apply {\r\n            putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM)\r", "choices": [{"text": "//            putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault())\r\n            putExtra(RecognizerIntent.EXTRA_LANGUAGE, \"en-US\")\r\n            putExtra(RecognizerIntent.EXTRA_PROMPT, \"Speak now\")\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "aaf-easydiary/105", "ground_truth": "            putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault())\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseDiaryEditingActivity.kt"}}
{"prompt": "\n import androidx.appcompat.app.AlertDialog\nprotected fun duplicatedEasterEggWarning() {\r\n        showAlertDialog(\r\n            \"A diary set to the easter egg symbol already exists.\",\r", "choices": [{"text": "\"Do you want to overwrite it?\"\r\n        ) {\r\n            if (it) {\r\n                val diary = Diary(\r\n                    \"Easter Egg\",\r\n                    \"Easter Egg\",\r\n                    \"Easter Egg\",\r\n                    \"Easter Egg\",\r\n                    \"Easter Egg\",\r\n                    \"Easter Egg\",\r\n                    \"Easter Egg\",\r\n                    \"Easter Egg\",\r\n                    \"Easter Egg\",\r\n                    \"Easter Egg\",\r\n                    \"Easter Egg\",\r\n                    \"Easter Egg\",\r\n                    \"Easter Egg\",\r\n                    \"Easter Egg\",\r\n                    \"Easter"}], "metadata": {"task_id": "aaf-easydiary/110", "ground_truth": "            null,\r\n            null,\r\n            DialogMode.INFO,\r\n        )\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseDiaryEditingActivity.kt"}}
{"prompt": " import android.view.Menu\nvar mBinding ActivityBaseSettingsBinding\nvar mDotIndicatorPager2Adapter DotIndicatorPager2Adapter\nvar mCurrentPosition\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r", "choices": [{"text": "menuInflater.inflate(R.menu.menu_main, menu)\r\nreturn true\r\n}\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nmBinding = DataBindingUtil.setContentView(this, R.layout.activity_base_settings)\r\nmBinding.lifecycleOwner = this\r\nmBinding.viewModel = mViewModel\r\nmBinding.viewModel?.let {\r\nmViewModel = it\r\n}\r\nmViewModel.mDotIndicatorPager2Adapter = mDotIndicatorPager2Adapter\r\nmViewModel.mCurrentPosition ="}], "metadata": {"task_id": "aaf-easydiary/111", "ground_truth": "        menuInflater.inflate(R.menu.fragment_settings_schedule, menu)\r\n        return true\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseSettingsActivity.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport androidx.browser.customtabs.CustomTabsIntent\nimport android.view.MenuItem\nimport android.view.Menu\nimport android.net.Uri\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.openManual -> {\r\n                val customTabsIntent =\r\n                    CustomTabsIntent.Builder().setUrlBarHidingEnabled(false).build()\r\n                customTabsIntent.launchUrl(\r\n                    this@BaseSettingsActivity,\r\n                    Uri.parse(manualUrl())\r", "choices": [{"text": "//                    Uri.parse(\"https://github.com/korn123/EasyDiary/blob/master/README.md\")\r\n                )\r\n                return true\r\n            }\r\n            else -> return super.onOptionsItemSelected(item)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/112", "ground_truth": "                )\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseSettingsActivity.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        if (useDynamicTheme) {\r\n            setTheme(getThemeId())\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/113", "ground_truth": "//            setTheme(R.style.AppTheme_AAF)\r\n        }\r\n\r\n        super.onCreate(savedInstanceState)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\BaseSimpleActivity.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\noverride fun onResume() {\r\n        super.onResume()\r", "choices": [{"text": "}\r\noverride fun onPause() {\r\n        super.onPause()\r\n}\r\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n}\r\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\n        super.onRestoreInstanceState(savedInstanceState)\r\n}\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n}\r"}], "metadata": {"task_id": "aaf-easydiary/120", "ground_truth": "        refreshList()\r\n        mCalendarFragment.refreshView()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CalendarActivity.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        // TODO Auto-generated method stub\r", "choices": [{"text": "super.onSaveInstanceState(outState)\r\noutState.putInt(\"position\", mViewPager.currentItem)\r\n}\n"}], "metadata": {"task_id": "aaf-easydiary/121", "ground_truth": "        super.onSaveInstanceState(outState)\r\n        mCalendarFragment.saveStatesToKey(outState, \"CALDROID_SAVED_STATE\")\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CalendarActivity.kt"}}
{"prompt": " import android.view.Menu\nvar mArrayAdapterDiary ArrayAdapter<Diary>?\nvar mCalendarFragment CaldroidFragmentEx\nval mCalendar\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r", "choices": [{"text": "menuInflater.inflate(R.menu.menu_main, menu)\r\nreturn true\r\n}\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\nwhen (item.itemId) {\r\nR.id.action_settings -> return true\r\nelse -> return super.onOptionsItemSelected(item)\r\n}\r\n}\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nmCalendar = Calendar.getInstance()\r\nmCalendarFragment = CaldroidFragmentEx()"}], "metadata": {"task_id": "aaf-easydiary/122", "ground_truth": "        menuInflater.inflate(R.menu.activity_calendar, menu)\r\n        return true\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CalendarActivity.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.fragments.CalendarFragment\nimport me.blog.korn123.easydiary.R\nimport android.view.View\nprivate fun selectDateAndRefreshView() {\r\n        mCalendarFragment.clearSelectedDates()\r\n        mCalendarFragment.setSelectedDate(mCalendar.time)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "aaf-easydiary/124", "ground_truth": "        mCalendarFragment.refreshViewOnlyCurrentPage()\r\n        refreshList()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CalendarActivity.kt"}}
{"prompt": "\nvar hasUnsavedChanges\nvar curPrimaryColor\nvar curScreenBackgroundColor\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nhasUnsavedChanges = false\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nif (hasUnsavedChanges) {\r\nval builder = AlertDialog.Builder(this)\r\nbuilder.setTitle(\"Unsaved Changes\")\r\nbuilder.setMessage(\"Do you want to save your changes?\")\r\nbuilder.setPositiveButton(\"Yes\") { _, _ ->\r\nsave()\r\n}\r\nbuilder.setNegativeButton(\"No\") { _, _ ->\r\nhasUnsavedChanges = false\r\n}\r\nbuilder.show"}], "metadata": {"task_id": "aaf-easydiary/125", "ground_truth": "        super.onPause()\r\n        pauseLock()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.activity_customization, menu)\r", "choices": [{"text": "return true\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/127", "ground_truth": "        menu.findItem(R.id.save).isVisible = hasUnsavedChanges\r\n        return true\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt"}}
{"prompt": "\n override fun onBackPressed() {\r\n        if (!hasUnsavedChanges) super.onBackPressed()\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "aaf-easydiary/129", "ground_truth": "\r\n        overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun saveChanges() {\r\n        config.apply {\r\n            textColor = curTextColor\r\n            backgroundColor = curBackgroundColor\r\n            screenBackgroundColor = curScreenBackgroundColor\r\n            primaryColor = curPrimaryColor\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/131", "ground_truth": "            isThemeChanged = true\r\n        }\r\n        finish()\r\n        launcher?.let { toggleLauncher(it) }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun initColorVariables() {\r\n        curTextColor = config.textColor\r\n        curBackgroundColor = config.backgroundColor\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "aaf-easydiary/132", "ground_truth": "        curScreenBackgroundColor = config.screenBackgroundColor\r\n        curPrimaryColor = config.primaryColor\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt"}}
{"prompt": "\nvar curTextColor\nvar curBackgroundColor\nvar curPrimaryColor\n private fun colorChanged() {\r\n        hasUnsavedChanges = true\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "aaf-easydiary/134", "ground_truth": "        setupColorsPickers()\r\n        invalidateOptionsMenu()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun setCurrentBackgroundColor(color: Int) {\r", "choices": [{"text": "//    val color = Color.parseColor(\"#000000\")\r\n    val window = this.window\r\n    window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)\r\n    window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)\r\n    window.statusBarColor = color\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/136", "ground_truth": "        curBackgroundColor = color\r\n        updateAppViews(mActivityCustomizationBinding.mainHolder, curBackgroundColor)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun setCurrentScreenBackgroundColor(color: Int) {\r", "choices": [{"text": "//    val window = activity.window\r\n//    window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS)\r\n//    window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)\r\n//    window.statusBarColor = color\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/137", "ground_truth": "        curScreenBackgroundColor = color\r\n        updateBackgroundColor(color)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.commons.dialogs.ColorPickerDialog\nimport android.graphics.Color\nprivate fun pickTextColor() {\r\n        ColorPickerDialog(this, curTextColor) {\r\n            if (hasColorChanged(curTextColor, it)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/139", "ground_truth": "                setCurrentTextColor(it)\r\n                colorChanged()\r\n            }\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.commons.dialogs.ColorPickerDialog\nimport android.graphics.Color\nprivate fun pickBackgroundColor() {\r\n        ColorPickerDialog(this, curBackgroundColor) {\r\n            if (hasColorChanged(curBackgroundColor, it)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/140", "ground_truth": "                setCurrentBackgroundColor(it)\r\n                colorChanged()\r\n            }\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.commons.dialogs.ColorPickerDialog\nimport android.graphics.Color\nprivate fun pickScreenBackgroundColor() {\r\n        ColorPickerDialog(this, curScreenBackgroundColor) {\r\n            if (hasColorChanged(curScreenBackgroundColor, it)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/141", "ground_truth": "                setCurrentScreenBackgroundColor(it)\r\n                colorChanged()\r\n            }\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\CustomizationActivity.kt"}}
{"prompt": "\n fun showProgressContainer() {\r", "choices": [{"text": "//    progressContainer.visibility = View.VISIBLE\r\n//    progressContainer.alpha = 0f\r\n//    progressContainer.animate()\r\n//       .alpha(1f)\r\n//       .setDuration(200)\r\n//       .setListener(object : AnimatorListenerAdapter() {\r\n//            override fun onAnimationEnd(animation: Animator) {\r\n//                super.onAnimationEnd(animation)\r\n//                progressContainer.visibility = View.VISIBLE\r\n//            }\r\n//        })\r\n}\r\n\r\nfun hideProgress"}], "metadata": {"task_id": "aaf-easydiary/142", "ground_truth": "        mBinding.layoutProgressContainer.visibility = View.VISIBLE\r\n        mBinding.progress.visibility = View.VISIBLE\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DashboardActivity.kt"}}
{"prompt": "\n import android.view.View\nimport android.os.Looper\nimport android.os.Handler\nfun hideProgressContainer() {\r\n        Handler(Looper.getMainLooper()).postDelayed({\r\n            mBinding.layoutProgressContainer.visibility = View.GONE\r", "choices": [{"text": "\n        }, 1000)\r\n    }<file_sep>/app/src/main/java/com/example/myapplication/ui/main/MainViewModel.kt\npackage com.example.myapplication.ui.main\n\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport com.example.myapplication.data.model.User\nimport com.example.myapplication.data.repository.UserRepository\nimport com.example.myapplication.utils.Resource\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport"}], "metadata": {"task_id": "aaf-easydiary/143", "ground_truth": "            mBinding.progress.visibility = View.GONE\r\n        }, 300)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DashboardActivity.kt"}}
{"prompt": "\n import android.view.View\noverride fun setVisiblePhotoProgress(isVisible: Boolean) {\r\n        when (isVisible) {\r\n            true -> mBinding.photoProgress.visibility = View.VISIBLE\r", "choices": [{"text": "else -> mBinding.photoProgress.visibility = View.GONE\r\n        }\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/144", "ground_truth": "            false -> mBinding.photoProgress.visibility = View.GONE\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryEditingActivity.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r", "choices": [{"text": "super.onSaveInstanceState(outState)\r\noutState.putInt(\"key\", 1)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\nsuper.onRestoreInstanceState(savedInstanceState)\r\nval value = savedInstanceState.getInt(\"key\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/147", "ground_truth": "        outState.putSerializable(DIARY_MODE, mDiaryMode)\r\n        super.onSaveInstanceState(outState)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryMainActivity.kt"}}
{"prompt": "\n import org.apache.commons.lang3.StringUtils\nprivate fun refreshList() {\r\n        var queryString = \"\"\r\n        if (StringUtils.isNotEmpty(mBinding.query.text)) queryString =\r", "choices": [{"text": "\"SELECT * FROM ${DatabaseHelper.TABLE_NAME} WHERE ${DatabaseHelper.COLUMN_NAME} LIKE '%${mBinding.query.text}%'\"\r\n        val cursor = mDatabase.rawQuery(queryString, null)\r\n        val list = ArrayList<String>()\r\n        if (cursor.moveToFirst()) {\r\n            do {\r\n                list.add(cursor.getString(cursor.getColumnIndex(DatabaseHelper.COLUMN_NAME)))\r\n            } while (cursor.moveToNext())\r\n        }\r\n        cursor.close()\r\n        mBinding.list.adapter = ArrayAdapter(this, android.R.layout.simple_list_item_"}], "metadata": {"task_id": "aaf-easydiary/153", "ground_truth": "            mBinding.query.text.toString()\r\n        refreshList(queryString)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryMainActivity.kt"}}
{"prompt": " import me.blog.korn123.easydiary.extensions.config\nvar mDiaryMode\nvar mDiaryList ArrayList<Diary>\nvar mShowcaseIndex\nprivate fun initDummyData() {\r\n        if (!config.isInitDummyData) {\r\n            initSampleData()\r", "choices": [{"text": "//            initSampleData2()\r\n            config.isInitDummyData = true\r\n        }\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/154", "ground_truth": "            config.isInitDummyData = true\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryMainActivity.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport android.hardware.SensorManager\nprivate fun setupMotionSensor() {\r\n        val sensorManager = getSystemService(SENSOR_SERVICE) as SensorManager\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "aaf-easydiary/155", "ground_truth": "        val sd = ShakeDetector(this)\r\n        sd.start(sensorManager, SensorManager.SENSOR_DELAY_GAME)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryMainActivity.kt"}}
{"prompt": "\nvar mBinding ActivityDiaryReadingBinding\nvar mShowcaseView ShowcaseView?\nvar mDialogSearch AlertDialog?\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nmShowcaseView?.hide()\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nmShowcaseView?.show()\r\n}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nmBinding = DataBindingUtil.setContentView(this, R.layout.activity_diary_reading)\r\nmBinding.setLifecycleOwner(this)\r\nmBinding.viewModel = mViewModel\r\nmBinding.viewModel?.setActivity(this)\r\nmBinding.viewModel?."}], "metadata": {"task_id": "aaf-easydiary/157", "ground_truth": "        super.onPause()\r\n        destroyModule()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryReadingActivity.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.models.Diary\nimport me.blog.korn123.easydiary.R\nimport android.speech.tts.TextToSpeech\nprivate fun initModule() {\r\n        mTextToSpeech = TextToSpeech(this@DiaryReadingActivity) { status ->\r\n            if (status == TextToSpeech.SUCCESS) {\r\n                mTextToSpeech?.run {\r\n                    language = Locale.getDefault()\r\n                    setPitch(1.3f)\r", "choices": [{"text": "//                    setSpeechRate(0.8f)\r\n                }\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/161", "ground_truth": "                    setSpeechRate(1f)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryReadingActivity.kt"}}
{"prompt": "\n import android.speech.tts.TextToSpeech\nprivate fun destroyModule() {\r\n        mTextToSpeech?.run {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/162", "ground_truth": "            stop()\r\n            shutdown()\r\n            mTextToSpeech = null\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryReadingActivity.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport android.os.Build\nprivate fun textToSpeech(text: String) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r", "choices": [{"text": "//            val tts = TextToSpeech(this, TextToSpeech.OnInitListener { status ->\r\n//                if (status == TextToSpeech.SUCCESS) {\r\n//                    val result = tts.setLanguage(Locale.US)\r\n//                    if (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) {\r\n//                        Log.e(\"TTS\", \"This Language is not supported\")\r\n//                    } else {\r\n//                        tts.speak(text, TextToSpeech.QUEUE_FLUSH"}], "metadata": {"task_id": "aaf-easydiary/163", "ground_truth": "            ttsGreater21(text)\r\n        } else {\r\n            ttsUnder20(text)\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryReadingActivity.kt"}}
{"prompt": "\n private fun initBottomContainer() {\r\n            context?.let {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/169", "ground_truth": "                mPrimaryColor = it.config.primaryColor\r\n            }\r\n        }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryReadingActivity.kt"}}
{"prompt": "\n private fun setFontsTypeface() {\r\n            activity?.let { it ->\r", "choices": [{"text": "//                val typeface = Typeface.createFromAsset(it.assets, \"fonts/Roboto-Regular.ttf\")\r\n//                val typefaceBold = Typeface.createFromAsset(it.assets, \"fonts/Roboto-Bold.ttf\")\r\n//                val typefaceLight = Typeface.createFromAsset(it.assets, \"fonts/Roboto-Light.ttf\")\r\n//                val typefaceMedium = Typeface.createFromAsset(it.assets, \"fonts/Roboto-Medium.ttf\")\r\n//                val typefaceThin = Typeface.createFromAsset(it."}], "metadata": {"task_id": "aaf-easydiary/170", "ground_truth": "                FontUtils.setFontsTypeface(it, \"\", mRootView)\r\n            }\r\n        }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryReadingActivity.kt"}}
{"prompt": "\n import android.view.View\noverride fun setVisiblePhotoProgress(isVisible: Boolean) {\r\n        when (isVisible) {\r\n            true -> mBinding.photoProgress.visibility = View.VISIBLE\r", "choices": [{"text": "else -> mBinding.photoProgress.visibility = View.GONE\r\n        }\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/175", "ground_truth": "            false -> mBinding.photoProgress.visibility = View.GONE\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\DiaryWritingActivity.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval intent = Intent(this, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\nval button = findViewById<Button>(R.id.button)"}], "metadata": {"task_id": "aaf-easydiary/178", "ground_truth": "        useDynamicTheme = !isNightMode()\r\n        super.onCreate(savedInstanceState)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\EasyDiaryActivity.kt"}}
{"prompt": "\n override fun onBackPressed() {\r\n        super.onBackPressed()\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "aaf-easydiary/179", "ground_truth": "        pauseLock()\r\n        overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\EasyDiaryActivity.kt"}}
{"prompt": "\nvar mCustomLineSpacing\nval mRootView ViewGroup?\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nmCustomLineSpacing = mRootView?.lineSpacingExtra?: 0\r\nmRootView?.lineSpacingExtra = 0\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nmRootView?.lineSpacingExtra = mCustomLineSpacing\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/180", "ground_truth": "        super.onPause()\r\n        pauseLock()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\EasyDiaryActivity.kt"}}
{"prompt": "\nvar mFingerprintManager FingerprintManagerCompat\nvar mCancellationSignal CancellationSignal?\nvar mBinding ActivityFingerprintLockBinding\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nmCancellationSignal?.cancel()\r\nmCancellationSignal = null\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nmCancellationSignal = CancellationSignal()\r\nmFingerprintManager.authenticate(mCryptoObject, 0, mCancellationSignal, mAuthenticationCallback, null)\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nmCancellationSignal?.cancel()\r\nmCancellationSignal = null\r\n}\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data"}], "metadata": {"task_id": "aaf-easydiary/181", "ground_truth": "        super.onPause()\r\n        mCancellationSignal?.cancel()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\FingerprintLockActivity.kt"}}
{"prompt": "\nvar mFingerprintManager FingerprintManagerCompat\nvar mBinding ActivityFingerprintLockBinding\nvar mCancellationSignal CancellationSignal?\n override fun onBackPressed() {\r", "choices": [{"text": "//        super.onBackPressed()\r\n        mBinding.btnCancel.performClick()\r\n    }\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        mBinding = DataBindingUtil.setContentView(this, R.layout.activity_fingerprint_lock)\r\n        mBinding.btnCancel.setOnClickListener {\r\n            mCancellationSignal?.cancel()\r\n            finish()\r\n        }\r\n        mBinding.btnCancel.setOnLongClickListener {\r\n            mCancellationSignal?.cancel()\r\n            finish()\r\n            true\r\n        }\r\n        mBinding.btnCancel.setOnTouchListener { v, event ->\r\n            if (event."}], "metadata": {"task_id": "aaf-easydiary/182", "ground_truth": "        super.onBackPressed()\r\n        ActivityCompat.finishAffinity(this)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\FingerprintLockActivity.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\nfinish()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/184", "ground_truth": "        super.onResume()\r\n        supportActionBar?.setBackgroundDrawable(null)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\GalleryActivity.kt"}}
{"prompt": " import android.view.Menu\nvar mGalleryAdapter GalleryAdapter\nvar mAttachedPhotos ArrayList<GalleryAdapter.AttachedPhoto>\nvar mGridLayoutManager GridLayoutManager\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r", "choices": [{"text": "menuInflater.inflate(R.menu.menu_main, menu)\r\nreturn true\r\n}\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\nwhen (item.itemId) {\r\nR.id.action_settings -> return true\r\nelse -> return super.onOptionsItemSelected(item)\r\n}\r\n}\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nmAttachedPhotos = ArrayList()\r\nmGalleryAdapter = GalleryAdapter(this, mAttached"}], "metadata": {"task_id": "aaf-easydiary/185", "ground_truth": "        menuInflater.inflate(R.menu.activity_postcard_viewer, menu)\r\n        return true\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\GalleryActivity.kt"}}
{"prompt": " import android.view.Menu\nvar mBinding ActivityPhotoViewPagerBinding\nvar mAttachedPhotoCount Int\nvar mAttachedPhotos ArrayList<GalleryAdapter.AttachedPhoto>\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r", "choices": [{"text": "menuInflater.inflate(R.menu.menu_photo_view_pager, menu)\r\nreturn true\r\n}\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\nwhen (item.itemId) {\r\nR.id.action_delete -> {\r\nval builder = AlertDialog.Builder(this)\r\nbuilder.setTitle(R.string.delete_photo_title)\r\nbuilder.setMessage(R.string.delete_photo_message)\r\nbuilder.setPositiveButton(R.string.delete) { dialog, which ->\r\nval photo = m"}], "metadata": {"task_id": "aaf-easydiary/187", "ground_truth": "        menuInflater.inflate(R.menu.activity_gallery_view_pager, menu)\r\n        return true\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\GalleryViewPagerActivity.kt"}}
{"prompt": " import android.view.Menu\nval OPEN_URL_DESCRIPTION\nval OPEN_URL_INFO\nval FORCE_APPEND_CODE_BLOCK\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r", "choices": [{"text": "menu.add(0, 1, 0, OPEN_URL_DESCRIPTION)\r\nmenu.add(0, 2, 0, OPEN_URL_INFO)\r\nmenu.add(0, 3, 0, FORCE_APPEND_CODE_BLOCK)\r\nreturn true\r\n}\r\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\nwhen (item.itemId) {\r\n1 -> {\r\nval intent = Intent(Intent.ACTION_VIEW, Uri.parse(OPEN_URL_DESCRIPTION))\r\nstartActivity(intent)\r\nreturn"}], "metadata": {"task_id": "aaf-easydiary/190", "ground_truth": "        menuInflater.inflate(R.menu.activity_markdown_viewer, menu)\r\n        return true\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\MarkDownViewerActivity.kt"}}
{"prompt": "\n import java.io.File\nimport me.blog.korn123.easydiary.helper.REQUEST_CODE_EXTERNAL_STORAGE_WITH_MARKDOWN\nimport me.blog.korn123.easydiary.helper.EXTERNAL_STORAGE_PERMISSIONS\nimport me.blog.korn123.easydiary.R\noverride fun onRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        pauseLock()\r\n        when (requestCode) {\r\n            REQUEST_CODE_EXTERNAL_STORAGE_WITH_MARKDOWN -> if (checkPermission(EXTERNAL_STORAGE_PERMISSIONS)) {\r\n                openMarkdownFile()\r", "choices": [{"text": "//                openFile()\r\n            } else {\r\n                Toast.makeText(this, R.string.permission_denied, Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/191", "ground_truth": "            } else {\r\n                makeSnackBar(\"Permission denied\")\r\n            }\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\MarkDownViewerActivity.kt"}}
{"prompt": "\n import java.io.FileInputStream\nimport java.io.File\nimport org.apache.commons.io.IOUtils\nimport android.util.Log\nprivate fun readSavedFile(): String {\r\n        val sb = StringBuilder()\r\n        try {\r\n            val lines = IOUtils.readLines(FileInputStream(File(savedFilePath)), \"UTF-8\")\r\n            lines.map {\r\n                sb.append(it)\r\n                sb.append(System.getProperty(\"line.separator\"))\r\n            }\r\n            Log.i(\"aaf-t\", sb.toString())\r", "choices": [{"text": "//            return sb.toString()\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n        return \"\"\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/192", "ground_truth": "        } catch (e: FileNotFoundException) {\r\n            sb.append(e.message)\r\n        }\r\n        return sb.toString()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\MarkDownViewerActivity.kt"}}
{"prompt": "\n override fun onCreateOptionsMenu(menu: Menu): Boolean {\r", "choices": [{"text": "// Inflate the menu; this adds items to the action bar if it is present.\r\nmenuInflater.inflate(R.menu.menu_main, menu)\r\nreturn true\r\n}\r\n\r\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n// Handle action bar item clicks here. The action bar will\r\n// automatically handle clicks on the Home/Up button, so long\r\n// as you specify a parent activity in AndroidManifest.xml.\r\nval id = item.itemId\r\n\r\n//noinspection SimplifiableIfStatement\r\nif (id == R.id."}], "metadata": {"task_id": "aaf-easydiary/193", "ground_truth": "        menuInflater.inflate(R.menu.activity_photo_view_pager, menu)\r\n        return true\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PhotoViewPagerActivity.kt"}}
{"prompt": "\nvar mBinding ActivityPinLockBinding\nval ACTIVITY_UNLOCK\nvar mCursorIndex\n override fun onBackPressed() {\r", "choices": [{"text": "super.onBackPressed()\r\nfinish()\r\n}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nmBinding = DataBindingUtil.setContentView(this, R.layout.activity_pin_lock)\r\nmBinding.pinLockView.setPinLockListener(this)\r\nmBinding.pinLockView.setPinLockViewListener(this)\r\nmBinding.pinLockView.setPinLength(4)\r\nmBinding.pinLockView.setPinViewStyle(PinLockView.PinViewStyle.FILL"}], "metadata": {"task_id": "aaf-easydiary/195", "ground_truth": "        super.onBackPressed()\r\n        ActivityCompat.finishAffinity(this)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PinLockActivity.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport android.os.Bundle\nimport android.graphics.Color\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        outState.putInt(POSTCARD_BG_COLOR, mBgColor)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "aaf-easydiary/196", "ground_truth": "        outState.putInt(POSTCARD_TEXT_COLOR, mTextColor)\r\n        super.onSaveInstanceState(outState)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PostcardActivity.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\nfinish()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/197", "ground_truth": "        super.onResume()\r\n        updateTextSize(mBinding.postContainer, this@PostcardActivity, mAddFontSize)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PostcardActivity.kt"}}
{"prompt": " import android.view.Menu\nvar mShowcaseView ShowcaseView\nvar showcaseIndex\nvar mPhotoAdapter PhotoAdapter\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r", "choices": [{"text": "menuInflater.inflate(R.menu.menu_main, menu)\r\nreturn true\r\n}\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\nwhen (item.itemId) {\r\nR.id.action_settings -> return true\r\n}\r\nreturn super.onOptionsItemSelected(item)\r\n}\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nmShowcaseView = ShowcaseView.Builder(this)\r\n.setTarget(findViewById(R"}], "metadata": {"task_id": "aaf-easydiary/198", "ground_truth": "        menuInflater.inflate(R.menu.activity_postcard, menu)\r\n        return true\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PostcardActivity.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport android.view.View\nimport android.graphics.Canvas\nimport android.graphics.Bitmap\nprivate fun createBitmap(): Bitmap {\r\n        val scrollViewBitmap = Bitmap.createBitmap(mBinding.scrollPostcard.width, mBinding.scrollPostcard.getChildAt(0).height, Bitmap.Config.ARGB_8888)\r\n        val scrollViewCanvas = Canvas(scrollViewBitmap)\r", "choices": [{"text": "//        mBinding.scrollPostcard.draw(scrollViewCanvas)\r\n        mBinding.scrollPostcard.draw(scrollViewCanvas)\r\n        return scrollViewBitmap\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/202", "ground_truth": "        mBinding.scrollPostcard.draw(scrollViewCanvas)\r\n        return scrollViewBitmap\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PostcardActivity.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\nfinish()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/204", "ground_truth": "        super.onResume()\r\n        supportActionBar?.setBackgroundDrawable(null)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PostcardViewerActivity.kt"}}
{"prompt": " import android.view.Menu\nvar mPostcardAdapter PostcardAdapter\nvar mListPostcard ArrayList<PostcardAdapter.PostCard>\nvar mGridLayoutManager GridLayoutManager\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r", "choices": [{"text": "menuInflater.inflate(R.menu.menu_main, menu)\r\nreturn true\r\n}\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\nwhen (item.itemId) {\r\nR.id.action_settings -> return true\r\nelse -> return super.onOptionsItemSelected(item)\r\n}\r\n}\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nmListPostcard = ArrayList()\r\nmPostcardAdapter = PostcardAdapter(this"}], "metadata": {"task_id": "aaf-easydiary/205", "ground_truth": "        menuInflater.inflate(R.menu.activity_postcard_viewer, menu)\r\n        return true\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PostcardViewerActivity.kt"}}
{"prompt": "\n override fun onCreateOptionsMenu(menu: Menu): Boolean {\r", "choices": [{"text": "// Inflate the menu; this adds items to the action bar if it is present.\r\nmenuInflater.inflate(R.menu.menu_main, menu)\r\nreturn true\r\n}\r\n\r\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n// Handle action bar item clicks here. The action bar will\r\n// automatically handle clicks on the Home/Up button, so long\r\n// as you specify a parent activity in AndroidManifest.xml.\r\nval id = item.itemId\r\n\r\n//noinspection SimplifiableIfStatement\r\nif (id == R.id."}], "metadata": {"task_id": "aaf-easydiary/207", "ground_truth": "        menuInflater.inflate(R.menu.activity_postcard_view_pager, menu)\r\n        return true\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PostcardViewPagerActivity.kt"}}
{"prompt": "\n import java.io.File\nimport me.blog.korn123.easydiary.helper.MIME_TYPE_JPEG\nimport me.blog.korn123.easydiary.extensions.shareFile\nimport me.blog.korn123.easydiary.R\nimport android.view\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.share -> shareFile(mListPostcard[mBinding.viewPager.currentItem], MIME_TYPE_JPEG)\r", "choices": [{"text": "//            R.id.share -> shareFile(mListPostcard[mBinding.viewPager.currentItem], MIME_TYPE_PNG)\r\n            R.id.delete -> {\r\n                val builder = AlertDialog.Builder(this)\r\n                builder.setTitle(R.string.delete_postcard)\r\n                builder.setMessage(R.string.delete_postcard_confirm)\r\n                builder.setPositiveButton(R.string.yes) { _, _ ->\r\n                    val file = File(mListPostcard[mBinding.viewPager.currentItem])\r\n                    if (file.exists()) {\r\n                        file.delete()"}], "metadata": {"task_id": "aaf-easydiary/208", "ground_truth": "        }\r\n        return super.onOptionsItemSelected(item)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\PostcardViewPagerActivity.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        if (!isSingleChart()) {\r\n            menuInflater.inflate(R.menu.activity_statistics, menu)\r\n            val targetItems = mutableListOf<MenuItem>()\r\n            targetItems.add(menu.findItem(R.id.barChart))\r\n            targetItems.add(menu.findItem(R.id.barChart2))\r\n            targetItems.add(menu.findItem(R.id.barChart3))\r\n            targetItems.map { item ->\r", "choices": [{"text": "//                item.isVisible = false\r\n                item.isEnabled = false\r\n            }\r\n        }\r\n        return true\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/209", "ground_truth": "                applyFontToMenuItem(item)\r\n            }\r\n        }\r\n        return true\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\StatisticsActivity.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            android.R.id.home -> {\r", "choices": [{"text": "//                finish()\r\n                onBackPressed()\r\n                return true\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/210", "ground_truth": "                this.onBackPressed()\r\n            }\r\n        }\r\n        return true\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\SymbolFilterPickerActivity.kt"}}
{"prompt": "\nvar mBinding ActivitySymbolFilterPickerBinding\nvar mSymbolFilterAdapter SymbolFilterAdapter\nvar mSymbolFilterList ArrayList<SymbolFilterAdapter.SymbolFilter>\n override fun onBackPressed() {\r", "choices": [{"text": "super.onBackPressed()\r\nfinish()\r\n}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nmBinding = DataBindingUtil.setContentView(this, R.layout.activity_symbol_filter_picker)\r\nmBinding.setLifecycleOwner(this)\r\nmBinding.symbolFilterPicker.adapter = mSymbolFilterAdapter\r\nmBinding.symbolFilterPicker.layoutManager = LinearLayoutManager(this)\r\nmBinding.symbolFilterPicker.setHasFixedSize(true)\r\nmBinding.symbolFilterPicker.isNested"}], "metadata": {"task_id": "aaf-easydiary/211", "ground_truth": "        setResult(Activity.RESULT_OK)\r\n        super.onBackPressed()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\SymbolFilterPickerActivity.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.extensions.config\nimport me.blog.korn123.easydiary.R\nimport android.view.View\noverride fun onResume() {\r\n        super.onResume()\r\n        if (config.previousActivity == PREVIOUS_ACTIVITY_CREATE ) {\r\n            refreshList()\r\n            moveListViewScrollToBottom()\r", "choices": [{"text": "//            config.previousActivity = PREVIOUS_ACTIVITY_NONE\r\n        }\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/213", "ground_truth": "            config.previousActivity = -1\r\n        } else {\r\n            refreshList()\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\TimelineActivity.kt"}}
{"prompt": " import android.view.Menu\nvar mTimelineItemAdapter TimelineItemAdapter?\nvar mSymbolSequence\nval mCalendar\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r", "choices": [{"text": "menuInflater.inflate(R.menu.menu_main, menu)\r\nreturn true\r\n}\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\nwhen (item.itemId) {\r\nR.id.action_settings -> return true\r\nelse -> return super.onOptionsItemSelected(item)\r\n}\r\n}\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nmTimelineItemAdapter = TimelineItemAdapter(this)\r\nmTimelineItemAdapter!!.set"}], "metadata": {"task_id": "aaf-easydiary/214", "ground_truth": "        menuInflater.inflate(R.menu.activity_timeline, menu)\r\n        return true\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\TimelineActivity.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.extensions.dpToPixel\nimport me.blog.korn123.easydiary.R\nimport android.view.View\nprivate fun keypadIsShown(): Boolean {\r\n        var isShow = false\r\n        val rootView = findViewById<View>(android.R.id.content)\r\n        val heightDiff = rootView.rootView.height - rootView.height\r\n        if (heightDiff > dpToPixel(200F)) {\r\n            isShow = true\r", "choices": [{"text": "//            Toast.makeText(this, \"keyboard is shown\", Toast.LENGTH_SHORT).show()\r\n        }\r\n        return isShow\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/218", "ground_truth": "        }\r\n        Log.i(\"keypadIsShown\", \"$heightDiff, ${dpToPixel(200F)}\")\r\n\r\n        return isShow\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\activities\\ToolbarControlBaseActivity.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.models.Alarm\nimport android.view.View\nfun onItemHolderClick(itemHolder: AlarmViewHolder) {\r\n        onItemClickListener?.run {\r", "choices": [{"text": "//            itemHolder.itemView.setOnClickListener {\r\n//                onItemClick(itemHolder.adapterPosition)\r\n//            }\r\n            itemHolder.itemView.setOnLongClickListener {\r\n                onItemLongClick(itemHolder.adapterPosition)\r\n                true\r\n            }\r\n        }\r\n    }<file_sep>/app/src/main/java/me/blog/korn123/easydiary/ui/fragments/AlarmFragment.kt\npackage me.blog.korn123.easydiary.ui.fragments\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\n"}], "metadata": {"task_id": "aaf-easydiary/219", "ground_truth": "            onItemClick(null, itemHolder.itemView, itemHolder.adapterPosition, itemHolder.itemId)\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\AlarmAdapter.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.models.Alarm\nimport me.blog.korn123.easydiary.helper.EasyDiaryDbHelper\nimport android.view.View\nfun onItemCheckedChange(position: Int, isChecked: Boolean) {\r\n        val alarm = alarmList[position]\r\n        EasyDiaryDbHelper.beginTransaction()\r\n        alarm.isEnabled = isChecked\r\n        if (isChecked) {\r\n            activity.scheduleNextAlarm(alarm, true)\r\n//            alarm.label = itemView.alarmDescription.text.toString()\r", "choices": [{"text": "//            alarm.time = itemView.alarmTime.text.toString()\r\n        } else {\r\n            activity.cancelAlarm(alarm)\r\n        }\r\n        EasyDiaryDbHelper.setTransactionSuccessful()\r\n        EasyDiaryDbHelper.endTransaction()\r\n    }\n<file_sep>/app/src/main/java/me/blog/korn123/easydiary/helper/AlarmReceiver.kt\npackage me.blog.korn123.easydiary.helper\n\nimport android.content.BroadcastReceiver\nimport android.content.Context\nimport android.content.Intent\nimport android."}], "metadata": {"task_id": "aaf-easydiary/220", "ground_truth": "        } else {\r\n            activity.cancelAlarmClock(alarm)\r\n        }\r\n        EasyDiaryDbHelper.commitTransaction()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\AlarmAdapter.kt"}}
{"prompt": "\n import android.view.View\nfun onItemHolderClick(itemHolder: CheatSheetViewHolder) {\r\n        onItemClickListener?.run {\r", "choices": [{"text": "//            onItemClick(itemHolder.adapterPosition)\r\n            onItemClick(itemHolder.adapterPosition, itemHolder.itemView)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/221", "ground_truth": "            onItemClick(null, itemHolder.itemView, itemHolder.adapterPosition, itemHolder.itemId)\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\CheatSheetAdapter.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.models.DDay\nimport me.blog.korn123.easydiary.databinding.ItemDdayBinding\nimport me.blog.korn123.easydiary.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\nimport android.view.View\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n        return when (viewType == 0) {\r\n            true -> DDayViewHolder(ItemDdayBinding.inflate(activity.layoutInflater))\r", "choices": [{"text": "//            false -> DDayViewHolder(ItemDdayBinding.inflate(activity.layoutInflater))\r\n            else -> DDayViewHolder(ItemDdayBinding.inflate(activity.layoutInflater))\r\n        }\r\n    }\r\n\r\n    override fun getItemCount(): Int {\r\n        return ddayList.size\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        when (holder) {\r\n            is DDayViewHolder -> holder.bind(ddayList[position])\r\n        }\r\n    }\r\n\r\n    override fun getItemViewType(position: Int): Int {\r\n        return if (ddayList[position].is"}], "metadata": {"task_id": "aaf-easydiary/223", "ground_truth": "            false -> DDayAddViewHolder(ItemDdayAddBinding.inflate(activity.layoutInflater))\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\DDayAdapter.kt"}}
{"prompt": "\n import android.view.View\noverride fun getItemViewType(position: Int): Int {\r\n        return when (dDayItems.size == position.plus(1)) {\r\n            true -> 1\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/224", "ground_truth": "            false -> 0\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\DDayAdapter.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.models.DDay\nimport me.blog.korn123.easydiary.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        return when (dDayItems.size == position.plus(1)) {\r\n            true -> (holder as DDayAddViewHolder).bindTo(dDayItems[position])\r", "choices": [{"text": "//            false -> (holder as DDayViewHolder).bindTo(dDayItems[position])\r\n        }\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/225", "ground_truth": "            false -> (holder as DDayViewHolder).bindTo(dDayItems[position])\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\DDayAdapter.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.models.DDay\nfun bindTo(dDay: DDay) {\r\n            itemDDayAddBinding.root.setOnClickListener {\r", "choices": [{"text": "//                val intent = Intent(context, DDayAddActivity::class.java)\r\n//                intent.putExtra(\"dDay\", dDay)\r\n//                context.startActivity(intent)\r\n            }\r\n        }\n"}], "metadata": {"task_id": "aaf-easydiary/227", "ground_truth": "                openDDayDialog(dDay)\r\n            }\r\n        }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\DDayAdapter.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.models.Diary\nfun getSelectedItems(): List<Diary> {\r\n        val selectedItems = arrayListOf<Diary>()\r", "choices": [{"text": "//        val selectedItems = mutableListOf<Diary>()\r\n        val selectedItemPositions = mutableListOf<Int>()\r\n        val selectedItemIds = mutableListOf<Long>()\r\n        val selectedItemNames = mutableListOf<String>()\r\n        val selectedItemDates = mutableListOf<String>()\r\n        val selectedItemContents = mutableListOf<String>()\r\n        val selectedItemImages = mutableListOf<String>()\r\n        val selectedItemVideos = mutableListOf<String>()\r\n        val selectedItemAudios = mutableListOf<String>()\r\n        val selectedItemTexts = mutableListOf<String>()\r\n        val selectedItemTexts2 = mutableListOf<String>()\r\n        val selected"}], "metadata": {"task_id": "aaf-easydiary/229", "ground_truth": "        diaryItems.map {\r\n            if (it.isSelected) selectedItems.add(it)\r\n        }\r\n        return selectedItems\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\DiaryMainItemAdapter.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport jp.wasabeef.glide.transformations.CropTransformation\nfun getCropType(viewMode: Int): CropTransformation.CropType? = when (viewMode) {\r\n                1 -> CropTransformation.CropType.TOP\r\n                2 -> CropTransformation.CropType.CENTER\r", "choices": [{"text": "//                3 -> CropTransformation.CropType.BOTTOM\r\n                4 -> CropTransformation.CropType.TOP_LEFT\r\n                5 -> CropTransformation.CropType.TOP_RIGHT\r\n                6 -> CropTransformation.CropType.BOTTOM_LEFT\r\n                7 -> CropTransformation.CropType.BOTTOM_RIGHT\r\n                else -> null\r\n            }\n"}], "metadata": {"task_id": "aaf-easydiary/234", "ground_truth": "                3 -> CropTransformation.CropType.BOTTOM\r\n                else -> null\r\n            }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\adapters\\PhotoAdapter.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.extensions.getStatusBarColor\nimport me.blog.korn123.easydiary.extensions.getDisplayMetrics\nimport me.blog.korn123.easydiary.extensions.config\nimport me.blog.korn123.easydiary.R\nimport android.os.Build\nimport android.graphics.Color\noverride fun onStart() {\r\n        super.onStart()\r\n        requireActivity().run activity@ {\r\n            getDisplayMetrics().also {\r\n                dialog?.window?.run {\r\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                        statusBarColor = this@activity.getStatusBarColor(config.primaryColor)\r", "choices": [{"text": "//                        navigationBarColor = this@activity.getStatusBarColor(config.primaryColor)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/240", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\dialogs\\DashboardDialogFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\n"}], "metadata": {"task_id": "aaf-easydiary/241", "ground_truth": "        mBinding = ActivityDashboardBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\dialogs\\DashboardDialogFragment.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport android.graphics.Color\nprivate fun getColorIndexes(color: Int): Pair<Int, Int> {\r\n        if (color == DEFAULT_COLOR_VALUE) {\r\n            return getDefaultColorPair()\r\n        }\r\n\r\n        for (i in 0 until PRIMARY_COLORS_COUNT) {\r\n            val colors = getColorsForIndex(i)\r\n            val size = colors.size\r\n            (0 until size).filter { color == colors[it] }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/242", "ground_truth": "                    .forEach { return Pair(i, it) }\r\n        }\r\n\r\n        return getDefaultColorPair()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\dialogs\\LineColorPickerDialog.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport com.simplemobiletools.commons.models.Release\nprivate fun getNewReleases(): String {\r\n        val sb = StringBuilder()\r\n\r\n        releases.forEach {\r\n            val parts = activity.getString(it.textId).split(\"\\n\").map(String::trim)\r\n            parts.forEachIndexed { index, description -> \r\n                when (index) {\r\n                    0 -> sb.append(\"* $description\\n\") \r\n                    else -> sb.append(\"- $description\\n\")\r\n                }\r\n            }\r", "choices": [{"text": "sb.append(\"\\n\")\r\n        }\r\n\r\n        return sb.toString()\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/245", "ground_truth": "            sb.append(\"\\n\")\r\n        }\r\n\r\n        return sb.toString()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\dialogs\\WhatsNewDialog.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport com.google.android.material.snackbar.Snackbar\nimport android.app.Activity\nfun Activity.makeSnackBar(message: String, duration: Int = Snackbar.LENGTH_SHORT) {\r\n    Snackbar\r", "choices": [{"text": ".make(this.findViewById(android.R.id.content), message, duration)\r\n.show()\r\n}<file_sep>/app/src/main/java/me/blog/korn123/easydiary/ui/main/MainViewModel.kt\npackage me.blog.korn123.easydiary.ui.main\n\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport me.blog.korn123.easydiary.data.model.Diary\nimport me."}], "metadata": {"task_id": "aaf-easydiary/246", "ground_truth": "        .make(findViewById(android.R.id.content), message, duration)\r\n        .setAction(\"Action\", null).show()\r\n}", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt"}}
{"prompt": "\n import android.graphics.Point\nimport android.app.Activity\nfun Activity.getDefaultDisplay(): Point {\r\n    val display = windowManager.defaultDisplay\r\n    val size = Point()\r", "choices": [{"text": "display.getSize(size)\r\n    return size\r\n}\n"}], "metadata": {"task_id": "aaf-easydiary/250", "ground_truth": "    display.getSize(size)\r\n    return size\r\n}", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt"}}
{"prompt": "\n import java.util\nimport me.blog.korn123.easydiary.R\nimport android.util.DisplayMetrics\nimport android.os.Build\nimport android.app.Activity\nfun Activity.getDisplayMetrics(): DisplayMetrics {\r\n    val outMetrics = DisplayMetrics()\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\r\n        val display = display\r\n        display?.getMetrics(outMetrics)\r\n//        display?.getRealMetrics(outMetrics)\r\n    } else {\r\n        val display = windowManager.defaultDisplay\r", "choices": [{"text": "//        display?.getMetrics(outMetrics)\r\n        display?.getRealMetrics(outMetrics)\r\n    }\r\n    return outMetrics\r\n}\n"}], "metadata": {"task_id": "aaf-easydiary/252", "ground_truth": "        display.getMetrics(outMetrics)\r\n//        display.getRealMetrics(outMetrics)\r\n    }\r\n    return outMetrics\r\n}", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt"}}
{"prompt": "\n import android.content.Intent\nimport android.app.Activity\nfun Activity.startActivityWithTransition(intent: Intent) {\r", "choices": [{"text": "startActivity(intent)\r\noverridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left)\r\n}\r\nfun Activity.startActivityWithTransition(intent: Intent, requestCode: Int) {\r\nstartActivityForResult(intent, requestCode)\r\noverridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left)\r\n}\r\nfun Activity.startActivityWithTransition(intent: Intent, requestCode: Int, options: Bundle) {\r\nstartActivityForResult(intent, requestCode, options"}], "metadata": {"task_id": "aaf-easydiary/254", "ground_truth": "    startActivity(intent)\r\n    overridePendingTransition(R.anim.fade_in, R.anim.fade_out)\r\n}", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.models.Diary\nimport me.blog.korn123.easydiary.R\nimport android.net.Uri\nimport android.app.Activity\n\nfun Activity.exportHtmlBook(uri: Uri?, diaryList: List<Diary>) {\r\n    uri?.let {\r\n        val os = contentResolver.openOutputStream(it)\r", "choices": [{"text": "       os?.let {\r            val html = HtmlBook.createHtmlBook(diaryList)\r            it.write(html.toByteArray())\r            it.close()\r        }\r\n    }\r\n}<file_sep>/app/src/main/java/me/blog/korn123/easydiary/models/Diary.kt\npackage me.blog.korn123.easydiary.models\n\nimport android.os.Parcel\nimport android.os.Parcelable\nimport java.util.*\n\ndata class Diary(val title: String, val content:"}], "metadata": {"task_id": "aaf-easydiary/260", "ground_truth": "        IOUtils.write(createHtmlString(diaryList), os, \"UTF-8\")\r\n        os?.close()\r\n    }\r", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport android.content.Intent\nimport android.app.Activity\n\nfun Activity.triggerRestart(cls: Class<*>) {\r\n    val intent = Intent(this, cls)\r\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r", "choices": [{"text": "//    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK)\r\n    startActivity(intent)\r\n    finish()\r\n}<file_sep>/app/src/main/java/me/blog/korn123/easydiary/ui/activity/MainActivity.kt\npackage me.blog.korn123.easydiary.ui.activity\n\nimport android.os.Bundle\nimport android.support.v4.app.Fragment\nimport android.support.v4.app.FragmentManager\nimport android.support.v4.app.FragmentPagerAdapter\nimport android"}], "metadata": {"task_id": "aaf-easydiary/264", "ground_truth": "    this.startActivity(intent)\r\n    finish()\r\n    Runtime.getRuntime().exit(0)\r", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Activity.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.models.Alarm\nimport android.content.Context\nfun Context.rescheduleEnabledAlarms() {\r\n    EasyDiaryDbHelper.findAlarmAll().forEach {\r", "choices": [{"text": "//        Log.d(\"Alarm\", \"rescheduleEnabledAlarms: ${it.id}\")\r\n        it.reschedule(this)\r\n    }\r\n}<file_sep>/app/src/main/java/me/blog/korn123/easydiary/models/Alarm.kt\npackage me.blog.korn123.easydiary.models\n\nimport android.app.AlarmManager\nimport android.app.PendingIntent\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Build\nimport android.util.Log\nimport androidx"}], "metadata": {"task_id": "aaf-easydiary/271", "ground_truth": "        if (it.isEnabled) scheduleNextAlarm(it, false)\r\n    }\r\n}", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt"}}
{"prompt": "\n import android.content.res.Configuration\nimport android.content.Context\nfun Context.isNightMode() = when (resources.configuration.uiMode and Configuration.UI_MODE_NIGHT_MASK) {\r\n    Configuration.UI_MODE_NIGHT_YES -> false\r", "choices": [{"text": "Configuration.UI_MODE_NIGHT_NO -> true\r\nelse -> false\r\n}\n"}], "metadata": {"task_id": "aaf-easydiary/272", "ground_truth": "    Configuration.UI_MODE_NIGHT_NO -> false\r\n    else -> false\r\n}", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt"}}
{"prompt": "\n import androidx.cardview.widget.CardView\nimport android.view.View\nimport android.content.Context\nfun Context.updateDrawableColorInnerCardView(resourceId: Int, color: Int = config.textColor) {\r", "choices": [{"text": "val drawable = getDrawable(resourceId)\r\ndrawable?.setColorFilter(color, PorterDuff.Mode.SRC_IN)\r\n}\r\nfun Context.updateDrawableColorInnerCardView(view: View, color: Int = config.textColor) {\r\nval drawable = view.background\r\ndrawable?.setColorFilter(color, PorterDuff.Mode.SRC_IN)\r\n}\r\nfun Context.updateDrawableColorInnerCardView(view: CardView, color: Int = config.textColor) {\r\nval drawable = view.background\r\ndrawable?.setColorFilter"}], "metadata": {"task_id": "aaf-easydiary/275", "ground_truth": "    if (isNightMode()) return\r\n    changeDrawableIconColor(color, resourceId)\r\n}", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt"}}
{"prompt": "\n import androidx.cardview.widget.CardView\nimport android.view.View\nimport android.content.Context\nfun Context.updateDrawableColorInnerCardView(imageView: ImageView, color: Int = config.textColor) {\r", "choices": [{"text": "imageView.setColorFilter(color, PorterDuff.Mode.SRC_IN)\r\n}\r\nfun Context.updateDrawableColorInnerCardView(imageView: CardView, color: Int = config.textColor) {\r\nimageView.setCardBackgroundColor(color)\r\n}\r\nfun Context.updateDrawableColorInnerCardView(imageView: View, color: Int = config.textColor) {\r\nimageView.setBackgroundColor(color)\r\n}\r\nfun Context.updateDrawableColorInnerCardView(imageView: View, color: Int = config.textColor) {\r\nimageView.set"}], "metadata": {"task_id": "aaf-easydiary/276", "ground_truth": "    if (isNightMode()) return\r\n    changeDrawableIconColor(color, imageView)\r\n}", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport androidx.appcompat.content.res.AppCompatResources\nimport android.os.Build\nimport android.content.Context\nimport android.app\nfun Context.changeDrawableIconColor(color: Int, resourceId: Int) {\r\n    AppCompatResources.getDrawable(this, resourceId)?.apply {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n            colorFilter = BlendModeColorFilter(color, BlendMode.SRC_IN)\r", "choices": [{"text": "       } else {\r\n            setColorFilter(color, android.graphics.PorterDuff.Mode.SRC_IN)\r        }\r\n    }\r\n}<file_sep>/app/src/main/java/me/blog/korn123/easydiary/ui/main/MainViewModel.kt\npackage me.blog.korn123.easydiary.ui.main\n\nimport android.app.Application\nimport androidx.lifecycle.AndroidViewModel\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.viewModelScope\nimport kotlinx."}], "metadata": {"task_id": "aaf-easydiary/277", "ground_truth": "        } else {\r\n            setColorFilter(color, PorterDuff.Mode.SRC_IN)\r\n        }\r\n    }\r\n}", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport androidx.core.content.ContextCompat\nimport android.os.Build\nimport android.content.pm.PackageManager\nimport android.content.Context\nfun Context.checkPermission(permissions: Array<String>): Boolean {\r\n    return when (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU && permissions === EXTERNAL_STORAGE_PERMISSIONS) {\r\n        true -> true\r\n        false -> {\r\n            val listDeniedPermissions: List<String> = permissions.filter { permission ->\r\n                ContextCompat.checkSelfPermission(this, permission) == PackageManager.PERMISSION_DENIED\r\n            }\r", "choices": [{"text": "//            if (listDeniedPermissions.isNotEmpty()) {\r\n//                requestPermissions(listDeniedPermissions.toTypedArray(), EXTERNAL_STORAGE_PERMISSIONS_REQUEST_CODE)\r\n//            }\r\n            listDeniedPermissions.isEmpty()\r\n        }\r\n    }\r\n}\n<file_sep>/app/src/main/java/me/blog/korn123/easydiary/ui/main/MainActivity.kt\npackage me.blog.korn123.easydiary.ui.main\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android."}], "metadata": {"task_id": "aaf-easydiary/278", "ground_truth": "            listDeniedPermissions.isEmpty()\r\n        }\r\n    }\r\n\r\n}", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt"}}
{"prompt": "\n import android.content.Context\nfun Context.preferencesContains(key: String): Boolean {\r", "choices": [{"text": "return getSharedPreferences(packageName, Context.MODE_PRIVATE).contains(key)\r\n}\r\nfun Context.preferencesGet(key: String, defValue: String): String {\r\nreturn getSharedPreferences(packageName, Context.MODE_PRIVATE).getString(key, defValue)\r\n}\r\nfun Context.preferencesGet(key: String, defValue: Int): Int {\r\nreturn getSharedPreferences(packageName, Context.MODE_PRIVATE).getInt(key, defValue)\r\n}\r\nfun Context.preferencesGet(key: String, defValue: Boolean): Boolean {\r\nreturn"}], "metadata": {"task_id": "aaf-easydiary/279", "ground_truth": "    val preferences = PreferenceManager.getDefaultSharedPreferences(this)\r\n    return preferences.contains(key)\r\n}", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt"}}
{"prompt": "\n import android.content.Context\nfun Context.formatTime(showSeconds: Boolean, use24HourFormat: Boolean, hours: Int, minutes: Int, seconds: Int): String {\r\n    val hoursFormat = if (use24HourFormat) \"%02d\" else \"%01d\"\r\n    var format = \"$hoursFormat:%02d\"\r\n\r\n    return if (showSeconds) {\r\n        format += \":%02d\"\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/284", "ground_truth": "        String.format(format, hours, minutes, seconds)\r\n    } else {\r\n        String.format(format, hours, minutes)\r\n    }\r\n}", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport io.realm.Realm\nimport android.os.Build\nimport android.content.Context\nfun Context.forceInitRealmLessThanOreo() {\r\n    // android marshmallow minor version bug workaround\r\n    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {\r", "choices": [{"text": "Realm.init(this)\r\n    }\r\n}<file_sep>/app/src/main/java/me/blog/korn123/easydiary/ui/activity/MainActivity.kt\npackage me.blog.korn123.easydiary.ui.activity\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.support.v7.app.AppCompatActivity\nimport android.view.Menu\nimport android.view.MenuItem\nimport android.view.View\nimport android.widget.Toast\nimport kotlinx.android.synthetic.main."}], "metadata": {"task_id": "aaf-easydiary/289", "ground_truth": "        Realm.init(this)\r\n    }\r\n}", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport android.location.Location\nimport android.location.Geocoder\nimport android.location.Address\nimport android.content.Context\nfun Context.getFromLocation(latitude: Double, longitude: Double, maxResults: Int): List<Address>? {\r\n//    val lat = java.lang.Double.parseDouble(String.format(\"%.6f\", latitude))\r\n//    val lon = java.lang.Double.parseDouble(String.format(\"%.7f\", longitude))\r\n    val addressList = arrayListOf<Address>()\r\n    try {\r\n        addressList.addAll(Geocoder(this, Locale.getDefault()).getFromLocation(latitude, longitude, maxResults)!!)\r", "choices": [{"text": "//        addressList.addAll(Geocoder(this, Locale.getDefault()).getFromLocation(lat, lon, maxResults)!!)\r\n    } catch (e: IOException) {\r\n        e.printStackTrace()\r\n    }\r\n    return addressList\r\n}\n"}], "metadata": {"task_id": "aaf-easydiary/291", "ground_truth": "    } catch (e: Exception) {\r\n        toast(e.message ?: \"Error\")\r\n    }\r\n    return addressList\r\n}", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport android.net.ConnectivityManager\nimport android.content.Context\nfun Context.isConnectedOrConnecting(): Boolean {\r\n    val cm = getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\r", "choices": [{"text": "return cm.activeNetworkInfo?.isConnectedOrConnecting == true\r\n}\n"}], "metadata": {"task_id": "aaf-easydiary/292", "ground_truth": "    val activeNetwork: NetworkInfo? = cm.activeNetworkInfo\r\n    return activeNetwork?.isConnectedOrConnecting == true\r\n}", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.enums.Launcher\nimport android.content.Context\nfun Context.toggleLauncher(launcher: Launcher) {\r\n    themeItems.forEach {\r", "choices": [{"text": "//        if (it.launcher == launcher) {\r\n//            it.isChecked =!it.isChecked\r\n//        }\r\n        if (it.launcher == launcher) {\r\n            it.isChecked =!it.isChecked\r\n        }\r\n    }\r\n    setThemeItems(themeItems)\r\n}<file_sep>/app/src/main/java/me/blog/korn123/easydiary/ui/activity/MainActivity.kt\npackage me.blog.korn123.easydiary.ui.activity\n\nimport android.content.Intent\nimport android.os.Bundle"}], "metadata": {"task_id": "aaf-easydiary/294", "ground_truth": "        checkAppIconColor(it.themeName,it == launcher)\r\n    }\r\n}", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Context.kt"}}
{"prompt": "\n import android.graphics.Typeface\nimport android.graphics.Paint\nprivate fun applyCustomTypeFace(paint: Paint) {\r\n        val oldStyle: Int\r\n        val old = paint.typeface\r\n        oldStyle = old?.style ?: 0\r\n\r\n        val fake = oldStyle and tf.style.inv()\r\n        if (fake and Typeface.BOLD != 0) {\r\n            paint.isFakeBoldText = true\r\n        }\r\n\r\n        if (fake and Typeface.ITALIC != 0) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/297", "ground_truth": "            paint.textSkewX = -0.25f\r\n        }\r\n\r\n        paint.typeface = tf\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\CustomTypefaceSpan.kt"}}
{"prompt": "\n import androidx.fragment.app.Fragment\nimport android.view.ViewGroup\nfun Fragment.updateFragmentUI(rootView: ViewGroup) {\r\n    rootView.let {\r\n        context?.run {\r\n            initTextSize(it)\r\n            updateTextColors(it,0,0)\r\n            updateAppViews(it)\r", "choices": [{"text": "//            updateAppViews(it)\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "aaf-easydiary/298", "ground_truth": "            updateCardViewPolicy(it)\r\n            FontUtils.setFontsTypeface(this, null, it, true)\r\n        }\r\n    }\r\n}", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Fragment.kt"}}
{"prompt": "\n import android.graphics.Color\nfun Int.darkenColor(darkFactor: Int = 8): Int {\r\n    if (this == Color.WHITE) {\r\n        return -2105377\r\n    } else if (this == Color.BLACK) {\r\n        return Color.BLACK\r\n    }\r\n\r\n    var hsv = FloatArray(3)\r\n    Color.colorToHSV(this, hsv)\r\n    val hsl = hsv2hsl(hsv)\r\n    hsl[2] -= darkFactor / 100f\r", "choices": [{"text": "//    hsv = hsl2hsv(hsl)\r\n    return Color.HSVToColor(hsv)\r\n}\r\n\r\nfun hsv2hsl(hsv: FloatArray): FloatArray {\r\n    val h = hsv[0]\r\n    val s = hsv[1]\r\n    val v = hsv[2]\r\n    val l = (2 - s) * v\r\n    val sl = s * l\r\n    val sv = sl / (2 - l)\r\n    val hsl = FloatArray(3)\r\n    hsl[0] = h\r\n    hsl[1]"}], "metadata": {"task_id": "aaf-easydiary/302", "ground_truth": "    if (hsl[2] < 0)\r\n        hsl[2] = 0f\r\n    hsv = hsl2hsv(hsl)\r\n    return Color.HSVToColor(hsv)\r\n}", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Int.kt"}}
{"prompt": "\n private fun hsv2hsl(hsv: FloatArray): FloatArray {\r\n    val hue = hsv[0]\r\n    val sat = hsv[1]\r\n    val value = hsv[2]\r\n\r\n    val newHue = (2f - sat) * value\r\n    var newSat = sat * value / if (newHue < 1f) newHue else 2f - newHue\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/304", "ground_truth": "    if (newSat > 1f)\r\n        newSat = 1f\r\n\r\n    return floatArrayOf(hue, newSat, newHue / 2f)\r\n}", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\extensions\\Int.kt"}}
{"prompt": "\n import com.roomorama.caldroid.CaldroidGridAdapter\noverride fun getNewDatesGridAdapter(month: Int, year: Int): CaldroidGridAdapter {\r", "choices": [{"text": "return CaldroidGridAdapter(this, month, year, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"}], "metadata": {"task_id": "aaf-easydiary/305", "ground_truth": "        return CaldroidItemAdapter(requireActivity(), month, year,\r\n                getCaldroidData(), extraData)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\CalendarFragment.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.adapters.WeekdayArrayAdapter\nimport me.blog.korn123.easydiary.R\noverride fun getNewWeekdayAdapter(themeResource: Int): WeekdayArrayAdapter {\r\n        return WeekdayArrayAdapter(\r", "choices": [{"text": "//            context = context,\r\n            context = context,\r\n            themeResource = themeResource\r\n        )\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/306", "ground_truth": "                requireActivity(), R.layout.item_weekday,\r\n                daysOfWeek, themeResource)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\CalendarFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\n"}], "metadata": {"task_id": "aaf-easydiary/307", "ground_truth": "        mBinding = FragmentDailySymbolBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\DailySymbolFragment.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\noverride fun onResume() {\r\n        super.onResume()\r", "choices": [{"text": "}\r\noverride fun onPause() {\r\n        super.onPause()\r\n}\r\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n}\r\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\n        super.onRestoreInstanceState(savedInstanceState)\r\n}\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n}\r"}], "metadata": {"task_id": "aaf-easydiary/308", "ground_truth": "\r\n\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\DailySymbolFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/310", "ground_truth": "        mBinding = FragmentDashboardRankBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\DashBoardRankFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/311", "ground_truth": "        mBinding = FragmentDashboardSummaryBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\DashBoardSummaryFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\n"}], "metadata": {"task_id": "aaf-easydiary/312", "ground_truth": "        mBinging = FragmentDdayBinding.inflate(layoutInflater)\r\n        return mBinging.root\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\DDayFragment.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\nfinish()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/313", "ground_truth": "        super.onResume()\r\n        updateDDayList(mDDaySortOrder)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\DDayFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\n"}], "metadata": {"task_id": "aaf-easydiary/315", "ground_truth": "        mBinding = FragmentDiaryBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\DiaryFragment.kt"}}
{"prompt": "\n override fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nmMapView.onResume()\r\n}\r\noverride fun onPause() {\r\nsuper.onPause()\r\nmMapView.onPause()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nmMapView.onDestroy()\r\n}\r\noverride fun onLowMemory() {\r\nsuper.onLowMemory()\r\nmMapView.onLowMemory()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/316", "ground_truth": "        super.onResume()\r\n        Handler(Looper.getMainLooper()).post { updateDiary() }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\DiaryFragment.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        dialog?.setTitle(getString(R.string.title_dialog_postcard_photo_option))\r", "choices": [{"text": "//        dialog?.setCancelable(false)\r\n        return inflater.inflate(R.layout.dialog_postcard_photo_option, container, false)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        view.findViewById<View>(R.id.btn_postcard_photo_option_camera).setOnClickListener {\r\n            dismiss()\r\n            activity?.let {\r\n                it.startActivity(Intent(it, CameraActivity::class.java))\r\n            }\r\n        }\r\n        view.findViewById<View>(R.id.btn_"}], "metadata": {"task_id": "aaf-easydiary/318", "ground_truth": "        mBinding = DialogPostcardPhotoOptionBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\PhotoFlexItemOptionFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/320", "ground_truth": "        mBinding = FragmentPhotoHighlightBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\PhotoHighlightFragment.kt"}}
{"prompt": "\n import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onViewCreated(view, savedInstanceState)\r\nview.findViewById<View>(R.id.button).setOnClickListener {\r\nval intent = Intent(activity, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/321", "ground_truth": "        super.onViewCreated(view, savedInstanceState)\r\n        setupHistory()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\PhotoHighlightFragment.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\nfinish()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/322", "ground_truth": "        super.onResume()\r\n        Handler(Looper.getMainLooper()).post { updateHistory() }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\PhotoHighlightFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/323", "ground_truth": "        mBinding = FragmentSettingsAppInfoBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsAppInfoFragment.kt"}}
{"prompt": "\n import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        bindEvent()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "aaf-easydiary/324", "ground_truth": "        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsAppInfoFragment.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\noverride fun onResume() {\r\n        super.onResume()\r", "choices": [{"text": "}\r\noverride fun onPause() {\r\n        super.onPause()\r\n}\r\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n}\r\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\n        super.onRestoreInstanceState(savedInstanceState)\r\n}\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n}\r"}], "metadata": {"task_id": "aaf-easydiary/325", "ground_truth": "        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsAppInfoFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/326", "ground_truth": "        mBinding = FragmentSettingsBasicBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsBasicFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/329", "ground_truth": "        mBinding = FragmentSettingsFontBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsFontFragment.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.activities.SettingsActivity\nimport me.blog.korn123.easydiary.activities.BaseSettingsActivity\nimport me.blog.korn123.easydiary.R\nimport android.view.View\nimport android.os.Bundle\nimport android.app.Activity\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        progressContainer = (requireActivity() as BaseSettingsActivity).getProgressContainer()\r\n        requireActivity().run {\r\n            changeDrawableIconColor(config.textColor, R.drawable.ic_minus_6)\r\n            changeDrawableIconColor(config.textColor, R.drawable.ic_plus_6)\r", "choices": [{"text": "//            changeDrawableIconColor(config.textColor, R.drawable.ic_settings_6)\r\n            changeDrawableIconColor(config.textColor, R.drawable.ic_settings_6)\r\n            changeDrawableIconColor(config.textColor, R.drawable.ic_settings_6)\r\n            changeDrawableIconColor(config.textColor, R.drawable.ic_settings_6)\r\n            changeDrawableIconColor(config.textColor, R.drawable.ic_settings_6)\r\n            changeDrawableIconColor(config.textColor, R.drawable.ic_settings_6)\r\n            changeDrawableIconColor("}], "metadata": {"task_id": "aaf-easydiary/330", "ground_truth": "        }\r\n        bindEvent()\r\n        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsFontFragment.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\noverride fun onResume() {\r\n        super.onResume()\r", "choices": [{"text": "}\r\noverride fun onPause() {\r\n        super.onPause()\r\n}\r\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n}\r\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\n        super.onRestoreInstanceState(savedInstanceState)\r\n}\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n}\r"}], "metadata": {"task_id": "aaf-easydiary/331", "ground_truth": "        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsFontFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/332", "ground_truth": "        mBinding = FragmentSettingsBackupLocalBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLocalBackupFragment.kt"}}
{"prompt": "\n import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        bindEvent()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "aaf-easydiary/333", "ground_truth": "        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLocalBackupFragment.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\noverride fun onResume() {\r\n        super.onResume()\r", "choices": [{"text": "}\r\noverride fun onPause() {\r\n        super.onPause()\r\n}\r\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n}\r\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\n        super.onRestoreInstanceState(savedInstanceState)\r\n}\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n}\r"}], "metadata": {"task_id": "aaf-easydiary/334", "ground_truth": "        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLocalBackupFragment.kt"}}
{"prompt": "\n import java.io.File\nimport me.blog.korn123.easydiary.R\nprivate fun exportRealmFile(showDialog: Boolean = true) {\r", "choices": [{"text": "val realm = Realm.getDefaultInstance()\r\nval realmFile = realm.configuration.realmFileName\r\nval realmDir = realm.configuration.directory\r\nval realmFileDir = File(realmDir, realmFile)\r\nval exportFile = File(realmDir, \"export.realm\")\r\nif (exportFile.exists()) {\r\nexportFile.delete()\r\n}\r\nrealmFileDir.copyTo(exportFile, true)\r\nif (showDialog) {\r\nToast.makeText(\r\nrealm.context,\r\nrealm.context.getString(R.string."}], "metadata": {"task_id": "aaf-easydiary/335", "ground_truth": "        requireActivity().exportRealmFile()\r\n        requireActivity().makeSnackBar(\"Operation completed.\")\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLocalBackupFragment.kt"}}
{"prompt": "\n import java.io.File\nimport me.blog.korn123.easydiary.workers.BackupOperations\nimport me.blog.korn123.easydiary.R\nimport android.net.Uri\nimport android.app.Activity\nprivate fun exportFullBackupFile(uri: Uri?) {\r\n        exportRealmFile(false)\r\n        BackupOperations.Builder(requireActivity(), uri.toString(), BackupOperations.WORK_MODE_BACKUP).build().apply {\r", "choices": [{"text": "//            setOnProgressListener { progress ->\r\n//                Log.d(\"Backup\", \"Progress: $progress\")\r\n//            }\r\n            setOnSuccessListener {\r\n                Log.d(\"Backup\", \"Success\")\r\n            }\r\n            setOnFailureListener {\r\n                Log.d(\"Backup\", \"Failure\")\r\n            }\r\n            execute()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/339", "ground_truth": "            continuation.enqueue()\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLocalBackupFragment.kt"}}
{"prompt": "\n import java.io.File\nimport me.blog.korn123.easydiary.workers.BackupOperations\nimport me.blog.korn123.easydiary.R\nimport android.net.Uri\nimport android.app.Activity\nprivate fun importFullBackupFile(uri: Uri?) {\r\n        BackupOperations.Builder(requireActivity(), uri.toString(), BackupOperations.WORK_MODE_RECOVERY).build().apply {\r", "choices": [{"text": "           start()\r        }\r    }\n\n"}], "metadata": {"task_id": "aaf-easydiary/340", "ground_truth": "            continuation.enqueue()\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLocalBackupFragment.kt"}}
{"prompt": "\n private fun setupLauncher(taskFlag: Int, callback: () -> Unit) {\r", "choices": [{"text": "-    val intent = Intent(this, MainActivity::class.java)\r\n-    intent.putExtra(EXTRA_TASK_FLAG, taskFlag)\r\n-    startActivity(intent)\r\n-    finish()\r\n+    val intent = Intent(this, MainActivity::class.java)\r\n+    intent.putExtra(EXTRA_TASK_FLAG, taskFlag)\r\n+    startActivity(intent)\r\n+    finish()\r\n+    callback()\r\n }\r\n"}], "metadata": {"task_id": "aaf-easydiary/341", "ground_truth": "        mTaskFlag = taskFlag\r\n        callback()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLocalBackupFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/342", "ground_truth": "        mBinding = FragmentSettingsLockBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLockFragment.kt"}}
{"prompt": "\n import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        bindEvent()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "aaf-easydiary/343", "ground_truth": "        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLockFragment.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\noverride fun onResume() {\r\n        super.onResume()\r", "choices": [{"text": "}\r\noverride fun onPause() {\r\n        super.onPause()\r\n}\r\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n}\r\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\n        super.onRestoreInstanceState(savedInstanceState)\r\n}\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n}\r"}], "metadata": {"task_id": "aaf-easydiary/344", "ground_truth": "        updateFragmentUI(mBinding.root)\r\n        initPreference()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLockFragment.kt"}}
{"prompt": "\n private fun bindEvent() {\r\n        mBinding.run {\r\n            appLockSetting.setOnClickListener(mOnClickListener)\r", "choices": [{"text": "//            appLockSetting.setOnClickListener(mOnClickListener)\r\n            appLockSetting.setOnClickListener(mOnClickListener)\r\n            appLockSetting.setOnClickListener(mOnClickListener)\r\n            appLockSetting.setOnClickListener(mOnClickListener)\r\n            appLockSetting.setOnClickListener(mOnClickListener)\r\n            appLockSetting.setOnClickListener(mOnClickListener)\r\n            appLockSetting.setOnClickListener(mOnClickListener)\r\n            appLockSetting.setOnClickListener(mOnClickListener)\r\n            appLockSetting.setOnClickListener(mOnClickListener)\r\n            appLockSetting.setOnClickListener(mOnClickListener)\r\n            appLockSetting.setOnClickListener(mOnClickListener)\r\n            appLockSetting.setOnClickListener(mOnClickListener)\r\n            appLockSetting.setOnClickListener"}], "metadata": {"task_id": "aaf-easydiary/345", "ground_truth": "            fingerprint.setOnClickListener(mOnClickListener)\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLockFragment.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.extensions.config\nimport android.app.Activity\nprivate fun initPreference() {\r\n        mBinding.run {\r\n            appLockSettingSwitcher.isChecked = mActivity.config.aafPinLockEnable\r", "choices": [{"text": "//            appLockSettingSwitcher.setOnCheckedChangeListener { _, isChecked ->\r\n//                mActivity.config.aafPinLockEnable = isChecked\r\n//            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/346", "ground_truth": "            fingerprintSwitcher.isChecked = mActivity.config.fingerprintLockEnable\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsLockFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/347", "ground_truth": "        mBinding = FragmentSettingsScheduleBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsScheduleFragment.kt"}}
{"prompt": "\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nmMapView.onPause()\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nmMapView.onResume()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nmMapView.onDestroy()\r\n}\r\noverride fun onLowMemory() {\r\nsuper.onLowMemory()\r\nmMapView.onLowMemory()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/348", "ground_truth": "        super.onPause()\r\n        mActivity.changeDrawableIconColor(android.R.color.white, R.drawable.ic_delete_w)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsScheduleFragment.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\noverride fun onResume() {\r\n        super.onResume()\r", "choices": [{"text": "}\r\noverride fun onPause() {\r\n        super.onPause()\r\n}\r\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n}\r\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\n        super.onRestoreInstanceState(savedInstanceState)\r\n}\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n}\r"}], "metadata": {"task_id": "aaf-easydiary/349", "ground_truth": "        updateFragmentUI(mBinding.root)\r\n        mActivity.updateDrawableColorInnerCardView(R.drawable.ic_delete_w)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsScheduleFragment.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport androidx.core.content.ContextCompat\nimport android.graphics.drawable.Drawable\nimport android.app.Activity\nprivate fun getProperDayDrawable(selected: Boolean): Drawable {\r\n        val drawableId = if (selected) R.drawable.bg_circle_filled else R.drawable.bg_circle_stroke\r\n        val drawable = ContextCompat.getDrawable(mActivity, drawableId)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "aaf-easydiary/351", "ground_truth": "        drawable!!.applyColorFilter(mActivity.config.textColor)\r\n        return drawable\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SettingsScheduleFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?\r\n    ): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\n"}], "metadata": {"task_id": "aaf-easydiary/353", "ground_truth": "        mBinding = FragmentStockLineChartBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\StockLineChartFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/354", "ground_truth": "        super.onDestroy()\r\n        mCoroutineJob?.run { if (isActive) cancel() }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\StockLineChartFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/362", "ground_truth": "        super.onDestroy()\r\n        mCoroutineJob?.run { if (isActive) cancel() }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SymbolBarChartFragment.kt"}}
{"prompt": "\n import com.github.mikephil.charting.components.AxisBase\noverride fun getFormattedValue(value: Float, axis: AxisBase?): String {\r\n            return when  {\r\n                value > 0 && value <= mSequences.size -> mSymbolMap[mSequences[value.toInt() - 1]] ?: \"None\"\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/363", "ground_truth": "                else -> \"None\"\r\n            }\r\n        }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SymbolBarChartFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/364", "ground_truth": "        super.onDestroy()\r\n        mCoroutineJob?.run { if (isActive) cancel() }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SymbolHorizontalBarChartFragment.kt"}}
{"prompt": "\n import com.github.mikephil.charting.components.AxisBase\noverride fun getFormattedValue(value: Float, axis: AxisBase?): String {\r\n            return when  {\r\n                value > 0 && value <= mSequences.size -> mSymbolMap[mSequences[value.toInt() - 1]] ?: \"None\"\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/365", "ground_truth": "                else -> \"None\"\r\n            }\r\n        }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\SymbolHorizontalBarChartFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/366", "ground_truth": "        mBinding = FragmentWeightLineChartBinding.inflate(layoutInflater)\r\n        return mBinding.root\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\WeightLineChartFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/367", "ground_truth": "        super.onDestroy()\r\n        mCoroutineJob?.run { if (isActive) cancel() }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\WeightLineChartFragment.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.helper.AAF_TEST\nimport android.util.Log\nprivate fun fillValueForward(averageInfo: ArrayList<Float>) {\r\n        Log.i(AAF_TEST, \"\uc6d0\ubcf8 ${averageInfo.joinToString(\",\")}\")\r\n        averageInfo.forEachIndexed { index, fl ->\r\n            if (fl == 0f) {\r\n                up@ for (seq in index..averageInfo.size.minus(1)) {\r\n                    if (averageInfo[seq] > 0F) {\r\n                        averageInfo[index] = averageInfo[seq]\r\n                        break@up\r\n                    }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/368", "ground_truth": "                }\r\n            }\r\n        }\r\n        Log.i(AAF_TEST, \"\uc55e ${averageInfo.joinToString(\",\")}\")\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\WeightLineChartFragment.kt"}}
{"prompt": "\n private fun fillValueBackward(averageInfo: ArrayList<Float>) {\r\n        averageInfo.forEachIndexed { index, fl ->\r\n            if (fl == 0f) {\r\n                down@ for (seq in index.minus(1) downTo 0) {\r\n                    if (averageInfo[seq] > 0F) {\r\n                        averageInfo[index] = averageInfo[seq]\r\n                        break@down\r\n                    }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/369", "ground_truth": "                }\r\n            }\r\n        }\r\n        Log.i(AAF_TEST, \"\ub4a4 ${averageInfo.joinToString(\",\")}\")\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\WeightLineChartFragment.kt"}}
{"prompt": "\n override fun getFormattedValue(value: Float, axis: AxisBase): String {\r\n            val label = when (mChartMode == \"A\") {\r\n                true -> {\r\n                    val timeMillis: Long = mTimeMillisMap[value.toInt()] ?: 0\r\n                    xAxisTimeMillisToDate(timeMillis)\r\n                }\r\n                false -> {\r\n                    value.toInt().toString().padStart(2, '0')\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/370", "ground_truth": "                }\r\n\r\n            }\r\n            return label\r\n        }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\WeightLineChartFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/372", "ground_truth": "        super.onDestroy()\r\n        mCoroutineJob?.run { if (isActive) cancel() }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\WritingBarChartFragment.kt"}}
{"prompt": "\n private fun hourToItemNumber(hour: Int): Int = when (hour) {\r\n        in 1..3 -> 1\r\n        in 4..6 -> 2\r\n        in 7..9 -> 3\r\n        in 10..12 -> 4\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/373", "ground_truth": "        in 13..15 -> 5\r\n        in 16..18 -> 6\r\n        in 19..21 -> 7\r\n        else -> 8\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\fragments\\WritingBarChartFragment.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.models.Alarm\nimport me.blog.korn123.easydiary.extensions.openNotification\nimport me.blog.korn123.easydiary.extensions.exportRealmFile\nopen fun executeWork(alarm: Alarm) {\r\n        context.run {\r\n            when (alarm.workMode) {\r\n                Alarm.WORK_MODE_DIARY_BACKUP_LOCAL -> {\r\n                    exportRealmFile()\r\n                    openNotification(alarm)\r", "choices": [{"text": "//                    openNotification(alarm)\r\n                }\r\n                Alarm.WORK_MODE_DIARY_BACKUP_REMOTE -> {\r\n                    openNotification(alarm)\r\n                }\r\n                Alarm.WORK_MODE_DIARY_BACKUP_LOCAL_AND_REMOTE -> {\r\n                    exportRealmFile()\r\n                    openNotification(alarm)\r\n                }\r\n                Alarm.WORK_MODE_DIARY_BACKUP_REMOTE_AND_LOCAL -> {\r\n                    openNotification(alarm)\r\n                }\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/375", "ground_truth": "                }\r\n                Alarm.WORK_MODE_DIARY_WRITING -> openNotification(alarm)\r\n            }\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\BaseAlarmWorkExecutor.kt"}}
{"prompt": "\n override fun onCreate() {\r\n        super.onCreate()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/377", "ground_truth": "        Realm.init(this)\r\n        context = this\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryApplication.kt"}}
{"prompt": "\n private fun getInstance(): Realm {\r\n        if (mRealmInstance == null || mRealmInstance?.isClosed == true) {\r\n            mRealmInstance = Realm.getInstance(mDiaryConfig)\r", "choices": [{"text": "}\r\nreturn mRealmInstance!!\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/378", "ground_truth": "        }\r\n        return mRealmInstance!!\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt"}}
{"prompt": "\n import io.realm\nfun insertDiary(diary: Diary) {\r\n        getInstance().executeTransaction { realm ->\r\n            var sequence = 1\r\n            if (realm.where(Diary::class.java).count() > 0L) {\r\n                val number = realm.where(Diary::class.java).max(\"sequence\")\r\n                number?.let {\r\n                    sequence = it.toInt().plus(1)\r\n                }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/380", "ground_truth": "            }\r\n            diary.sequence = sequence\r\n            realm.insert(diary)\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.activities.BaseDiaryEditingActivity\nimport io.realm\nfun insertTemporaryDiary(diaryTemp: Diary) {\r\n        deleteTemporaryDiaryBy(diaryTemp.originSequence)\r\n        getInstance().executeTransaction { realm ->\r\n            if (diaryTemp.sequence == BaseDiaryEditingActivity.DIARY_SEQUENCE_INIT) {\r\n                realm.where(Diary::class.java).max(\"sequence\")?.let {\r\n                    diaryTemp.sequence = it.toInt().plus(1)\r", "choices": [{"text": "//                    Log.d(\"insertTemporaryDiary\", \"max sequence : ${it.toInt()}\")\r\n                }?: run {\r\n                    diaryTemp.sequence = 1\r\n//                    Log.d(\"insertTemporaryDiary\", \"max sequence : 1\")\r\n                }\r\n            }\r\n            realm.insertOrUpdate(diaryTemp)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/381", "ground_truth": "                }\r\n            }\r\n            realm.insert(diaryTemp)\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt"}}
{"prompt": "\n import io.realm\nfun findDiaryBy(sequence: Int, realmInstance: Realm = getInstance()): Diary? {\r", "choices": [{"text": "-    return realmInstance.where(Diary::class.java).equalTo(\"sequence\", sequence).findFirst()\r\n+    return realmInstance.where(Diary::class.java).equalTo(\"sequence\", sequence).findFirst()?: Diary()\r\n }\r\n \r\n fun findDiaryBy(sequence: Int, realmInstance: Realm = getInstance()): Diary? {\r\n-    return realmInstance.where(Diary::class.java).equalTo(\"sequence\", sequence).findFirst()\r\n+    return realmInstance.where(Diary::class.java).equalTo(\"sequence\", sequence).findFirst()"}], "metadata": {"task_id": "aaf-easydiary/384", "ground_truth": "        return realmInstance.where(Diary::class.java)\r\n                .equalTo(\"sequence\", sequence).findFirst()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt"}}
{"prompt": "\n import io.realm\nfun findDiaryBy(photoUri: String, realmInstance: Realm = getInstance()): Diary? {\r\n        val result = realmInstance.where(PhotoUri::class.java).contains(\"photoUri\", photoUri).findFirst()?.diary\r\n        var diary: Diary? = null\r\n        result?.let {\r\n            if (it.isValid && it.isNotEmpty()) {\r\n                diary = it.first()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/385", "ground_truth": "            }\r\n        }\r\n\r\n        return diary\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt"}}
{"prompt": "\n import io.realm\nfun deleteDiaryBy(sequence: Int, realmInstance: Realm = getInstance()) {\r\n        realmInstance.run {\r\n            where(Diary::class.java).equalTo(\"sequence\", sequence).findFirst()?.let {\r\n                beginTransaction()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/387", "ground_truth": "                it.deleteFromRealm()\r\n                commitTransaction()\r\n            }\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt"}}
{"prompt": "\n import io.realm\nfun deleteTemporaryDiaryBy(originSequence: Int, realmInstance: Realm = getInstance()) {\r\n        realmInstance.run {\r\n            where(Diary::class.java).equalTo(\"originSequence\", originSequence).findFirst()?.let {\r\n                beginTransaction()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/388", "ground_truth": "                it.deleteFromRealm()\r\n                commitTransaction()\r\n            }\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt"}}
{"prompt": "\n fun countDiaryAll(): Long {\r\n        return getInstance().where(Diary::class.java)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/389", "ground_truth": "                .equalTo(\"originSequence\", DIARY_ORIGIN_SEQUENCE_INIT)\r\n                .count()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt"}}
{"prompt": "\n fun deleteAlarmBy(sequence: Int) {\r\n        findAlarmBy(sequence)?.let {\r\n            getInstance().run {\r\n                beginTransaction()\r", "choices": [{"text": "//                delete(it)\r\n                commit()\r\n            }\r\n        }\r\n    }\r\n\r\n    fun deleteAllAlarms() {\r\n        getInstance().run {\r\n            beginTransaction()\r\n            delete(Alarm::class.java)\r\n            commit()\r\n        }\r\n    }\r\n\r\n    fun updateAlarm(alarm: Alarm) {\r\n        getInstance().run {\r\n            beginTransaction()\r\n            update(alarm)\r\n            commit()\r\n        }\r\n    }\r\n\r\n    fun updateAlarmBy(sequence: Int, alarm: Alarm) {\r\n        findAlarmBy(sequence)?.let {\r\n            getInstance().run {\r\n                beginTransaction()\r\n                update(alarm)\r\n                commit()\r\n            }\r\n        }\r\n    }\r\n\r\n   "}], "metadata": {"task_id": "aaf-easydiary/391", "ground_truth": "                it.deleteFromRealm()\r\n                commitTransaction()\r\n            }\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.extensions.config\nimport android.content.Context\nfun insertActionLog(actionLog: ActionLog, context: Context) {\r\n        if (context.config.enableDebugMode) {\r", "choices": [{"text": "//            val actionLog = ActionLog(\r\n//                action = action,\r\n//                time = System.currentTimeMillis(),\r\n//                user = user\r\n//            )\r\n            val actionLogDao = context.actionLogDao()\r\n            actionLogDao.insert(actionLog)\r\n        }\r\n    }<file_sep>/app/src/main/java/me/blog/korn123/easydiary/extensions/Context.kt\npackage me.blog.korn123.easydiary.extensions\n\nimport android.content.Context\nimport me.blog.korn"}], "metadata": {"task_id": "aaf-easydiary/394", "ground_truth": "            insertActionLog(actionLog)\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt"}}
{"prompt": " import io.realm\nval mDiaryConfig RealmConfiguration\nvar mRealmInstance Realm?\nfun deleteActionLogAll() {\r\n        getInstance().executeTransaction { realm ->\r", "choices": [{"text": "realm.deleteAll()\r\n        }\r\n}\n"}], "metadata": {"task_id": "aaf-easydiary/395", "ground_truth": "            realm.where(ActionLog::class.java).findAll().deleteAllFromRealm()\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt"}}
{"prompt": "\n fun deleteDDayBy(sequence: Int) {\r\n        findDDayBy(sequence)?.let {\r\n            getInstance().run {\r\n                beginTransaction()\r", "choices": [{"text": "//                delete(it)\r\n                commit()\r\n            }\r\n        }\r\n    }\r\n\r\n    fun deleteAllDDay() {\r\n        getInstance().run {\r\n            beginTransaction()\r\n            delete(DDay::class.java)\r\n            commit()\r\n        }\r\n    }\r\n\r\n    fun deleteAllDDayBy(sequence: Int) {\r\n        findDDayBy(sequence)?.let {\r\n            getInstance().run {\r\n                beginTransaction()\r\n//                delete(it)\r\n                commit()\r\n            }\r\n        }\r\n    }\r\n\r\n    fun findDDayBy(sequence: Int): DDay? {\r\n        return getInstance().run {\r\n            val query = select(DDay"}], "metadata": {"task_id": "aaf-easydiary/397", "ground_truth": "                it.deleteFromRealm()\r\n                commitTransaction()\r\n            }\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\EasyDiaryDbHelper.kt"}}
{"prompt": "\n fun determineFiles(targetDirectoryName: String) {\r", "choices": [{"text": "-    val targetDirectory = File(targetDirectoryName)\r\n-    val files = targetDirectory.listFiles()\r\n-    if (files!= null) {\r\n-        for (file in files) {\r\n-            if (file.isDirectory) {\r\n-                determineFiles(file.absolutePath)\r\n-            } else {\r\n-                val fileName = file.name\r\n-                if (fileName.endsWith(\".kt\") || fileName.endsWith(\".java\")) {\r\n-                    val fileContent = file.readText()\r\n-                    val fileContentWithout"}], "metadata": {"task_id": "aaf-easydiary/403", "ground_truth": "        this.mRootDirectoryName = targetDirectoryName\r\n        determineFiles(targetDirectoryName, null)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\ZipHelper.kt"}}
{"prompt": "\n import java.util.zip.ZipInputStream\nimport me.blog.korn123.easydiary.R\nimport android.net.Uri\nprivate fun countFileEntry(uri: Uri?): Int {\r\n        val uriStream = context.contentResolver.openInputStream(uri!!)\r\n        var count = 0\r\n        try {\r\n            val zipInputStream = ZipInputStream(uriStream)\r\n            while (zipInputStream.nextEntry != null && isOnProgress) {\r\n                zipInputStream.closeEntry()\r\n                count++\r\n            }\r\n            zipInputStream.close()\r\n            uriStream?.close()\r", "choices": [{"text": "\n import java.util.zip.ZipInputStream\nimport me.blog.korn123.easydiary.R\nimport android.net.Uri\nprivate fun countFileEntry(uri: Uri?): Int {\r\n        val uriStream = context.contentResolver.openInputStream(uri!!)\r\n        var count = 0\r\n        try {\r\n            val zipInputStream = ZipInputStream(uriStream)\r\n            while (zipInputStream.nextEntry!= null && isOnProgress) {\r\n                zipInputStream.closeEntry()\r\n                count++\r\n            }\r\n            zipInputStream.close()\r\n            uriStream?.close()\r\n//            Log.d(\"countFileEntry\", \"count: $count\")\r\n        } catch (e: IOException) {\r\n            e.printStackTrace()\r\n        }\r\n        return count\r\n    }\n\r\nprivate fun getFileName(uri: Uri?): String {\r\n        val uriStream = context.contentResolver.openInputStream(uri!!)\r\n        var fileName = \"\"\r\n        try {\r\n            val zipInputStream = ZipInputStream(uriStream)\r\n            while (zipInputStream.nextEntry!= null && isOnProgress) {\r\n                fileName = zipInputStream.nextEntry.name\r\n                zipInputStream.closeEntry()\r\n            }\r\n            zipInputStream.close()"}], "metadata": {"task_id": "aaf-easydiary/404", "ground_truth": "        } catch (e: IOException) {\r\n            e.printStackTrace()\r\n        }\r\n        return count\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\ZipHelper.kt"}}
{"prompt": "\n fun printFileNames() {\r\n        for (fileName in mFileNames) {\r", "choices": [{"text": "//            Log.d(TAG, \"File name: \" + fileName)\r\n        }\r\n    }\r\n}\r\n<file_sep>/app/src/main/java/com/example/android/fileexplorer/MainActivity.kt\npackage com.example.android.fileexplorer\r\n\r\nimport android.Manifest\r\nimport android.content.pm.PackageManager\r\nimport android.os.Bundle\r\nimport android.support.v4.app.ActivityCompat\r\nimport android.support.v4.content.ContextCompat\r\nimport android.support.v7.app.AppCompatActivity\r\nimport android.util"}], "metadata": {"task_id": "aaf-easydiary/405", "ground_truth": "            Log.i(\"aaf\", fileName)\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\ZipHelper.kt"}}
{"prompt": "\n import java.util.zip.ZipEntry\nimport java.nio.file.attribute.BasicFileAttributes\nimport java.nio.file.Path\nimport java.nio.file.Files\nimport java.nio.file.FileVisitResult\nimport java.io\noverride fun visitFile(file: Path, attributes: BasicFileAttributes): FileVisitResult {\r\n        try {\r\n            val targetFile = sourceDir.relativize(file)\r\n            zipOutputStream.putNextEntry(ZipEntry(targetFile.toString()))\r\n            val bytes = Files.readAllBytes(file)\r\n            zipOutputStream.write(bytes, 0, bytes.size)\r\n            zipOutputStream.closeEntry()\r\n\r\n        } catch (ex: IOException) {\r", "choices": [{"text": "//            ex.printStackTrace()\r\n        }\r\n        return FileVisitResult.CONTINUE\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/406", "ground_truth": "            System.err.println(ex)\r\n        }\r\n\r\n        return FileVisitResult.CONTINUE\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\ZipHelperWithVisitor.kt"}}
{"prompt": "\n fun closeOutputStream() {\r\n        try {\r\n           zipOutputStream.close()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/407", "ground_truth": "        } catch (e: IOException) {\r\n            e.printStackTrace()\r\n        }\r\n\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\helper\\ZipHelperWithVisitor.kt"}}
{"prompt": "\n fun photoUrisWithEncryptionPolicy(): List<PhotoUri>? = when (isEncrypt) {\r", "choices": [{"text": "-    true -> listOf(PhotoUri(uri = \"https://example.com/image.jpg\", encryptionPolicy = EncryptionPolicy.ENCRYPTED))\r\n+    true -> listOf(PhotoUri(uri = \"https://example.com/image.jpg\", encryptionPolicy = EncryptionPolicy.ENCRYPTED, encryptionKey = \"1234567890\"))\r\n     false -> null\r\n }\r\n \r\n fun photoUrisWithEncryptionPolicyAndEncryptionKey(): List<PhotoUri>? = when (isEncrypt) {\r\n-    true -> listOf(PhotoUri(uri = \"https://example"}], "metadata": {"task_id": "aaf-easydiary/408", "ground_truth": "        true -> { photoUris?.map { PhotoUri(\"\") } }\r\n        false -> photoUris\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\models\\Diary.kt"}}
{"prompt": "\n import android.os.Build\nfun setRoundCorner(radius: Int) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r", "choices": [{"text": "//            val drawable = GradientDrawable()\r\n//            drawable.shape = GradientDrawable.RECTANGLE\r\n//            drawable.cornerRadius = radius.toFloat()\r\n//            drawable.setColor(Color.parseColor(\"#ffffff\"))\r\n//            view.background = drawable\r\n        } else {\r\n            val drawable = GradientDrawable()\r\n            drawable.shape = GradientDrawable.RECTANGLE\r\n            drawable.cornerRadius = radius.toFloat()\r\n            drawable.setColor(Color.parseColor(\"#ffffff\"))\r\n            view.background = drawable\r\n        }\r\n    }\n"}], "metadata": {"task_id": "aaf-easydiary/413", "ground_truth": "            ViewStyleSetter.applyRoundCorner(this, radius.toFloat())\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\CornerImageView.kt"}}
{"prompt": "\n fun setColors(textColor: Int, accentColor: Int, backgroundColor: Int) {\r\n//        val drawable = background as GradientDrawable\r", "choices": [{"text": "//        drawable.colors = intArrayOf(backgroundColor, accentColor)\r\n//        drawable.cornerRadius = 10f\r\n//        setBackgroundDrawable(drawable)\r\n//        setTextColor(textColor)\r\n//    }\r\n}<file_sep>/app/src/main/java/com/example/myapplication/ui/main/MainViewModel.kt\npackage com.example.myapplication.ui.main\r\n\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.ViewModel\r\nimport com.example.myapplication.data"}], "metadata": {"task_id": "aaf-easydiary/414", "ground_truth": "//        drawable.setColor(backgroundColor)\r\n        setBackgroundColor(backgroundColor)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\DiaryCardLayout.kt"}}
{"prompt": "\n import android.view.MotionEvent\noverride fun onInterceptTouchEvent(ev: MotionEvent): Boolean {\r\n        if (mCallbacks != null) {\r\n            when (ev.actionMasked) {\r\n                MotionEvent.ACTION_DOWN -> {\r\n                    mDownPositionY = ev.y\r\n                    run {\r\n                        mDragging = true\r\n                        mFirstScroll = mDragging\r\n                    }\r\n                    mCallbacks!!.onDownMotionEvent()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/417", "ground_truth": "                }\r\n            }\r\n        }\r\n        return super.onInterceptTouchEvent(ev)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\FastScrollObservableRecyclerView.kt"}}
{"prompt": "\n import android.graphics.Canvas\noverride fun onDraw(canvas: Canvas?) {\r", "choices": [{"text": "super.onDraw(canvas)\r\ncanvas?.drawBitmap(bitmap, 0f, 0f, paint)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/420", "ground_truth": "        super.onDraw(canvas)\r\n        if (fixedAppcompatPadding) useCompatPadding = true\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\FixedCardView.kt"}}
{"prompt": "\n fun setColors(textColor: Int, accentColor: Int, backgroundColor: Int) {\r", "choices": [{"text": "//     this.textColor = textColor\r\n//     this.accentColor = accentColor\r\n//     this.backgroundColor = backgroundColor\r\n// }\r\n"}], "metadata": {"task_id": "aaf-easydiary/421", "ground_truth": "        setTextColor(textColor)\r\n        setLinkTextColor(accentColor)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\FixedTextView.kt"}}
{"prompt": "\n import android.view.View\nfun setCustomTabView(layoutResId: Int, textViewId: Int) {\r", "choices": [{"text": "val customTabView = LayoutInflater.from(this).inflate(layoutResId, null)\r\nval textView = customTabView.findViewById<View>(textViewId) as TextView\r\ntextView.text = \"Custom Tab\"\r\ntabLayout.setCustomView(customTabView)\r\n}\r\n"}], "metadata": {"task_id": "aaf-easydiary/422", "ground_truth": "        mTabViewLayoutId = layoutResId\r\n        mTabViewTextViewId = textViewId\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\SlidingTabLayout.kt"}}
{"prompt": "\n override fun onAttachedToWindow() {\r\n        super.onAttachedToWindow()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "aaf-easydiary/424", "ground_truth": "\r\n        if (mViewPager != null) {\r\n            scrollToTab(mViewPager!!.currentItem, 0)\r\n        }\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\SlidingTabLayout.kt"}}
{"prompt": "\n import android.view.View\noverride fun onClick(v: View) {\r\n            for (i in 0 until mTabStrip.getChildCount()) {\r\n                if (v === mTabStrip.getChildAt(i)) {\r", "choices": [{"text": "//                    mViewPager.setCurrentItem(i);\r\n                    break;\r\n                }\r\n            }\r\n        }\n"}], "metadata": {"task_id": "aaf-easydiary/427", "ground_truth": "                    mViewPager!!.currentItem = i\r\n                    return\r\n                }\r\n            }\r\n        }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\SlidingTabLayout.kt"}}
{"prompt": " import android.graphics.Color\nvar mCustomTabColorizer SlidingTabLayout?.TabColorizer?\nval mDefaultTabColorizer SimpleTabColorizer\nval mSelectedIndicatorPaint Paint\nfun setCustomTabColorizer(customTabColorizer: SlidingTabLayout.TabColorizer) {\r", "choices": [{"text": "mCustomTabColorizer = customTabColorizer\r\n}\n"}], "metadata": {"task_id": "aaf-easydiary/428", "ground_truth": "        mCustomTabColorizer = customTabColorizer\r\n        invalidate()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\SlidingTabStrip.kt"}}
{"prompt": "\n import android.graphics.Color\nfun setSelectedIndicatorColors(vararg colors: Int) {\r\n        // Make sure that the custom colorizer is removed\r\n        mCustomTabColorizer = null\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "aaf-easydiary/429", "ground_truth": "        mDefaultTabColorizer.setIndicatorColors(*colors)\r\n        invalidate()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\SlidingTabStrip.kt"}}
{"prompt": " import android.graphics.Color\nvar mDividerColors IntArray?\nvar mIndicatorColors IntArray?\nvar mCustomTabColorizer SlidingTabLayout?.TabColorizer?\nfun setDividerColors(vararg colors: Int) {\r\n        // Make sure that the custom colorizer is removed\r\n        mCustomTabColorizer = null\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "aaf-easydiary/430", "ground_truth": "        mDefaultTabColorizer.setDividerColors(*colors)\r\n        invalidate()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\SlidingTabStrip.kt"}}
{"prompt": "\n fun onViewPagerPageChanged(position: Int, positionOffset: Float) {\r\n        mSelectedPosition = position\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "aaf-easydiary/431", "ground_truth": "        mSelectionOffset = positionOffset\r\n        invalidate()\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\views\\SlidingTabStrip.kt"}}
{"prompt": "\n import android.content.Context\nimport android.appwidget.AppWidgetManager\noverride fun onUpdate(context: Context, appWidgetManager: AppWidgetManager, appWidgetIds: IntArray) {\r", "choices": [{"text": "// There may be multiple widgets active, so update all of them\n for (appWidgetId in appWidgetIds) {\n updateAppWidget(context, appWidgetManager, appWidgetId)\n }\n }\n\n"}], "metadata": {"task_id": "aaf-easydiary/433", "ground_truth": "        super.onUpdate(context, appWidgetManager, appWidgetIds)\r\n        performUpdate(context)\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\widgets\\DiaryMainWidget.kt"}}
{"prompt": "\n import me.blog.korn123.easydiary.R\nimport com.simplemobiletools.commons.helpers.isOreoPlus\nimport android.content.Context\nprivate fun getProperLayout(context: Context) = if (isOreoPlus()) {\r\n        R.layout.widget_diary_main\r", "choices": [{"text": "} else {\r\n        R.layout.widget_diary_main_old\r\n}\n\nclass DiaryWidget : AppWidgetProvider() {\n\n    override fun onUpdate(context: Context, appWidgetManager: AppWidgetManager, appWidgetIds: IntArray) {\n        // There may be multiple widgets active, so update all of them\n        for (appWidgetId in appWidgetIds) {\n            updateAppWidget(context, appWidgetManager, appWidgetId)\n        }\n    }\n\n    override fun onEnabled(context: Context) {\n        // Enter relevant functionality for when the first widget is created\n    }\n\n   "}], "metadata": {"task_id": "aaf-easydiary/435", "ground_truth": "    } else {\r\n        R.layout.widget_diary_main\r\n    }", "fpath": "aaf-easydiary\\app\\src\\main\\java\\me\\blog\\korn123\\easydiary\\widgets\\DiaryMainWidget.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nprivate fun initUser() {\r\n        viewModelScope.launch {\r\n            environment.getUser()\r", "choices": [{"text": "}\r\n}\n"}], "metadata": {"task_id": "Compose-ToDo/0", "ground_truth": "                .collect { setState { copy(user = it) } }\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\dashboard\\ui\\DashboardViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nprivate fun initToDoTaskDiff() {\r\n        viewModelScope.launch {\r\n            environment.listenToDoTaskDiff()\r", "choices": [{"text": "//            environment.listenToDoTaskDiff().collect {\r\n//                when (it) {\r\n//                    is ToDoTaskDiff.Added -> {\r\n//                        Log.d(\"ToDoTaskDiff\", \"Added\")\r\n//                        Log.d(\"ToDoTaskDiff\", it.toDoTask.toString())\r\n//                    }\r\n//                    is ToDoTaskDiff.Removed -> {\r\n//                        Log.d(\"ToDoTaskDiff\", \"Removed\")\r\n//                        Log.d(\"ToDoTaskDiff\", it.toDoTask.toString())\r\n//                    }\r"}], "metadata": {"task_id": "Compose-ToDo/1", "ground_truth": "                .collect()\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\dashboard\\ui\\DashboardViewModel.kt"}}
{"prompt": "\n import androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun Host(content: @Composable () -> Unit) {\r\n    val viewModel = hiltViewModel<HostViewModel>()\r\n    val state by viewModel.state.collectAsStateWithLifecycle()\r", "choices": [{"text": "}\r\n\n"}], "metadata": {"task_id": "Compose-ToDo/2", "ground_truth": "\r\n    Theme(theme = state.theme, content = content)\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\host\\ui\\HostScreen.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nprivate fun initTheme() {\r\n        viewModelScope.launch {\r\n            environment.getTheme()\r", "choices": [{"text": "}\r\n}\n"}], "metadata": {"task_id": "Compose-ToDo/3", "ground_truth": "                .collect { setState { copy(theme = it) } }\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\host\\ui\\HostViewModel.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.foundation.uicomponent.PgModalLayout\nimport com.wisnu.kurniawan.composetodolist.foundation.uicomponent.PgModalBackHeader\nimport com.wisnu.kurniawan.composetodolist.R\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.lazy.items\n\r\n@Composable\r\nprivate fun LanguageScreen(\r\n    items: List<LanguageItem>,\r\n    clickItem: (LanguageItem) -> Unit,\r\n    onClickBack: () -> Unit\r\n) {\r\n    PgModalLayout(\r\n        title = {\r\n            PgModalBackHeader(\r\n                text = stringResource(R.string.setting_language),\r\n                onClickBack = onClickBack\r\n            )\r\n        },\r\n        content = {\r\n            items(items) { item ->\r\n                LanguageItem(\r\n                    onClick = { clickItem(item) },\r\n                    item = item\r\n                )\r", "choices": [{"text": "//                LanguageItem(\r\n//                    onClick = { clickItem(item) },\r\n//                    item = item\r\n//                )\r\n            }\r\n        }\r\n    )\r\n}\r\n<file_sep>/app/src/main/java/com/wisnu/kurniawan/composetodolist/foundation/uicomponent/PgModalBackHeader.kt\npackage com.wisnu.kurniawan.composetodolist.foundation.uicomponent\n\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\n"}], "metadata": {"task_id": "Compose-ToDo/4", "ground_truth": "                Spacer(Modifier.height(8.dp))\r\n            }\r\n        }\r\n    )\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\localized\\setting\\ui\\LocalizedSettingScreen.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.Language\nfun List<LanguageItem>.select(language: Language): List<LanguageItem> {\r\n    return map {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/8", "ground_truth": "        it.copy(applied = it.language == language)\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\localized\\setting\\ui\\LocalizedSettingViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nprivate fun onUserNameChange(email: String) {\r\n        viewModelScope.launch {\r", "choices": [{"text": "//            val user = repository.getUser(email)\r\n//            _user.value = user\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/13", "ground_truth": "            setState { copy(email = email, showEmailInvalidError = false) }\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\login\\ui\\LoginViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nprivate fun onPasswordChange(password: String) {\r\n        viewModelScope.launch {\r", "choices": [{"text": "//            val result = repository.updatePassword(password)\r\n//            if (result) {\r\n//                _passwordChange.value = true\r\n//            } else {\r\n//                _passwordChange.value = false\r\n//            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/14", "ground_truth": "            setState { copy(password = password) }\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\login\\ui\\LoginViewModel.kt"}}
{"prompt": "\n override suspend fun logout() {\r", "choices": [{"text": "//     TODO(\"Not yet implemented\")\r\n }\r\n}\r\n"}], "metadata": {"task_id": "Compose-ToDo/15", "ground_truth": "        credentialProvider.setCredential(Credential(token = \"\"))\r\n        userProvider.setUser(User(email = \"\"))\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\logout\\data\\LogoutEnvironment.kt"}}
{"prompt": "\n override fun dispatch(action: LogoutAction) {\r\n        when (action) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/16", "ground_truth": "            is LogoutAction.ClickLogout -> logout()\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\logout\\ui\\LogoutViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nprivate fun logout() {\r\n        viewModelScope.launch {\r\n            environment.logout()\r", "choices": [{"text": "//            val intent = Intent(this@MainActivity, LoginActivity::class.java)\r\n//            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\r\n//            startActivity(intent)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/17", "ground_truth": "            setEffect(LogoutEffect.NavigateToSplash)\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\logout\\ui\\LogoutViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nprivate fun initUser() {\r\n        viewModelScope.launch {\r\n            environment.getUser()\r", "choices": [{"text": "}\r\n}\n"}], "metadata": {"task_id": "Compose-ToDo/18", "ground_truth": "                .collect { setState { copy(user = it) } }\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\logout\\ui\\LogoutViewModel.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.foundation.uicomponent.PgModalCell\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nprivate fun SettingItem(\r\n    onClick: () -> Unit,\r\n    title: String,\r\n) {\r\n    PgModalCell(\r", "choices": [{"text": "//        modifier = Modifier.fillMaxWidth(),\r\n        title = title,\r\n        onClick = onClick,\r\n    )\r\n}\r\n<file_sep>/app/src/main/java/com/wisnu/kurniawan/composetodolist/foundation/uicomponent/PgModalCell.kt\npackage com.wisnu.kurniawan.composetodolist.foundation.uicomponent\n\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx"}], "metadata": {"task_id": "Compose-ToDo/19", "ground_truth": "        onClick = onClick,\r\n        text = title,\r\n        color = MaterialTheme.colorScheme.surfaceVariant\r\n    )\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\setting\\ui\\SettingScreen.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.Theme\noverride fun dispatch(action: ThemeAction) {\r\n        when (action) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/21", "ground_truth": "            is ThemeAction.SelectTheme -> applyTheme(action.selected)\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\theme\\ui\\ThemeViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.wisnu.kurniawan.composetodolist.model.Theme\nimport androidx.lifecycle.viewModelScope\nprivate fun applyTheme(item: ThemeItem) {\r\n        viewModelScope.launch {\r", "choices": [{"text": "//            val theme = Theme.values()[item.theme]\r\n//            ThemeManager.applyTheme(theme)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/23", "ground_truth": "            environment.setTheme(item.theme)\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\theme\\ui\\ThemeViewModel.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.Theme\nfun List<ThemeItem>.select(theme: Theme): List<ThemeItem> {\r\n    return map {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/24", "ground_truth": "        it.copy(applied = it.theme == theme)\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\theme\\ui\\ThemeViewModel.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoList\nfun List<ToDoList>.toItemAllState(): List<ItemAllState> {\r\n    val data = mutableListOf<ItemAllState>()\r\n\r\n    forEach {\r\n        data.add(ItemAllState.List(it))\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/26", "ground_truth": "        data.addAll(it.tasks.toItemListAllState(it))\r\n    }\r\n\r\n    return data\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\all\\ui\\AllViewModel.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoStatus\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nfun List<ToDoList>.filterCompleteTask(shouldFilter: Boolean): List<ToDoList> {\r\n    return if (shouldFilter) {\r\n        this.map {\r\n            it.copy(tasks = it.tasks.filter { task -> task.status != ToDoStatus.COMPLETE })\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/28", "ground_truth": "        }.filter { it.tasks.isNotEmpty() }\r\n    } else {\r\n        this\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\all\\ui\\AllViewModel.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoTask\noverride suspend fun createTask(taskName: String, listId: String) {\r\n        val currentDate = dateTimeProvider.now()\r\n\r\n        toDoTaskProvider.insertTask(\r\n            listOf(\r\n                ToDoTask(\r\n                    id = idProvider.generate(),\r\n                    name = taskName,\r\n                    createdAt = currentDate,\r\n                    updatedAt = currentDate\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/31", "ground_truth": "                )\r\n            ),\r\n            listId\r\n        )\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\detail\\data\\ListDetailEnvironment.kt"}}
{"prompt": "\n override fun dispatch(action: ListDetailAction) {\r\n        when (action) {\r\n            is ListDetailAction.ListAction -> handleListAction(action)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/34", "ground_truth": "            is ListDetailAction.TaskAction -> handleTaskAction(action)\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\detail\\ui\\ListDetailViewModel.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoList\nprivate fun ListDetailState.setAllState(list: ToDoList) = copy(\r\n        list = list,\r", "choices": [{"text": ")\n"}], "metadata": {"task_id": "Compose-ToDo/35", "ground_truth": "        colors = colors.select(list.color.toColor()),\r\n        newListName = list.name\r\n    )", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\detail\\ui\\ListDetailViewModel.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoRepeat\nimport com.wisnu.kurniawan.composetodolist.features.todo.step.ui.ToDoRepeatItem\nfun List<ToDoRepeatItem>.select(repeat: ToDoRepeat): List<ToDoRepeatItem> {\r\n    return map {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/36", "ground_truth": "        it.copy(applied = it.repeat == repeat)\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\detail\\ui\\ListDetailViewModel.kt"}}
{"prompt": "\n import androidx.compose.ui.graphics.Color\nfun List<ColorItem>.select(color: Color): List<ColorItem> {\r\n    return map {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/37", "ground_truth": "        it.copy(applied = it.color == color)\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\detail\\ui\\ListDetailViewModel.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.foundation.uicomponent.PgModalTitle\nimport com.wisnu.kurniawan.composetodolist.R\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.icons.rounded.List\n\r\n@Composable\r\nfun UpdateGroupListScreen(\r\n    viewModel: UpdateGroupListViewModel,\r\n    onSubmit: () -> Unit,\r\n    onSkip: () -> Unit,\r\n) {\r\n    val state by viewModel.state.collectAsStateWithLifecycle()\r\n\r\n    UpdateGroupListScreen(\r\n        state = state,\r\n        title = {\r\n            PgModalTitle(\r\n                text = stringResource(R.string.todo_update_group_list)\r\n            )\r\n        },\r\n        onItemChange = { viewModel.dispatch(UpdateGroupListAction.Change(it)) },\r\n        onSubmit = {\r\n            viewModel.dispatch(UpdateGroupListAction.Submit)\r", "choices": [{"text": "//            onSubmit()\r\n        },\r\n        onSkip = {\r\n            viewModel.dispatch(UpdateGroupListAction.Skip)\r\n//            onSkip()\r\n        },\r\n        onBack = {\r\n            viewModel.dispatch(UpdateGroupListAction.Back)\r\n        }\r\n    )\r\n}<file_sep>/app/src/main/java/com/wisnu/kurniawan/composetodolist/ui/screen/todo/TodoListScreen.kt\npackage com.wisnu.kurniawan.composetodolist.ui.screen.todo\n\nimport androidx.compose.foundation.layout."}], "metadata": {"task_id": "Compose-ToDo/40", "ground_truth": "            onSubmit()\r\n        },\r\n        onSkip = onSkip\r\n    )\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\grouplist\\ui\\UpdateGroupListScreen.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.GroupIdWithList\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoGroupDb\nfun List<GroupIdWithList>.update(item: GroupIdWithList, groupId: String): List<GroupIdWithList> {\r\n    return map {\r\n        if (it.list.id == item.list.id) {\r\n            val newGroupId = if (item.isUngroup()) {\r\n                groupId\r\n            } else {\r\n                ToDoGroupDb.DEFAULT_ID\r\n            }\r\n\r\n            it.copy(\r\n                groupId = newGroupId\r\n            )\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/41", "ground_truth": "        } else {\r\n            it\r\n        }\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\grouplist\\ui\\UpdateGroupListViewModel.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.R\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.lazy.items\n\r\n@Composable\r\nfun GroupMenuScreen(\r\n    viewModel: GroupMenuViewModel,\r\n    onAddRemoveClick: () -> Unit,\r\n    onDeleteClick: () -> Unit,\r\n    onRenameClick: () -> Unit,\r\n) {\r\n    val state by viewModel.state.collectAsStateWithLifecycle()\r\n\r\n    GroupMenuScreen(\r\n        items = state.items,\r\n        onAddRemoveClick = onAddRemoveClick,\r\n        onDeleteClick = {\r\n            onDeleteClick()\r", "choices": [{"text": "//            viewModel.deleteGroup(it)\r\n        },\r\n        onRenameClick = onRenameClick,\r\n    )\r\n}\r\n\r\n@Composable\r\nfun GroupMenuScreen(\r\n    items: List<GroupMenuViewModel.Item>,\r\n    onAddRemoveClick: () -> Unit,\r\n    onDeleteClick: (GroupMenuViewModel.Item) -> Unit,\r\n    onRenameClick: (GroupMenuViewModel.Item) -> Unit,\r\n) {\r\n    Column(\r\n        modifier = Modifier\r\n           .fillMaxSize()\r\n           .background(Color.White)\r\n           .padding(16.dp),\r\n    ) {\r\n        Row(\r\n            modifier"}], "metadata": {"task_id": "Compose-ToDo/43", "ground_truth": "            viewModel.dispatch(GroupMenuAction.ClickDelete)\r\n        },\r\n        onRenameClick = onRenameClick\r\n    )\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\groupmenu\\ui\\GroupMenuScreen.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.foundation.uicomponent.PgModalCell\nimport com.wisnu.kurniawan.composetodolist.foundation.uicomponent.PgIcon\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nprivate fun GroupMenuItem(\r\n    onClick: () -> Unit,\r\n    title: String,\r\n    imageVector: ImageVector,\r\n    color: Color,\r\n    enabled: Boolean\r\n) {\r\n    PgModalCell(\r\n        onClick = onClick,\r\n        text = title,\r\n        color = color,\r\n        leftIcon = @Composable {\r\n            PgIcon(\r\n                imageVector = imageVector\r", "choices": [{"text": ",\r\n                color = color\r\n            )\r\n        },\r\n        enabled = enabled\r\n    )\r\n}\r\n<file_sep>/app/src/main/java/com/wisnu/kurniawan/composetodolist/foundation/uicomponent/PgModalCell.kt\npackage com.wisnu.kurniawan.composetodolist.foundation.uicomponent\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx"}], "metadata": {"task_id": "Compose-ToDo/44", "ground_truth": "            )\r\n        },\r\n        enabled = enabled\r\n    )\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\groupmenu\\ui\\GroupMenuScreen.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.flow.collect\nimport androidx.lifecycle.viewModelScope\nimport androidx.compose.material.icons.rounded.Delete\noverride fun dispatch(action: GroupMenuAction) {\r\n        when (action) {\r\n            GroupMenuAction.ClickDelete -> {\r\n                viewModelScope.launch {\r\n                    if (!groupId.isNullOrBlank()) {\r\n                        environment.deleteGroup(groupId).collect()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/45", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\groupmenu\\ui\\GroupMenuViewModel.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.R\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\nimport androidx.compose.material.icons.rounded.CalendarToday\nimport androidx.compose.material.icons.Icons\n\r\n@Composable\r\nprivate fun ScheduledTodayCell(\r\n    modifier: Modifier,\r\n    onClick: () -> Unit,\r\n    currentDate: String,\r\n    scheduledTaskCount: String,\r\n    isSelected: Boolean\r\n) {\r\n    OverallTaskCell(\r\n        modifier = modifier,\r\n        taskCount = scheduledTaskCount,\r\n        title = stringResource(R.string.todo_today),\r\n        iconText = currentDate,\r\n        icon = Icons.Rounded.CalendarToday,\r", "choices": [{"text": "//        icon = Icons.Rounded.CalendarToday,\r\n        onClick = onClick,\r\n        isSelected = isSelected\r\n    )\r\n}\r\n<file_sep>/app/src/main/java/com/wisnu/kurniawan/composetodolist/ui/theme/Color.kt\npackage com.wisnu.kurniawan.composetodolist.ui.theme\n\nimport androidx.compose.ui.graphics.Color\n\nval Purple200 = Color(0xFFBB86FC)\nval Purple500 = Color(0xFF620"}], "metadata": {"task_id": "Compose-ToDo/47", "ground_truth": "        iconColor = ListRed,\r\n        onClick = onClick,\r\n        isSelected = isSelected\r\n    )\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\main\\ui\\ToDoMainScreen.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.R\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.icons.rounded.Event\nimport androidx.compose.material.icons.Icons\n\r\n@Composable\r\nprivate fun ScheduledCell(\r\n    modifier: Modifier,\r\n    onClick: () -> Unit,\r\n    scheduledTaskCount: String,\r\n    isSelected: Boolean\r\n) {\r\n    OverallTaskCell(\r\n        modifier = modifier,\r\n        taskCount = scheduledTaskCount,\r\n        title = stringResource(R.string.todo_scheduled),\r\n        icon = Icons.Rounded.Event,\r", "choices": [{"text": "//        iconTint = if (isSelected) Color.White else Color.Black,\r\n        onClick = onClick,\r\n        isSelected = isSelected\r\n    )\r\n}<file_sep>/app/src/main/java/com/wisnu/kurniawan/composetodolist/ui/theme/Color.kt\npackage com.wisnu.kurniawan.composetodolist.ui.theme\n\nimport androidx.compose.ui.graphics.Color\n\nval Purple200 = Color(0xFFBB86FC)\nval Purple500 = Color("}], "metadata": {"task_id": "Compose-ToDo/48", "ground_truth": "        iconColor = ListBlue,\r\n        onClick = onClick,\r\n        isSelected = isSelected\r\n    )\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\main\\ui\\ToDoMainScreen.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.R\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.icons.rounded.Inbox\nimport androidx.compose.material.icons.Icons\n\r\n@Composable\r\nprivate fun AllTaskCell(\r\n    modifier: Modifier,\r\n    onClick: () -> Unit,\r\n    allTaskCount: String,\r\n    isSelected: Boolean\r\n) {\r\n    OverallTaskCell(\r\n        modifier = modifier,\r\n        taskCount = allTaskCount,\r\n        title = stringResource(R.string.todo_all),\r\n        icon = Icons.Rounded.Inbox,\r", "choices": [{"text": "//        icon = Icons.Rounded.Inbox,\r\n        onClick = onClick,\r\n        isSelected = isSelected\r\n    )\r\n}\r\n<file_sep>/app/src/main/java/com/wisnu/kurniawan/composetodolist/ui/theme/Color.kt\npackage com.wisnu.kurniawan.composetodolist.ui.theme\n\nimport androidx.compose.ui.graphics.Color\n\nval Purple200 = Color(0xFFBB86FC)\nval Purple500 = Color(0xFF6200"}], "metadata": {"task_id": "Compose-ToDo/49", "ground_truth": "        iconColor = CommonGrey,\r\n        onClick = onClick,\r\n        isSelected = isSelected\r\n    )\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\main\\ui\\ToDoMainScreen.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.foundation.theme.DividerAlpha\nimport com.wisnu.kurniawan.composetodolist.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Surface\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Divider\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.background\n\r\n@Composable\r\nprivate fun PgDivider(\r\n    needSpacer: Boolean,\r\n    color: Color = MaterialTheme.colorScheme.onSurface.copy(alpha = DividerAlpha),\r\n) {\r\n    Row {\r\n        if (needSpacer) {\r\n            Spacer(\r\n                Modifier\r\n                    .width(48.dp)\r\n                    .height(1.dp)\r\n                    .background(color = MaterialTheme.colorScheme.secondary)\r", "choices": [{"text": "\n import com.wisnu.kurniawan.composetodolist.foundation.theme.DividerAlpha\nimport com.wisnu.kurniawan.composetodolist.R\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Surface\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Divider\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.background\n\r\n@Composable\r\nprivate fun PgDivider(\r\n    needSpacer: Boolean,\r\n    color: Color = MaterialTheme.colorScheme.onSurface.copy(alpha = DividerAlpha),\r\n) {\r\n    Row {\r\n        if (needSpacer) {\r\n            Spacer(\r\n                Modifier\r\n                   .width(48.dp)\r\n                   .height(1.dp)\r\n                   .background(color = MaterialTheme.colorScheme.secondary)\r\n//                   .background(color = color)\r\n            )\r\n        }\r\n        Divider(\r\n            color = color,\r\n            modifier = Modifier.width(1.dp)\r\n        )\r\n    }\r\n}\r\n\r\n@Composable\r\nfun PgDivider(\r\n    needSpacer: Boolean = true,\r\n    color: Color = MaterialTheme.colorScheme.onSurface.copy(alpha = DividerAlpha),\r\n) {\r\n    PgDivider(needSpacer, color)\r\n}\r\n\r\n@Composable\r\nfun PgDivider(\r\n    needSpacer: Boolean = true,\r\n    color: Color = MaterialTheme.colorScheme"}], "metadata": {"task_id": "Compose-ToDo/50", "ground_truth": "            )\r\n        }\r\n        Divider(color = color)\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\main\\ui\\ToDoMainScreen.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.foundation.theme.ListRed\nimport com.wisnu.kurniawan.composetodolist.R\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.graphics.Shape\nimport androidx.compose.ui.graphics.RectangleShape\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.icons.rounded.List\n\r\n@Preview\r\n@Composable\r\nfun CellPreview() {\r\n    ListCell(\r\n        RectangleShape,\r\n        \"Name\",\r\n        \"23\",\r\n        ListRed,\r\n        true,\r", "choices": [{"text": "//        R.drawable.ic_baseline_list_alt_24,\r\n        List.Icon\r\n    )\r\n}<file_sep>/app/src/main/java/com/wisnu/kurniawan/composetodolist/foundation/theme/Color.kt\npackage com.wisnu.kurniawan.composetodolist.foundation.theme\n\nimport androidx.compose.ui.graphics.Color\n\nval ListRed = Color(0xFFF44336)\nval ListGreen = Color(0xFF4CAF50)\nval List"}], "metadata": {"task_id": "Compose-ToDo/51", "ground_truth": "        false,\r\n        {},\r\n        {}\r\n    )\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\main\\ui\\ToDoMainScreen.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nprivate fun initToDo() {\r\n        viewModelScope.launch {\r\n            environment.getGroup()\r\n                .collect {\r\n                    setState {\r\n                        copy(\r\n                            data = it,\r\n                            currentDate = environment.dateTimeProvider.now().dayOfMonth.toString()\r", "choices": [{"text": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nprivate fun initToDo() {\r\n        viewModelScope.launch {\r\n            environment.getGroup()\r\n               .collect {\r\n                    setState {\r\n                        copy(\r\n                            data = it,\r\n                            currentDate = environment.dateTimeProvider.now().dayOfMonth.toString()\r\n//                            currentDate = environment.dateTimeProvider.now().dayOfMonth.toString()\r\n                        )\r\n                    }\r\n                }\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "Compose-ToDo/52", "ground_truth": "                        )\r\n                    }\r\n                }\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\main\\ui\\ToDoMainViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nprivate fun initOverallCount() {\r\n        viewModelScope.launch {\r\n            environment.getOverallCount()\r\n                .collect {\r\n                    setState {\r\n                        copy(\r\n                            allTaskCount = it.allTaskCount.toString(),\r\n                            scheduledTodayTaskCount = it.scheduledTodayTaskCount.toString(),\r\n                            scheduledTaskCount = it.scheduledTaskCount.toString(),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/53", "ground_truth": "                        )\r\n                    }\r\n                }\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\main\\ui\\ToDoMainViewModel.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoGroup\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoGroupDb\nfun List<ToDoGroup>.toItemGroup(selectedItemState: SelectedItemState): List<ItemMainState> {\r\n    val data = mutableListOf<ItemMainState>()\r\n\r\n    forEach {\r\n        if (it.id != ToDoGroupDb.DEFAULT_ID) {\r\n            data.add(ItemMainState.ItemGroup(it))\r\n        }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/54", "ground_truth": "        data.addAll(it.lists.toItemListMainState(selectedItemState))\r\n    }\r\n\r\n    return data\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\main\\ui\\ToDoMainViewModel.kt"}}
{"prompt": "\n import java.time.LocalDateTime\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.model.TaskWithList\noverride fun getToDoTaskWithStepsOrderByDueDateWithList(maxDate: LocalDateTime?): Flow<List<TaskWithList>> {\r\n        val operation = if (maxDate != null) {\r\n            toDoTaskProvider.getTaskWithListOrderByDueDateToday(maxDate)\r\n        } else {\r\n            toDoTaskProvider.getTaskWithListOrderByDueDate()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/55", "ground_truth": "        }\r\n\r\n        return operation\r\n            .distinctUntilChanged()\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\scheduled\\data\\ScheduledEnvironment.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.foundation.uicomponent.PgPageLayout\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.ColumnScope\nimport androidx.compose.foundation.layout.Box\n\r\n@Composable\r\nprivate fun ScheduledContent(\r\n    items: List<ItemScheduledState>,\r\n    header: @Composable ColumnScope.() -> Unit,\r\n    onTaskItemClick: (ItemScheduledState.Task) -> Unit,\r\n    onTaskStatusItemClick: (ToDoTask) -> Unit,\r\n    onTaskSwipeToDelete: (ToDoTask) -> Unit\r\n) {\r\n    PgPageLayout {\r\n        header()\r\n\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .weight(1F)\r\n        ) {\r\n            TaskContent(\r\n                items,\r\n                onTaskItemClick,\r\n                onTaskStatusItemClick,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/57", "ground_truth": "                onTaskSwipeToDelete\r\n            )\r\n        }\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\scheduled\\ui\\ScheduledScreen.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.features.todo.all.ui.TaskContent\nimport com.wisnu.kurniawan.composetodolist.features.todo.all.ui.ItemAllState\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.icons.rounded.Search\n\r\n@Composable\r\nfun SearchContent(\r\n    items: List<ItemAllState>,\r\n    onTaskItemClick: (ItemAllState.Task) -> Unit,\r\n    onTaskStatusItemClick: (ToDoTask) -> Unit,\r\n    onTaskSwipeToDelete: (ToDoTask) -> Unit\r\n) {\r\n    TaskContent(\r\n        items,\r", "choices": [{"text": "//        onTaskItemClick = onTaskItemClick,\r\n        onTaskStatusItemClick = onTaskStatusItemClick,\r\n        onTaskSwipeToDelete = onTaskSwipeToDelete\r\n    )\r\n}<file_sep>/app/src/main/java/com/wisnu/kurniawan/composetodolist/features/todo/all/ui/ItemAllState.kt\npackage com.wisnu.kurniawan.composetodolist.features.todo.all.ui\n\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTask"}], "metadata": {"task_id": "Compose-ToDo/59", "ground_truth": "        onTaskItemClick,\r\n        onTaskStatusItemClick,\r\n        onTaskSwipeToDelete\r\n    )\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\search\\ui\\SearchScreen.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoStep\noverride suspend fun createStep(name: String, taskId: String) {\r\n        val currentDate = dateTimeProvider.now()\r\n\r\n        toDoStepProvider.insertStep(\r\n            listOf(\r\n                ToDoStep(\r\n                    id = idProvider.generate(),\r\n                    name = name,\r\n                    createdAt = currentDate,\r\n                    updatedAt = currentDate\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/62", "ground_truth": "                )\r\n            ),\r\n            taskId\r\n        )\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\step\\data\\StepEnvironment.kt"}}
{"prompt": "\n override suspend fun updateTaskNote(note: String, taskId: String) {\r", "choices": [{"text": "-    val task = taskDao.getTaskById(taskId)\r\n-    task.note = note\r\n-    taskDao.updateTask(task)\r\n+    taskDao.updateTaskNote(note, taskId)\r\n }\r\n \r\n override suspend fun deleteTask(taskId: String) {\r\n-    taskDao.deleteTaskById(taskId)\r\n+    taskDao.deleteTask(taskId)\r\n }\r\n \r\n override suspend fun getTasks(): List<Task> {\r\n-    return taskDao.getAllTasks()\r\n+    return taskDao.getTasks()"}], "metadata": {"task_id": "Compose-ToDo/63", "ground_truth": "        val currentDate = dateTimeProvider.now()\r\n        toDoTaskProvider.updateTaskNote(taskId, note, currentDate)\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\step\\data\\StepEnvironment.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.foundation.uicomponent.PgIconButton\nimport com.wisnu.kurniawan.composetodolist.foundation.uicomponent.PgIcon\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.Alignment\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.Box\n\r\n@Composable\r\nprivate fun StepTitle(\r\n    onClickBack: () -> Unit\r\n) {\r\n    Box(\r\n        modifier = Modifier\r\n            .height(56.dp)\r\n            .fillMaxWidth()\r\n    ) {\r\n        Box(\r\n            modifier = Modifier\r\n                .padding(start = 4.dp)\r\n                .align(Alignment.CenterStart)\r\n        ) {\r\n            PgIconButton(\r\n                onClick = onClickBack,\r\n                color = Color.Transparent\r\n            ) {\r", "choices": [{"text": "\n import com.wisnu.kurniawan.composetodolist.foundation.uicomponent.PgIconButton\nimport com.wisnu.kurniawan.composetodolist.foundation.uicomponent.PgIcon\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.Alignment\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.Box\n\r\n@Composable\r\nprivate fun StepTitle(\r\n    onClickBack: () -> Unit\r\n) {\r\n    Box(\r\n        modifier = Modifier\r\n           .height(56.dp)\r\n           .fillMaxWidth()\r\n    ) {\r\n        Box(\r\n            modifier = Modifier\r\n               .padding(start = 4.dp)\r\n               .align(Alignment.CenterStart)\r\n        ) {\r\n            PgIconButton(\r\n                onClick = onClickBack,\r\n                color = Color.Transparent\r\n            ) {\r\n//                Icon(\r\n//                    imageVector = Icons.Default.ArrowBack,\r\n//                    contentDescription = \"Back\",\r\n//                    tint = Color.White\r\n//                )\r\n                PgIcon(\r\n                    icon = Icons.Default.ArrowBack,\r\n                    color = Color.White\r\n                )\r\n            }\r\n        }\r\n        Box(\r\n            modifier = Modifier\r\n               .padding(end = 4.dp)\r\n               .align(Alignment.CenterEnd)\r\n        ) {\r\n            PgIconButton(\r\n                onClick = {},\r\n                color = Color.Transparent\r\n            ) {\r\n//                Icon(\r\n//"}], "metadata": {"task_id": "Compose-ToDo/64", "ground_truth": "                PgIcon(imageVector = Icons.Rounded.ChevronLeft)\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\step\\ui\\StepScreen.kt"}}
{"prompt": "\n private fun handleStepItemAction(action: StepAction.StepItemAction) {\r\n        when (action) {\r\n            is StepAction.StepItemAction.Create -> handleStepItemCreateAction(action)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/67", "ground_truth": "            is StepAction.StepItemAction.Edit -> handleStepItemEditAction(action)\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\step\\ui\\StepViewModel.kt"}}
{"prompt": "\n import java.time.LocalDateTime\nimport java.time.LocalDate\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTask\nfun ToDoTask.updatedDate(newLocalDate: LocalDate): LocalDateTime {\r", "choices": [{"text": "return this.updatedDate.toLocalDateTime(newLocalDate)\r\n}\r\nfun ToDoTask.updatedDate(newLocalDateTime: LocalDateTime): ToDoTask {\r\nreturn this.copy(updatedDate = newLocalDateTime)\r\n}\r\nfun ToDoTask.updatedDate(newLocalDate: LocalDate, newLocalDateTime: LocalDateTime): ToDoTask {\r\nreturn this.copy(updatedDate = newLocalDateTime.toLocalDateTime(newLocalDate))\r\n}\r\nfun ToDoTask.updatedDate(newLocalDateTime: LocalDateTime, newLocalDate: LocalDate): ToDoTask {\r\nreturn this.copy("}], "metadata": {"task_id": "Compose-ToDo/68", "ground_truth": "    val localTime = dueDate?.toLocalTime() ?: DEFAULT_TASK_LOCAL_TIME\r\n    return LocalDateTime.of(newLocalDate, localTime)\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\step\\ui\\StepViewModel.kt"}}
{"prompt": "\n import java.time.LocalTime\nimport java.time.LocalDateTime\nimport java.time.LocalDate\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTask\nfun ToDoTask.updatedTime(defaultDate: LocalDate, newLocalTime: LocalTime): LocalDateTime {\r", "choices": [{"text": "return LocalDateTime.of(defaultDate, newLocalTime)\r\n}\r\nfun ToDoTask.updatedDate(defaultDate: LocalDate, newLocalDate: LocalDate): LocalDateTime {\r\nreturn LocalDateTime.of(newLocalDate, this.time)\r\n}\r\nfun ToDoTask.updatedTime(defaultDate: LocalDate, newLocalTime: LocalTime, newLocalDate: LocalDate): LocalDateTime {\r\nreturn LocalDateTime.of(newLocalDate, newLocalTime)\r\n}\r\nfun ToDoTask.updatedDate(defaultDate: LocalDate, newLocalDate: LocalDate, newLocalTime: LocalTime):"}], "metadata": {"task_id": "Compose-ToDo/69", "ground_truth": "    val localDate = dueDate?.toLocalDate() ?: defaultDate\r\n    return LocalDateTime.of(localDate, newLocalTime)\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\step\\ui\\StepViewModel.kt"}}
{"prompt": "\n import java.time.LocalDateTime\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.features.todo.taskreminder.ui.TaskBroadcastReceiver\nimport com.wisnu.foundation.coredatetime.toMillis\nimport android.content.Intent\nimport android.app.PendingIntent\nfun scheduleTaskAlarm(task: ToDoTask, time: LocalDateTime) {\r\n        val receiverIntent = Intent(context, TaskBroadcastReceiver::class.java).apply {\r\n            action = TaskBroadcastReceiver.ACTION_ALARM_SHOW\r\n            putExtra(TaskBroadcastReceiver.EXTRA_TASK_ID, task.id)\r\n        }\r\n\r\n        val pendingIntent = PendingIntent.getBroadcast(\r\n            context,\r\n            task.createdAt.toMillis().toInt(),\r\n            receiverIntent,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/70", "ground_truth": "            flags\r\n        )\r\n\r\n        setAlarm(time.toMillis(), pendingIntent)\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\taskreminder\\data\\TaskAlarmManager.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.features.todo.taskreminder.ui.TaskBroadcastReceiver\nimport com.wisnu.foundation.coredatetime.toMillis\nimport android.content.Intent\nimport android.app.PendingIntent\nfun cancelTaskAlarm(task: ToDoTask) {\r\n        val receiverIntent = Intent(context, TaskBroadcastReceiver::class.java)\r\n        receiverIntent.action = TaskBroadcastReceiver.ACTION_ALARM_SHOW\r\n\r\n        val pendingIntent = PendingIntent.getBroadcast(\r\n            context,\r\n            task.createdAt.toMillis().toInt(),\r\n            receiverIntent,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/71", "ground_truth": "            flags\r\n        )\r\n\r\n        cancelAlarm(pendingIntent)\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\taskreminder\\data\\TaskAlarmManager.kt"}}
{"prompt": "\n import android.content.Intent\nimport android.app.PendingIntent\nprivate fun cancelAlarm(operation: PendingIntent?) {\r\n        if (operation == null) {\r", "choices": [{"text": "//            Log.d(TAG, \"Operation is null\")\r\n            return\r\n        }\r\n        val alarmManager = getSystemService(Context.ALARM_SERVICE) as AlarmManager\r\n        alarmManager.cancel(operation)\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/73", "ground_truth": "            return\r\n        }\r\n\r\n        alarmManager?.cancel(operation)\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\taskreminder\\data\\TaskAlarmManager.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nimport com.wisnu.foundation.coredatetime.toMillis\nfun show(task: ToDoTask, toDoList: ToDoList) {\r\n        val builder = buildNotification(task, toDoList)\r\n        val id = task.createdAt.toMillis().toInt()\r", "choices": [{"text": "//        val id = task.id\r\n        val notificationManager =\r\n            context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\r\n        notificationManager.notify(id, builder.build())\r\n    }\r\nfun buildNotification(task: ToDoTask, toDoList: ToDoList): NotificationCompat.Builder {\r\n        val intent = Intent(context, MainActivity::class.java)\r\n        intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP\r\n        val pendingIntent = PendingIntent.getActivity(context, 0, intent, 0)\r\n        val builder = NotificationCompat.Builder(context, \""}], "metadata": {"task_id": "Compose-ToDo/74", "ground_truth": "        notificationManager?.notify(\r\n            id,\r\n            builder.build()\r\n        )\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\taskreminder\\data\\TaskNotificationManager.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nfun dismiss(task: ToDoTask) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Compose-ToDo/75", "ground_truth": "        val id = task.createdAt.toMillis().toInt()\r\n        notificationManager?.cancel(id)\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\features\\todo\\taskreminder\\data\\TaskNotificationManager.kt"}}
{"prompt": "\n import java.time.LocalDateTime\nimport androidx.room.TypeConverter\n @TypeConverter\r\n    fun toDate(date: Long?): LocalDateTime? {\r\n        if (date == null) return null\r", "choices": [{"text": "return LocalDateTime.ofInstant(Instant.ofEpochMilli(date), ZoneId.systemDefault())\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/84", "ground_truth": "\r\n        return date.toLocalDateTime()\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\converter\\DateConverter.kt"}}
{"prompt": "\n import java.time.LocalDateTime\nimport androidx.room.TypeConverter\n @TypeConverter\r\n    fun toDateLong(date: LocalDateTime?): Long? {\r\n        if (date == null) return null\r", "choices": [{"text": "return date.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli()\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/85", "ground_truth": "\r\n        return date.toMillis()\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\converter\\DateConverter.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoList\nimport com.wisnu.kurniawan.composetodolist.model.GroupIdWithList\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoListDb\nfun List<ToDoListDb>.toGroupIdWithList(): List<GroupIdWithList> {\r\n    return map { list ->\r\n        GroupIdWithList(\r", "choices": [{"text": "//            list.groupId,\r\n            list.groupId,\r\n            list.title,\r\n            list.description,\r\n            list.status,\r\n            list.priority,\r\n            list.dueDate,\r\n            list.createdAt,\r\n            list.updatedAt,\r\n            list.isDeleted,\r\n            list.isCompleted,\r\n            list.isPinned,\r\n            list.isArchived,\r\n            list.isFavorite,\r\n            list.isImportant,\r\n            list.isUrgent,\r\n            list.isPrivate,\r\n            list.isPublic,\r\n            list.isShared,\r\n            list.isDeleted,\r\n            list.isCompleted,\r\n            list.is"}], "metadata": {"task_id": "Compose-ToDo/86", "ground_truth": "            groupId = list.groupId,\r\n            list = list.toToDoList()\r\n        )\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\mapper\\ToDoGroupMapper.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoGroup\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoGroupWithList\nfun List<ToDoGroupWithList>.groupWithListToGroup(): List<ToDoGroup> {\r\n    return map {\r", "choices": [{"text": "ToDoGroup(it.group.id, it.group.name, it.group.color, it.group.is_favorite, it.group.is_deleted, it.group.created_at, it.group.updated_at, it.group.deleted_at, it.group.created_by, it.group.updated_by, it.group.deleted_by, it.group.is_active, it.group.is_deleted, it.group.is_favorite, it.group.is_active, it.group.is_deleted, it."}], "metadata": {"task_id": "Compose-ToDo/87", "ground_truth": "        it.group.toGroup(it.listWithTasks.toDoListWithTasksToToDoList())\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\mapper\\ToDoGroupMapper.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoList\nimport com.wisnu.kurniawan.composetodolist.model.ToDoGroup\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoGroupDb\nfun ToDoGroupDb.toGroup(lists: List<ToDoList> = listOf()): ToDoGroup {\r\n    return ToDoGroup(\r\n        id = id,\r\n        name = name,\r", "choices": [{"text": "//        lists = lists.map { it.toList() }\r\n    )\r\n}\r\n\r\nfun ToDoGroup.toGroupDb(): ToDoGroupDb {\r\n    return ToDoGroupDb(\r\n        id = id,\r\n        name = name\r\n    )\r\n}<file_sep>/app/src/main/java/com/wisnu/kurniawan/composetodolist/foundation/datasource/local/model/ToDoListDb.kt\npackage com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model\r\n\r\nimport androidx.room."}], "metadata": {"task_id": "Compose-ToDo/88", "ground_truth": "        createdAt = createdAt,\r\n        updatedAt = updatedAt,\r\n        lists = lists\r\n    )\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\mapper\\ToDoGroupMapper.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoGroup\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoGroupDb\nfun List<ToDoGroup>.toGroupDp(): List<ToDoGroupDb> {\r\n    return map {\r\n        ToDoGroupDb(\r\n            id = it.id,\r\n            name = it.name,\r", "choices": [{"text": "           isChecked = it.isChecked\r\n        )\r\n    }\r\n}<file_sep>/app/src/main/java/com/wisnu/kurniawan/composetodolist/foundation/datasource/local/model/ToDoGroupDb.kt\npackage com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity(tableName = \"todo_group\")\ndata class ToDoGroupDb(\n    @PrimaryKey(autoGenerate ="}], "metadata": {"task_id": "Compose-ToDo/89", "ground_truth": "            createdAt = it.createdAt,\r\n            updatedAt = it.updatedAt\r\n        )\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\mapper\\ToDoGroupMapper.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoListDb\nfun ToDoListDb.toToDoList(tasks: List<ToDoTask> = listOf()): ToDoList {\r\n    return ToDoList(\r\n        id = id,\r\n        name = name,\r\n        color = color,\r", "choices": [{"text": "//        tasks = tasks.map { it.toToDoTask() }\r\n    )\r\n}\r\n\r\nfun ToDoTask.toToDoTask(): ToDoTask {\r\n    return ToDoTask(\r\n        id = id,\r\n        name = name,\r\n        isDone = isDone,\r\n        listId = listId\r\n    )\r\n}<file_sep>/app/src/main/java/com/wisnu/kurniawan/composetodolist/foundation/datasource/local/model/ToDoListDb.kt\npackage com.wisnu.kurniawan.composetodolist.foundation"}], "metadata": {"task_id": "Compose-ToDo/90", "ground_truth": "        tasks = tasks,\r\n        createdAt = createdAt,\r\n        updatedAt = updatedAt\r\n    )\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\mapper\\ToDoListMapper.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoList\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoListDb\nprivate fun ToDoList.toToDoListDb(groupId: String): ToDoListDb {\r\n    return ToDoListDb(\r\n        id = id,\r\n        name = name,\r\n        color = color,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/91", "ground_truth": "        groupId = groupId,\r\n        createdAt = createdAt,\r\n        updatedAt = updatedAt\r\n    )\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\mapper\\ToDoListMapper.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoStep\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoStepDb\nfun List<ToDoStepDb>.toStep(): List<ToDoStep> {\r\n    return map { step ->\r\n        ToDoStep(\r\n            id = step.id,\r\n            name = step.name,\r\n            status = step.status,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/92", "ground_truth": "            createdAt = step.createdAt,\r\n            updatedAt = step.updatedAt\r\n        )\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\mapper\\ToDoStepMapper.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoStep\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoStepDb\nfun List<ToDoStep>.toStepDb(taskId: String): List<ToDoStepDb> {\r\n    return map {\r\n        ToDoStepDb(\r\n            id = it.id,\r\n            name = it.name,\r\n            status = it.status,\r\n            taskId = taskId,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/93", "ground_truth": "            createdAt = it.createdAt,\r\n            updatedAt = it.updatedAt\r\n        )\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\mapper\\ToDoStepMapper.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.model.ToDoStep\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoTaskDb\nfun ToDoTaskDb.toTask(steps: List<ToDoStep> = listOf()): ToDoTask {\r\n    return ToDoTask(\r\n        id = id,\r\n        name = name,\r\n        status = status,\r\n        steps = steps,\r\n        completedAt = completedAt,\r\n        dueDate = dueDate,\r\n        isDueDateTimeSet = isDueDateTimeSet,\r\n        repeat = repeat,\r\n        note = note,\r", "choices": [{"text": "//        createdAt = createdAt,\r\n//        updatedAt = updatedAt,\r\n        isCompleted = isCompleted,\r\n        isDeleted = isDeleted,\r\n        isArchived = isArchived,\r\n        isPinned = isPinned,\r\n        isImportant = isImportant,\r\n        isCompleted = isCompleted,\r\n        isDeleted = isDeleted,\r\n        isArchived = isArchived,\r\n        isPinned = isPinned,\r\n        isImportant = isImportant,\r\n        isCompleted = isCompleted,\r\n        isDeleted = isDeleted,\r\n        isArchived = isArchived,\r\n        isPinned = isPinned,\r\n        isImportant"}], "metadata": {"task_id": "Compose-ToDo/94", "ground_truth": "        noteUpdatedAt = noteUpdatedAt,\r\n        createdAt = createdAt,\r\n        updatedAt = updatedAt\r\n    )\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\mapper\\ToDoTaskMapper.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoTaskDb\nfun List<ToDoTask>.toTaskDb(listId: String): List<ToDoTaskDb> {\r\n    return map {\r\n        ToDoTaskDb(\r\n            id = it.id,\r\n            name = it.name,\r\n            status = it.status,\r\n            listId = listId,\r\n            dueDate = it.dueDate,\r\n            completedAt = it.completedAt,\r\n            isDueDateTimeSet = it.isDueDateTimeSet,\r\n            repeat = it.repeat,\r\n            note = it.note,\r\n            noteUpdatedAt = it.noteUpdatedAt,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/95", "ground_truth": "            createdAt = it.createdAt,\r\n            updatedAt = it.updatedAt\r\n        )\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\mapper\\ToDoTaskMapper.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoGroup\nfun getGroup(): Flow<List<ToDoGroup>> {\r\n        return toDoGroupReadDao.getGroup()\r\n            .filterNotNull()\r", "choices": [{"text": "\n import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoGroup\nfun getGroup(): Flow<List<ToDoGroup>> {\r\n        return toDoGroupReadDao.getGroup()\r\n           .filterNotNull()\r\n}<file_sep>package com.wisnu.kurniawan.composetodolist.ui.todolist\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.itemsIndexed\nimport androidx.compose.material.Button\nimport androidx.compose.material"}], "metadata": {"task_id": "Compose-ToDo/96", "ground_truth": "            .map { it.toGroup() }\r\n            .flowOn(dispatcher)\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoGroupProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoGroup\nfun getGroup(groupId: String): Flow<ToDoGroup> {\r\n        return toDoGroupReadDao.getGroup(groupId)\r\n            .filterNotNull()\r", "choices": [{"text": "\n import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoGroup\nfun getGroup(groupId: String): Flow<ToDoGroup> {\r\n        return toDoGroupReadDao.getGroup(groupId)\r\n           .filterNotNull()\r\n}<file_sep>package com.wisnu.kurniawan.composetodolist.ui.todolist\n\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material.Button\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport com.wisnu.kurniawan.composetodolist.model.ToDo"}], "metadata": {"task_id": "Compose-ToDo/97", "ground_truth": "            .map { it.toGroup() }\r\n            .flowOn(dispatcher)\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoGroupProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoGroup\nfun getGroupWithList(): Flow<List<ToDoGroup>> {\r\n        return toDoGroupReadDao.getGroupWithList()\r\n            .filterNotNull()\r", "choices": [{"text": "\n import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoGroup\nfun getGroupWithList(): Flow<List<ToDoGroup>> {\r\n        return toDoGroupReadDao.getGroupWithList()\r\n           .filterNotNull()\r\n}\n"}], "metadata": {"task_id": "Compose-ToDo/98", "ground_truth": "            .map { it.groupWithListToGroup() }\r\n            .flowOn(dispatcher)\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoGroupProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.ToDoGroup\nsuspend fun insertGroup(data: List<ToDoGroup>) {\r\n        withContext(dispatcher) {\r", "choices": [{"text": "//            val dao = AppDatabase.getInstance(context).todoGroupDao()\r\n//            dao.insertAll(data)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/99", "ground_truth": "            toDoGroupWriteDao.insertGroup(data.toGroupDp())\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoGroupProvider.kt"}}
{"prompt": "\n import java.time.LocalDateTime\nimport kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.ToDoGroup\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.model.ToDoGroupDb\nsuspend fun ungroup(groupId: String, updatedAt: LocalDateTime, listIds: List<String>) {\r\n        withContext(dispatcher) {\r\n            toDoListWriteDao.updateListGroup(listIds, ToDoGroupDb.DEFAULT_ID, updatedAt)\r", "choices": [{"text": "//            toDoListWriteDao.updateListGroup(listIds, groupId, updatedAt)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/100", "ground_truth": "            toDoGroupWriteDao.deleteGroup(groupId)\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoGroupProvider.kt"}}
{"prompt": "\n import java.time.LocalDateTime\nimport kotlinx.coroutines.withContext\nsuspend fun updateGroupName(id: String, name: String, updatedAt: LocalDateTime) {\r\n        withContext(dispatcher) {\r", "choices": [{"text": "//            val group = Group(id, name, updatedAt)\r\n//            val group = Group(id, name, updatedAt)\r\n//            val group = Group(id, name, updatedAt)\r\n//            val group = Group(id, name, updatedAt)\r\n//            val group = Group(id, name, updatedAt)\r\n//            val group = Group(id, name, updatedAt)\r\n//            val group = Group(id, name, updatedAt)\r\n//            val group = Group(id, name, updatedAt)\r\n//            val group = Group("}], "metadata": {"task_id": "Compose-ToDo/101", "ground_truth": "            toDoGroupWriteDao.updateGroupName(id, name, updatedAt)\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoGroupProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nsuspend fun deleteGroup(id: String) {\r\n        withContext(dispatcher) {\r", "choices": [{"text": "//            val group = Group(id)\r\n//            group.delete()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/102", "ground_truth": "            toDoGroupWriteDao.deleteGroup(id)\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoGroupProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nfun getListWithTasks(): Flow<List<ToDoList>> {\r\n        return toDoListReadDao.getListWithTasks()\r\n            .filterNotNull()\r", "choices": [{"text": "\n import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nfun getListWithTasks(): Flow<List<ToDoList>> {\r\n        return toDoListReadDao.getListWithTasks()\r\n           .filterNotNull()\r\n}\n"}], "metadata": {"task_id": "Compose-ToDo/103", "ground_truth": "            .map { it.toDoListWithTasksToToDoList() }\r\n            .flowOn(dispatcher)\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoListProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nfun getList(): Flow<List<ToDoList>> {\r\n        return toDoListReadDao.getList()\r\n            .filterNotNull()\r", "choices": [{"text": "\n import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nfun getList(): Flow<List<ToDoList>> {\r\n        return toDoListReadDao.getList()\r\n           .filterNotNull()\r\n}\r\n"}], "metadata": {"task_id": "Compose-ToDo/104", "ground_truth": "            .map { it.toToDoList() }\r\n            .flowOn(dispatcher)\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoListProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nfun getListById(listId: String): Flow<ToDoList> {\r\n        return toDoListReadDao.getListById(listId)\r\n            .filterNotNull()\r", "choices": [{"text": "\n import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nfun getListById(listId: String): Flow<ToDoList> {\r\n        return toDoListReadDao.getListById(listId)\r\n           .filterNotNull()\r\n}<file_sep>package com.wisnu.kurniawan.composetodolist.ui.todolist\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.itemsIndexed\nimport androidx.compose.material.Button\nimport androidx.compose.material"}], "metadata": {"task_id": "Compose-ToDo/105", "ground_truth": "            .map { it.toToDoList() }\r\n            .flowOn(dispatcher)\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoListProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nfun getListByGroupId(groupId: String): Flow<List<ToDoList>> {\r\n        return toDoListReadDao.getListByGroupId(groupId)\r\n            .filterNotNull()\r", "choices": [{"text": "\n import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nfun getListByGroupId(groupId: String): Flow<List<ToDoList>> {\r\n        return toDoListReadDao.getListByGroupId(groupId)\r\n           .filterNotNull()\r\n}\n"}], "metadata": {"task_id": "Compose-ToDo/106", "ground_truth": "            .map { it.toToDoList() }\r\n            .flowOn(dispatcher)\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoListProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nfun getListWithTasksById(listId: String): Flow<ToDoList> {\r\n        return toDoListReadDao.getListWithTasksById(listId)\r", "choices": [{"text": "}<file_sep>package com.wisnu.kurniawan.composetodolist.ui.todolist\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.material.Button\nimport androidx.compose.material."}], "metadata": {"task_id": "Compose-ToDo/107", "ground_truth": "            .map { it.toToDoList() }\r\n            .flowOn(dispatcher)\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoListProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.GroupIdWithList\nfun getListWithUnGroupList(groupId: String): Flow<List<GroupIdWithList>> {\r\n        return toDoListReadDao.getListWithUnGroupList(groupId)\r\n            .filterNotNull()\r", "choices": [{"text": "\n import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.GroupIdWithList\nfun getListWithUnGroupList(groupId: String): Flow<List<GroupIdWithList>> {\r\n        return toDoListReadDao.getListWithUnGroupList(groupId)\r\n           .filterNotNull()\r\n}<file_sep>package com.wisnu.kurniawan.composetodolist.ui.todolist\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.itemsIndexed\nimport androidx.compose.material.Button\nimport androidx.compose.material"}], "metadata": {"task_id": "Compose-ToDo/108", "ground_truth": "            .map { it.toGroupIdWithList() }\r\n            .flowOn(dispatcher)\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoListProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nsuspend fun insertList(data: List<ToDoList>, groupId: String) {\r\n        withContext(dispatcher) {\r", "choices": [{"text": "//            val list = data.map { it.copy(groupId = groupId) }\r\n            val list = data.map { it.copy(groupId = groupId) }\r\n            val result = list.map {\r\n                val id = db.todoDao().insert(it)\r\n                it.copy(id = id)\r\n            }\r\n            db.todoDao().insertAll(*result.toTypedArray())\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "Compose-ToDo/109", "ground_truth": "            toDoListWriteDao.insertList(data.toToDoListDb(groupId))\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoListProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nsuspend fun deleteListById(listId: String) {\r\n        withContext(dispatcher) {\r", "choices": [{"text": "//            val list = listDao.getListById(listId)\r\n//            listDao.deleteList(list)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/110", "ground_truth": "            toDoListWriteDao.deleteListById(listId)\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoListProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.GroupIdWithList\nsuspend fun updateList(data: List<GroupIdWithList>) {\r\n        withContext(dispatcher) {\r", "choices": [{"text": "//            val list = data.map { it.list }\r\n//            val group = data.map { it.group }\r\n//            val groupList = data.map { it.groupList }\r\n//            val groupListId = data.map { it.groupListId }\r\n//            val groupId = data.map { it.groupId }\r\n//            val groupIdWithList = data.map { it.groupIdWithList }\r\n//            val groupIdWithListId = data.map { it.groupIdWithListId }\r\n//            val listId ="}], "metadata": {"task_id": "Compose-ToDo/111", "ground_truth": "            toDoListWriteDao.updateList(data.toToDoListDb())\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoListProvider.kt"}}
{"prompt": "\n import java.time.LocalDateTime\nimport kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nsuspend fun updateListNameAndColor(toDoList: ToDoList, updatedAt: LocalDateTime) {\r\n        withContext(dispatcher) {\r", "choices": [{"text": "//            val toDoList = ToDoList(id = toDoList.id, name = toDoList.name, color = toDoList.color, updatedAt = updatedAt)\r\n            val toDoList = ToDoList(id = toDoList.id, name = toDoList.name, color = toDoList.color, updatedAt = updatedAt)\r\n            toDoListDao.update(toDoList)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/112", "ground_truth": "            toDoListWriteDao.updateListNameAndColor(toDoList.id, toDoList.name, toDoList.color, updatedAt)\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoListProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.ToDoStep\nsuspend fun insertStep(data: List<ToDoStep>, taskId: String) {\r\n        withContext(dispatcher) {\r", "choices": [{"text": "//            val db = Room.databaseBuilder(\r\n//                context,\r\n//                AppDatabase::class.java,\r\n//                \"todo_db\"\r\n//            ).build()\r\n//            db.todoDao().insertStep(data, taskId)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/113", "ground_truth": "            toDoStepWriteDao.insertStep(data.toStepDb(taskId))\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoStepProvider.kt"}}
{"prompt": "\n import java.time.LocalDateTime\nimport kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.ToDoStatus\nsuspend fun updateStepStatus(id: String, status: ToDoStatus, updatedAt: LocalDateTime) {\r\n        withContext(dispatcher) {\r", "choices": [{"text": "//            val todo = todoRepository.getTodoById(id)\r\n//            todo.status = status\r\n//            todo.updatedAt = updatedAt\r\n//            todoRepository.updateTodo(todo)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/114", "ground_truth": "            toDoStepWriteDao.updateStepStatus(id, status, updatedAt)\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoStepProvider.kt"}}
{"prompt": "\n import java.time.LocalDateTime\nimport kotlinx.coroutines.withContext\nsuspend fun updateStepName(id: String, name: String, updatedAt: LocalDateTime) {\r\n        withContext(dispatcher) {\r", "choices": [{"text": "//            val step = Step(id, name, updatedAt)\r\n//            val step = Step(id, name, updatedAt)\r\n//            val step = Step(id, name, updatedAt)\r\n//            val step = Step(id, name, updatedAt)\r\n//            val step = Step(id, name, updatedAt)\r\n//            val step = Step(id, name, updatedAt)\r\n//            val step = Step(id, name, updatedAt)\r\n//            val step = Step(id, name, updatedAt)\r\n//            val step = Step("}], "metadata": {"task_id": "Compose-ToDo/115", "ground_truth": "            toDoStepWriteDao.updateStepName(id, name, updatedAt)\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoStepProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nsuspend fun deleteStepById(id: String) {\r\n        withContext(dispatcher) {\r", "choices": [{"text": "//            val step = Step.findById(id)\r\n//            step?.delete()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/116", "ground_truth": "            toDoStepWriteDao.deleteStepById(id)\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoStepProvider.kt"}}
{"prompt": "\n import java.time.LocalDateTime\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTaskOverallCount\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTask\nfun getOverallCount(date: LocalDateTime): Flow<ToDoTaskOverallCount> {\r", "choices": [{"text": "return flow {\r\nemit(ToDoTaskOverallCount(date, 0, 0))\r\n}\r\n}\r\nfun getToDoTask(date: LocalDateTime): Flow<List<ToDoTask>> {\r\nreturn flow {\r\nemit(listOf())\r\n}\r\n}\r\nfun getToDoTask(date: LocalDateTime, id: String): Flow<ToDoTask> {\r\nreturn flow {\r\nemit(ToDoTask(id, date, \"title\", \"description\", false))\r\n}\r\n}\r\nfun getToDoTask(date: LocalDateTime, id: String"}], "metadata": {"task_id": "Compose-ToDo/117", "ground_truth": "        return toDoTaskReadDao.getTaskOverallCount(date)\r\n            .flowOn(dispatcher)\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTask\nfun getTaskWithStepsById(taskId: String): Flow<ToDoTask> {\r\n        return toDoTaskReadDao.getTaskWithStepsById(taskId)\r\n            .filterNotNull()\r", "choices": [{"text": "\n import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTask\nfun getTaskWithStepsById(taskId: String): Flow<ToDoTask> {\r\n        return toDoTaskReadDao.getTaskWithStepsById(taskId)\r\n           .filterNotNull()\r\n}\n"}], "metadata": {"task_id": "Compose-ToDo/120", "ground_truth": "            .map { it.toTask() }\r\n            .flowOn(dispatcher)\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.TaskWithList\nfun getTaskWithListById(taskId: String): Flow<TaskWithList> {\r\n        return toDoTaskReadDao.getTaskWithListById(taskId)\r\n            .filterNotNull()\r", "choices": [{"text": "\n import kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.TaskWithList\nfun getTaskWithListById(taskId: String): Flow<TaskWithList> {\r\n        return toDoTaskReadDao.getTaskWithListById(taskId)\r\n           .filterNotNull()\r\n}\n"}], "metadata": {"task_id": "Compose-ToDo/121", "ground_truth": "            .map { TaskWithList(it.list.toToDoList(), it.task.toTask()) }\r\n            .flowOn(dispatcher)\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTask\nfun getScheduledTasks(): Flow<List<ToDoTask>> {\r\n        return toDoTaskReadDao.getScheduledTasks()\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Compose-ToDo/123", "ground_truth": "            .map { it.toTask() }\r\n            .flowOn(dispatcher)\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTask\nsuspend fun insertTask(data: List<ToDoTask>, listId: String) {\r\n        withContext(dispatcher) {\r", "choices": [{"text": "//            val listId = listId\r\n            val list = listId\r\n            val task = data\r\n            val taskDao = AppDatabase.getInstance(context).taskDao()\r\n            taskDao.insertTask(list, task)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/124", "ground_truth": "            toDoTaskWriteDao.insertTask(data.toTaskDb(listId))\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt"}}
{"prompt": "\n import java.time.LocalDateTime\nimport kotlinx.coroutines.withContext\nsuspend fun updateTaskDueDate(\r\n        id: String,\r\n        dueDateTime: LocalDateTime?,\r\n        isDueDateTimeSet: Boolean,\r\n        updatedAt: LocalDateTime\r\n    ) {\r\n        withContext(dispatcher) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/125", "ground_truth": "            toDoTaskWriteDao.updateTaskDueDate(id, dueDateTime, isDueDateTimeSet, updatedAt)\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt"}}
{"prompt": "\n import java.time.LocalDateTime\nimport kotlinx.coroutines.withContext\nsuspend fun resetTaskDueDate(\r\n        id: String,\r\n        updatedAt: LocalDateTime\r\n    ) {\r\n        withContext(dispatcher) {\r\n            toDoTaskWriteDao.resetTaskDueDate(\r\n                id,\r\n                null,\r\n                false,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/126", "ground_truth": "                ToDoRepeat.NEVER,\r\n                updatedAt\r\n            )\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt"}}
{"prompt": "\n import java.time.LocalDateTime\nimport kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.ToDoRepeat\nsuspend fun updateTaskRepeat(id: String, repeat: ToDoRepeat, updatedAt: LocalDateTime) {\r\n        withContext(dispatcher) {\r", "choices": [{"text": "//            val task = taskDao.getTaskById(id)\r\n//            task.repeat = repeat\r\n//            task.updatedAt = updatedAt\r\n//            taskDao.updateTask(task)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/127", "ground_truth": "            toDoTaskWriteDao.updateTaskRepeat(id, repeat, updatedAt)\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt"}}
{"prompt": "\n import java.time.LocalDateTime\nimport kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.ToDoStatus\nsuspend fun updateTaskStatus(id: String, status: ToDoStatus, completedAt: LocalDateTime?, updatedAt: LocalDateTime) {\r\n        withContext(dispatcher) {\r", "choices": [{"text": "//            val task = taskDao.getTaskById(id)\r\n//            task.status = status\r\n//            task.completedAt = completedAt\r\n//            task.updatedAt = updatedAt\r\n//            taskDao.updateTask(task)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/128", "ground_truth": "            toDoTaskWriteDao.updateTaskStatus(id, status, completedAt, updatedAt)\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt"}}
{"prompt": "\n import java.time.LocalDateTime\nimport kotlinx.coroutines.withContext\nsuspend fun updateTaskNote(id: String, note: String, updatedAt: LocalDateTime) {\r\n        withContext(dispatcher) {\r", "choices": [{"text": "//            val task = taskDao.getTaskById(id)\r\n//            task.note = note\r\n//            task.updatedAt = updatedAt\r\n//            taskDao.updateTask(task)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/129", "ground_truth": "            toDoTaskWriteDao.updateTaskNote(id, note, updatedAt)\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt"}}
{"prompt": "\n import java.time.LocalDateTime\nimport kotlinx.coroutines.withContext\nsuspend fun updateTaskName(id: String, name: String, updatedAt: LocalDateTime) {\r\n        withContext(dispatcher) {\r", "choices": [{"text": "//            val task = Task(id, name, updatedAt)\r\n//            val task = Task(id, name, updatedAt)\r\n//            val task = Task(id, name, updatedAt)\r\n//            val task = Task(id, name, updatedAt)\r\n//            val task = Task(id, name, updatedAt)\r\n//            val task = Task(id, name, updatedAt)\r\n//            val task = Task(id, name, updatedAt)\r\n//            val task = Task(id, name, updatedAt)\r\n//            val task = Task("}], "metadata": {"task_id": "Compose-ToDo/130", "ground_truth": "            toDoTaskWriteDao.updateTaskName(id, name, updatedAt)\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nsuspend fun deleteTaskById(id: String) {\r\n        withContext(dispatcher) {\r", "choices": [{"text": "//            val task = taskDao.getTaskById(id)\r\n//            taskDao.deleteTask(task)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/131", "ground_truth": "            toDoTaskWriteDao.deleteTaskById(id)\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\provider\\ToDoTaskProvider.kt"}}
{"prompt": "\n import androidx.room.Database\nimport android.content.Context\nfun getInstance(context: Context): ToDoDatabase {\r\n            return INSTANCE ?: synchronized(this) {\r", "choices": [{"text": "\n import androidx.room.Database\nimport android.content.Context\nfun getInstance(context: Context): ToDoDatabase {\r\n            return INSTANCE?: synchronized(this) {\r\nINSTANCE?: Room.databaseBuilder(context.applicationContext, ToDoDatabase::class.java, \"todo.db\")\r\n.fallbackToDestructiveMigration()\r\n.build()\r\n.also { INSTANCE = it }\r\n            }\r\n        }\n"}], "metadata": {"task_id": "Compose-ToDo/132", "ground_truth": "                INSTANCE ?: buildDatabase(context).also { INSTANCE = it }\r\n            }\r\n        }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\local\\ToDoDatabase.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.Language\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.preference.model.LanguagePreference\nfun Language.toLanguagePreference(): LanguagePreference {\r\n    return when (this) {\r\n        Language.ENGLISH -> LanguagePreference.ENGLISH\r", "choices": [{"text": "Language.INDONESIA -> LanguagePreference.INDONESIA\r\nLanguage.JAPANESE -> LanguagePreference.JAPANESE\r\nLanguage.KOREAN -> LanguagePreference.KOREAN\r\nLanguage.CHINESE -> LanguagePreference.CHINESE\r\nLanguage.FRENCH -> LanguagePreference.FRENCH\r\nLanguage.GERMAN -> LanguagePreference.GERMAN\r\nLanguage.ITALIAN -> LanguagePreference.ITALIAN\r\nLanguage.RUSSIAN -> LanguagePreference.RUSSIAN\r\nLanguage.SPANISH -> LanguagePreference.SPANISH\r\nLanguage.TURKISH"}], "metadata": {"task_id": "Compose-ToDo/134", "ground_truth": "        Language.INDONESIA -> LanguagePreference.INDONESIA\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\mapper\\LanguageMapper.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.Language\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.preference.model.LanguagePreference\nfun LanguagePreference.toLanguage(): Language {\r\n    return when (this) {\r\n        LanguagePreference.ENGLISH -> Language.ENGLISH\r", "choices": [{"text": "//        LanguagePreference.INDONESIA -> Language.INDONESIA\r\n        else -> Language.ENGLISH\r\n    }\r\n}<file_sep>/app/src/main/java/com/wisnu/kurniawan/composetodolist/foundation/datasource/preference/model/LanguagePreference.kt\npackage com.wisnu.kurniawan.composetodolist.foundation.datasource.preference.model\n\nenum class LanguagePreference {\n    ENGLISH,\n    INDONESIA\n}<file_sep>/app/src/main/java/com/wisnu/kurniawan/composet"}], "metadata": {"task_id": "Compose-ToDo/135", "ground_truth": "        LanguagePreference.INDONESIA -> Language.INDONESIA\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\mapper\\LanguageMapper.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.Credential\nimport androidx.datastore.core.DataStore\nfun getCredential(): Flow<Credential> {\r\n        return credentialDataStore.data\r\n            .map { Credential(it.token) }\r", "choices": [{"text": "\n import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.Credential\nimport androidx.datastore.core.DataStore\nfun getCredential(): Flow<Credential> {\r\n        return credentialDataStore.data\r\n           .map { Credential(it.token) }\r\n}<file_sep>package com.wisnu.kurniawan.composetodolist.ui.main\n\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material.Button\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.navigation.NavController\nimport com"}], "metadata": {"task_id": "Compose-ToDo/138", "ground_truth": "            .catch { emit(Credential(token = \"\")) }\r\n            .flowOn(dispatcher)\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\provider\\CredentialProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.Credential\nsuspend fun setCredential(data: Credential) {\r\n        withContext(dispatcher) {\r", "choices": [{"text": "//            val credential = Credential(data.username, data.password)\r\n            val credential = Credential(data.username, data.password)\r\n            credential.save()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/139", "ground_truth": "            credentialDataStore.updateData {\r\n                CredentialPreference(data.token)\r\n            }\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\provider\\CredentialProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.Language\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.preference.mapper.toLanguage\nimport androidx.datastore.core.DataStore\nfun getLanguage(): Flow<Language> {\r\n        return languageDataStore.data.map { it.toLanguage() }\r", "choices": [{"text": "}<file_sep>package com.wisnu.kurniawan.composetodolist.foundation.datasource.preference.mapper\n\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.preference.LanguageDataStore\nimport com.wisnu.kurniawan.composetodolist.model.Language\n\nfun LanguageDataStore.toLanguage(): Language {\n    return Language(\n        language = language,\n        isDefault = isDefault\n    )\n}<file_sep>package com.wisnu.kurniawan.composetodolist.foundation.datasource.preference"}], "metadata": {"task_id": "Compose-ToDo/140", "ground_truth": "            .catch { emit(Language.ENGLISH) }\r\n            .flowOn(dispatcher)\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\provider\\LanguageProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.Language\nsuspend fun setLanguage(data: Language) {\r\n        withContext(dispatcher) {\r", "choices": [{"text": "//            val language = data.language\r\n//            val locale = Locale(language)\r\n//            Locale.setDefault(locale)\r\n//            val config = Configuration()\r\n//            config.locale = locale\r\n//            context.resources.updateConfiguration(config, context.resources.displayMetrics)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/141", "ground_truth": "            languageDataStore.updateData {\r\n                data.toLanguagePreference()\r\n            }\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\provider\\LanguageProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.Theme\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.preference.mapper.toTheme\nimport androidx.datastore.core.DataStore\nfun getTheme(): Flow<Theme> {\r\n        return themeDataStore.data.map { it.toTheme() }\r", "choices": [{"text": "}<file_sep>package com.wisnu.kurniawan.composetodolist.foundation.datasource.preference.mapper\n\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.preference.ThemeDataStore\nimport com.wisnu.kurniawan.composetodolist.model.Theme\n\nfun ThemeDataStore.Data.toTheme() = Theme(\n    isDarkMode = isDarkMode\n)<file_sep>package com.wisnu.kurniawan.composetodolist.foundation.datasource.preference\n\nimport androidx.datastore"}], "metadata": {"task_id": "Compose-ToDo/142", "ground_truth": "            .catch { emit(Theme.SYSTEM) }\r\n            .flowOn(dispatcher)\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\provider\\ThemeProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.Theme\nsuspend fun setTheme(data: Theme) {\r\n        withContext(dispatcher) {\r", "choices": [{"text": "//            val theme = when (data) {\r\n//                Theme.LIGHT -> AppCompatDelegate.MODE_NIGHT_NO\r\n//                Theme.DARK -> AppCompatDelegate.MODE_NIGHT_YES\r\n//                Theme.SYSTEM -> AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM\r\n//            }\r\n//            AppCompatDelegate.setDefaultNightMode(theme)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/143", "ground_truth": "            themeDataStore.updateData {\r\n                data.toThemePreference()\r\n            }\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\provider\\ThemeProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.User\nimport androidx.datastore.core.DataStore\nfun getUser(): Flow<User> {\r\n        return userDataStore.data\r\n            .map { User(it.email) }\r", "choices": [{"text": "\n import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.User\nimport androidx.datastore.core.DataStore\nfun getUser(): Flow<User> {\r\n        return userDataStore.data\r\n           .map { User(it.email) }\r\n}\n"}], "metadata": {"task_id": "Compose-ToDo/144", "ground_truth": "            .catch { emit(User(email = \"\")) }\r\n            .flowOn(dispatcher)\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\provider\\UserProvider.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport com.wisnu.kurniawan.composetodolist.model.User\nsuspend fun setUser(data: User) {\r\n        withContext(dispatcher) {\r", "choices": [{"text": "//            val user = User(data.id, data.name, data.email, data.password)\r\n            val user = User(data.id, data.name, data.email, data.password)\r\n            userDao.insert(user)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/145", "ground_truth": "            userDataStore.updateData {\r\n                UserPreference(data.email)\r\n            }\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\datasource\\preference\\provider\\UserProvider.kt"}}
{"prompt": "\n import javax.inject.Singleton\nimport dagger.hilt.android.qualifiers.ApplicationContext\nimport dagger.Provides\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.dao.ToDoGroupWriteDao\nimport android.content.Context\n @Singleton\r\n    @Provides\r\n    fun provideToDoGroupWriteDao(@ApplicationContext context: Context): ToDoGroupWriteDao {\r", "choices": [{"text": "return ToDoGroupWriteDao(context)\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/150", "ground_truth": "        return ToDoDatabase.getInstance(context)\r\n            .toDoGroupWriteDao()\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\di\\LocalModule.kt"}}
{"prompt": "\n import javax.inject.Singleton\nimport dagger.hilt.android.qualifiers.ApplicationContext\nimport dagger.Provides\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.dao.ToDoListWriteDao\nimport android.content.Context\n @Singleton\r\n    @Provides\r\n    fun provideToDoListWriteDao(@ApplicationContext context: Context): ToDoListWriteDao {\r", "choices": [{"text": "//        return Room.databaseBuilder(\r\n//            context,\r\n//            ToDoListDatabase::class.java,\r\n//            \"todo_list_database\"\r\n//        ).build().toDoListWriteDao()\r\n        return ToDoListDatabase.getInstance(context).toDoListWriteDao()\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/151", "ground_truth": "        return ToDoDatabase.getInstance(context)\r\n            .toDoListWriteDao()\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\di\\LocalModule.kt"}}
{"prompt": "\n import javax.inject.Singleton\nimport dagger.hilt.android.qualifiers.ApplicationContext\nimport dagger.Provides\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.dao.ToDoTaskWriteDao\nimport android.content.Context\n @Singleton\r\n    @Provides\r\n    fun provideToDoTaskWriteDao(@ApplicationContext context: Context): ToDoTaskWriteDao {\r", "choices": [{"text": "return ToDoTaskWriteDao(context)\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/152", "ground_truth": "        return ToDoDatabase.getInstance(context)\r\n            .toDoTaskWriteDao()\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\di\\LocalModule.kt"}}
{"prompt": "\n import javax.inject.Singleton\nimport dagger.hilt.android.qualifiers.ApplicationContext\nimport dagger.Provides\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.dao.ToDoStepWriteDao\nimport android.content.Context\n @Singleton\r\n    @Provides\r\n    fun provideToDoStepWriteDao(@ApplicationContext context: Context): ToDoStepWriteDao {\r", "choices": [{"text": "return ToDoStepWriteDao(context)\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/153", "ground_truth": "        return ToDoDatabase.getInstance(context)\r\n            .toDoStepWriteDao()\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\di\\LocalModule.kt"}}
{"prompt": "\n import javax.inject.Singleton\nimport dagger.hilt.android.qualifiers.ApplicationContext\nimport dagger.Provides\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.dao.ToDoGroupReadDao\nimport android.content.Context\n @Singleton\r\n    @Provides\r\n    fun provideToDoGroupReadDao(@ApplicationContext context: Context): ToDoGroupReadDao {\r", "choices": [{"text": "return ToDoGroupReadDao(context)\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/154", "ground_truth": "        return ToDoDatabase.getInstance(context)\r\n            .toDoGroupReadDao()\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\di\\LocalModule.kt"}}
{"prompt": "\n import javax.inject.Singleton\nimport dagger.hilt.android.qualifiers.ApplicationContext\nimport dagger.Provides\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.dao.ToDoListReadDao\nimport android.content.Context\n @Singleton\r\n    @Provides\r\n    fun provideToDoListReadDao(@ApplicationContext context: Context): ToDoListReadDao {\r", "choices": [{"text": "//        return Room.databaseBuilder(context, ToDoListDatabase::class.java, \"todo_list_database\")\r\n//           .build()\r\n//           .toDoListReadDao()\r\n        return ToDoListReadDao()\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/155", "ground_truth": "        return ToDoDatabase.getInstance(context)\r\n            .toDoListReadDao()\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\di\\LocalModule.kt"}}
{"prompt": "\n import javax.inject.Singleton\nimport dagger.hilt.android.qualifiers.ApplicationContext\nimport dagger.Provides\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.dao.ToDoTaskReadDao\nimport android.content.Context\n @Singleton\r\n    @Provides\r\n    fun provideToDoTaskReadDao(@ApplicationContext context: Context): ToDoTaskReadDao {\r", "choices": [{"text": "return ToDoTaskReadDao(context)\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/156", "ground_truth": "        return ToDoDatabase.getInstance(context)\r\n            .toDoTaskReadDao()\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\di\\LocalModule.kt"}}
{"prompt": "\n import javax.inject.Singleton\nimport dagger.hilt.android.qualifiers.ApplicationContext\nimport dagger.Provides\nimport com.wisnu.kurniawan.composetodolist.foundation.datasource.local.dao.ToDoStepReadDao\nimport android.content.Context\n @Singleton\r\n    @Provides\r\n    fun provideToDoStepReadDao(@ApplicationContext context: Context): ToDoStepReadDao {\r", "choices": [{"text": "return ToDoStepReadDao(context)\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/157", "ground_truth": "        return ToDoDatabase.getInstance(context)\r\n            .toDoStepReadDao()\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\di\\LocalModule.kt"}}
{"prompt": "\n private fun <T, A : Appendable> Iterable<T>.joinTo(\r\n    buffer: A,\r\n    separator: (Int) -> CharSequence\r\n): A {\r\n    val limit = -1\r\n    var count = 0\r\n    for (element in this) {\r\n        if (++count > 1) buffer.append(separator(count - 1))\r\n        if (limit < 0 || count <= limit) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/158", "ground_truth": "            buffer.append(element.toString())\r\n        } else break\r\n    }\r\n    return buffer\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\CollectionExt.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.flow\nimport kotlinx.coroutines.flow.Flow\nsuspend fun duplicateNameResolver(\r\n    updateName: suspend () -> Unit,\r\n    onDuplicate: () -> Flow<Any>\r\n): Flow<Any> {\r\n    return try {\r\n        updateName()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/161", "ground_truth": "        flow { emit(Any()) }\r\n    } catch (e: SQLiteConstraintException) {\r\n        onDuplicate()\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\DuplicateNameResolverExt.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.flow\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoGroup\nfun resolveGroupName(\r\n    name: String,\r\n    toDoGroups: Flow<List<ToDoGroup>>,\r\n    updateNameWithNewName: OnResolveDuplicateName,\r\n): Flow<Any> {\r\n    return resolveName(\r\n        name,\r\n        toDoGroups\r", "choices": [{"text": "//        updateNameWithNewName\r\n    )\r\n}\r\n\r\nfun resolveName(\r\n    name: String,\r\n    toDoGroups: Flow<List<ToDoGroup>>,\r\n    updateNameWithNewName: OnResolveDuplicateName,\r\n): Flow<Any> {\r\n    return flow {\r\n        emit(name)\r\n        val toDoGroupsList = toDoGroups.first()\r\n        val toDoGroup = toDoGroupsList.find { it.name == name }\r\n        if (toDoGroup!= null) {\r\n            emit(toDoGroup)\r\n            updateNameWithNewName(name)\r\n        }\r\n    }\r"}], "metadata": {"task_id": "Compose-ToDo/162", "ground_truth": "            .take(1)\r\n            .map { group -> group.map { it.name } },\r\n        updateNameWithNewName\r\n    )\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\DuplicateNameResolverExt.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.flow\nimport kotlinx.coroutines.flow.Flow\nimport com.wisnu.kurniawan.composetodolist.model.ToDoList\nfun resolveListName(\r\n    name: String,\r\n    toDoLists: Flow<List<ToDoList>>,\r\n    updateNameWithNewName: OnResolveDuplicateName,\r\n): Flow<Any> {\r\n    return resolveName(\r\n        name,\r\n        toDoLists\r", "choices": [{"text": "//        updateNameWithNewName\r\n    )\r\n}\r\n\r\nfun resolveName(\r\n    name: String,\r\n    toDoLists: Flow<List<ToDoList>>,\r\n    updateNameWithNewName: OnResolveDuplicateName,\r\n): Flow<Any> {\r\n    return flow {\r\n        emit(name)\r\n        emit(toDoLists)\r\n        emit(updateNameWithNewName)\r\n    }\r\n}\r\n\r\ninterface OnResolveDuplicateName {\r\n    fun onResolveDuplicateName(newName: String)\r\n}<file_sep>/app/src/main/java/com/wisnu/kurniawan"}], "metadata": {"task_id": "Compose-ToDo/163", "ground_truth": "            .take(1)\r\n            .map { list -> list.map { it.name } },\r\n        updateNameWithNewName\r\n    )\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\DuplicateNameResolverExt.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.flow\nimport kotlinx.coroutines.flow.Flow\nprivate fun resolveName(\r\n    name: String,\r\n    names: Flow<List<String>>,\r\n    updateNameWithNewName: OnResolveDuplicateName,\r\n): Flow<Any> {\r\n    return names\r\n        .map { name.resolveDuplicate(it) }\r", "choices": [{"text": "\n import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.flow\nimport kotlinx.coroutines.flow.Flow\nprivate fun resolveName(\r\n    name: String,\r\n    names: Flow<List<String>>,\r\n    updateNameWithNewName: OnResolveDuplicateName,\r\n): Flow<Any> {\r\n    return names\r\n       .map { name.resolveDuplicate(it) }\r\n}\r\n"}], "metadata": {"task_id": "Compose-ToDo/164", "ground_truth": "        .onEach { updateNameWithNewName(it) }\r\n        .map { Any() }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\DuplicateNameResolverExt.kt"}}
{"prompt": "\n fun String.resolveDuplicate(names: List<String>): String {\r\n    return if (names.any { it == this }) {\r\n        this\r\n            .addSuffixIdentifier()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/165", "ground_truth": "            .resolveDuplicate(names)\r\n    } else {\r\n        this\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\DuplicateNameResolverExt.kt"}}
{"prompt": "\n fun String.addSuffixIdentifier(): String {\r\n    if (isBlank()) return \"1\"\r\n\r\n    val names = this.split(\" \")\r\n\r\n    if (names.size == 1) return \"$this 1\"\r\n\r\n    val currentIdentifier = names.last().toIntOrNull() ?: return \"$this 1\"\r\n\r\n    val lastIndex = names.lastIndex\r\n\r\n    return names.foldIndexed(\r\n        \"\"\r\n    ) { index, acc, cur ->\r\n        when {\r\n            index == lastIndex -> acc + \" ${currentIdentifier + 1}\"\r", "choices": [{"text": "\n fun String.addSuffixIdentifier(): String {\r\n    if (isBlank()) return \"1\"\r\n\r\n    val names = this.split(\" \")\r\n\r\n    if (names.size == 1) return \"$this 1\"\r\n\r\n    val currentIdentifier = names.last().toIntOrNull()?: return \"$this 1\"\r\n\r\n    val lastIndex = names.lastIndex\r\n\r\n    return names.foldIndexed(\r\n        \"\"\r\n    ) { index, acc, cur ->\r\n        when {\r\n            index == lastIndex -> acc + \" ${currentIdentifier + 1}\"\r\n//            index == lastIndex - 1 -> acc + \" ${currentIdentifier + 1}\"\r\n            else -> acc + \" $cur\"\r\n        }\r\n    }\r\n}\r\n\r\nfun String.addPrefixIdentifier(): String {\r\n    if (isBlank()) return \"1\"\r\n\r\n    val names = this.split(\" \")\r\n\r\n    if (names.size == 1) return \"$this 1\"\r\n\r\n    val currentIdentifier = names.last().toIntOrNull()?: return \"$this 1\"\r\n\r\n    val lastIndex = names.lastIndex\r\n\r\n    return names.foldIndexed(\r\n        \"\"\r\n    ) { index, acc, cur ->"}], "metadata": {"task_id": "Compose-ToDo/166", "ground_truth": "            acc.isBlank() -> cur\r\n            else -> \"$acc $cur\"\r\n        }\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\DuplicateNameResolverExt.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.CoroutineScope\nfun <T> debounce(\r\n    waitMs: Long = 300L,\r\n    coroutineScope: CoroutineScope,\r\n    destinationFunction: (T) -> Unit\r\n): (T) -> Unit {\r\n    var debounceJob: Job? = null\r\n    return { param: T ->\r\n        debounceJob?.cancel()\r\n        debounceJob = coroutineScope.launch {\r", "choices": [{"text": "//            delay(waitMs)\r\n            destinationFunction(param)\r\n        }\r\n    }\r\n}<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\r\n\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.lifecycle.lifecycleScope\r\nimport kotlinx.coroutines.delay\r\nimport kotlinx"}], "metadata": {"task_id": "Compose-ToDo/167", "ground_truth": "            delay(waitMs)\r\n            destinationFunction(param)\r\n        }\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\FlowExt.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.features.todo.detail.ui.ToDoTaskItem\nfun ToDoTaskItem.identifier() = when (this) {\r\n    is ToDoTaskItem.CompleteHeader -> id\r", "choices": [{"text": "}<file_sep>/app/src/main/java/com/wisnu/kurniawan/composetodolist/features/todo/detail/ui/ToDoTaskItem.kt\npackage com.wisnu.kurniawan.composetodolist.features.todo.detail.ui\n\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material.Checkbox\nimport androidx.compose."}], "metadata": {"task_id": "Compose-ToDo/168", "ground_truth": "    is ToDoTaskItem.Complete -> toDoTask.id\r\n    is ToDoTaskItem.InProgress -> toDoTask.id\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\IdentifierExt.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.features.todo.all.ui.ItemAllState\nfun ItemAllState.identifier() = when (this) {\r\n    is ItemAllState.Task.Complete -> task.id\r", "choices": [{"text": "}<file_sep>/app/src/main/java/com/wisnu/kurniawan/composetodolist/features/todo/all/ui/ItemAllState.kt\npackage com.wisnu.kurniawan.composetodolist.features.todo.all.ui\n\nimport com.wisnu.kurniawan.composetodolist.features.todo.all.domain.Task\n\nsealed class ItemAllState {\n    data class Task(val task: Task) : ItemAllState()\n}<file_sep>/app/src/main/java"}], "metadata": {"task_id": "Compose-ToDo/169", "ground_truth": "    is ItemAllState.Task.InProgress -> task.id\r\n    is ItemAllState.List -> list.id\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\IdentifierExt.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.features.todo.scheduled.ui.ItemScheduledState\nfun ItemScheduledState.identifier() = when (this) {\r\n    is ItemScheduledState.Header -> date.toString()\r", "choices": [{"text": "}<file_sep>/app/src/main/java/com/wisnu/kurniawan/composetodolist/features/todo/scheduled/ui/ItemScheduledState.kt\npackage com.wisnu.kurniawan.composetodolist.features.todo.scheduled.ui\n\nimport com.wisnu.kurniawan.composetodolist.features.todo.scheduled.data.Scheduled\n\nsealed class ItemScheduledState {\n    data class Header(val date: String) : ItemScheduledState()\n    data class Item(val scheduled: Scheduled) :"}], "metadata": {"task_id": "Compose-ToDo/170", "ground_truth": "    is ItemScheduledState.Task.Complete -> task.id\r\n    is ItemScheduledState.Task.InProgress -> task.id\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\IdentifierExt.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.features.todo.main.ui.ItemMainState\nfun ItemMainState.identifier() = when (this) {\r", "choices": [{"text": "is ItemMainState.Loading -> \"loading\"\r\nis ItemMainState.Success -> \"success\"\r\nis ItemMainState.Error -> \"error\"\r\n}<file_sep>/app/src/main/java/com/wisnu/kurniawan/composetodolist/features/todo/main/ui/ItemMainState.kt\npackage com.wisnu.kurniawan.composetodolist.features.todo.main.ui\r\n\r\nimport com.wisnu.kurniawan.composetodolist.features.todo.main.model"}], "metadata": {"task_id": "Compose-ToDo/171", "ground_truth": "    is ItemMainState.ItemGroup -> group.id\r\n    is ItemMainState.ItemListType -> list.id\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\IdentifierExt.kt"}}
{"prompt": "\n fun String.ellipsisAt(n: Int): String {\r\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\r\n    return if (length > n) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/173", "ground_truth": "        substring(0, n.coerceAtMost(length)) + \"...\"\r\n    } else {\r\n        this\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\StringExt.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoStatus\nfun ToDoStatus.toggle(): ToDoStatus {\r\n    return when (this) {\r\n        ToDoStatus.IN_PROGRESS -> ToDoStatus.COMPLETE\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/175", "ground_truth": "        ToDoStatus.COMPLETE -> ToDoStatus.IN_PROGRESS\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\ToDoStatusExt.kt"}}
{"prompt": "\n import java.time.LocalDateTime\nimport java.time.LocalDate\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.model.ToDoRepeat\nfun ToDoTask.getScheduledDueDate(currentDate: LocalDateTime): LocalDateTime {\r\n    require(dueDate != null)\r\n\r\n    return if (repeat != ToDoRepeat.NEVER) {\r\n        if (isExpired(currentDate)) {\r\n            currentDate.plusMinutes(1)\r\n        } else {\r\n            dueDate\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/176", "ground_truth": "        }\r\n    } else {\r\n        dueDate\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\ToDoTaskExt.kt"}}
{"prompt": "\n import java.time.LocalDateTime\nimport java.time.LocalDate\nimport com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.model.ToDoStatus\nimport com.wisnu.kurniawan.composetodolist.model.ToDoRepeat\nsuspend fun ToDoTask.toggleStatusHandler(\r\n    currentDate: LocalDateTime,\r\n    onUpdateStatus: suspend (LocalDateTime?, ToDoStatus) -> Unit,\r\n    onUpdateDueDate: suspend (LocalDateTime) -> Unit,\r\n) {\r\n    if (repeat == ToDoRepeat.NEVER) {\r\n        val newStatus = status.toggle()\r\n        val completedAt = when (newStatus) {\r\n            ToDoStatus.IN_PROGRESS -> null\r\n            ToDoStatus.COMPLETE -> currentDate\r\n        }\r\n        onUpdateStatus(completedAt, newStatus)\r", "choices": [{"text": "//        onUpdateDueDate(completedAt)\r\n    } else {\r\n        val newStatus = status.toggle()\r\n        val completedAt = when (newStatus) {\r\n            ToDoStatus.IN_PROGRESS -> null\r\n            ToDoStatus.COMPLETE -> currentDate\r\n        }\r\n        onUpdateStatus(completedAt, newStatus)\r\n        onUpdateDueDate(completedAt)\r\n    }\r\n}\r\n\r\nsuspend fun ToDoTask.toggleStatusHandler(\r\n    currentDate: LocalDateTime,\r\n    onUpdateStatus: suspend (LocalDateTime?, ToDoStatus) -> Unit,\r\n    onUpdateDueDate: suspend (LocalDateTime) -> Unit,\r\n    onUpdateRepeat: suspend"}], "metadata": {"task_id": "Compose-ToDo/177", "ground_truth": "    } else {\r\n        val nextDueDate = getNextScheduledDueDate(currentDate)\r\n        onUpdateDueDate(nextDueDate)\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\extension\\ToDoTaskExt.kt"}}
{"prompt": "\n import android.os.LocaleList\nimport android.os.Build\nimport android.content.res.Resources\nimport android.content.res.Configuration\nprivate fun getOverridingConfig(locale: Locale, resources: Resources): Configuration {\r\n        val configuration = resources.configuration\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n            configuration.setLocales(LocaleList(locale))\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/179", "ground_truth": "        } else {\r\n            configuration.locale = locale\r\n        }\r\n        return configuration\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\localization\\LocalizationUtil.kt"}}
{"prompt": "\n import android.os.Build\nimport android.content.res.Configuration\nprivate fun getLocale(configuration: Configuration): Locale {\r\n        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r", "choices": [{"text": "configuration.locales.get(0)\r\n        } else {\r\nconfiguration.locale\r\n        }\r\n}\n"}], "metadata": {"task_id": "Compose-ToDo/180", "ground_truth": "            configuration.locales.get(0)\r\n        } else {\r\n            configuration.locale\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\localization\\LocalizationUtil.kt"}}
{"prompt": "\n fun dummyRandomData() = buildGroup(\r\n    muchGroup = 5,\r\n    muchList = 10,\r", "choices": [{"text": ")\r\n"}], "metadata": {"task_id": "Compose-ToDo/181", "ground_truth": "    muchTask = 10,\r\n    muchStep = 5\r\n)", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\preview\\DummyData.kt"}}
{"prompt": "\n fun dummySmallData() = buildGroup(\r\n    muchGroup = 10,\r\n    muchList = 1,\r", "choices": [{"text": ")\r\n"}], "metadata": {"task_id": "Compose-ToDo/182", "ground_truth": "    muchTask = 1,\r\n    muchStep = 1\r\n)", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\preview\\DummyData.kt"}}
{"prompt": "\n fun dummyEmptyData() = buildGroup(\r\n    muchGroup = 0,\r\n    muchList = 0,\r", "choices": [{"text": ")\r\n"}], "metadata": {"task_id": "Compose-ToDo/183", "ground_truth": "    muchTask = 0,\r\n    muchStep = 0\r\n)", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\preview\\DummyData.kt"}}
{"prompt": "\n private fun <T> build(much: Int, obj: (Int) -> T): List<T> {\r\n    val list = mutableListOf<T>()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/188", "ground_truth": "    for (i in 0 until much) {\r\n        list.add(obj(i))\r\n    }\r\n    return list\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\preview\\DummyData.kt"}}
{"prompt": "\n import androidx.navigation.compose.rememberNavController\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.NavController\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun NavPg() {\r\n\r\n    val navController = rememberNavController()\r\n\r\n    NavHost(\r\n        navController = navController,\r\n        startDestination = \"root\"\r\n    ) {\r", "choices": [{"text": "//        composable(\"root\") {\r\n//            RootScreen(navController)\r\n//        }\r\n        composable(\"root\") {\r\n            RootScreen(navController)\r\n        }\r\n        composable(\"login\") {\r\n            LoginScreen(navController)\r\n        }\r\n        composable(\"register\") {\r\n            RegisterScreen(navController)\r\n        }\r\n        composable(\"home\") {\r\n            HomeScreen(navController)\r\n        }\r\n        composable(\"profile\") {\r\n            ProfileScreen(navController)\r\n        }\r\n        composable(\"settings\") {\r\n            SettingsScreen(navController)\r\n        }\r\n        composable(\"about\") {\r\n           "}], "metadata": {"task_id": "Compose-ToDo/189", "ground_truth": "        composable(route = \"root\") {\r\n            View1(navController = navController)\r\n        }\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\preview\\NavPlayground.kt"}}
{"prompt": "\n import androidx.navigation.NavController\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.Button\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.Column\n\r\n@Composable\r\nfun View3(navController: NavController) {\r\n    Column(\r\n        modifier = Modifier.fillMaxSize()\r\n    ) {\r\n        Text(\"View 3\")\r\n        Button(\r\n            {\r\n\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/190", "ground_truth": "        ) {\r\n            Text(\"Button\")\r\n        }\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\preview\\NavPlayground.kt"}}
{"prompt": "\n import androidx.navigation.NavController\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.Button\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.Column\n\r\n@Composable\r\nfun View4(navController: NavController, vm2: Vm2) {\r\n    Column(\r\n        modifier = Modifier.fillMaxSize().padding(50.dp)\r\n    ) {\r\n        val state = vm2.data1.state.collectAsStateWithLifecycle()\r\n        Text(\"View 4 ${state.value}\")\r\n        Button(\r\n            {\r\n                navController.navigate(\"root2a\")\r\n            }\r\n        ) {\r\n            Text(\"Button\")\r\n        }\r\n\r\n        Button(\r\n            {\r\n                vm2.inc()\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/191", "ground_truth": "        ) {\r\n            Text(\"Button2\")\r\n        }\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\preview\\NavPlayground.kt"}}
{"prompt": "\n import androidx.navigation.NavController\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.Button\n\r\n@Composable\r\nfun View5(navController: NavController, vm2: Vm2) {\r\n    val state = vm2.data1.state.collectAsStateWithLifecycle()\r\n    Text(\"View 5 ${state.value}\")\r\n\r\n    Button(\r\n        {\r\n            vm2.inc()\r", "choices": [{"text": "//            navController.navigate(\"view6\")\r\n        },\r\n        { Text(\"Next\") }\r\n    )\r\n}<file_sep>/app/src/main/java/com/example/navigation/view/View1.kt\npackage com.example.navigation.view\n\nimport androidx.compose.runtime.Composable\nimport androidx.navigation.NavController\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.Button\n\n@Composable\nfun View1(navController: NavController, vm1: Vm1)"}], "metadata": {"task_id": "Compose-ToDo/192", "ground_truth": "        }\r\n    ) {\r\n        Text(\"Button inc\")\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\preview\\NavPlayground.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun inc() {\r\n        viewModelScope.launch {\r", "choices": [{"text": "//            val result = repository.getUsers()\r\n//            _users.value = result\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/193", "ground_truth": "            data1.inc()\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\preview\\NavPlayground.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun inc() {\r\n        viewModelScope.launch {\r", "choices": [{"text": "//            val result = repository.getUsers()\r\n//            _users.value = result\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/194", "ground_truth": "            data1.inc()\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\preview\\NavPlayground.kt"}}
{"prompt": "\n import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.Button\nimport androidx.compose.material.icons.rounded.ChevronLeft\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.foundation.layout.size\n\r\n@Composable\r\nfun PgModalBackButton(\r\n    onClick: () -> Unit,\r\n    imageVector: ImageVector = Icons.Rounded.ChevronLeft\r\n) {\r\n    PgIconButton(\r\n        onClick = onClick,\r\n        modifier = Modifier.size(28.dp),\r\n        color = MaterialTheme.colorScheme.surfaceVariant\r\n    ) {\r", "choices": [{"text": "//        Icon(\r\n//            imageVector,\r\n//            contentDescription = null,\r\n//            tint = MaterialTheme.colorScheme.surfaceVariant\r\n//        )\r\n        Icon(\r\n            imageVector,\r\n            contentDescription = null,\r\n            tint = MaterialTheme.colorScheme.surfaceVariant\r\n        )\r\n    }\r\n}<file_sep>/app/src/main/java/com/example/pg/ui/components/PgModal.kt\npackage com.example.pg.ui.components\n\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation."}], "metadata": {"task_id": "Compose-ToDo/195", "ground_truth": "        PgIcon(\r\n            imageVector = imageVector,\r\n        )\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\Button.kt"}}
{"prompt": "\n import androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.Button\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.background\n\r\n@Composable\r\nfun PgIconButton(\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    enabled: Boolean = true,\r\n    color: Color = MaterialTheme.colorScheme.secondary,\r\n    content: @Composable () -> Unit\r\n) {\r\n    val shape = CircleShape\r\n    IconButton(\r\n        onClick = onClick,\r\n        modifier = modifier.background(\r\n            color = color,\r\n            shape = shape\r\n        ).clip(shape),\r", "choices": [{"text": "//        enabled = enabled,\r\n        content = content\r\n    )\r\n}<file_sep>/app/src/main/java/com/example/myapplication/ui/theme/Color.kt\npackage com.example.myapplication.ui.theme\n\nimport androidx.compose.ui.graphics.Color\n\nval Purple200 = Color(0xFFBB86FC)\nval Purple500 = Color(0xFF6200EE)\nval Purple700 = Color(0xFF3700B3)\nval Teal200 = Color("}], "metadata": {"task_id": "Compose-ToDo/196", "ground_truth": "        enabled = enabled\r\n    ) {\r\n        content()\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\Button.kt"}}
{"prompt": "\n import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.OutlinedButton\nimport androidx.compose.material3.Button\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.RowScope\n\r\n@Composable\r\nfun PgSecondaryButton(\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    content: @Composable RowScope.() -> Unit\r\n) {\r\n    OutlinedButton(\r\n        modifier = modifier.height(56.dp),\r", "choices": [{"text": "//        shape = RoundedCornerShape(16.dp),\r\n        onClick = onClick,\r\n        content = content\r\n    )\r\n}\r\n\r\n@Composable\r\nfun PgPrimaryButton(\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    content: @Composable RowScope.() -> Unit\r\n) {\r\n    Button(\r\n        modifier = modifier.height(56.dp),\r\n//        shape = RoundedCornerShape(16.dp),\r\n        onClick = onClick,\r\n        content = content\r\n    )\r\n}<file_sep>/app/src/main/java/com/example"}], "metadata": {"task_id": "Compose-ToDo/198", "ground_truth": "        onClick = onClick,\r\n        shape = MaterialTheme.shapes.medium,\r\n        content = content\r\n    )\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\Button.kt"}}
{"prompt": "\n import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Box\n\r\n@Composable\r\nfun PgModalBackHeader(\r\n    text: String,\r\n    onClickBack: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Row(modifier = modifier) {\r\n        Box(\r\n            modifier = Modifier\r\n                .padding(start = 16.dp)\r\n                .weight(0.2F)\r\n        ) {\r\n            PgModalBackButton(\r\n                onClick = onClickBack\r\n            )\r\n        }\r\n\r\n        PgModalTitle(\r\n            text = text,\r\n            modifier = Modifier.weight(0.6F)\r\n        )\r\n\r\n        Spacer(\r\n            Modifier\r", "choices": [{"text": "\n import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Box\n\r\n@Composable\r\nfun PgModalBackHeader(\r\n    text: String,\r\n    onClickBack: () -> Unit,\r\n    modifier: Modifier = Modifier\r\n) {\r\n    Row(modifier = modifier) {\r\n        Box(\r\n            modifier = Modifier\r\n               .padding(start = 16.dp)\r\n               .weight(0.2F)\r\n        ) {\r\n            PgModalBackButton(\r\n                onClick = onClickBack\r\n            )\r\n        }\r\n\r\n        PgModalTitle(\r\n            text = text,\r\n            modifier = Modifier.weight(0.6F)\r\n        )\r\n\r\n        Spacer(\r\n            Modifier\r\n//               .weight(0.2F)\r\n               .padding(end = 16.dp)\r\n        )\r\n    }\r\n}<file_sep>/app/src/main/java/com/example/pg_compose/ui/components/PgModalBackButton.kt\npackage com.example.pg_compose.ui.components\n\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.material.Icon\nimport androidx.compose.material.IconButton\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ArrowBack\nimport"}], "metadata": {"task_id": "Compose-ToDo/202", "ground_truth": "                .size(0.dp)\r\n                .weight(0.2F)\r\n        )\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\Header.kt"}}
{"prompt": "\n import androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.LocalContentColor\nimport androidx.compose.material3.Icon\n\r\n@Composable\r\nfun PgIcon(\r\n    modifier: Modifier = Modifier,\r\n    imageVector: ImageVector,\r\n    tint: Color = LocalContentColor.current,\r\n) {\r\n    Icon(\r\n        imageVector = imageVector,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/203", "ground_truth": "        contentDescription = \"\",\r\n        tint = tint,\r\n        modifier = modifier\r\n    )\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\Icon.kt"}}
{"prompt": "\n import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.lazy.LazyListScope\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.Column\n\r\n@Composable\r\nfun PgModalLayout(\r\n    title: @Composable () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n    content: LazyListScope.() -> Unit\r\n) {\r\n    PgModalLazyColumn(modifier) {\r\n        item {\r\n            Spacer(Modifier.height(24.dp))\r\n            title()\r\n            Spacer(Modifier.height(24.dp))\r\n        }\r\n\r\n        content()\r\n\r", "choices": [{"text": "//        item {\r\n//            Spacer(Modifier.height(24.dp))\r\n//            PgButton(\r\n//                text = { Text(text = \"Cancel\") },\r\n//                modifier = Modifier.fillMaxWidth(),\r\n//                onClick = {\r\n//                    PgModal.dismiss()\r\n//                }\r\n//            )\r\n//        }\r\n    }\r\n}<file_sep>/app/src/main/java/com/example/pg_compose/ui/theme/Color.kt\npackage com.example.pg_compose."}], "metadata": {"task_id": "Compose-ToDo/205", "ground_truth": "        item {\r\n            Spacer(Modifier.height(8.dp))\r\n        }\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\Layout.kt"}}
{"prompt": "\n import androidx.compose.ui.graphics.Shape\nimport androidx.compose.ui.graphics.RectangleShape\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.foundation.lazy.LazyListScope\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.layout.navigationBarsPadding\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.background\n\r\n@Composable\r\nfun PgModalLazyColumn(\r\n    modifier: Modifier = Modifier,\r\n    shape: Shape = RectangleShape,\r\n    content: LazyListScope.() -> Unit\r\n) {\r\n    Box(\r\n        modifier = Modifier.background(\r\n            color = MaterialTheme.colorScheme.background,\r\n            shape = shape\r\n        )\r\n    ) {\r\n        LazyColumn(\r\n            modifier = modifier\r\n                .navigationBarsPadding()\r", "choices": [{"text": "\n import androidx.compose.ui.graphics.Shape\nimport androidx.compose.ui.graphics.RectangleShape\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.foundation.lazy.LazyListScope\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.layout.navigationBarsPadding\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.background\n\r\n@Composable\r\nfun PgModalLazyColumn(\r\n    modifier: Modifier = Modifier,\r\n    shape: Shape = RectangleShape,\r\n    content: LazyListScope.() -> Unit\r\n) {\r\n    Box(\r\n        modifier = Modifier.background(\r\n            color = MaterialTheme.colorScheme.background,\r\n            shape = shape\r\n        )\r\n    ) {\r\n        LazyColumn(\r\n            modifier = modifier\r\n               .navigationBarsPadding()\r\n//               .fillMaxSize()\r\n        ) {\r\n            content()\r\n        }\r\n    }\r\n}<file_sep>/app/src/main/java/com/example/compose/ui/theme/Color.kt\npackage com.example.compose.ui.theme\n\nimport androidx.compose.ui.graphics.Color\n\nval Purple200 = Color(0xFFBB86FC)\nval Purple500 = Color(0xFF6200EE)\nval Purple700 = Color(0xFF3700B3)\nval Teal200 ="}], "metadata": {"task_id": "Compose-ToDo/206", "ground_truth": "                .imePadding(),\r\n            content = content\r\n        )\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\Layout.kt"}}
{"prompt": "\n import androidx.compose.ui.Modifier\nimport androidx.compose.ui.Alignment\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.foundation.layout.navigationBarsPadding\nimport androidx.compose.foundation.layout.imePadding\nimport androidx.compose.foundation.layout.RowScope\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.background\n\r\n@Composable\r\nfun PgModalRow(\r\n    modifier: Modifier = Modifier,\r\n    horizontalArrangement: Arrangement.Horizontal = Arrangement.Start,\r\n    verticalAlignment: Alignment.Vertical = Alignment.Top,\r\n    content: @Composable RowScope.() -> Unit\r\n) {\r\n    Box(\r\n        modifier = Modifier.background(\r\n            color = MaterialTheme.colorScheme.background\r\n        )\r\n    ) {\r\n        Row(\r\n            modifier = modifier\r\n                .navigationBarsPadding()\r\n                .imePadding(),\r\n            horizontalArrangement = horizontalArrangement,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/207", "ground_truth": "            verticalAlignment = verticalAlignment,\r\n            content = content\r\n        )\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\Layout.kt"}}
{"prompt": "\n import androidx.compose.runtime.remember\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun rememberSwipeSearchState(\r\n    initialValue: SwipeSearchValue\r\n): SwipeSearchState {\r\n    return remember {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/208", "ground_truth": "        SwipeSearchState(initialValue)\r\n    }.apply {\r\n        this.currentValue = initialValue\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\SwipeSearch.kt"}}
{"prompt": "\n import androidx.compose.ui.geometry.Offset\nimport androidx.compose.animation.core.animate\ninternal suspend fun animateOffsetTo(offset: Float) {\r\n        mutatorMutex.mutate {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/209", "ground_truth": "            offsetState.animateTo(offset)\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\SwipeSearch.kt"}}
{"prompt": "\n import androidx.compose.foundation.MutatePriority\ninternal suspend fun dispatchScrollDelta(delta: Float, max: Float) {\r\n        mutatorMutex.mutate(MutatePriority.UserInput) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/210", "ground_truth": "            offsetState.snapTo((offsetState.value + delta).coerceAtMost(max))\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\SwipeSearch.kt"}}
{"prompt": "\n import androidx.compose.ui.input.nestedscroll.NestedScrollSource\nimport androidx.compose.ui.geometry.Offset\noverride fun onPreScroll(\r\n        available: Offset,\r\n        source: NestedScrollSource\r\n    ): Offset {\r\n        return when {\r\n            // If isn't enabled, return zero\r\n            !enabled -> Offset.Zero\r\n            // If scroll up, handle it\r\n            source == NestedScrollSource.Drag && available.y < 0 -> {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/211", "ground_truth": "                performDrag(available, SCROLL_UP)\r\n            }\r\n            else -> Offset.Zero\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\SwipeSearch.kt"}}
{"prompt": "\n import androidx.compose.ui.unit.Velocity\noverride suspend fun onPreFling(available: Velocity): Velocity {\r\n        performFling(available)\r\n\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Compose-ToDo/212", "ground_truth": "        // Reset to default\r\n        shouldConsumeScrollDown = true\r\n\r\n        return Velocity.Zero\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\SwipeSearch.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nfun ToDoTask.timeDisplayable(): String? {\r\n    return if (isDueDateTimeSet) {\r", "choices": [{"text": "//        val date = Date(dueDateTime)\r\n//        val formatter = SimpleDateFormat(\"dd MMM yyyy HH:mm\", Locale.getDefault())\r\n//        formatter.format(date)\r\n        val date = Date(dueDateTime)\r\n        val formatter = SimpleDateFormat(\"dd MMM yyyy\", Locale.getDefault())\r\n        formatter.format(date)\r\n    } else {\r\n        null\r\n    }\r\n}\n"}], "metadata": {"task_id": "Compose-ToDo/215", "ground_truth": "        dueDate?.toLocalTime().toString()\r\n    } else {\r\n        null\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\ToDoTaskDisplayable.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.model.ToDoRepeat\nimport com.wisnu.kurniawan.composetodolist.foundation.extension.displayable\nimport com.wisnu.kurniawan.composetodolist.R\nimport android.content.res.Resources\nprivate fun ToDoTask.dueDateInfo(resources: Resources): String {\r\n    val info = StringBuilder()\r\n    val dueDateInfo = dueDateDisplayable(resources)\r\n    val timeInfo = timeDisplayable()\r\n\r\n    return if (dueDateInfo != null) {\r\n        info.append(dueDateInfo)\r\n        if (timeInfo != null) info.append(\" $timeInfo\")\r\n        if (repeat != ToDoRepeat.NEVER) info.append(\", ${resources.getString(repeat.displayable())}\")\r", "choices": [{"text": "\n import com.wisnu.kurniawan.composetodolist.model.ToDoTask\nimport com.wisnu.kurniawan.composetodolist.model.ToDoRepeat\nimport com.wisnu.kurniawan.composetodolist.foundation.extension.displayable\nimport com.wisnu.kurniawan.composetodolist.R\nimport android.content.res.Resources\nprivate fun ToDoTask.dueDateInfo(resources: Resources): String {\r\n    val info = StringBuilder()\r\n    val dueDateInfo = dueDateDisplayable(resources)\r\n    val timeInfo = timeDisplayable()\r\n\r\n    return if (dueDateInfo!= null) {\r\n        info.append(dueDateInfo)\r\n        if (timeInfo!= null) info.append(\" $timeInfo\")\r\n        if (repeat!= ToDoRepeat.NEVER) info.append(\", ${resources.getString(repeat.displayable())}\")\r\n//        if (repeat!= ToDoRepeat.NEVER) info.append(\", ${repeat.displayable()}\")\r\n        info.toString()\r\n    } else {\r\n        if (timeInfo!= null) info.append(timeInfo)\r\n        if (repeat!= ToDoRepeat.NEVER) info.append(\", ${resources.getString(repeat.displayable())}\")\r\n//        if (repeat!= ToDoRepeat.NEVER) info.append(\", ${repeat.displayable()}\")\r\n        info.toString()\r\n    }\r\n}\n<file_sep>/app/src/main/java/com/wisnu/"}], "metadata": {"task_id": "Compose-ToDo/217", "ground_truth": "        info.toString()\r\n    } else {\r\n        \"\"\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uicomponent\\ToDoTaskDisplayable.kt"}}
{"prompt": "\n import androidx.compose.runtime.ReadOnlyComposable\nimport androidx.compose.runtime.Composable\nimport androidx.annotation.BoolRes\n\r\n@Composable\r\n@ReadOnlyComposable\r\nfun boolResource(@BoolRes id: Int): Boolean {\r", "choices": [{"text": "}\r\n<file_sep>/libraries/tools/kotlin-gradle-plugin/src/common/kotlin/org/jetbrains/kotlin/gradle/targets/js/npm/NpmPackage.kt\n/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage org.jetbrains.kotlin.gradle.targets.js.npm\n\nimport org.gradle.api.Project\nimport"}], "metadata": {"task_id": "Compose-ToDo/219", "ground_truth": "    val resources = resources()\r\n    return resources.getBoolean(id)\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uiextension\\BoolResourceExt.kt"}}
{"prompt": "\n import androidx.compose.runtime.ReadOnlyComposable\nimport androidx.compose.runtime.Composable\nimport android.content.res.Resources\n\r\n@Composable\r\n@ReadOnlyComposable\r\nprivate fun resources(): Resources {\r", "choices": [{"text": "return Resources.getSystem()\r\n}\r\n<file_sep>/android/src/main/java/com/example/android/compose/ui/theme/Color.kt\npackage com.example.android.compose.ui.theme\n\nimport androidx.compose.ui.graphics.Color\n\nval Purple200 = Color(0xFFBB86FC)\nval Purple500 = Color(0xFF6200EE)\nval Purple700 = Color(0xFF3700B3)\nval Teal200 = Color(0xFF03"}], "metadata": {"task_id": "Compose-ToDo/220", "ground_truth": "    LocalConfiguration.current\r\n    return LocalContext.current.resources\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uiextension\\BoolResourceExt.kt"}}
{"prompt": "\n import com.google.accompanist.navigation.material.ExperimentalMaterialNavigationApi\nimport com.google.accompanist.navigation.material.BottomSheetNavigator\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.rememberModalBottomSheetState\nimport androidx.compose.material.SwipeableDefaults\nimport androidx.compose.material.ModalBottomSheetValue\nimport androidx.compose.material.ModalBottomSheetState\nimport androidx.compose.material.ExperimentalMaterialApi\nimport androidx.compose.animation.core.AnimationSpec\n\r\n@ExperimentalMaterialNavigationApi\r\n@OptIn(ExperimentalMaterialApi::class)\r\n@Composable\r\nfun rememberBottomSheetNavigator(\r\n    animationSpec: AnimationSpec<Float> = SwipeableDefaults.AnimationSpec\r\n): BottomSheetNavigator {\r\n    val sheetState = rememberModalBottomSheetStateInternal(\r\n        ModalBottomSheetValue.Hidden,\r\n        animationSpec\r", "choices": [{"text": "   )\r\n    return remember(sheetState) { BottomSheetNavigator(sheetState) }\r\n}\r<file_sep>/navigation-material/src/main/java/com/google/accompanist/navigation/material/ExperimentalMaterialNavigationApi.kt\n/*\n * Copyright 2020 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses"}], "metadata": {"task_id": "Compose-ToDo/221", "ground_truth": "    )\r\n    return remember(sheetState) {\r\n        BottomSheetNavigator(sheetState = sheetState)\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uiextension\\BottomSheetNavigator.kt"}}
{"prompt": "\n import androidx.compose.runtime.remember\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.rememberModalBottomSheetState\nimport androidx.compose.material.SwipeableDefaults\nimport androidx.compose.material.ModalBottomSheetValue\nimport androidx.compose.material.ModalBottomSheetState\nimport androidx.compose.material.ExperimentalMaterialApi\nimport androidx.compose.animation.core.AnimationSpec\n\r\n@Composable\r\n@ExperimentalMaterialApi\r\nprivate fun rememberModalBottomSheetStateInternal(\r\n    initialValue: ModalBottomSheetValue,\r\n    animationSpec: AnimationSpec<Float> = SwipeableDefaults.AnimationSpec,\r\n    confirmStateChange: (ModalBottomSheetValue) -> Boolean = { true }\r\n): ModalBottomSheetState = rememberModalBottomSheetState(\r\n    initialValue = initialValue,\r\n    animationSpec = animationSpec,\r", "choices": [{"text": ") {\r\n    confirmStateChange\r\n}\r\n\r\n@Composable\r\n@ExperimentalMaterialApi\r\nfun rememberModalBottomSheetState(\r\n    initialValue: ModalBottomSheetValue = ModalBottomSheetValue.Hidden,\r\n    animationSpec: AnimationSpec<Float> = SwipeableDefaults.AnimationSpec,\r\n    confirmStateChange: (ModalBottomSheetValue) -> Boolean = { true }\r\n): ModalBottomSheetState = rememberModalBottomSheetStateInternal(\r\n    initialValue = initialValue,\r\n    animationSpec = animationSpec,\r\n    confirmStateChange = confirmStateChange\r\n)\r\n\r\n@Composable\r\n@ExperimentalMaterialApi\r\n"}], "metadata": {"task_id": "Compose-ToDo/222", "ground_truth": "    skipHalfExpanded = true,\r\n    confirmValueChange = confirmStateChange,\r\n)", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uiextension\\BottomSheetNavigator.kt"}}
{"prompt": "\n import androidx.compose.ui.focus.FocusRequester\nsuspend fun FocusRequester.requestFocusImeAware() {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/223", "ground_truth": "    delay(260)\r\n    requestFocus()\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uiextension\\FocusRequesterExt.kt"}}
{"prompt": "\n import androidx.compose.ui.graphics.drawscope.clipRect\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.draw.drawWithContent\nimport androidx.compose.ui.Modifier\nfun Modifier.drawGrowingCircle(\r\n    color: Color,\r\n    center: Offset,\r\n    radius: Float\r\n) = drawWithContent {\r\n    drawContent()\r\n    clipRect {\r\n        drawCircle(\r\n            color = color,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/224", "ground_truth": "            radius = radius,\r\n            center = center\r\n        )\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uiextension\\ModifierExt.kt"}}
{"prompt": "\n import androidx.compose.ui.layout.positionInParent\nimport androidx.compose.ui.layout.onGloballyPositioned\nimport androidx.compose.ui.layout.LayoutCoordinates\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.composed\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.mutableStateOf\nfun Modifier.onPositionInParentChanged(\r\n    onChange: (LayoutCoordinates) -> Unit\r\n) = composed {\r\n    var lastPosition by remember { mutableStateOf(Offset.Zero) }\r\n    Modifier.onGloballyPositioned { coordinates ->\r\n        if (coordinates.positionInParent() != lastPosition) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/225", "ground_truth": "            lastPosition = coordinates.positionInParent()\r\n            onChange(coordinates)\r\n        }\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\uiextension\\ModifierExt.kt"}}
{"prompt": "\n import kotlinx.coroutines.CoroutineScope\nimport com.wisnu.foundation.coreviewmodel.StatefulViewModel\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun <STATE, EFFECT, ACTION, ENVIRONMENT> HandleEffect(\r\n    viewModel: StatefulViewModel<STATE, EFFECT, ACTION, ENVIRONMENT>,\r\n    handle: suspend CoroutineScope.(EFFECT) -> Unit\r\n) {\r\n    val effect by viewModel.effect.collectAsStateWithLifecycle()\r\n    LaunchedEffect(effect) {\r\n        effect?.let {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/226", "ground_truth": "            handle(it)\r\n            viewModel.resetEffect()\r\n        }\r\n    }\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\viewmodel\\StatefulViewModelExt.kt"}}
{"prompt": "\n import androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.Dp\nprivate fun getSizeClass(size: Dp, medium: Dp, expanded: Dp): WindowSizeClass = when {\r\n    size < 0.dp -> throw IllegalArgumentException(\"Dp value cannot be negative\")\r\n    size < medium -> WindowSizeClass.COMPACT\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Compose-ToDo/228", "ground_truth": "    size < expanded -> WindowSizeClass.MEDIUM\r\n    else -> WindowSizeClass.EXPANDED\r\n}", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\foundation\\window\\WindowSizeClass.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.runtime.ComposeToDoListApp\nimport com.wisnu.foundation.liblifecycleloggr.ActivityLifecycleLoggr\nimport android.content.Context\noverride fun create(context: Context): ActivityLifecycleLoggr {\r\n        return ActivityLifecycleLoggr().also {\r\n            (context.applicationContext as ComposeToDoListApp)\r", "choices": [{"text": ".activityLifecycleLoggr\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/233", "ground_truth": "                .registerActivityLifecycleCallbacks(it)\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\runtime\\initializer\\ActivityLifecycleLoggrInitializer.kt"}}
{"prompt": "\n import com.wisnu.foundation.testdebug.DebugTools\nimport android.content.Context\noverride fun create(context: Context): DebugTools {\r", "choices": [{"text": "return DebugTools(context)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Compose-ToDo/234", "ground_truth": "        DebugTools.init()\r\n        return DebugTools\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\runtime\\initializer\\DebugToolsInitializer.kt"}}
{"prompt": "\n import com.wisnu.foundation.testdebug.DebugTools\nimport com.wisnu.foundation.libanalyticsmanager.crash.CrashLogging\nimport com.wisnu.foundation.coreloggr.Loggr\nimport android.content.Context\noverride fun create(context: Context): Loggr {\r\n        val loggings = DebugTools.getLoggings().toMutableList()\r\n        loggings.add(CrashLogging())\r", "choices": [{"text": "//        loggings.add(CrashLogging())\r\n        return Loggr(loggings)\r\n    }\n"}], "metadata": {"task_id": "Compose-ToDo/235", "ground_truth": "        Loggr.initialize(loggings)\r\n        return Loggr\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\runtime\\initializer\\LoggrInitializer.kt"}}
{"prompt": "\n import com.wisnu.kurniawan.composetodolist.foundation.window.rememberWindowState\nimport com.wisnu.kurniawan.composetodolist.foundation.window.WindowState\nimport com.wisnu.kurniawan.composetodolist.features.host.ui.Host\nimport com.wisnu.kurniawan.composetodolist.R\nimport androidx.core.view.WindowCompat\nimport androidx.compose.material3.Surface\nimport androidx.activity.compose.setContent\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        setTheme(R.style.Theme_ComposeToDoList_Light)\r\n        super.onCreate(savedInstanceState)\r\n\r\n        WindowCompat.setDecorFitsSystemWindows(window, false)\r\n\r\n        setContent {\r\n            windowState = rememberWindowState()\r\n\r\n            Host {\r\n                Surface {\r", "choices": [{"text": "//                    WindowCompat.setDecorFitsSystemWindows(window, false)\r\n                    WindowCompat.setDecorFitsSystemWindows(window, true)\r\n                    WindowCompat.setDecorFitsSystemWindows(window, false)\r\n                    WindowCompat.setDecorFitsSystemWindows(window, true)\r\n                    WindowCompat.setDecorFitsSystemWindows(window, false)\r\n                    WindowCompat.setDecorFitsSystemWindows(window, true)\r\n                    WindowCompat.setDecorFitsSystemWindows(window, false)\r\n                    WindowCompat.setDecorFitsSystemWindows(window, true)\r\n                    WindowCompat.setDecorFitsSystemWindows(window, false)"}], "metadata": {"task_id": "Compose-ToDo/236", "ground_truth": "                    MainNavHost(windowState)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Compose-ToDo\\app\\src\\main\\java\\com\\wisnu\\kurniawan\\composetodolist\\runtime\\MainActivity.kt"}}
{"prompt": "\n @Override\r\nprotected void onResume() {\r", "choices": [{"text": "super.onResume();\r\nmSensorManager.registerListener(this, mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER), SensorManager.SENSOR_DELAY_NORMAL);\r\n}\r\n\r\n@Override\r\nprotected void onPause() {\r\nsuper.onPause();\r\nmSensorManager.unregisterListener(this);\r\n}\r\n\r\n@Override\r\npublic void onAccuracyChanged(Sensor sensor, int accuracy) {\r\n}\r\n\r\n@Override\r\npublic void onSensorChanged(SensorEvent event) {\r\nif (event.sensor.getType() =="}], "metadata": {"task_id": "simplenote-android/1", "ground_truth": "    super.onResume();\r\n    getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\AboutActivity.java"}}
{"prompt": "\n @Override\r\npublic boolean onSupportNavigateUp() {\r", "choices": [{"text": "//        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment);\r\n//        return NavigationUI.navigateUp(navController, mAppBarConfiguration) || super.onSupportNavigateUp();\r\n        return super.onSupportNavigateUp();\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/2", "ground_truth": "    onBackPressed();\r\n    return true;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\AboutActivity.java"}}
{"prompt": "\n @Override\r\npublic void run() {\r\n    if (dialog.isShowing()) {\r", "choices": [{"text": "dialog.dismiss();\r\n}\r\n}\r\n});\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "simplenote-android/11", "ground_truth": "        dialog.dismiss();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\AboutFragment.java"}}
{"prompt": "\n override fun onDestroyView() {\r\n        super.onDestroyView()\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "simplenote-android/12", "ground_truth": "        _binding = null\r\n        _dialogEditTag = null\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\AddCollaboratorFragment.kt"}}
{"prompt": "\n import android.content.DialogInterface\nimport android.app.Dialog\noverride fun onShow(dialog: DialogInterface?) {\r", "choices": [{"text": "super.onShow(dialog)\r\nval dialog = dialog as AlertDialog\r\nval button = dialog.getButton(AlertDialog.BUTTON_POSITIVE)\r\nbutton.setTextColor(Color.parseColor(\"#000000\"))\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/13", "ground_truth": "        setupViews()\r\n        setObservers()\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\AddCollaboratorFragment.kt"}}
{"prompt": "\n import com.automattic.simplenote.utils.ThemeUtils\nimport com.automattic.simplenote.databinding.ActivityTagAddBinding\nimport android.view.View\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        ThemeUtils.setTheme(this)\r\n        super.onCreate(savedInstanceState)\r\n        val binding: ActivityTagAddBinding = ActivityTagAddBinding.inflate(layoutInflater)\r\n\r\n        binding.setObservers()\r\n        binding.setupLayout()\r\n        binding.setupViews()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "simplenote-android/14", "ground_truth": "\r\n        viewModel.start()\r\n\r\n        setContentView(binding.root)\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\AddTagActivity.kt"}}
{"prompt": "\n public static void registerTracker(Tracker tracker) {\r\n    if (tracker != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/16", "ground_truth": "        TRACKERS.add(tracker);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\analytics\\AnalyticsTracker.java"}}
{"prompt": "\n import com.automattic.simplenote.Simplenote\npublic static void track(Stat stat, String category, String label) {\r\n    if (!Simplenote.analyticsIsEnabled()) {\r\n        return;\r", "choices": [{"text": "}\r\nSimplenote.track(stat, category, label);\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/17", "ground_truth": "    }\r\n    for (Tracker tracker : TRACKERS) {\r\n        tracker.track(stat, category, label, null);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\analytics\\AnalyticsTracker.java"}}
{"prompt": "\n import java.util.Map\nimport com.automattic.simplenote.Simplenote\npublic static void track(Stat stat, String category, String label, Map<String, ?> properties) {\r\n    if (!Simplenote.analyticsIsEnabled()) {\r\n        return;\r", "choices": [{"text": "\n import java.util.Map\nimport com.automattic.simplenote.Simplenote\npublic static void track(Stat stat, String category, String label, Map<String,?> properties) {\r\n    if (!Simplenote.analyticsIsEnabled()) {\r\n        return;\r\n}\r\nSimplenote.track(stat, category, label, properties);\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/18", "ground_truth": "    }\r\n    for (Tracker tracker : TRACKERS) {\r\n        tracker.track(stat, category, label, properties);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\analytics\\AnalyticsTracker.java"}}
{"prompt": "\n import com.automattic.simplenote.Simplenote\npublic static void refreshMetadata(String username) {\r\n    if (!Simplenote.analyticsIsEnabled()) {\r\n        return;\r", "choices": [{"text": "}\r\nSimplenote.analytics().track(\"Refresh Metadata\", new HashMap<String, String>() {{\r\n    put(\"username\", username);\r\n}});\r\n}\n"}], "metadata": {"task_id": "simplenote-android/19", "ground_truth": "    }\r\n    for (Tracker tracker : TRACKERS) {\r\n        tracker.refreshMetadata(username);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\analytics\\AnalyticsTracker.java"}}
{"prompt": "\n import com.automattic.simplenote.Simplenote\npublic static void flush() {\r\n    if (!Simplenote.analyticsIsEnabled()) {\r\n        return;\r", "choices": [{"text": "}\r\nSimplenote.flush();\r\n}\n"}], "metadata": {"task_id": "simplenote-android/20", "ground_truth": "    }\r\n    for (Tracker tracker : TRACKERS) {\r\n        tracker.flush();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\analytics\\AnalyticsTracker.java"}}
{"prompt": "\n import com.automattic.simplenote.Simplenote\npublic static void track(Stat stat) {\r\n    if (!Simplenote.analyticsIsEnabled()) {\r\n        return;\r", "choices": [{"text": "}\r\nSimplenote.track(stat);\r\n}\n"}], "metadata": {"task_id": "simplenote-android/21", "ground_truth": "    }\r\n    for (Tracker tracker : TRACKERS) {\r\n        tracker.track(stat, null, null);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\analytics\\AnalyticsTracker.java"}}
{"prompt": "\n import java.util.Map\nimport com.automattic.simplenote.Simplenote\npublic static void track(Stat stat, Map<String, ?> properties) {\r\n    if (!Simplenote.analyticsIsEnabled()) {\r\n        return;\r", "choices": [{"text": "\n import java.util.Map\nimport com.automattic.simplenote.Simplenote\npublic static void track(Stat stat, Map<String,?> properties) {\r\n    if (!Simplenote.analyticsIsEnabled()) {\r\n        return;\r\n}\r\nSimplenote.track(stat, properties);\r\n}\n"}], "metadata": {"task_id": "simplenote-android/22", "ground_truth": "    }\r\n    for (Tracker tracker : TRACKERS) {\r\n        tracker.track(stat, null, null, properties);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\analytics\\AnalyticsTracker.java"}}
{"prompt": "\n import java.util.UUID\nimport androidx.preference.PreferenceManager\nimport android.content.SharedPreferences\nimport android.content.Context\nprivate String generateNewAnonID() {\r\n    String uuid = UUID.randomUUID().toString();\r\n    SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(mContext);\r\n    final SharedPreferences.Editor editor = preferences.edit();\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "simplenote-android/25", "ground_truth": "    editor.putString(TRACKS_ANON_ID, uuid);\r\n    editor.apply();\r\n    mAnonID = uuid;\r\n    return uuid;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\analytics\\AnalyticsTrackerNosara.java"}}
{"prompt": "\n import com.automattic.android.tracks.TracksClient\nimport android.text.TextUtils\n@Override\r\npublic void refreshMetadata(String username) {\r\n    if (mNosaraClient == null) {\r\n        return;\r\n    }\r\n    if (!TextUtils.isEmpty(username)) {\r\n        mUserName = username;\r\n        if (getAnonID() != null) {\r\n            mNosaraClient.trackAliasUser(mUserName, getAnonID(), TracksClient.NosaraUserType.SIMPLENOTE);\r\n            clearAnonID();\r\n        }\r\n    } else {\r\n        mUserName = null;\r", "choices": [{"text": "\n import com.automattic.android.tracks.TracksClient\nimport android.text.TextUtils\n@Override\r\npublic void refreshMetadata(String username) {\r\n    if (mNosaraClient == null) {\r\n        return;\r\n    }\r\n    if (!TextUtils.isEmpty(username)) {\r\n        mUserName = username;\r\n        if (getAnonID()!= null) {\r\n            mNosaraClient.trackAliasUser(mUserName, getAnonID(), TracksClient.NosaraUserType.SIMPLENOTE);\r\n            clearAnonID();\r\n        }\r\n    } else {\r\n        mUserName = null;\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/26", "ground_truth": "        if (getAnonID() == null) {\r\n            generateNewAnonID();\r\n        }\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\analytics\\AnalyticsTrackerNosara.java"}}
{"prompt": "\n @Override\r\npublic void flush() {\r\n    if (mNosaraClient == null) {\r\n        return;\r", "choices": [{"text": "}\r\nmNosaraClient.flush();\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/27", "ground_truth": "    }\r\n    mNosaraClient.flush();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\analytics\\AnalyticsTrackerNosara.java"}}
{"prompt": "\n import com.automattic.simplenote.R\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\n@Nullable\r\n@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n    View view = inflater.inflate(R.layout.fragment_confirmation, container, false);\r", "choices": [{"text": "return view;\r\n}\r\n@Override\r\npublic void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n    super.onViewCreated(view, savedInstanceState);\r\n}\r\n@Override\r\npublic void onDestroyView() {\r\n    super.onDestroyView();\r\n}\r\n}\r\n<file_sep>/app/src/main/java/com/automattic/simplenote/ui/note/NoteFragment.java\npackage com.automattic.simplenote.ui.note;\n\nimport android.content.Context;\nimport android.content"}], "metadata": {"task_id": "simplenote-android/29", "ground_truth": "    initUi(view);\r\n    return view;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\ConfirmationFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.R\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\n@Nullable\r\n@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n    View view = inflater.inflate(R.layout.fragment_signup, container, false);\r", "choices": [{"text": "return view;\r\n}\r\n\n@Override\r\npublic void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n    super.onViewCreated(view, savedInstanceState);\r\n    // TODO subscribe to events\r\n}\r\n\n@Override\r\npublic void onDestroyView() {\r\n    super.onDestroyView();\r\n    // TODO unsubscribe from events\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/34", "ground_truth": "    initUi(view);\r\n    return view;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java"}}
{"prompt": "\n import android.view.View\nprivate void initUi(View view) {\r", "choices": [{"text": "//    view.findViewById(R.id.btn_login).setOnClickListener(this);\r\n//    view.findViewById(R.id.btn_register).setOnClickListener(this);\r\n//    view.findViewById(R.id.btn_forget_password).setOnClickListener(this);\r\n//    view.findViewById(R.id.btn_login_with_facebook).setOnClickListener(this);\r\n//    view.findViewById(R.id.btn_login_with_google).setOnClickListener(this);\r\n//    view.findViewById(R.id.btn_login_with_twitter"}], "metadata": {"task_id": "simplenote-android/35", "ground_truth": "    initFooter((TextView) view.findViewById(com.simperium.R.id.text_footer));\r\n    initSignupButton(view);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java"}}
{"prompt": "\n import android.widget.EditText\nimport android.widget.Button\nimport android.text.TextWatcher\nimport android.text.Editable\nprivate void listenToEmailChanges(EditText emailEditText, final Button signupButton) {\r\n    emailEditText.addTextChangedListener(new TextWatcher() {\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n            setButtonState(signupButton, s);\r\n        }\r\n\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r", "choices": [{"text": "       @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n        }\r\n    });\r\n}\n"}], "metadata": {"task_id": "simplenote-android/37", "ground_truth": "        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n        }\r\n    });\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.utils.NetworkUtils\nimport android.widget.EditText\nimport android.widget.Button\nimport android.view.View\nprivate void listenToSignupClick(Button signupButton, final EditText emailEditText) {\r\n    signupButton.setOnClickListener(new View.OnClickListener() {\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            if (NetworkUtils.isNetworkAvailable(requireContext())) {\r\n                showProgressDialog();\r\n                signupUser(emailEditText.getText().toString());\r\n            } else {\r", "choices": [{"text": "//                Toast.makeText(requireContext(), \"No Internet Connection\", Toast.LENGTH_SHORT).show();\r\n                showToast(\"No Internet Connection\");\r\n            }\r\n        }\r\n    });\r\n}\n"}], "metadata": {"task_id": "simplenote-android/38", "ground_truth": "                showDialogError(getString(R.string.simperium_dialog_message_network));\r\n            }\r\n        }\r\n    });\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java"}}
{"prompt": "\n import androidx.fragment.app.Fragment\nimport androidx.fragment.app.DialogFragment\nprivate void hideDialogProgress() {\r\n    if (progressDialogFragment != null && !progressDialogFragment.isHidden()) {\r\n        progressDialogFragment.dismiss();\r", "choices": [{"text": "\n import androidx.fragment.app.Fragment\nimport androidx.fragment.app.DialogFragment\nprivate void hideDialogProgress() {\r\n    if (progressDialogFragment!= null &&!progressDialogFragment.isHidden()) {\r\n        progressDialogFragment.dismiss();\r\n}\r\n}\r\nprivate void showDialogProgress() {\r\n    if (progressDialogFragment == null) {\r\n        progressDialogFragment = ProgressDialogFragment();\r\n    }\r\n    if (progressDialogFragment.isHidden()) {\r\n        progressDialogFragment.show(getChildFragmentManager(), \"progressDialogFragment\");\r\n    }\r\n}\r\nclass ProgressDialogFragment : DialogFragment() {\r\n    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\r\n        val dialog = ProgressDialog(activity)\r\n        dialog.setMessage(\"Loading...\")\r\n        dialog.setCancelable(false)\r\n        return dialog\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/41", "ground_truth": "        progressDialogFragment = null;\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java"}}
{"prompt": "\n import okhttp3.Call\nimport java.io.IOException\nimport com.automattic.simplenote.utils.AppLog\nimport com.automattic.simplenote.R\nimport androidx.annotation.NonNull\nimport android.app.Activity\n@Override\r\npublic void onFailure(@NonNull Call call, @NonNull final IOException error) {\r\n    Activity activity = getActivity();\r\n    if (activity != null) {\r\n        activity.runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                showDialogError(getString(R.string.dialog_message_signup_error));\r\n                AppLog.add(AppLog.Type.ACCOUNT, \"Sign up failure: \" + error.getMessage());\r", "choices": [{"text": "\n import okhttp3.Call\nimport java.io.IOException\nimport com.automattic.simplenote.utils.AppLog\nimport com.automattic.simplenote.R\nimport androidx.annotation.NonNull\nimport android.app.Activity\n@Override\r\npublic void onFailure(@NonNull Call call, @NonNull final IOException error) {\r\n    Activity activity = getActivity();\r\n    if (activity!= null) {\r\n        activity.runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                showDialogError(getString(R.string.dialog_message_signup_error));\r\n                AppLog.add(AppLog.Type.ACCOUNT, \"Sign up failure: \" + error.getMessage());\r\n//                Toast.makeText(activity, getString(R.string.dialog_message_signup_error), Toast.LENGTH_LONG).show();\r\n            }\r\n        });\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/44", "ground_truth": "                Logger.log(error.getMessage(), error);\r\n            }\r\n        });\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.R\n@Override\r\npublic void run() {\r\n    showDialogError(getString(R.string.dialog_message_signup_error));\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "simplenote-android/45", "ground_truth": "    AppLog.add(AppLog.Type.ACCOUNT, \"Sign up failure: \" + error.getMessage());\r\n    Logger.log(error.getMessage(), error);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java"}}
{"prompt": "\n import okhttp3.Response\nimport okhttp3.Call\nimport com.automattic.simplenote.utils.DisplayUtils\nimport com.automattic.simplenote.R\nimport androidx.annotation.NonNull\nimport android.view.View\nimport android.app.Activity\n@Override\r\npublic void onResponse(@NonNull Call call, @NonNull Response response) {\r\n    Activity activity = getActivity();\r\n    if (activity != null) {\r\n        activity.runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                hideDialogProgress();\r\n                DisplayUtils.hideKeyboard(getView());\r", "choices": [{"text": "\n import okhttp3.Response\nimport okhttp3.Call\nimport com.automattic.simplenote.utils.DisplayUtils\nimport com.automattic.simplenote.R\nimport androidx.annotation.NonNull\nimport android.view.View\nimport android.app.Activity\n@Override\r\npublic void onResponse(@NonNull Call call, @NonNull Response response) {\r\n    Activity activity = getActivity();\r\n    if (activity!= null) {\r\n        activity.runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                hideDialogProgress();\r\n                DisplayUtils.hideKeyboard(getView());\r\nif (response.isSuccessful()) {\r\ntry {\r\nString jsonData = response.body().string();\r\nif (jsonData!= null) {\r\nJSONObject jObject = new JSONObject(jsonData);\r\nif (jObject.has(\"error\")) {\r\nString error = jObject.getString(\"error\");\r\nif (error.equals(\"invalid_token\")) {\r\nToast.makeText(activity, R.string.invalid_token, Toast.LENGTH_SHORT).show();\r\n} else {\r\nToast.makeText(activity, R.string.error_occ"}], "metadata": {"task_id": "simplenote-android/46", "ground_truth": "                showConfirmationScreen(email);\r\n            }\r\n        });\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java"}}
{"prompt": "\n @Override\r\npublic void run() {\r\n    hideDialogProgress();\r", "choices": [{"text": "}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/47", "ground_truth": "    DisplayUtils.hideKeyboard(getView());\r\n    showConfirmationScreen(email);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SignupFragment.java"}}
{"prompt": "\n import com.simperium.android.AuthenticationActivity\nimport com.automattic.simplenote.Simplenote\nimport com.automattic.simplenote.R\nimport android.content.Intent\n@Override\r\npublic void onLoginSheetEmailClicked() {\r\n    Intent intent = new Intent(SimplenoteAuthenticationActivity.this, SimplenoteCredentialsActivity.class);\r\n    intent.putExtra(EXTRA_IS_LOGIN, true);\r", "choices": [{"text": "}\r\n@Override\r\npublic void onLoginSheetPasswordClicked() {\r\n    Intent intent = new Intent(SimplenoteAuthenticationActivity.this, SimplenoteCredentialsActivity.class);\r\n    intent.putExtra(EXTRA_IS_LOGIN, true);\r\n}\r\n@Override\r\npublic void onLoginSheetSignupClicked() {\r\n    Intent intent = new Intent(SimplenoteAuthenticationActivity.this, SimplenoteCredentialsActivity.class);\r\n    intent.putExtra(EXTRA_IS_LOGIN, false);\r\n}\r\n@Override\r\npublic void onLoginSheetForgotPasswordClicked() {\r\n    Intent"}], "metadata": {"task_id": "simplenote-android/52", "ground_truth": "    startActivity(intent);\r\n    finish();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SimplenoteAuthenticationActivity.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.os.Bundle\n@Override\r\nprotected void onSaveInstanceState(@NonNull Bundle outState) {\r", "choices": [{"text": "super.onSaveInstanceState(outState);\r\noutState.putInt(\"key\", 10);\r\n}\r\n@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\nsuper.onCreate(savedInstanceState);\r\nsetContentView(R.layout.activity_main);\r\nif (savedInstanceState!= null) {\r\nint value = savedInstanceState.getInt(\"key\");\r\n}\r\n}\r\n}\r\n<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.content.Intent"}], "metadata": {"task_id": "simplenote-android/53", "ground_truth": "    outState.putString(STATE_AUTH_STATE, mAuthState);\r\n    super.onSaveInstanceState(outState);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SimplenoteAuthenticationActivity.java"}}
{"prompt": "\n import com.automattic.simplenote.R\nimport android.os.Bundle\n@Override\r\nprotected void onRestoreInstanceState(Bundle savedInstanceState) {\r\n    super.onRestoreInstanceState(savedInstanceState);\r\n    if (savedInstanceState.containsKey(STATE_AUTH_STATE)) {\r", "choices": [{"text": "//        mAuthState = savedInstanceState.getInt(STATE_AUTH_STATE);\r\n//        mEmail = savedInstanceState.getString(STATE_EMAIL);\r\n//        mIsNewUser = savedInstanceState.getBoolean(STATE_NEW_USER);\r\n//        mIsSignedIn = savedInstanceState.getBoolean(STATE_SIGNED_IN);\r\n//        mIsSyncing = savedInstanceState.getBoolean(STATE_SYNCING);\r\n//        mIsSyncingNotes = savedInstanceState.getBoolean(STATE_SYNCING_NOTES);\r\n//        mIsSyncingTags = savedInstanceState.getBoolean(STATE_SYNCING_"}], "metadata": {"task_id": "simplenote-android/54", "ground_truth": "        mAuthState = savedInstanceState.getString(STATE_AUTH_STATE);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SimplenoteAuthenticationActivity.java"}}
{"prompt": "\n\n @Override\r\npublic void onBackPressed() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.onBackPressed();\r\n}\r\n}\r\n<file_sep>/src/com/example/myapplication/MainActivity.java\npackage com.example.myapplication;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.view.View.OnClickListener;\r\nimport android.widget.Button;\r\n\r\npublic class MainActivity extends Activity {\r\n\r\n\t@Override\r\n\tprotected void onCreate(Bundle savedInstanceState) {\r\n\t\tsuper."}], "metadata": {"task_id": "simplenote-android/56", "ground_truth": "    startActivity(new Intent(SimplenoteCredentialsActivity.this, SimplenoteAuthenticationActivity.class));\r\n    finish();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SimplenoteCredentialsActivity.java"}}
{"prompt": "\n import com.automattic.simplenote.R\nimport androidx.annotation.Nullable\nimport android.os.Bundle\n@Override\r\nprotected void onCreate(@Nullable Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    setContentView(R.layout.activity_signup);\r", "choices": [{"text": "}\r\n}\r\n<file_sep>/app/src/main/java/com/automattic/simplenote/ui/activity/LoginActivity.java\npackage com.automattic.simplenote.ui.activity;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport androidx.annotation.Nullable;\nimport androidx.appcompat.app.AppCompatActivity;\n\n"}], "metadata": {"task_id": "simplenote-android/57", "ground_truth": "    initContainer();\r\n    initToolbar();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SimplenoteSignupActivity.java"}}
{"prompt": "\n import com.automattic.simplenote.R\nimport android.view.MenuItem\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    if (item.getItemId() == android.R.id.home) {\r\n        onBackPressed();\r", "choices": [{"text": "}\r\nreturn super.onOptionsItemSelected(item);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/60", "ground_truth": "        return true;\r\n    } else {\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\authentication\\SimplenoteSignupActivity.java"}}
{"prompt": "\n import android.content.DialogInterface\noverride fun onCancel(dialog: DialogInterface) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.onCancel(dialog)\r\n}\r\n})\r\n"}], "metadata": {"task_id": "simplenote-android/61", "ground_truth": "        super.onCancel(dialog)\r\n        AnalyticsTracker.track(AnalyticsTracker.Stat.IAP_PLANS_DIALOG_DISMISSED)\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\billing\\SubscriptionBottomSheetDialog.kt"}}
{"prompt": "\n import android.view.View\noverride fun onBindViewHolder(\r\n        holder: PlanListItemViewHolder,\r\n        position: Int\r\n    ) {\r", "choices": [{"text": "//        val item = items[position]\r\n//        holder.bind(item)\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/62", "ground_truth": "        val uiState = getItem(position)\r\n        holder.onBind(uiState)\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\billing\\SubscriptionDurationAdapter.kt"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.os.Bundle\nimport android.app.Dialog\n@NonNull\r\n@Override\r\npublic Dialog onCreateDialog(Bundle savedInstanceState) {\r", "choices": [{"text": "return new Dialog(getActivity(), R.style.Theme_AppCompat_Dialog);\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}"}], "metadata": {"task_id": "simplenote-android/64", "ground_truth": "    setRetainInstance(true);\r\n    return new BottomSheetDialog(requireContext(), getTheme());\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\BottomSheetDialogBase.java"}}
{"prompt": "\n import com.automattic.simplenote.databinding.ActivityCollaboratorsBinding\nimport android.view.View\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        val noteId = intent.getStringExtra(NOTE_ID_ARG)\r\n        if (noteId == null) {\r\n            finish()\r\n            return\r\n        }\r\n\r\n        with(ActivityCollaboratorsBinding.inflate(layoutInflater)) {\r\n            setContentView(root)\r\n\r\n            setupViews()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/65", "ground_truth": "            setObservers()\r\n\r\n            viewModel.loadCollaborators(noteId)\r\n        }\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\CollaboratorsActivity.kt"}}
{"prompt": "\n import android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        if (item.itemId == android.R.id.home) {\r", "choices": [{"text": "//            finish()\r\n            onBackPressed()\r\n            return true\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }\n"}], "metadata": {"task_id": "simplenote-android/66", "ground_truth": "            viewModel.close()\r\n            return true\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\CollaboratorsActivity.kt"}}
{"prompt": "\n override fun onResume() {\r\n        super.onResume()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/67", "ground_truth": "\r\n        viewModel.startListeningChanges()\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\CollaboratorsActivity.kt"}}
{"prompt": "\nval viewModel CollaboratorsViewModel\nval NOTE_ID_ARG\nval DIALOG_TAG\n override fun onPause() {\r\n        super.onPause()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "simplenote-android/68", "ground_truth": "\r\n        viewModel.stopListeningChanges()\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\CollaboratorsActivity.kt"}}
{"prompt": " import com.automattic.simplenote.databinding.ActivityCollaboratorsBinding\nval viewModel CollaboratorsViewModel\nval NOTE_ID_ARG\nval DIALOG_TAG\nprivate fun ActivityCollaboratorsBinding.handleEmptyCollaborators() {\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "simplenote-android/71", "ground_truth": "        showEmptyView()\r\n        (collaboratorsList.adapter as CollaboratorsAdapter).submitList(emptyList())\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\CollaboratorsActivity.kt"}}
{"prompt": "\n import com.automattic.simplenote.databinding.ActivityCollaboratorsBinding\nimport android.view.View\nprivate fun ActivityCollaboratorsBinding.hideEmptyView() {\r\n        empty.image.visibility = View.GONE\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "simplenote-android/72", "ground_truth": "        empty.title.visibility = View.GONE\r\n        empty.message.visibility = View.GONE\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\CollaboratorsActivity.kt"}}
{"prompt": "\n import com.automattic.simplenote.databinding.ActivityCollaboratorsBinding\nimport android.view.View\nprivate fun ActivityCollaboratorsBinding.showEmptyView() {\r\n        empty.image.visibility = View.VISIBLE\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "simplenote-android/73", "ground_truth": "        empty.title.visibility = View.VISIBLE\r\n        empty.message.visibility = View.VISIBLE\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\CollaboratorsActivity.kt"}}
{"prompt": "\n import android.content.Intent\nprivate fun navigateToNotesList() {\r\n        val intent = Intent(applicationContext, NotesActivity::class.java)\r", "choices": [{"text": "startActivity(intent)\r\n    }\n"}], "metadata": {"task_id": "simplenote-android/76", "ground_truth": "        intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP\r\n        startActivity(intent)\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\CollaboratorsActivity.kt"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.os.Bundle\nimport android.content.Context\nimport android.app.Dialog\n@NonNull\r\n@Override\r\npublic Dialog onCreateDialog(Bundle savedInstanceState) {\r\n    initBuilderArguments();\r\n    Dialog dialog = new Dialog(requireContext(), getTheme()) {\r\n\r\n        @Override\r\n        public void onBackPressed() {\r\n            onDismissClicked();\r", "choices": [{"text": "}\r\n}\r\ndialog.setContentView(R.layout.dialog_layout);\r\ndialog.setCancelable(false);\r\ndialog.setCanceledOnTouchOutside(false);\r\nreturn dialog;\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/80", "ground_truth": "        }\r\n    };\r\n    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n    return dialog;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java"}}
{"prompt": "\n import androidx.appcompat.widget.Toolbar\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\n@Nullable\r\n@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n    initBuilderArguments();\r\n    if (mHideActivityBar) {\r\n        hideActivityBar();\r\n    }\r\n    ViewGroup view = (ViewGroup) inflater.inflate(R.layout.fragment_full_screen_dialog, container, false);\r\n    initToolbar(view);\r", "choices": [{"text": "return view;\r\n}\r\n@Override\r\npublic void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n    super.onViewCreated(view, savedInstanceState);\r\n    initView(view);\r\n}\r\n@Override\r\npublic void onDestroyView() {\r\n    super.onDestroyView();\r\n    mHideActivityBar = false;\r\n}\r\nprivate void initBuilderArguments() {\r\n    if (mBuilder!= null) {\r\n        mHideActivityBar = mBuilder.mHideActivityBar;\r\n    }\r\n}\r\nprivate void hideActivityBar() {\r\n    if"}], "metadata": {"task_id": "simplenote-android/81", "ground_truth": "    setThemeBackground(view);\r\n    view.setFocusableInTouchMode(true);\r\n    view.requestFocus();\r\n    return view;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java"}}
{"prompt": "\n import android.os.Bundle\nprotected void confirm(Bundle result) {\r\n    if (mOnConfirmListener != null) {\r\n        mOnConfirmListener.onConfirm(result);\r", "choices": [{"text": "\n import android.os.Bundle\nprotected void confirm(Bundle result) {\r\n    if (mOnConfirmListener!= null) {\r\n        mOnConfirmListener.onConfirm(result);\r\n}\r\n}\n"}], "metadata": {"task_id": "simplenote-android/84", "ground_truth": "    }\r\n    dismiss();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java"}}
{"prompt": "\n import androidx.fragment.app.FragmentActivity\nimport androidx.fragment.app.Fragment\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.appcompat.app.ActionBar\n/**\r\n * Hide {@link androidx.appcompat.app.AppCompatActivity} bar when showing fullscreen dialog.\r\n */\r\npublic void hideActivityBar() {\r\n    FragmentActivity activity = getActivity();\r\n    if (activity instanceof AppCompatActivity) {\r\n        ActionBar actionBar = ((AppCompatActivity) activity).getSupportActionBar();\r", "choices": [{"text": "//        if (actionBar!= null) {\r\n//            actionBar.hide();\r\n//        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/85", "ground_truth": "        if (actionBar != null && actionBar.isShowing()) {\r\n            actionBar.hide();\r\n        }\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java"}}
{"prompt": "\n import android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onMenuItemClick(MenuItem item) {\r\n    if (item.getItemId() == ID_ACTION) {\r\n        onConfirmClicked();\r", "choices": [{"text": "}\r\nreturn true;\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/87", "ground_truth": "        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java"}}
{"prompt": "\nprivate static final String ARG_HIDE_ACTIVITY_BAR = \"ARG_HIDE_ACTIVITY_BAR\";\nprivate static final String ARG_ACTION = \"ARG_ACTION\";\nprivate static final String ARG_CONTAINER = \"ARG_CONTAINER\";\n public void onBackPressed() {\r\n    if (isAdded()) {\r", "choices": [{"text": "//        if (mHideActivityBar) {\r\n//            mHideActivityBar = false;\r\n//            mActivity.getSupportActionBar().show();\r\n//        }\r\n        super.onBackPressed();\r\n    }\r\n}\n"}], "metadata": {"task_id": "simplenote-android/88", "ground_truth": "        onDismissClicked();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java"}}
{"prompt": "\n import androidx.fragment.app.Fragment\nimport android.app.Dialog\nprotected void onConfirmClicked() {\r\n    boolean isConsumed = ((FullScreenDialogContent) mFragment).onConfirmClicked(mController);\r\n    if (!isConsumed) {\r", "choices": [{"text": "//        mController.dismissDialog();\r\n    }\r\n}\n"}], "metadata": {"task_id": "simplenote-android/89", "ground_truth": "        mController.confirm(null);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java"}}
{"prompt": "\n import androidx.fragment.app.Fragment\nimport android.app.Dialog\nprotected void onDismissClicked() {\r\n    boolean isConsumed = ((FullScreenDialogContent) mFragment).onDismissClicked(mController);\r\n    if (!isConsumed) {\r", "choices": [{"text": "//        mController.dismiss();\r\n    }\r\n}\n"}], "metadata": {"task_id": "simplenote-android/90", "ground_truth": "        mController.dismiss();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java"}}
{"prompt": "\n import androidx.fragment.app.Fragment\nimport androidx.fragment.app.DialogFragment\nimport androidx.annotation.NonNull\nimport android.app.Dialog\n/**\r\n * Set {@link FullScreenDialogFragment} subtitle text.\r\n *\r\n * @param text {@link String} to set as subtitle text\r\n */\r\npublic void setSubtitle(@NonNull String text) {\r", "choices": [{"text": "}\r\n/**\r\n * Set {@link FullScreenDialogFragment} subtitle text.\r\n *\r\n * @param text {@link CharSequence} to set as subtitle text\r\n */\r\npublic void setSubtitle(@NonNull CharSequence text) {\r\n}\r\n/**\r\n * Set {@link FullScreenDialogFragment} subtitle text.\r\n *\r\n * @param resId {@link Integer} to set as subtitle text\r\n */\r\npublic void setSubtitle(@IntegerRes int resId) {\r\n}\r\n/**\r\n * Set {@link FullScreenDialogFragment} subtitle text.\r\n *\r\n * @param text {@link"}], "metadata": {"task_id": "simplenote-android/91", "ground_truth": "    mSubtitle = text;\r\n    mToolbar.setSubtitle(mSubtitle);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java"}}
{"prompt": "\n import androidx.fragment.app.Fragment\nimport androidx.fragment.app.DialogFragment\nimport androidx.annotation.StringRes\nimport android.app.Dialog\n/**\r\n * Set {@link FullScreenDialogFragment} subtitle text.\r\n *\r\n * @param textId resource ID to set as subtitle text\r\n */\r\npublic void setSubtitle(@StringRes int textId) {\r", "choices": [{"text": "}\r\n/**\r\n * Set {@link FullScreenDialogFragment} subtitle text.\r\n *\r\n * @param text text to set as subtitle text\r\n */\r\npublic void setSubtitle(CharSequence text) {\r\n}\r\n/**\r\n * Set {@link FullScreenDialogFragment} subtitle text.\r\n *\r\n * @param textId resource ID to set as subtitle text\r\n * @param args arguments to replace in the string\r\n */\r\npublic void setSubtitle(@StringRes int textId, Object... args) {\r\n}\r\n/**\r\n * Set {@link FullScreenDialogFragment} subtitle text."}], "metadata": {"task_id": "simplenote-android/92", "ground_truth": "    mSubtitle = requireContext().getString(textId);\r\n    mToolbar.setSubtitle(mSubtitle);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java"}}
{"prompt": "\n import androidx.fragment.app.FragmentActivity\nimport androidx.fragment.app.Fragment\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.appcompat.app.ActionBar\n/**\r\n * Show {@link androidx.appcompat.app.AppCompatActivity} bar when hiding fullscreen dialog.\r\n */\r\npublic void showActivityBar() {\r\n    FragmentActivity activity = getActivity();\r\n    if (activity instanceof AppCompatActivity) {\r\n        ActionBar actionBar = ((AppCompatActivity) activity).getSupportActionBar();\r", "choices": [{"text": "//        if (actionBar!= null) {\r\n//            actionBar.show();\r\n//        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/93", "ground_truth": "        if (actionBar != null && !actionBar.isShowing()) {\r\n            actionBar.show();\r\n        }\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java"}}
{"prompt": "\n import androidx.fragment.app.Fragment\nimport androidx.fragment.app.DialogFragment\nimport androidx.annotation.NonNull\nimport android.app.Dialog\n/**\r\n * Set {@link FullScreenDialogFragment} action text.\r\n *\r\n * @param text {@link String} to set as action text\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setAction(@NonNull String text) {\r", "choices": [{"text": "}\r\n/**\r\n * Set {@link FullScreenDialogFragment} action text.\r\n *\r\n * @param text {@link String} to set as action text\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setAction(@NonNull String text, @NonNull OnClickListener listener) {\r\n}\r\n/**\r\n * Set {@link FullScreenDialogFragment} action text.\r\n *\r\n * @param text {@link String} to set as action text\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r"}], "metadata": {"task_id": "simplenote-android/94", "ground_truth": "    mAction = text;\r\n    return this;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java"}}
{"prompt": "\n import androidx.fragment.app.Fragment\nimport androidx.annotation.Nullable\nimport android.os.Bundle\nimport android.app.Dialog\n/**\r\n * Set {@link Fragment} to be added as dialog, which must implement {@link FullScreenDialogContent}.\r\n *\r\n * @param contentClass     Fragment class to be instantiated\r\n * @param contentArguments arguments to be added to Fragment\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n * @throws IllegalArgumentException if content class does not implement\r\n *                                  {@link FullScreenDialogContent} interface\r\n */\r\npublic Builder setContent(Class<? extends Fragment> contentClass, @Nullable Bundle contentArguments) {\r\n    if (!FullScreenDialogContent.class.isAssignableFrom(contentClass)) {\r\n        throw new IllegalArgumentException(\"The fragment class must implement FullScreenDialogContent interface\");\r", "choices": [{"text": "}\r\n    mContentClass = contentClass;\r\n    mContentArguments = contentArguments;\r\n    return this;\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/95", "ground_truth": "    }\r\n    mClass = contentClass;\r\n    mArguments = contentArguments;\r\n    return this;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java"}}
{"prompt": "\n /**\r\n * Set flag to hide activity bar when showing fullscreen dialog.\r\n *\r\n * @param hide boolean to hide activity bar\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setHideActivityBar(boolean hide) {\r", "choices": [{"text": "this.hideActivityBar = hide;\r\nreturn this;\r\n}\r\n/**\r\n * Set flag to hide activity bar when showing fullscreen dialog.\r\n *\r\n * @param hide boolean to hide activity bar\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setHideActivityBar(String hide) {\r\nthis.hideActivityBar = Boolean.parseBoolean(hide);\r\nreturn this;\r\n}\r\n/**\r\n * Set flag to hide activity bar when showing fullscreen dialog.\r\n *\r\n * @param hide boolean to hide activity"}], "metadata": {"task_id": "simplenote-android/96", "ground_truth": "    mHideActivityBar = hide;\r\n    return this;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java"}}
{"prompt": "\n import androidx.fragment.app.Fragment\nimport androidx.fragment.app.DialogFragment\nimport androidx.annotation.NonNull\nimport android.app.Dialog\n/**\r\n * Set {@link FullScreenDialogFragment} subtitle text.\r\n *\r\n * @param text {@link String} to set as subtitle text\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setSubtitle(@NonNull String text) {\r", "choices": [{"text": "mSubtitle = text;\r\nreturn this;\r\n}\r\n/**\r\n * Set {@link FullScreenDialogFragment} subtitle text.\r\n *\r\n * @param text {@link CharSequence} to set as subtitle text\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setSubtitle(@NonNull CharSequence text) {\r\nmSubtitle = text;\r\nreturn this;\r\n}\r\n/**\r\n * Set {@link FullScreenDialogFragment} subtitle text.\r\n *\r\n * @param resId {@link Integer} resource id of subtitle text\r\n *"}], "metadata": {"task_id": "simplenote-android/97", "ground_truth": "    mSubtitle = text;\r\n    return this;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java"}}
{"prompt": "\n import androidx.fragment.app.Fragment\nimport androidx.fragment.app.DialogFragment\nimport androidx.annotation.StringRes\nimport android.app.Dialog\n/**\r\n * Set {@link FullScreenDialogFragment} subtitle text.\r\n *\r\n * @param textId resource ID to set as subtitle text\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setSubtitle(@StringRes int textId) {\r", "choices": [{"text": "}\r\n\r\n/**\r\n * Set {@link FullScreenDialogFragment} subtitle text.\r\n *\r\n * @param text text to set as subtitle text\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setSubtitle(CharSequence text) {\r\n}\r\n\r\n/**\r\n * Set {@link FullScreenDialogFragment} subtitle text.\r\n *\r\n * @param textId resource ID to set as subtitle text\r\n * @param args arguments to replace in the string\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r"}], "metadata": {"task_id": "simplenote-android/98", "ground_truth": "    mSubtitle = mContext.getString(textId);\r\n    return this;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java"}}
{"prompt": "\n import androidx.fragment.app.Fragment\nimport androidx.fragment.app.DialogFragment\nimport androidx.annotation.NonNull\nimport android.app.Dialog\n/**\r\n * Set {@link FullScreenDialogFragment} title text.\r\n *\r\n * @param text {@link String} to set as title text\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setTitle(@NonNull String text) {\r", "choices": [{"text": "this.title = text;\r\nreturn this;\r\n}\r\n/**\r\n * Set {@link FullScreenDialogFragment} title text.\r\n *\r\n * @param text {@link CharSequence} to set as title text\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setTitle(@NonNull CharSequence text) {\r\nthis.title = text;\r\nreturn this;\r\n}\r\n/**\r\n * Set {@link FullScreenDialogFragment} title text.\r\n *\r\n * @param resId {@link Integer} resource id to set as title"}], "metadata": {"task_id": "simplenote-android/99", "ground_truth": "    mTitle = text;\r\n    return this;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java"}}
{"prompt": "\n import androidx.fragment.app.Fragment\nimport androidx.fragment.app.DialogFragment\nimport androidx.annotation.StringRes\nimport android.app.Dialog\n/**\r\n * Set {@link FullScreenDialogFragment} title text.\r\n *\r\n * @param textId resource ID to set as title text\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setTitle(@StringRes int textId) {\r", "choices": [{"text": "}\r\n\r\n/**\r\n * Set {@link FullScreenDialogFragment} title text.\r\n *\r\n * @param text text to set as title text\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setTitle(CharSequence text) {\r\n}\r\n\r\n/**\r\n * Set {@link FullScreenDialogFragment} title text.\r\n *\r\n * @param textId resource ID to set as title text\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setTitle(@StringRes int textId) {"}], "metadata": {"task_id": "simplenote-android/100", "ground_truth": "    mTitle = mContext.getString(textId);\r\n    return this;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java"}}
{"prompt": "\n import androidx.fragment.app.Fragment\nimport androidx.fragment.app.DialogFragment\nimport androidx.appcompat.widget.Toolbar\nimport android.app.Dialog\n/**\r\n * Set {@link FullScreenDialogFragment} toolbar elevation.\r\n *\r\n * @param elevation {@link Float} to set as toolbar elevation\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setToolbarElevation(float elevation) {\r", "choices": [{"text": "this.toolbarElevation = elevation;\r\nreturn this;\r\n}\r\n/**\r\n * Set {@link FullScreenDialogFragment} toolbar elevation.\r\n *\r\n * @param elevation {@link Float} to set as toolbar elevation\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setToolbarElevation(int elevation) {\r\nthis.toolbarElevation = (float) elevation;\r\nreturn this;\r\n}\r\n/**\r\n * Set {@link FullScreenDialogFragment} toolbar elevation.\r\n *\r\n * @param elevation {@link Float} to"}], "metadata": {"task_id": "simplenote-android/101", "ground_truth": "    mElevation = elevation;\r\n    return this;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java"}}
{"prompt": "\n import androidx.fragment.app.Fragment\nimport androidx.fragment.app.DialogFragment\nimport androidx.appcompat.widget.Toolbar\nimport androidx.annotation.DimenRes\nimport android.app.Dialog\n/**\r\n * Set {@link FullScreenDialogFragment} toolbar elevation.\r\n *\r\n * @param dimension resource ID dimension to set as toolbar elevation\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setToolbarElevation(@DimenRes int dimension) {\r\n    if (dimension == 0) {\r\n        return setToolbarElevation(Float.valueOf(dimension));\r", "choices": [{"text": "}\r\nreturn setToolbarElevation(getResources().getDimension(dimension));\r\n}\r\n/**\r\n * Set {@link FullScreenDialogFragment} toolbar elevation.\r\n *\r\n * @param dimension dimension to set as toolbar elevation\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setToolbarElevation(float dimension) {\r\n    mToolbarElevation = dimension;\r\n    return this;\r\n}\r\n/**\r\n * Set {@link FullScreenDialogFragment} toolbar elevation.\r\n *\r\n * @param dimension dimension to set as toolbar elevation\r\n * @return {@"}], "metadata": {"task_id": "simplenote-android/102", "ground_truth": "    } else {\r\n        mElevation = mContext.getResources().getDimension(dimension);\r\n        return this;\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java"}}
{"prompt": "\n import androidx.annotation.Nullable\n/**\r\n * Set callback to call when dialog is closed due to confirm click.\r\n *\r\n * @param listener {@link OnConfirmListener} interface to call on confirm click\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setOnConfirmListener(@Nullable OnConfirmListener listener) {\r", "choices": [{"text": ""}], "metadata": {"task_id": "simplenote-android/103", "ground_truth": "    mOnConfirmListener = listener;\r\n    return this;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java"}}
{"prompt": "\n import androidx.annotation.Nullable\n/**\r\n * Set callback to call when dialog is closed due to dismiss click.\r\n *\r\n * @param listener {@link OnDismissListener} interface to call on dismiss click\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setOnDismissListener(@Nullable OnDismissListener listener) {\r", "choices": [{"text": ""}], "metadata": {"task_id": "simplenote-android/104", "ground_truth": "    mOnDismissListener = listener;\r\n    return this;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java"}}
{"prompt": "\n import androidx.annotation.IdRes\nimport android.view.View\n/**\r\n * Set container view for full-screen dialog.\r\n *\r\n * @param container resource ID to use as container of full-screen dialog\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setViewContainer(@IdRes int container) {\r", "choices": [{"text": "}\r\n\r\n/**\r\n * Set the view to use as the content of the dialog.\r\n *\r\n * @param view the view to use as the content of the dialog\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n */\r\npublic Builder setContentView(View view) {\r\n}\r\n\r\n/**\r\n * Set the view to use as the content of the dialog.\r\n *\r\n * @param layoutResId the resource ID of the view to use as the content of the dialog\r\n * @return {@link Builder} object to allow for chaining of calls to set methods\r\n"}], "metadata": {"task_id": "simplenote-android/105", "ground_truth": "    mContainer = container;\r\n    return this;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\FullScreenDialogFragment.java"}}
{"prompt": "\n import java.util.Map\nimport java.util.ArrayList\nimport com.automattic.simplenote.models.Note\nimport androidx.fragment.app.Fragment\n// Note: These callbacks won't be running on the main thread\r\n@Override\r\npublic void onComplete(Map<Integer, Note> revisionsMap) {\r\n    if (!mFragment.isAdded() || mNote == null) {\r\n        return;\r\n    }\r\n    // Convert map to an array list, to work better with the 0-index based seekbar\r\n    mNoteRevisionsList = new ArrayList<>(revisionsMap.values());\r\n    mFragment.requireActivity().runOnUiThread(new Runnable() {\r\n\r\n        @Override\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/106", "ground_truth": "        public void run() {\r\n            updateProgressBar();\r\n        }\r\n    });\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\HistoryBottomSheetDialog.java"}}
{"prompt": "\n import androidx.fragment.app.Fragment\n@Override\r\npublic void onError(Throwable exception) {\r\n    if (!mFragment.isAdded() || getDialog() != null && !getDialog().isShowing()) {\r\n        return;\r\n    }\r\n    mFragment.requireActivity().runOnUiThread(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/107", "ground_truth": "            mProgressBar.setVisibility(View.GONE);\r\n            mErrorText.setVisibility(View.VISIBLE);\r\n        }\r\n    });\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\HistoryBottomSheetDialog.java"}}
{"prompt": "\n @Override\r\npublic void run() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\ntry {\r\nwhile(true) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(is"}], "metadata": {"task_id": "simplenote-android/108", "ground_truth": "    mProgressBar.setVisibility(View.GONE);\r\n    mErrorText.setVisibility(View.VISIBLE);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\HistoryBottomSheetDialog.java"}}
{"prompt": "\n import android.view.View\n@Override\r\npublic void onClick(View v) {\r", "choices": [{"text": "switch(v.getId()){\r\ncase R.id.button1:\r\nIntent i=new Intent(this,MainActivity.class);\r\nstartActivity(i);\r\nbreak;\r\ncase R.id.button2:\r\nIntent i1=new Intent(this,MainActivity.class);\r\nstartActivity(i1);\r\nbreak;\r\ncase R.id.button3:\r\nIntent i2=new Intent(this,MainActivity.class);\r\nstartActivity(i2);\r\nbreak;\r\ncase R.id.button4:\r\nIntent i3"}], "metadata": {"task_id": "simplenote-android/109", "ground_truth": "    mDidTapButton = true;\r\n    mListener.onHistoryCancelClicked();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\HistoryBottomSheetDialog.java"}}
{"prompt": "\n import android.view.View\n@Override\r\npublic void onClick(View v) {\r", "choices": [{"text": "switch(v.getId()){\r\ncase R.id.button1:\r\nIntent i=new Intent(this,MainActivity.class);\r\nstartActivity(i);\r\nbreak;\r\ncase R.id.button2:\r\nIntent i1=new Intent(this,MainActivity.class);\r\nstartActivity(i1);\r\nbreak;\r\ncase R.id.button3:\r\nIntent i2=new Intent(this,MainActivity.class);\r\nstartActivity(i2);\r\nbreak;\r\ncase R.id.button4:\r\nIntent i3"}], "metadata": {"task_id": "simplenote-android/110", "ground_truth": "    mDidTapButton = true;\r\n    mListener.onHistoryRestoreClicked();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\HistoryBottomSheetDialog.java"}}
{"prompt": "\n import android.content.DialogInterface\n@Override\r\npublic void onDismiss(DialogInterface dialog) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.onDismiss(dialog);\r\n}\r\n});\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/111", "ground_truth": "    mListener.onHistoryDismissed();\r\n    mNote = null;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\HistoryBottomSheetDialog.java"}}
{"prompt": "\n import com.automattic.simplenote.models.Note\nimport androidx.fragment.app.FragmentManager\nimport androidx.fragment.app.Fragment\npublic void show(FragmentManager manager, Note note) {\r\n    if (mFragment.isAdded()) {\r\n        showNow(manager, TAG);\r", "choices": [{"text": "} else {\r\n        mFragment.show(manager, TAG);\r\n}\r\n}\r\npublic void showNow(FragmentManager manager, String tag) {\r\n    manager.beginTransaction().add(mFragment, tag).commitNow();\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/113", "ground_truth": "        mNote = note;\r\n        mDidTapButton = false;\r\n        setProgressBar();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\HistoryBottomSheetDialog.java"}}
{"prompt": "\nprivate View mProgressBar;\nprivate ArrayList<Note> mNoteRevisionsList;\nprivate View mButtonRestore;\n public void updateProgressBar() {\r\n    if (getDialog() != null && getDialog().isShowing()) {\r", "choices": [{"text": "\nprivate View mProgressBar;\nprivate ArrayList<Note> mNoteRevisionsList;\nprivate View mButtonRestore;\n public void updateProgressBar() {\r\n    if (getDialog()!= null && getDialog().isShowing()) {\r\nmProgressBar.setVisibility(View.VISIBLE);\r\n}\r\n}\n"}], "metadata": {"task_id": "simplenote-android/114", "ground_truth": "        setProgressBar();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\HistoryBottomSheetDialog.java"}}
{"prompt": "\n private void dispatchFileImport(String fileType, String content) throws ImportException {\r\n    switch(fileType) {\r\n        case \"json\":\r\n            importJsonFile(content);\r\n            break;\r\n        case \"md\":\r\n            importMarkdown(content);\r\n            break;\r\n        case \"txt\":\r\n            importPlaintext(content);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/116", "ground_truth": "            break;\r\n        default:\r\n            throw new ImportException(FailureReason.UnknownExportType);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\Importer.java"}}
{"prompt": "\n import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Note\nprivate void importMarkdown(String content) {\r\n    Note note = Note.fromContent(mNotesBucket, content);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "simplenote-android/117", "ground_truth": "    note.enableMarkdown();\r\n    addNote(note);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\Importer.java"}}
{"prompt": "\n import com.simperium.client.BucketObjectNameInvalid\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.utils.TagUtils\nimport com.automattic.simplenote.models.Tag\nimport com.automattic.simplenote.models.Note\nprivate void addNote(Note note) {\r\n    for (String tagName : note.getTags()) {\r\n        try {\r\n            TagUtils.createTagIfMissing(mTagsBucket, tagName);\r\n        } catch (BucketObjectNameInvalid e) {\r\n            // if it can't be added then remove it, we can't keep it anyway\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/118", "ground_truth": "            note.removeTag(tagName);\r\n        }\r\n    }\r\n    note.save();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\Importer.java"}}
{"prompt": "\n import android.content.Context\n@SuppressWarnings(\"unused\")\r\npublic static String dateString(Number time, boolean useShortFormat, Context context) {\r", "choices": [{"text": ""}], "metadata": {"task_id": "simplenote-android/123", "ground_truth": "    Calendar c = numberToDate(time);\r\n    return dateString(c, useShortFormat, context);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java"}}
{"prompt": "\n import com.automattic.simplenote.utils.SimplenoteLinkify.SIMPLENOTE_LINK_PREFIX\nimport java.util.regex.Pattern\nimport java.util.regex.Matcher\nimport com.automattic.simplenote.R\nprivate static int getReferenceCount(String key, String content) {\r\n    Pattern pattern = Pattern.compile(SIMPLENOTE_LINK_PREFIX + key);\r\n    Matcher matcher = pattern.matcher(content);\r\n    int count = 0;\r", "choices": [{"text": "while (matcher.find()) {\r\n    count++;\r\n}\r\nreturn count;\r\n}\n"}], "metadata": {"task_id": "simplenote-android/124", "ground_truth": "    while (matcher.find()) {\r\n        count++;\r\n    }\r\n    return count;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java"}}
{"prompt": "\n public String getTitle() {\r\n    if (mTitle == null) {\r\n        updateTitleAndPreview();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/127", "ground_truth": "    }\r\n    return mTitle;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java"}}
{"prompt": "\n import com.automattic.simplenote.R\npublic String getContent() {\r\n    Object content = getProperty(CONTENT_PROPERTY);\r", "choices": [{"text": "if (content instanceof String) {\r\nreturn (String) content;\r\n}\r\nreturn null;\r\n}\r\npublic void setContent(String content) {\r\nsetProperty(CONTENT_PROPERTY, content);\r\n}\r\npublic String getTitle() {\r\nObject title = getProperty(TITLE_PROPERTY);\r\nif (title instanceof String) {\r\nreturn (String) title;\r\n}\r\nreturn null;\r\n}\r\npublic void setTitle(String title) {\r\nsetProperty(TITLE_PROPERTY, title);\r\n}\r\npublic String getNoteId"}], "metadata": {"task_id": "simplenote-android/128", "ground_truth": "    if (content == null) {\r\n        return BLANK_CONTENT;\r\n    }\r\n    return (String) content;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java"}}
{"prompt": "\n public void setContent(String content) {\r\n    mTitle = null;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/129", "ground_truth": "    mContentPreview = null;\r\n    setProperty(CONTENT_PROPERTY, content);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java"}}
{"prompt": "\n public String getContentPreview() {\r\n    if (mContentPreview == null) {\r\n        updateTitleAndPreview();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/130", "ground_truth": "    }\r\n    return mContentPreview;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java"}}
{"prompt": "\n import com.automattic.simplenote.R\npublic String getPublishedUrl() {\r\n    String urlCode = (String) getProperty(PUBLISH_URL_PROPERTY);\r", "choices": [{"text": "if (urlCode == null) {\r\nreturn null;\r\n}\r\nreturn \"https://publish.simplenote.com/publish/\" + urlCode;\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/131", "ground_truth": "    if (TextUtils.isEmpty(urlCode)) {\r\n        return \"\";\r\n    }\r\n    return PUBLISH_URL + urlCode;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java"}}
{"prompt": "\n import java.util.List\npublic boolean hasTag(String tag) {\r\n    List<String> tags = getTags();\r\n    String tagLower = tag.toLowerCase();\r\n    for (String tagName : tags) {\r", "choices": [{"text": "//        System.out.println(tagName);\r\n        if (tagName.toLowerCase().equals(tagLower)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n"}], "metadata": {"task_id": "simplenote-android/132", "ground_truth": "        if (tagLower.equals(tagName.toLowerCase()))\r\n            return true;\r\n    }\r\n    return false;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java"}}
{"prompt": "\n import java.util.List\nimport java.util.ArrayList\nimport org.json.JSONArray\nimport com.automattic.simplenote.R\npublic List<String> getTags() {\r\n    JSONArray tags = (JSONArray) getProperty(TAGS_PROPERTY);\r\n    if (tags == null) {\r\n        tags = new JSONArray();\r\n        setProperty(TAGS_PROPERTY, \"\");\r\n    }\r\n    int length = tags.length();\r\n    List<String> tagList = new ArrayList<>(length);\r\n    if (length == 0)\r\n        return tagList;\r\n    for (int i = 0; i < length; i++) {\r\n        String tag = tags.optString(i);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/133", "ground_truth": "        if (!tag.equals(\"\"))\r\n            tagList.add(tag);\r\n    }\r\n    return tagList;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java"}}
{"prompt": "\n import java.util.List\nimport com.automattic.simplenote.utils.TagUtils\npublic void addTag(String tagName) {\r\n    List<String> tags = getTags();\r\n    // Avoid adding tags with the same canonical name\r\n    List<String> tagsMatched = TagUtils.findTagsMatch(tags, tagName);\r\n    if (tagsMatched.isEmpty()) {\r\n        tags.add(tagName);\r", "choices": [{"text": "}\r\n}\n"}], "metadata": {"task_id": "simplenote-android/134", "ground_truth": "    }\r\n    setTags(tags);\r\n    setModificationDate(Calendar.getInstance());\r\n    save();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java"}}
{"prompt": "\n import java.util.List\nimport com.automattic.simplenote.utils.TagUtils\npublic void removeTag(String tagName) {\r\n    List<String> tags = getTags();\r\n    List<String> tagsMatched = TagUtils.findTagsMatch(tags, tagName);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "simplenote-android/135", "ground_truth": "    tags.removeAll(tagsMatched);\r\n    setTags(tags);\r\n    setModificationDate(Calendar.getInstance());\r\n    save();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java"}}
{"prompt": "\n import java.util.List\n/**\r\n * String of tags delimited by a space\r\n */\r\npublic CharSequence getTagString() {\r\n    StringBuilder tagString = new StringBuilder();\r\n    List<String> tags = getTags();\r\n    for (String tag : tags) {\r\n        if (tagString.length() > 0) {\r\n            tagString.append(SPACE);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/136", "ground_truth": "        }\r\n        tagString.append(tag);\r\n    }\r\n    return tagString;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java"}}
{"prompt": " import org.json.JSONArray\nimport com.automattic.simplenote.R\npublic static final String PUBLISHED_TAG = \"published\";\npublic static final String SHARED_TAG = \"shared\";\npublic static final String PINNED_TAG = \"pinned\";\npublic JSONArray getSystemTags() {\r\n    JSONArray tags = (JSONArray) getProperty(SYSTEM_TAGS_PROPERTY);\r\n    if (tags == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/137", "ground_truth": "        tags = new JSONArray();\r\n        setProperty(SYSTEM_TAGS_PROPERTY, tags);\r\n    }\r\n    return tags;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java"}}
{"prompt": "\n public void setMarkdownEnabled(boolean isMarkdownEnabled) {\r\n    if (isMarkdownEnabled) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/139", "ground_truth": "        addSystemTag(MARKDOWN_TAG);\r\n    } else {\r\n        removeSystemTag(MARKDOWN_TAG);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java"}}
{"prompt": "\n import com.automattic.simplenote.utils.StrUtils\npublic boolean hasCollaborators() {\r\n    for (String tag : getTags()) {\r\n        if (StrUtils.isEmail(tag)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/140", "ground_truth": "            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java"}}
{"prompt": "\n public void setPinned(boolean isPinned) {\r\n    if (isPinned) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/141", "ground_truth": "        addSystemTag(PINNED_TAG);\r\n    } else {\r\n        removeSystemTag(PINNED_TAG);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java"}}
{"prompt": "\n public void setPreviewEnabled(boolean isPreviewEnabled) {\r\n    if (isPreviewEnabled) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/142", "ground_truth": "        addSystemTag(PREVIEW_TAG);\r\n    } else {\r\n        removeSystemTag(PREVIEW_TAG);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java"}}
{"prompt": "\n public void setPublished(boolean isPublished) {\r\n    if (isPublished) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/143", "ground_truth": "        addSystemTag(PUBLISHED_TAG);\r\n    } else {\r\n        removeSystemTag(PUBLISHED_TAG);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java"}}
{"prompt": "\n import org.json.JSONArray\nimport android.text.TextUtils\nprivate boolean hasSystemTag(String tag) {\r\n    if (TextUtils.isEmpty(tag))\r\n        return false;\r\n    JSONArray tags = getSystemTags();\r\n    int length = tags.length();\r\n    for (int i = 0; i < length; i++) {\r\n        if (tags.optString(i).equals(tag)) {\r", "choices": [{"text": "//            Log.d(TAG, \"hasSystemTag: \" + tag + \" is true\");\r\n            return true;\r\n        }\r\n    }\r\n//    Log.d(TAG, \"hasSystemTag: \" + tag + \" is false\");\r\n    return false;\r\n}\n"}], "metadata": {"task_id": "simplenote-android/144", "ground_truth": "            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java"}}
{"prompt": "\n import android.text.TextUtils\nprivate void addSystemTag(String tag) {\r\n    if (TextUtils.isEmpty(tag)) {\r\n        return;\r\n    }\r", "choices": [{"text": "//    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n//        tag = tag.replace(\" \", \"_\");\r\n//        if (tag.length() > 23) {\r\n//            tag = tag.substring(0, 23);\r\n//        }\r\n//        tag = \"android:\" + tag;\r\n//        Log.d(tag, \"addSystemTag\");\r\n//    }\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/145", "ground_truth": "    // Ensure we don't add the same tag again\r\n    if (!hasSystemTag(tag)) {\r\n        getSystemTags().put(tag);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java"}}
{"prompt": "\n import org.json.JSONObject\npublic void update(Note note, JSONObject properties) {\r\n    note.setProperties(properties);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "simplenote-android/147", "ground_truth": "    note.mTitle = null;\r\n    note.mContentPreview = null;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Note.java"}}
{"prompt": "\n import java.util.List\nimport java.util.ArrayList\nimport com.simperium.client.BucketSchema.Index\nimport com.simperium.client.Bucket\n@Override\r\npublic List<Index> index(Tag tag) {\r\n    List<Index> indexes = new ArrayList<>(1);\r\n    int count = Note.allInTag(mNotesBucket, tag.getSimperiumKey()).count();\r", "choices": [{"text": "//    indexes.add(new Index(Note.class, \"tag\", tag.getSimperiumKey(), count));\r\n    return indexes;\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/148", "ground_truth": "    indexes.add(new Index(Tag.NOTE_COUNT_INDEX_NAME, count));\r\n    return indexes;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\NoteCountIndexer.java"}}
{"prompt": "\n import java.util.Map\nimport java.util.HashMap\n@Override\r\npublic Map<String, String> index(String[] keys, Note note) {\r\n    Map<String, String> values = new HashMap<>(keys.length);\r\n    values.put(INDEXES[0], note.getTitle());\r", "choices": [{"text": "//    values.put(INDEXES[1], note.getAuthor());\r\n    values.put(INDEXES[2], note.getCategory());\r\n    values.put(INDEXES[3], note.getTags());\r\n    values.put(INDEXES[4], note.getCreated());\r\n    values.put(INDEXES[5], note.getUpdated());\r\n    values.put(INDEXES[6], note.getDeleted());\r\n    values.put(INDEXES[7], note.getDeleted());\r\n    values.put(INDEXES[8], note.getDeleted());\r\n    values.put(INDEX"}], "metadata": {"task_id": "simplenote-android/149", "ground_truth": "    values.put(INDEXES[1], note.getContent());\r\n    return values;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\NoteFullTextIndexer.java"}}
{"prompt": "\n import java.util.List\nimport java.util.ArrayList\npublic void setRecentSearches(List<String> recents) {\r\n    if (recents == null) {\r\n        recents = new ArrayList<>();\r", "choices": [{"text": "}\r\nthis.recentSearches = recents;\r\n}\n"}], "metadata": {"task_id": "simplenote-android/154", "ground_truth": "    }\r\n    setProperty(RECENT_SEARCHES_KEY, new JSONArray(recents));\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Preferences.java"}}
{"prompt": "\n public void setActiveSubscription(long purchaseTime) {\r\n    setSubscriptionPlatform(Preferences.SubscriptionPlatform.ANDROID);\r\n    setSubscriptionLevel(Preferences.SubscriptionLevel.SUSTAINER);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "simplenote-android/155", "ground_truth": "    setSubscriptionDate(purchaseTime);\r\n    save();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Preferences.java"}}
{"prompt": "\n public void removeActiveSubscription() {\r\n    setSubscriptionPlatform(SubscriptionPlatform.NONE);\r\n    setSubscriptionLevel(SubscriptionLevel.NONE);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "simplenote-android/156", "ground_truth": "    setSubscriptionDate(null);\r\n    save();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Preferences.java"}}
{"prompt": "\n public SubscriptionPlatform getCurrentSubscriptionPlatform() {\r\n    Object subscriptionPlatform = getProperty(SUBSCRIPTION_PLATFORM_KEY);\r\n    if (subscriptionPlatform == null) {\r\n        return null;\r\n    }\r\n    if (subscriptionPlatform instanceof String) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/157", "ground_truth": "        return SubscriptionPlatform.fromString((String) subscriptionPlatform);\r\n    } else {\r\n        return null;\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Preferences.java"}}
{"prompt": "\n public static SubscriptionPlatform fromString(String platformName) {\r\n    if (platformName != null) {\r\n        for (SubscriptionPlatform platform : SubscriptionPlatform.values()) {\r\n            if (platformName.equalsIgnoreCase(platform.getName())) {\r\n                return platform;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/158", "ground_truth": "            }\r\n        }\r\n    }\r\n    return null;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Preferences.java"}}
{"prompt": "\n public static SubscriptionLevel fromString(String level) {\r\n    if (level != null) {\r\n        for (SubscriptionLevel subscriptionLevel : SubscriptionLevel.values()) {\r\n            if (level.equalsIgnoreCase(subscriptionLevel.getName())) {\r\n                return subscriptionLevel;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/159", "ground_truth": "            }\r\n        }\r\n    }\r\n    return null;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Preferences.java"}}
{"prompt": "\n public String getName() {\r\n    String name = (String) getProperty(NAME_PROPERTY);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/161", "ground_truth": "    if (name == null) {\r\n        name = getSimperiumKey();\r\n    }\r\n    return name;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Tag.java"}}
{"prompt": "\n public void setName(String name) {\r\n    if (name == null) {\r\n        name = \"\";\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/162", "ground_truth": "    }\r\n    setProperty(NAME_PROPERTY, name);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Tag.java"}}
{"prompt": "\n public void setIndex(Integer tagIndex) {\r\n    if (tagIndex == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/163", "ground_truth": "        getProperties().remove(\"index\");\r\n    } else {\r\n        setProperty(\"index\", tagIndex);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\models\\Tag.java"}}
{"prompt": "\n public void hideTabs() {\r", "choices": [{"text": "//    tabs.setVisibility(View.GONE);\r\n//    tabs.setBackgroundColor(Color.TRANSPARENT);\r\n//    tabs.setPadding(0, 0, 0, 0);\r\n//    tabs.setTabTextColors(Color.WHITE, Color.WHITE);\r\n//    tabs.setTabBackground(Color.TRANSPARENT);\r\n//    tabs.setDividerDrawable(null);\r\n//    tabs.setTabMode(TabLayout.MODE_FIXED);\r\n//    tabs.setTabGravity(TabLayout.GRAVITY_FILL);\r"}], "metadata": {"task_id": "simplenote-android/166", "ground_truth": "    mTabLayout.setVisibility(View.GONE);\r\n    mViewPager.setPagingEnabled(false);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorActivity.java"}}
{"prompt": "\n public void showTabs() {\r", "choices": [{"text": "//    if (tabs.size() > 0) {\r\n//      tabs.get(0).show();\r\n//    }\r\n//  }\r\n//\r\n//  public void hideTabs() {\r\n//    if (tabs.size() > 0) {\r\n//      tabs.get(0).hide();\r\n//    }\r\n//  }\r\n//\r\n//  public void showTabs(int index) {\r\n//    if (tabs.size() > 0) {\r\n//      tabs.get(index).show"}], "metadata": {"task_id": "simplenote-android/167", "ground_truth": "    mTabLayout.setVisibility(View.VISIBLE);\r\n    mViewPager.setPagingEnabled(true);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorActivity.java"}}
{"prompt": "\n public void setSearchMatchBarVisible(boolean isVisible) {\r\n    if (mSearchMatchBar != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/168", "ground_truth": "        mSearchMatchBar.setVisibility(isVisible ? View.VISIBLE : View.GONE);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorActivity.java"}}
{"prompt": "\n import androidx.fragment.app.Fragment\nvoid addFragment(Fragment fragment, String title) {\r\n    mFragments.add(fragment);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "simplenote-android/172", "ground_truth": "    mTitles.add(title);\r\n    notifyDataSetChanged();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorActivity.java"}}
{"prompt": "\n import androidx.appcompat.view.ActionMode\nimport android.view.Menu\n// Called each time the action mode is shown. Always called after onCreateActionMode, but\r\n// may be called multiple times if the mode is invalidated.\r\n@Override\r\npublic boolean onPrepareActionMode(ActionMode mode, Menu menu) {\r", "choices": [{"text": "// Return false if nothing is done\r\nreturn false;\r\n}\r\n// Called when the user selects a contextual menu item\r\n@Override\r\npublic boolean onActionItemClicked(ActionMode mode, MenuItem item) {\r\n// Return false if nothing is done\r\nreturn false;\r\n}\r\n// Called when the user exits the action mode\r\n@Override\r\npublic void onDestroyActionMode(ActionMode mode) {\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/174", "ground_truth": "    // Return false if nothing is done\r\n    return false;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n import android.app.Activity\n@Override\r\npublic void run() {\r\n    if (!isAdded())\r\n        return;\r\n    requireActivity().runOnUiThread(() -> {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/176", "ground_truth": "        mNote.setPublished(!mNote.isPublished());\r\n        mNote.save();\r\n        updatePublishedState(false);\r\n    });\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.database.Cursor\nimport android.content.Context\nimport android.app.Activity\n@Override\r\npublic View newView(Context context, Cursor cursor, ViewGroup parent) {\r\n    Activity activity = (Activity) context;\r\n    if (activity == null)\r", "choices": [{"text": "       return null;\r\n    return activity.getLayoutInflater().inflate(R.layout.list_item, parent, false);\r}\r@Override\r\npublic void bindView(View view, Context context, Cursor cursor) {\r\n    Activity activity = (Activity) context;\r\n    if (activity == null)\r        return;\r\n    TextView text1 = (TextView) view.findViewById(R.id.text1);\r\n    TextView text2 = (TextView) view.findViewById(R.id.text2);\r\n    TextView text3 = (TextView) view.findViewById(R.id.text3);\r\n    TextView text4"}], "metadata": {"task_id": "simplenote-android/177", "ground_truth": "        return null;\r\n    return activity.getLayoutInflater().inflate(R.layout.autocomplete_list_item, null);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n import android.view.View\nimport android.database.Cursor\nimport android.content.Context\n@Override\r\npublic void bindView(View view, Context context, Cursor cursor) {\r", "choices": [{"text": "// TODO add your code here\n}\n"}], "metadata": {"task_id": "simplenote-android/178", "ground_truth": "    TextView textView = (TextView) view;\r\n    textView.setText(convertToString(cursor));\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.utils.SimplenoteLinkify\nimport com.automattic.simplenote.models.Note\nimport com.automattic.simplenote.analytics.AnalyticsTracker\nimport android.webkit.WebView\nimport android.webkit.WebResourceRequest\nimport android.view.View\nimport android.text.util.Linkify\nimport android.app.Activity\nimport com.automattic.simplenote.utils.SimplenoteLinkify.SIMPLENOTE_LINK_PREFIX\n@Override\r\npublic boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\r\n    String url = request.getUrl().toString();\r\n    if (url.startsWith(SimplenoteLinkify.SIMPLENOTE_LINK_PREFIX)) {\r\n        AnalyticsTracker.track(AnalyticsTracker.Stat.INTERNOTE_LINK_TAPPED, AnalyticsTracker.CATEGORY_LINK, \"internote_link_tapped_markdown\");\r\n        SimplenoteLinkify.openNote(requireActivity(), url.replace(SIMPLENOTE_LINK_PREFIX, \"\"));\r", "choices": [{"text": "return true;\r\n    }\r\n    return false;\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/180", "ground_truth": "    } else {\r\n        BrowserUtils.launchBrowserOrShowError(requireContext(), url);\r\n    }\r\n    return true;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n import android.text.Layout\n@Override\r\npublic boolean onPreDraw() {\r\n    if (mContentEditText.getLayout() != null) {\r", "choices": [{"text": "\n import android.text.Layout\n@Override\r\npublic boolean onPreDraw() {\r\n    if (mContentEditText.getLayout()!= null) {\r\n//        mContentEditText.getLayout().getLineForVertical(mContentEditText.getLayout().getLineCount() - 1).getBaseline()\r\n        int lineCount = mContentEditText.getLayout().getLineCount();\r\n        int lastLineBaseline = mContentEditText.getLayout().getLineBaseline(lineCount - 1);\r\n        int lastLineBottom = mContentEditText.getLayout().getLineBottom(lineCount - 1);\r\n        int lastLineTop = mContentEditText.getLayout().getLineTop(lineCount - 1);\r\n        int lastLineHeight = lastLineBottom - lastLineTop;\r\n        int"}], "metadata": {"task_id": "simplenote-android/181", "ground_truth": "        setScroll();\r\n        mRootView.getViewTreeObserver().removeOnPreDrawListener(this);\r\n    }\r\n    return true;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n import java.util.List\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.utils.TagsMultiAutoCompleteTextView.OnTagAddedListener\nimport com.automattic.simplenote.utils.PrefUtils\nimport com.automattic.simplenote.utils.AppLog.Type\nimport com.automattic.simplenote.utils.AppLog\nimport com.automattic.simplenote.models.Tag\nimport com.automattic.simplenote.models.Note\nimport androidx.fragment.app.Fragment\nimport android.webkit.WebView\nimport android.view.View\nimport android.util.TypedValue\nimport android.content.Context\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    checkWebView();\r\n    mIsPaused = false;\r\n    mNotesBucket.addListener(this);\r\n    AppLog.add(Type.SYNC, \"Added note bucket listener (NoteEditorFragment)\");\r\n    mTagInput.setOnTagAddedListener(this);\r\n    if (mContentEditText != null) {\r\n        mContentEditText.setTextSize(TypedValue.COMPLEX_UNIT_SP, PrefUtils.getFontSize(requireContext()));\r", "choices": [{"text": "\n import java.util.List\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.utils.TagsMultiAutoCompleteTextView.OnTagAddedListener\nimport com.automattic.simplenote.utils.PrefUtils\nimport com.automattic.simplenote.utils.AppLog.Type\nimport com.automattic.simplenote.utils.AppLog\nimport com.automattic.simplenote.models.Tag\nimport com.automattic.simplenote.models.Note\nimport androidx.fragment.app.Fragment\nimport android.webkit.WebView\nimport android.view.View\nimport android.util.TypedValue\nimport android.content.Context\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    checkWebView();\r\n    mIsPaused = false;\r\n    mNotesBucket.addListener(this);\r\n    AppLog.add(Type.SYNC, \"Added note bucket listener (NoteEditorFragment)\");\r\n    mTagInput.setOnTagAddedListener(this);\r\n    if (mContentEditText!= null) {\r\n        mContentEditText.setTextSize(TypedValue.COMPLEX_UNIT_SP, PrefUtils.getFontSize(requireContext()));\r\n}\r\n}\r\n@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    mIsPaused = true;\r\n    mNotesBucket.removeListener(this);\r\n    AppLog.add(Type.SYNC, \"Removed note bucket listener (NoteEditorFragment)\");\r\n    mTagInput.setOnTagAddedListener(null);\r\n}\r\n@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n    mNotesBucket.removeListener(this);\r\n    AppLog.add(Type.SYNC, \"Removed note bucket listener (NoteEditorFragment)\");\r\n    mTagInput."}], "metadata": {"task_id": "simplenote-android/184", "ground_truth": "        if (mContentEditText.hasFocus()) {\r\n            showSoftKeyboard();\r\n        }\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.utils.DisplayUtils\nimport com.automattic.simplenote.models.Note\nimport androidx.annotation.NonNull\nimport android.os.Bundle\nimport android.app.Activity\n@Override\r\npublic void onSaveInstanceState(@NonNull Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r\n    if (DisplayUtils.isLargeScreenLandscape(getActivity()) && mNote != null) {\r", "choices": [{"text": "\n import com.automattic.simplenote.utils.DisplayUtils\nimport com.automattic.simplenote.models.Note\nimport androidx.annotation.NonNull\nimport android.os.Bundle\nimport android.app.Activity\n@Override\r\npublic void onSaveInstanceState(@NonNull Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r\n    if (DisplayUtils.isLargeScreenLandscape(getActivity()) && mNote!= null) {\r\noutState.putParcelable(NOTE_KEY, mNote);\r\n    }\r\n}\r\n@Override\r\npublic void onActivityCreated(Bundle savedInstanceState) {\r\n    super.onActivityCreated(savedInstanceState);\r\n    if (savedInstanceState!= null) {\r\nmNote = savedInstanceState.getParcelable(NOTE_KEY);\r\n    }\r\n}\r\n@Override\r\npublic void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n    super.onActivityResult(requestCode, resultCode, data);\r\n    if (resultCode == Activity.RESULT_OK) {\r\nif (requestCode =="}], "metadata": {"task_id": "simplenote-android/188", "ground_truth": "        outState.putString(STATE_NOTE_ID, mNote.getSimperiumKey());\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.utils.DisplayUtils\nimport com.automattic.simplenote.models.Note\nimport androidx.fragment.app.Fragment\nimport androidx.annotation.NonNull\nimport android.view.MenuInflater\nimport android.view.Menu\nimport android.app.Activity\n@Override\r\npublic void onCreateOptionsMenu(@NonNull Menu menu, @NonNull MenuInflater inflater) {\r\n    super.onCreateOptionsMenu(menu, inflater);\r\n    if (!isAdded() || (!mIsFromWidget && DisplayUtils.isLargeScreenLandscape(getActivity()) && mNoteMarkdownFragment == null)) {\r", "choices": [{"text": "return;\r\n    }\r\n    inflater.inflate(R.menu.note_menu, menu);\r\n    if (mNoteMarkdownFragment!= null) {\r\nmenu.findItem(R.id.action_share).setVisible(true);\r\n    }\r\n}\n"}], "metadata": {"task_id": "simplenote-android/189", "ground_truth": "        return;\r\n    }\r\n    inflater.inflate(R.menu.note_editor, menu);\r\n    MenuCompat.setGroupDividerEnabled(menu, true);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": " import com.automattic.simplenote.models.Note\npublic static final String ARG_IS_FROM_WIDGET = \"is_from_widget\";\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\npublic static final String ARG_NEW_NOTE = \"new_note\";\nprivate void deleteNote() {\r", "choices": [{"text": "if (mNote!= null) {\r\nmNote.delete();\r\n}\r\n}\r\npublic static NoteFragment newInstance(Note note, boolean isFromWidget) {\r\nNoteFragment fragment = new NoteFragment();\r\nBundle args = new Bundle();\r\nargs.putParcelable(ARG_NOTE, note);\r\nargs.putBoolean(ARG_IS_FROM_WIDGET, isFromWidget);\r\nfragment.setArguments(args);\r\nreturn fragment;\r\n}\r\npublic static NoteFragment newInstance(Note note) {\r\nreturn newInstance(note,"}], "metadata": {"task_id": "simplenote-android/193", "ground_truth": "    NoteUtils.deleteNote(mNote, getActivity());\r\n    requireActivity().finish();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n protected void clearMarkdown() {\r\n    if (mMarkdown != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/194", "ground_truth": "        mMarkdown.loadDataWithBaseURL(\"file:///android_asset/\", mCss + \"\", \"text/html\", \"utf-8\", null);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.utils.BrowserUtils\nimport android.webkit.WebView\nimport android.view.View\nimport android.content.Context\nprotected void hideMarkdown() {\r\n    if (BrowserUtils.isWebViewInstalled(requireContext()) && mMarkdown != null) {\r", "choices": [{"text": "\n import com.automattic.simplenote.utils.BrowserUtils\nimport android.webkit.WebView\nimport android.view.View\nimport android.content.Context\nprotected void hideMarkdown() {\r\n    if (BrowserUtils.isWebViewInstalled(requireContext()) && mMarkdown!= null) {\r\nmMarkdown.setVisibility(View.GONE);\r\n}\r\n}\n"}], "metadata": {"task_id": "simplenote-android/195", "ground_truth": "        mMarkdown.setVisibility(View.INVISIBLE);\r\n    } else {\r\n        mError.setVisibility(View.INVISIBLE);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.utils.DrawableUtils\nimport com.automattic.simplenote.models.Note\nimport android.view.MenuItem\nimport android.view.Menu\nimport android.graphics.drawable.Drawable\npublic void showInfo() {\r\n    DrawableUtils.startAnimatedVectorDrawable(mInformationMenuItem.getIcon());\r\n    if (mNote != null) {\r", "choices": [{"text": "\n import com.automattic.simplenote.utils.DrawableUtils\nimport com.automattic.simplenote.models.Note\nimport android.view.MenuItem\nimport android.view.Menu\nimport android.graphics.drawable.Drawable\npublic void showInfo() {\r\n    DrawableUtils.startAnimatedVectorDrawable(mInformationMenuItem.getIcon());\r\n    if (mNote!= null) {\r\n//        mNote.setInfo(true);\r\n        mNote.setInfo(true);\r\n        mNote.save();\r\n    }\r\n}\n"}], "metadata": {"task_id": "simplenote-android/199", "ground_truth": "        mContentEditText.clearFocus();\r\n        saveNote();\r\n        showInfoSheet();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n private void setMarkdownEnabled(boolean enabled) {\r\n    mIsMarkdownEnabled = enabled;\r\n    if (mIsMarkdownEnabled) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/201", "ground_truth": "        loadMarkdownData();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.models.Note\nimport androidx.fragment.app.Fragment\nprivate void loadMarkdownData() {\r\n    String formattedContent = NoteMarkdownFragment.getMarkdownFormattedContent(mCss, mContentEditText.getPreviewTextContent());\r\n    if (mMarkdown != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/202", "ground_truth": "        mMarkdown.loadDataWithBaseURL(null, formattedContent, \"text/html\", \"utf-8\", null);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.models.Note\nprivate void updateNote(Note updatedNote) {\r\n    // update note if network change arrived\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "simplenote-android/204", "ground_truth": "    mNote = updatedNote;\r\n    refreshContent(true);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": " import java.util.List\nimport com.automattic.simplenote.models.Tag\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nWeakReference<NoteEditorFragment> mNoteEditorFragmentReference;\nprivate NoteMarkdownFragment mNoteMarkdownFragment;\nprivate void updateTagList(List<String> tags) {\r", "choices": [{"text": "mNoteEditorFragmentReference = new WeakReference<NoteEditorFragment>(this);\r\nmNoteMarkdownFragment = (NoteMarkdownFragment) getFragmentManager().findFragmentByTag(NoteMarkdownFragment.TAG);\r\nmNoteMarkdownFragment.updateTagList(tags);\r\n}\n"}], "metadata": {"task_id": "simplenote-android/205", "ground_truth": "    setChips(tags);\r\n    mTagInput.setText(\"\");\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.models.Tag\n@Override\r\npublic void onTagAdded(String tag) {\r\n    // When a tag is added, it triggers an event that sends an empty tag. For those cases or if the note is null,\r\n    // we avoid updating the UI and the note\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "simplenote-android/206", "ground_truth": "    if (mNote == null || !isAdded() || TextUtils.isEmpty(tag)) {\r\n        return;\r\n    }\r\n    viewModel.addTag(tag, mNote);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n import java.util.List\nimport android.text.Editable\n@Override\r\npublic void afterTextChanged(Editable editable) {\r\n    attemptAutoList(editable);\r", "choices": [{"text": "}\r\nprivate void attemptAutoList(Editable editable) {\r\n    if (editable.length() > 0) {\r\n        List<String> list = new ArrayList<>();\r\n        for (int i = 0; i < 100; i++) {\r\n            list.add(\"Item \" + i);\r\n        }\r\n        AutoCompleteTextView autoCompleteTextView = (AutoCompleteTextView) findViewById(R.id.autoCompleteTextView);\r\n        autoCompleteTextView.setAdapter(new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, list));\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/207", "ground_truth": "    setTitleSpan(editable);\r\n    mContentEditText.fixLineSpacing();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n import android.view.View\npublic boolean isPlaceholderVisible() {\r\n    if (mPlaceholderView != null) {\r", "choices": [{"text": "\n import android.view.View\npublic boolean isPlaceholderVisible() {\r\n    if (mPlaceholderView!= null) {\r\nreturn mPlaceholderView.getVisibility() == View.VISIBLE;\r\n}\r\nreturn false;\r\n}\n"}], "metadata": {"task_id": "simplenote-android/210", "ground_truth": "        return mPlaceholderView.getVisibility() == View.VISIBLE;\r\n    } else {\r\n        return false;\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.models.Tag\nimport com.automattic.simplenote.models.Note\nimport android.view.View\n@Override\r\npublic void onFocusChange(View v, boolean hasFocus) {\r\n    if (!hasFocus) {\r\n        // When the tag field looses focus, if it is not empty, the tag is added\r\n        String tag = mTagInput.getText().toString().trim();\r\n        if (tag.length() > 0 && mNote != null) {\r", "choices": [{"text": "\n import com.automattic.simplenote.models.Tag\nimport com.automattic.simplenote.models.Note\nimport android.view.View\n@Override\r\npublic void onFocusChange(View v, boolean hasFocus) {\r\n    if (!hasFocus) {\r\n        // When the tag field looses focus, if it is not empty, the tag is added\r\n        String tag = mTagInput.getText().toString().trim();\r\n        if (tag.length() > 0 && mNote!= null) {\r\n//            mNote.addTag(tag);\r\n            mTagInput.setText(\"\");\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/212", "ground_truth": "            viewModel.addTag(tag, mNote);\r\n        }\r\n    }\r\n    hideToolbarForLandscapeEditing();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.models.Note\nprivate String getNoteContentString() {\r\n    if (mContentEditText == null || mContentEditText.getText() == null) {\r", "choices": [{"text": "return \"\";\r\n}\r\nreturn mContentEditText.getText().toString();\r\n}\n"}], "metadata": {"task_id": "simplenote-android/213", "ground_truth": "        return \"\";\r\n    } else {\r\n        return mContentEditText.getText().toString();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.models.Note\n/**\r\n * Share bottom sheet callbacks\r\n */\r\n@Override\r\npublic void onSharePublishClicked() {\r\n    publishNote();\r\n    if (mShareBottomSheet != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/214", "ground_truth": "        mShareBottomSheet.dismiss();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.models.Note\n@Override\r\npublic void onShareUnpublishClicked() {\r\n    unpublishNote();\r\n    if (mShareBottomSheet != null) {\r", "choices": [{"text": "\n import com.automattic.simplenote.models.Note\n@Override\r\npublic void onShareUnpublishClicked() {\r\n    unpublishNote();\r\n    if (mShareBottomSheet!= null) {\r\nmShareBottomSheet.dismiss();\r\n}\r\n}\r\nprivate void unpublishNote() {\r\nif (mNote!= null) {\r\nmNote.setUnpublished(true);\r\nmNote.setPublished(false);\r\nmNote.setPublishDate(null);\r\nmNote.setPublishId(null);\r\nmNote.setPublishUrl(null);\r\nmNote.setPublishStatus(null);\r\nmNote.setPublishError(null);\r\nmNote.setPublishErrorDetail(null);\r\nmNote.setPublish"}], "metadata": {"task_id": "simplenote-android/215", "ground_truth": "        mShareBottomSheet.dismiss();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.models.Note\n/**\r\n * History bottom sheet listeners\r\n */\r\n@Override\r\npublic void onHistoryCancelClicked() {\r\n    mContentEditText.setText(mNote.getContent());\r\n    if (mHistoryBottomSheet != null) {\r", "choices": [{"text": "\n import com.automattic.simplenote.models.Note\n/**\r\n * History bottom sheet listeners\r\n */\r\n@Override\r\npublic void onHistoryCancelClicked() {\r\n    mContentEditText.setText(mNote.getContent());\r\n    if (mHistoryBottomSheet!= null) {\r\nmHistoryBottomSheet.dismiss();\r\n    }\r\n}\r\n@Override\r\npublic void onHistorySaveClicked() {\r\n    mNote.setContent(mContentEditText.getText().toString());\r\n    mNote.setLastEdited(new Date());\r\n    mNote.setLastEditedUser(mUser);\r\n    mNote.setLastEditedUserEmail(mUserEmail);\r\n    mNote.setLastEditedUserAvatar(mUserAvatar);\r\n    mNote.setLastEditedUserAvatarUrl(mUserAvatarUrl);\r\n    mNote.setLastEditedUserDisplayName(mUserDisplayName);\r\n    mNote.setLast"}], "metadata": {"task_id": "simplenote-android/216", "ground_truth": "        mHistoryBottomSheet.dismiss();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n @Override\r\npublic void onHistoryRestoreClicked() {\r\n    if (mHistoryBottomSheet != null) {\r\n        mHistoryBottomSheet.dismiss();\r", "choices": [{"text": "\n @Override\r\npublic void onHistoryRestoreClicked() {\r\n    if (mHistoryBottomSheet!= null) {\r\n        mHistoryBottomSheet.dismiss();\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/217", "ground_truth": "    }\r\n    saveAndSyncNote();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n private void showShareSheet() {\r\n    if (isAdded() && mShareBottomSheet != null && !mShareBottomSheet.isAdded()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/222", "ground_truth": "        mShareBottomSheet.show(requireFragmentManager(), mNote);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n private void showInfoSheet() {\r\n    if (isAdded() && mInfoBottomSheet != null && !mInfoBottomSheet.isAdded()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/223", "ground_truth": "        mInfoBottomSheet.show(requireFragmentManager(), mNote);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.models.Note\nimport androidx.fragment.app.Fragment\n@Override\r\nprotected Void doInBackground(Void... args) {\r\n    NoteEditorFragment fragment = mNoteEditorFragmentReference.get();\r", "choices": [{"text": "if (fragment!= null) {\r\n    fragment.saveNote();\r\n}\r\nreturn null;\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r"}], "metadata": {"task_id": "simplenote-android/228", "ground_truth": "    if (fragment != null) {\r\n        fragment.saveNote();\r\n    }\r\n    return null;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.models.Note\nimport androidx.fragment.app.Fragment\nimport android.app.Activity\n@Override\r\nprotected void onPostExecute(Void nada) {\r\n    NoteEditorFragment fragment = mNoteEditorFragmentReference.get();\r\n    if (fragment != null && fragment.getActivity() != null && !fragment.getActivity().isFinishing()) {\r", "choices": [{"text": "\n import com.automattic.simplenote.models.Note\nimport androidx.fragment.app.Fragment\nimport android.app.Activity\n@Override\r\nprotected void onPostExecute(Void nada) {\r\n    NoteEditorFragment fragment = mNoteEditorFragmentReference.get();\r\n    if (fragment!= null && fragment.getActivity()!= null &&!fragment.getActivity().isFinishing()) {\r\nfragment.onNoteSaved();\r\n    }\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/229", "ground_truth": "        // Update links\r\n        fragment.linkifyEditorContent();\r\n        fragment.updateMarkdownView();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteEditorFragment.java"}}
{"prompt": "\n import java.util.List\nimport android.widget.ListView\nimport android.widget.AdapterView\nimport android.view.View\n@Override\r\npublic boolean onItemLongClick(AdapterView<?> adapterView, View view, int position, long l) {\r\n    getListView().setChoiceMode(ListView.CHOICE_MODE_MULTIPLE_MODAL);\r\n    getListView().setItemChecked(position, true);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "simplenote-android/232", "ground_truth": "    if (mActionMode == null) {\r\n        requireActivity().startActionMode(this);\r\n    }\r\n    return true;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import java.util.List\nimport java.util.ArrayList\nimport com.automattic.simplenote.models.Note\nimport android.widget.ListView\nimport android.view.View\nimport android.util.SparseBooleanArray\npublic List<Integer> getSelectedNotesPositions() {\r\n    SparseBooleanArray checkedPositions = getListView().getCheckedItemPositions();\r\n    ArrayList<Integer> positions = new ArrayList<>();\r\n    for (int i = 0; i < checkedPositions.size(); i++) {\r\n        if (checkedPositions.valueAt(i)) {\r", "choices": [{"text": "positions.add(checkedPositions.keyAt(i));\r\n        }\r\n    }\r\n    return positions;\r\n}\n"}], "metadata": {"task_id": "simplenote-android/235", "ground_truth": "            positions.add(checkedPositions.keyAt(i) - mList.getHeaderViewsCount());\r\n        }\r\n    }\r\n    return positions;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import java.util.List\nimport com.automattic.simplenote.utils.PrefUtils\nimport com.automattic.simplenote.models.Note\nprotected void getPrefs() {\r\n    mIsCondensedNoteList = PrefUtils.getBoolPref(getActivity(), PrefUtils.PREF_CONDENSED_LIST, false);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "simplenote-android/238", "ground_truth": "    mTitleFontSize = PrefUtils.getFontSize(getActivity());\r\n    mPreviewFontSize = mTitleFontSize - 2;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n @Override\r\npublic void onDetach() {\r\n    super.onDetach();\r", "choices": [{"text": "}\r\n\r\n"}], "metadata": {"task_id": "simplenote-android/244", "ground_truth": "    // Reset the active callbacks interface to the dummy implementation.\r\n    mCallbacks = sCallbacks;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import java.util.List\nimport android.view.View\npublic void setEmptyListButton(String message) {\r\n    if (mEmptyViewButton != null) {\r\n        if (!message.isEmpty()) {\r\n            mEmptyViewButton.setVisibility(View.VISIBLE);\r\n            mEmptyViewButton.setText(message);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/245", "ground_truth": "        } else {\r\n            mEmptyViewButton.setVisibility(View.GONE);\r\n        }\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import java.util.List\nimport androidx.annotation.DrawableRes\nimport android.view.View\npublic void setEmptyListImage(@DrawableRes int image) {\r\n    if (mEmptyViewImage != null) {\r\n        if (image != -1) {\r\n            mEmptyViewImage.setVisibility(View.VISIBLE);\r\n            mEmptyViewImage.setImageResource(image);\r", "choices": [{"text": "\n import java.util.List\nimport androidx.annotation.DrawableRes\nimport android.view.View\npublic void setEmptyListImage(@DrawableRes int image) {\r\n    if (mEmptyViewImage!= null) {\r\n        if (image!= -1) {\r\n            mEmptyViewImage.setVisibility(View.VISIBLE);\r\n            mEmptyViewImage.setImageResource(image);\r\n} else {\r\n            mEmptyViewImage.setVisibility(View.GONE);\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "simplenote-android/246", "ground_truth": "        } else {\r\n            mEmptyViewImage.setVisibility(View.GONE);\r\n        }\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import java.util.List\nimport android.view.View\npublic void setEmptyListMessage(String message) {\r\n    if (mEmptyViewText != null && message != null) {\r", "choices": [{"text": "\n import java.util.List\nimport android.view.View\npublic void setEmptyListMessage(String message) {\r\n    if (mEmptyViewText!= null && message!= null) {\r\nmEmptyViewText.setText(message);\r\n}\r\n}\n"}], "metadata": {"task_id": "simplenote-android/247", "ground_truth": "        mEmptyViewText.setText(message);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import java.util.List\nimport android.widget.ListView\nimport android.view.View\npublic void setActivatedPosition(int position) {\r\n    if (getListView() != null) {\r\n        if (position == ListView.INVALID_POSITION) {\r\n            getListView().setItemChecked(mActivatedPosition, false);\r\n        } else {\r", "choices": [{"text": "\n import java.util.List\nimport android.widget.ListView\nimport android.view.View\npublic void setActivatedPosition(int position) {\r\n    if (getListView()!= null) {\r\n        if (position == ListView.INVALID_POSITION) {\r\n            getListView().setItemChecked(mActivatedPosition, false);\r\n        } else {\r\n//            getListView().setItemChecked(position, true);\r\n            getListView().setItemChecked(position, true);\r\n            getListView().setSelectionFromTop(position, 0);\r\n        }\r\n    }\r\n    mActivatedPosition = position;\r\n}\n"}], "metadata": {"task_id": "simplenote-android/252", "ground_truth": "            getListView().setItemChecked(position, true);\r\n        }\r\n        mActivatedPosition = position;\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import com.google.android.material.floatingactionbutton.FloatingActionButton\npublic void setFloatingActionButtonVisible(boolean visible) {\r\n    if (mFloatingActionButton == null)\r\n        return;\r\n    if (visible) {\r", "choices": [{"text": "mFloatingActionButton.setVisibility(View.VISIBLE);\r\n    } else {\r\nmFloatingActionButton.setVisibility(View.GONE);\r\n    }\r\n}\n"}], "metadata": {"task_id": "simplenote-android/253", "ground_truth": "        mFloatingActionButton.show();\r\n    } else {\r\n        mFloatingActionButton.hide();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.models.Tag\nimport com.automattic.simplenote.models.Suggestion\nimport com.automattic.simplenote.models.Note\nimport android.view.View\npublic void searchNotes(String searchString, boolean isSubmit) {\r\n    mIsSearching = true;\r\n    mSuggestionLayout.setVisibility(View.VISIBLE);\r\n    if (!searchString.equals(mSearchString)) {\r\n        mSearchString = searchString;\r\n    }\r\n    if (searchString.isEmpty()) {\r\n        getSearchItems();\r\n    } else {\r\n        getTagSuggestions(searchString);\r\n    }\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "simplenote-android/257", "ground_truth": "    if (isSubmit) {\r\n        mSuggestionLayout.setVisibility(View.GONE);\r\n        refreshListForSearch();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import java.util.List\nimport com.automattic.simplenote.models.Suggestion\nimport android.view.View\n/**\r\n * Clear search and load all notes\r\n */\r\npublic void clearSearch() {\r\n    mIsSearching = false;\r\n    mSuggestionLayout.setVisibility(View.GONE);\r\n    refreshList();\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "simplenote-android/258", "ground_truth": "    if (mSearchString != null && !mSearchString.equals(\"\")) {\r\n        mSearchString = null;\r\n        refreshList();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import java.util.List\nimport com.automattic.simplenote.models.Preferences\nprivate void deleteSearchItem(String item) {\r\n    Preferences preferences = getPreferences();\r\n    if (preferences != null) {\r\n        List<String> recents = preferences.getRecentSearches();\r\n        mDeletedItemIndex = recents.indexOf(item);\r\n        recents.remove(item);\r\n        preferences.setRecentSearches(recents);\r", "choices": [{"text": "\n import java.util.List\nimport com.automattic.simplenote.models.Preferences\nprivate void deleteSearchItem(String item) {\r\n    Preferences preferences = getPreferences();\r\n    if (preferences!= null) {\r\n        List<String> recents = preferences.getRecentSearches();\r\n        mDeletedItemIndex = recents.indexOf(item);\r\n        recents.remove(item);\r\n        preferences.setRecentSearches(recents);\r\n}\r\n}\n"}], "metadata": {"task_id": "simplenote-android/259", "ground_truth": "        preferences.save();\r\n    } else {\r\n        Log.e(\"deleteSearchItem\", \"Could not get preferences entity\");\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import com.simperium.client.Bucket.ObjectCursor\nimport com.automattic.simplenote.models.Note\nimport android.database.Cursor\npublic void changeCursor(ObjectCursor<Note> cursor) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\n}\n"}], "metadata": {"task_id": "simplenote-android/262", "ground_truth": "    mCursor = cursor;\r\n    super.changeCursor(cursor);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.models.Note\n@Override\r\npublic Note getItem(int position) {\r", "choices": [{"text": "return notes.get(position);\r\n}\r\n@Override\r\npublic long getItemId(int position) {\r\nreturn position;\r\n}\r\n@Override\r\npublic View getView(int position, View convertView, ViewGroup parent) {\r\nView view = convertView;\r\nif (view == null) {\r\nview = LayoutInflater.from(context).inflate(R.layout.list_item, parent, false);\r\n}\r\nNote note = getItem(position);\r\nTextView title = (TextView) view.findViewById(R.id.title);\r\ntitle"}], "metadata": {"task_id": "simplenote-android/263", "ground_truth": "    mCursor.moveToPosition(position - mList.getHeaderViewsCount());\r\n    return mCursor.getObject();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import android.view.View\nimport android.view.MotionEvent\nimport android.annotation.SuppressLint\n@SuppressLint(\"ClickableViewAccessibility\")\r\n@Override\r\npublic boolean onTouch(View view, MotionEvent event) {\r\n    if (event.getButtonState() == MotionEvent.BUTTON_SECONDARY && event.getAction() == MotionEvent.ACTION_DOWN) {\r", "choices": [{"text": "view.getParent().requestDisallowInterceptTouchEvent(true);\r\nreturn false;\r\n}\r\nreturn false;\r\n}\r\n}\r\n<file_sep><fim_prefix><fim_suffix>t.ACTION_DOWN) {\r\nview.getParent().requestDisallowInterceptTouchEvent(true);\r\nreturn false;\r\n}\r\nreturn false;\r\n}\r\n}\r\n<fim_middle>package com.example.myapplication;\r\n\r\nimport android.view.View;\r\nimport android.view.MotionEvent;\r\nimport android.annotation.SuppressLint\r\n@SuppressLint(\"ClickableViewAccessibility\")\r\n"}], "metadata": {"task_id": "simplenote-android/264", "ground_truth": "        showPopupMenuAtPosition(view, position);\r\n        return true;\r\n    }\r\n    return false;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Preferences\n@Override\r\npublic void onDeleteObject(Bucket<Preferences> bucket, Preferences object) {\r\n    if (isAdded()) {\r\n        requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r", "choices": [{"text": "//                Toast.makeText(getActivity(), \"Deleted\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/265", "ground_truth": "                getSearchItems();\r\n            }\r\n        });\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import com.simperium.client.Bucket\nimport com.automattic.simplenote.utils.AppLog.Type\nimport com.automattic.simplenote.models.Preferences\n@Override\r\npublic void onNetworkChange(Bucket<Preferences> bucket, Bucket.ChangeType type, String key) {\r\n    if (isAdded()) {\r\n        requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r", "choices": [{"text": "//                if (type == Bucket.ChangeType.ADD) {\r\n//                    Toast.makeText(requireActivity(), \"Added\", Toast.LENGTH_SHORT).show();\r\n//                } else if (type == Bucket.ChangeType.UPDATE) {\r\n//                    Toast.makeText(requireActivity(), \"Updated\", Toast.LENGTH_SHORT).show();\r\n//                } else if (type == Bucket.ChangeType.DELETE) {\r\n//                    Toast.makeText(requireActivity(), \"Deleted\", Toast.LENGTH_SHORT).show();\r\n//                }\r\n            }\r\n        });\r\n    }"}], "metadata": {"task_id": "simplenote-android/266", "ground_truth": "                getSearchItems();\r\n            }\r\n        });\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Preferences\n@Override\r\npublic void onSaveObject(Bucket<Preferences> bucket, Preferences object) {\r\n    if (isAdded()) {\r\n        requireActivity().runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r", "choices": [{"text": "//                Toast.makeText(getActivity(), \"Saved\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        });\r\n    }\r\n}\n"}], "metadata": {"task_id": "simplenote-android/267", "ground_truth": "                getSearchItems();\r\n            }\r\n        });\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import java.util.List\nimport com.google.android.material.snackbar.Snackbar\nimport com.automattic.simplenote.models.Suggestion\nimport android.view.View\n@Override\r\npublic void onClick(View view) {\r\n    if (!isAdded()) {\r\n        return;\r\n    }\r\n    final String item = holder.mSuggestionText.getText().toString();\r\n    deleteSearchItem(item);\r\n    Snackbar.make(getRootView(), R.string.snackbar_deleted_recent_search, Snackbar.LENGTH_LONG).setAction(getString(R.string.undo), new View.OnClickListener() {\r\n\r\n        @Override\r", "choices": [{"text": "\n        public void onClick(View v) {\r\n            addSearchItem(item);\r\n        }\r\n    }).show();\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/268", "ground_truth": "        public void onClick(View view) {\r\n            addSearchItem(item, mDeletedItemIndex);\r\n        }\r\n    }).show();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.utils.AppLog.Type\nimport com.automattic.simplenote.models.Suggestion\nimport com.automattic.simplenote.models.Note\nimport android.view.View\nimport com.automattic.simplenote.models.Suggestion.Type.HISTORY\n@Override\r\npublic void onClick(View view) {\r\n    ((NotesActivity) requireActivity()).submitSearch(holder.mSuggestionText.getText().toString());\r\n    if (holder.mViewType == HISTORY) {\r", "choices": [{"text": "//        ((NotesActivity) requireActivity()).submitSearch(holder.mSuggestionText.getText().toString());\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/270", "ground_truth": "        AnalyticsTracker.track(RECENT_SEARCH_TAPPED, CATEGORY_SEARCH, \"recent_search_tapped\");\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import java.util.List\nimport com.automattic.simplenote.models.Suggestion\nimport androidx.recyclerview.widget.DiffUtil\nprivate void updateItems(List<Suggestion> suggestions) {\r\n    DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(new SuggestionDiffCallback(mSuggestions, suggestions));\r\n    mSuggestions.clear();\r", "choices": [{"text": "mSuggestions.addAll(suggestions);\r\ndiffResult.dispatchUpdatesTo(this);\r\n}\n"}], "metadata": {"task_id": "simplenote-android/271", "ground_truth": "    mSuggestions.addAll(suggestions);\r\n    diffResult.dispatchUpdatesTo(this);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import java.util.List\nimport com.automattic.simplenote.models.Suggestion\n@Override\r\npublic boolean areContentsTheSame(int itemPositionOld, int itemPositionNew) {\r\n    Suggestion itemOld = mListOld.get(itemPositionOld);\r", "choices": [{"text": "Suggestion itemNew = mListNew.get(itemPositionNew);\r\nreturn itemOld.equals(itemNew);\r\n}\r\n@Override\r\npublic boolean areItemsTheSame(int itemPositionOld, int itemPositionNew) {\r\nreturn mListOld.get(itemPositionOld).equals(mListNew.get(itemPositionNew));\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/272", "ground_truth": "    Suggestion itemNew = mListNew.get(itemPositionNew);\r\n    return itemOld.getName().equalsIgnoreCase(itemNew.getName());\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import java.util.List\nimport com.automattic.simplenote.models.Suggestion\n@Override\r\npublic boolean areItemsTheSame(int itemPositionOld, int itemPositionNew) {\r\n    Suggestion itemOld = mListOld.get(itemPositionOld);\r", "choices": [{"text": "Suggestion itemNew = mListNew.get(itemPositionNew);\r\nreturn itemOld.getId() == itemNew.getId();\r\n}\r\n@Override\r\npublic boolean areContentsTheSame(int itemPositionOld, int itemPositionNew) {\r\nSuggestion itemOld = mListOld.get(itemPositionOld);\r\nSuggestion itemNew = mListNew.get(itemPositionNew);\r\nreturn itemOld.equals(itemNew);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/273", "ground_truth": "    Suggestion itemNew = mListNew.get(itemPositionNew);\r\n    return itemOld.getName().equalsIgnoreCase(itemNew.getName());\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import java.util.Calendar\nimport com.automattic.simplenote.utils.PrefUtils\nimport com.automattic.simplenote.models.Note\nimport android.content.Context\nimport com.automattic.simplenote.utils.PrefUtils.DATE_MODIFIED_DESCENDING\nimport com.automattic.simplenote.utils.PrefUtils.DATE_MODIFIED_ASCENDING\nimport com.automattic.simplenote.utils.PrefUtils.DATE_CREATED_DESCENDING\nimport com.automattic.simplenote.utils.PrefUtils.DATE_CREATED_ASCENDING\nimport com.automattic.simplenote.utils.PrefUtils.ALPHABETICAL_ASCENDING\nprivate Calendar getDateByPreference(Note note) {\r\n    switch(PrefUtils.getIntPref(requireContext(), PrefUtils.PREF_SORT_ORDER)) {\r\n        case DATE_CREATED_ASCENDING:\r\n        case DATE_CREATED_DESCENDING:\r\n            return note.getCreationDate();\r\n        case DATE_MODIFIED_ASCENDING:\r\n        case DATE_MODIFIED_DESCENDING:\r\n            return note.getModificationDate();\r\n        case ALPHABETICAL_ASCENDING:\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/274", "ground_truth": "        case ALPHABETICAL_DESCENDING:\r\n        default:\r\n            return null;\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import java.util.List\nimport java.util.Calendar\nimport com.automattic.simplenote.models.Note\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onMenuItemClick(MenuItem item) {\r\n    switch(item.getItemId()) {\r\n        case R.id.menu_pin:\r\n            note.setPinned(!note.isPinned());\r\n            note.setModificationDate(Calendar.getInstance());\r\n            note.save();\r\n            refreshList();\r\n            return true;\r\n        case R.id.menu_trash:\r\n            if (getActivity() != null) {\r\n                ((NotesActivity) getActivity()).trashNote(note);\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/275", "ground_truth": "            return true;\r\n        default:\r\n            return false;\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import java.util.List\nimport com.simperium.client.Bucket.ObjectCursor\nimport com.automattic.simplenote.models.Note\nimport androidx.fragment.app.ListFragment\nimport android.database.Cursor\n@Override\r\nprotected ObjectCursor<Note> doInBackground(Boolean... args) {\r\n    NoteListFragment fragment = mNoteListFragmentReference.get();\r", "choices": [{"text": "if (fragment!= null) {\r\n    return fragment.getCursor();\r\n} else {\r\n    return null;\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/276", "ground_truth": "    mIsFromNavSelect = args[0];\r\n    return fragment.queryNotes();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import com.simperium.client.Bucket.ObjectCursor\nimport com.automattic.simplenote.models.Note\nimport android.database.Cursor\n@Override\r\nprotected ObjectCursor<Note> doInBackground(Void... args) {\r", "choices": [{"text": "return new ObjectCursor<Note>(Note.class, mBucket.getNotes());\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/277", "ground_truth": "    NoteListFragment fragment = mNoteListFragmentReference.get();\r\n    return fragment.queryNotesForSearch();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import java.util.List\nimport com.automattic.simplenote.models.Note\nimport androidx.fragment.app.ListFragment\n@Override\r\nprotected void onPostExecute(Void aVoid) {\r\n    NoteListFragment fragment = mNoteListFragmentReference.get();\r", "choices": [{"text": "if (fragment!= null) {\r\nfragment.setNotes(mNotes);\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/279", "ground_truth": "    fragment.mActionMode.finish();\r\n    fragment.refreshList();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListFragment.java"}}
{"prompt": "\n import android.os.Bundle\nimport android.content.Context\nimport android.appwidget.AppWidgetManager\n@Override\r\npublic void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\r\n    for (int appWidgetId : appWidgetIds) {\r\n        Bundle appWidgetOptions = appWidgetManager.getAppWidgetOptions(appWidgetId);\r", "choices": [{"text": "//        int width = appWidgetOptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_WIDTH);\r\n//        int height = appWidgetOptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_HEIGHT);\r\n//        int minWidth = appWidgetOptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_WIDTH);\r\n//        int minHeight = appWidgetOptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_HEIGHT);\r\n//        int maxWidth = appWidgetOptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MAX_WIDTH"}], "metadata": {"task_id": "simplenote-android/284", "ground_truth": "        updateWidget(context, appWidgetManager, appWidgetId, appWidgetOptions);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListWidgetDark.java"}}
{"prompt": "\n @Override\r\npublic void onDestroy() {\r\n    if (mCursor != null) {\r", "choices": [{"text": "\n @Override\r\npublic void onDestroy() {\r\n    if (mCursor!= null) {\r\nmCursor.close();\r\n}\r\nsuper.onDestroy();\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "simplenote-android/286", "ground_truth": "        mCursor.close();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListWidgetFactory.java"}}
{"prompt": "\n import android.os.Bundle\nimport android.content.Context\nimport android.appwidget.AppWidgetManager\n@Override\r\npublic void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\r\n    for (int appWidgetId : appWidgetIds) {\r\n        Bundle appWidgetOptions = appWidgetManager.getAppWidgetOptions(appWidgetId);\r", "choices": [{"text": "//        int width = appWidgetOptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_WIDTH);\r\n//        int height = appWidgetOptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_HEIGHT);\r\n//        int minWidth = appWidgetOptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_WIDTH);\r\n//        int minHeight = appWidgetOptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_HEIGHT);\r\n//        int maxWidth = appWidgetOptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MAX_WIDTH"}], "metadata": {"task_id": "simplenote-android/289", "ground_truth": "        updateWidget(context, appWidgetManager, appWidgetId, appWidgetOptions);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteListWidgetLight.java"}}
{"prompt": " import com.automattic.simplenote.models.Note\npublic static final String ARG_ITEM_ID = \"item_id\";\nprivate Note mNote;\nprivate SharedPreferences mPreferences;\n@Override\r\npublic void run() {\r\n    if (mNote != null && mNote.getSimperiumKey() != null) {\r", "choices": [{"text": " import com.automattic.simplenote.models.Note\npublic static final String ARG_ITEM_ID = \"item_id\";\nprivate Note mNote;\nprivate SharedPreferences mPreferences;\n@Override\r\npublic void run() {\r\n    if (mNote!= null && mNote.getSimperiumKey()!= null) {\r\n//        mNote.setSimperiumKey(null);\r\n        mNote.save();\r\n    }\r\n}\n"}], "metadata": {"task_id": "simplenote-android/291", "ground_truth": "        ((NestedScrollView) layout).smoothScrollTo(0, mPreferences.getInt(mNote.getSimperiumKey(), 0));\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteMarkdownFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.utils.SimplenoteLinkify\nimport com.automattic.simplenote.models.Note\nimport com.automattic.simplenote.analytics.AnalyticsTracker\nimport android.webkit.WebView\nimport android.webkit.WebResourceRequest\nimport android.view.View\nimport com.automattic.simplenote.utils.SimplenoteLinkify.SIMPLENOTE_LINK_PREFIX\n@Override\r\npublic boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\r\n    String url = request.getUrl().toString();\r\n    if (url.startsWith(SimplenoteLinkify.SIMPLENOTE_LINK_PREFIX)) {\r\n        AnalyticsTracker.track(AnalyticsTracker.Stat.INTERNOTE_LINK_TAPPED, AnalyticsTracker.CATEGORY_LINK, \"internote_link_tapped_markdown\");\r\n        SimplenoteLinkify.openNote(requireActivity(), url.replace(SIMPLENOTE_LINK_PREFIX, \"\"));\r", "choices": [{"text": "return true;\r\n    }\r\n    return false;\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/292", "ground_truth": "    } else {\r\n        BrowserUtils.launchBrowserOrShowError(requireContext(), url);\r\n    }\r\n    return true;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteMarkdownFragment.java"}}
{"prompt": " import com.automattic.simplenote.models.Note\nprivate WebView mMarkdown;\nprivate SoftReference<NoteMarkdownFragment> mNoteMarkdownFragmentReference;\nprivate Note mNote;\nprivate void deleteNote() {\r", "choices": [{"text": "Note note = mNote;\r\nif (note!= null) {\r\nmNote = null;\r\nmNoteMarkdownFragmentReference = null;\r\nmNote.delete();\r\n}\r\n}\r\n@Override\r\npublic void onDestroyView() {\r\nsuper.onDestroyView();\r\ndeleteNote();\r\n}\r\n@Override\r\npublic void onDestroy() {\r\nsuper.onDestroy();\r\ndeleteNote();\r\n}\r\n@Override\r\npublic void onDetach() {\r\nsuper.onDetach();\r\ndeleteNote();\r\n"}], "metadata": {"task_id": "simplenote-android/294", "ground_truth": "    NoteUtils.deleteNote(mNote, getActivity());\r\n    requireActivity().finish();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteMarkdownFragment.java"}}
{"prompt": "\n public void updateMarkdown(String text) {\r\n    if (mMarkdown != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/298", "ground_truth": "        mMarkdown.loadDataWithBaseURL(null, getMarkdownFormattedContent(mCss, text), \"text/html\", \"utf-8\", null);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteMarkdownFragment.java"}}
{"prompt": "\n @Override\r\nprotected void onPreExecute() {\r", "choices": [{"text": "super.onPreExecute();\r\npDialog = new ProgressDialog(context);\r\npDialog.setMessage(\"Loading...\");\r\npDialog.setIndeterminate(false);\r\npDialog.setCancelable(true);\r\npDialog.show();\r\n}\r\n@Override\r\nprotected String doInBackground(String... args) {\r\nString url = args[0];\r\nString data = \"\";\r\nInputStream iStream = null;\r\nHttpURLConnection urlConnection = null;\r\ntry {\r\nURL urlObject = new URL(url);\r\nurlConnection ="}], "metadata": {"task_id": "simplenote-android/299", "ground_truth": "    NoteMarkdownFragment fragment = mNoteMarkdownFragmentReference.get();\r\n    fragment.mIsLoadingNote = true;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteMarkdownFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.models.Note\nimport androidx.fragment.app.Fragment\n@Override\r\nprotected void onPostExecute(Void nada) {\r\n    NoteMarkdownFragment fragment = mNoteMarkdownFragmentReference.get();\r", "choices": [{"text": "if (fragment!= null) {\r\nfragment.updateNote(mNote);\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/300", "ground_truth": "    fragment.mIsLoadingNote = false;\r\n    fragment.requireActivity().invalidateOptionsMenu();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteMarkdownFragment.java"}}
{"prompt": "\n void updateNavigationDrawer() {\r\n    runOnUiThread(new Runnable() {\r\n\r", "choices": [{"text": "       @Override\r\n       public void run() {\r\n           // TODO Auto-generated method stub\r\n           if (mDrawerLayout!= null) {\r\n               mDrawerLayout.closeDrawer(Gravity.LEFT);\r\n           }\r\n       }\r\n    });\r\n}\n"}], "metadata": {"task_id": "simplenote-android/301", "ground_truth": "        public void run() {\r\n            updateNavigationDrawerItems();\r\n        }\r\n    });\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java"}}
{"prompt": "\n import android.content.Intent\n@Override\r\nprotected void onNewIntent(Intent intent) {\r", "choices": [{"text": "super.onNewIntent(intent);\r\nsetIntent(intent);\r\n}\r\n}\n"}], "metadata": {"task_id": "simplenote-android/302", "ground_truth": "    super.onNewIntent(intent);\r\n    checkForSharedContent(intent);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java"}}
{"prompt": "\n import android.content.DialogInterface\n@Override\r\npublic void onClick(DialogInterface dialog, int which) {\r", "choices": [{"text": "switch(which){\r\ncase DialogInterface.BUTTON_POSITIVE:\r\n//Yes button clicked\r\nbreak;\r\ncase DialogInterface.BUTTON_NEGATIVE:\r\n//No button clicked\r\nbreak;\r\n}\r\n}\r\n});\r\nalertDialog.show();\r\n}\r\n});\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/303", "ground_truth": "    AuthUtils.logOut((Simplenote) getApplication());\r\n    finish();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java"}}
{"prompt": "\n import androidx.appcompat.app.ActionBar\n@Override\r\npublic void setTitle(CharSequence title) {\r\n    if (getSupportActionBar() != null) {\r", "choices": [{"text": "\n import androidx.appcompat.app.ActionBar\n@Override\r\npublic void setTitle(CharSequence title) {\r\n    if (getSupportActionBar()!= null) {\r\ngetSupportActionBar().setTitle(title);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/306", "ground_truth": "        getSupportActionBar().setTitle(title);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java"}}
{"prompt": " import androidx.drawerlayout.widget.DrawerLayout\nimport androidx.core.view.GravityCompat\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\nprivate boolean mIsShowingMarkdown;\npublic static String TAG_NOTE_LIST = \"noteList\";\n@Override\r\npublic void onBackPressed() {\r\n    if (mDrawerLayout != null && mDrawerLayout.isDrawerOpen(GravityCompat.START)) {\r", "choices": [{"text": " import androidx.drawerlayout.widget.DrawerLayout\nimport androidx.core.view.GravityCompat\npublic static String TAG_NOTE_EDITOR = \"noteEditor\";\nprivate boolean mIsShowingMarkdown;\npublic static String TAG_NOTE_LIST = \"noteList\";\n@Override\r\npublic void onBackPressed() {\r\n    if (mDrawerLayout!= null && mDrawerLayout.isDrawerOpen(GravityCompat.START)) {\r\nmDrawerLayout.closeDrawer(GravityCompat.START);\r\n} else {\r\nsuper.onBackPressed();\r\n}\r\n}\r\n@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\nsuper.onCreate(savedInstanceState);\r\nsetContentView(R.layout.activity_main);\r\nmDrawerLayout = findViewById(R.id.drawer_layout);\r\nmDrawerLayout.addDrawerListener(new DrawerLayout.DrawerListener() {\r\n@Override\r\npublic void onDrawerSlide(View drawerView, float slideOffset) {\r\n// Respond when"}], "metadata": {"task_id": "simplenote-android/307", "ground_truth": "        mDrawerLayout.closeDrawer(GravityCompat.START);\r\n    } else {\r\n        super.onBackPressed();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java"}}
{"prompt": "\n import android.view.View\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic void onActionModeDestroyed() {\r\n    if (mSearchMenuItem != null && !mSearchMenuItem.isActionViewExpanded()) {\r", "choices": [{"text": "\n import android.view.View\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic void onActionModeDestroyed() {\r\n    if (mSearchMenuItem!= null &&!mSearchMenuItem.isActionViewExpanded()) {\r\nmSearchMenuItem.collapseActionView();\r\n}\r\n}\n"}], "metadata": {"task_id": "simplenote-android/308", "ground_truth": "        mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java"}}
{"prompt": "\n import java.util.List\nimport java.util.ArrayList\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Tag\nprivate List<Tag> getTagsFromCursor(Bucket.ObjectCursor<Tag> tagCursor) {\r\n    List<Tag> tags = new ArrayList<>();\r\n    for (int i = 0; i < tagCursor.getCount(); i++) {\r\n        tagCursor.moveToNext();\r\n        Tag tag = tagCursor.getObject();\r\n        if (!collaboratorsRepository.isValidCollaborator(tag.getName())) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/311", "ground_truth": "            tags.add(tag);\r\n        }\r\n    }\r\n    return tags;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java"}}
{"prompt": "\n import com.automattic.simplenote.utils.TagsAdapter\nimport com.automattic.simplenote.models.Tag\nimport android.view.MenuItem\nimport android.view.Menu\nprivate void setSelectedTagActive() {\r\n    if (mSelectedTag == null) {\r\n        mSelectedTag = mTagsAdapter.getDefaultItem();\r\n    }\r\n    MenuItem selectedMenuItem = mNavigationMenu.findItem((int) mSelectedTag.id);\r\n    if (selectedMenuItem != null) {\r\n        selectedMenuItem.setChecked(true);\r", "choices": [{"text": "\n import com.automattic.simplenote.utils.TagsAdapter\nimport com.automattic.simplenote.models.Tag\nimport android.view.MenuItem\nimport android.view.Menu\nprivate void setSelectedTagActive() {\r\n    if (mSelectedTag == null) {\r\n        mSelectedTag = mTagsAdapter.getDefaultItem();\r\n    }\r\n    MenuItem selectedMenuItem = mNavigationMenu.findItem((int) mSelectedTag.id);\r\n    if (selectedMenuItem!= null) {\r\n        selectedMenuItem.setChecked(true);\r\n}\r\n}\n"}], "metadata": {"task_id": "simplenote-android/313", "ground_truth": "    } else {\r\n        mNavigationMenu.findItem(ALL_NOTES_ID).setChecked(true);\r\n    }\r\n    setTitle(mSelectedTag.name);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java"}}
{"prompt": "\n import com.automattic.simplenote.utils.TagsAdapter\nimport com.automattic.simplenote.models.Tag\nimport android.view.MenuItem\nimport android.view.Menu\npublic TagsAdapter.TagMenuItem getSelectedTag() {\r\n    if (mSelectedTag == null) {\r\n        mSelectedTag = mTagsAdapter.getDefaultItem();\r", "choices": [{"text": "}\r\nreturn mSelectedTag;\r\n}\n"}], "metadata": {"task_id": "simplenote-android/314", "ground_truth": "    }\r\n    return mSelectedTag;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java"}}
{"prompt": "\n import android.view.MenuItem\nimport android.view.Menu\nimport android.os.Handler\npublic void updateTrashMenuItem(boolean shouldWaitForAnimation) {\r\n    if (shouldWaitForAnimation) {\r\n        new Handler().postDelayed(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r\n                updateTrashMenuItem();\r\n            }\r", "choices": [{"text": "}, 100);\r\n    } else {\r\n        updateTrashMenuItem();\r\n    }\r\n}\r\n\r\nprivate void updateTrashMenuItem() {\r\n    MenuItem trashItem = getSupportActionBar().getMenu().findItem(R.id.action_trash);\r\n    if (trashItem!= null) {\r\n        trashItem.setVisible(true);\r\n    }\r\n}\n"}], "metadata": {"task_id": "simplenote-android/316", "ground_truth": "        }, getResources().getInteger(R.integer.time_animation));\r\n    } else {\r\n        updateTrashMenuItem();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java"}}
{"prompt": "\n import java.util.List\nimport com.simperium.client.Query\nimport com.automattic.simplenote.models.Note\nimport android.view.View\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onQueryTextChange(String newText) {\r\n    if (mSearchMenuItem.isActionViewExpanded()) {\r\n        getNoteListFragment().searchNotes(newText, false);\r", "choices": [{"text": "   }\r\n    return true;\r}\r\r@Override\r\npublic boolean onQueryTextSubmit(String query) {\r\n    if (mSearchMenuItem.isActionViewExpanded()) {\r\n        getNoteListFragment().searchNotes(query, true);\r    }\r\n    return true;\r}\r\r@Override\r\npublic boolean onMenuItemActionExpand(MenuItem item) {\r\n    if (item.getItemId() == R.id.action_search) {\r\n        mSearchMenuItem.expandActionView();\r    }\r\n    return true;\r}\r\r@Override\r\npublic boolean onMenuItemActionCollapse(MenuItem item"}], "metadata": {"task_id": "simplenote-android/319", "ground_truth": "    }\r\n    return true;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java"}}
{"prompt": "\n import java.util.List\nimport com.simperium.client.Query\nimport com.automattic.simplenote.models.Note\n@Override\r\npublic boolean onQueryTextSubmit(String queryText) {\r\n    getNoteListFragment().searchNotes(queryText, true);\r\n    getNoteListFragment().addSearchItem(queryText, 0);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "simplenote-android/320", "ground_truth": "    checkEmptyListText(true);\r\n    return true;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java"}}
{"prompt": "\n import android.view.View\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onMenuItemClick(MenuItem item) {\r\n    if (!mSearchMenuItem.isActionViewExpanded()) {\r\n        showDetailPlaceholder();\r", "choices": [{"text": "}\r\nreturn true;\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/321", "ground_truth": "    }\r\n    return false;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java"}}
{"prompt": "\n @Override\r\npublic void run() {\r\n    item.setIcon(drawable);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "simplenote-android/324", "ground_truth": "    item.setTitle(string);\r\n    if (item == mEmptyTrashMenuItem) {\r\n        invalidateOptionsMenu();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java"}}
{"prompt": "\n import java.util.List\nimport com.simperium.client.Query\nimport com.automattic.simplenote.models.Note\nimport androidx.appcompat.widget.SearchView\nimport android.view.View\nimport com.automattic.simplenote.NoteListFragment.TAG_PREFIX\npublic void submitSearch(String selection) {\r\n    if (mSearchView != null) {\r\n        String query = mSearchView.getQuery().toString();\r\n        if (query.endsWith(TAG_PREFIX)) {\r\n            mSearchView.setQuery(query.substring(0, query.lastIndexOf(TAG_PREFIX)) + selection, true);\r", "choices": [{"text": "\n import java.util.List\nimport com.simperium.client.Query\nimport com.automattic.simplenote.models.Note\nimport androidx.appcompat.widget.SearchView\nimport android.view.View\nimport com.automattic.simplenote.NoteListFragment.TAG_PREFIX\npublic void submitSearch(String selection) {\r\n    if (mSearchView!= null) {\r\n        String query = mSearchView.getQuery().toString();\r\n        if (query.endsWith(TAG_PREFIX)) {\r\n            mSearchView.setQuery(query.substring(0, query.lastIndexOf(TAG_PREFIX)) + selection, true);\r\r\n        } else {\r\n            mSearchView.setQuery(query + TAG_PREFIX + selection, true);\r\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "simplenote-android/325", "ground_truth": "        } else {\r\n            mSearchView.setQuery(selection, true);\r\n        }\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java"}}
{"prompt": "\n import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Note\n@Override\r\npublic void run() {\r\n    if (!mNotesBucket.hasChangeVersion()) {\r", "choices": [{"text": "//        mNotesBucket.setChangeVersion(mNotesBucket.getChangeVersion() + 1);\r\n        mNotesBucket.setChangeVersion(mNotesBucket.getChangeVersion() + 1);\r\n        mNotesBucket.save();\r\n    }\r\n    mNotesBucket.setChangeVersion(mNotesBucket.getChangeVersion() + 1);\r\n    mNotesBucket.save();\r\n    mNotesBucket.setChangeVersion(mNotesBucket.getChangeVersion() + 1);\r\n    mNotesBucket.save();\r\n    mNotesBucket.setChangeVersion(mNotesBucket.getChangeVersion() + "}], "metadata": {"task_id": "simplenote-android/328", "ground_truth": "        setToolbarProgressVisibility(true);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java"}}
{"prompt": "\n @Override\r\npublic void run() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\ntry {\r\nwhile(true) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(is"}], "metadata": {"task_id": "simplenote-android/329", "ground_truth": "    AppLog.add(Type.ACCOUNT, \"Access token not authorized\");\r\n    startLoginActivity();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java"}}
{"prompt": "\n import androidx.appcompat.widget.Toolbar\nimport androidx.appcompat.app.ActionBar\nprivate void setToolbarProgressVisibility(boolean isVisible) {\r\n    if (getSupportActionBar() != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/330", "ground_truth": "        getSupportActionBar().setDisplayShowCustomEnabled(isVisible);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java"}}
{"prompt": "\n import android.os.Bundle\n@Override\r\nprotected void onPostCreate(Bundle savedInstanceState) {\r\n    super.onPostCreate(savedInstanceState);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "simplenote-android/332", "ground_truth": "    // Sync the toggle state after onRestoreInstanceState has occurred.\r\n    mDrawerToggle.syncState();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java"}}
{"prompt": "\n import com.automattic.simplenote.models.Note\nimport android.view.MenuItem\nimport android.view.Menu\nprivate void togglePreview(MenuItem item) {\r\n    if (mIsShowingMarkdown) {\r\n        setIconAfterAnimation(item, R.drawable.av_visibility_on_off_24dp, R.string.markdown_show);\r\n        setMarkdownShowing(false);\r\n        mCurrentNote.setPreviewEnabled(false);\r\n    } else {\r\n        setIconAfterAnimation(item, R.drawable.av_visibility_off_on_24dp, R.string.markdown_hide);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/337", "ground_truth": "        setMarkdownShowing(true);\r\n        mCurrentNote.setPreviewEnabled(true);\r\n    }\r\n    mCurrentNote.save();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java"}}
{"prompt": "\n import java.util.List\nimport com.simperium.client.Bucket\nimport com.simperium.Simperium\nimport com.automattic.simplenote.utils.AppLog.Type\nimport com.automattic.simplenote.models.Note\nimport androidx.appcompat.widget.Toolbar\n/* Simperium Bucket Listeners */\r\n// received a change from the network, refresh the list\r\n@Override\r\npublic void onNetworkChange(Bucket<Note> bucket, final Bucket.ChangeType type, String key) {\r\n    runOnUiThread(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            if (type == Bucket.ChangeType.INDEX) {\r\n                setToolbarProgressVisibility(false);\r", "choices": [{"text": "//                mAdapter.notifyDataSetChanged();\r\n            } else if (type == Bucket.ChangeType.ADD) {\r\n                setToolbarProgressVisibility(false);\r\n//                mAdapter.notifyDataSetChanged();\r\n            } else if (type == Bucket.ChangeType.REMOVE) {\r\n                setToolbarProgressVisibility(false);\r\n//                mAdapter.notifyDataSetChanged();\r\n            } else if (type == Bucket.ChangeType.UPDATE) {\r\n                setToolbarProgressVisibility(false);\r\n//                mAdapter.notifyDataSetChanged();\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n// received a change from"}], "metadata": {"task_id": "simplenote-android/339", "ground_truth": "            }\r\n            mNoteListFragment.refreshList();\r\n        }\r\n    });\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java"}}
{"prompt": "\n import com.simperium.client.Bucket\nimport com.automattic.simplenote.utils.AppLog.Type\nimport androidx.appcompat.widget.Toolbar\n@Override\r\npublic void run() {\r\n    if (type == Bucket.ChangeType.INDEX) {\r\n        setToolbarProgressVisibility(false);\r", "choices": [{"text": "}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}"}], "metadata": {"task_id": "simplenote-android/340", "ground_truth": "    }\r\n    mNoteListFragment.refreshList();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java"}}
{"prompt": "\n import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Note\n@Override\r\npublic void onDeleteObject(Bucket<Note> bucket, Note object) {\r\n    runOnUiThread(new Runnable() {\r\n\r\n        @Override\r", "choices": [{"text": "public void run() {\r\n            Toast.makeText(MainActivity.this, \"Note Deleted\", Toast.LENGTH_SHORT).show();\r\n        }\r\n    });\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/341", "ground_truth": "        public void run() {\r\n            mNoteListFragment.refreshList();\r\n        }\r\n    });\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java"}}
{"prompt": "\n import com.simperium.client.Query\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Note\nimport android.app.Activity\n@Override\r\nprotected Void doInBackground(Void... voids) {\r\n    NotesActivity activity = mNotesActivityReference.get();\r\n    if (activity.mNotesBucket == null) {\r\n        return null;\r\n    }\r\n    Query<Note> query = Note.allDeleted(activity.mNotesBucket);\r\n    Bucket.ObjectCursor cursor = query.execute();\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "simplenote-android/342", "ground_truth": "    while (cursor.moveToNext()) {\r\n        cursor.getObject().delete();\r\n    }\r\n    return null;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java"}}
{"prompt": "\n import com.automattic.simplenote.models.Note\nimport android.app.Activity\n@Override\r\nprotected void onPostExecute(Void nada) {\r\n    NotesActivity activity = mNotesActivityReference.get();\r\n    if (activity != null) {\r", "choices": [{"text": "\n import com.automattic.simplenote.models.Note\nimport android.app.Activity\n@Override\r\nprotected void onPostExecute(Void nada) {\r\n    NotesActivity activity = mNotesActivityReference.get();\r\n    if (activity!= null) {\r\n//        activity.setNotes(mNotes);\r\n        activity.setNotes(mNotes);\r\n        activity.setLoading(false);\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/343", "ground_truth": "        activity.showDetailPlaceholder();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NotesActivity.java"}}
{"prompt": "\n import android.os.Bundle\nimport android.content.Context\nimport android.appwidget.AppWidgetManager\n@Override\r\npublic void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\r\n    for (int appWidgetId : appWidgetIds) {\r\n        Bundle appWidgetOptions = appWidgetManager.getAppWidgetOptions(appWidgetId);\r", "choices": [{"text": "//        int width = appWidgetOptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_WIDTH);\r\n//        int height = appWidgetOptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_HEIGHT);\r\n//        int minWidth = appWidgetOptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_WIDTH);\r\n//        int minHeight = appWidgetOptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_HEIGHT);\r\n//        int maxWidth = appWidgetOptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MAX_WIDTH"}], "metadata": {"task_id": "simplenote-android/345", "ground_truth": "        updateWidget(context, appWidgetManager, appWidgetId, appWidgetOptions);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteWidgetDark.java"}}
{"prompt": "\n import com.automattic.simplenote.utils.PrefUtils\nimport android.widget.RemoteViews\nimport android.view.View\nimport android.os.Bundle\nimport android.content.Context\nimport android.appwidget.AppWidgetManager\n@Override\r\npublic void onAppWidgetOptionsChanged(Context context, AppWidgetManager appWidgetManager, int appWidgetId, Bundle newOptions) {\r\n    RemoteViews views = new RemoteViews(context.getPackageName(), PrefUtils.getLayoutWidget(context, false));\r", "choices": [{"text": "}\r\n<file_sep>/app/src/main/java/com/automattic/simplenote/utils/PrefUtils.java\npackage com.automattic.simplenote.utils;\n\nimport android.content.Context;\nimport android.content.SharedPreferences;\nimport android.preference.PreferenceManager;\n\nimport com.automattic.simplenote.R;\n\npublic class PrefUtils {\n\n    public static final String PREF_KEY_LAYOUT_WIDGET = \"layout_widget\";\n    public static final String PREF_KEY_LAYOUT_WIDGET_LIST = \"layout"}], "metadata": {"task_id": "simplenote-android/346", "ground_truth": "    resizeWidget(newOptions, views);\r\n    appWidgetManager.updateAppWidget(appWidgetId, views);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteWidgetDark.java"}}
{"prompt": "\n import com.automattic.simplenote.models.Note\n@Override\r\npublic Note getItem(int position) {\r", "choices": [{"text": "return notes.get(position);\r\n}\r\n@Override\r\npublic long getItemId(int position) {\r\nreturn position;\r\n}\r\n@Override\r\npublic View getView(int position, View convertView, ViewGroup parent) {\r\nView view = convertView;\r\nif (view == null) {\r\nview = LayoutInflater.from(context).inflate(R.layout.list_item, parent, false);\r\n}\r\nNote note = getItem(position);\r\nTextView title = (TextView) view.findViewById(R.id.title);\r\ntitle"}], "metadata": {"task_id": "simplenote-android/347", "ground_truth": "    mCursor.moveToPosition(position);\r\n    return mCursor.getObject();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteWidgetDarkConfigureActivity.java"}}
{"prompt": "\n import android.os.Bundle\nimport android.content.Context\nimport android.appwidget.AppWidgetManager\n@Override\r\npublic void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\r\n    for (int appWidgetId : appWidgetIds) {\r\n        Bundle appWidgetOptions = appWidgetManager.getAppWidgetOptions(appWidgetId);\r", "choices": [{"text": "//        int width = appWidgetOptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_WIDTH);\r\n//        int height = appWidgetOptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_HEIGHT);\r\n//        int minWidth = appWidgetOptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_WIDTH);\r\n//        int minHeight = appWidgetOptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MIN_HEIGHT);\r\n//        int maxWidth = appWidgetOptions.getInt(AppWidgetManager.OPTION_APPWIDGET_MAX_WIDTH"}], "metadata": {"task_id": "simplenote-android/349", "ground_truth": "        updateWidget(context, appWidgetManager, appWidgetId, appWidgetOptions);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteWidgetLight.java"}}
{"prompt": "\n import com.automattic.simplenote.utils.PrefUtils\nimport android.widget.RemoteViews\nimport android.view.View\nimport android.os.Bundle\nimport android.content.Context\nimport android.appwidget.AppWidgetManager\n@Override\r\npublic void onAppWidgetOptionsChanged(Context context, AppWidgetManager appWidgetManager, int appWidgetId, Bundle newOptions) {\r\n    RemoteViews views = new RemoteViews(context.getPackageName(), PrefUtils.getLayoutWidget(context, true));\r", "choices": [{"text": "}\r\n<file_sep>/app/src/main/java/com/automattic/simplenote/utils/PrefUtils.java\npackage com.automattic.simplenote.utils;\n\nimport android.content.Context;\nimport android.content.SharedPreferences;\nimport android.preference.PreferenceManager;\n\nimport com.automattic.simplenote.R;\n\npublic class PrefUtils {\n\n    public static final String PREF_KEY_LAYOUT_WIDGET = \"layout_widget\";\n    public static final String PREF_KEY_LAYOUT_WIDGET_LIST = \"layout"}], "metadata": {"task_id": "simplenote-android/350", "ground_truth": "    resizeWidget(newOptions, views);\r\n    appWidgetManager.updateAppWidget(appWidgetId, views);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteWidgetLight.java"}}
{"prompt": "\n import com.automattic.simplenote.models.Note\n@Override\r\npublic Note getItem(int position) {\r", "choices": [{"text": "return notes.get(position);\r\n}\r\n@Override\r\npublic long getItemId(int position) {\r\nreturn position;\r\n}\r\n@Override\r\npublic View getView(int position, View convertView, ViewGroup parent) {\r\nView view = convertView;\r\nif (view == null) {\r\nview = LayoutInflater.from(context).inflate(R.layout.list_item, parent, false);\r\n}\r\nNote note = getItem(position);\r\nTextView title = (TextView) view.findViewById(R.id.title);\r\ntitle"}], "metadata": {"task_id": "simplenote-android/351", "ground_truth": "    mCursor.moveToPosition(position);\r\n    return mCursor.getObject();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\NoteWidgetLightConfigureActivity.java"}}
{"prompt": "\n @Override\r\nprotected void onResume() {\r", "choices": [{"text": "super.onResume();\r\nmSensorManager.registerListener(this, mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER), SensorManager.SENSOR_DELAY_NORMAL);\r\n}\r\n\r\n@Override\r\nprotected void onPause() {\r\nsuper.onPause();\r\nmSensorManager.unregisterListener(this);\r\n}\r\n\r\n@Override\r\npublic void onAccuracyChanged(Sensor sensor, int accuracy) {\r\n}\r\n\r\n@Override\r\npublic void onSensorChanged(SensorEvent event) {\r\nif (event.sensor.getType() =="}], "metadata": {"task_id": "simplenote-android/353", "ground_truth": "    super.onResume();\r\n    disableScreenshotsIfLocked(this);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesActivity.java"}}
{"prompt": "\n import com.simperium.Simperium\nimport com.automattic.simplenote.authentication.SimplenoteAuthenticationActivity\nimport androidx.preference.Preference\nimport android.content.Intent\nimport android.app.Activity\n@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r\n    if (!isAdded()) {\r\n        return false;\r\n    }\r\n    Simplenote currentApp = (Simplenote) getActivity().getApplication();\r\n    if (currentApp.getSimperium().needsAuthorization()) {\r\n        Intent loginIntent = new Intent(getActivity(), SimplenoteAuthenticationActivity.class);\r\n        startActivityForResult(loginIntent, Simperium.SIGNUP_SIGNIN_REQUEST);\r", "choices": [{"text": "} else {\r\n        Intent intent = new Intent(getActivity(), SimplenoteActivity.class);\r\n        startActivity(intent);\r\n    }\r\n    return true;\r\n}\n"}], "metadata": {"task_id": "simplenote-android/355", "ground_truth": "    } else {\r\n        new LogOutTask(PreferencesFragment.this).execute();\r\n    }\r\n    return true;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.analytics.AnalyticsTracker\nimport androidx.preference.Preference\n@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r\n    AnalyticsTracker.track(AnalyticsTracker.Stat.USER_ACCOUNT_DELETE_REQUESTED, AnalyticsTracker.CATEGORY_USER, \"preferences_delete_account_button\");\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "simplenote-android/356", "ground_truth": "    showDeleteAccountDialog();\r\n    return true;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.utils.BrowserUtils\nimport androidx.preference.Preference\nimport android.content.Context\n@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r\n    try {\r\n        BrowserUtils.launchBrowserOrShowError(requireContext(), \"https://simplenote.com/help\");\r", "choices": [{"text": "return true;\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\nreturn false;\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/357", "ground_truth": "    } catch (Exception e) {\r\n        toast(R.string.no_browser_available, Toast.LENGTH_LONG);\r\n    }\r\n    return true;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.utils.BrowserUtils\nimport androidx.preference.Preference\nimport android.content.Context\n@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r\n    try {\r\n        BrowserUtils.launchBrowserOrShowError(requireContext(), \"http://simplenote.com\");\r", "choices": [{"text": "} catch (e: Exception) {\r\n    e.printStackTrace()\r\n}\r\nreturn true\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/358", "ground_truth": "    } catch (Exception e) {\r\n        toast(R.string.no_browser_available, Toast.LENGTH_LONG);\r\n    }\r\n    return true;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java"}}
{"prompt": "\n import androidx.preference.Preference\n@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nif(preference.getKey().equals(\"pref_key_1\"))\r\n{\r\n//do something\r\n}\r\nelse if(preference.getKey().equals(\"pref_key_2\"))\r\n{\r\n//do something\r\n}\r\nreturn super.onPreferenceClick(preference);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/359", "ground_truth": "    startActivity(new Intent(getActivity(), AboutActivity.class));\r\n    return true;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java"}}
{"prompt": "\n import androidx.preference.Preference\n@Override\r\npublic boolean onPreferenceChange(Preference preference, Object newValue) {\r", "choices": [{"text": "if (preference.getKey().equals(\"key\")) {\r\n// do something\r\n}\r\nreturn true;\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/362", "ground_truth": "    updateTheme(requireActivity(), Integer.parseInt(newValue.toString()));\r\n    return true;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java"}}
{"prompt": "\n import androidx.preference.Preference\n@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nif(preference.getKey().equals(\"pref_key_1\"))\r\n{\r\n//do something\r\n}\r\nelse if(preference.getKey().equals(\"pref_key_2\"))\r\n{\r\n//do something\r\n}\r\nreturn super.onPreferenceClick(preference);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/364", "ground_truth": "    startActivity(new Intent(requireContext(), StyleActivity.class));\r\n    return true;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java"}}
{"prompt": "\n import androidx.preference.Preference\n@Override\r\npublic boolean onPreferenceClick(Preference preference) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nif(preference.getKey().equals(\"pref_key_1\"))\r\n{\r\n//do something\r\n}\r\nelse if(preference.getKey().equals(\"pref_key_2\"))\r\n{\r\n//do something\r\n}\r\nreturn super.onPreferenceClick(preference);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/365", "ground_truth": "    ((PreferencesActivity) requireActivity()).openBrowserForMembership(getView());\r\n    return true;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.analytics.AnalyticsTracker\nimport androidx.preference.SwitchPreferenceCompat\nimport androidx.preference.Preference\n@Override\r\npublic boolean onPreferenceChange(Preference preference, Object o) {\r\n    if (((SwitchPreferenceCompat) preference).isChecked()) {\r\n        AnalyticsTracker.track(AnalyticsTracker.Stat.SETTINGS_LIST_CONDENSED_ENABLED, AnalyticsTracker.CATEGORY_USER, \"condensed_list_preference\");\r", "choices": [{"text": "} else {\r\n        AnalyticsTracker.track(AnalyticsTracker.Stat.SETTINGS_LIST_CONDENSED_DISABLED, AnalyticsTracker.CATEGORY_USER, \"condensed_list_preference\");\r\n}\r\nreturn true;\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/366", "ground_truth": "    }\r\n    return true;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java"}}
{"prompt": "\n import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Preferences\nimport androidx.preference.Preference\nimport com.automattic.simplenote.models.Preferences.PREFERENCES_OBJECT_KEY\n@Override\r\npublic boolean onPreferenceChange(Preference preference, Object newValue) {\r\n    try {\r\n        boolean isChecked = (boolean) newValue;\r\n        Preferences prefs = mPreferencesBucket.get(PREFERENCES_OBJECT_KEY);\r\n        prefs.setAnalyticsEnabled(isChecked);\r\n        prefs.save();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/367", "ground_truth": "    } catch (BucketObjectMissingException e) {\r\n        e.printStackTrace();\r\n    }\r\n    return true;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java"}}
{"prompt": "\n import com.simperium.android.ProgressDialogFragment\nimport android.app.Fragment\nprivate void closeProgressDialogDeleteAccount() {\r\n    if (mProgressDialogFragment != null && !mProgressDialogFragment.isHidden()) {\r\n        mProgressDialogFragment.dismiss();\r", "choices": [{"text": "\n import com.simperium.android.ProgressDialogFragment\nimport android.app.Fragment\nprivate void closeProgressDialogDeleteAccount() {\r\n    if (mProgressDialogFragment!= null &&!mProgressDialogFragment.isHidden()) {\r\n        mProgressDialogFragment.dismiss();\r\n}\r\n}\n"}], "metadata": {"task_id": "simplenote-android/370", "ground_truth": "        mProgressDialogFragment = null;\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java"}}
{"prompt": "\n import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Note\nimport android.app.Activity\nprivate boolean hasUnsyncedNotes() {\r\n    Simplenote application = (Simplenote) getActivity().getApplication();\r\n    Bucket<Note> notesBucket = application.getNotesBucket();\r\n    Bucket.ObjectCursor<Note> notesCursor = notesBucket.allObjects();\r\n    while (notesCursor.moveToNext()) {\r\n        Note note = notesCursor.getObject();\r\n        if (note.isNew() || note.isModified()) {\r", "choices": [{"text": "//            Log.d(TAG, \"hasUnsyncedNotes: true\");\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n"}], "metadata": {"task_id": "simplenote-android/373", "ground_truth": "            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java"}}
{"prompt": "\n import com.automattic.simplenote.utils.AppLog.Type\nimport com.automattic.simplenote.utils.AppLog\nimport com.automattic.simplenote.models.Preferences\nimport com.automattic.simplenote.analytics.AnalyticsTracker\nimport androidx.preference.Preference\nimport android.app.Fragment\nprivate void logOut() {\r\n    AppLog.add(Type.ACTION, \"Tapped logout button (PreferencesFragment)\");\r\n    AnalyticsTracker.track(AnalyticsTracker.Stat.USER_SIGNED_OUT, AnalyticsTracker.CATEGORY_USER, \"preferences_sign_out_button\");\r", "choices": [{"text": "}\r\nprivate void logOut() {\r\n    AppLog.add(Type.ACTION, \"Tapped logout button (PreferencesFragment)\");\r\n    AnalyticsTracker.track(AnalyticsTracker.Stat.USER_SIGNED_OUT, AnalyticsTracker.CATEGORY_USER, \"preferences_sign_out_button\");\r\n}\r\nprivate void logOut() {\r\n    AppLog.add(Type.ACTION, \"Tapped logout button (PreferencesFragment)\");\r\n    AnalyticsTracker.track(AnalyticsTracker.Stat.USER_SIGNED_OUT, AnalyticsTracker.CATEGORY_USER, \"preferences_sign_out_button\");\r\n}"}], "metadata": {"task_id": "simplenote-android/374", "ground_truth": "    AuthUtils.logOut((Simplenote) requireActivity().getApplication());\r\n    getActivity().finish();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java"}}
{"prompt": "\n @Override\r\npublic void run() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\ntry {\r\nwhile(true) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(is"}], "metadata": {"task_id": "simplenote-android/378", "ground_truth": "    fragment.closeProgressDialogDeleteAccount();\r\n    fragment.showDeleteAccountConfirmationDialog();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java"}}
{"prompt": "\n @Override\r\npublic void run() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\ntry {\r\nwhile(true) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(is"}], "metadata": {"task_id": "simplenote-android/379", "ground_truth": "    fragment.closeProgressDialogDeleteAccount();\r\n    fragment.showDialogDeleteAccountError();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\PreferencesFragment.java"}}
{"prompt": "\n import com.simperium.client.Bucket\nimport com.automattic.simplenote.utils.TagUtils\nimport com.automattic.simplenote.models.Tag\noverride fun saveTag(tagName: String): Boolean {\r\n        return try {\r\n            TagUtils.createTagIfMissing(tagsBucket, tagName)\r", "choices": [{"text": "//            val tag = Tag(tagName)\r\n//            tagsBucket.save(tag)\r\n            true\r\n        } catch (e: Exception) {\r\n            false\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "simplenote-android/384", "ground_truth": "            true\r\n        } catch (bucketObjectNameInvalid: BucketObjectNameInvalid) {\r\n            false\r\n        }\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\repositories\\SimperiumTagsRepository.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport com.automattic.simplenote.models.Tag\noverride suspend fun deleteTag(tag: Tag) = withContext(ioDispatcher) {\r", "choices": [{"text": "//    TODO(\"Not yet implemented\")\r\n}\n"}], "metadata": {"task_id": "simplenote-android/387", "ground_truth": "        deleteTagFromNotes(tag)\r\n        tag.delete()\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\repositories\\SimperiumTagsRepository.kt"}}
{"prompt": "\n import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Tag\nimport com.automattic.simplenote.models.Note\nprivate fun deleteTagFromNotes(tag: Tag) {\r\n        val cursor = tag.findNotes(notesBucket, tag.name)\r\n\r\n        while (cursor.moveToNext()) {\r\n            val note = cursor.getObject()\r", "choices": [{"text": "//            note.tags.remove(tag)\r\n            note.tags.remove(tag.name)\r\n            notesBucket.update(note)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "simplenote-android/388", "ground_truth": "            note.removeTag(tag.name)\r\n        }\r\n\r\n        cursor.close()\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\repositories\\SimperiumTagsRepository.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport com.simperium.client.Query\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.models.TagItem\nimport com.automattic.simplenote.models.Tag\noverride suspend fun allTags(): List<TagItem> = withContext(ioDispatcher) {\r\n        val tagQuery = Tag.all(tagsBucket).reorder().orderByKey().include(Tag.NOTE_COUNT_INDEX_NAME)\r\n        val cursor = tagQuery.execute()\r", "choices": [{"text": "//        val tags = mutableListOf<TagItem>()\r\n        val tags = mutableMapOf<String, TagItem>()\r\n        while (cursor.hasNext()) {\r\n            val tag = cursor.next()\r\n            val tagItem = TagItem(tag.key, tag.get(Tag.NOTE_COUNT_INDEX_NAME) as Int)\r\n            tags[tag.key] = tagItem\r\n        }\r\n        tags.values.toList()\r\n    }\n\noverride suspend fun getTag(tagId: String): TagItem? = withContext(ioDispatcher) {\r\n        val tagQuery = Tag.all(tagsBucket).where"}], "metadata": {"task_id": "simplenote-android/389", "ground_truth": "\r\n        return@withContext cursorToTagItems(cursor)\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\repositories\\SimperiumTagsRepository.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport com.simperium.client.Query\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.models.TagItem\nimport com.automattic.simplenote.models.Tag\noverride suspend fun searchTags(query: String): List<TagItem> = withContext(ioDispatcher) {\r\n        val tags = Tag.all(tagsBucket)\r\n                .where(Tag.NAME_PROPERTY, Query.ComparisonType.LIKE, \"%$query%\")\r\n                .orderByKey().include(Tag.NOTE_COUNT_INDEX_NAME)\r", "choices": [{"text": "\n import kotlinx.coroutines.withContext\nimport com.simperium.client.Query\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.models.TagItem\nimport com.automattic.simplenote.models.Tag\noverride suspend fun searchTags(query: String): List<TagItem> = withContext(ioDispatcher) {\r\n        val tags = Tag.all(tagsBucket)\r\n               .where(Tag.NAME_PROPERTY, Query.ComparisonType.LIKE, \"%$query%\")\r\n               .orderByKey().include(Tag.NOTE_COUNT_INDEX_NAME)\r\n//               .limit(10)\r\n               .get()\r\n        tags.map { TagItem(it.key, it.getString(Tag.NAME_PROPERTY), it.getInt(Tag.NOTE_COUNT_INDEX_NAME)) }\r\n    }\n"}], "metadata": {"task_id": "simplenote-android/390", "ground_truth": "                .reorder()\r\n        val cursor = tags.execute()\r\n\r\n        return@withContext cursorToTagItems(cursor)\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\repositories\\SimperiumTagsRepository.kt"}}
{"prompt": "\n import com.automattic.simplenote.utils.NetworkUtils\nimport com.automattic.simplenote.FullScreenDialogFragment.FullScreenDialogController\nimport android.widget.Toast\n@Override\r\npublic boolean onConfirmClicked(FullScreenDialogController controller) {\r\n    if (!NetworkUtils.isNetworkAvailable(requireContext())) {\r\n        Toast.makeText(requireContext(), R.string.error_network_required, Toast.LENGTH_LONG).show();\r\n        return false;\r\n    }\r\n    if (mHasSentEmail) {\r\n        Toast.makeText(requireContext(), R.string.toast_email_sent, Toast.LENGTH_SHORT).show();\r\n    } else {\r", "choices": [{"text": "//        mHasSentEmail = true;\r\n//        controller.dismiss();\r\n    }\r\n    return true;\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/392", "ground_truth": "        showVerifyEmail();\r\n    }\r\n    sendVerificationEmail();\r\n    return false;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\ReviewAccountVerifyEmailFragment.java"}}
{"prompt": "\n import android.os.Looper\nimport android.os.Handler\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    new Handler(Looper.getMainLooper()).post(new Runnable() {\r\n\r\n        @Override\r", "choices": [{"text": "\n        public void run() {\r\n            // TODO Auto-generated method stub\r\n            // \u8fd9\u91cc\u662f\u5b50\u7ebf\u7a0b\u64cd\u4f5c\r\n            // \u8fd9\u91cc\u662f\u5b50\u7ebf\u7a0b\u64cd\u4f5c\r\n            // \u8fd9\u91cc\u662f\u5b50\u7ebf\u7a0b\u64cd\u4f5c\r\n            // \u8fd9\u91cc\u662f\u5b50\u7ebf\u7a0b\u64cd\u4f5c\r\n            // \u8fd9\u91cc\u662f\u5b50\u7ebf\u7a0b\u64cd\u4f5c\r\n            // \u8fd9\u91cc\u662f\u5b50\u7ebf\u7a0b\u64cd\u4f5c\r\n            // \u8fd9\u91cc\u662f\u5b50\u7ebf\u7a0b\u64cd\u4f5c\r\n            // \u8fd9\u91cc\u662f\u5b50\u7ebf\u7a0b\u64cd\u4f5c\r\n            // \u8fd9\u91cc\u662f\u5b50\u7ebf\u7a0b\u64cd\u4f5c\r\n            // \u8fd9\u91cc\u662f\u5b50\u7ebf\u7a0b\u64cd\u4f5c\r\n            // \u8fd9\u91cc\u662f\u5b50\u7ebf\u7a0b\u64cd\u4f5c\r\n            // \u8fd9\u91cc\u662f\u5b50\u7ebf\u7a0b\u64cd\u4f5c\r\n            // \u8fd9\u91cc\u662f\u5b50\u7ebf\u7a0b\u64cd\u4f5c\r\n            // \u8fd9\u91cc\u662f\u5b50\u7ebf\u7a0b\u64cd\u4f5c\r\n            //"}], "metadata": {"task_id": "simplenote-android/396", "ground_truth": "        public void run() {\r\n            dismissIfVerified();\r\n        }\r\n    });\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\ReviewAccountVerifyEmailFragment.java"}}
{"prompt": "\n import android.os.Bundle\npublic static Bundle newBundle(boolean hasSentEmail) {\r\n    Bundle bundle = new Bundle();\r", "choices": [{"text": "bundle.putBoolean(\"hasSentEmail\", hasSentEmail);\r\nreturn bundle;\r\n}\n"}], "metadata": {"task_id": "simplenote-android/398", "ground_truth": "    bundle.putBoolean(EXTRA_SENT_EMAIL, hasSentEmail);\r\n    return bundle;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\ReviewAccountVerifyEmailFragment.java"}}
{"prompt": "\n import com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Preferences\nimport com.automattic.simplenote.models.Preferences.PREFERENCES_OBJECT_KEY\npublic static boolean analyticsIsEnabled() {\r\n    if (mPreferencesBucket == null) {\r\n        return true;\r\n    }\r\n    try {\r\n        Preferences prefs = mPreferencesBucket.get(PREFERENCES_OBJECT_KEY);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/408", "ground_truth": "        return prefs.getAnalyticsEnabled();\r\n    } catch (BucketObjectMissingException e) {\r\n        return true;\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\Simplenote.java"}}
{"prompt": " import android.util.Log\npublic static final int INTENT_EDIT_NOTE = 2;\npublic static final String SCROLL_POSITION_PREFERENCES = \"scroll_position\";\npublic static final String TAG = \"Simplenote\";\npublic boolean isLoggedIn() {\r", "choices": [{"text": "return mIsLoggedIn;\r\n}\npublic void setLoggedIn(boolean isLoggedIn) {\r\nmIsLoggedIn = isLoggedIn;\r\n}\npublic void setNote(Note note) {\r\nmNote = note;\r\n}\npublic Note getNote() {\r\nreturn mNote;\r\n}\npublic void setNoteList(List<Note> noteList) {\r\nmNoteList = noteList;\r\n}\npublic List<Note> getNoteList() {\r\nreturn mNoteList;\r\n}\npublic void setNoteList(ArrayList<Note> note"}], "metadata": {"task_id": "simplenote-android/411", "ground_truth": "    User user = mSimperium.getUser();\r\n    return user != null && user.getStatus() == User.Status.AUTHORIZED;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\Simplenote.java"}}
{"prompt": "\n import com.simperium.client.User\npublic String getUserEmail() {\r", "choices": [{"text": "return user.getEmail();\r\n}\r\npublic void setUserEmail(String userEmail) {\r\nthis.userEmail = userEmail;\r\n}\r\npublic String getUserName() {\r\nreturn userName;\r\n}\r\npublic void setUserName(String userName) {\r\nthis.userName = userName;\r\n}\r\npublic String getUserPassword() {\r\nreturn userPassword;\r\n}\r\npublic void setUserPassword(String userPassword) {\r\nthis.userPassword = <PASSWORD>;\r\n}\r\npublic String getUserPhone() {\r\nreturn userPhone;"}], "metadata": {"task_id": "simplenote-android/412", "ground_truth": "    User user = mSimperium.getUser();\r\n    return user != null ? user.getEmail() : null;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\Simplenote.java"}}
{"prompt": "\n import java.util.Calendar\n@Override\r\npublic void onUpdate(String entityId, Calendar lastSyncTime, boolean isSynced) {\r\n    if (lastSyncTime != null) {\r", "choices": [{"text": "\n import java.util.Calendar\n@Override\r\npublic void onUpdate(String entityId, Calendar lastSyncTime, boolean isSynced) {\r\n    if (lastSyncTime!= null) {\r\n//        Log.d(TAG, \"onUpdate: \" + lastSyncTime.getTime());\r\n        if (lastSyncTime.getTimeInMillis() > 0) {\r\n            // \u540c\u6b65\u6210\u529f\r\n            if (isSynced) {\r\n                // \u540c\u6b65\u6210\u529f\r\n                Log.d(TAG, \"onUpdate: \u540c\u6b65\u6210\u529f\");\r\n            } else {\r\n                // \u540c\u6b65\u5931\u8d25\r\n                Log.d(TAG, \"onUpdate: \u540c\u6b65\u5931\u8d25\");\r\n            }\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/414", "ground_truth": "        mPreferences.edit().putLong(entityId, lastSyncTime.getTimeInMillis()).apply();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\Simplenote.java"}}
{"prompt": "\n import com.automattic.simplenote.utils.AccountVerificationWatcher\nimport com.automattic.simplenote.models.Account\n@Override\r\npublic void onUpdate(AccountVerificationWatcher.Status status) {\r\n    switch(status) {\r\n        case VERIFIED:\r\n            dismissReviewAccountDialog();\r\n            return;\r\n        case SENT_EMAIL:\r\n            showWaitingOnEmailConfirmation();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/415", "ground_truth": "            return;\r\n        case UNVERIFIED:\r\n            showUnverifiedAccount();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\Simplenote.java"}}
{"prompt": "\n import android.app.Activity\n@Override\r\npublic void onActivityDestroyed(Activity activity) {\r\n    super.onActivityDestroyed(activity);\r\n    if (activity instanceof NoteWidgetLightConfigureActivity || activity instanceof NoteWidgetDarkConfigureActivity) {\r", "choices": [{"text": "//        NoteWidgetConfigureActivity.mNoteWidgetConfigureActivity = null;\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/416", "ground_truth": "        isAlreadyLocked = false;\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\SimplenoteAppLock.java"}}
{"prompt": "\n import org.wordpress.passcodelock.PasscodeUnlockActivity\nimport android.content.Intent\nimport android.app.Application\nimport android.app.Activity\n@Override\r\npublic void onActivityResumed(Activity activity) {\r\n    if ((activity instanceof NoteWidgetDarkConfigureActivity || activity instanceof NoteWidgetLightConfigureActivity) && isPasswordLocked() && !isAlreadyLocked) {\r\n        Intent i = new Intent(activity.getApplicationContext(), PasscodeUnlockActivity.class);\r\n        activity.startActivity(i);\r", "choices": [{"text": "\n import org.wordpress.passcodelock.PasscodeUnlockActivity\nimport android.content.Intent\nimport android.app.Application\nimport android.app.Activity\n@Override\r\npublic void onActivityResumed(Activity activity) {\r\n    if ((activity instanceof NoteWidgetDarkConfigureActivity || activity instanceof NoteWidgetLightConfigureActivity) && isPasswordLocked() &&!isAlreadyLocked) {\r\n        Intent i = new Intent(activity.getApplicationContext(), PasscodeUnlockActivity.class);\r\n        activity.startActivity(i);\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/417", "ground_truth": "        isAlreadyLocked = true;\r\n    } else {\r\n        super.onActivityResumed(activity);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\SimplenoteAppLock.java"}}
{"prompt": "\n private void notifyUpdate(String entityId) {\r\n    for (SyncTimeListener listener : mListeners) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/421", "ground_truth": "        listener.onUpdate(entityId, getLastSyncTime(entityId), isSynced(entityId));\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\SyncTimes.java"}}
{"prompt": "\n private void notifyRemove(String entityId) {\r\n    for (SyncTimeListener listener : mListeners) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/422", "ground_truth": "        listener.onRemove(entityId);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\SyncTimes.java"}}
{"prompt": "\n import java.util.Calendar\nprivate void updateSyncTime(String entityId) {\r\n    Calendar now = Calendar.getInstance();\r", "choices": [{"text": "//    now.add(Calendar.MINUTE, 1);\r\n    now.add(Calendar.SECOND, 1);\r\n    String syncTime = now.getTime().toString();\r\n    String sql = \"update \" + entityId + \" set syncTime = '\" + syncTime + \"'\";\r\n    System.out.println(sql);\r\n    try {\r\n        Statement stmt = conn.createStatement();\r\n        stmt.executeUpdate(sql);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/423", "ground_truth": "    mSyncTimes.put(entityId, now);\r\n    Log.d(TAG, \"updateSyncTime: \" + entityId + \" (\" + now.getTime() + \")\");\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\SyncTimes.java"}}
{"prompt": "\n import com.simperium.client.Bucket\n@Override\r\npublic void onDeleteObject(Bucket<T> bucket, T object) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "simplenote-android/424", "ground_truth": "    mSyncTimes.remove(object.getSimperiumKey());\r\n    notifyRemove(object.getSimperiumKey());\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\SyncTimes.java"}}
{"prompt": "\n import com.simperium.client.Bucket\n@Override\r\npublic void onNetworkChange(Bucket<T> bucket, Bucket.ChangeType type, String entityId) {\r\n    if (entityId == null) {\r\n        return;\r\n    }\r\n    if (type == Bucket.ChangeType.REMOVE) {\r\n        mSyncTimes.remove(entityId);\r\n        notifyRemove(entityId);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/425", "ground_truth": "    } else {\r\n        updateSyncTime(entityId);\r\n        notifyUpdate(entityId);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\SyncTimes.java"}}
{"prompt": "\n import com.simperium.client.Bucket\n@Override\r\npublic void onSyncObject(Bucket<T> bucket, String noteId) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\n}\r\n});\r\n"}], "metadata": {"task_id": "simplenote-android/426", "ground_truth": "    updateSyncTime(noteId);\r\n    notifyUpdate(noteId);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\SyncTimes.java"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r\n        super.onDestroyView()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "simplenote-android/427", "ground_truth": "        _binding = null\r\n        _dialogEditTag = null\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagDialogFragment.kt"}}
{"prompt": "\n import android.content.DialogInterface\nimport android.app.Dialog\noverride fun onShow(dialog: DialogInterface) {\r\n        setObservers()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "simplenote-android/428", "ground_truth": "        startUiState()\r\n        showDialogRenameTag()\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagDialogFragment.kt"}}
{"prompt": "\n private fun startUiState() {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/429", "ground_truth": "        viewModel.start(tag)\r\n        binding.inputTagName.editText?.setText(tag.name)\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagDialogFragment.kt"}}
{"prompt": "\n import com.automattic.simplenote.databinding.ActivityTagsBinding\nimport android.os.Bundle\npublic override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        val binding = ActivityTagsBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "simplenote-android/430", "ground_truth": "        binding.setupViews()\r\n        binding.setObservers()\r\n\r\n        viewModel.start()\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagsActivity.kt"}}
{"prompt": "\n import com.automattic.simplenote.databinding.ActivityTagsBinding\nprivate fun ActivityTagsBinding.showLongAddToast() {\r\n        if (buttonAdd.isHapticFeedbackEnabled) {\r\n            buttonAdd.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS)\r", "choices": [{"text": "} else {\r\n            Toast.makeText(this@TagsActivity, R.string.add_tag_toast, Toast.LENGTH_LONG).show()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "simplenote-android/431", "ground_truth": "        }\r\n        toast(R.string.add_tag)\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagsActivity.kt"}}
{"prompt": "\n override fun onResume() {\r\n        super.onResume()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/435", "ground_truth": "        DisplayUtils.disableScreenshotsIfLocked(this)\r\n        viewModel.startListeningTagChanges()\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagsActivity.kt"}}
{"prompt": "\nval viewModel TagsViewModel\nval REQUEST_ADD_TAG\n public override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nviewModel.onPause()\r\n}\r\npublic override fun onResume() {\r\nsuper.onResume()\r\nviewModel.onResume()\r\n}\r\npublic override fun onDestroy() {\r\nsuper.onDestroy()\r\nviewModel.onDestroy()\r\n}\r\npublic override fun onSaveInstanceState(outState: Bundle) {\r\nsuper.onSaveInstanceState(outState)\r\nviewModel.onSaveInstanceState(outState)\r\n}\r\npublic override fun onViewStateRestored(savedInstanceState: Bundle?) {\r\nsuper.on"}], "metadata": {"task_id": "simplenote-android/436", "ground_truth": "        super.onPause()\r\n        viewModel.stopListeningTagChanges()\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagsActivity.kt"}}
{"prompt": "\n import android.view\nimport android.content.Intent\n @Suppress(\"DEPRECATION\")\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        if (resultCode == RESULT_OK && requestCode == REQUEST_ADD_TAG) {\r\n            viewModel.updateOnResult()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/437", "ground_truth": "        }\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagsActivity.kt"}}
{"prompt": " import com.automattic.simplenote.databinding.ActivityTagsBinding\nval viewModel TagsViewModel\nval REQUEST_ADD_TAG\nprivate fun ActivityTagsBinding.setLabelEmptyTagList() {\r", "choices": [{"text": "}\nprivate fun ActivityTagsBinding.setTagsList() {\r\n}\nprivate fun ActivityTagsBinding.setTagsList() {\r\n}\nprivate fun ActivityTagsBinding.setTagsList() {\r\n}\nprivate fun ActivityTagsBinding.setTagsList() {\r\n}\nprivate fun ActivityTagsBinding.setTagsList() {\r\n}\nprivate fun ActivityTagsBinding.setTagsList() {\r\n}\nprivate fun ActivityTagsBinding.setTagsList() {\r\n}\nprivate fun ActivityTagsBinding.setTagsList() {\r\n}\nprivate fun ActivityTagsBinding"}], "metadata": {"task_id": "simplenote-android/438", "ground_truth": "        setEmptyListImage(R.drawable.ic_tag_24dp)\r\n        setEmptyListMessage(getString(R.string.empty_tags))\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagsActivity.kt"}}
{"prompt": "\n import com.automattic.simplenote.databinding.ActivityTagsBinding\nprivate fun ActivityTagsBinding.setEmptyListMessage(message: String?) {\r\n        message?.let {\r", "choices": [{"text": "//            empty_list_message.text = message\r\n        }\r\n    }\n"}], "metadata": {"task_id": "simplenote-android/441", "ground_truth": "            empty.text.text = it\r\n        }\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagsActivity.kt"}}
{"prompt": "\n override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        if (item.itemId == android.R.id.home) {\r", "choices": [{"text": "//            finish()\r\n            onBackPressed()\r\n            return true\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }\r\n\r\n    override fun onBackPressed() {\r\n        super.onBackPressed()\r\n        overridePendingTransition(R.anim.slide_in_left, R.anim.slide_out_right)\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        overridePendingTransition(R.anim.slide_in_left, R.anim.slide_out_right)\r\n    }\r\n}<file_sep>/app/src/main/java/com/example/myapplication"}], "metadata": {"task_id": "simplenote-android/442", "ground_truth": "            viewModel.close()\r\n            return true\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\TagsActivity.kt"}}
{"prompt": "\n @Override\r\nprotected void onRestart() {\r\n    super.onRestart();\r", "choices": [{"text": "}\r\n\r\n@Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n}\r\n\r\n@Override\r\nprotected void onPause() {\r\n    super.onPause();\r\n}\r\n\r\n@Override\r\nprotected void onStop() {\r\n    super.onStop();\r\n}\r\n\r\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/444", "ground_truth": "    if (mThemeChanged) {\r\n        recreate();\r\n        mThemeChanged = false;\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\ThemedAppCompatActivity.java"}}
{"prompt": "\n import com.automattic.simplenote.utils.PrefUtils\nimport androidx.lifecycle.Lifecycle\nimport android.content.SharedPreferences\n@Override\r\npublic void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n    if (key.equals(PrefUtils.PREF_THEME) || key.equals(PrefUtils.PREF_STYLE_INDEX)) {\r\n        if (getLifecycle().getCurrentState().isAtLeast(Lifecycle.State.RESUMED)) {\r\n            recreate();\r", "choices": [{"text": "}\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/445", "ground_truth": "        } else {\r\n            mThemeChanged = true;\r\n        }\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\ThemedAppCompatActivity.java"}}
{"prompt": "\n import okhttp3.Call\nimport java.io.IOException\nimport androidx.annotation.NonNull\n@Override\r\npublic void onFailure(@NonNull Call call, @NonNull IOException e) {\r", "choices": [{"text": "}\r\n});\r\n"}], "metadata": {"task_id": "simplenote-android/451", "ground_truth": "    String url = call.request().url().toString();\r\n    handler.onFailure(e, url);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\AccountNetworkUtils.java"}}
{"prompt": "\nprivate final Simplenote simplenote;\nprivate final VerificationStateListener listener;\nprivate Status currentState;\n private void updateState(Status newState) {\r\n    if (newState != currentState) {\r\n        currentState = newState;\r", "choices": [{"text": "\nprivate final Simplenote simplenote;\nprivate final VerificationStateListener listener;\nprivate Status currentState;\n private void updateState(Status newState) {\r\n    if (newState!= currentState) {\r\n        currentState = newState;\r\n//        listener.onVerificationStateChanged(currentState);\r\n    }\r\n}\n"}], "metadata": {"task_id": "simplenote-android/454", "ground_truth": "        listener.onUpdate(newState);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\AccountVerificationWatcher.java"}}
{"prompt": "\n import android.view.animation.AnimationUtils\nimport android.view.animation.Animation\nimport android.view.View\n@Override\r\npublic void onAnimationEnd(Animation animation) {\r\n    Animation animationIn = AnimationUtils.loadAnimation(textView.getContext(), android.R.anim.fade_in);\r", "choices": [{"text": "textView.startAnimation(animationIn);\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/457", "ground_truth": "    textView.setText(newText);\r\n    textView.startAnimation(animationIn);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\AniUtils.java"}}
{"prompt": "\n import com.automattic.simplenote.Simplenote\nimport android.net.Uri\npublic static void magicLinkLogin(Simplenote application, Uri uri) {\r\n    String userEmail = extractEmailFromMagicLink(uri);\r", "choices": [{"text": "if (userEmail!= null) {\r\n    application.login(userEmail, null);\r\n}\r\n}\r\nprivate static String extractEmailFromMagicLink(Uri uri) {\r\nString email = null;\r\nString query = uri.getQuery();\r\nif (query!= null) {\r\nString[] params = query.split(\"&\");\r\nfor (String param : params) {\r\nString[] keyValue = param.split(\"=\");\r\nif (keyValue.length == 2) {\r\nString key = keyValue[0];\r\nString value = keyValue"}], "metadata": {"task_id": "simplenote-android/460", "ground_truth": "    String spToken = uri.getQueryParameter(\"token\");\r\n    application.loginWithToken(userEmail, spToken);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\AuthUtils.java"}}
{"prompt": "\n @Override\r\npublic int getItemCount() {\r\n    if (mDataValid) {\r", "choices": [{"text": "return mValues.size();\r\n    } else {\r\nreturn 0;\r\n    }\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/464", "ground_truth": "        return mCursor.getCount();\r\n    } else {\r\n        return 0;\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\BaseCursorAdapter.java"}}
{"prompt": "\n import android.database.Cursor\npublic void swapCursor(Cursor newCursor) {\r\n    if (newCursor == mCursor) {\r\n        return;\r\n    }\r\n    if (newCursor != null) {\r\n        mCursor = newCursor;\r\n        mDataValid = true;\r\n        // notify the observers about the new cursor\r\n        notifyDataSetChanged();\r\n    } else {\r\n        notifyItemRangeRemoved(0, getItemCount());\r", "choices": [{"text": "\n import android.database.Cursor\npublic void swapCursor(Cursor newCursor) {\r\n    if (newCursor == mCursor) {\r\n        return;\r\n    }\r\n    if (newCursor!= null) {\r\n        mCursor = newCursor;\r\n        mDataValid = true;\r\n        // notify the observers about the new cursor\r\n        notifyDataSetChanged();\r\n    } else {\r\n        notifyItemRangeRemoved(0, getItemCount());\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/467", "ground_truth": "        mCursor = null;\r\n        mRowIDColumn = -1;\r\n        mDataValid = false;\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\BaseCursorAdapter.java"}}
{"prompt": "\n import androidx.core.content.ContextCompat\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.annotation.ColorRes\nfun AppCompatActivity.getColorStr(@ColorRes color: Int): String {\r\n    val hintColor = ContextCompat.getColor(this, color)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "simplenote-android/468", "ground_truth": "    val hintHexColor = hintColor.toHexString().replace(\"ff\", \"\")\r\n    return \"#$hintHexColor\"\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\BaseExt.kt"}}
{"prompt": "\n import android.webkit.WebView\nimport android.content.Context\npublic static boolean isWebViewInstalled(Context context) {\r\n    try {\r\n        new WebView(context);\r", "choices": [{"text": "return true;\r\n    } catch (Exception e) {\r\n        return false;\r\n    }\r\n}\n"}], "metadata": {"task_id": "simplenote-android/470", "ground_truth": "        return true;\r\n    } catch (Exception exception) {\r\n        return false;\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\BrowserUtils.java"}}
{"prompt": "\n override fun getItemViewType(position: Int): Int {\r\n        return when (getItem(position)) {\r\n            is CollaboratorDataItem.HeaderItem -> ITEM_VIEW_TYPE_HEADER\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/474", "ground_truth": "            is CollaboratorDataItem.CollaboratorItem -> ITEM_VIEW_TYPE_ITEM\r\n        }\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\CollaboratorsAdapter.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        if (holder is CollaboratorViewHolder) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/475", "ground_truth": "            holder.bind(getItem(position) as CollaboratorDataItem.CollaboratorItem)\r\n        }\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\CollaboratorsAdapter.kt"}}
{"prompt": "\n import com.automattic.simplenote.R\nimport android.view.WindowManager\nimport android.view.Display\nimport android.graphics.Point\nimport android.content.Context\npublic static Point getDisplayPixelSize(Context context) {\r\n    WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);\r", "choices": [{"text": "Display display = wm.getDefaultDisplay();\r\nPoint size = new Point();\r\ndisplay.getSize(size);\r\nreturn size;\r\n}\n"}], "metadata": {"task_id": "simplenote-android/482", "ground_truth": "    Display display = wm.getDefaultDisplay();\r\n    Point size = new Point();\r\n    display.getSize(size);\r\n    return size;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DisplayUtils.java"}}
{"prompt": "\n import android.view.Display\nimport android.content.Context\n@SuppressWarnings(\"ConstantConditions\")\r\npublic static String getDisplaySizeAndOrientation(Context context) {\r\n    boolean isLarge = isLarge(context) || isXLarge(context);\r\n    boolean isLandscape = isLandscape(context);\r\n    if (isLarge && isLandscape) {\r\n        return \"Large, landscape\";\r\n    } else if (isLarge && !isLandscape) {\r\n        return \"Large, portrait\";\r\n    } else if (!isLarge && isLandscape) {\r\n        return \"Small, landscape\";\r\n    } else if (!isLarge && !isLandscape) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/483", "ground_truth": "        return \"Small, portrait\";\r\n    } else {\r\n        return \"Unknown\";\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DisplayUtils.java"}}
{"prompt": "\n import com.automattic.simplenote.R\nimport androidx.annotation.NonNull\nimport android.content.Context\n/**\r\n * Get the size of the checkbox drawable.\r\n *\r\n * @param context   {@link Context} from which to determine size of font plus checkbox extra.\r\n * @param isList    {@link Boolean} if checkbox is in list to determine size.\r\n *\r\n * @return          {@link Integer} value of checkbox in pixels.\r\n */\r\npublic static int getChecklistIconSize(@NonNull Context context, boolean isList) {\r\n    int extra = context.getResources().getInteger(R.integer.default_font_size_checkbox_extra);\r", "choices": [{"text": "//    if (isList) {\r\n//        extra = context.getResources().getInteger(R.integer.default_font_size_checkbox_extra_list);\r\n//    }\r\n    return context.getResources().getDimensionPixelSize(R.dimen.default_font_size_checkbox) + extra;\r\n}\n"}], "metadata": {"task_id": "simplenote-android/486", "ground_truth": "    int size = PrefUtils.getFontSize(context);\r\n    return DisplayUtils.dpToPx(context, isList ? size : size + extra);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DisplayUtils.java"}}
{"prompt": "\n import androidx.annotation.ColorRes\nimport androidx.annotation.ColorInt\nimport android.graphics.drawable.Drawable\nimport android.content.Context\npublic static Drawable tintDrawableWithResource(Context context, Drawable drawable, @ColorRes int colorRes) {\r\n    @ColorInt\r", "choices": [{"text": "int color = context.getResources().getColor(colorRes);\r\nreturn tintDrawable(drawable, color);\r\n}\n"}], "metadata": {"task_id": "simplenote-android/491", "ground_truth": "    int tint = ContextCompat.getColor(context, colorRes);\r\n    return tintDrawable(drawable, tint);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DrawableUtils.java"}}
{"prompt": "\n import androidx.annotation.DrawableRes\nimport androidx.annotation.ColorInt\nimport androidx.annotation.AttrRes\nimport android.graphics.drawable.Drawable\nimport android.content.Context\npublic static Drawable tintDrawableWithAttribute(Context context, @DrawableRes int drawableRes, @AttrRes int tintColorAttribute) {\r\n    @ColorInt\r", "choices": [{"text": "int tintColor = context.getColorFromAttribute(tintColorAttribute);\r\n    Drawable drawable = context.getDrawable(drawableRes);\r\n    drawable.setColorFilter(tintColor, PorterDuff.Mode.SRC_IN);\r\n    return drawable;\r\n}\n"}], "metadata": {"task_id": "simplenote-android/493", "ground_truth": "    int color = getColor(context, tintColorAttribute);\r\n    return tintDrawable(context, drawableRes, color);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DrawableUtils.java"}}
{"prompt": "\n import androidx.annotation.ColorInt\nimport android.view.MenuItem\nimport android.view.Menu\npublic static void tintMenu(Menu menu, @ColorInt int color) {\r\n    for (int i = 0; i < menu.size(); i++) {\r\n        MenuItem item = menu.getItem(i);\r", "choices": [{"text": "//        Drawable drawable = item.getIcon();\r\n//        if (drawable!= null) {\r\n//            drawable.mutate();\r\n//            drawable.setColorFilter(color, PorterDuff.Mode.SRC_IN);\r\n//        }\r\n        item.setIconTintList(ColorStateList.valueOf(color));\r\n    }\r\n}\n"}], "metadata": {"task_id": "simplenote-android/497", "ground_truth": "        DrawableUtils.tintMenuItem(item, color);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DrawableUtils.java"}}
{"prompt": "\n import androidx.annotation.ColorRes\nimport androidx.annotation.ColorInt\nimport android.view.Menu\nimport android.content.Context\npublic static void tintMenuWithResource(Context context, Menu menu, @ColorRes int colorRes) {\r\n    @ColorInt\r", "choices": [{"text": "int color = context.getResources().getColor(colorRes);\r\ntintMenuWithColor(menu, color);\r\n}\n"}], "metadata": {"task_id": "simplenote-android/498", "ground_truth": "    int color = ContextCompat.getColor(context, colorRes);\r\n    DrawableUtils.tintMenu(menu, color);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DrawableUtils.java"}}
{"prompt": "\n import androidx.annotation.ColorInt\nimport android.view.MenuItem\nimport android.view.Menu\npublic static void tintMenuItem(MenuItem menuItem, @ColorInt int color) {\r", "choices": [{"text": "menuItem.icon.setTint(color);\r\n}\n"}], "metadata": {"task_id": "simplenote-android/499", "ground_truth": "    Drawable tinted = DrawableUtils.tintDrawable(menuItem.getIcon(), color);\r\n    menuItem.setIcon(tinted);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DrawableUtils.java"}}
{"prompt": "\n import androidx.annotation.ColorRes\nimport androidx.annotation.ColorInt\nimport android.view.MenuItem\nimport android.view.Menu\nimport android.content.Context\npublic static void tintMenuItemWithResource(Context context, MenuItem menuItem, @ColorRes int colorRes) {\r\n    @ColorInt\r", "choices": [{"text": "int color = context.getResources().getColor(colorRes);\r\ntintMenuItem(menuItem, color);\r\n}\n"}], "metadata": {"task_id": "simplenote-android/500", "ground_truth": "    int color = ContextCompat.getColor(context, colorRes);\r\n    DrawableUtils.tintMenuItem(menuItem, color);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\DrawableUtils.java"}}
{"prompt": "\n fun <T> fold(fnL: (L) -> T, fnR: (R) -> T): T {\r\n        return when (this) {\r\n            is Left -> fnL(l)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/502", "ground_truth": "            is Right -> fnR(r)\r\n        }\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\Either.kt"}}
{"prompt": "\n fun <R2> map(fn: (R) -> R2): Either<L, R2> {\r\n        return when (this) {\r\n            is Left -> this\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/503", "ground_truth": "            is Right -> Right(fn(r))\r\n        }\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\Either.kt"}}
{"prompt": "\n import java.io.InputStreamReader\nimport java.io.InputStream\nimport java.io.IOException\nimport java.io.BufferedReader\nimport android.net.Uri\nimport android.content.Context\npublic static String readFile(Context context, Uri uri) throws IOException {\r\n    StringBuilder stringBuilder = new StringBuilder();\r\n    InputStream inputStream = context.getContentResolver().openInputStream(uri);\r\n    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\r\n    String line;\r\n    while ((line = reader.readLine()) != null) {\r\n        stringBuilder.append(line);\r", "choices": [{"text": "\n import java.io.InputStreamReader\nimport java.io.InputStream\nimport java.io.IOException\nimport java.io.BufferedReader\nimport android.net.Uri\nimport android.content.Context\npublic static String readFile(Context context, Uri uri) throws IOException {\r\n    StringBuilder stringBuilder = new StringBuilder();\r\n    InputStream inputStream = context.getContentResolver().openInputStream(uri);\r\n    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\r\n    String line;\r\n    while ((line = reader.readLine())!= null) {\r\n        stringBuilder.append(line);\r\n}\r\n    inputStream.close();\r\n    return stringBuilder.toString();\r\n}\n"}], "metadata": {"task_id": "simplenote-android/504", "ground_truth": "        stringBuilder.append(\"\\n\");\r\n    }\r\n    inputStream.close();\r\n    return stringBuilder.toString();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\FileUtils.java"}}
{"prompt": "\n @Override\r\npublic int findTokenEnd(CharSequence text, int cursor) {\r\n    int i = cursor;\r\n    int length = text.length();\r\n    while (i < length) {\r\n        if (text.charAt(i) == CHARACTER_BRACKET_CLOSE) {\r\n            return i;\r\n        } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/506", "ground_truth": "            i++;\r\n        }\r\n    }\r\n    return length;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\LinkTokenizer.java"}}
{"prompt": "\n @Override\r\npublic int findTokenStart(CharSequence text, int cursor) {\r\n    int i = cursor;\r\n    while (i > 0 && text.charAt(i - 1) != CHARACTER_BRACKET_OPEN) {\r\n        i--;\r\n    }\r", "choices": [{"text": "\n @Override\r\npublic int findTokenStart(CharSequence text, int cursor) {\r\n    int i = cursor;\r\n    while (i > 0 && text.charAt(i - 1)!= CHARACTER_BRACKET_OPEN) {\r\n        i--;\r\n    }\r\n}\r\n\r\n@Override\r\npublic int findTokenEnd(CharSequence text, int cursor) {\r\n    int i = cursor;\r\n    while (i < text.length() && text.charAt(i)!= CHARACTER_BRACKET_CLOSE) {\r\n        i++;\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/507", "ground_truth": "    if (i < 1 || text.charAt(i - 1) != CHARACTER_BRACKET_OPEN) {\r\n        return cursor;\r\n    }\r\n    return i;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\LinkTokenizer.java"}}
{"prompt": "\n import android.text.TextUtils\nimport android.text.Spanned\nimport android.text.SpannableString\n@Override\r\npublic CharSequence terminateToken(CharSequence text) {\r\n    if (text instanceof Spanned) {\r\n        SpannableString spannableString = new SpannableString(text + CHARACTER_BRACKET_CLOSE.toString());\r\n        TextUtils.copySpansFrom((Spanned) text, 0, text.length(), Object.class, spannableString, 0);\r", "choices": [{"text": "return spannableString;\r\n    }\r\n    return text + CHARACTER_BRACKET_CLOSE.toString();\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/508", "ground_truth": "        return spannableString;\r\n    } else {\r\n        return text + CHARACTER_BRACKET_CLOSE.toString();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\LinkTokenizer.java"}}
{"prompt": "\n import android.text.Spannable\nimport android.os.Handler\n@Override\r\npublic void onMatch(final SpanFactory factory, final Spannable text, final int start, final int end) {\r\n    if (mTextView == null)\r\n        return;\r\n    Handler handler = mTextView.getHandler();\r\n    if (handler == null)\r\n        return;\r\n    handler.post(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            if (mStopped)\r", "choices": [{"text": "               return;\r\n            mTextView.setSelection(start);\r\n            mTextView.setSpan(factory.create(text, start, end), start, end, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\r\n        }\r\n    });\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/509", "ground_truth": "                return;\r\n            sListener.onMatch(factory, text, start, end);\r\n        }\r\n    });\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\MatchOffsetHighlighter.java"}}
{"prompt": "\n @Override\r\npublic void run() {\r\n    if (mStopped)\r", "choices": [{"text": "return;\r\ntry {\r\n// do something\r\n} catch (Exception e) {\r\ne.printStackTrace();\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/510", "ground_truth": "        return;\r\n    sListener.onMatch(factory, text, start, end);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\MatchOffsetHighlighter.java"}}
{"prompt": "\n import android.text.TextUtils\nimport android.text.Spannable\n// Returns the character location of the first match (3rd index, the 'start' value)\r\n// The data format for a match is 4 space-separated integers that represent the location\r\n// of the match: \"column token start length\" ex: \"1 0 42 7\"\r\npublic static int getFirstMatchLocation(Spannable content, String matches) {\r\n    if (TextUtils.isEmpty(matches)) {\r\n        return 0;\r\n    }\r\n    String[] values = matches.split(\"\\\\s+\", 4);\r\n    if (values.length > MATCH_INDEX_START) {\r\n        try {\r\n            int location = Integer.valueOf(values[MATCH_INDEX_START]);\r\n            return location + getByteOffset(content, 0, location);\r\n        } catch (NumberFormatException exception) {\r", "choices": [{"text": "\n import android.text.TextUtils\nimport android.text.Spannable\n// Returns the character location of the first match (3rd index, the'start' value)\r\n// The data format for a match is 4 space-separated integers that represent the location\r\n// of the match: \"column token start length\" ex: \"1 0 42 7\"\r\npublic static int getFirstMatchLocation(Spannable content, String matches) {\r\n    if (TextUtils.isEmpty(matches)) {\r\n        return 0;\r\n    }\r\n    String[] values = matches.split(\"\\\\s+\", 4);\r\n    if (values.length > MATCH_INDEX_START) {\r\n        try {\r\n            int location = Integer.valueOf(values[MATCH_INDEX_START]);\r\n            return location + getByteOffset(content, 0, location);\r\n        } catch (NumberFormatException exception) {\r\n//            Log.e(TAG, \"getFirstMatchLocation: \" + exception.getMessage());\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n\n// Returns the character location of the last match (3rd index, the'start' value)\r\n// The data format for a match is 4 space-separated integers that represent the location\r\n// of the match: \"column token start length\" ex: \"1 0 42 7\"\r\npublic static int getLastMatchLocation(Spannable content, String matches) {\r\n    if (TextUtils.isEmpty(matches)) {\r\n       "}], "metadata": {"task_id": "simplenote-android/511", "ground_truth": "            return 0;\r\n        }\r\n    }\r\n    return 0;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\MatchOffsetHighlighter.java"}}
{"prompt": "\n import android.text.TextUtils\npublic void start() {\r\n    // if there are no matches, we don't have to do anything\r\n    if (TextUtils.isEmpty(mMatches))\r", "choices": [{"text": "return;\r\n    // if there is a match, we need to start the activity\r\n    Intent intent = new Intent(this, MatchActivity.class);\r\n    intent.putExtra(MatchActivity.EXTRA_MATCHES, mMatches);\r\n    startActivity(intent);\r\n}\n"}], "metadata": {"task_id": "simplenote-android/512", "ground_truth": "        return;\r\n    mThread = new Thread(this);\r\n    mStopped = false;\r\n    mThread.start();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\MatchOffsetHighlighter.java"}}
{"prompt": "\n public void stop() {\r\n    mStopped = true;\r", "choices": [{"text": "}\r\n\r\npublic void run() {\r\n    while (!mStopped) {\r\n        try {\r\n            Thread.sleep(1000);\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n        mHandler.sendEmptyMessage(0);\r\n    }\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/513", "ground_truth": "    if (mThread != null)\r\n        mThread.interrupt();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\MatchOffsetHighlighter.java"}}
{"prompt": "\n import android.text.Spannable\npublic void highlightMatches(String matches, int columnIndex) {\r\n    synchronized (this) {\r\n        stop();\r\n        mSpannable = mTextView.getEditableText();\r\n        mMatches = matches;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/514", "ground_truth": "        mIndex = columnIndex;\r\n        mPlainText = mTextView.getPlainTextContent();\r\n        start();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\MatchOffsetHighlighter.java"}}
{"prompt": "\n import android.text.Spannable\npublic synchronized void removeMatches() {\r\n    stop();\r\n    if (mSpannable != null && mMatchedSpans != null) {\r\n        for (Object span : mMatchedSpans) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/515", "ground_truth": "            mSpannable.removeSpan(span);\r\n        }\r\n        mMatchedSpans.clear();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\MatchOffsetHighlighter.java"}}
{"prompt": "\n import android.net.NetworkInfo\nimport android.net.ConnectivityManager\nimport android.content.Context\n/**\r\n * @return {@link String} type and speed of network (e.g. WIFI (123.45 Mbps))\r\n */\r\npublic static String getNetworkInfo(Context context) {\r\n    String type = getNetworkTypeString(context);\r\n    String speed;\r\n    switch(getNetworkType(context)) {\r\n        case ConnectivityManager.TYPE_MOBILE:\r\n            speed = getNetworkSpeed(context);\r\n            break;\r\n        case ConnectivityManager.TYPE_WIFI:\r\n            speed = getNetworkSpeedWifi(context);\r\n            break;\r\n        case TYPE_NONE:\r\n        case TYPE_NULL:\r\n        default:\r", "choices": [{"text": "//            speed = \"Unknown\";\r\n            speed = \"\";\r\n            break;\r\n    }\r\n    return type + \" (\" + speed + \")\";\r\n}\r\n/**\r\n * @return {@link String} type of network (e.g. WIFI)\r\n */\r\npublic static String getNetworkTypeString(Context context) {\r\n    ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\r\n    NetworkInfo activeNetwork = cm.getActiveNetworkInfo();\r\n    if (activeNetwork!= null) { // connected to the internet\r\n        switch (activeNetwork.getType()) {\r\n            case Connectivity"}], "metadata": {"task_id": "simplenote-android/520", "ground_truth": "            speed = \"?\";\r\n            break;\r\n    }\r\n    return type + \" (\" + speed + \")\";\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\NetworkUtils.java"}}
{"prompt": "\n import android.net.NetworkInfo\nimport android.content.Context\n/**\r\n * @return integer constant of the network type\r\n */\r\npublic static int getNetworkType(Context context) {\r\n    NetworkInfo info = getActiveNetworkInfo(context);\r\n    if (info == null) {\r\n        return TYPE_NULL;\r\n    }\r", "choices": [{"text": "//    if (info.isAvailable()) {\r\n//        return info.getType();\r\n//    }\r\n    return info.getType();\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/523", "ground_truth": "    if (!info.isConnected()) {\r\n        return TYPE_NONE;\r\n    }\r\n    return info.getType();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\NetworkUtils.java"}}
{"prompt": "\n import android.net.ConnectivityManager\nimport android.content.Context\n/**\r\n * @return {@link String} representation of the network type\r\n */\r\npublic static String getNetworkTypeString(Context context) {\r\n    switch(getNetworkType(context)) {\r\n        case ConnectivityManager.TYPE_MOBILE:\r\n            return \"MOBILE\";\r\n        case ConnectivityManager.TYPE_WIFI:\r\n            return \"WIFI\";\r\n        case TYPE_NONE:\r\n            return \"No network connection\";\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "simplenote-android/524", "ground_truth": "        case TYPE_NULL:\r\n        default:\r\n            return \"Could not get network type\";\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\NetworkUtils.java"}}
{"prompt": "\n import android.content.Context\n/**\r\n * @return true if a network connection is available; false otherwise\r\n */\r\npublic static boolean isNetworkAvailable(Context context) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nreturn false;\r\n}\r\n}\r\n<file_sep>/src/com/example/android/apis/view/ViewFlipper.java\npackage com.example.android.apis.view;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.ViewFlipper;\n\nimport com.example.android.apis.R;\n\npublic class ViewFlipper extends Activity implements On"}], "metadata": {"task_id": "simplenote-android/525", "ground_truth": "    NetworkInfo info = getActiveNetworkInfo(context);\r\n    return info != null && info.isConnected();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\NetworkUtils.java"}}
{"prompt": "\n import java.util.List\nimport android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    if (mListener != null) {\r", "choices": [{"text": "\n import java.util.List\nimport android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    if (mListener!= null) {\r\nmListener.onItemClick(v, getAdapterPosition());\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}"}], "metadata": {"task_id": "simplenote-android/534", "ground_truth": "        mListener.onItemClick(item);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\ShareButtonAdapter.java"}}
{"prompt": "\nprivate static SimplenoteMovementMethod mInstance;\n public static SimplenoteMovementMethod getInstance() {\r\n    if (mInstance == null) {\r\n        mInstance = new SimplenoteMovementMethod();\r", "choices": [{"text": "}\r\nreturn mInstance;\r\n}\n"}], "metadata": {"task_id": "simplenote-android/535", "ground_truth": "    }\r\n    return mInstance;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\SimplenoteMovementMethod.java"}}
{"prompt": "\n import android.os.Bundle\n@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "simplenote-android/537", "ground_truth": "    setRetainInstance(true);\r\n    setCancelable(false);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\SimplenoteProgressDialogFragment.java"}}
{"prompt": "\n public int findTokenStart(CharSequence text, int cursor) {\r\n    int i = cursor;\r\n    while (i > 0 && text.charAt(i - 1) != ' ') {\r\n        i--;\r\n    }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/538", "ground_truth": "    while (i < cursor && text.charAt(i) == ' ') {\r\n        i++;\r\n    }\r\n    return i;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\SpaceTokenizer.java"}}
{"prompt": "\n public int findTokenEnd(CharSequence text, int cursor) {\r\n    int i = cursor;\r\n    int len = text.length();\r\n    while (i < len) {\r\n        if (text.charAt(i) == ' ') {\r\n            return i;\r\n        } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/539", "ground_truth": "            i++;\r\n        }\r\n    }\r\n    return len;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\SpaceTokenizer.java"}}
{"prompt": "\n import android.text.TextUtils\nimport android.text.Spanned\nimport android.text.SpannableString\npublic CharSequence terminateToken(CharSequence text) {\r\n    int i = text.length();\r\n    while (i > 0 && text.charAt(i - 1) == ' ') {\r\n        i--;\r\n    }\r\n    if (i > 0 && text.charAt(i - 1) == ' ') {\r\n        return text;\r\n    } else {\r\n        if (text instanceof Spanned) {\r\n            SpannableString sp = new SpannableString(text + \" \");\r\n            TextUtils.copySpansFrom((Spanned) text, 0, text.length(), Object.class, sp, 0);\r\n            return sp;\r", "choices": [{"text": "\n import android.text.TextUtils\nimport android.text.Spanned\nimport android.text.SpannableString\npublic CharSequence terminateToken(CharSequence text) {\r\n    int i = text.length();\r\n    while (i > 0 && text.charAt(i - 1) =='') {\r\n        i--;\r\n    }\r\n    if (i > 0 && text.charAt(i - 1) =='') {\r\n        return text;\r\n    } else {\r\n        if (text instanceof Spanned) {\r\n            SpannableString sp = new SpannableString(text + \" \");\r\n            TextUtils.copySpansFrom((Spanned) text, 0, text.length(), Object.class, sp, 0);\r\n            return sp;\r        } else {\r\n            return text + \" \";\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "simplenote-android/540", "ground_truth": "        } else {\r\n            return text + \" \";\r\n        }\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\SpaceTokenizer.java"}}
{"prompt": "\n // returns \"\" if the passed string is null, otherwise returns the passed string\r\npublic static String notNullStr(final String value) {\r\n    if (value == null)\r", "choices": [{"text": "return \"\";\r\nelse\r\nreturn value;\r\n}\r\n}\r\n<file_sep>/src/main/java/com/example/demo/controller/UserController.java\npackage com.example.demo.controller;\r\n\r\nimport java.util.List;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.DeleteMapping;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind."}], "metadata": {"task_id": "simplenote-android/541", "ground_truth": "        return \"\";\r\n    return value;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\StrUtils.java"}}
{"prompt": "\n public static int strToInt(String value, int defaultInt) {\r\n    if (value == null)\r\n        return defaultInt;\r\n    try {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/542", "ground_truth": "        return Integer.valueOf(value);\r\n    } catch (NumberFormatException e) {\r\n        return defaultInt;\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\StrUtils.java"}}
{"prompt": "\n public static long strToLong(String value, long defaultLong) {\r\n    if (value == null)\r\n        return defaultLong;\r\n    try {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/543", "ground_truth": "        return Long.valueOf(value);\r\n    } catch (NumberFormatException e) {\r\n        return defaultLong;\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\StrUtils.java"}}
{"prompt": "\n public static float strToFloat(String value, float defaultFloat) {\r\n    if (value == null)\r\n        return defaultFloat;\r\n    try {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/544", "ground_truth": "        return Float.valueOf(value);\r\n    } catch (NumberFormatException e) {\r\n        return defaultFloat;\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\StrUtils.java"}}
{"prompt": "\n import java.net.URLEncoder\npublic static String urlEncode(final String text) {\r\n    try {\r\n        return URLEncoder.encode(text, \"UTF-8\");\r", "choices": [{"text": "} catch (UnsupportedEncodingException e) {\r\n        throw new RuntimeException(e);\r\n}\r\n}\n"}], "metadata": {"task_id": "simplenote-android/545", "ground_truth": "    } catch (UnsupportedEncodingException e) {\r\n        // should never get here\r\n        return \"\";\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\StrUtils.java"}}
{"prompt": "\n import java.net.URLDecoder\npublic static String urlDecode(final String text) {\r\n    try {\r\n        return URLDecoder.decode(text, \"UTF-8\");\r", "choices": [{"text": "} catch (final UnsupportedEncodingException e) {\r\n        throw new RuntimeException(e);\r\n}\r\n}\n"}], "metadata": {"task_id": "simplenote-android/546", "ground_truth": "    } catch (UnsupportedEncodingException e) {\r\n        // should never get here\r\n        return \"\";\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\StrUtils.java"}}
{"prompt": "\n // returns true if passed strings are the same, handles null so caller can skip null check before comparison\r\npublic static boolean isSameStr(String s1, String s2) {\r\n    if (s1 == null || s2 == null)\r", "choices": [{"text": "return s1 == s2;\r\nreturn s1.equals(s2);\r\n}\r\n}\r\n<file_sep>/src/main/java/com/example/demo/controller/UserController.java\npackage com.example.demo.controller;\r\n\r\nimport java.util.List;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.DeleteMapping;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport"}], "metadata": {"task_id": "simplenote-android/547", "ground_truth": "        return (s1 == null && s2 == null);\r\n    return s1.equals(s2);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\StrUtils.java"}}
{"prompt": "\n import android.text.TextUtils\nimport android.text.Spanned\npublic static Spanned setTextToUpperCaseAndBold(String originalString) {\r\n    if (TextUtils.isEmpty(originalString)) {\r\n        return HtmlCompat.fromHtml(\"\");\r", "choices": [{"text": "}\r\nString[] split = originalString.split(\" \");\r\nString result = \"\";\r\nfor (String s : split) {\r\n    result += \"<b>\" + s.substring(0, 1).toUpperCase() + s.substring(1) + \"</b> \";\r\n}\r\nreturn HtmlCompat.fromHtml(result);\r\n}\n"}], "metadata": {"task_id": "simplenote-android/549", "ground_truth": "    }\r\n    return HtmlCompat.fromHtml(\"<strong>\" + originalString.toUpperCase() + \"</strong>\");\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\StrUtils.java"}}
{"prompt": "\n @Override\r\npublic void onStopped() {\r", "choices": [{"text": "super.onStopped();\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/550", "ground_truth": "    super.onStopped();\r\n    stopBuckets(\"onStopped\");\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\SyncWorker.java"}}
{"prompt": "\n @Override\r\npublic void run() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\ntry {\r\nwhile(true) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(is"}], "metadata": {"task_id": "simplenote-android/551", "ground_truth": "    stopBuckets(\"startWork\");\r\n    completer.set(Result.success());\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\SyncWorker.java"}}
{"prompt": "\n import com.automattic.simplenote.models.TagItem\nimport com.automattic.simplenote.databinding.TagsListRowBinding\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): TagItemViewHolder {\r\n        val binding = TagsListRowBinding.inflate(LayoutInflater.from(parent.context), parent, false)\r\n        return TagItemViewHolder(\r\n                binding,\r", "choices": [{"text": ")\r\n    }\n"}], "metadata": {"task_id": "simplenote-android/552", "ground_truth": "                onEditClick,\r\n                onDeleteClick,\r\n                onLongDeleteClick\r\n        )\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagItemAdapter.kt"}}
{"prompt": "\n import com.automattic.simplenote.models.TagItem\nimport android.view.View\noverride fun onBindViewHolder(holder: TagItemViewHolder, position: Int) {\r", "choices": [{"text": "val tagItem = tagItems[position]\r\nholder.tagItem = tagItem\r\nholder.tagItemView.tag = tagItem\r\nholder.tagItemView.setOnClickListener {\r\nval intent = Intent(context, NoteListActivity::class.java)\r\nintent.putExtra(NoteListActivity.EXTRA_TAG, tagItem.tag)\r\ncontext.startActivity(intent)\r\n}\r\nholder.tagItemView.setOnLongClickListener {\r\nval builder = AlertDialog.Builder(context)\r\nbuilder.setTitle(R.string.delete_tag)\r\nbuilder"}], "metadata": {"task_id": "simplenote-android/553", "ground_truth": "        val currentTagItem = getItem(position)\r\n        holder.bind(currentTagItem)\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagItemAdapter.kt"}}
{"prompt": "\n import java.util.List\nimport com.automattic.simplenote.models.Tag\npublic void submitList(List<Tag> tags) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "simplenote-android/554", "ground_truth": "    this.tags = tags;\r\n    notifyDataSetChanged();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagsAdapter.java"}}
{"prompt": "\n import com.automattic.simplenote.models.Tag\nimport com.automattic.simplenote.R\nimport android.view.MenuItem\npublic int getPosition(TagMenuItem mSelectedTag) {\r\n    if (mSelectedTag.id == ALL_NOTES_ID)\r\n        return 0;\r\n    if (mSelectedTag.id == TRASH_ID)\r\n        return 1;\r\n    if (mSelectedTag.id == UNTAGGED_NOTES_ID)\r\n        return this.getCount() - 1;\r\n    if (tags == null)\r\n        return -1;\r\n    for (int i = 0; i < tags.size(); i++) {\r\n        if (i == mSelectedTag.id) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/556", "ground_truth": "            return i + mMinimumItemsPrimary;\r\n        }\r\n    }\r\n    return -1;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagsAdapter.java"}}
{"prompt": "\n import com.automattic.simplenote.utils.SearchTokenizer.SPACE\n@Override\r\npublic void onTextChanged(CharSequence s, int start, int before, int count) {\r\n    if (count >= 1 && s.charAt(start) == SPACE) {\r", "choices": [{"text": "//        mSearchView.setQuery(s.subSequence(0, start), false);\r\n        mSearchView.setQuery(s.subSequence(0, start), true);\r\n        mSearchView.setIconified(false);\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/559", "ground_truth": "        saveTagOrShowError(s.toString());\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagsMultiAutoCompleteTextView.java"}}
{"prompt": "\n import com.automattic.simplenote.models.Tag\nimport com.automattic.simplenote.R\nimport android.view.KeyEvent\n@Override\r\npublic boolean dispatchKeyEvent(KeyEvent event) {\r\n    if (event.getKeyCode() == KeyEvent.KEYCODE_ENTER) {\r\n        saveTagOrShowError(getText().toString());\r", "choices": [{"text": "return true;\r\n    }\r\n    return super.dispatchKeyEvent(event);\r\n}\r\nprivate void saveTagOrShowError(String tag) {\r\n    if (TextUtils.isEmpty(tag)) {\r\n        setError(getString(R.string.tag_empty_error));\r\n        return;\r\n    }\r\n    if (tag.length() > 255) {\r\n        setError(getString(R.string.tag_too_long_error));\r\n        return;\r\n    }\r\n    if (tag.contains(\" \")) {\r\n        setError(getString(R.string.tag_spaces_error));\r\n        return;\r\n    }\r\n   "}], "metadata": {"task_id": "simplenote-android/560", "ground_truth": "        return true;\r\n    } else {\r\n        return super.dispatchKeyEvent(event);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagsMultiAutoCompleteTextView.java"}}
{"prompt": "\nprivate OnTagAddedListener mTagAddedListener;\nprivate Bucket<Tag> mBucketTag;\n public void init() {\r", "choices": [{"text": "mBucketTag = new Bucket<Tag>();\r\nmBucketTag.setBucketName(\"tag\");\r\nmBucketTag.setBucketType(Bucket.TYPE_TAG);\r\nmBucketTag.setBucketId(1);\r\nmBucketTag.setBucketIcon(R.drawable.ic_launcher);\r\nmBucketTag.setBucketColor(Color.parseColor(\"#000000\"));\r\nmBucketTag.setBucketName(\"tag\");\r\nmBucketTag.setBucketType(Bucket.TYPE_TAG);\r\nmBucketTag.setBucketId("}], "metadata": {"task_id": "simplenote-android/561", "ground_truth": "    setOnItemClickListener(this);\r\n    addTextChangedListener(mTextWatcher);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagsMultiAutoCompleteTextView.java"}}
{"prompt": "\n import com.automattic.simplenote.models.Tag\npublic void notifyTagsChanged() {\r\n    String lexical = getText().toString().trim();\r", "choices": [{"text": "//    if (lexical.length() == 0) {\r\n//      return;\r\n//    }\r\n    List<Tag> tags = Tag.getTags(lexical);\r\n    if (tags.size() == 0) {\r\n      return;\r\n    }\r\n    List<Tag> newTags = new ArrayList<Tag>();\r\n    for (Tag tag : tags) {\r\n      if (!tag.isDeleted()) {\r\n        newTags.add(tag);\r\n      }\r\n    }\r\n    if (newTags.size() == 0) {\r\n      return;\r\n    }\r\n    if (newTags.size() > 1"}], "metadata": {"task_id": "simplenote-android/562", "ground_truth": "    String canonical = TagUtils.getCanonicalFromLexical(mBucketTag, lexical);\r\n    notifyTagsChanged(canonical);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagsMultiAutoCompleteTextView.java"}}
{"prompt": "\n import com.automattic.simplenote.models.Tag\npublic void notifyTagsChanged(String tag) {\r\n    if (mTagAddedListener != null) {\r", "choices": [{"text": "\n import com.automattic.simplenote.models.Tag\npublic void notifyTagsChanged(String tag) {\r\n    if (mTagAddedListener!= null) {\r\nmTagAddedListener.onTagAdded(tag);\r\n    }\r\n}\n"}], "metadata": {"task_id": "simplenote-android/563", "ground_truth": "        mTagAddedListener.onTagAdded(tag);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagsMultiAutoCompleteTextView.java"}}
{"prompt": "\n import com.simperium.client.BucketObjectNameInvalid\nimport com.simperium.client.Bucket\nimport com.automattic.simplenote.models.Tag\n/**\r\n * Create a tag the @param key and @param name in the @param bucket if it does not exist.\r\n *\r\n * @param bucket    {@link Bucket<Tag>} in which to create the tag.\r\n * @param name      {@link String} to use creating the tag.\r\n */\r\npublic static void createTagIfMissing(Bucket<Tag> bucket, String name) throws BucketObjectNameInvalid {\r\n    if (isTagMissing(bucket, name)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/566", "ground_truth": "        createTag(bucket, name, bucket.count());\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagUtils.java"}}
{"prompt": "\n import java.util.List\nimport java.util.ArrayList\nimport com.automattic.simplenote.models.Tag\n/**\r\n * Find the tags that match the canonical representation of tagSearch\r\n *\r\n * @param tags      {@link List<String>} list of tags where tagSearch is going to be matched.\r\n * @param tagSearch {@link String} tag to be searched.\r\n * @return          {@link List<String>} Sublist of tags that matched tagSearch's canonical\r\n *                  representation.\r\n */\r\npublic static List<String> findTagsMatch(List<String> tags, String tagSearch) {\r\n    List<String> tagsMatched = new ArrayList<>();\r\n    // Get the canonical hash of tag that is searched\r\n    String tagSearchHash = hashTag(tagSearch);\r\n    for (String tag : tags) {\r\n        String tagHash = hashTag(tag);\r\n        if (tagHash.equals(tagSearchHash)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/567", "ground_truth": "            tagsMatched.add(tag);\r\n        }\r\n    }\r\n    return tagsMatched;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\TagUtils.java"}}
{"prompt": "\n import java.util.List\nimport android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    if (mUndoListener != null) {\r", "choices": [{"text": "\n import java.util.List\nimport android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    if (mUndoListener!= null) {\r\nmUndoListener.onUndo(mUndoToken);\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/576", "ground_truth": "        mUndoListener.onUndo();\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\UndoBarController.java"}}
{"prompt": "\n import android.content.Context\n// Returns true if a WordPress.com token exists in preferences\r\npublic static boolean hasWPToken(Context context) {\r\n    if (context == null) {\r\n        return false;\r", "choices": [{"text": "}\r\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\r\n    return prefs.contains(WP_TOKEN_KEY);\r\n}\r\n\n// Returns true if a WordPress.com username exists in preferences\r\npublic static boolean hasWPUsername(Context context) {\r\n    if (context == null) {\r\n        return false;\r\n}\r\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\r\n    return prefs.contains(WP_USERNAME_KEY);\r\n}\r\n\n// Returns true if a WordPress.com password exists in preferences\r\npublic static boolean hasWPPassword(Context context) {\r\n    if"}], "metadata": {"task_id": "simplenote-android/578", "ground_truth": "    }\r\n    return !TextUtils.isEmpty(PrefUtils.getStringPref(context, PrefUtils.PREF_WP_TOKEN));\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\utils\\WordPressUtils.java"}}
{"prompt": "\n import com.automattic.simplenote.authentication.UserSession\nprivate fun isCurrentUser(collaborator: String): Boolean {\r\n        return when (val currentUser = sessionManager.getCurrentUser()) {\r\n            is UserSession.AuthorizedUser -> currentUser.user.email == collaborator\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/581", "ground_truth": "            is UserSession.UnauthorizedUser -> false // This should not happen.\r\n        }\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\AddCollaboratorViewModel.kt"}}
{"prompt": "\n fun start() {\r\n        // Show keyboard at startup\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/583", "ground_truth": "        _uiState.value = UiState(\"\")\r\n        _event.postValue(Event.START)\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\AddTagViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun loadCollaborators(noteId: String) {\r\n        this.noteId = noteId\r\n        viewModelScope.launch {\r", "choices": [{"text": "//            val result = repository.getCollaborators(noteId)\r\n//            if (result.isSuccess) {\r\n//                val collaborators = result.getOrNull()\r\n//                if (collaborators!= null) {\r\n//                    this@CollaboratorsFragment.collaborators = collaborators\r\n//                    this@CollaboratorsFragment.adapter.setCollaborators(collaborators)\r\n//                }\r\n//            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "simplenote-android/584", "ground_truth": "            updateUiState(noteId)\r\n        }\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\CollaboratorsViewModel.kt"}}
{"prompt": "\n fun start() {\r\n        if (isStarted) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/586", "ground_truth": "            return\r\n        }\r\n\r\n        isStarted = true\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\IapViewModel.kt"}}
{"prompt": "\n import com.automattic.simplenote.analytics.AnalyticsTracker\nprivate fun onPlanSelected(offerToken: String, tracker: AnalyticsTracker.Stat) {\r\n        AnalyticsTracker.track(tracker)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "simplenote-android/587", "ground_truth": "        _onPurchaseRequest.postValue(offerToken)\r\n        _plansBottomSheetVisibility.postValue(false)\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\IapViewModel.kt"}}
{"prompt": "\n override fun onCleared() {\r", "choices": [{"text": "//     super.onCleared()\r\n     viewModelScope.cancel()\r\n }\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/590", "ground_truth": "        super.onCleared()\r\n        billingClient.endConnection()\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\IapViewModel.kt"}}
{"prompt": "\n import com.automattic.simplenote.R\nprivate fun shouldRetryConnection(responseCode: Int) = when(responseCode) {\r\n        BillingClient.BillingResponseCode.SERVICE_TIMEOUT,\r\n        BillingClient.BillingResponseCode.SERVICE_DISCONNECTED,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/595", "ground_truth": "        BillingClient.BillingResponseCode.SERVICE_UNAVAILABLE -> true\r\n        else -> false\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\IapViewModel.kt"}}
{"prompt": "\n import com.automattic.simplenote.models.Note\nfun update(note: Note) {\r", "choices": [{"text": "//    val note = Note(\r\n//        noteId = note.noteId,\r\n//        title = note.title,\r\n//        content = note.content,\r\n//        created = note.created,\r\n//        updated = note.updated,\r\n//        isDeleted = note.isDeleted,\r\n//        isArchived = note.isArchived,\r\n//        isPinned = note.isPinned,\r\n//        isTrashed = note.isTrashed,\r\n//        isDraft = note.isDraft,\r\n"}], "metadata": {"task_id": "simplenote-android/596", "ground_truth": "        val tags = getTagsUseCase.getTags(note)\r\n        _uiState.value = UiState(tags)\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\NoteEditorViewModel.kt"}}
{"prompt": "\n import androidx.lifecycle.Observer\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.LifecycleOwner\nimport androidx.annotation.NonNull\nimport androidx.annotation.MainThread\nimport android.util.Log\n @MainThread\r\n    override fun observe(@NonNull owner: LifecycleOwner, @NonNull observer: Observer<in T>) {\r\n        if (hasActiveObservers()) {\r\n            Log.w(TAG, \"Multiple observers registered but only one will be notified of changes.\")\r\n        }\r\n\r\n        // Observe the internal MutableLiveData\r\n        super.observe(owner, { t ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/598", "ground_truth": "            if (pending.compareAndSet(true, false)) {\r\n                observer.onChanged(t)\r\n            }\r\n        })\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\SingleLiveEvent.kt"}}
{"prompt": " import androidx.annotation.MainThread\nval pending\nval TAG\n @MainThread\r\n    override fun setValue(t: T?) {\r", "choices": [{"text": "//        if (t == null) {\r\n//            throw NullPointerException(\"Cannot set a null value\")\r\n//        }\r\n//        if (mPending) {\r\n//            mPendingValue = t\r\n//        } else {\r\n//            mValue = t\r\n//        }\r\n    }\n"}], "metadata": {"task_id": "simplenote-android/599", "ground_truth": "        pending.set(true)\r\n        super.setValue(t)\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\SingleLiveEvent.kt"}}
{"prompt": "\n override fun postValue(value: T) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/600", "ground_truth": "        pending.set(true)\r\n        super.postValue(value)\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\SingleLiveEvent.kt"}}
{"prompt": "\nval pending\nval TAG\n fun asyncCall() {\r", "choices": [{"text": "TAG = \"asyncCall\"\r\nLog.d(TAG, \"Start asyncCall\")\r\nval result = async {\r\nLog.d(TAG, \"asyncCall: do some work\")\r\ndelay(1000)\r\nLog.d(TAG, \"asyncCall: do some more work\")\r\n\"Done\"\r\n}.await()\r\nLog.d(TAG, \"asyncCall: result is $result\")\r\n}\r\nfun main() {\r\nLog.d(TAG, \"Start main\")\r\nasyncCall()\r\nLog.d("}], "metadata": {"task_id": "simplenote-android/601", "ground_truth": "        pending.set(true)\r\n        super.postValue(null)\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\SingleLiveEvent.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun start() {\r\n        viewModelScope.launch {\r\n            val tagItems = getTagsUseCase.allTags()\r", "choices": [{"text": "//            val tagItems = getTagsUseCase.allTags()\r\n            tagItems.forEach {\r\n                println(it)\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "simplenote-android/602", "ground_truth": "            _uiState.value = UiState(tagItems)\r\n        }\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\TagsViewModel.kt"}}
{"prompt": "\n private suspend fun updateUiState(searchQuery: String?, searchUpdate: Boolean = false) {\r\n        val tagItems = if (searchQuery == null) getTagsUseCase.allTags()\r\n            else getTagsUseCase.searchTags(searchQuery)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/604", "ground_truth": "\r\n        _uiState.value = UiState(tagItems, searchUpdate, searchQuery)\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\TagsViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun search(searchQuery: String) {\r\n        viewModelScope.launch {\r", "choices": [{"text": "//            val response = api.search(searchQuery)\r\n//            _searchResult.value = response\r\n        }\r\n    }\n"}], "metadata": {"task_id": "simplenote-android/605", "ground_truth": "            updateUiState(searchQuery, true)\r\n        }\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\TagsViewModel.kt"}}
{"prompt": "\n fun stopListeningTagChanges() {\r\n        // When the job for tagsFlow is cancelled, the awaitClose block is called\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/606", "ground_truth": "        // This remove the listeners for the tags bucket\r\n        jobTagsFlow?.cancel()\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\TagsViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun updateOnResult() {\r\n        viewModelScope.launch {\r\n            val searchQuery = _uiState.value?.searchQuery\r", "choices": [{"text": "//            val result = repository.search(searchQuery)\r\n//            _uiState.value = _uiState.value?.copy(\r\n//                searchResult = result,\r\n//                isLoading = false\r\n//            )\r\n        }\r\n    }\n"}], "metadata": {"task_id": "simplenote-android/607", "ground_truth": "            updateUiState(searchQuery)\r\n        }\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\TagsViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.automattic.simplenote.models.TagItem\nimport com.automattic.simplenote.analytics.AnalyticsTracker\nimport androidx.lifecycle.viewModelScope\nfun deleteTag(tagItem: TagItem) {\r\n        viewModelScope.launch {\r\n            tagsRepository.deleteTag(tagItem.tag)\r\n            AnalyticsTracker.track(\r\n                    AnalyticsTracker.Stat.TAG_MENU_DELETED,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/609", "ground_truth": "                    AnalyticsTracker.CATEGORY_TAG,\r\n                    \"list_trash_button\"\r\n            )\r\n        }\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\viewmodels\\TagsViewModel.kt"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.view.View\n@Override\r\npublic void onClick(@NonNull View view) {\r\n    setChecked(!isChecked);\r\n    if (view instanceof SimplenoteEditText) {\r\n        try {\r\n            ((SimplenoteEditText) view).toggleCheckbox(this);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/611", "ground_truth": "        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\CheckableSpan.java"}}
{"prompt": "\n import android.view.View\npublic void setEmptyView(View emptyView) {\r", "choices": [{"text": "this.emptyView = emptyView;\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/613", "ground_truth": "    mEmptyView = emptyView;\r\n    toggleEmptyView();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\EmptyViewRecyclerView.java"}}
{"prompt": "\n import android.view.View\nprivate void toggleEmptyView() {\r\n    if (mEmptyView != null && getAdapter() != null) {\r\n        final boolean empty = getAdapter().getItemCount() == 0;\r", "choices": [{"text": "\n import android.view.View\nprivate void toggleEmptyView() {\r\n    if (mEmptyView!= null && getAdapter()!= null) {\r\n        final boolean empty = getAdapter().getItemCount() == 0;\r\n//        mEmptyView.setVisibility(empty? View.VISIBLE : View.GONE);\r\n    }\r\n}\n"}], "metadata": {"task_id": "simplenote-android/614", "ground_truth": "        mEmptyView.setVisibility(empty ? VISIBLE : GONE);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\EmptyViewRecyclerView.java"}}
{"prompt": "\n @Override\r\npublic void setAlpha(int alpha) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.setAlpha(alpha);\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/617", "ground_truth": "    mPaint.setAlpha(alpha);\r\n    invalidateSelf();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\MorphDrawable.java"}}
{"prompt": "\n import android.graphics.ColorFilter\n@Override\r\npublic void setColorFilter(ColorFilter cf) {\r", "choices": [{"text": "super.setColorFilter(cf);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/618", "ground_truth": "    mPaint.setColorFilter(cf);\r\n    invalidateSelf();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\MorphDrawable.java"}}
{"prompt": "\n public void setColor(int color) {\r", "choices": [{"text": "//     this.color = color;\r\n// }\r\n//\r\n// public int getColor() {\r\n//     return color;\r\n// }\r\n//\r\n// public void setSize(int size) {\r\n//     this.size = size;\r\n// }\r\n//\r\n// public int getSize() {\r\n//     return size;\r\n// }\r\n//\r\n// public void setPrice(int price) {\r\n//     this.price = price;\r\n// }\r\n//\r\n// public int getPrice()"}], "metadata": {"task_id": "simplenote-android/619", "ground_truth": "    mPaint.setColor(color);\r\n    invalidateSelf();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\MorphDrawable.java"}}
{"prompt": "\n public void setRadius(float cornerRadius) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/620", "ground_truth": "    mRadius = cornerRadius;\r\n    invalidateSelf();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\MorphDrawable.java"}}
{"prompt": "\n import android.view.MotionEvent\n@Override\r\npublic boolean onTouchEvent(MotionEvent event) {\r\n    if (!mIsEnabled) {\r\n        return false;\r\n    }\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "simplenote-android/623", "ground_truth": "    if (event.getAction() == MotionEvent.ACTION_UP) {\r\n        performClick();\r\n    }\r\n    return super.onTouchEvent(event);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\NoteEditorViewPager.java"}}
{"prompt": "\n override fun getExtractedText(request: ExtractedTextRequest?, flags: Int): ExtractedText? {\r\n        val et = ExtractedText()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/624", "ground_truth": "        if (mTextView.extractText(request, et)) {\r\n            return et\r\n        }\r\n        return null\r\n    }", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\SamsungInputConnection.kt"}}
{"prompt": "\n import java.util.List\nimport com.automattic.simplenote.utils.LinkTokenizer\nprivate void setLinkTokenizer() {\r\n    mTokenizer = new LinkTokenizer();\r\n    setOnItemClickListener(this);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "simplenote-android/627", "ground_truth": "    setTokenizer(mTokenizer);\r\n    setThreshold(1);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\SimplenoteEditText.java"}}
{"prompt": "\nprivate OnCheckboxToggledListener mOnCheckboxToggledListener;\nprivate final List<OnSelectionChangedListener> listeners;\nprivate static final Pattern INTERNOTE_LINK_PATTERN_FULL = Pattern.compile(\"(?s)(.)*(\\\\[)\" + INTERNOTE_LINK_PATTERN_EDIT);\n @Override\r\nprotected void onSelectionChanged(int selStart, int selEnd) {\r\n    super.onSelectionChanged(selStart, selEnd);\r\n    if (listeners != null) {\r", "choices": [{"text": "\nprivate OnCheckboxToggledListener mOnCheckboxToggledListener;\nprivate final List<OnSelectionChangedListener> listeners;\nprivate static final Pattern INTERNOTE_LINK_PATTERN_FULL = Pattern.compile(\"(?s)(.)*(\\\\[)\" + INTERNOTE_LINK_PATTERN_EDIT);\n @Override\r\nprotected void onSelectionChanged(int selStart, int selEnd) {\r\n    super.onSelectionChanged(selStart, selEnd);\r\n    if (listeners!= null) {\r\nfor (OnSelectionChangedListener listener : listeners) {\r\nlistener.onSelectionChanged(selStart, selEnd);\r\n}\r\n}\r\n}\r\npublic void setOnSelectionChangedListener(OnSelectionChangedListener listener) {\r\nif (listeners == null) {\r\nthrow new IllegalStateException(\"You must set the listeners before setting the listener\");\r\n}\r\nlisteners.add(listener);\r\n}\r\npublic void setOnCheckboxToggledListener(OnCheckboxToggledListener listener) {\r\nmOnCheckboxToggledListener = listener;\r\n}\r\npublic void"}], "metadata": {"task_id": "simplenote-android/630", "ground_truth": "        for (OnSelectionChangedListener l : listeners) l.onSelectionChanged(selStart, selEnd);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\SimplenoteEditText.java"}}
{"prompt": "\n import android.view.KeyEvent\n@Override\r\npublic boolean onKeyPreIme(int keyCode, KeyEvent event) {\r\n    if (event.getKeyCode() == KeyEvent.KEYCODE_BACK) {\r\n        clearFocus();\r", "choices": [{"text": "}\r\nreturn super.onKeyPreIme(keyCode, event);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/631", "ground_truth": "    }\r\n    return super.onKeyPreIme(keyCode, event);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\SimplenoteEditText.java"}}
{"prompt": "\n import com.automattic.simplenote.R\nimport android.graphics.Rect\n@Override\r\nprotected void onFocusChanged(boolean focused, int direction, Rect previouslyFocusedRect) {\r\n    if (focused) {\r\n        setCursorVisible(true);\r", "choices": [{"text": "} else {\r\n        setCursorVisible(false);\r\n}\r\nsuper.onFocusChanged(focused, direction, previouslyFocusedRect);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/632", "ground_truth": "    }\r\n    super.onFocusChanged(focused, direction, previouslyFocusedRect);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\SimplenoteEditText.java"}}
{"prompt": "\n import android.text.Editable\nprivate int findStartOfLineOfSelection() {\r\n    int position = getSelectionStart();\r\n    // getSelectionStart may return -1 if there is no selection nor cursor\r\n    if (position == -1) {\r\n        return 0;\r\n    }\r\n    Editable editable = getText();\r\n    for (int i = position - 1; i >= 0; i--) {\r\n        if (editable.charAt(i) == '\\n') {\r", "choices": [{"text": "//            return i + 1;\r\n            return i;\r\n        }\r\n    }\r\n    return 0;\r\n}\n"}], "metadata": {"task_id": "simplenote-android/633", "ground_truth": "            return i + 1;\r\n        }\r\n    }\r\n    return 0;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\SimplenoteEditText.java"}}
{"prompt": "\n import android.view.animation.Animation\nimport android.animation.Animator\nprivate void cancelAnimation() {\r\n    if (mAnimator != null) {\r", "choices": [{"text": "\n import android.view.animation.Animation\nimport android.animation.Animator\nprivate void cancelAnimation() {\r\n    if (mAnimator!= null) {\r\nmAnimator.cancel()\r\nmAnimator = null\r\n}\r\n}\r\nprivate void startAnimation() {\r\nif (mAnimator == null) {\r\nmAnimator = ObjectAnimator.ofFloat(mImageView, \"rotation\", 0f, 360f)\r\nmAnimator.setDuration(1000)\r\nmAnimator.setRepeatCount(ValueAnimator.INFINITE)\r\nmAnimator.setInterpolator(new LinearInterpolator())\r\nmAnimator.addListener(new Animator.AnimatorListener() {\r\n@Override\r\npublic void on"}], "metadata": {"task_id": "simplenote-android/636", "ground_truth": "        mAnimator.removeAllListeners();\r\n        mAnimator.cancel();\r\n        mAnimator = null;\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\SpinningImageButton.java"}}
{"prompt": "\n import android.view.animation.Animation\nprivate void cancelLongClick() {\r\n    cancelAnimation();\r\n    mIsMaximumSpeed = false;\r", "choices": [{"text": "}\r\n\r\nprivate void cancelAnimation() {\r\n    if (mAnimation!= null) {\r\n        mAnimation.cancel();\r\n        mAnimation = null;\r\n    }\r\n}\r\n\r\nprivate void startAnimation() {\r\n    if (mAnimation == null) {\r\n        mAnimation = new Animation() {\r\n            @Override\r\n            public void applyTransformation(float interpolatedTime, Transformation t) {\r\n                if (interpolatedTime >= 1.0f) {\r\n                    mIsMaximumSpeed = true;\r\n                }\r\n            }\r\n        };\r\n        mAnimation.setDuration(1000);\r\n        mAnimation.setRepeatCount(Animation."}], "metadata": {"task_id": "simplenote-android/637", "ground_truth": "    removeCallbacks(mLongPressCallback);\r\n    setRotation(0);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\SpinningImageButton.java"}}
{"prompt": "\n import android.view.animation.Animation\nimport android.animation.Animator\n@Override\r\npublic void onAnimationEnd(Animator animation) {\r", "choices": [{"text": "}\r\n@Override\r\npublic void onAnimationRepeat(Animator animation) {\r\n}\r\n@Override\r\npublic void onAnimationStart(Animator animation) {\r\n}\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/639", "ground_truth": "    cancelAnimation();\r\n    cancelLongClick();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\SpinningImageButton.java"}}
{"prompt": "\n import android.graphics.Typeface\nimport android.content.Context\npublic static Typeface getTypeface(Context context, String typefaceName) {\r\n    if (context == null || typefaceName == null) {\r\n        return null;\r\n    }\r\n    if (!mTypefaceCache.containsKey(typefaceName)) {\r\n        Typeface typeface = Typeface.createFromAsset(context.getApplicationContext().getAssets(), \"fonts/\" + typefaceName);\r\n        if (typeface != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/640", "ground_truth": "            mTypefaceCache.put(typefaceName, typeface);\r\n        }\r\n    }\r\n    return mTypefaceCache.get(typefaceName);\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\TypefaceCache.java"}}
{"prompt": "\n import com.automattic.simplenote.utils.WordPressUtils\nprivate void loadSites() {\r\n    if (getActivity() == null || !WordPressUtils.hasWPToken(getActivity())) {\r\n        return;\r\n    }\r\n    if (loadSitesFromPreferences()) {\r\n        SitesAdapter sitesAdapter = new SitesAdapter(getActivity());\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/644", "ground_truth": "        mListView.setAdapter(sitesAdapter);\r\n        return;\r\n    }\r\n    fetchSitesFromAPI();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\WordPressDialogFragment.java"}}
{"prompt": "\n import org.json.JSONException\nimport org.json.JSONArray\nimport com.automattic.simplenote.utils.PrefUtils\nimport android.text.TextUtils\nprivate boolean loadSitesFromPreferences() {\r\n    if (getActivity() == null) {\r\n        return false;\r\n    }\r\n    String savedSites = PrefUtils.getStringPref(getActivity(), PrefUtils.PREF_WORDPRESS_SITES);\r\n    if (!TextUtils.isEmpty(savedSites)) {\r\n        try {\r\n            mSitesArray = new JSONArray(savedSites);\r\n            return true;\r\n        } catch (JSONException e) {\r", "choices": [{"text": "//            Log.e(TAG, \"Error parsing saved sites\", e);\r\n        }\r\n    }\r\n    return false;\r\n}\n"}], "metadata": {"task_id": "simplenote-android/646", "ground_truth": "            return false;\r\n        }\r\n    }\r\n    return false;\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\WordPressDialogFragment.java"}}
{"prompt": "\n import okhttp3.Call\nimport java.io.IOException\nimport androidx.annotation.NonNull\n@Override\r\npublic void onFailure(@NonNull final Call call, @NonNull IOException e) {\r\n    if (getActivity() == null) {\r\n        return;\r\n    }\r\n    getActivity().runOnUiThread(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            if (mSitesArray.length() == 0) {\r\n                // Reset to connect state if we reached an error\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/649", "ground_truth": "                setDialogStatus(DialogStatus.CONNECT);\r\n            }\r\n        }\r\n    });\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\WordPressDialogFragment.java"}}
{"prompt": "\n @Override\r\npublic void run() {\r\n    if (mSitesArray.length() == 0) {\r\n        // Reset to connect state if we reached an error\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/650", "ground_truth": "        setDialogStatus(DialogStatus.CONNECT);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\WordPressDialogFragment.java"}}
{"prompt": "\n @Override\r\npublic void run() {\r\n    // Reset to connect state if we reached an error\r\n    if (mSitesArray.length() == 0) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "simplenote-android/652", "ground_truth": "        setDialogStatus(DialogStatus.CONNECT);\r\n    }\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\WordPressDialogFragment.java"}}
{"prompt": "\n import androidx.annotation.StringRes\nimport android.widget.Toast\nfun showToast(@StringRes message: Int, duration: Int? = null) {\r\n        val act = activity ?: return\r\n        act.runOnUiThread {\r", "choices": [{"text": "\n import androidx.annotation.StringRes\nimport android.widget.Toast\nfun showToast(@StringRes message: Int, duration: Int? = null) {\r\n        val act = activity?: return\r\n        act.runOnUiThread {\r\n//            Toast.makeText(act, message, duration?: Toast.LENGTH_SHORT).show()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/2", "ground_truth": "            showToast(act, act.getString(message), duration)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\CommonActivity.kt"}}
{"prompt": " import android.widget.Toast\nvar currentToast Toast?\nval displayMetrics DisplayMetrics\nvar isInPIPMode Boolean\nfun showToast(message: String?, duration: Int? = null) {\r\n        val act = activity ?: return\r\n        act.runOnUiThread {\r", "choices": [{"text": " import android.widget.Toast\nvar currentToast Toast?\nval displayMetrics DisplayMetrics\nvar isInPIPMode Boolean\nfun showToast(message: String?, duration: Int? = null) {\r\n        val act = activity?: return\r\n        act.runOnUiThread {\r\nif (currentToast!= null) {\r\ncurrentToast!!.cancel()\r\n}\r\ncurrentToast = Toast.makeText(act, message, if (duration == null) Toast.LENGTH_SHORT else duration)\r\ncurrentToast!!.show()\r\n}\r\n}\n"}], "metadata": {"task_id": "cloudstream/3", "ground_truth": "            showToast(act, message, duration)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\CommonActivity.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.ui.result.UiText\nimport androidx.annotation.MainThread\nimport android.widget.Toast\nimport android.app.Activity\n @MainThread\r\n    fun showToast(act: Activity?, text: UiText, duration: Int) {\r\n        if (act == null) return\r\n        text.asStringNull(act)?.let {\r", "choices": [{"text": "//            Toast.makeText(act, it, duration).show()\r\n        }\r\n    }<file_sep>/app/src/main/java/com/lagradost/cloudstream3/ui/result/UiResult.kt\npackage com.lagradost.cloudstream3.ui.result\n\nimport android.app.Activity\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Toast\nimport androidx.annotation.MainThread\nimport androidx.annotation.StringRes\nimport androidx.fragment.app."}], "metadata": {"task_id": "cloudstream/5", "ground_truth": "            showToast(act, it, duration)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\CommonActivity.kt"}}
{"prompt": "\n import androidx.annotation.StringRes\nimport androidx.annotation.MainThread\nimport android.widget.Toast\nimport android.app.Activity\n @MainThread\r\n    fun showToast(act: Activity?, @StringRes message: Int, duration: Int? = null) {\r", "choices": [{"text": "//        if (act == null) return\r\n//        val toast = Toast.makeText(act, message, duration?: Toast.LENGTH_SHORT)\r\n//        toast.show()\r\n    }\r\n<file_sep>/app/src/main/java/com/example/myapplication/ui/main/MainViewModel.kt\npackage com.example.myapplication.ui.main\n\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport com.example.myapplication.data.model.User\nimport com.example.myapplication.data"}], "metadata": {"task_id": "cloudstream/6", "ground_truth": "        if (act == null) return\r\n        showToast(act, act.getString(message), duration)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\CommonActivity.kt"}}
{"prompt": "\n import android.app.Activity\nfun onUserLeaveHint(act: Activity?) {\r\n        if (canEnterPipMode && canShowPipMode) {\r", "choices": [{"text": "//            if (isPipMode) {\r\n//                return\r\n//            }\r\n            if (isPipMode) {\r\n                return\r\n            }\r\n            if (isPipMode) {\r\n                return\r\n            }\r\n            if (isPipMode) {\r\n                return\r\n            }\r\n            if (isPipMode) {\r\n                return\r\n            }\r\n            if (isPipMode) {\r\n                return\r\n            }\r\n            if (isPipMode) {\r\n                return\r\n            }\r\n            if (isPipMode) {\r\n                return\r\n            }\r\n            if (isPipMode) {\r\n                return\r\n            }\r\n            if (isPipMode) {\r\n                return\r\n            }"}], "metadata": {"task_id": "cloudstream/9", "ground_truth": "            act?.enterPIPMode()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\CommonActivity.kt"}}
{"prompt": " import org.schabi.newpipe.extractor.downloader.Downloader\nimport okhttp3.OkHttpClient\nval client OkHttpClient\nval USER_AGENT\nvar instance DownloaderTestImpl?\nfun init(builder: OkHttpClient.Builder?): DownloaderTestImpl? {\r\n            instance = DownloaderTestImpl(\r\n                builder ?: OkHttpClient.Builder()\r", "choices": [{"text": " import org.schabi.newpipe.extractor.downloader.Downloader\nimport okhttp3.OkHttpClient\nval client OkHttpClient\nval USER_AGENT\nvar instance DownloaderTestImpl?\nfun init(builder: OkHttpClient.Builder?): DownloaderTestImpl? {\r\n            instance = DownloaderTestImpl(\r\n                builder?: OkHttpClient.Builder()\r\n)\r\n            return instance\r\n        }\n"}], "metadata": {"task_id": "cloudstream/12", "ground_truth": "            )\r\n            return instance\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\DownloaderTestImpl.kt"}}
{"prompt": "\n import org.schabi.newpipe.extractor.downloader.Downloader\nfun getInstance(): DownloaderTestImpl? {\r\n            if (instance == null) {\r\n                init(null)\r", "choices": [{"text": "}\r\n            return instance\r\n        }\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/13", "ground_truth": "            }\r\n            return instance\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\DownloaderTestImpl.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.M3u8Helper\nimport com.lagradost.cloudstream3.utils.ExtractorLink\nimport com.lagradost.cloudstream3.app\noverride suspend fun getUrl(url: String, referer: String?): List<ExtractorLink>? {\r\n        val data = regex.find(app.get(url).text)?.value\r\n            ?.replace(\"\\\"\", \"\")\r\n            ?.split(\",\")\r\n            ?: return null\r\n\r\n        val m3u8 = \"$mainUrl/m3u8/${data[1]}/${data[2]}/master.txt?s=1&cache=${data[4]}\"\r\n        //println(\"shiv : $m3u8\")\r\n        return M3u8Helper.generateM3u8(\r\n            name,\r", "choices": [{"text": "\n import com.lagradost.cloudstream3.utils.M3u8Helper\nimport com.lagradost.cloudstream3.utils.ExtractorLink\nimport com.lagradost.cloudstream3.app\noverride suspend fun getUrl(url: String, referer: String?): List<ExtractorLink>? {\r\n        val data = regex.find(app.get(url).text)?.value\r\n           ?.replace(\"\\\"\", \"\")\r\n           ?.split(\",\")\r\n           ?: return null\r\n\r\n        val m3u8 = \"$mainUrl/m3u8/${data[1]}/${data[2]}/master.txt?s=1&cache=${data[4]}\"\r\n        //println(\"shiv : $m3u8\")\r\n        return M3u8Helper.generateM3u8(\r\n            name,\r\n//            m3u8,\r\n            m3u8,\r\n            referer,\r\n            data[3],\r\n            data[0],\r\n            data[5],\r\n            data[6],\r\n            data[7],\r\n            data[8],\r\n            data[9],\r\n            data[10],\r\n            data[11],\r\n            data[12],\r\n            data[13],\r\n            data[14],\r\n            data[15],\r\n            data[16],\r\n            data[17],\r\n            data[18],\r\n            data[19],\r\n            data[20],\r\n            data[21],\r\n            data["}], "metadata": {"task_id": "cloudstream/14", "ground_truth": "            m3u8,\r\n            url,\r\n            headers = mapOf(\"referer\" to url, \"accept\" to \"*/*\")\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\BullStream.kt"}}
{"prompt": "\n override suspend fun getUrl(url: String, referer: String?): List<ExtractorLink> {\r\n        val sources = mutableListOf<ExtractorLink>()\r\n        sources.add(\r\n            ExtractorLink(\r\n                name,\r\n                name,\r\n                url.replace(\"/embed/\", \"/download/\"),\r\n                \"\",\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/15", "ground_truth": "                Qualities.Unknown.value,\r\n            )\r\n        )\r\n        return sources\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\ByteShare.kt"}}
{"prompt": "\n private fun cdaUggc(a: String): String {\r\n        val decoded = rot13(a)\r", "choices": [{"text": "return decoded\r\n    }\r\nprivate fun rot13(a: String): String {\r\n        val rot13 = StringBuilder()\r\n        for (i in a.indices) {\r\n            val c = a[i]\r\n            if (c.isLetter()) {\r\n                val rot = c + 13\r\n                if (rot > 'z') {\r\n                    rot13.append(rot - 26)\r\n                } else {\r\n                    rot13.append(rot)\r\n                }\r\n            } else {\r\n                rot13.append(c)\r\n            }\r\n        }\r\n        return rot13.toString()\r\n    }\r"}], "metadata": {"task_id": "cloudstream/17", "ground_truth": "        return if (decoded.endsWith(\"adc.mp4\")) decoded.replace(\"adc.mp4\",\".mp4\")\r\n        else decoded\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\Cda.kt"}}
{"prompt": "\nvar mainUrl\nvar name\nval requiresReferer\n private fun getFile(a: String) = when {\r\n        a.startsWith(\"uggc\") -> cdaUggc(a)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/18", "ground_truth": "        !a.startsWith(\"http\") -> cdaDecrypt(a)\r\n        else -> a\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\Cda.kt"}}
{"prompt": "\n import java.net.URL\nprivate fun getVideoId(url: String): String? {\r\n        val path = URL(url).path\r\n        val id = path.substringAfter(\"video/\")\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/20", "ground_truth": "        if (id.matches(videoIdRegex)) {\r\n            return id\r\n        }\r\n        return null\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\Dailymotion.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.M3u8Helper.Companion.generateM3u8\nimport com.lagradost.cloudstream3.utils.ExtractorLink\nprivate suspend fun getStream(\r\n        streamLink: String,\r\n        name: String,\r\n        callback: (ExtractorLink) -> Unit\r\n    )  {\r\n        return generateM3u8(\r", "choices": [{"text": "//            streamLink,\r\n            streamLink,\r\n            name,\r\n            callback\r\n        )\r\n    }\n\n"}], "metadata": {"task_id": "cloudstream/21", "ground_truth": "            name,\r\n            streamLink,\r\n            \"\",\r\n        ).forEach(callback)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\Dailymotion.kt"}}
{"prompt": "\n fun String.hexToByteArray(): ByteArray {\r\n        check(length % 2 == 0) { \"Must have an even length\" }\r\n        return chunked(2)\r", "choices": [{"text": ".map { it.toInt(16).toByte() }\r\n.toByteArray()\r\n    }\r\n"}], "metadata": {"task_id": "cloudstream/24", "ground_truth": "            .map { it.toInt(16).toByte() }\r\n            .toByteArray()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\helper\\AesHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.mvvm.normalSafeApiCall\nprivate fun getKey(id: String): String? {\r\n        return normalSafeApiCall {\r", "choices": [{"text": "//            val response = api.getKey(id)\r\n//            return response.body()?.key\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/25", "ground_truth": "            id.map {\r\n                it.code.toString(16)\r\n            }.joinToString(\"\").substring(0, 32)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\helper\\GogoHelper.kt"}}
{"prompt": "\n suspend fun getWcoKey(): ExternalKeys? {\r", "choices": [{"text": "-    val wcoKey = getWcoKeyFromEnv()\r\n-    if (wcoKey!= null) {\r\n-        return wcoKey\r\n-    }\r\n-    return getWcoKeyFromConfig()\r\n+    return getWcoKeyFromEnv()?: getWcoKeyFromConfig()\r\n }\r\n \r\n private fun getWcoKeyFromEnv(): ExternalKeys? {\r\n     val wcoKey = System.getenv(\"WCO_KEY\")\r\n     if (wcoKey!= null) {\r\n         return ExternalKeys(wcoKey)\r\n     }\r\n     return"}], "metadata": {"task_id": "cloudstream/28", "ground_truth": "            getKeys()\r\n            return keys\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\helper\\WcoHelper.kt"}}
{"prompt": "\n suspend fun getNewWcoKey(): NewExternalKeys? {\r", "choices": [{"text": "-    val newWcoKey = NewExternalKeys(\r\n-        wcoKey = \"<KEY>\",\r\n-        wcoKeySecret = \"<KEY>\"\r\n-    )\r\n-    return newWcoKey\r\n+    return NewExternalKeys(\r\n+        wcoKey = \"<KEY>\",\r\n+        wcoKeySecret = \"<KEY>\"\r\n+    )\r\n }\r\n \r\n @Test\r\n fun `get new wco key`() {\r\n-    val newWcoKey = getNewWcoKey()\r\n-    assertNotNull(newWco"}], "metadata": {"task_id": "cloudstream/30", "ground_truth": "            getNewKeys()\r\n            return newKeys\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\helper\\WcoHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.httpsify\nimport com.lagradost.cloudstream3.utils.ExtractorLink\nimport com.lagradost.cloudstream3.app\nimport com.lagradost.cloudstream3.SubtitleFile\noverride suspend fun getUrl(\r\n        url: String,\r\n        referer: String?,\r\n        subtitleCallback: (SubtitleFile) -> Unit,\r\n        callback: (ExtractorLink) -> Unit\r\n    ) {\r\n        val id = Regex(\"/(?:view|embed-video)/([\\\\da-zA-Z]+)\").find(url)?.groupValues?.get(1)\r\n        val doc = app.get(\"$mainUrl/embed-video/$id\").document\r\n        val link = doc.selectFirst(\"source\")?.attr(\"src\")\r\n\r\n        callback.invoke(\r\n            ExtractorLink(\r\n                this.name,\r\n                this.name,\r\n                httpsify(link ?: return),\r\n                \"\",\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/33", "ground_truth": "                Qualities.Unknown.value\r\n            )\r\n        )\r\n\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\Krakenfiles.kt"}}
{"prompt": "\n fun extractLinks(m3u8Data: String): ArrayList<Pair<String, String>> {\r\n        val data: ArrayList<Pair<String, String>> = ArrayList()\r\n        Regex(\"\\\"(.*?)\\\":\\\"(.*?)\\\"\").findAll(m3u8Data).forEach {\r\n            var quality = it.groupValues[1].replace(\"auto\", \"Auto\")\r\n            if (quality != \"Auto\" && !quality.endsWith('p')) quality += \"p\"\r", "choices": [{"text": "\n fun extractLinks(m3u8Data: String): ArrayList<Pair<String, String>> {\r\n        val data: ArrayList<Pair<String, String>> = ArrayList()\r\n        Regex(\"\\\"(.*?)\\\":\\\"(.*?)\\\"\").findAll(m3u8Data).forEach {\r\n            var quality = it.groupValues[1].replace(\"auto\", \"Auto\")\r\n            if (quality!= \"Auto\" &&!quality.endsWith('p')) quality += \"p\"\r\n//            if (quality == \"Auto\") quality = \"Auto\"\r\n            data.add(Pair(it.groupValues[2], quality))\r\n        }\r\n        return data\r\n    }\r\n\r\n    fun extractLinks(m3u8Data: String, quality: String): ArrayList<Pair<String, String>> {\r\n        val data: ArrayList<Pair<String, String>> = ArrayList()\r\n        Regex(\"\\\"(.*?)\\\":\\\"(.*?)\\\"\").findAll(m3u8Data).forEach {\r\n            if (it.groupValues[1] == quality) {\r\n                data.add(Pair(it.groupValues[2],"}], "metadata": {"task_id": "cloudstream/34", "ground_truth": "            val url = it.groupValues[2]\r\n            data.add(Pair(url, quality))\r\n        }\r\n        return data\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\M3u8Manifest.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.ExtractorLink\nimport com.lagradost.cloudstream3.app\nimport com.lagradost.cloudstream3.SubtitleFile\noverride suspend fun getUrl(\r\n        url: String,\r\n        referer: String?,\r\n        subtitleCallback: (SubtitleFile) -> Unit,\r\n        callback: (ExtractorLink) -> Unit\r\n    ) {\r\n        val res = app.get(url, referer = referer).document\r\n        val title = res.select(\"div.dl-btn-label\").text()\r\n        val video = res.selectFirst(\"a#downloadButton\")?.attr(\"href\")\r\n\r\n        callback.invoke(\r\n            ExtractorLink(\r\n                this.name,\r\n                this.name,\r\n                video ?: return,\r\n                \"\",\r\n                getQuality(title),\r", "choices": [{"text": "\n import com.lagradost.cloudstream3.utils.ExtractorLink\nimport com.lagradost.cloudstream3.app\nimport com.lagradost.cloudstream3.SubtitleFile\noverride suspend fun getUrl(\r\n        url: String,\r\n        referer: String?,\r\n        subtitleCallback: (SubtitleFile) -> Unit,\r\n        callback: (ExtractorLink) -> Unit\r\n    ) {\r\n        val res = app.get(url, referer = referer).document\r\n        val title = res.select(\"div.dl-btn-label\").text()\r\n        val video = res.selectFirst(\"a#downloadButton\")?.attr(\"href\")\r\n\r\n        callback.invoke(\r\n            ExtractorLink(\r\n                this.name,\r\n                this.name,\r\n                video?: return,\r\n                \"\",\r\n                getQuality(title),\r\n//                getQuality(title),\r\n                title\r\n            )\r\n        )\r\n    }\r\n\r\n    private fun getQuality(title: String): String {\r\n        return when {\r\n            title.contains(\"720p\") -> \"720p\"\r\n            title.contains(\"1080p\") -> \"1080p\"\r\n            else -> \"360p\"\r\n        }\r\n    }\r\n}<file_sep>/app/src/main/java/com/lagradost/cloudstream3/extractors/Extractor.kt\npackage com.lagradost.cloudstream3.extractors\r\n\r\nimport com"}], "metadata": {"task_id": "cloudstream/35", "ground_truth": "                INFER_TYPE\r\n            )\r\n        )\r\n\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\Mediafire.kt"}}
{"prompt": "\n private fun String.decodeHex(): String {\r\n        require(length % 2 == 0) { \"Must have an even length\" }\r\n        return String(\r", "choices": [{"text": "CharArray(length / 2) {\r\ntoUByte(substring(it * 2, it * 2 + 2).toInt(16)).toInt()\r\n}.toByteArray())\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/37", "ground_truth": "            chunked(2)\r\n                .map { it.toInt(16).toByte() }\r\n                .toByteArray()\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\Mvidoo.kt"}}
{"prompt": "\n override suspend fun getUrl(url: String, referer: String?, subtitleCallback: (SubtitleFile) -> Unit, callback: (ExtractorLink) -> Unit) {\r\n        val mId = Regex(\"/([ul]/[\\\\da-zA-Z\\\\-]+)(?:\\\\?download)?\").find(url)?.groupValues?.get(1)?.split(\"/\")\r\n        callback.invoke(\r\n            ExtractorLink(\r\n                this.name,\r\n                this.name,\r\n                \"$mainUrl/api/file/${mId?.last() ?: return}?download\",\r", "choices": [{"text": "\n override suspend fun getUrl(url: String, referer: String?, subtitleCallback: (SubtitleFile) -> Unit, callback: (ExtractorLink) -> Unit) {\r\n        val mId = Regex(\"/([ul]/[\\\\da-zA-Z\\\\-]+)(?:\\\\?download)?\").find(url)?.groupValues?.get(1)?.split(\"/\")\r\n        callback.invoke(\r\n            ExtractorLink(\r\n                this.name,\r\n                this.name,\r\n                \"$mainUrl/api/file/${mId?.last()?: return}?download\",\r\n//                \"$mainUrl/api/file/${mId?.last()?: return}\",\r\n                \"application/octet-stream\",\r\n                \"application/octet-stream\",\r\n                \"application/octet-stream\",\r\n                \"application/octet-stream\",\r\n                \"application/octet-stream\",\r\n                \"application/octet-stream\",\r\n                \"application/octet-stream\",\r\n                \"application/octet-stream\",\r\n                \"application/octet-stream\",\r\n                \"application/octet-stream\",\r\n                \"application/octet-stream\",\r\n                \"application/octet-stream\",\r\n                \"application/octet-stream\",\r\n                \"application/octet"}], "metadata": {"task_id": "cloudstream/38", "ground_truth": "                url,\r\n                Qualities.Unknown.value,\r\n            )\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\PixelDrainExtractor.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.app\nprivate inline fun <reified T> decryptMapped(input: String, key: String): T? {\r", "choices": [{"text": ""}], "metadata": {"task_id": "cloudstream/39", "ground_truth": "        val decrypt = decrypt(input, key)\r\n        return AppUtils.tryParseJson(decrypt)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\Rabbitstream.kt"}}
{"prompt": "\n private fun generateKey(salt: ByteArray, secret: ByteArray): ByteArray {\r\n        var key = md5(secret + salt)\r\n        var currentKey = key\r\n        while (currentKey.size < 48) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/41", "ground_truth": "            key = md5(key + secret + salt)\r\n            currentKey += key\r\n        }\r\n        return currentKey\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\Rabbitstream.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.M3u8Helper.Companion.generateM3u8\nimport com.lagradost.cloudstream3.app\nimport com.lagradost.cloudstream3.SubtitleFile\noverride suspend fun getUrl(\r\n        url: String,\r\n        referer: String?,\r\n        subtitleCallback: (SubtitleFile) -> Unit,\r\n        callback: (ExtractorLink) -> Unit\r\n    ) {\r\n        val doc = app.get(url).document\r\n        val urlString = doc.select(\"head meta[property=og:video:secure_url]\").attr(\"content\")\r\n        if (urlString.contains(\"m3u8\"))  {\r\n            generateM3u8(\r\n                name,\r", "choices": [{"text": "//                urlString,\r\n                urlString.replace(\"m3u8\", \"mp4\"),\r\n                referer,\r\n                subtitleCallback,\r\n                callback\r\n            )\r\n        } else {\r\n            callback(ExtractorLink(urlString, referer))\r\n        }\r\n    }\r\n}<file_sep>/app/src/main/java/com/lagradost/cloudstream3/utils/M3u8Helper.kt\npackage com.lagradost.cloudstream3.utils\r\n\r\nimport android.util.Log\r\nimport com.lagradost.cloudstream3.SubtitleFile\r\nimport com.lagrad"}], "metadata": {"task_id": "cloudstream/42", "ground_truth": "                urlString,\r\n                mainUrl,\r\n            ).forEach(callback)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\Sendvid.kt"}}
{"prompt": "\n private fun encodeId(id: String): String {\r\n        val code = \"${createHashTable()}||$id||${createHashTable()}||streamsb\"\r\n        return code.toCharArray().joinToString(\"\") { char ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/43", "ground_truth": "            char.code.toString(16)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\StreamSB.kt"}}
{"prompt": "\n private fun createHashTable(): String {\r\n        return buildString {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/44", "ground_truth": "            repeat(12) {\r\n                append(alphabet[Random.nextInt(alphabet.length)])\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\StreamSB.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.ExtractorLink\nimport com.lagradost.cloudstream3.utils.AppUtils.parseJson\nimport com.lagradost.cloudstream3.app\noverride suspend fun getUrl(url: String, referer: String?): List<ExtractorLink>? {\r\n        val link = \"$mainUrl/api/source/${url.substringAfterLast(\"/\")}\"\r\n        val response = app.post(link).text.replace(\"\"\"\\\"\"\",\"\")\r\n        val jsonvideodata = parseJson<TantifilmJsonData>(response)\r\n        return jsonvideodata.data.map {\r\n            ExtractorLink(\r\n                this.name,\r\n                this.name,\r\n                it.file+\".${it.type}\",\r\n                mainUrl,\r", "choices": [{"text": "//                it.file,\r\n                it.file,\r\n                it.file,\r\n                it.file,\r\n                it.file,\r\n                it.file,\r\n                it.file,\r\n                it.file,\r\n                it.file,\r\n                it.file,\r\n                it.file,\r\n                it.file,\r\n                it.file,\r\n                it.file,\r\n                it.file,\r\n                it.file,\r\n                it.file,\r\n                it.file,\r\n                it.file,\r\n                it.file,\r\n                it.file,\r\n                it.file,\r\n                it.file,\r\n                it.file,\r\n                it.file,\r\n               "}], "metadata": {"task_id": "cloudstream/45", "ground_truth": "                it.label.filter{ it.isDigit() }.toInt(),\r\n                false\r\n            )\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\Tantifilm.kt"}}
{"prompt": "\n private fun splitInput(input: String): List<String> {\r\n        var counter = 0\r\n        val array = ArrayList<String>()\r\n        var buffer = \"\"\r\n        for (c in input) {\r\n            when (c) {\r\n                '(' -> counter++\r\n                ')' -> counter--\r\n                else -> {}\r\n            }\r\n            buffer += c\r\n            if (counter == 0) {\r\n                if (buffer.isNotBlank() && buffer != \"+\")\r\n                    array.add(buffer)\r", "choices": [{"text": "\n private fun splitInput(input: String): List<String> {\r\n        var counter = 0\r\n        val array = ArrayList<String>()\r\n        var buffer = \"\"\r\n        for (c in input) {\r\n            when (c) {\r\n                '(' -> counter++\r\n                ')' -> counter--\r\n                else -> {}\r\n            }\r\n            buffer += c\r\n            if (counter == 0) {\r\n                if (buffer.isNotBlank() && buffer!= \"+\")\r\n                    array.add(buffer)\r\n//                println(buffer)\r\n                buffer = \"\"\r\n            }\r\n        }\r\n        return array\r\n    }\r\n}<file_sep>/src/main/kotlin/com/example/demo/service/CalculatorService.kt\npackage com.example.demo.service\r\n\r\nimport com.example.demo.model.Calculator\r\nimport com.example.demo.model.CalculatorResult\r\nimport com.example.demo.model.CalculatorType\r\nimport com.example.demo.model.CalculatorType.*\r\nimport com.example.demo.model.CalculatorType.Companion.getCalculatorType\r\nimport com."}], "metadata": {"task_id": "cloudstream/46", "ground_truth": "                buffer = \"\"\r\n            }\r\n        }\r\n        return array\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\Userload.kt"}}
{"prompt": "\n import org.mozilla.javascript.Scriptable\nimport org.mozilla.javascript.Context\nprivate fun evaluateMath(mathExpression : String): String {\r\n        val rhino = Context.enter()\r\n        rhino.initStandardObjects()\r\n        rhino.optimizationLevel = -1\r\n        val scope: Scriptable = rhino.initStandardObjects()\r\n        return try {\r\n            rhino.evaluateString(scope, \"eval($mathExpression)\", \"JavaScript\", 1, null).toString()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/47", "ground_truth": "        }\r\n        catch (e: EvaluatorException){\r\n            \"\"\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\Userload.kt"}}
{"prompt": "\n import java.math.BigInteger\nprivate fun tearDecode(a90: List<BigInteger>, a91: List<BigInteger>): MutableList<BigInteger> {\r\n            var (a95, a96) = a90\r\n\r\n            var a97 = (-957401312).toBigInteger()\r\n            for (_i in 0 until 32) {\r\n                a96 -= ((((a95 shl 4) xor rShift(a95, 5)) + a95) xor (a97 + a91[rShift(a97, 11).and(3.toBigInteger()).toInt()]))\r\n                a97 += 1640531527.toBigInteger()\r\n                a95 -= ((((a96 shl 4) xor rShift(a96, 5)) + a96) xor (a97 + a91[a97.and(3.toBigInteger()).toInt()]))\r", "choices": [{"text": "//                println(\"a95: $a95, a96: $a96, a97: $a97\")\r\n            }\r\n            return a96.toMutableList()\r\n        }\n"}], "metadata": {"task_id": "cloudstream/49", "ground_truth": "\r\n            }\r\n\r\n            return mutableListOf(a95, a96)\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\VideoVard.kt"}}
{"prompt": "\n import java.math.BigInteger\nprivate fun digestPad(string: String): List<BigInteger> {\r\n            val empList = mutableListOf<BigInteger>()\r\n            val length = string.length\r\n            val extra = big15 - (length.toBigInteger() % big16)\r\n            empList.add(extra)\r\n            for (i in 0 until length) {\r\n                empList.add(string[i].code.toBigInteger())\r\n            }\r\n            for (i in 0 until extra.toInt()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/50", "ground_truth": "                empList.add(big0)\r\n            }\r\n\r\n            return empList\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\VideoVard.kt"}}
{"prompt": "\n import java.math.BigInteger\nprivate fun unPad(a46: List<BigInteger>): List<BigInteger> {\r\n            val evenOdd = a46[0].toInt().mod(2)\r\n            return (1 until (a46.size - evenOdd)).map {\r", "choices": [{"text": "a46[it]\r\n            }\r\n        }\n"}], "metadata": {"task_id": "cloudstream/52", "ground_truth": "                a46[it]\r\n            }\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\VideoVard.kt"}}
{"prompt": "\nvar mainUrl\nvar name\nval big0\n private fun padLastChars(input:String):String{\r", "choices": [{"text": "var result = input\r\nif(result.length > 10){\r\nresult = result.substring(0,10)\r\n}\r\nreturn result\r\n}\r\nprivate fun padFirstChars(input:String):String{\r\nvar result = input\r\nif(result.length > 10){\r\nresult = result.substring(result.length-10,result.length)\r\n}\r\nreturn result\r\n}\r\nprivate fun padChars(input:String):String{\r\nvar result = input\r\nif(result.length >"}], "metadata": {"task_id": "cloudstream/55", "ground_truth": "            return if(input.reversed()[3].isDigit()) input\r\n            else input.dropLast(4)\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\VideoVard.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.M3u8Helper\nimport com.lagradost.cloudstream3.utils.ExtractorLink\nimport com.lagradost.cloudstream3.app\nimport com.lagradost.cloudstream3.SubtitleFile\noverride suspend fun getUrl(\r\n        url: String,\r\n        referer: String?,\r\n        subtitleCallback: (SubtitleFile) -> Unit,\r\n        callback: (ExtractorLink) -> Unit\r\n    ) {\r\n        val res = app.get(url, referer = referer).document\r\n        val script = res.select(\"script\").find { it.data().contains(\"sources =\") }?.data()\r\n        val link = Regex(\"[\\\"']hls[\\\"']:\\\\s*[\\\"'](.*)[\\\"']\").find(script ?: return)?.groupValues?.get(1)\r\n\r\n        M3u8Helper.generateM3u8(\r\n            name,\r\n            link ?: return,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/59", "ground_truth": "            \"$mainUrl/\",\r\n            headers = mapOf(\"Origin\" to \"$mainUrl/\")\r\n        ).forEach(callback)\r\n\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\Voe.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.ExtractorLink\nimport com.lagradost.cloudstream3.network.WebViewResolver\nimport com.lagradost.cloudstream3.app\noverride suspend fun getUrl(url: String, referer: String?): List<ExtractorLink> {\r\n        val response = app.get(\r\n            url, interceptor = WebViewResolver(\r\n                Regex(\"\"\"master\\.m3u8\"\"\")\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/60", "ground_truth": "            )\r\n        )\r\n\r\n        return generateM3u8(name, response.url, url, headers = response.headers.toMap())\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\WatchSB.kt"}}
{"prompt": "\n private fun dashify(id: String, dashTable: String): String {\r\n            val table = dashTable.split(\" \")\r\n            return id.mapIndexedNotNull { i, c ->\r", "choices": [{"text": "if (i < table.size) table[i].find { c == it } else null\r\n}.joinToString(\"\")\r\n        }\r\n"}], "metadata": {"task_id": "cloudstream/62", "ground_truth": "                table.getOrNull((baseTable.indexOf(c) * 16) + (i % 16))\r\n            }.joinToString(\"-\")\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\WcoStream.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.ExtractorLink\nimport com.lagradost.cloudstream3.app\nimport com.lagradost.cloudstream3.SubtitleFile\noverride suspend fun getUrl(\r\n        url: String,\r\n        referer: String?,\r\n        subtitleCallback: (SubtitleFile) -> Unit,\r\n        callback: (ExtractorLink) -> Unit\r\n    ) {\r\n        val res = app.get(url).text\r\n        val video = Regex(\"src: ['\\\"](.*?)['\\\"]\").find(res)?.groupValues?.get(1)\r\n\r\n        callback.invoke(\r\n            ExtractorLink(\r\n                name,\r\n                name,\r\n                video ?: return,\r\n                \"$mainUrl/\",\r", "choices": [{"text": "\n import com.lagradost.cloudstream3.utils.ExtractorLink\nimport com.lagradost.cloudstream3.app\nimport com.lagradost.cloudstream3.SubtitleFile\noverride suspend fun getUrl(\r\n        url: String,\r\n        referer: String?,\r\n        subtitleCallback: (SubtitleFile) -> Unit,\r\n        callback: (ExtractorLink) -> Unit\r\n    ) {\r\n        val res = app.get(url).text\r\n        val video = Regex(\"src: ['\\\"](.*?)['\\\"]\").find(res)?.groupValues?.get(1)\r\n\r\n        callback.invoke(\r\n            ExtractorLink(\r\n                name,\r\n                name,\r\n                video?: return,\r\n                \"$mainUrl/\",\r\n//                \"https://www.youtube.com/watch?v=${video?.substring(32)}\",\r\n                referer\r\n            )\r\n        )\r\n    }\r\n}<file_sep>/app/src/main/java/com/lagradost/cloudstream3/utils/ExtractorLink.kt\npackage com.lagradost.cloudstream3.utils\r\n\r\ndata class ExtractorLink(\r\n    val name: String,\r\n    val title: String,\r\n    val url: String,\r\n    val referer: String,\r\n    val thumbnail: String? = null\r\n)<file_sep>/app/src/main/java"}], "metadata": {"task_id": "cloudstream/63", "ground_truth": "                Qualities.Unknown.value,\r\n                type = INFER_TYPE\r\n            )\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\extractors\\Wibufile.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.DataStore.setKey\nimport com.lagradost.cloudstream3.AcraApplication.Companion.setKey\nimport com.lagradost.cloudstream3.AcraApplication.Companion.removeKey\nimport android.content.Intent\nsuspend fun launch(id: Int?, callback: suspend Intent.() -> Unit) {\r\n        val intent = Intent(action)\r\n\r\n        if (id != null)\r\n            setKey(lastId, id)\r\n        else\r\n            removeKey(lastId)\r", "choices": [{"text": "\n import com.lagradost.cloudstream3.utils.DataStore.setKey\nimport com.lagradost.cloudstream3.AcraApplication.Companion.setKey\nimport com.lagradost.cloudstream3.AcraApplication.Companion.removeKey\nimport android.content.Intent\nsuspend fun launch(id: Int?, callback: suspend Intent.() -> Unit) {\r\n        val intent = Intent(action)\r\n\r\n        if (id!= null)\r\n            setKey(lastId, id)\r\n        else\r\n            removeKey(lastId)\r\n//        intent.putExtra(lastId, id)\r\n        callback(intent)\r\n        context.startActivity(intent)\r\n    }\n"}], "metadata": {"task_id": "cloudstream/65", "ground_truth": "\r\n        intent.setPackage(packageString)\r\n        callback.invoke(intent)\r\n        launcher?.launch(intent)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainActivity.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.Event\nimport com.lagradost.cloudstream3.utils.AppUtils.isCastApiAvailable\nimport com.lagradost.cloudstream3.CommonActivity.setActivityInstance\nimport com.google.android.gms.cast.framework.SessionManagerListener\nimport com.google.android.gms.cast.framework.SessionManager\nimport com.google.android.gms.cast.framework.Session\noverride fun onResume() {\r\n        super.onResume()\r\n        afterPluginsLoadedEvent += ::onAllPluginsLoaded\r\n        setActivityInstance(this)\r\n        try {\r\n            if (isCastApiAvailable()) {\r\n                //mCastSession = mSessionManager.currentCastSession\r\n                mSessionManager.addSessionManagerListener(mSessionManagerListener)\r", "choices": [{"text": "//                mCastSession?.let {\r\n//                    mCastSession?.addCastStateListener(mCastStateListener)\r\n//                }\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        try {\r\n            if (isCastApiAvailable()) {\r\n                mSessionManager.removeSessionManagerListener(mSessionManagerListener)\r\n//                mCastSession?.let {\r\n//                    mCastSession?.removeCastStateListener(mCastStateListener)\r\n//                }\r\n            }\r\n       "}], "metadata": {"task_id": "cloudstream/67", "ground_truth": "            }\r\n        } catch (e: Exception) {\r\n            logError(e)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainActivity.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.AppUtils.isCastApiAvailable\nimport com.lagradost.cloudstream3.utils.ApkInstaller\nimport com.google.android.gms.cast.framework.SessionManagerListener\nimport com.google.android.gms.cast.framework.SessionManager\nimport com.google.android.gms.cast.framework.Session\nimport android.widget.Toast\noverride fun onPause() {\r\n        super.onPause()\r\n\r\n        // Start any delayed updates\r\n        if (ApkInstaller.delayedInstaller?.startInstallation() == true) {\r\n            Toast.makeText(this, R.string.update_started, Toast.LENGTH_LONG).show()\r\n        }\r\n        try {\r\n            if (isCastApiAvailable()) {\r\n                mSessionManager.removeSessionManagerListener(mSessionManagerListener)\r\n                //mCastSession = null\r", "choices": [{"text": "//                mCastContext.sessionManager.removeSessionManagerListener(mSessionManagerListener)\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/68", "ground_truth": "            }\r\n        } catch (e: Exception) {\r\n            logError(e)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainActivity.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.Event\nimport android.view.KeyEvent\noverride fun dispatchKeyEvent(event: KeyEvent?): Boolean {\r\n        val response = CommonActivity.dispatchKeyEvent(this, event)\r\n        if (response != null)\r", "choices": [{"text": "\n import com.lagradost.cloudstream3.utils.Event\nimport android.view.KeyEvent\noverride fun dispatchKeyEvent(event: KeyEvent?): Boolean {\r\n        val response = CommonActivity.dispatchKeyEvent(this, event)\r\n        if (response!= null)\r\nreturn response\r\n        return super.dispatchKeyEvent(event)\r\n    }\n"}], "metadata": {"task_id": "cloudstream/69", "ground_truth": "            return response\r\n        return super.dispatchKeyEvent(event)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainActivity.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.Event\nimport android.view.KeyEvent\noverride fun onKeyDown(keyCode: Int, event: KeyEvent?): Boolean {\r\n        CommonActivity.onKeyDown(this, keyCode, event)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/70", "ground_truth": "\r\n        return super.onKeyDown(keyCode, event)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainActivity.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.CommonActivity.onUserLeaveHint\noverride fun onUserLeaveHint() {\r", "choices": [{"text": "super.onUserLeaveHint()\r\nif (isFinishing) {\r\nreturn\r\n}\r\nif (isPaused) {\r\nreturn\r\n}\r\nif (isDestroyed) {\r\nreturn\r\n}\r\nif (isChangingConfigurations) {\r\nreturn\r\n}\r\nif (isFinishing) {\r\nreturn\r\n}\r\nif (isDestroyed) {\r\nreturn\r\n}\r\nif (isChangingConfigurations) {\r\nreturn\r\n}\r\nif (isFinishing) {\r\nreturn\r\n}\r\nif"}], "metadata": {"task_id": "cloudstream/71", "ground_truth": "        super.onUserLeaveHint()\r\n        onUserLeaveHint(this)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainActivity.kt"}}
{"prompt": "\n import android.content.Intent\noverride fun onNewIntent(intent: Intent?) {\r", "choices": [{"text": "super.onNewIntent(intent)\r\nsetIntent(intent)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/74", "ground_truth": "        handleAppIntent(intent)\r\n        super.onNewIntent(intent)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainActivity.kt"}}
{"prompt": "\n import android.content.Intent\nprivate fun handleAppIntent(intent: Intent?) {\r\n        if (intent == null) return\r\n        val str = intent.dataString\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/75", "ground_truth": "        loadCache()\r\n        handleAppIntentUrl(this, str, false)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainActivity.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.UIHelper.dismissSafe\nprivate fun hidePreviewPopupDialog() {\r\n        bottomPreviewPopup.dismissSafe(this)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/77", "ground_truth": "        bottomPreviewPopup = null\r\n        bottomPreviewBinding = null\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainActivity.kt"}}
{"prompt": "\n suspend fun checkGithubConnectivity(): Boolean {\r\n        return try {\r\n            app.get(\r\n                \"https://raw.githubusercontent.com/recloudstream/.github/master/connectivitycheck\",\r\n                timeout = 5\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/80", "ground_truth": "            ).text.trim() == \"ok\"\r\n        } catch (t: Throwable) {\r\n            false\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainActivity.kt"}}
{"prompt": "\n fun initAll() {\r\n        synchronized(allProviders) {\r\n            for (api in allProviders) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/81", "ground_truth": "                api.init()\r\n            }\r\n        }\r\n        apiMap = null\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\nvar sourcePlugin String?\nvar apis List<MainAPI>\nvar apiMap Map<String, Int>?\n fun addPluginMapping(plugin: MainAPI) {\r\n        synchronized(apis) {\r\n            apis = apis + plugin\r", "choices": [{"text": "//            apiMap = apiMap + (plugin.name to apis.size - 1)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/82", "ground_truth": "        }\r\n        initMap(true)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n fun removePluginMapping(plugin: MainAPI) {\r\n        synchronized(apis) {\r\n            apis = apis.filter { it != plugin }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/83", "ground_truth": "        }\r\n        initMap(true)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n private fun initMap(forcedUpdate: Boolean = false) {\r\n        synchronized(apis) {\r\n            if (apiMap == null || forcedUpdate)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/84", "ground_truth": "                apiMap = apis.mapIndexed { index, api -> api.name to index }.toMap()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n fun getApiFromUrlNull(url: String?): MainAPI? {\r\n        if (url == null) return null\r\n        synchronized(allProviders) {\r\n            allProviders.forEach { api ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/86", "ground_truth": "                if (url.startsWith(api.mainUrl)) return api\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n private fun getLoadResponseIdFromUrl(url: String, apiName: String): Int {\r", "choices": [{"text": "-    val responseId = url.substringAfterLast(apiName).substringBeforeLast(\".json\")\r\n-    return try {\r\n-        responseId.toInt()\r\n-    } catch (e: NumberFormatException) {\r\n-        throw IllegalArgumentException(\"Invalid response id: $responseId\")\r\n+    val responseId = url.substringAfterLast(apiName).substringBeforeLast(\".json\")\r\n+    return try {\r\n+        responseId.toInt()\r\n+    } catch (e: NumberFormatException) {\r\n+        throw IllegalArgumentException(\"Invalid response id"}], "metadata": {"task_id": "cloudstream/87", "ground_truth": "        return url.replace(getApiFromNameNull(apiName)?.mainUrl ?: \"\", \"\").replace(\"/\", \"\")\r\n            .hashCode()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n import androidx.preference.PreferenceManager\nimport android.content.Context\nfun Context.getApiProviderLangSettings(): HashSet<String> {\r\n        val settingsManager = PreferenceManager.getDefaultSharedPreferences(this)\r\n        val hashSet = hashSetOf(AllLanguagesName) // def is all languages\r\n//        hashSet.add(\"en\") // def is only en\r\n        val list = settingsManager.getStringSet(\r\n            this.getString(R.string.provider_lang_key),\r\n            hashSet\r", "choices": [{"text": "//            hashSetOf(\"en\")\r\n        )\r\n        return list\r\n    }\n"}], "metadata": {"task_id": "cloudstream/88", "ground_truth": "        )\r\n\r\n        if (list.isNullOrEmpty()) return hashSet\r\n        return list.toHashSet()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\nval mainPage\nval hasMainPage\nvar sequentialMainPage Boolean\n fun newHomePageResponse(\r\n    name: String,\r\n    list: List<SearchResponse>,\r\n    hasNext: Boolean? = null,\r\n): HomePageResponse {\r\n    return HomePageResponse(\r\n        listOf(HomePageList(name, list)),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/90", "ground_truth": "        hasNext = hasNext ?: list.isNotEmpty()\r\n    )\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n fun newHomePageResponse(\r\n    data: MainPageRequest,\r\n    list: List<SearchResponse>,\r\n    hasNext: Boolean? = null,\r\n): HomePageResponse {\r\n    return HomePageResponse(\r\n        listOf(HomePageList(data.name, list, data.horizontalImages)),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/91", "ground_truth": "        hasNext = hasNext ?: list.isNotEmpty()\r\n    )\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n fun init() {\r\n        overrideData?.get(this.javaClass.simpleName)?.let { data ->\r", "choices": [{"text": "//            data.forEach {\r\n//                Log.d(\"init\", it.toString())\r\n//            }\r\n            data.forEach {\r\n                Log.d(\"init\", it.toString())\r\n            }\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "cloudstream/92", "ground_truth": "            overrideWithNewData(data)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n fun MainAPI.fixUrlNull(url: String?): String? {\r\n    if (url.isNullOrEmpty()) {\r\n        return null\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/96", "ground_truth": "    }\r\n    return fixUrl(url)\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n fun MainAPI.fixUrl(url: String): String {\r\n    if (url.startsWith(\"http\") ||\r\n        // Do not fix JSON objects when passed as urls.\r\n        url.startsWith(\"{\\\"\")\r\n    ) {\r\n        return url\r\n    }\r\n    if (url.isEmpty()) {\r\n        return \"\"\r\n    }\r\n\r\n    val startsWithNoHttp = url.startsWith(\"//\")\r\n    if (startsWithNoHttp) {\r\n        return \"https:$url\"\r\n    } else {\r\n        if (url.startsWith('/')) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/97", "ground_truth": "            return mainUrl + url\r\n        }\r\n        return \"$mainUrl/$url\"\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n fun fixTitle(str: String): String {\r\n    return str.split(\" \").joinToString(\" \") {\r\n        it.lowercase()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/99", "ground_truth": "            .replaceFirstChar { char -> if (char.isLowerCase()) char.titlecase(Locale.getDefault()) else it }\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.Coroutines.mainWork\nimport android.content.Context\nsuspend fun getRhinoContext(): org.mozilla.javascript.Context {\r\n    return Coroutines.mainWork {\r\n        val rhino = org.mozilla.javascript.Context.enter()\r", "choices": [{"text": "//        rhino.setOptimizationLevel(9)\r\n        rhino.setOptimizationLevel(0)\r\n        rhino.setLanguageVersion(1.8)\r\n        rhino.setClassShutter(ClassShutter())\r\n        rhino.setSecurityController(RhinoSecurityController())\r\n        rhino.setThread(Thread.currentThread())\r\n        rhino.setThreadLocalLoader(RhinoThreadLocalLoader())\r\n        rhino.setThreadLocalScope(RhinoThreadLocalScope())\r\n        rhino.setThreadLocalCallStack(RhinoThreadLocalCallStack())\r\n        rhino.setThreadLocalCallFrame("}], "metadata": {"task_id": "cloudstream/100", "ground_truth": "        rhino.initSafeStandardObjects()\r\n        rhino.optimizationLevel = -1\r\n        rhino\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\nval mainPage\nval unixTimeMS Long\nval malIdPrefix\n fun imdbUrlToIdNullable(url: String?): String? {\r", "choices": [{"text": "val id = url?.substringAfterLast(\"/\")?.substringBeforeLast(\"?\")\r\nreturn if (id.isNullOrBlank()) null else id\r\n}\r\nfun imdbUrlToId(url: String): String {\r\nval id = url.substringAfterLast(\"/\").substringBeforeLast(\"?\")\r\nreturn if (id.isBlank()) \"\" else id\r\n}\r\nfun imdbIdToUrl(id: String): String {\r\nreturn \"https://www.imdb.com/title/$id/\"\r\n}\r\nfun imdbIdToUrlNullable(id: String?):"}], "metadata": {"task_id": "cloudstream/102", "ground_truth": "    if (url == null) return null\r\n    return imdbUrlToId(url)\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n fun MainAPI.newMovieSearchResponse(\r\n    name: String,\r\n    url: String,\r\n    type: TvType = TvType.Movie,\r\n    fix: Boolean = true,\r\n    initializer: MovieSearchResponse.() -> Unit = { },\r\n): MovieSearchResponse {\r\n    val builder = MovieSearchResponse(name, if (fix) fixUrl(url) else url, this.name, type)\r\n    builder.initializer()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/103", "ground_truth": "\r\n    return builder\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n fun MainAPI.newTvSeriesSearchResponse(\r\n    name: String,\r\n    url: String,\r\n    type: TvType = TvType.TvSeries,\r\n    fix: Boolean = true,\r\n    initializer: TvSeriesSearchResponse.() -> Unit = { },\r\n): TvSeriesSearchResponse {\r\n    val builder = TvSeriesSearchResponse(name, if (fix) fixUrl(url) else url, this.name, type)\r\n    builder.initializer()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/104", "ground_truth": "\r\n    return builder\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n fun MainAPI.newAnimeSearchResponse(\r\n    name: String,\r\n    url: String,\r\n    type: TvType = TvType.Anime,\r\n    fix: Boolean = true,\r\n    initializer: AnimeSearchResponse.() -> Unit = { },\r\n): AnimeSearchResponse {\r\n    val builder = AnimeSearchResponse(name, if (fix) fixUrl(url) else url, this.name, type)\r\n    builder.initializer()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/105", "ground_truth": "\r\n    return builder\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n fun SearchResponse.addPoster(url: String?, headers: Map<String, String>? = null) {\r", "choices": [{"text": "-    val poster = url?.let {\r\n-        val request = Request.Builder()\r\n-           .url(it)\r\n-           .headers(headers?: emptyMap())\r\n-           .build()\r\n-        client.newCall(request).execute().body()?.string()\r\n-    }\r\n-    poster?.let {\r\n-        val bitmap = BitmapFactory.decodeStream(ByteArrayInputStream(it.toByteArray()))\r\n-        val resized = Bitmap.createScaledBitmap(bitmap, 100, 100, false)\r\n"}], "metadata": {"task_id": "cloudstream/106", "ground_truth": "    this.posterUrl = url\r\n    this.posterHeaders = headers\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n fun LoadResponse.addPoster(url: String?, headers: Map<String, String>? = null) {\r", "choices": [{"text": "-    val poster = url?.let {\r\n-        val request = Request.Builder()\r\n-           .url(it)\r\n-           .headers(headers?: emptyMap())\r\n-           .build()\r\n-        client.newCall(request).execute().body()?.bytes()\r\n-    }\r\n-    if (poster!= null) {\r\n-        val bitmap = BitmapFactory.decodeByteArray(poster, 0, poster.size)\r\n-        val posterPath = File(context.filesDir, \"posters\")\r\n-        if"}], "metadata": {"task_id": "cloudstream/107", "ground_truth": "    this.posterUrl = url\r\n    this.posterHeaders = headers\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n fun AnimeSearchResponse.addDubStatus(status: DubStatus, episodes: Int? = null) {\r\n    this.dubStatus = dubStatus?.also { it.add(status) } ?: EnumSet.of(status)\r\n    if (this.type?.isMovieType() != true)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/108", "ground_truth": "        if (episodes != null && episodes > 0)\r\n            this.episodes[status] = episodes\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\nval defProvider\nvar apis List<MainAPI>\nvar apiMap Map<String, Int>?\n fun AnimeSearchResponse.addDub(episodes: Int?) {\r", "choices": [{"text": "val dub = Dub(\r\nid = id,\r\ntitle = title,\r\nepisodes = episodes,\r\nstatus = status,\r\ntype = type,\r\nsource = source,\r\nimage = image,\r\nsynopsis = synopsis,\r\nrating = rating,\r\nscore = score,\r\nduration = duration,\r\ngenres = genres,\r\npremiered = premiered,\r\nbroadcast = broadcast,\r\nrelated = related,\r\nproducers = producers,\r\nlicensors = licensors,\r\nstudios = stud"}], "metadata": {"task_id": "cloudstream/109", "ground_truth": "    if (episodes == null || episodes <= 0) return\r\n    addDubStatus(DubStatus.Dubbed, episodes)\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\nval defProvider\nvar apis List<MainAPI>\nvar trackerCache HashMap<String, AniSearch>\n fun AnimeSearchResponse.addSub(episodes: Int?) {\r", "choices": [{"text": "val anime = Anime(\r\nid = id,\r\ntitle = title,\r\ntitle_english = title_english,\r\ntitle_romaji = title_romaji,\r\ntitle_native = title_native,\r\nimage_url = image_url,\r\nsynopsis = synopsis,\r\nepisodes = episodes,\r\nstatus = status,\r\ntype = type,\r\nsource = source,\r\nscore = score,\r\nstart_date = start_date,\r\nend_date = end_date,\r\nmembers = members,\r"}], "metadata": {"task_id": "cloudstream/110", "ground_truth": "    if (episodes == null || episodes <= 0) return\r\n    addDubStatus(DubStatus.Subbed, episodes)\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n fun LoadResponse.addImdbId(id: String?) {\r", "choices": [{"text": "+    if (id!= null) {\r\n+        this.imdbId = id\r\n+    }\r\n+}\r\n+\r\n+fun LoadResponse.addImdbId(id: String?) {\r\n     if (id!= null) {\r\n         this.imdbId = id\r\n     }\r\n }\r\n"}], "metadata": {"task_id": "cloudstream/118", "ground_truth": "            // TODO add imdb sync\r\n            this.addSimklId(SimklApi.Companion.SyncServices.Imdb, id)\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n fun LoadResponse.addTMDbId(id: String?) {\r", "choices": [{"text": "+    if (id!= null) {\r\n+        tmdbId = id\r\n+    }\r\n+}\r\n+\r\n+fun LoadResponse.addTMDbId(id: Int?) {\r\n+    if (id!= null) {\r\n+        tmdbId = id.toString()\r\n+    }\r\n+}\r\n+\r\n+fun LoadResponse.addTMDbId(id: Long?) {\r\n+    if (id!= null) {\r\n+        tmdbId = id.toString()\r\n+"}], "metadata": {"task_id": "cloudstream/119", "ground_truth": "            // TODO add TMDb sync\r\n            this.addSimklId(SimklApi.Companion.SyncServices.Tmdb, id)\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n fun LoadResponse.addRating(value: Int?) {\r\n            if ((value ?: return) < 0 || value > 10000) {\r\n                return\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/120", "ground_truth": "            }\r\n            this.rating = value\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n fun LoadResponse?.isEpisodeBased(): Boolean {\r", "choices": [{"text": "-    return this?.data?.isEpisodeBased()?: false\r\n+    return this?.data?.isEpisodeBased()?: false // TODO: Remove this when we have a better way to handle nullability\r\n }\r\n \r\n fun LoadResponse?.isMovieBased(): Boolean {\r\n-    return this?.data?.isMovieBased()?: false\r\n+    return this?.data?.isMovieBased()?: false // TODO: Remove this when we have a better way to handle nullability\r\n }\r\n \r\n fun LoadResponse?.isTvBased(): Boolean {\r\n-    return this?.data?.isTv"}], "metadata": {"task_id": "cloudstream/121", "ground_truth": "    if (this == null) return false\r\n    return this is EpisodeResponse && this.type.isEpisodeBased()\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\nvar seasonNames List<SeasonData>?\nval supportedSyncNames\nval defProvider\n \r\n@JvmName(\"addSeasonNamesString\")\r\nfun EpisodeResponse.addSeasonNames(names: List<String>) {\r\n    this.seasonNames = if (names.isEmpty()) null else names.mapIndexed { index, s ->\r\n        SeasonData(\r", "choices": [{"text": "//            index + 1,\r\n            s,\r\n            null\r\n        )\r\n    }\r\n}\r\n\r\n@JvmName(\"addSeasonNames\")\r\nfun EpisodeResponse.addSeasonNames(names: List<SeasonData>) {\r\n    this.seasonNames = if (names.isEmpty()) null else names\r\n}\r\n\r\n@JvmName(\"addSeasonNames\")\r\nfun EpisodeResponse.addSeasonNames(names: List<Int>) {\r\n    this.seasonNames = if (names.isEmpty()) null else names.mapIndexed { index, s ->\r\n        SeasonData(\r\n//            index"}], "metadata": {"task_id": "cloudstream/124", "ground_truth": "            season = index + 1,\r\n            s\r\n        )\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n override fun getTotalEpisodeIndex(episode: Int, season: Int): Int {\r\n        return this.episodes.maxOf { (_, episodes) ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/126", "ground_truth": "            episodes.count { ((it.season ?: Int.MIN_VALUE) < season) && it.season != 0 }\r\n        } + episode\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n fun AnimeLoadResponse.addEpisodes(status: DubStatus, episodes: List<Episode>?) {\r", "choices": [{"text": "-    if (episodes == null) return\r\n+    if (episodes == null) return null\r\n     val anime = anime.copy(status = status)\r\n     val episodesList = episodes.map { it.copy(anime = anime) }\r\n     anime.episodes = anime.episodes.plus(episodesList)\r\n }\r\n"}], "metadata": {"task_id": "cloudstream/127", "ground_truth": "    if (episodes.isNullOrEmpty()) return\r\n    this.episodes[status] = (this.episodes[status] ?: emptyList()) + episodes\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n suspend fun MainAPI.newAnimeLoadResponse(\r\n    name: String,\r\n    url: String,\r\n    type: TvType,\r\n    comingSoonIfNone: Boolean = true,\r\n    initializer: suspend AnimeLoadResponse.() -> Unit = { },\r\n): AnimeLoadResponse {\r\n    val builder = AnimeLoadResponse(name = name, url = url, apiName = this.name, type = type)\r\n    builder.initializer()\r\n    if (comingSoonIfNone) {\r\n        builder.comingSoon = true\r\n        for (key in builder.episodes.keys)\r\n            if (!builder.episodes[key].isNullOrEmpty()) {\r\n                builder.comingSoon = false\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/128", "ground_truth": "                break\r\n            }\r\n    }\r\n    return builder\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.AppUtils.toJson\nsuspend fun <T> MainAPI.newMovieLoadResponse(\r\n    name: String,\r\n    url: String,\r\n    type: TvType,\r\n    data: T?,\r\n    initializer: suspend MovieLoadResponse.() -> Unit = { }\r\n): MovieLoadResponse {\r\n    // just in case\r\n    if (data is String) return newMovieLoadResponse(\r\n        name,\r\n        url,\r\n        type,\r\n        dataUrl = data,\r\n        initializer = initializer\r\n    )\r\n    val dataUrl = data?.toJson() ?: \"\"\r\n    val builder = MovieLoadResponse(\r\n        name = name,\r\n        url = url,\r\n        apiName = this.name,\r\n        type = type,\r\n        dataUrl = dataUrl,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/129", "ground_truth": "        comingSoon = dataUrl.isBlank()\r\n    )\r\n    builder.initializer()\r\n    return builder\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n suspend fun MainAPI.newMovieLoadResponse(\r\n    name: String,\r\n    url: String,\r\n    type: TvType,\r\n    dataUrl: String,\r\n    initializer: suspend MovieLoadResponse.() -> Unit = { }\r\n): MovieLoadResponse {\r\n    val builder = MovieLoadResponse(\r\n        name = name,\r\n        url = url,\r\n        apiName = this.name,\r\n        type = type,\r\n        dataUrl = dataUrl,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/130", "ground_truth": "        comingSoon = dataUrl.isBlank()\r\n    )\r\n    builder.initializer()\r\n    return builder\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n fun MainAPI.newEpisode(\r\n    url: String,\r\n    initializer: Episode.() -> Unit = { },\r\n    fix: Boolean = true,\r\n): Episode {\r\n    val builder = Episode(\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/132", "ground_truth": "        data = if (fix) fixUrl(url) else url\r\n    )\r\n    builder.initializer()\r\n    return builder\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n override fun getTotalEpisodeIndex(episode: Int, season: Int): Int {\r\n        return episodes.count {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/135", "ground_truth": "            (it.season ?: Int.MIN_VALUE) < season && it.season != 0\r\n        } + episode\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n suspend fun MainAPI.newTvSeriesLoadResponse(\r\n    name: String,\r\n    url: String,\r\n    type: TvType,\r\n    episodes: List<Episode>,\r\n    initializer: suspend TvSeriesLoadResponse.() -> Unit = { }\r\n): TvSeriesLoadResponse {\r\n    val builder = TvSeriesLoadResponse(\r\n        name = name,\r\n        url = url,\r\n        apiName = this.name,\r\n        type = type,\r\n        episodes = episodes,\r", "choices": [{"text": "//        lastEpisode = episodes.last(),\r\n        lastEpisode = episodes.lastOrNull()?: Episode(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"}], "metadata": {"task_id": "cloudstream/136", "ground_truth": "        comingSoon = episodes.isEmpty(),\r\n    )\r\n    builder.initializer()\r\n    return builder\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\MainAPI.kt"}}
{"prompt": "\n private fun BaseTvShow.toSearchResponse(): TvSeriesSearchResponse {\r\n        return TvSeriesSearchResponse(\r\n            this.name ?: this.original_name,\r\n            getUrl(id, true),\r\n            apiName,\r\n            TvType.TvSeries,\r\n            getImageUrl(this.poster_path),\r\n            this.first_air_date?.let {\r\n                Calendar.getInstance().apply {\r\n                    time = it\r\n                }.get(Calendar.YEAR)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/141", "ground_truth": "            },\r\n            null,\r\n            this.id\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\metaproviders\\TmdbProvider.kt"}}
{"prompt": "\n private fun BaseMovie.toSearchResponse(): MovieSearchResponse {\r\n        return MovieSearchResponse(\r\n            this.title ?: this.original_title,\r\n            getUrl(id, false),\r\n            apiName,\r\n            TvType.TvSeries,\r\n            getImageUrl(this.poster_path),\r\n            this.release_date?.let {\r\n                Calendar.getInstance().apply {\r\n                    time = it\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/142", "ground_truth": "                }.get(Calendar.YEAR)\r\n            },\r\n            this.id,\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\metaproviders\\TmdbProvider.kt"}}
{"prompt": "\n import com.uwetrottmann.tmdb2.enumerations.VideoType\nprivate fun Videos?.toTrailers(): List<String>? {\r\n        return this?.results?.filter { it.type != VideoType.OPENING_CREDITS && it.type != VideoType.FEATURETTE }\r\n            ?.sortedBy { it.type?.ordinal ?: 10000 }\r\n            ?.mapNotNull {\r\n                when (it.site?.trim()?.lowercase()) {\r\n                    \"youtube\" -> { // TODO FILL SITES\r\n                        \"https://www.youtube.com/watch?v=${it.key}\"\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/144", "ground_truth": "                    }\r\n                    else -> null\r\n                }\r\n            }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\metaproviders\\TmdbProvider.kt"}}
{"prompt": "\n import retrofit2.awaitResponse\noverride suspend fun search(query: String): List<SearchResponse>? {\r\n        return tmdb.searchService().multi(query, 1, \"en-Us\", \"US\", includeAdult).awaitResponse()\r\n            .body()?.results?.mapNotNull {\r", "choices": [{"text": "\n import retrofit2.awaitResponse\noverride suspend fun search(query: String): List<SearchResponse>? {\r\n        return tmdb.searchService().multi(query, 1, \"en-Us\", \"US\", includeAdult).awaitResponse()\r\n           .body()?.results?.mapNotNull {\r\n//                if (it.posterPath!= null) {\r\n                    SearchResponse(\r\n                        it.id,\r\n                        it.title,\r\n                        it.posterPath,\r\n                        it.overview,\r\n                        it.releaseDate,\r\n                        it.voteAverage,\r\n                        it.voteCount\r\n                    )\r\n//                }\r\n            }\r\n    }\r\n"}], "metadata": {"task_id": "cloudstream/145", "ground_truth": "                it.movie?.toSearchResponse() ?: it.tvShow?.toSearchResponse()\r\n            }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\metaproviders\\TmdbProvider.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.BuildConfig\ninline fun debugException(message: () -> String) {\r\n    if (BuildConfig.DEBUG) {\r", "choices": [{"text": "//        throw RuntimeException(message())\r\n    }\r\n}\n"}], "metadata": {"task_id": "cloudstream/146", "ground_truth": "        throw DebugException(message.invoke())\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.BuildConfig\ninline fun debugPrint(tag: String = DEBUG_PRINT, message: () -> String) {\r\n    if (BuildConfig.DEBUG) {\r", "choices": [{"text": "//        Log.d(tag, message())\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/147", "ground_truth": "        Log.d(tag, message.invoke())\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.BuildConfig\ninline fun debugWarning(message: () -> String) {\r\n    if (BuildConfig.DEBUG) {\r", "choices": [{"text": "//        Log.w(TAG, message())\r\n    }\r\n}\n"}], "metadata": {"task_id": "cloudstream/148", "ground_truth": "        logError(DebugException(message.invoke()))\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.BuildConfig\ninline fun debugAssert(assert: () -> Boolean, message: () -> String) {\r\n    if (BuildConfig.DEBUG && assert.invoke()) {\r", "choices": [{"text": ""}], "metadata": {"task_id": "cloudstream/149", "ground_truth": "        throw DebugException(message.invoke())\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.BuildConfig\ninline fun debugWarning(assert: () -> Boolean, message: () -> String) {\r\n    if (BuildConfig.DEBUG && assert.invoke()) {\r", "choices": [{"text": "//        Log.w(TAG, message.invoke())\r\n    }\r\n}\n"}], "metadata": {"task_id": "cloudstream/150", "ground_truth": "        logError(DebugException(message.invoke()))\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "\n fun <T> normalSafeApiCall(apiCall: () -> T): T? {\r\n    return try {\r\n        apiCall.invoke()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/152", "ground_truth": "    } catch (throwable: Throwable) {\r\n        logError(throwable)\r\n        return null\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "\n suspend fun <T> suspendSafeApiCall(apiCall: suspend () -> T): T? {\r\n    return try {\r\n        apiCall.invoke()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/153", "ground_truth": "    } catch (throwable: Throwable) {\r\n        logError(throwable)\r\n        return null\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "\n fun Throwable.getStackTracePretty(showMessage: Boolean = true): String {\r\n    val prefix = if (showMessage) this.localizedMessage?.let { \"\\n$it\" } ?: \"\" else \"\"\r\n    return prefix + this.stackTrace.joinToString(\r", "choices": [{"text": "\n fun Throwable.getStackTracePretty(showMessage: Boolean = true): String {\r\n    val prefix = if (showMessage) this.localizedMessage?.let { \"\\n$it\" }?: \"\" else \"\"\r\n    return prefix + this.stackTrace.joinToString(\r\n//        separator = \"\\n\",\r\n        prefix = \"\\n\",\r\n        postfix = \"\\n\"\r\n    ) {\r\n        it.toString()\r\n    }\r\n}\r\n\r\nfun Throwable.getStackTracePretty(showMessage: Boolean = true): String {\r\n    val prefix = if (showMessage) this.localizedMessage?.let { \"\\n$it\" }?: \"\" else \"\"\r\n    return prefix + this.stackTrace.joinToString(\r\n//        separator = \"\\n\",\r\n        prefix = \"\\n\",\r\n        postfix = \"\\n\"\r\n    ) {\r\n        it.toString()\r\n    }\r\n}\r\n\r\nfun Throwable.getStackTrace"}], "metadata": {"task_id": "cloudstream/154", "ground_truth": "        separator = \"\\n\"\r\n    ) {\r\n        \"${it.fileName} ${it.lineNumber}\"\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "\n fun <T> safeFail(throwable: Throwable): Resource<T> {\r", "choices": [{"text": "-    return Resource.error(throwable)\r\n+    return Resource.error(throwable, null)\r\n }\r\n \r\n fun <T> safeFail(throwable: Throwable, data: T): Resource<T> {\r\n-    return Resource.error(throwable)\r\n+    return Resource.error(throwable, data)\r\n }\r\n \r\n fun <T> safeFail(throwable: Throwable, message: String): Resource<T> {\r\n-    return Resource.error(throwable)\r\n+    return Resource.error(throwable, message)\r\n }\r\n \r\n fun <T> safe"}], "metadata": {"task_id": "cloudstream/155", "ground_truth": "    val stackTraceMsg = throwable.getStackTracePretty()\r\n    return Resource.Failure(false, null, null, stackTraceMsg)\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "\n import kotlin.coroutines.EmptyCoroutineContext\nimport kotlin.coroutines.CoroutineContext\nfun CoroutineScope.launchSafe(\r\n    context: CoroutineContext = EmptyCoroutineContext,\r\n    start: CoroutineStart = CoroutineStart.DEFAULT,\r\n    block: suspend CoroutineScope.() -> Unit\r\n): Job {\r\n    val obj: suspend CoroutineScope.() -> Unit = {\r\n        try {\r\n            block()\r\n        } catch (throwable: Throwable) {\r\n            logError(throwable)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/156", "ground_truth": "        }\r\n    }\r\n\r\n    return this.launch(context, start, obj)\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "\n suspend fun <T> safeApiCall(\r\n    apiCall: suspend () -> T,\r\n): Resource<T> {\r\n    return withContext(Dispatchers.IO) {\r\n        try {\r\n            Resource.Success(apiCall.invoke())\r\n        } catch (throwable: Throwable) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/157", "ground_truth": "            logError(throwable)\r\n            throwAbleToResource(throwable)\r\n        }\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\mvvm\\ArchComponentExt.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.mvvm.normalSafeApiCall\nprivate fun getWebViewCookie(url: String): String? {\r\n        return normalSafeApiCall {\r", "choices": [{"text": "//            val cookieManager = CookieManager.getInstance()\r\n//            val cookie = cookieManager.getCookie(url)\r\n//            return cookie\r\n            val cookieManager = CookieManager.getInstance()\r\n            val cookie = cookieManager.getCookie(url)\r\n            return cookie\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/160", "ground_truth": "            CookieManager.getInstance()?.getCookie(url)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\network\\CloudflareKiller.kt"}}
{"prompt": "\n import com.lagradost.nicehttp.cookies\nimport com.lagradost.cloudstream3.app\nprivate suspend fun proceed(request: Request, cookies: Map<String, String>): Response {\r\n        val userAgentMap = WebViewResolver.getWebViewUserAgent()?.let {\r\n            mapOf(\"user-agent\" to it)\r\n        } ?: emptyMap()\r\n\r\n        val headers =\r\n            getHeaders(request.headers.toMap() + userAgentMap, cookies + request.cookies)\r\n        return app.baseClient.newCall(\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/162", "ground_truth": "            request.newBuilder()\r\n                .headers(headers)\r\n                .build()\r\n        ).await()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\network\\CloudflareKiller.kt"}}
{"prompt": "\n import okhttp3.dnsoverhttps.DnsOverHttps\nimport okhttp3.OkHttpClient\nimport okhttp3.HttpUrl.Companion.toHttpUrl\nfun OkHttpClient.Builder.addGenericDns(url: String, ips: List<String>) = dns(\r\n    DnsOverHttps\r\n        .Builder()\r\n        .client(build())\r\n        .url(url.toHttpUrl())\r", "choices": [{"text": "\n import okhttp3.dnsoverhttps.DnsOverHttps\nimport okhttp3.OkHttpClient\nimport okhttp3.HttpUrl.Companion.toHttpUrl\nfun OkHttpClient.Builder.addGenericDns(url: String, ips: List<String>) = dns(\r\n    DnsOverHttps\r\n       .Builder()\r\n       .client(build())\r\n       .url(url.toHttpUrl())\r\n)\r\n"}], "metadata": {"task_id": "cloudstream/164", "ground_truth": "        .bootstrapDnsHosts(\r\n            ips.map { InetAddress.getByName(it) }\r\n        )\r\n        .build()\r\n)", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\network\\DohProviders.kt"}}
{"prompt": "\n import okhttp3.OkHttpClient\nfun OkHttpClient.Builder.addGoogleDns() = (\r\n        addGenericDns(\r\n            \"https://dns.google/dns-query\",\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/165", "ground_truth": "            listOf(\r\n                \"8.8.4.4\",\r\n                \"8.8.8.8\"\r\n            )\r\n        ))", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\network\\DohProviders.kt"}}
{"prompt": "\n import okhttp3.OkHttpClient\nfun OkHttpClient.Builder.addDNSWatchDns() = (\r\n    addGenericDns(\r\n        \"https://resolver2.dns.watch/dns-query\",\r\n        // https://dns.watch/\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/168", "ground_truth": "        listOf(\r\n            \"84.200.69.80\",\r\n            \"84.200.70.40\",\r\n        )\r\n    ))", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\network\\DohProviders.kt"}}
{"prompt": "\n import okhttp3.OkHttpClient\nfun OkHttpClient.Builder.addQuad9Dns() = (\r\n    addGenericDns(\r\n        \"https://dns.quad9.net/dns-query\",\r\n        // https://www.quad9.net/service/service-addresses-and-features\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/169", "ground_truth": "        listOf(\r\n            \"9.9.9.9\",\r\n            \"149.112.112.112\",\r\n        )\r\n    ))", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\network\\DohProviders.kt"}}
{"prompt": "\n import kotlinx.coroutines.runBlocking\nimport com.lagradost.cloudstream3.utils.Coroutines.mainWork\nimport com.lagradost.cloudstream3.utils.Coroutines.main\nimport com.lagradost.cloudstream3.AcraApplication.Companion.context\n @JvmName(\"getWebViewUserAgent1\")\r\n        fun getWebViewUserAgent(): String? {\r\n            return webViewUserAgent ?: context?.let { ctx ->\r\n                runBlocking {\r\n                    mainWork {\r\n                        WebView(ctx).settings.userAgentString.also { userAgent ->\r\n                            webViewUserAgent = userAgent\r", "choices": [{"text": "\n import kotlinx.coroutines.runBlocking\nimport com.lagradost.cloudstream3.utils.Coroutines.mainWork\nimport com.lagradost.cloudstream3.utils.Coroutines.main\nimport com.lagradost.cloudstream3.AcraApplication.Companion.context\n @JvmName(\"getWebViewUserAgent1\")\r\n        fun getWebViewUserAgent(): String? {\r\n            return webViewUserAgent?: context?.let { ctx ->\r\n                runBlocking {\r\n                    mainWork {\r\n                        WebView(ctx).settings.userAgentString.also { userAgent ->\r\n                            webViewUserAgent = userAgent\r\n//                            Log.d(\"getWebViewUserAgent\", \"userAgent: $userAgent\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\n"}], "metadata": {"task_id": "cloudstream/171", "ground_truth": "                        }\r\n                    }\r\n                }\r\n            }\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\network\\WebViewResolver.kt"}}
{"prompt": "\n import okhttp3.Request\nimport com.lagradost.nicehttp.requestCreator\nimport com.lagradost.cloudstream3.mvvm.normalSafeApiCall\nfun WebResourceRequest.toRequest(): Request? {\r\n    val webViewUrl = this.url.toString()\r\n\r\n    // If invalid url then it can crash with\r\n    // java.lang.IllegalArgumentException: Expected URL scheme 'http' or 'https' but was 'data'\r\n    // At Request.Builder().url(addParamsToUrl(url, params))\r\n    return normalSafeApiCall {\r\n        requestCreator(\r\n            this.method,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/174", "ground_truth": "            webViewUrl,\r\n            this.requestHeaders,\r\n        )\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\network\\WebViewResolver.kt"}}
{"prompt": "\n \r\n@OptIn(DelicateCoroutinesApi::class)\r\nsuspend fun <K, V, R> Map<out K, V>.amap(f: suspend (Map.Entry<K, V>) -> R): List<R> =\r", "choices": [{"text": "map { f(it) }\r\n"}], "metadata": {"task_id": "cloudstream/175", "ground_truth": "    with(CoroutineScope(GlobalScope.coroutineContext)) {\r\n        map { async { f(it) } }.map { it.await() }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ParCollections.kt"}}
{"prompt": "\n \r\n@OptIn(DelicateCoroutinesApi::class)\r\nsuspend fun <A, B> List<A>.amap(f: suspend (A) -> B): List<B> =\r", "choices": [{"text": "map(f)\r\n"}], "metadata": {"task_id": "cloudstream/176", "ground_truth": "    with(CoroutineScope(GlobalScope.coroutineContext)) {\r\n        map { async { f(it) } }.map { it.await() }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ParCollections.kt"}}
{"prompt": "\n fun <R> argamap(\r\n    vararg transforms: suspend () -> R,\r\n) = runBlocking {\r\n    transforms.map {\r\n        async {\r\n            try {\r\n                it.invoke()\r\n            } catch (e: Exception) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/178", "ground_truth": "                logError(e)\r\n            }\r\n        }\r\n    }.map { it.await() }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ParCollections.kt"}}
{"prompt": "\n import android.util.Log\nimport com.lagradost.cloudstream3.utils.ExtractorApi\nfun registerExtractorAPI(element: ExtractorApi) {\r\n        Log.i(PLUGIN_TAG, \"Adding ${element.name} (${element.mainUrl}) ExtractorApi\")\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "cloudstream/180", "ground_truth": "        element.sourcePlugin = this.__filename\r\n        extractorApis.add(element)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\plugins\\Plugin.kt"}}
{"prompt": "\n import java.io.File\nfun toSitePlugin(): SitePlugin {\r\n        return SitePlugin(\r\n            this.filePath,\r\n            PROVIDER_STATUS_OK,\r\n            maxOf(1, version),\r\n            1,\r\n            internalName,\r\n            internalName,\r\n            emptyList(),\r\n            File(this.filePath).name,\r\n            null,\r\n            null,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/181", "ground_truth": "            null,\r\n            null,\r\n            File(this.filePath).length()\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\plugins\\PluginManager.kt"}}
{"prompt": "\n import java.io.File\nimport android.content.Context\nprivate suspend fun maybeLoadPlugin(context: Context, file: File) {\r\n        val name = file.name\r\n        if (file.extension == \"zip\" || file.extension == \"cs3\") {\r\n            loadPlugin(\r\n                context,\r\n                file,\r\n                PluginData(name, null, false, file.absolutePath, PLUGIN_VERSION_NOT_SET)\r", "choices": [{"text": ")\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "cloudstream/186", "ground_truth": "            )\r\n        } else {\r\n            Log.i(TAG, \"Skipping invalid plugin file: $file\")\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\plugins\\PluginManager.kt"}}
{"prompt": "\n import android.content.Context\nfun loadAllOnlinePlugins(context: Context) {\r\n        // Load all plugins as fast as possible!\r\n        (getPluginsOnline()).toList().apmap { pluginData ->\r\n            loadPlugin(\r\n                context,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/188", "ground_truth": "                File(pluginData.filePath),\r\n                pluginData\r\n            )\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\plugins\\PluginManager.kt"}}
{"prompt": "\n import java.io.File\nimport com.lagradost.cloudstream3.mvvm.normalSafeApiCall\nfun checkSafeModeFile(): Boolean {\r\n        return normalSafeApiCall {\r\n            val folder = File(CLOUD_STREAM_FOLDER)\r\n            if (!folder.exists()) return@normalSafeApiCall false\r\n            val files = folder.listFiles { _, name ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/190", "ground_truth": "                name.equals(\"safe\", ignoreCase = true)\r\n            }\r\n            files?.any()\r\n        } ?: false\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\plugins\\PluginManager.kt"}}
{"prompt": "\n import java.io.File\nimport com.lagradost.cloudstream3.utils.VideoDownloadManager.sanitizeFilename\nfun getPluginSanitizedFileName(name: String): String {\r\n        return sanitizeFilename(\r\n            name,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/191", "ground_truth": "            true\r\n        ) + \".\" + name.hashCode()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\plugins\\PluginManager.kt"}}
{"prompt": "\n import java.io.File\nsuspend fun deletePlugin(file: File): Boolean {\r\n        val list =\r\n            (getPluginsLocal() + getPluginsOnline()).filter { it.filePath == file.absolutePath }\r\n\r\n        return try {\r\n            if (File(file.absolutePath).delete()) {\r\n                unloadPlugin(file.absolutePath)\r\n                list.forEach { deletePluginData(it) }\r\n                return true\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/194", "ground_truth": "            false\r\n        } catch (e: Exception) {\r\n            false\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\plugins\\PluginManager.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport com.lagradost.cloudstream3.AcraApplication.Companion.getKey\nimport com.lagradost.cloudstream3.AcraApplication.Companion.context\nfun convertRawGitUrl(url: String): String {\r\n        if (getKey<Boolean>(context!!.getString(R.string.jsdelivr_proxy_key)) != true) return url\r\n        val match = GH_REGEX.find(url) ?: return url\r", "choices": [{"text": "\n import com.lagradost.cloudstream3.R\nimport com.lagradost.cloudstream3.AcraApplication.Companion.getKey\nimport com.lagradost.cloudstream3.AcraApplication.Companion.context\nfun convertRawGitUrl(url: String): String {\r\n        if (getKey<Boolean>(context!!.getString(R.string.jsdelivr_proxy_key))!= true) return url\r\n        val match = GH_REGEX.find(url)?: return url\r\n//        val match = GH_REGEX.find(url)?: return url\r\n        val gh = match.groupValues[1]\r\n        val repo = match.groupValues[2]\r\n        val branch = match.groupValues[3]\r\n        val path = match.groupValues[4]\r\n        val ext = match.groupValues[5]\r\n        val url = \"https://cdn.jsdelivr.net/gh/$gh/$repo@$branch/$path.$ext\"\r\n        return url\r\n    }\n<file_sep>/app/src/main/java/com/lagradost/cloudstream3/ui/settings/"}], "metadata": {"task_id": "cloudstream/195", "ground_truth": "        val (user, repo, rest) = match.destructured\r\n        return \"https://cdn.jsdelivr.net/gh/$user/$repo@$rest\"\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\plugins\\RepositoryManager.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.mvvm.suspendSafeApiCall\nimport com.lagradost.cloudstream3.R\nsuspend fun parseRepository(url: String): Repository? {\r\n        return suspendSafeApiCall {\r\n            // Take manifestVersion and such into account later\r", "choices": [{"text": "//            val manifest = getManifest(url)\r\n//            val manifestVersion = manifest.version\r\n//            val manifestUrl = manifest.url\r\n//            val manifestHash = manifest.hash\r\n//            val manifestHashUrl = manifest.hashUrl\r\n//            val manifestHashType = manifest.hashType\r\n//            val manifestHashTypeUrl = manifest.hashTypeUrl\r\n//            val manifestHashTypeUrl = manifest.hashTypeUrl\r\n//            val manifestHashTypeUrl = manifest.hashTypeUrl\r\n//            val manifestHashTypeUrl = manifest.hash"}], "metadata": {"task_id": "cloudstream/196", "ground_truth": "            app.get(convertRawGitUrl(url)).parsedSafe()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\plugins\\RepositoryManager.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.AppUtils.tryParseJson\nimport com.lagradost.cloudstream3.app\nimport com.lagradost.cloudstream3.R\nprivate suspend fun parsePlugins(pluginUrls: String): List<SitePlugin> {\r\n        // Take manifestVersion and such into account later\r\n        return try {\r\n            val response = app.get(convertRawGitUrl(pluginUrls))\r\n            // Normal parsed function not working?\r\n            // return response.parsedSafe()\r\n            tryParseJson<Array<SitePlugin>>(response.text)?.toList() ?: emptyList()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/197", "ground_truth": "        } catch (t: Throwable) {\r\n            logError(t)\r\n            emptyList()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\plugins\\RepositoryManager.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.amap\nimport com.lagradost.cloudstream3.R\nsuspend fun getRepoPlugins(repositoryUrl: String): List<Pair<String, SitePlugin>>? {\r\n        val repo = parseRepository(repositoryUrl) ?: return null\r\n        return repo.pluginLists.amap { url ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/198", "ground_truth": "            parsePlugins(url).map {\r\n                repositoryUrl to it\r\n            }\r\n        }.flatten()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\plugins\\RepositoryManager.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nprivate fun getRepository(pluginUrl: String) = pluginUrl\r\n        .split(\"/\")\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/203", "ground_truth": "        .drop(2)\r\n        .take(3)\r\n        .joinToString(\"-\")", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\plugins\\VotingApi.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.Coroutines.main\nimport com.lagradost.cloudstream3.R\nprivate suspend fun readVote(pluginUrl: String): Int {\r\n        var url = \"${apiDomain}/cs-${getRepository(pluginUrl)}/vote/${transformUrl(pluginUrl)}?readOnly=true\"\r", "choices": [{"text": "//        println(\"readVote: $url\")\r\n        val response = client.get<VoteResponse>(url)\r\n        return response.vote\r\n    }\n\nprivate suspend fun writeVote(pluginUrl: String, vote: Int) {\r\n        val url = \"${apiDomain}/cs-${getRepository(pluginUrl)}/vote/${transformUrl(pluginUrl)}\"\r\n        val response = client.put<VoteResponse>(url, VoteRequest(vote))\r\n        if (response.vote!= vote) {\r\n            throw Exception(\"Vote not written\")\r\n        }\r\n    }\n\nprivate suspend fun getRepository(pluginUrl: String): String"}], "metadata": {"task_id": "cloudstream/204", "ground_truth": "        Log.d(LOGKEY, \"Requesting: $url\")\r\n        return app.get(url).parsedSafe<Result>()?.value ?: 0\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\plugins\\VotingApi.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.Coroutines.main\nimport com.lagradost.cloudstream3.R\nprivate suspend fun writeVote(pluginUrl: String): Boolean {\r\n        var url = \"${apiDomain}/cs-${getRepository(pluginUrl)}/vote/${transformUrl(pluginUrl)}\"\r", "choices": [{"text": "//        url = \"https://api.cloudstream.to/cs-1/vote/1234567890\"\r\n        val request = Request.Builder()\r\n           .url(url)\r\n           .build()\r\n        val response = client.newCall(request).execute()\r\n        return response.isSuccessful\r\n    }\n\nprivate suspend fun getRepository(pluginUrl: String): String {\r\n        val url = pluginUrl.split(\"/\")\r\n        return url[url.size - 2]\r\n    }\n\nprivate suspend fun transformUrl(pluginUrl: String): String {\r\n        val url = plugin"}], "metadata": {"task_id": "cloudstream/205", "ground_truth": "        Log.d(LOGKEY, \"Requesting: $url\")\r\n        return app.get(url).parsedSafe<Result>()?.value != null\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\plugins\\VotingApi.kt"}}
{"prompt": "\n suspend fun getVotes(pluginUrl: String): Int =\r", "choices": [{"text": "-    get(pluginUrl, \"votes\")?.let { it.toInt() }?: 0\r\n+    get(pluginUrl, \"votes\")?.toIntOrNull()?: 0\r\n \r\n suspend fun getPlugin(pluginUrl: String): Plugin =\r\n-    get(pluginUrl, \"plugin\")?.let { Plugin(it) }?: Plugin()\r\n+    get(pluginUrl, \"plugin\")?.let { Plugin(it) }?: Plugin()\r\n+\r\n+suspend fun getPlugin(pluginUrl: String, pluginName: String): Plugin =\r\n+   "}], "metadata": {"task_id": "cloudstream/206", "ground_truth": "            votesCache[pluginUrl] ?: readVote(pluginUrl).also {\r\n                votesCache[pluginUrl] = it\r\n            }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\plugins\\VotingApi.kt"}}
{"prompt": "\n fun canVote(pluginUrl: String): Boolean {\r", "choices": [{"text": "-    return pluginUrl.startsWith(\"https://plugins.jetbrains.com/plugin/1035\")\r\n+    return pluginUrl.startsWith(\"https://plugins.jetbrains.com/plugin/1035\") || pluginUrl.startsWith(\"https://plugins.jetbrains.com/plugin/1035-1\")\r\n }\r\n \r\n fun canVote(pluginUrl: String, pluginVersion: String): Boolean {\r\n-    return pluginUrl.startsWith(\"https://plugins.jetbrains.com/plugin/1035\") && pluginVersion.startsWith(\"1.1\")\r"}], "metadata": {"task_id": "cloudstream/207", "ground_truth": "        if (!PluginManager.urlPlugins.contains(pluginUrl)) return false\r\n        return true\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\plugins\\VotingApi.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.AppUtils.createNotificationChannel\nimport com.lagradost.cloudstream3.R\nimport androidx.work.ForegroundInfo\noverride suspend fun doWork(): Result {\r\n        context.createNotificationChannel(\r\n            BACKUP_CHANNEL_ID,\r\n            BACKUP_CHANNEL_NAME,\r\n            BACKUP_CHANNEL_DESCRIPTION\r\n        )\r\n\r\n        setForeground(\r\n            ForegroundInfo(\r\n                BACKUP_NOTIFICATION_ID,\r\n                backupNotificationBuilder.build()\r\n            )\r\n        )\r", "choices": [{"text": ""}], "metadata": {"task_id": "cloudstream/209", "ground_truth": "\r\n        BackupUtils.backup(context)\r\n\r\n        return Result.success()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\services\\BackupWorkManager.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/211", "ground_truth": "        downloadScope.coroutineContext.cancel()\r\n        super.onDestroy()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\services\\VideoDownloadService.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.AcraApplication.Companion.removeKeys\nprotected fun removeAccountKeys() {\r\n        removeKeys(accountId)\r\n        val accounts = getAccounts()?.toMutableList() ?: mutableListOf()\r", "choices": [{"text": "\n import com.lagradost.cloudstream3.AcraApplication.Companion.removeKeys\nprotected fun removeAccountKeys() {\r\n        removeKeys(accountId)\r\n        val accounts = getAccounts()?.toMutableList()?: mutableListOf()\r\n//        accounts.remove(accountId)\r\n        accounts.remove(accountId)\r\n        setAccounts(accounts)\r\n    }\n\n"}], "metadata": {"task_id": "cloudstream/212", "ground_truth": "        accounts.remove(accountIndex)\r\n        setKey(accountsKey, accounts.toIntArray())\r\n\r\n        init()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\AccountManager.kt"}}
{"prompt": "\n protected fun switchToNewAccount() {\r\n        val accounts = getAccounts()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/214", "ground_truth": "        lastAccountIndex = accountIndex\r\n        accountIndex = (accounts?.maxOrNull() ?: 0) + 1\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\AccountManager.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.AcraApplication.Companion.setKey\nprotected fun registerAccount() {\r\n        setKey(accountActiveKey, accountIndex)\r\n        val accounts = getAccounts()?.toMutableList() ?: mutableListOf()\r\n        if (!accounts.contains(accountIndex)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/215", "ground_truth": "            accounts.add(accountIndex)\r\n        }\r\n\r\n        setKey(accountsKey, accounts.toIntArray())\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\AccountManager.kt"}}
{"prompt": "\nvar accountIndex\nval accountActiveKey\nval accountId\n fun changeAccount(index: Int) {\r", "choices": [{"text": "accountIndex = index\r\naccountActiveKey = accounts[index].activeKey\r\naccountId = accounts[index].id\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/216", "ground_truth": "        accountIndex = index\r\n        setKey(accountActiveKey, index)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\AccountManager.kt"}}
{"prompt": "\nval name\nval createAccountUrl Nothing?\nval idPrefix\n private fun fixUrl(url: String): String {\r\n        return if (url.startsWith(\"/\")) host + url\r\n        else if (!url.startsWith(\"http\")) \"$host/$url\"\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/217", "ground_truth": "        else url\r\n\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\Addic7ed.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.syncproviders.AuthAPI\nimport com.lagradost.cloudstream3.AcraApplication.Companion.getKey\noverride fun loginInfo(): AuthAPI.LoginInfo? {\r\n        // context.getUser(true)?.\r\n        getKey<AniListUser>(accountId, ANILIST_USER_KEY)?.let { user ->\r\n            return AuthAPI.LoginInfo(\r\n                profilePicture = user.picture,\r\n                name = user.name,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/218", "ground_truth": "                accountIndex = accountIndex\r\n            )\r\n        }\r\n        return null\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\AniListApi.kt"}}
{"prompt": "\n override fun logOut() {\r", "choices": [{"text": "//     TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\r\n }\r\n}<file_sep>/app/src/main/java/com/example/myapplication/ui/login/LoginActivity.kt\npackage com.example.myapplication.ui.login\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport com.example.myapplication.R\r\nimport com.example.myapplication."}], "metadata": {"task_id": "cloudstream/219", "ground_truth": "        requireLibraryRefresh = true\r\n        removeAccountKeys()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\AniListApi.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.syncproviders.SyncAPI\noverride suspend fun search(name: String): List<SyncAPI.SyncSearchResult>? {\r\n        val data = searchShows(name) ?: return null\r\n        return data.data?.Page?.media?.map {\r\n            SyncAPI.SyncSearchResult(\r\n                it.title.romaji ?: return null,\r\n                this.name,\r\n                it.id.toString(),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/221", "ground_truth": "                getUrlFromId(it.id),\r\n                it.bannerImage\r\n            )\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\AniListApi.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.Coroutines.ioSafe\nfun initGetUser() {\r\n        if (getAuth() == null) return\r\n        ioSafe {\r", "choices": [{"text": "//            val user = getAuth()?.currentUser\r\n//            if (user!= null) {\r\n//                val uid = user.uid\r\n//                val ref = FirebaseDatabase.getInstance().getReference(\"users\").child(uid)\r\n//                ref.addListenerForSingleValueEvent(object : ValueEventListener {\r\n//                    override fun onCancelled(p0: DatabaseError) {\r\n//                        Log.d(\"TAG\", \"onCancelled: ${p0.message}\")\r\n//                    }\r\n//\r\n//                    override fun onDataChange(p0: DataSnapshot)"}], "metadata": {"task_id": "cloudstream/226", "ground_truth": "            getUser()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\AniListApi.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.AcraApplication.Companion.getKey\nprivate fun checkToken(): Boolean {\r\n        return unixTime > getKey(\r\n            accountId,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/227", "ground_truth": "            ANILIST_UNIXTIME_KEY, 0L\r\n        )!!\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\AniListApi.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.AcraApplication.Companion.getKey\nprivate fun getAuth(): String? {\r\n        return getKey(\r\n            accountId,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/228", "ground_truth": "            ANILIST_TOKEN_KEY\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\AniListApi.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.AcraApplication.Companion.setKey\nprivate suspend fun getAniListAnimeListSmart(): Array<Lists>? {\r\n        if (getAuth() == null) return null\r\n\r\n        if (checkToken()) return null\r\n        return if (requireLibraryRefresh) {\r\n            val list = getFullAniListList()?.data?.MediaListCollection?.lists?.toTypedArray()\r\n            if (list != null) {\r\n                setKey(ANILIST_CACHED_LIST, list)\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/229", "ground_truth": "            list\r\n        } else {\r\n            getAniListListCached()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\AniListApi.kt"}}
{"prompt": "\n suspend fun toggleLike(id: Int): Boolean {\r\n        val q = \"\"\"mutation (${'$'}animeId: Int = $id) {\r\n\t\t\t\tToggleFavourite (animeId: ${'$'}animeId) {\r\n\t\t\t\t\tanime {\r\n\t\t\t\t\t\tnodes {\r\n\t\t\t\t\t\t\tid\r\n\t\t\t\t\t\t\ttitle {\r\n\t\t\t\t\t\t\t\tromaji\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r", "choices": [{"text": "}\r\n}\"\"\"\r\n        val response = api.post(q)\r\n        return response.data?.ToggleFavourite?.anime?.nodes?.first()?.id == id\r\n    }\r\n}<file_sep>/app/src/main/java/com/example/animelist/ui/anime/AnimeViewModel.kt\npackage com.example.animelist.ui.anime\r\n\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.example.animelist.data.Anime\r"}], "metadata": {"task_id": "cloudstream/230", "ground_truth": "\t\t\t\t}\r\n\t\t\t}\"\"\"\r\n        val data = postApi(q)\r\n        return data != \"\"\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\AniListApi.kt"}}
{"prompt": "\n private fun fixUrl(url: String): String {\r\n        if (url.startsWith(\"http\")) {\r\n            return url\r\n        }\r\n        if (url.isEmpty()) {\r\n            return \"\"\r\n        }\r\n\r\n        val startsWithNoHttp = url.startsWith(\"//\")\r\n        if (startsWithNoHttp) {\r\n            return \"https:$url\"\r\n        } else {\r\n            if (url.startsWith('/')) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/231", "ground_truth": "                return host + url\r\n            }\r\n            return \"$host/$url\"\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\IndexSubtitleApi.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.syncproviders.AuthAPI\noverride fun loginInfo(): AuthAPI.LoginInfo {\r\n        return AuthAPI.LoginInfo(\r", "choices": [{"text": "//            \"https://cloudstream3.com/api/v1/auth/login\",\r\n//            \"https://cloudstream3.com/api/v1/auth/logout\",\r\n//            \"https://cloudstream3.com/api/v1/auth/refresh\",\r\n//            \"https://cloudstream3.com/api/v1/auth/register\",\r\n//            \"https://cloudstream3.com/api/v1/auth/reset\",\r\n//            \"https://cloudstream3.com/api/v1/auth"}], "metadata": {"task_id": "cloudstream/235", "ground_truth": "            null,\r\n            null,\r\n            0\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\LocalList.kt"}}
{"prompt": "\n override fun logOut() {\r", "choices": [{"text": "//     TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\r\n }\r\n}<file_sep>/app/src/main/java/com/example/myapplication/ui/login/LoginActivity.kt\npackage com.example.myapplication.ui.login\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport com.example.myapplication.R\r\nimport com.example.myapplication."}], "metadata": {"task_id": "cloudstream/236", "ground_truth": "        requireLibraryRefresh = true\r\n        removeAccountKeys()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\MALApi.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.syncproviders.AuthAPI\nimport com.lagradost.cloudstream3.R\nimport com.lagradost.cloudstream3.AcraApplication.Companion.getKey\noverride fun loginInfo(): AuthAPI.LoginInfo? {\r\n        //getMalUser(true)?\r\n        getKey<MalUser>(accountId, MAL_USER_KEY)?.let { user ->\r\n            return AuthAPI.LoginInfo(\r\n                profilePicture = user.picture,\r\n                name = user.name,\r", "choices": [{"text": "//                email = user.email,\r\n                email = null,\r\n                id = user.id,\r\n                isPremium = user.isPremium,\r\n                isBanned = user.isBanned,\r\n                isSuspended = user.isSuspended,\r\n                isDeleted = user.isDeleted,\r\n                isLocked = user.isLocked,\r\n                isGuest = user.isGuest,\r\n                isLoggedIn = true\r\n            )\r\n        }\r\n        return null\r\n    }\n<file_sep>/app/src/main/java/com/lagradost/cloudstream3/syncproviders/SyncProvider.kt\npackage com.lag"}], "metadata": {"task_id": "cloudstream/237", "ground_truth": "                accountIndex = accountIndex\r\n            )\r\n        }\r\n        return null\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\MALApi.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.AcraApplication.Companion.getKey\nprivate fun getAuth(): String? {\r\n        return getKey(\r\n            accountId,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/238", "ground_truth": "            MAL_TOKEN_KEY\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\MALApi.kt"}}
{"prompt": "\n import java.text.SimpleDateFormat\nprivate fun parseDateLong(string: String?): Long? {\r\n            return try {\r\n                SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\").parse(\r\n                    string ?: return null\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/244", "ground_truth": "                )?.time?.div(1000)\r\n            } catch (e: Exception) {\r\n                null\r\n            }\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\MALApi.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.AppUtils.parseJson\nimport com.lagradost.cloudstream3.R\nimport com.lagradost.cloudstream3.AcraApplication.Companion.setKey\nprivate fun storeToken(response: String) {\r\n        try {\r\n            if (response != \"\") {\r\n                val token = parseJson<ResponseToken>(response)\r\n                setKey(accountId, MAL_UNIXTIME_KEY, (token.expires_in + unixTime))\r\n                setKey(accountId, MAL_REFRESH_TOKEN_KEY, token.refresh_token)\r\n                setKey(accountId, MAL_TOKEN_KEY, token.access_token)\r\n                requireLibraryRefresh = true\r", "choices": [{"text": "\n import com.lagradost.cloudstream3.utils.AppUtils.parseJson\nimport com.lagradost.cloudstream3.R\nimport com.lagradost.cloudstream3.AcraApplication.Companion.setKey\nprivate fun storeToken(response: String) {\r\n        try {\r\n            if (response!= \"\") {\r\n                val token = parseJson<ResponseToken>(response)\r\n                setKey(accountId, MAL_UNIXTIME_KEY, (token.expires_in + unixTime))\r\n                setKey(accountId, MAL_REFRESH_TOKEN_KEY, token.refresh_token)\r\n                setKey(accountId, MAL_TOKEN_KEY, token.access_token)\r\n                requireLibraryRefresh = true\r\n//                Log.d(\"MAL_TOKEN_KEY\", token.access_token)\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "cloudstream/245", "ground_truth": "            }\r\n        } catch (e: Exception) {\r\n            logError(e)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\MALApi.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport com.lagradost.cloudstream3.AcraApplication.Companion.setKey\nprivate suspend fun getMalAnimeListSmart(): Array<Data>? {\r\n        if (getAuth() == null) return null\r\n        return if (requireLibraryRefresh) {\r\n            val list = getMalAnimeList()\r\n            setKey(MAL_CACHED_LIST, list)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/246", "ground_truth": "            list\r\n        } else {\r\n            getMalAnimeListCached()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\MALApi.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.app\nprivate suspend fun getDataAboutMalId(id: Int): SmallMalAnime? {\r\n        // https://myanimelist.net/apiconfig/references/api/v2#operation/anime_anime_id_get\r\n        val url =\r\n            \"$apiUrl/v2/anime/$id?fields=id,title,num_episodes,my_list_status\"\r\n        val res = app.get(\r\n            url, headers = mapOf(\r\n                \"Authorization\" to \"Bearer \" + (getAuth() ?: return null)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/248", "ground_truth": "            ), cacheTime = 0\r\n        ).text\r\n\r\n        return parseJson<SmallMalAnime>(res)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\MALApi.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.AcraApplication.Companion.getKey\nprivate suspend fun checkMalToken() {\r\n        if (unixTime > (getKey(\r\n                accountId,\r\n                MAL_UNIXTIME_KEY\r", "choices": [{"text": ")?: 0L)) {\r\n            val token = getKey(\r\n                    accountId,\r\n                    MAL_TOKEN_KEY\r\n            )?: \"\"\r\n            val response = MAL.getAccessToken(token)\r\n            if (response.isSuccessful) {\r\n                val body = response.body()\r\n                if (body!= null) {\r\n                    val accessToken = body.access_token\r\n                    val refreshToken = body.refresh_token\r\n                    val unixTime = body.expires_in\r\n                    setKey(\r\n                            accountId,\r\n                            MAL_TOKEN_KEY,\r\n                            accessToken\r\n                    )\r\n                    setKey(\r\n                            accountId,\r\n                            MAL_UNIXTIME_KEY"}], "metadata": {"task_id": "cloudstream/249", "ground_truth": "            ) ?: 0L)\r\n        ) {\r\n            refreshToken()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\MALApi.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.AppUtils.parseJson\nimport com.lagradost.cloudstream3.app\nprivate suspend fun getMalUser(setSettings: Boolean = true): MalUser? {\r\n        checkMalToken()\r\n        val res = app.get(\r\n            \"$apiUrl/v2/users/@me\",\r\n            headers = mapOf(\r\n                \"Authorization\" to \"Bearer \" + (getAuth() ?: return null)\r\n            ), cacheTime = 0\r\n        ).text\r\n\r\n        val user = parseJson<MalUser>(res)\r\n        if (setSettings) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/250", "ground_truth": "            setKey(accountId, MAL_USER_KEY, user)\r\n            registerAccount()\r\n        }\r\n        return user\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\MALApi.kt"}}
{"prompt": " import com.lagradost.cloudstream3.R\nval OPEN_SUBTITLES_USER_KEY String\nval createAccountUrl\nval languageExceptions\nprivate fun throwGotTooManyRequests() {\r", "choices": [{"text": "throw HttpException(Response.error(429, ResponseBody.create(MediaType.parse(\"application/json\"), \"{\\\"error\\\":\\\"Too many requests\\\"}\")))\r\n}\r\nprivate fun throwGotTooManyRequests() {\r\nthrow HttpException(Response.error(429, ResponseBody.create(MediaType.parse(\"application/json\"), \"{\\\"error\\\":\\\"Too many requests\\\"}\")))\r\n}\r\nprivate fun throwGotTooManyRequests() {\r\nthrow HttpException(Response.error(429, ResponseBody.create(MediaType.parse(\"application/json\"), \"{\\\"error"}], "metadata": {"task_id": "cloudstream/254", "ground_truth": "        currentCoolDown = unixTimeMs + coolDownDuration\r\n        throw ErrorLoadingException(\"Too many requests\")\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\OpenSubtitlesApi.kt"}}
{"prompt": " import com.lagradost.cloudstream3.R\nimport com.lagradost.cloudstream3.AcraApplication.Companion.removeKey\nval apiKey\nval requiresUsername\nval headerInterceptor\nprivate fun setAuthKey(data: SubtitleOAuthEntity?) {\r\n        if (data == null) removeKey(accountId, OPEN_SUBTITLES_USER_KEY)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/255", "ground_truth": "        currentSession = data\r\n        setKey(accountId, OPEN_SUBTITLES_USER_KEY, data)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\OpenSubtitlesApi.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.syncproviders.AuthAPI\nimport android.util.Log\noverride fun loginInfo(): AuthAPI.LoginInfo? {\r\n        getAuthKey()?.let { user ->\r\n            return AuthAPI.LoginInfo(\r\n                profilePicture = null,\r\n                name = user.user,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/256", "ground_truth": "                accountIndex = accountIndex\r\n            )\r\n        }\r\n        return null\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\OpenSubtitlesApi.kt"}}
{"prompt": "\n override fun logOut() {\r\n        setAuthKey(null)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "cloudstream/259", "ground_truth": "        removeAccountKeys()\r\n        currentSession = getAuthKey()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\OpenSubtitlesApi.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.app\nimport com.lagradost.cloudstream3.AcraApplication.Companion.getKeys\nimport com.lagradost.cloudstream3.AcraApplication.Companion.getKey\nimport com.lagradost.cloudstream3.AcraApplication\nfun cleanOldCache() {\r\n            getKeys(SIMKL_CACHE_KEY)?.forEach {\r\n                val isOld = AcraApplication.getKey<SimklCacheWrapper<Any>>(it)?.isFresh() == false\r", "choices": [{"text": "//                val isOld = System.currentTimeMillis() - AcraApplication.getKey<SimklCacheWrapper<Any>>(it)?.timestamp > 1000 * 60 * 60 * 24 * 30\r\n                if (isOld) {\r\n                    getKeys(SIMKL_CACHE_KEY)?.remove(it)\r\n                }\r\n            }\r\n        }\n"}], "metadata": {"task_id": "cloudstream/261", "ground_truth": "                if (isOld) {\r\n                    removeKey(it)\r\n                }\r\n            }\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\SimklApi.kt"}}
{"prompt": "\n import java.util.TimeZone\nimport java.util.Date\nimport java.time.Instant\nimport java.text.SimpleDateFormat\nimport com.lagradost.cloudstream3.app\nfun getUnixTime(string: String?): Long? {\r\n            return try {\r\n                SimpleDateFormat(simklDateFormat).apply {\r\n                    this.timeZone = TimeZone.getTimeZone(\"UTC\")\r\n                }.parse(\r\n                    string ?: return null\r\n                )?.toInstant()?.epochSecond\r", "choices": [{"text": "\n import java.util.TimeZone\nimport java.util.Date\nimport java.time.Instant\nimport java.text.SimpleDateFormat\nimport com.lagradost.cloudstream3.app\nfun getUnixTime(string: String?): Long? {\r\n            return try {\r\n                SimpleDateFormat(simklDateFormat).apply {\r\n                    this.timeZone = TimeZone.getTimeZone(\"UTC\")\r\n                }.parse(\r\n                    string?: return null\r\n                )?.toInstant()?.epochSecond\r\n//                SimpleDateFormat(simklDateFormat).parse(string?: return null)?.toInstant()?.epochSecond\r\n            } catch (e: Exception) {\r\n                null\r\n            }\r\n        }\n"}], "metadata": {"task_id": "cloudstream/263", "ground_truth": "            } catch (e: Exception) {\r\n                logError(e)\r\n                return null\r\n            }\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\SimklApi.kt"}}
{"prompt": "\n import java.util.TimeZone\nimport java.util.Date\nimport java.time.Instant\nimport java.text.SimpleDateFormat\nimport com.lagradost.cloudstream3.app\nfun getDateTime(unixTime: Long?): String? {\r\n            return try {\r\n                SimpleDateFormat(simklDateFormat).apply {\r\n                    this.timeZone = TimeZone.getTimeZone(\"UTC\")\r\n                }.format(\r\n                    Date.from(\r\n                        Instant.ofEpochSecond(\r\n                            unixTime ?: return null\r\n                        )\r\n                    )\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/264", "ground_truth": "                )\r\n            } catch (e: Exception) {\r\n                null\r\n            }\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\SimklApi.kt"}}
{"prompt": "\n fun convertToEpisodes(list: List<EpisodeMetadata>?): List<MediaObject.Season.Episode>? {\r\n                    return list?.map {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/266", "ground_truth": "                        MediaObject.Season.Episode(it.episode)\r\n                    }\r\n                }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\SimklApi.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.app\nfun score(score: Int?, oldScore: Int?) = apply {\r\n                    if (score != oldScore) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/270", "ground_truth": "                        this.score = score\r\n                    }\r\n                }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\SimklApi.kt"}}
{"prompt": "\n import okhttp3.Response\nimport com.lagradost.cloudstream3.mvvm.suspendSafeApiCall\nimport com.lagradost.cloudstream3.app\nimport com.lagradost.cloudstream3.R\nprivate suspend fun getUser(): SettingsResponse.User? {\r\n        return suspendSafeApiCall {\r\n            app.post(\"$mainUrl/users/settings\", interceptor = interceptor)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/274", "ground_truth": "                .parsedSafe<SettingsResponse>()?.user\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\SimklApi.kt"}}
{"prompt": "\n import okhttp3.Response\nimport com.lagradost.cloudstream3.syncproviders.AuthAPI\nimport com.lagradost.cloudstream3.R\nimport com.lagradost.cloudstream3.AcraApplication.Companion.getKey\noverride fun loginInfo(): AuthAPI.LoginInfo? {\r\n        return getKey<SettingsResponse.User>(accountId, SIMKL_USER_KEY)?.let { user ->\r\n            AuthAPI.LoginInfo(\r\n                name = user.name,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/278", "ground_truth": "                profilePicture = user.avatar,\r\n                accountIndex = accountIndex\r\n            )\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\SimklApi.kt"}}
{"prompt": "\n override fun logOut() {\r", "choices": [{"text": "//     TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\r\n }\r\n}<file_sep>/app/src/main/java/com/example/myapplication/ui/login/LoginActivity.kt\npackage com.example.myapplication.ui.login\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport com.example.myapplication.R\r\nimport com.example.myapplication."}], "metadata": {"task_id": "cloudstream/279", "ground_truth": "        requireLibraryRefresh = true\r\n        removeAccountKeys()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\syncproviders\\providers\\SimklApi.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.MainActivity\nimport android.content.Intent\nprivate fun navigateToMainActivity() {\r\n        val mainIntent = Intent(this, MainActivity::class.java)\r", "choices": [{"text": "startActivity(mainIntent)\r\n}\n"}], "metadata": {"task_id": "cloudstream/283", "ground_truth": "        startActivity(mainIntent)\r\n        finish() // Finish the account selection activity\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\account\\AccountSelectActivity.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nimport android.graphics.Rect\noverride fun getItemOffsets(outRect: Rect, view: View, parent: RecyclerView, state: RecyclerView.State) {\r\n        val layoutParams = view.layoutParams as RecyclerView.LayoutParams\r\n        layoutParams.width = size\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/284", "ground_truth": "        layoutParams.height = size\r\n        view.layoutParams = layoutParams\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\account\\AccountSelectLinearItemDecoration.kt"}}
{"prompt": "\n private fun afterPluginsLoaded(forceReload: Boolean) {\r\n        if (forceReload) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/285", "ground_truth": "            synchronized(cache) {\r\n                cache.clear()\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\APIRepository.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.mvvm.Resource\nimport com.lagradost.cloudstream3.SearchResponse\nsuspend fun quickSearch(query: String): Resource<List<SearchResponse>> {\r\n        if (query.isEmpty())\r\n            return Resource.Success(emptyList())\r", "choices": [{"text": "//        val response = api.search(query)\r\n//        return Resource.Success(response.results)\n        return Resource.Success(emptyList())\n    }\n"}], "metadata": {"task_id": "cloudstream/287", "ground_truth": "\r\n        return safeApiCall {\r\n            api.quickSearch(query) ?: throw ErrorLoadingException()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\APIRepository.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.APIHolder.unixTimeMS\nimport com.lagradost.cloudstream3.APIHolder.unixTime\nsuspend fun waitForHomeDelay() {\r\n        val delta = api.sequentialMainPageScrollDelay + api.lastHomepageRequest - unixTimeMS\r", "choices": [{"text": "//        println(\"delta: $delta\")\r\n        if (delta > 0) {\r\n            delay(delta)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/288", "ground_truth": "        if (delta < 0) return\r\n        delay(delta)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\APIRepository.kt"}}
{"prompt": " import com.lagradost.cloudstream3.mvvm.safeApiCall\nval name\nval randomApi\nval providerType\nsuspend fun extractorVerifierJob(extractorData: String?) {\r\n        safeApiCall {\r", "choices": [{"text": "//            val response = randomApi.getExtractor(extractorData)\r\n//            if (response.isSuccessful) {\r\n//                val body = response.body()\r\n//                if (body!= null) {\r\n//                    val extractor = body.extractor\r\n//                    if (extractor!= null) {\r\n//                        val extractorType = extractor.type\r\n//                        if (extractorType!= null) {\r\n//                            providerType = extractorType\r\n//                        }\r\n//                    }\r\n//                }\r\n//            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/289", "ground_truth": "            api.extractorVerifierJob(extractorData)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\APIRepository.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.ExtractorLink\nimport com.lagradost.cloudstream3.SubtitleFile\nsuspend fun loadLinks(\r\n        data: String,\r\n        isCasting: Boolean,\r\n        subtitleCallback: (SubtitleFile) -> Unit,\r\n        callback: (ExtractorLink) -> Unit,\r\n    ): Boolean {\r\n        if (isInvalidData(data)) return false // this makes providers cleaner\r\n        return try {\r\n            api.loadLinks(data, isCasting, subtitleCallback, callback)\r", "choices": [{"text": "//            api.loadLinks(data, isCasting, subtitleCallback, callback)\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n            false\r\n        }\r\n    }\r\n\r\n    private fun isInvalidData(data: String): Boolean {\r\n        return data.isEmpty()\r\n    }\r\n}<file_sep>/app/src/main/java/com/lagradost/cloudstream3/utils/ExtractorLink.kt\npackage com.lagradost.cloudstream3.utils\r\n\r\nimport com.lagradost.cloudstream3.SubtitleFile\r\n\r\ndata class ExtractorLink(\r\n    val extractor"}], "metadata": {"task_id": "cloudstream/290", "ground_truth": "        } catch (throwable: Throwable) {\r\n            logError(throwable)\r\n            return false\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\APIRepository.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport com.google.android.gms.cast.framework.media.RemoteMediaClient\nprivate fun RemoteMediaClient.getItemIndex(): Int? {\r\n    return try {\r\n        val index = this.mediaQueue.itemIds.indexOf(this.currentItem?.itemId ?: 0)\r", "choices": [{"text": "\n import com.lagradost.cloudstream3.R\nimport com.google.android.gms.cast.framework.media.RemoteMediaClient\nprivate fun RemoteMediaClient.getItemIndex(): Int? {\r\n    return try {\r\n        val index = this.mediaQueue.itemIds.indexOf(this.currentItem?.itemId?: 0)\r\n//        Log.d(\"TAG\", \"getItemIndex: $index\")\r\n        index\r\n    } catch (e: Exception) {\r\n        null\r\n    }\r\n}\n"}], "metadata": {"task_id": "cloudstream/291", "ground_truth": "        if (index < 0) null else index\r\n    } catch (e: Exception) {\r\n        null\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\ControllerActivity.kt"}}
{"prompt": "\n private fun getCurrentMetaData(): MetadataHolder? {\r\n        return try {\r\n            val data = remoteMediaClient?.mediaInfo?.customData?.toString()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/293", "ground_truth": "            data?.toKotlinObject()\r\n        } catch (e: Exception) {\r\n            null\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\ControllerActivity.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        super.onCreateOptionsMenu(menu)\r\n        menuInflater.inflate(R.menu.cast_expanded_controller_menu, menu)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/295", "ground_truth": "        CastButtonFactory.setUpMediaRouteButton(this, menu, R.id.media_route_menu_item)\r\n        return true\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\ControllerActivity.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onFocusSearchFailed(\r\n        focused: View,\r\n        focusDirection: Int,\r\n        recycler: RecyclerView.Recycler,\r\n        state: RecyclerView.State\r\n    ): View? {\r\n        return try {\r\n            val fromPos = getPosition(focused)\r\n            val nextPos = getNextViewPos(fromPos, focusDirection)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/296", "ground_truth": "            findViewByPosition(nextPos)\r\n        } catch (e: Exception) {\r\n            null\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\CustomRecyclerViews.kt"}}
{"prompt": "\n import android.view.View\noverride fun onInterceptFocusSearch(focused: View, direction: Int): View? {\r\n        return try {\r\n            val fromPos = getPosition(focused)\r\n            val nextPos = getNextViewPos(fromPos, direction)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/297", "ground_truth": "            findViewByPosition(nextPos)\r\n        } catch (e: Exception) {\r\n            null\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\CustomRecyclerViews.kt"}}
{"prompt": "\n import android.view.View\nprivate fun getNextViewPos(fromPos: Int, direction: Int): Int {\r\n        val offset = calcOffsetToNextView(direction)\r\n\r\n        if (hitBorder(fromPos, offset)) {\r", "choices": [{"text": "//            return fromPos + offset\r\n            return fromPos\r\n        }\r\n\r\n        return fromPos + offset\r\n    }\r\n\r\n    private fun hitBorder(fromPos: Int, offset: Int): Boolean {\r\n        return fromPos + offset < 0 || fromPos + offset >= mViewList.size\r\n    }\r\n\r\n    private fun calcOffsetToNextView(direction: Int): Int {\r\n        return if (direction == DIRECTION_LEFT) {\r\n            -1\r\n        } else {\r\n            1\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/298", "ground_truth": "            return fromPos\r\n        }\r\n\r\n        return fromPos + offset\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\CustomRecyclerViews.kt"}}
{"prompt": "\n import kotlin.math.abs\nprivate fun hitBorder(from: Int, offset: Int): Boolean {\r\n        val spanCount = spanCount\r\n\r\n        return if (abs(offset) == 1) {\r\n            val spanIndex = from % spanCount\r\n            val newSpanIndex = spanIndex + offset\r\n            newSpanIndex < 0 || newSpanIndex >= spanCount\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/299", "ground_truth": "        } else {\r\n            val newPos = from + offset\r\n            newPos in spanCount..-1\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\CustomRecyclerViews.kt"}}
{"prompt": "\n import androidx.core.view.children\nimport android.view.View\noverride fun onChildAttachedToWindow(child: View) {\r\n        child.measure(MeasureSpec.UNSPECIFIED, MeasureSpec.UNSPECIFIED)\r\n        val observed = if (isHorizontal) child.measuredHeight else child.measuredWidth\r\n        if (observed > biggestObserved) {\r\n            biggestObserved = observed\r\n            children.forEach { it.updateMaxSize() }\r", "choices": [{"text": "}\r\n}\n"}], "metadata": {"task_id": "cloudstream/301", "ground_truth": "        } else {\r\n            child.updateMaxSize()\r\n        }\r\n        super.onChildAttachedToWindow(child)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\CustomRecyclerViews.kt"}}
{"prompt": " import com.lagradost.cloudstream3.R\nvar currentMetaData DownloadMetadata\nvar progressText TextView?\nvar progressBar ContentLoadingProgressBar\nopen fun resetViewData() {\r\n        // lastRequest = null\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/302", "ground_truth": "        isZeroBytes = true\r\n        persistentId = null\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\download\\button\\BaseFetchButton.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.VideoDownloadManager\nfun downloadStatusEvent(data: Pair<Int, VideoDownloadManager.DownloadType>) {\r\n        val (id, status) = data\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/303", "ground_truth": "        if (id == persistentId) {\r\n            currentMetaData.status = status\r\n            setStatus(status)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\download\\button\\BaseFetchButton.kt"}}
{"prompt": "\n fun downloadProgressEvent(data: Triple<Int, Long, Long>) {\r\n        val (id, bytesDownloaded, bytesTotal) = data\r\n        if (id == persistentId) {\r\n            currentMetaData.downloadedLength = bytesDownloaded\r", "choices": [{"text": "//            currentMetaData.totalLength = bytesTotal\r\n            currentMetaData.progress = bytesDownloaded.toFloat() / bytesTotal.toFloat()\r\n            currentMetaData.progress = currentMetaData.progress * 100\r\n            currentMetaData.progress = Math.round(currentMetaData.progress)\r\n            currentMetaData.progress = currentMetaData.progress / 100\r\n            currentMetaData.progress = currentMetaData.progress * 100\r\n            currentMetaData.progress = Math.round(currentMetaData.progress)\r\n            currentMetaData.progress = currentMetaData.progress / 100\r\n            currentMetaData.progress = currentMetaData.progress"}], "metadata": {"task_id": "cloudstream/304", "ground_truth": "            currentMetaData.totalLength = bytesTotal\r\n\r\n            setProgress(bytesDownloaded, bytesTotal)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\download\\button\\BaseFetchButton.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\noverride fun setStatus(status: DownloadStatusTell?) {\r\n        mainText?.post {\r\n            val txt = when (status) {\r\n                DownloadStatusTell.IsPaused -> R.string.download_paused\r\n                DownloadStatusTell.IsDownloading -> R.string.downloading\r\n                DownloadStatusTell.IsDone -> R.string.downloaded\r\n                else -> R.string.download\r\n            }\r", "choices": [{"text": "mainText?.setText(txt)\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "cloudstream/307", "ground_truth": "            mainText?.setText(txt)\r\n        }\r\n        super.setStatus(status)\r\n\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\download\\button\\DownloadButton.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.VideoDownloadHelper\nimport com.lagradost.cloudstream3.ui.download.DownloadClickEvent\nimport com.lagradost.cloudstream3.R\nimport com.google.android.material.button.MaterialButton\nimport android.widget.TextView\noverride fun setDefaultClickListener(\r\n        card: VideoDownloadHelper.DownloadEpisodeCached,\r\n        textView: TextView?,\r\n        callback: (DownloadClickEvent) -> Unit\r\n    ) {\r\n        this.setDefaultClickListener(\r\n            this.findViewById<MaterialButton>(R.id.download_movie_button),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/308", "ground_truth": "            textView,\r\n            card,\r\n            callback\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\download\\button\\DownloadButton.kt"}}
{"prompt": "\n import android.view.View\noverride fun resetView() {\r\n        setStatus(null)\r\n        currentMetaData = DownloadMetadata(0, 0, 0, null)\r", "choices": [{"text": "}\r\noverride fun setView(view: View) {\r\n        super.setView(view)\r\n        val progressBar = view.findViewById<View>(R.id.progressBar) as ProgressBar\r\n        progressBar.max = 100\r\n        progressBar.progress = 0\r\n        val textView = view.findViewById<View>(R.id.textView) as TextView\r\n        textView.text = \"0%\"\r\n        val button = view.findViewById<View>(R.id.button) as Button\r\n        button.setOnClickListener {\r\n            if (currentMetaData.status == DownloadStatus.DOWNLOADING) {\r\n                currentMetaData.status = Download"}], "metadata": {"task_id": "cloudstream/310", "ground_truth": "        isZeroBytes = true\r\n        progressBar.progress = 0\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\download\\button\\PieFetchButton.kt"}}
{"prompt": "\n import android.view.animation.Transformation\noverride fun applyTransformation(interpolatedTime: Float, t: Transformation?) {\r\n        super.applyTransformation(interpolatedTime, t)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "cloudstream/311", "ground_truth": "        val value = from + (to - from) * interpolatedTime\r\n        progressBar.progress = value.toInt()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\download\\button\\ProgressBarAnimation.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.databinding.DownloadChildEpisodeBinding\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n        return DownloadChildViewHolder(\r\n            DownloadChildEpisodeBinding.inflate(LayoutInflater.from(parent.context), parent, false),\r", "choices": [{"text": "parent.context\r\n        )\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        (holder as DownloadChildViewHolder).bind(getItem(position))\r\n    }\r\n\r\n    override fun getItemCount(): Int = items.size\r\n\r\n    fun setItems(items: List<DownloadChildItem>) {\r\n        this.items = items\r\n        notifyDataSetChanged()\r\n    }\r\n\r\n    class DownloadChildViewHolder(\r\n        private val binding: DownloadChildEpisodeBinding,\r\n        private val context: Context\r\n    ) : RecyclerView.ViewHolder(binding.root) {\r\n        fun bind(item: DownloadChildItem) {\r\n            binding."}], "metadata": {"task_id": "cloudstream/312", "ground_truth": "            clickCallback\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\download\\DownloadChildAdapter.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        when (holder) {\r", "choices": [{"text": "//            is MyViewHolder -> holder.bind(items[position])\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "cloudstream/313", "ground_truth": "            is DownloadChildViewHolder -> {\r\n                holder.bind(cardList[position])\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\download\\DownloadChildAdapter.kt"}}
{"prompt": "\n import android.os.Bundle\nfun newInstance(headerName: String, folder: String): Bundle {\r\n            return Bundle().apply {\r\n                putString(\"folder\", folder)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/314", "ground_truth": "                putString(\"name\", headerName)\r\n            }\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\download\\DownloadChildFragment.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.VideoDownloadManager\nimport android.view.View\noverride fun onDestroyView() {\r\n        downloadDeleteEventListener?.let { VideoDownloadManager.downloadDeleteEvent -= it }\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/315", "ground_truth": "        binding = null\r\n        super.onDestroyView()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\download\\DownloadChildFragment.kt"}}
{"prompt": " import com.lagradost.cloudstream3.utils.Coroutines.main\nvar downloadsViewModel DownloadViewModel\nvar binding FragmentDownloadsBinding?\nvar downloadDeleteEventListener\nprivate fun setList(list: List<VisualDownloadHeaderCached>) {\r\n        main {\r\n            (binding?.downloadList?.adapter as DownloadHeaderAdapter?)?.cardList = list\r", "choices": [{"text": "//            binding?.downloadList?.adapter?.notifyDataSetChanged()\r\n        }\r\n    }\n\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_downloads, container, false)\n        downloadsViewModel = ViewModelProviders.of(this).get(DownloadViewModel::class.java)\n        binding?.downloadsViewModel = downloadsViewModel\n        binding?.lifecycleOwner = this\n        binding?.downloadList?.adapter = DownloadHeaderAdapter(downloadsViewModel)\n        binding?.downloadList?.layoutManager = LinearLayoutManager(context)"}], "metadata": {"task_id": "cloudstream/318", "ground_truth": "            binding?.downloadList?.adapter?.notifyDataSetChanged()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\download\\DownloadFragment.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.VideoDownloadManager\nimport android.view.View\noverride fun onDestroyView() {\r\n        if (downloadDeleteEventListener != null) {\r\n            VideoDownloadManager.downloadDeleteEvent -= downloadDeleteEventListener!!\r", "choices": [{"text": "\n import com.lagradost.cloudstream3.utils.VideoDownloadManager\nimport android.view.View\noverride fun onDestroyView() {\r\n        if (downloadDeleteEventListener!= null) {\r\n            VideoDownloadManager.downloadDeleteEvent -= downloadDeleteEventListener!!\r\n}\r\n        super.onDestroyView()\r\n    }\n"}], "metadata": {"task_id": "cloudstream/319", "ground_truth": "            downloadDeleteEventListener = null\r\n        }\r\n        binding = null\r\n        super.onDestroyView()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\download\\DownloadFragment.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.databinding.DownloadHeaderEpisodeBinding\nimport com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n        return DownloadHeaderViewHolder(\r\n            DownloadHeaderEpisodeBinding.inflate(\r\n                LayoutInflater.from(parent.context),\r\n                parent,\r\n                false\r", "choices": [{"text": "))\r\n    }\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        (holder as DownloadHeaderViewHolder).bind(getItem(position))\r\n    }\noverride fun getItemCount(): Int = items.size\nclass DownloadHeaderViewHolder(private val binding: DownloadHeaderEpisodeBinding) : RecyclerView.ViewHolder(binding.root) {\r\n    fun bind(item: DownloadHeaderItem) {\r\n        binding.item = item\r\n        binding.executePendingBindings()\r\n    }\n}\n<file_sep>/app/src/main/java/com/lagradost/cloudstream3/ui/download/Download"}], "metadata": {"task_id": "cloudstream/321", "ground_truth": "            ),\r\n            clickCallback,\r\n            movieClickCallback\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\download\\DownloadHeaderAdapter.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        when (holder) {\r", "choices": [{"text": "//            is ViewHolder -> holder.bind(items[position])\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "cloudstream/322", "ground_truth": "            is DownloadHeaderViewHolder -> {\r\n                holder.bind(cardList[position])\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\download\\DownloadHeaderAdapter.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nimport android.graphics.Rect\noverride fun getItemOffsets(\r\n        outRect: Rect,\r\n        view: View,\r\n        parent: RecyclerView,\r\n        state: RecyclerView.State\r\n    ) {\r\n        if (parent.getChildAdapterPosition(view) == 0) {\r\n            customView.measure(\r\n                View.MeasureSpec.makeMeasureSpec(parent.measuredWidth, View.MeasureSpec.AT_MOST),\r\n                View.MeasureSpec.makeMeasureSpec(parent.measuredHeight, View.MeasureSpec.AT_MOST)\r\n            )\r", "choices": [{"text": "//            outRect.top = customView.measuredHeight\r\n        } else {\r\n            outRect.top = 0\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/324", "ground_truth": "            outRect.set(0, customView.measuredHeight, 0, 0)\r\n        } else {\r\n            outRect.setEmpty()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\HeaderViewDecoration.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.SearchResponse\nimport com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.DiffUtil\nfun updateList(newList: List<SearchResponse>) {\r\n        val diffResult = DiffUtil.calculateDiff(\r\n            HomeChildDiffCallback(this.cardList, newList)\r\n        )\r\n\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/326", "ground_truth": "        cardList.clear()\r\n        cardList.addAll(newList)\r\n\r\n        diffResult.dispatchUpdatesTo(this)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\home\\HomeChildItemAdapter.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.AppUtils.ownHide\nimport android.view.View\noverride fun onDestroyView() {\r\n        bottomSheetDialog?.ownHide()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/330", "ground_truth": "        binding = null\r\n        super.onDestroyView()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\home\\HomeFragment.kt"}}
{"prompt": " import com.lagradost.cloudstream3.utils.UIHelper.getSpanCount\nval apiChangeClickListener\nval configEvent\nvar bottomSheetDialog BottomSheetDialog?\nprivate fun fixGrid() {\r\n        activity?.getSpanCount()?.let {\r\n            currentSpan = it\r", "choices": [{"text": "//            if (currentSpan!= it) {\r\n//                currentSpan = it\r\n//                recyclerView.layoutManager = GridLayoutManager(activity, currentSpan)\r\n//            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/331", "ground_truth": "        }\r\n        configEvent.invoke(currentSpan)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\home\\HomeFragment.kt"}}
{"prompt": "\n import android.content.res.Configuration\noverride fun onConfigurationChanged(newConfig: Configuration) {\r\n        super.onConfigurationChanged(newConfig)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/332", "ground_truth": "        //(home_preview_viewpager?.adapter as? HomeScrollAdapter)?.notifyDataSetChanged()\r\n        fixGrid()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\home\\HomeFragment.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        when (holder) {\r", "choices": [{"text": "//            is ViewHolder -> holder.bind(items[position])\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "cloudstream/333", "ground_truth": "            is ParentViewHolder -> {\r\n                holder.bind(items[position])\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\home\\HomeParentItemAdapter.kt"}}
{"prompt": " import com.lagradost.cloudstream3.HomePageList\nval title TextView\nval startFocus\nval recyclerView RecyclerView\n @JvmName(\"updateListHomePageList\")\r\n    fun updateList(newList: List<HomePageList>) {\r", "choices": [{"text": "val adapter = recyclerView.adapter as HomePageListAdapter\r\n        adapter.updateList(newList)\r\n    }\n"}], "metadata": {"task_id": "cloudstream/334", "ground_truth": "        updateList(newList.map { HomeViewModel.ExpandableHomepageList(it, 1, false) }\r\n            .toMutableList())\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\home\\HomeParentItemAdapter.kt"}}
{"prompt": "\n import android.view.View\noverride fun getItemViewType(position: Int) = when (position) {\r", "choices": [{"text": "-   0 -> 0\r\n-   1 -> 1\r\n-   2 -> 2\r\n-   3 -> 3\r\n-   4 -> 4\r\n-   5 -> 5\r\n-   6 -> 6\r\n-   7 -> 7\r\n-   8 -> 8\r\n-   9 -> 9\r\n-   10 -> 10\r\n-   11 -> 11\r\n-   12 -> 12\r\n-   13 -> 13\r\n-   14 -> 1"}], "metadata": {"task_id": "cloudstream/335", "ground_truth": "        0 -> VIEW_TYPE_HEADER\r\n        else -> VIEW_TYPE_ITEM\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\home\\HomeParentItemAdapterPreview.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        when (holder) {\r\n            is HeaderViewHolder -> {}\r", "choices": [{"text": "//            is ItemViewHolder -> {\r\n//                val item = items[position]\r\n//                holder.bind(item)\r\n//            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/336", "ground_truth": "            else -> super.onBindViewHolder(holder, position - headItems)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\home\\HomeParentItemAdapterPreview.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onViewDetachedFromWindow(holder: RecyclerView.ViewHolder) {\r\n        when (holder) {\r\n            is HeaderViewHolder -> {\r\n                holder.onViewDetachedFromWindow()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/338", "ground_truth": "            }\r\n\r\n            else -> super.onViewDetachedFromWindow(holder)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\home\\HomeParentItemAdapterPreview.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onViewAttachedToWindow(holder: RecyclerView.ViewHolder) {\r\n        when (holder) {\r\n            is HeaderViewHolder -> {\r\n                holder.onViewAttachedToWindow()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/339", "ground_truth": "            }\r\n\r\n            else -> super.onViewAttachedToWindow(holder)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\home\\HomeParentItemAdapterPreview.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.LoadResponse\nimport androidx.recyclerview.widget.DiffUtil\nfun setItems(newItems: List<LoadResponse>, hasNext: Boolean): Boolean {\r\n        val isSame = newItems.firstOrNull()?.url == items.firstOrNull()?.url\r\n        hasMoreItems = hasNext\r\n\r\n        val diffResult = DiffUtil.calculateDiff(\r\n            HomeScrollDiffCallback(this.items, newItems)\r\n        )\r\n\r\n        items.clear()\r\n        items.addAll(newItems)\r\n\r", "choices": [{"text": "//        if (isSame) {\r\n//            diffResult.dispatchUpdatesTo(this)\r\n//        } else {\r\n//            diffResult.dispatchUpdatesTo(this)\r\n//        }\r\n\r\n        return isSame\r\n    }\n"}], "metadata": {"task_id": "cloudstream/340", "ground_truth": "\r\n        diffResult.dispatchUpdatesTo(this)\r\n\r\n        return isSame\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\home\\HomeScrollAdapter.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.ui.settings.SettingsFragment.Companion.isTvSettings\nimport com.lagradost.cloudstream3.databinding.HomeScrollViewTvBinding\nimport com.lagradost.cloudstream3.databinding.HomeScrollViewBinding\nimport androidx.viewbinding.ViewBinding\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n        val inflater = LayoutInflater.from(parent.context)\r\n        val binding = if (isTvSettings()) {\r\n            HomeScrollViewTvBinding.inflate(inflater, parent, false)\r\n        } else {\r\n            HomeScrollViewBinding.inflate(inflater, parent, false)\r\n        }\r\n\r", "choices": [{"text": "return HomeViewHolder(binding)\r\n}\n"}], "metadata": {"task_id": "cloudstream/341", "ground_truth": "        return CardViewHolder(\r\n            binding,\r\n            //forceHorizontalPosters\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\home\\HomeScrollAdapter.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        when (holder) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/342", "ground_truth": "            is CardViewHolder -> {\r\n                holder.bind(items[position])\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\home\\HomeScrollAdapter.kt"}}
{"prompt": "\n import android.view.View\noverride fun transformPage(page: View, position: Float) {\r\n        //page.translationX = -position * page.width / 2.0f\r\n\r\n        //val params = RecyclerView.LayoutParams(\r\n        //    RecyclerView.LayoutParams.MATCH_PARENT,\r\n        //    0\r\n        //)\r\n        //page.layoutParams = params\r\n        //progressBar?.layoutParams = params\r\n\r\n        val padding = (-position * page.width / 2).toInt()\r", "choices": [{"text": "//        page.setPadding(padding, 0, padding, 0)\r\n        page.translationX = -position * page.width / 2.0f\r\n        page.translationY = -position * page.height / 2.0f\r\n        page.scaleX = 1 - Math.abs(position)\r\n        page.scaleY = 1 - Math.abs(position)\r\n        page.alpha = 0.5f + (1 - Math.abs(position)) * 0.5f\r\n    }\r\n}<file_sep>/app/src/main/java/com/example"}], "metadata": {"task_id": "cloudstream/343", "ground_truth": "        page.setPadding(\r\n            padding, 0,\r\n            -padding, 0\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\home\\HomeScrollTransformer.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/344", "ground_truth": "        binding = null\r\n        super.onDestroyView()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\library\\LibraryFragment.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        binding?.viewpager?.currentItem?.let { currentItem ->\r\n            outState.putInt(VIEWPAGER_ITEM_KEY, currentItem)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/345", "ground_truth": "        }\r\n        super.onSaveInstanceState(outState)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\library\\LibraryFragment.kt"}}
{"prompt": "\n import android.content.res.Configuration\noverride fun onConfigurationChanged(newConfig: Configuration) {\r", "choices": [{"text": "super.onConfigurationChanged(newConfig)\r\nif (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n//landscape\r\n} else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {\r\n//portrait\r\n}\r\n}\n"}], "metadata": {"task_id": "cloudstream/346", "ground_truth": "        (binding?.viewpager?.adapter as? ViewpagerAdapter)?.rebind()\r\n        super.onConfigurationChanged(newConfig)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\library\\LibraryFragment.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.syncproviders.AccountManager.Companion.SyncApis\nfun switchList(name: String) {\r\n        currentSyncApi = availableSyncApis[availableApiNames.indexOf(name)]\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "cloudstream/348", "ground_truth": "        _currentApiName.postValue(currentSyncApi?.name)\r\n        reloadPages(true)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\library\\LibraryViewModel.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.Coroutines.ioSafe\nimport com.lagradost.cloudstream3.mvvm.Resource\nimport com.lagradost.cloudstream3.R\nfun sort(method: ListSorting, query: String? = null) = ioSafe {\r\n        val value = _pages.value ?: return@ioSafe\r\n        if (value is Resource.Success) {\r", "choices": [{"text": "\n import com.lagradost.cloudstream3.utils.Coroutines.ioSafe\nimport com.lagradost.cloudstream3.mvvm.Resource\nimport com.lagradost.cloudstream3.R\nfun sort(method: ListSorting, query: String? = null) = ioSafe {\r\n        val value = _pages.value?: return@ioSafe\r\n        if (value is Resource.Success) {\r\n//            val list = value.data.sortedWith(method)\r\n            val list = value.data.sortedWith(method)\r\n            _pages.value = Resource.Success(list)\r\n        }\r\n    }\n\nfun sort(method: ListSorting, query: String? = null) = ioSafe {\r\n        val value = _pages.value?: return@ioSafe\r\n        if (value is Resource.Success) {\r\n//            val list = value.data.sortedWith(method)\r\n            val list = value.data.sortedWith(method)\r\n            _pages.value = Resource.Success(list"}], "metadata": {"task_id": "cloudstream/349", "ground_truth": "            sort(method, query, value.value)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\library\\LibraryViewModel.kt"}}
{"prompt": "\n override fun onCleared() {\r", "choices": [{"text": "//     super.onCleared()\r\n     viewModelScope.cancel()\r\n }\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/351", "ground_truth": "        MainActivity.reloadLibraryEvent -= ::reloadPages\r\n        super.onCleared()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\library\\LibraryViewModel.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.databinding.SearchResultGridExpandedBinding\nimport com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n        return LibraryItemViewHolder(\r\n            SearchResultGridExpandedBinding.inflate(\r\n                LayoutInflater.from(parent.context),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/352", "ground_truth": "                parent,\r\n                false\r\n            )\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\library\\PageAdapter.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n        return PageViewHolder(\r", "choices": [{"text": "LayoutInflater.from(parent.context).inflate(R.layout.page_item, parent, false)\r\n        )\r\n    }\n"}], "metadata": {"task_id": "cloudstream/355", "ground_truth": "            LibraryViewpagerPageBinding.inflate(LayoutInflater.from(parent.context), parent, false)\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\library\\ViewpagerAdapter.kt"}}
{"prompt": "\nval unbound\n fun rebind() {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "cloudstream/357", "ground_truth": "        unbound.addAll(0..pages.size)\r\n        this.notifyItemRangeChanged(0, pages.size)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\library\\ViewpagerAdapter.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/358", "ground_truth": "        currentColor = 0\r\n        super.onDestroy()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\MiniControllerFragment.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport android.os.Build\nprivate fun requestAudioFocus() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r", "choices": [{"text": "val audioAttributes = AudioAttributes.Builder()\r\n.setUsage(AudioAttributes.USAGE_MEDIA)\r\n.setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)\r\n.build()\r\nval audioFocusRequest = AudioFocusRequest.Builder(AudioManager.AUDIOFOCUS_GAIN)\r\n.setAudioAttributes(audioAttributes)\r\n.setAcceptsDelayedFocusGain(true)\r\n.setOnAudioFocusChangeListener(audioFocusChangeListener)\r\n.build()\r\naudioManager.requestAudioFocus(audioFocusRequest)\r\n} else {\r\naudioManager."}], "metadata": {"task_id": "cloudstream/360", "ground_truth": "            activity?.requestLocalAudioFocus(AppUtils.getFocusRequest())\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\AbstractPlayerFragment.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.ui.subtitles.SaveCaptionStyle\nprivate fun onSubStyleChanged(style: SaveCaptionStyle) {\r\n        if (player is CS3IPlayer) {\r", "choices": [{"text": "//            player.subtitleStyle = style\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/361", "ground_truth": "            player.updateSubtitleStyle(style)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\AbstractPlayerFragment.kt"}}
{"prompt": " import com.lagradost.cloudstream3.R\nvar resizeMode Int\nvar playerView PlayerView?\nvar playerBuffering ProgressBar?\nfun nextResize() {\r", "choices": [{"text": "resizeMode = (resizeMode + 1) % 3\r\nplayerView?.resizeMode = resizeMode\r\n}\n"}], "metadata": {"task_id": "cloudstream/363", "ground_truth": "        resizeMode = (resizeMode + 1) % PlayerResize.values().size\r\n        resize(resizeMode, true)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\AbstractPlayerFragment.kt"}}
{"prompt": "\n override fun onStop() {\r", "choices": [{"text": "super.onStop()\r\nLog.d(\"onStop\", \"onStop\")\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nLog.d(\"onDestroy\", \"onDestroy\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/365", "ground_truth": "        player.onStop()\r\n        super.onStop()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\AbstractPlayerFragment.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\noverride fun onResume() {\r\n        context?.let { ctx ->\r", "choices": [{"text": "//            val intent = Intent(ctx, MainActivity::class.java)\r\n//            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK\r\n//            ctx.startActivity(intent)\r\n        }\r\n        super.onResume()\r\n    }\n"}], "metadata": {"task_id": "cloudstream/366", "ground_truth": "            player.onResume(ctx)\r\n        }\r\n\r\n        super.onResume()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\AbstractPlayerFragment.kt"}}
{"prompt": "\n import androidx.media3.common.Player\nimport android.os.Handler\noverride fun initCallbacks(\r\n        eventHandler: ((PlayerEvent) -> Unit),\r\n        requestedListeningPercentages: List<Int>?,\r\n    ) {\r", "choices": [{"text": "//        val eventHandler = Handler(Looper.getMainLooper())\r\n//        eventHandler.post {\r\n//            eventHandler(PlayerEvent.PlaybackStateChanged(Player.STATE_IDLE))\r\n//        }\r\n        eventHandler(PlayerEvent.PlaybackStateChanged(Player.STATE_IDLE))\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/368", "ground_truth": "        this.requestedListeningPercentages = requestedListeningPercentages\r\n        this.eventHandler = eventHandler\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\CS3IPlayer.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.mvvm.logError\nimport com.lagradost.cloudstream3.app\nimport androidx.media3.common.Player\nimport android.os.Looper\nimport android.os.Handler\nprivate fun reloadSubs() {\r\n        exoPlayer?.applicationLooper?.let {\r\n            try {\r\n                Handler(it).post {\r\n                    try {\r\n                        seekTime(1L, source = PlayerEventSource.Player)\r\n                    } catch (e: Exception) {\r\n                        logError(e)\r\n                    }\r\n                }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/369", "ground_truth": "            } catch (e: Exception) {\r\n                logError(e)\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\CS3IPlayer.kt"}}
{"prompt": "\nvar currentSubtitles SubtitleData?\nvar isPlaying\nvar playerSelectedSubtitleTracks\n override fun setActiveSubtitles(subtitles: Set<SubtitleData>) {\r", "choices": [{"text": "//        if (subtitles.isEmpty()) {\r\n//            return\r\n//        }\r\n//        currentSubtitles = subtitles.first()\r\n//        playerSelectedSubtitleTracks = subtitles.first().tracks\r\n//        val subtitleTrack = playerSelectedSubtitleTracks.first()\r\n//        val subtitleTrackIndex = player.subtitleTracks.indexOf(subtitleTrack)\r\n//        player.selectSubtitleTrack(subtitleTrackIndex)\r\n//        player.subtitleTracks.forEachIndexed { index, track ->\r\n//            if (index!= subtitleTrackIndex) {\r\n"}], "metadata": {"task_id": "cloudstream/370", "ground_truth": "        Log.i(TAG, \"setActiveSubtitles ${subtitles.size}\")\r\n        subtitleHelper.setAllSubtitles(subtitles)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\CS3IPlayer.kt"}}
{"prompt": "\n import androidx.media3.common.Tracks\nimport androidx.media3.common.Format\nprivate fun List<Tracks.Group>.getFormats(): List<Pair<Format, Int>> {\r\n        return this.map {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/371", "ground_truth": "            it.getFormats()\r\n        }.flatten()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\CS3IPlayer.kt"}}
{"prompt": "\n import androidx.media3.common.Format\nprivate fun Format.toAudioTrack(): AudioTrack {\r\n        return AudioTrack(\r\n            this.id,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/373", "ground_truth": "            this.label,\r\n//            isPlaying,\r\n            this.language\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\CS3IPlayer.kt"}}
{"prompt": " import androidx.media3.common.Format\nvar videoBufferMs\nvar preferredAudioTrackLanguage String?\nval imageGenerator\nprivate fun Format.toVideoTrack(): VideoTrack {\r\n        return VideoTrack(\r\n            this.id,\r\n            this.label,\r\n//            isPlaying,\r", "choices": [{"text": "//            isSelected,\r\n            this.format,\r\n            this.width,\r\n            this.height,\r\n            this.bitrate,\r\n            this.frameRate,\r\n            this.duration,\r\n            this.rotationDegrees,\r\n            this.colorSpace,\r\n            this.pixelWidthHeightRatio,\r\n            this.pixelAspectRatio,\r\n            this.pixelAspectRatioWidth,\r\n            this.pixelAspectRatioHeight,\r\n            this.pixelAspectRatioType,\r\n            this.pixelAspectRatioHorizontalSpacing,\r\n            this.pixelAspectRatioVerticalSpacing,\r\n            this.pixelAspectRatioHorizontalSpacingType,\r\n            this.pixelAspectRatioVerticalSpacingType,\r\n            this.pixelAspectRatioHorizontalSpacingValue,"}], "metadata": {"task_id": "cloudstream/374", "ground_truth": "            this.language,\r\n            this.width,\r\n            this.height\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\CS3IPlayer.kt"}}
{"prompt": "\nvar currentSubtitleOffset Long\nvar requestSubtitleUpdate\nvar isPlaying\n override fun setSubtitleOffset(offset: Long) {\r", "choices": [{"text": "currentSubtitleOffset = offset\r\nrequestSubtitleUpdate = true\r\n}\n"}], "metadata": {"task_id": "cloudstream/375", "ground_truth": "        currentSubtitleOffset = offset\r\n        currentTextRenderer?.setRenderOffsetMs(offset)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\CS3IPlayer.kt"}}
{"prompt": "\n import androidx.media3.common.Player\nimport androidx.media3.common.Format\nimport android.util.Rational\nimport android.annotation.SuppressLint\n @SuppressLint(\"UnsafeOptInUsageError\")\r\n    override fun getAspectRatio(): Rational? {\r\n        return exoPlayer?.videoFormat?.let { format ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/377", "ground_truth": "            Rational(format.width, format.height)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\CS3IPlayer.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.app\nimport androidx.media3.common.Player\nimport android.util.Log\nprivate fun releasePlayer(saveTime: Boolean = true) {\r\n        Log.i(TAG, \"releasePlayer\")\r\n\r\n        if (saveTime)\r\n            updatedTime()\r\n\r\n        exoPlayer?.apply {\r\n            setPlayWhenReady(false)\r\n            stop()\r\n            release()\r\n        }\r\n        //simpleCache?.release()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/379", "ground_truth": "        currentTextRenderer = null\r\n\r\n        exoPlayer = null\r\n        //simpleCache = null\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\CS3IPlayer.kt"}}
{"prompt": "\n import android.util.Log\noverride fun onStop() {\r\n        Log.i(TAG, \"onStop\")\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/380", "ground_truth": "\r\n        saveData()\r\n        handleEvent(CSPlayerEvent.Pause, PlayerEventSource.Player)\r\n        //releasePlayer()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\CS3IPlayer.kt"}}
{"prompt": "\n import android.util.Log\noverride fun onPause() {\r\n        Log.i(TAG, \"onPause\")\r\n        saveData()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/381", "ground_truth": "        handleEvent(CSPlayerEvent.Pause, PlayerEventSource.Player)\r\n        //releasePlayer()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\CS3IPlayer.kt"}}
{"prompt": "\n import android.content.Context\noverride fun onResume(context: Context) {\r", "choices": [{"text": "//do something\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/382", "ground_truth": "        if (exoPlayer == null)\r\n            reloadPlayer(context)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\CS3IPlayer.kt"}}
{"prompt": "\nvar exoPlayer ExoPlayer?\nvar isPlaying\nval imageGenerator\n override fun release() {\r", "choices": [{"text": "exoPlayer?.release()\r\n}\n"}], "metadata": {"task_id": "cloudstream/383", "ground_truth": "        imageGenerator.release()\r\n        releasePlayer()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\CS3IPlayer.kt"}}
{"prompt": "\n override fun setPlaybackSpeed(speed: Float) {\r", "choices": [{"text": "//     Log.d(\"setPlaybackSpeed\", speed.toString())\r\n     if (speed == 0f) {\r\n         player.setPlaybackParams(PlaybackParams().setSpeed(1f))\r\n     } else {\r\n         player.setPlaybackParams(PlaybackParams().setSpeed(speed))\r\n     }\r\n }\r\n"}], "metadata": {"task_id": "cloudstream/384", "ground_truth": "        exoPlayer?.setPlaybackSpeed(speed)\r\n        playBackSpeed = speed\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\CS3IPlayer.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.app\nimport com.lagradost.cloudstream3.USER_AGENT\nimport androidx.media3.datasource.okhttp.OkHttpDataSource\nimport androidx.media3.datasource.HttpDataSource\nimport androidx.media3.datasource.DataSource\nimport android.annotation.SuppressLint\n @SuppressLint(\"UnsafeOptInUsageError\")\r\n        private fun createOnlineSource(headers: Map<String, String>): HttpDataSource.Factory {\r\n            val source = OkHttpDataSource.Factory(app.baseClient).setUserAgent(USER_AGENT)\r\n            return source.apply {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/385", "ground_truth": "                setDefaultRequestProperties(headers)\r\n            }\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\CS3IPlayer.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.EpisodeSkip\nimport androidx.media3.common.Player\nprivate fun getCurrentTimestamp(writePosition: Long? = null): EpisodeSkip.SkipStamp? {\r\n        val position = writePosition ?: this@CS3IPlayer.getPosition() ?: return null\r\n        for (lastTimeStamp in lastTimeStamps) {\r\n            if (lastTimeStamp.startMs <= position && (position + (toleranceBeforeUs / 1000L) + 1) < lastTimeStamp.endMs) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/388", "ground_truth": "                return lastTimeStamp\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\CS3IPlayer.kt"}}
{"prompt": "\n import androidx.media3.common.Player\noverride fun seekTo(time: Long, source: PlayerEventSource) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "cloudstream/389", "ground_truth": "        updatedTime(time, source)\r\n        exoPlayer?.seekTo(time)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\CS3IPlayer.kt"}}
{"prompt": " import androidx.media3.exoplayer.ExoPlayer\nimport androidx.media3.common.Player\nval seekActionTime\nvar videoBufferMs\nvar isPlaying\nprivate fun ExoPlayer.seekTime(time: Long, source: PlayerEventSource) {\r", "choices": [{"text": "if (isPlaying) {\r\nif (source == PlayerEventSource.USER) {\r\nseekActionTime = time\r\n}\r\nif (source == PlayerEventSource.VIDEO_BUFFER) {\r\nvideoBufferMs = time\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}"}], "metadata": {"task_id": "cloudstream/390", "ground_truth": "        updatedTime(currentPosition + time, source)\r\n        seekTo(currentPosition + time)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\CS3IPlayer.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.preference.PreferenceManager\nimport android.content.Context\nfun updateForcedEncoding(context: Context) {\r\n            val settingsManager = PreferenceManager.getDefaultSharedPreferences(context)\r\n            val value = settingsManager.getString(\r\n                context.getString(R.string.subtitles_encoding_key),\r\n                null\r\n            )\r\n            overrideEncoding = if (value.isNullOrBlank()) {\r", "choices": [{"text": "//                Log.d(\"updateForcedEncoding\", \"null or blank\")\r\n                null\r\n            } else {\r\n//                Log.d(\"updateForcedEncoding\", \"not null or blank\")\r\n                value\r\n            }\r\n        }<file_sep>/app/src/main/java/com/lagradost/cloudstream3/ui/settings/SettingsFragment.kt\npackage com.lagradost.cloudstream3.ui.settings\n\nimport android.content.Context\nimport android.content.Intent\nimport android.content.SharedPreferences\nimport android.os.Bundle\nimport android.preference.PreferenceManager"}], "metadata": {"task_id": "cloudstream/392", "ground_truth": "                null\r\n            } else {\r\n                value\r\n            }\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\CustomSubtitleDecoderFactory.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nfun trimStr(string: String): String {\r\n            return string.trimStart().trim('\\uFEFF', '\\u200B').replace(\r\n                Regex(\"[\\u00A0\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u205F]\"),\r", "choices": [{"text": "\"\")\r\n        }\n"}], "metadata": {"task_id": "cloudstream/393", "ground_truth": "                \" \"\r\n            )\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\CustomSubtitleDecoderFactory.kt"}}
{"prompt": " import androidx.media3.extractor.text.SubtitleInputBuffer\nvar uppercaseSubtitles\nval captionRegex\nval bloatRegex\noverride fun dequeueInputBuffer(): SubtitleInputBuffer {\r", "choices": [{"text": "val buffer = SubtitleInputBuffer(1000000)\nbuffer.setTimestampUs(0)\nbuffer.setFlags(0)\nbuffer.setFormat(Format.createSubtitleSampleFormat(null, MimeTypes.TEXT_VTT, Format.NO_VALUE, Format.NO_VALUE, Format.NO_VALUE, Format.NO_VALUE, Format.NO_VALUE, Format.NO_VALUE, Format.NO_VALUE, Format.NO_VALUE, Format.NO_VALUE, Format.NO_VALUE, Format.NO_VALUE, Format.NO_VALUE"}], "metadata": {"task_id": "cloudstream/394", "ground_truth": "        Log.i(TAG, \"dequeueInputBuffer\")\r\n        return realDecoder?.dequeueInputBuffer() ?: SubtitleInputBuffer()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\CustomSubtitleDecoderFactory.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.CommonActivity\nimport android.view.KeyEvent\noverride fun dispatchKeyEvent(event: KeyEvent?): Boolean {\r\n        CommonActivity.dispatchKeyEvent(this, event)?.let {\r\n            return it\r", "choices": [{"text": "\n        }\r\n        return super.dispatchKeyEvent(event)\r\n    }\n"}], "metadata": {"task_id": "cloudstream/397", "ground_truth": "        }\r\n        return super.dispatchKeyEvent(event)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\DownloadedPlayerActivity.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.CommonActivity\nimport android.view.KeyEvent\noverride fun onKeyDown(keyCode: Int, event: KeyEvent?): Boolean {\r\n        CommonActivity.onKeyDown(this, keyCode, event)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/398", "ground_truth": "\r\n        return super.onKeyDown(keyCode, event)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\DownloadedPlayerActivity.kt"}}
{"prompt": "\n override fun onUserLeaveHint() {\r", "choices": [{"text": "//     super.onUserLeaveHint()\r\n }\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/399", "ground_truth": "        super.onUserLeaveHint()\r\n        CommonActivity.onUserLeaveHint(this)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\DownloadedPlayerActivity.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.UIHelper.navigate\nimport com.lagradost.cloudstream3.R\nprivate fun playLink(url: String) {\r\n        this.navigate(\r\n            R.id.global_to_navigation_player, GeneratorPlayer.newInstance(\r\n                LinkGenerator(\r\n                    listOf(\r\n                        BasicLink(url)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/400", "ground_truth": "                    )\r\n                )\r\n            )\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\DownloadedPlayerActivity.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\nfinish()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/401", "ground_truth": "        super.onResume()\r\n        CommonActivity.setActivityInstance(this)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\DownloadedPlayerActivity.kt"}}
{"prompt": "\n override fun next() {\r", "choices": [{"text": "// 1. \u8c03\u7528\u7236\u7c7b\u7684next()\u65b9\u6cd5\uff0c\u83b7\u53d6\u5230\u5f53\u524d\u7684\u5143\u7d20\r\n// 2. \u8c03\u7528\u7236\u7c7b\u7684next()\u65b9\u6cd5\uff0c\u83b7\u53d6\u5230\u4e0b\u4e00\u4e2a\u5143\u7d20\r\n// 3. \u8c03\u7528\u7236\u7c7b\u7684next()\u65b9\u6cd5\uff0c\u83b7\u53d6\u5230\u4e0b\u4e0b\u4e00\u4e2a\u5143\u7d20\r\n// 4. \u8c03\u7528\u7236\u7c7b\u7684next()\u65b9\u6cd5\uff0c\u83b7\u53d6\u5230\u4e0b\u4e0b\u4e0b\u4e00\u4e2a\u5143\u7d20\r\n// 5. \u8c03\u7528\u7236\u7c7b\u7684next()\u65b9\u6cd5\uff0c\u83b7\u53d6\u5230\u4e0b\u4e0b\u4e0b\u4e0b\u4e00\u4e2a\u5143\u7d20\r\n// 6. \u8c03\u7528\u7236\u7c7b\u7684next()\u65b9\u6cd5\uff0c\u83b7\u53d6\u5230\u4e0b\u4e0b\u4e0b\u4e0b\u4e0b\u4e00\u4e2a\u5143\u7d20\r\n// 7"}], "metadata": {"task_id": "cloudstream/402", "ground_truth": "        if (hasNext())\r\n            currentIndex++\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\DownloadFileGenerator.kt"}}
{"prompt": "\n override fun prev() {\r", "choices": [{"text": "//     if (currentPosition > 0) {\r\n//         currentPosition--\r\n//         notifyDataSetChanged()\r\n//     }\r\n }\r\n\r\n override fun next() {\r\n//     if (currentPosition < data.size - 1) {\r\n//         currentPosition++\r\n//         notifyDataSetChanged()\r\n//     }\r\n }\r\n\r\n override fun getCount(): Int {\r\n//     return data.size\r\n }\r\n\r\n override fun getItem(position: Int): Any {\r\n//     return data[position]\r\n }\r\n\r\n override fun getItemId(position: Int"}], "metadata": {"task_id": "cloudstream/403", "ground_truth": "        if (hasPrev())\r\n            currentIndex--\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\DownloadFileGenerator.kt"}}
{"prompt": "\nval hasCache\n override fun goto(index: Int) {\r", "choices": [{"text": "+    if (index < 0 || index >= size) {\r\n+        throw IndexOutOfBoundsException(\"Index: $index, Size: $size\")\r\n+    }\r\n     if (index == current) {\r\n         return\r\n     }\r\n"}], "metadata": {"task_id": "cloudstream/404", "ground_truth": "        // clamps value\r\n        currentIndex = min(episodes.size - 1, max(0, index))\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\DownloadFileGenerator.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.ExtractorUri\nimport com.lagradost.cloudstream3.utils.ExtractorLink\noverride suspend fun generateLinks(\r\n        clearCache: Boolean,\r\n        type: LoadType,\r\n        callback: (Pair<ExtractorLink?, ExtractorUri?>) -> Unit,\r\n        subtitleCallback: (SubtitleData) -> Unit,\r\n        offset: Int\r\n    ): Boolean {\r\n        subtitles.forEach(subtitleCallback)\r\n        val allowedTypes = type.toSet()\r\n        links.forEach {\r\n            if(allowedTypes.contains(it.type)) {\r\n                callback.invoke(it to null)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/405", "ground_truth": "            }\r\n        }\r\n\r\n        return true\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\ExtractorLinkGenerator.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val root = super.onCreateView(inflater, container, savedInstanceState) ?: return null\r", "choices": [{"text": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val root = super.onCreateView(inflater, container, savedInstanceState)?: return null\r\n//        val view = inflater.inflate(R.layout.fragment_main, container, false)\r\n//        return view\r\n        return root\r\n    }\r\n}<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\r\n\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.FragmentManager\r\n"}], "metadata": {"task_id": "cloudstream/406", "ground_truth": "        playerBinding = PlayerCustomLayoutBinding.bind(root.findViewById(R.id.player_holder))\r\n        return root\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\FullScreenPlayer.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/407", "ground_truth": "        playerBinding = null\r\n        super.onDestroyView()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\FullScreenPlayer.kt"}}
{"prompt": "\nvar subtitleDelay\nvar playerBinding PlayerCustomLayoutBinding?\nvar autoPlayerRotateEnabled\n override fun subtitlesChanged() {\r", "choices": [{"text": "//        subtitleDelay = 0\r\n//        subtitleDelay = 0\r\n//        subtitleDelay = 0\r\n//        subtitleDelay = 0\r\n//        subtitleDelay = 0\r\n//        subtitleDelay = 0\r\n//        subtitleDelay = 0\r\n//        subtitleDelay = 0\r\n//        subtitleDelay = 0\r\n//        subtitleDelay = 0\r\n//        subtitleDelay = 0\r\n//        subtitleDelay = 0\r\n//        subtitleDelay = 0\r\n//        subtitleDelay = 0\r\n//"}], "metadata": {"task_id": "cloudstream/409", "ground_truth": "        playerBinding?.playerSubtitleOffsetBtt?.isGone =\r\n            player.getCurrentPreferredSubtitle() == null\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\FullScreenPlayer.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.UIHelper.hideSystemUI\nimport com.lagradost.cloudstream3.R\nimport android.view.WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES\nimport android.os.Build\nprotected fun enterFullscreen() {\r\n        if (isFullScreenPlayer) {\r\n            activity?.hideSystemUI()\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P && fullscreenNotch) {\r\n                val params = activity?.window?.attributes\r\n                params?.layoutInDisplayCutoutMode = LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES\r", "choices": [{"text": "//                params?.layoutInDisplayCutoutMode = LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER\r\n                activity?.window?.attributes = params\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/410", "ground_truth": "                activity?.window?.attributes = params\r\n            }\r\n        }\r\n        updateOrientation()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\FullScreenPlayer.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\nfinish()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/411", "ground_truth": "        enterFullscreen()\r\n        super.onResume()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\FullScreenPlayer.kt"}}
{"prompt": "\n override fun onDestroy() {\r\n        exitFullscreen()\r\n        player.release()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/412", "ground_truth": "        player.releaseCallbacks()\r\n        super.onDestroy()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\FullScreenPlayer.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.DataStoreHelper\nimport com.lagradost.cloudstream3.R\nprivate fun setPlayBackSpeed(speed: Float) {\r\n        try {\r\n            DataStoreHelper.playBackSpeed = speed\r\n            playerBinding?.playerSpeedBtt?.text =\r\n                getString(R.string.player_speed_text_format).format(speed)\r\n                    .replace(\".0x\", \"x\")\r\n        } catch (e: Exception) {\r\n            // the format string was wrong\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/413", "ground_truth": "            logError(e)\r\n        }\r\n\r\n        player.setPlaybackSpeed(speed)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\FullScreenPlayer.kt"}}
{"prompt": "\n private fun toggleShowDelayed() {\r\n        if (doubleTapEnabled || doubleTapPauseEnabled) {\r\n            val index = currentDoubleTapIndex\r\n            playerBinding?.playerHolder?.postDelayed({\r\n                if (index == currentDoubleTapIndex) {\r\n                    onClickChange()\r\n                }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/418", "ground_truth": "            }, DOUBLE_TAB_MINIMUM_TIME_BETWEEN)\r\n        } else {\r\n            onClickChange()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\FullScreenPlayer.kt"}}
{"prompt": "\n private fun convertTimeToString(sec: Long): String {\r\n            val rsec = sec % 60L\r\n            val min = ceil((sec - rsec) / 60.0).toInt()\r\n            val rmin = min % 60L\r\n            val h = ceil((min - rmin) / 60.0).toLong()\r\n            //int rh = h;// h % 24;\r\n            return (if (h > 0) forceLetters(h) + \":\" else \"\") + (if (rmin >= 0 || h >= 0) forceLetters(\r", "choices": [{"text": "rmin) + \":\" else \"\") + forceLetters(rsec)\r\n        }\r\n"}], "metadata": {"task_id": "cloudstream/420", "ground_truth": "                rmin\r\n            ) + \":\" else \"\") + forceLetters(\r\n                rsec\r\n            )\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\FullScreenPlayer.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.core.view.isVisible\nprotected fun uiReset() {\r\n        isShowing = false\r\n\r\n        // if nothing has loaded these buttons should not be visible\r\n        playerBinding?.apply {\r\n            playerSkipEpisode.isVisible = false\r\n            playerTracksBtt.isVisible = false\r\n            playerSkipOp.isVisible = false\r\n            shadowOverlay.isVisible = false\r\n        }\r\n        updateLockUI()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/422", "ground_truth": "        updateUIVisibility()\r\n        animateLayoutChanges()\r\n        resetFastForwardText()\r\n        resetRewindText()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\FullScreenPlayer.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        // As this is video specific it is better to not do any setKey/getKey\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/423", "ground_truth": "        outState.putLong(SUBTITLE_DELAY_BUNDLE_KEY, subtitleDelay)\r\n        super.onSaveInstanceState(outState)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\FullScreenPlayer.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport android.app.Activity\nimport android.annotation.SuppressLint\n @SuppressLint(\"SourceLockedOrientationActivity\")\r\n    private fun toggleRotate() {\r\n        activity?.let {\r", "choices": [{"text": "//            if (it.requestedOrientation == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE) {\r\n//                it.requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT\r\n//            } else {\r\n//                it.requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE\r\n//            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/424", "ground_truth": "            toggleOrientationWithSensor(it)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\FullScreenPlayer.kt"}}
{"prompt": "\nvar playerBinding PlayerCustomLayoutBinding?\nvar playerRotateEnabled\nvar playerResizeEnabled\n override fun playerDimensionsLoaded(width: Int, height: Int) {\r", "choices": [{"text": "playerBinding?.playerView?.resizeMode = AspectRatioFrameLayout.RESIZE_MODE_FILL\r\n}\n"}], "metadata": {"task_id": "cloudstream/425", "ground_truth": "        isVerticalOrientation = height > width\r\n        updateOrientation()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\FullScreenPlayer.kt"}}
{"prompt": "\nvar viewModel PlayerGeneratorViewModel\nvar currentSelectedLink Pair<ExtractorLink?, ExtractorUri?>?\nvar currentLinks Set<Pair<ExtractorLink?, ExtractorUri?>>\n override fun playerStatusChanged() {\r\n        if(player.getIsPlaying()){\r", "choices": [{"text": "//            player.pause()\r\n        }else{\r\n//            player.play()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/432", "ground_truth": "            viewModel.forceClearCache = false\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\GeneratorPlayer.kt"}}
{"prompt": "\n private fun closestQuality(target: Int?): Qualities {\r", "choices": [{"text": "-    return when (target) {\r\n-        null -> Qualities.LOW\r\n-        in 0..100 -> Qualities.LOW\r\n-        in 101..200 -> Qualities.MEDIUM\r\n-        in 201..300 -> Qualities.HIGH\r\n-        in 301..400 -> Qualities.VERY_HIGH\r\n-        else -> Qualities.VERY_HIGH\r\n+    return when (target) {\r\n+        null -> Qualities.LOW\r\n+        in"}], "metadata": {"task_id": "cloudstream/435", "ground_truth": "        if (target == null) return Qualities.Unknown\r\n        return Qualities.values().minBy { abs(it.value - target) }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\GeneratorPlayer.kt"}}
{"prompt": "\n private fun sortLinks(qualityProfile: Int): List<Pair<ExtractorLink?, ExtractorUri?>> {\r\n        return currentLinks.sortedBy {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/437", "ground_truth": "            -getLinkPriority(qualityProfile, it)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\GeneratorPlayer.kt"}}
{"prompt": "\n private fun noLinksFound() {\r\n        viewModel.forceClearCache = true\r\n\r", "choices": [{"text": "//        val intent = Intent(this, MainActivity::class.java)\r\n//        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\r\n//        startActivity(intent)\r\n    }\r\n"}], "metadata": {"task_id": "cloudstream/439", "ground_truth": "        showToast(R.string.no_links_found_toast, Toast.LENGTH_SHORT)\r\n        activity?.popCurrentPage()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\GeneratorPlayer.kt"}}
{"prompt": "\n private fun startPlayer() {\r\n        if (isActive) return // we don't want double load when you skip loading\r\n\r\n        val links = sortLinks(currentQualityProfile)\r\n        if (links.isEmpty()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/440", "ground_truth": "            noLinksFound()\r\n            return\r\n        }\r\n        loadLink(links.first(), false)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\GeneratorPlayer.kt"}}
{"prompt": "\n override fun nextEpisode() {\r\n        isNextEpisode = true\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "cloudstream/441", "ground_truth": "        player.release()\r\n        viewModel.loadLinksNext()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\GeneratorPlayer.kt"}}
{"prompt": "\n override fun prevEpisode() {\r\n        isNextEpisode = true\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/442", "ground_truth": "        player.release()\r\n        viewModel.loadLinksPrev()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\GeneratorPlayer.kt"}}
{"prompt": "\n override fun nextMirror() {\r\n        val links = sortLinks(currentQualityProfile)\r\n        if (links.isEmpty()) {\r\n            noLinksFound()\r\n            return\r\n        }\r\n\r\n        val newIndex = links.indexOf(currentSelectedLink) + 1\r\n        if (newIndex >= links.size) {\r\n            noLinksFound()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/444", "ground_truth": "            return\r\n        }\r\n\r\n        loadLink(links[newIndex], true)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\GeneratorPlayer.kt"}}
{"prompt": "\n override fun onDestroy() {\r\n        ResultFragment.updateUI()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/445", "ground_truth": "        currentVerifyLink?.cancel()\r\n        super.onDestroy()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\GeneratorPlayer.kt"}}
{"prompt": "\n import android.util.Log\nprivate fun autoSelectSubtitles() {\r\n        //Log.i(TAG, \"autoSelectSubtitles\")\r\n        normalSafeApiCall {\r", "choices": [{"text": "//            val subtitles = getSubtitles()\r\n//            if (subtitles.isNotEmpty()) {\r\n//                val subtitle = subtitles.first()\r\n//                Log.i(TAG, \"autoSelectSubtitles: $subtitle\")\r\n//                selectSubtitle(subtitle)\r\n//            }\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "cloudstream/446", "ground_truth": "            if (!autoSelectFromSettings()) {\r\n                autoSelectFromDownloads()\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\GeneratorPlayer.kt"}}
{"prompt": "\nvar viewModel PlayerGeneratorViewModel\nvar currentLinks Set<Pair<ExtractorLink?, ExtractorUri?>>\nvar limitTitle\n override fun playerDimensionsLoaded(width: Int, height: Int) {\r", "choices": [{"text": "//        val player = playerView.player\r\n//        player.setVideoSize(width, height)\r\n//        player.setVideoSurface(playerView.holder.surface)\r\n//        player.playWhenReady = true\r\n//        player.prepare()\r\n//        player.playWhenReady = true\r\n//        player.seekTo(0)\r\n//        player.setVolume(0f)\r\n//        player.setSpeed(1f)\r\n//        player.setVolume(1f)\r\n//        player.setSpeed(1"}], "metadata": {"task_id": "cloudstream/447", "ground_truth": "        super.playerDimensionsLoaded(width, height)\r\n        setPlayerDimen(width to height)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\GeneratorPlayer.kt"}}
{"prompt": "\n import android.util.Log\nimport android.os.Bundle\nprivate fun unwrapBundle(savedInstanceState: Bundle?) {\r\n        Log.i(TAG, \"unwrapBundle = $savedInstanceState\")\r\n        savedInstanceState?.let { bundle ->\r", "choices": [{"text": "//            val bundle = bundle.getBundle(KEY_BUNDLE)\r\n            bundle.getString(KEY_STRING)?.let {\r\n                Log.i(TAG, \"unwrapBundle = $it\")\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/448", "ground_truth": "            sync.addSyncs(bundle.getSerializable(\"syncData\") as? HashMap<String, String>?)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\GeneratorPlayer.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/449", "ground_truth": "        binding = null\r\n        super.onDestroyView()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\GeneratorPlayer.kt"}}
{"prompt": "\n override fun onTimestamp(timestamp: EpisodeSkip.SkipStamp?) {\r\n        if (timestamp != null) {\r\n            playerBinding?.skipChapterButton?.setText(timestamp.uiText)\r\n            displayTimeStamp(true)\r\n            val currentIndex = skipIndex\r\n            playerBinding?.skipChapterButton?.handler?.postDelayed({\r\n                if (skipIndex == currentIndex)\r\n                    displayTimeStamp(false)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/450", "ground_truth": "            }, 6000)\r\n        } else {\r\n            displayTimeStamp(false)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\GeneratorPlayer.kt"}}
{"prompt": "\n import androidx.media3.common.C\n/**\r\n * Sets the position at which to stop rendering the current stream.\r\n *\r\n * <p>Must be called after {@link #setCurrentStreamFinal()}.\r\n *\r\n * @param streamEndPositionUs The position to stop rendering at or {@link C#LENGTH_UNSET} to\r\n *                            render until the end of the current stream.\r\n */\r\n// TODO(internal b/181312195): Remove this when it's no longer needed once subtitles are decoded\r\n// on the loading side of SampleQueue.\r\npublic void setFinalStreamEndPositionUs(long streamEndPositionUs) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "cloudstream/452", "ground_truth": "    checkState(isCurrentStreamFinal());\r\n    this.finalStreamEndPositionUs = streamEndPositionUs;\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\NonFinalTextRenderer.java"}}
{"prompt": "\n import androidx.media3.common.Format\nimport androidx.media3.common.C\n@Override\r\nprotected void onStreamChanged(Format[] formats, long startPositionUs, long offsetUs) {\r\n    streamFormat = formats[0];\r\n    if (decoder != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/453", "ground_truth": "        decoderReplacementState = REPLACEMENT_STATE_SIGNAL_END_OF_STREAM;\r\n    } else {\r\n        initDecoder();\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\NonFinalTextRenderer.java"}}
{"prompt": "\n import androidx.media3.common.C\n@Override\r\nprotected void onPositionReset(long positionUs, boolean joining) {\r\n    clearOutput();\r\n    inputStreamEnded = false;\r\n    outputStreamEnded = false;\r\n    finalStreamEndPositionUs = C.TIME_UNSET;\r\n    if (decoderReplacementState != REPLACEMENT_STATE_NONE) {\r\n        replaceDecoder();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/454", "ground_truth": "    } else {\r\n        releaseBuffers();\r\n        checkNotNull(decoder).flush();\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\NonFinalTextRenderer.java"}}
{"prompt": "\n import androidx.media3.common.Format\nimport androidx.media3.common.C\n@Override\r\nprotected void onDisabled() {\r\n    streamFormat = null;\r\n    finalStreamEndPositionUs = C.TIME_UNSET;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "cloudstream/455", "ground_truth": "    clearOutput();\r\n    releaseDecoder();\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\NonFinalTextRenderer.java"}}
{"prompt": "\n @Override\r\npublic boolean isReady() {\r\n    // Don't block playback whilst subtitles are loading.\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "cloudstream/456", "ground_truth": "    // Note: To change this behavior, it will be necessary to consider [Internal: b/12949941].\r\n    return true;\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\NonFinalTextRenderer.java"}}
{"prompt": "\n import androidx.media3.extractor.text.Subtitle\nimport androidx.media3.common.C\nprivate void releaseBuffers() {\r\n    nextInputBuffer = null;\r\n    nextSubtitleEventIndex = C.INDEX_UNSET;\r\n    if (subtitle != null) {\r\n        subtitle.release();\r\n        subtitle = null;\r\n    }\r", "choices": [{"text": "\n import androidx.media3.extractor.text.Subtitle\nimport androidx.media3.common.C\nprivate void releaseBuffers() {\r\n    nextInputBuffer = null;\r\n    nextSubtitleEventIndex = C.INDEX_UNSET;\r\n    if (subtitle!= null) {\r\n        subtitle.release();\r\n        subtitle = null;\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/457", "ground_truth": "    if (nextSubtitle != null) {\r\n        nextSubtitle.release();\r\n        nextSubtitle = null;\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\NonFinalTextRenderer.java"}}
{"prompt": " import androidx.media3.common.util.Assertions.checkNotNull\n * decoder. We need to do so in order to ensure that it outputs any remaining buffers before we\r\nprivate SubtitleDecoder decoder;\n * release it.\r\nprivate void releaseDecoder() {\r\n    releaseBuffers();\r\n    checkNotNull(decoder).release();\r", "choices": [{"text": "}\n *\r\nprivate void releaseBuffers() {\r\n    if (decoder!= null) {\r\n        decoder.releaseOutputBuffer(decoder.dequeueOutputBuffer(null, 0), false);\r\n    }\r\n}\n *\r\nprivate void release() {\r\n    releaseDecoder();\r\n    releaseMediaSource();\r\n    releaseMediaSession();\r\n    releasePlayer();\r\n    releasePlayerLooper();\r\n    releasePlayerLooperThread();\r\n    releasePlayerLooperHandler();\r\n    releasePlayerLooperHandlerThread();\r\n    releasePlayerLooperHandlerThreadLooper();\r\n    releasePlayerLooperHandlerThreadHandler();\r\n    releasePlayerLooperHandlerThreadHandlerLooper();\r\n    releasePlayerLooperHandlerThread"}], "metadata": {"task_id": "cloudstream/458", "ground_truth": "    decoder = null;\r\n    decoderReplacementState = REPLACEMENT_STATE_NONE;\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\NonFinalTextRenderer.java"}}
{"prompt": "\n private void initDecoder() {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/459", "ground_truth": "    waitingForKeyFrame = true;\r\n    decoder = decoderFactory.createDecoder(checkNotNull(streamFormat));\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\NonFinalTextRenderer.java"}}
{"prompt": "\n private void replaceDecoder() {\r", "choices": [{"text": "-    decoder = new Decoder(decoder.getDecoder());\r\n+    decoder = new Decoder(decoder.getDecoder(), decoder.getDecoder().getDecoder());\r\n }\r\n \r\n private void replaceEncoder() {\r\n-    encoder = new Encoder(encoder.getEncoder());\r\n+    encoder = new Encoder(encoder.getEncoder(), encoder.getEncoder().getEncoder());\r\n }\r\n \r\n private void replaceDecoder(Decoder decoder) {\r\n-    this.decoder = new Decoder(decoder);\r\n+    this.decoder = new Decoder(decoder, decoder.getDecoder().getDecoder());"}], "metadata": {"task_id": "cloudstream/460", "ground_truth": "    releaseDecoder();\r\n    initDecoder();\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\NonFinalTextRenderer.java"}}
{"prompt": "\n import java.util.List\nimport androidx.media3.common.text.Cue\nimport androidx.media3.common.C\nimport android.os.Message\n@SuppressWarnings(\"unchecked\")\r\n@Override\r\npublic boolean handleMessage(Message msg) {\r\n    switch(msg.what) {\r\n        case MSG_UPDATE_OUTPUT:\r\n            invokeUpdateOutputInternal((List<Cue>) msg.obj);\r", "choices": [{"text": "//            return true;\r\n        case MSG_UPDATE_OUTPUT_CUE:\r\n            invokeUpdateOutputCueInternal((Cue) msg.obj);\r\n//            return true;\r\n        case MSG_UPDATE_OUTPUT_CUES:\r\n            invokeUpdateOutputCuesInternal((List<Cue>) msg.obj);\r\n//            return true;\r\n        case MSG_UPDATE_OUTPUT_CUE_LIST:\r\n            invokeUpdateOutputCueListInternal((List<Cue>) msg.obj);\r\n//            return true;\r\n        case MSG_UPDATE_OUTPUT_CUE_LIST_CUE:"}], "metadata": {"task_id": "cloudstream/463", "ground_truth": "            return true;\r\n        default:\r\n            throw new IllegalStateException();\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\NonFinalTextRenderer.java"}}
{"prompt": "\n import androidx.media3.extractor.text.SubtitleDecoderException\nimport androidx.media3.extractor.text.SubtitleDecoder\nimport androidx.media3.extractor.text.Subtitle\nimport androidx.media3.common.util.Log\nimport androidx.media3.common.Format\nimport androidx.media3.common.C\n/**\r\n * Called when {@link #decoder} throws an exception, so it can be logged and playback can\r\n * continue.\r\n *\r\n * <p>Logs {@code e} and resets state to allow decoding the next sample.\r\n */\r\nprivate void handleDecoderError(SubtitleDecoderException e) {\r\n    Log.e(TAG, \"Subtitle decoding failed. streamFormat=\" + streamFormat, e);\r", "choices": [{"text": "}\r\n/**\r\n * Called when {@link #decoder} throws an exception, so it can be logged and playback can\r\n * continue.\r\n *\r\n * <p>Logs {@code e} and resets state to allow decoding the next sample.\r\n */\r\nprivate void handleDecoderError(DecoderException e) {\r\n    Log.e(TAG, \"Subtitle decoding failed. streamFormat=\" + streamFormat, e);\r\n}\r\n/**\r\n * Called when {@link #decoder} throws an exception, so it can be logged and playback can\r\n * continue.\r\n *\r\n * <p>Logs {@"}], "metadata": {"task_id": "cloudstream/464", "ground_truth": "    clearOutput();\r\n    replaceDecoder();\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\NonFinalTextRenderer.java"}}
{"prompt": "\nval _loadingLinks\nval loadingLinks LiveData<Resource<Boolean?>>\nval _currentLinks\n fun loadLinks(episode: Int) {\r", "choices": [{"text": "_loadingLinks.postValue(Resource.loading(null))\r\nval response = api.getLinks(episode)\r\n_loadingLinks.postValue(Resource.success(response.isSuccessful))\r\n_currentLinks.postValue(response.body())\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/465", "ground_truth": "        generator?.goto(episode)\r\n        loadLinks()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\PlayerGeneratorViewModel.kt"}}
{"prompt": " import android.util.Log\nval _loadingLinks\nval loadingLinks LiveData<Resource<Boolean?>>\nval _currentLinks\nfun loadLinksPrev() {\r\n        Log.i(TAG, \"loadLinksPrev\")\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/466", "ground_truth": "        if (generator?.hasPrev() == true) {\r\n            generator?.prev()\r\n            loadLinks()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\PlayerGeneratorViewModel.kt"}}
{"prompt": "\n import android.util.Log\nfun loadLinksNext() {\r\n        Log.i(TAG, \"loadLinksNext\")\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "cloudstream/467", "ground_truth": "        if (generator?.hasNext() == true) {\r\n            generator?.next()\r\n            loadLinks()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\PlayerGeneratorViewModel.kt"}}
{"prompt": " import com.lagradost.cloudstream3.mvvm.normalSafeApiCall\nval _currentLinks\nval currentLinks LiveData<Set<Pair<ExtractorLink?, ExtractorUri?>>>\nval _loadingLinks\nfun getNextMeta(): Any? {\r\n        return normalSafeApiCall {\r\n            if (generator?.hasNext() == false) return@normalSafeApiCall null\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/468", "ground_truth": "            generator?.getCurrent(offset = 1)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\PlayerGeneratorViewModel.kt"}}
{"prompt": "\n fun attachGenerator(newGenerator: IGenerator?) {\r\n        if (generator == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/469", "ground_truth": "            generator = newGenerator\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\PlayerGeneratorViewModel.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.annotation.StringRes\nimport androidx.annotation.RequiresApi\nimport android.os.Build\nimport android.graphics.drawable.Icon\nimport android.app.RemoteAction\nimport android.app.Activity\n @RequiresApi(Build.VERSION_CODES.O)\r\n        private fun getRemoteAction(\r\n            activity: Activity,\r\n            id: Int,\r\n            @StringRes title: Int,\r\n            event: CSPlayerEvent\r\n        ): RemoteAction {\r\n            val text = activity.getString(title)\r\n            return RemoteAction(\r\n                Icon.createWithResource(activity, id),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/472", "ground_truth": "                text,\r\n                text,\r\n                getPen(activity, event.value)\r\n            )\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\PlayerPipHelper.kt"}}
{"prompt": "\nvar subtitleView SubtitleView?\nvar subStyle SaveCaptionStyle?\nvar activeSubtitles Set<SubtitleData>\n fun getId(): String {\r", "choices": [{"text": "return id\r\n}\r\nfun setId(id: String) {\r\nthis.id = id\r\n}\r\nfun getTitle(): String {\r\nreturn title\r\n}\r\nfun setTitle(title: String) {\r\nthis.title = title\r\n}\r\nfun getSubtitle(): String {\r\nreturn subtitle\r\n}\r\nfun setSubtitle(subtitle: String) {\r\nthis.subtitle = subtitle\r\n}\r\nfun getSubStyle(): SaveCaptionStyle {\r\nreturn subStyle\r\n}\r\nfun setSubStyle(subStyle: SaveCaption"}], "metadata": {"task_id": "cloudstream/473", "ground_truth": "        return if (origin == SubtitleOrigin.EMBEDDED_IN_VIDEO) url\r\n        else \"$url|$name\"\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\PlayerSubtitleHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.ui.subtitles.SaveCaptionStyle\nimport androidx.media3.ui.SubtitleView\nimport android.widget.FrameLayout\nimport android.view.ViewGroup\nfun initSubtitles(subView: SubtitleView?, subHolder: FrameLayout?, style: SaveCaptionStyle?) {\r\n        subtitleView = subView\r\n        subView?.let { sView ->\r\n            (sView.parent as ViewGroup?)?.removeView(sView)\r\n            subHolder?.addView(sView)\r", "choices": [{"text": "//            sView.setBackgroundColor(Color.TRANSPARENT)\r\n            sView.setBackgroundColor(Color.TRANSPARENT)\r\n            sView.setBackgroundColor(Color.TRANSPARENT)\r\n            sView.setBackgroundColor(Color.TRANSPARENT)\r\n            sView.setBackgroundColor(Color.TRANSPARENT)\r\n            sView.setBackgroundColor(Color.TRANSPARENT)\r\n            sView.setBackgroundColor(Color.TRANSPARENT)\r\n            sView.setBackgroundColor(Color.TRANSPARENT)\r\n            sView.setBackgroundColor(Color.TRANSPARENT)\r\n            sView.setBackgroundColor(Color.TRANSPARENT)\r\n            sView.setBackgroundColor"}], "metadata": {"task_id": "cloudstream/477", "ground_truth": "        }\r\n        style?.let {\r\n            setSubStyle(it)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\PlayerSubtitleHelper.kt"}}
{"prompt": "\nval backupGenerator IPreviewGenerator\nvar params ImageParams\nvar images Array<Bitmap?>\n fun new16by9(width: Int): ImageParams {\r\n            if (width < 100) {\r\n                return DEFAULT\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/478", "ground_truth": "            return ImageParams(\r\n                width / 4,\r\n                (width * 9) / (4 * 16)\r\n            )\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\PreviewGenerator.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.ui.settings.SettingsFragment\nfun new(): IPreviewGenerator {\r\n            /** because TV has low ram + not show we disable this for now */\r\n            return if (SettingsFragment.isTrueTvSettings()) {\r", "choices": [{"text": "//                TvPreviewGenerator()\r\n                TvPreviewGenerator()\r\n            } else {\r\n                PreviewGenerator()\r\n            }\r\n        }\n"}], "metadata": {"task_id": "cloudstream/479", "ground_truth": "                empty()\r\n            } else {\r\n                PreviewGenerator()\r\n            }\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\PreviewGenerator.kt"}}
{"prompt": "\n import androidx.core.graphics.scale\nimport android.graphics.Bitmap\nprivate fun rescale(image: Bitmap, params: ImageParams): Bitmap {\r\n    if (image.width <= params.width && image.height <= params.height) return image\r\n    val new = image.scale(params.width, params.height)\r\n    // throw away the old image\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/480", "ground_truth": "    if (new != image) {\r\n        image.recycle()\r\n    }\r\n    return new\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\PreviewGenerator.kt"}}
{"prompt": "\n import android.graphics.Bitmap\noverride fun getPreviewImage(fraction: Float): Bitmap? {\r\n        return try {\r\n            currentGenerator.getPreviewImage(fraction) ?: backupGenerator.getPreviewImage(fraction)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/481", "ground_truth": "        } catch (t: Throwable) {\r\n            logError(t)\r\n            null\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\PreviewGenerator.kt"}}
{"prompt": "\nvar params ImageParams\nval DEFAULT\nvar images Array<Bitmap?>\n override fun release() {\r\n        lastGenerator.release()\r\n        currentGenerator.release()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/482", "ground_truth": "        lastGenerator = NoPreviewGenerator()\r\n        currentGenerator = NoPreviewGenerator()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\PreviewGenerator.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.ExtractorUri\nimport android.net.Uri\nimport android.content.Context\nfun load(context: Context, link: ExtractorUri, keepCache: Boolean) {\r\n        clear(keepCache)\r\n        currentGenerator = Mp4PreviewGenerator(params).apply {\r", "choices": [{"text": "//            setOnProgressListener(this@MainActivity)\r\n            setOnProgressListener(object : OnProgressListener {\r\n                override fun onProgress(progress: Int) {\r\n                    Log.d(\"progress\", progress.toString())\r\n                }\r\n            })\r\n            setOnCompleteListener(object : OnCompleteListener {\r\n                override fun onComplete(result: Result) {\r\n                    Log.d(\"result\", result.toString())\r\n                }\r\n            })\r\n            setOnErrorListener(object : OnErrorListener {\r\n                override fun onError(error: Error) {\r\n                    Log.d(\"error\", error.toString())\r\n                }\r\n            })\r\n            setOnCancelListener"}], "metadata": {"task_id": "cloudstream/483", "ground_truth": "            load(keepCache = keepCache, context = context, uri = link.uri)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\PreviewGenerator.kt"}}
{"prompt": "\n import kotlinx.coroutines.Job\nprivate fun clear() {\r\n        synchronized(images) {\r\n            currentJob?.cancel()\r\n            // for (i in images.indices) {\r\n            //     images[i]?.recycle()\r\n            // }\r\n            images = arrayOf()\r", "choices": [{"text": "}\r\n}\r\nprivate fun loadImage(url: String, imageView: ImageView) {\r\n        synchronized(images) {\r\n            if (images.size >= 10) {\r\n                clear()\r\n            }\r\n            val image = BitmapFactory.decodeStream(URL(url).openConnection().getInputStream())\r\n            images += image\r\n            imageView.setImageBitmap(image)\r\n}\r\n}\r\nprivate fun loadImageAsync(url: String, imageView: ImageView) {\r\n        synchronized(images) {\r\n            if (images.size >= 10) {\r\n                clear()\r\n            }\r\n            val image = BitmapFactory."}], "metadata": {"task_id": "cloudstream/484", "ground_truth": "            prefixSum = arrayOf()\r\n            loadedImages = 0\r\n            totalImages = 0\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\PreviewGenerator.kt"}}
{"prompt": "\nvar params ImageParams\nval DEFAULT\nvar images Array<Bitmap?>\n override fun release() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.release()\r\n}\r\noverride fun draw(canvas: Canvas) {\r\n// TODO Auto-generated method stub\r\nsuper.draw(canvas)\r\n}\r\noverride fun onTouchEvent(event: MotionEvent): Boolean {\r\n// TODO Auto-generated method stub\r\nreturn super.onTouchEvent(event)\r\n}\r\noverride fun onSizeChanged(w: Int, h: Int, oldw: Int, oldh: Int) {\r\n// TODO Auto-generated method stub\r\nsuper.onSize"}], "metadata": {"task_id": "cloudstream/485", "ground_truth": "        clear()\r\n        images = arrayOf()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\PreviewGenerator.kt"}}
{"prompt": "\nvar images Array<Bitmap?>\nvar params ImageParams\nvar durationMs Long\n override fun hasPreview(): Boolean {\r\n        synchronized(images) {\r", "choices": [{"text": "return images.size > 0\r\n        }\r\n    }\noverride fun getPreview(): Bitmap? {\r\n        synchronized(images) {\r\nreturn images[0]\r\n        }\r\n    }\noverride fun getPreviewDuration(): Long {\r\n        synchronized(images) {\r\nreturn durationMs\r\n        }\r\n    }\noverride fun getPreviewSize(): Size {\r\n        synchronized(images) {\r\nreturn params.size\r\n        }\r\n    }\noverride fun getPreviewFormat(): Int {\r\n        synchronized(images) {\r\nreturn params.format\r\n        }\r\n    }\noverride fun getPreviewRotation(): Int {\r\n        synchronized(images) {\r"}], "metadata": {"task_id": "cloudstream/486", "ground_truth": "            return loadedLod >= MIN_LOD\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\PreviewGenerator.kt"}}
{"prompt": "\n private fun clear(keepCache: Boolean) {\r\n        if (keepCache) return\r\n        synchronized(images) {\r\n            loadedLod = 0\r\n            loadedImages = 0\r\n            // for (i in images.indices) {\r\n            //    images[i]?.recycle()\r", "choices": [{"text": "//            }\r\n            images.clear()\r\n        }\r\n    }\r\n\r\n    private fun loadImage(url: String, lod: Int, callback: ImageCallback) {\r\n        if (images.containsKey(url)) {\r\n            callback.onImageLoaded(images[url]!!)\r\n            return\r\n        }\r\n        val image = ImageLoader.loadImage(url)\r\n        if (image == null) {\r\n            callback.onImageLoaded(null)\r\n            return\r\n        }\r\n        synchronized(images) {\r\n            images[url] = image\r\n            loadedImages++\r\n            if (loadedImages == loadedLod) {\r\n                loadedImages = 0\r\n               "}], "metadata": {"task_id": "cloudstream/487", "ground_truth": "            //     images[i] = null\r\n            //}\r\n            images.fill(null)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\PreviewGenerator.kt"}}
{"prompt": "\n import kotlinx.coroutines.Job\nimport com.lagradost.cloudstream3.utils.Coroutines.ioSafe\nimport android.util.Log\nfun load(url: String, headers: Map<String, String>) {\r\n        currentJob?.cancel()\r\n        currentJob = ioSafe {\r\n            Log.i(TAG, \"Loading with url = $url headers = $headers\")\r", "choices": [{"text": "//            val response = client.get<String>(url, headers = headers)\r\n            val response = client.get<String>(url)\r\n            Log.i(TAG, \"Response = $response\")\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/488", "ground_truth": "            clear(true)\r\n            retriever.setDataSource(url, headers)\r\n            start(this)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\PreviewGenerator.kt"}}
{"prompt": "\n import kotlinx.coroutines.Job\nimport com.lagradost.cloudstream3.utils.Coroutines.ioSafe\nimport android.util.Log\nimport android.net.Uri\nimport android.content.Context\nfun load(keepCache: Boolean, context: Context, uri: Uri) {\r\n        currentJob?.cancel()\r\n        currentJob = ioSafe {\r\n            Log.i(TAG, \"Loading with uri = $uri\")\r", "choices": [{"text": "//            val file = File(context.cacheDir, uri.lastPathSegment)\r\n//            if (file.exists() &&!keepCache) {\r\n//                file.delete()\r\n//            }\r\n            val file = File(context.cacheDir, uri.lastPathSegment)\r\n            if (file.exists() &&!keepCache) {\r\n                file.delete()\r\n            }\r\n            val request = Request.Builder()\r\n                   .url(uri)\r\n                   .build()\r\n            val response = client.newCall(request).execute()\r\n            if (response.isSuccessful) {\r\n                val body = response"}], "metadata": {"task_id": "cloudstream/489", "ground_truth": "            clear(keepCache)\r\n            retriever.setDataSource(context, uri)\r\n            start(this)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\PreviewGenerator.kt"}}
{"prompt": "\nvar params ImageParams\nval DEFAULT\nvar images Array<Bitmap?>\n override fun release() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.release()\r\n}\r\noverride fun draw(canvas: Canvas) {\r\n// TODO Auto-generated method stub\r\nsuper.draw(canvas)\r\n}\r\noverride fun onTouchEvent(event: MotionEvent): Boolean {\r\n// TODO Auto-generated method stub\r\nreturn super.onTouchEvent(event)\r\n}\r\noverride fun onSizeChanged(w: Int, h: Int, oldw: Int, oldh: Int) {\r\n// TODO Auto-generated method stub\r\nsuper.onSize"}], "metadata": {"task_id": "cloudstream/490", "ground_truth": "        currentJob?.cancel()\r\n        clear(false)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\PreviewGenerator.kt"}}
{"prompt": "\n import android.util.Log\noverride fun next() {\r\n        Log.i(TAG, \"next\")\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "cloudstream/491", "ground_truth": "        if (hasNext())\r\n            currentIndex++\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\RepoLinkGenerator.kt"}}
{"prompt": "\n import android.util.Log\noverride fun prev() {\r\n        Log.i(TAG, \"prev\")\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "cloudstream/492", "ground_truth": "        if (hasPrev())\r\n            currentIndex--\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\RepoLinkGenerator.kt"}}
{"prompt": " import android.util.Log\nval hasCache\nval TAG\nval cache HashMap<Pair<String, Int>, Cache>\noverride fun goto(index: Int) {\r\n        Log.i(TAG, \"goto $index\")\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/493", "ground_truth": "        // clamps value\r\n        currentIndex = min(episodes.size - 1, max(0, index))\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\RepoLinkGenerator.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.databinding.PlayerPrioritizeItemBinding\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n        return PriorityViewHolder(\r\n            PlayerPrioritizeItemBinding.inflate(LayoutInflater.from(parent.context),parent,false),\r", "choices": [{"text": ")\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        (holder as PriorityViewHolder).bind(items[position])\r\n    }\r\n\r\n    override fun getItemCount(): Int = items.size\r\n\r\n    inner class PriorityViewHolder(private val binding: PlayerPrioritizeItemBinding,val listener: (PlayerPrioritizeItemBinding) -> Unit) : RecyclerView.ViewHolder(binding.root) {\r\n        fun bind(item: PlayerPrioritizeItem) {\r\n            binding.item = item\r\n            binding.executePendingBindings()\r\n            binding.root.setOnClickListener { listener(binding) }\r\n       "}], "metadata": {"task_id": "cloudstream/494", "ground_truth": "            //LayoutInflater.from(parent.context).inflate(R.layout.player_prioritize_item, parent, false)\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\source_priority\\PriorityAdapter.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        when (holder) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/495", "ground_truth": "            is PriorityViewHolder -> holder.bind(items[position])\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\source_priority\\PriorityAdapter.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        when (holder) {\r", "choices": [{"text": "//            is ViewHolder -> holder.bind(items[position])\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "cloudstream/497", "ground_truth": "            is ProfilesViewHolder -> holder.bind(items[position], position)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\source_priority\\ProfilesAdapter.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.DataStoreHelper.currentAccount\nimport com.lagradost.cloudstream3.R\nfun setProfileName(profile: Int, name: String?) {\r\n        val path = \"$currentAccount/$VIDEO_PROFILE_NAME/$profile\"\r\n        if (name == null) {\r", "choices": [{"text": "//            DataStoreHelper.remove(path)\r\n        } else {\r\n            DataStoreHelper.putString(path, name)\r\n        }\r\n    }\r\n\r\n    fun getProfileName(profile: Int): String? {\r\n        val path = \"$currentAccount/$VIDEO_PROFILE_NAME/$profile\"\r\n        return DataStoreHelper.getString(path)\r\n    }\r\n\r\n    fun setProfileDescription(profile: Int, description: String?) {\r\n        val path = \"$currentAccount/$VIDEO_PROFILE_DESCRIPTION/$profile\"\r\n        if (description == null) {\r\n//            DataStoreHelper.remove(path)\r\n        } else {\r\n            Data"}], "metadata": {"task_id": "cloudstream/499", "ground_truth": "            removeKey(path)\r\n        } else {\r\n            setKey(path, name.trim())\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\source_priority\\QualityDataHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.DataStoreHelper.currentAccount\nimport com.lagradost.cloudstream3.R\nfun setQualityProfileType(profile: Int, type: QualityProfileType?) {\r\n        val path = \"$currentAccount/$VIDEO_PROFILE_TYPE/$profile\"\r\n        if (type == QualityProfileType.None) {\r", "choices": [{"text": "//            val profile = QualityProfileType.None.toString()\r\n            DataStoreHelper.putString(path, QualityProfileType.None.toString())\r\n        } else {\r\n            DataStoreHelper.putString(path, type.toString())\r\n        }\r\n    }\r\n\r\nfun getQualityProfileType(profile: Int): QualityProfileType? {\r\n        val path = \"$currentAccount/$VIDEO_PROFILE_TYPE/$profile\"\r\n        val profileType = DataStoreHelper.getString(path)\r\n        return if (profileType == null) {\r\n            null\r\n        } else {\r\n            QualityProfileType.valueOf(profileType)\r\n        }\r\n    }"}], "metadata": {"task_id": "cloudstream/503", "ground_truth": "            removeKey(path)\r\n        } else {\r\n            setKey(path, type)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\player\\source_priority\\QualityDataHelper.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/505", "ground_truth": "        binding = null\r\n        super.onDestroyView()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\quicksearch\\QuickSearchFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/506", "ground_truth": "        super.onDestroy()\r\n        clickCallback = null\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\quicksearch\\QuickSearchFragment.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport com.lagradost.cloudstream3.APIHolder.filterProviderByPreferredMedia\nimport android.view.View\nimport android.content.Context\nfun search(context: Context?, query: String, isQuickSearch: Boolean): Boolean {\r\n        (providers ?: context?.filterProviderByPreferredMedia(hasHomePageIsRequired = false)\r\n            ?.map { it.name }?.toSet())?.let { active ->\r\n            searchViewModel.searchAndCancel(\r\n                query = query,\r\n                ignoreSettings = false,\r\n                providersActive = active,\r\n                isQuickSearch = isQuickSearch\r", "choices": [{"text": "\n import com.lagradost.cloudstream3.R\nimport com.lagradost.cloudstream3.APIHolder.filterProviderByPreferredMedia\nimport android.view.View\nimport android.content.Context\nfun search(context: Context?, query: String, isQuickSearch: Boolean): Boolean {\r\n        (providers?: context?.filterProviderByPreferredMedia(hasHomePageIsRequired = false)\r\n           ?.map { it.name }?.toSet())?.let { active ->\r\n            searchViewModel.searchAndCancel(\r\n                query = query,\r\n                ignoreSettings = false,\r\n                providersActive = active,\r\n                isQuickSearch = isQuickSearch\r\n//                isQuickSearch = false\r\n            )\r\n        }\r\n        return true\r\n    }\n"}], "metadata": {"task_id": "cloudstream/507", "ground_truth": "            )\r\n            return true\r\n        }\r\n        return false\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\quicksearch\\QuickSearchFragment.kt"}}
{"prompt": "\n import android.content.res.Configuration\noverride fun onConfigurationChanged(newConfig: Configuration) {\r", "choices": [{"text": "super.onConfigurationChanged(newConfig)\r\nif (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n//landscape\r\n} else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {\r\n//portrait\r\n}\r\n}\n"}], "metadata": {"task_id": "cloudstream/509", "ground_truth": "        super.onConfigurationChanged(newConfig)\r\n        fixGrid()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\quicksearch\\QuickSearchFragment.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.databinding.CastItemBinding\nimport com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n        return CardViewHolder(\r\n            CastItemBinding.inflate(LayoutInflater.from(parent.context), parent, false),\r", "choices": [{"text": "//            parent.context.getString(R.string.cast_item_title),\r\n//            parent.context.getString(R.string.cast_item_description)\r\n        )\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        (holder as CardViewHolder).bind(cast[position])\r\n    }\r\n\r\n    override fun getItemCount(): Int {\r\n        return cast.size\r\n    }\r\n\r\n    class CardViewHolder(private val binding: CastItemBinding, private val title: String, private val description: String) : RecyclerView.ViewHolder(binding.root) {\r\n        fun"}], "metadata": {"task_id": "cloudstream/510", "ground_truth": "            focusCallback\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ActorAdaptor.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        when (holder) {\r\n            is CardViewHolder -> {\r\n                holder.bind(actors[position].actor, actors[position].isInverted, position) {\r\n                    actors[position].isInverted = !actors[position].isInverted\r", "choices": [{"text": "\n import com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        when (holder) {\r\n            is CardViewHolder -> {\r\n                holder.bind(actors[position].actor, actors[position].isInverted, position) {\r\n                    actors[position].isInverted =!actors[position].isInverted\r\n//                    notifyItemChanged(position)\r\n                }\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/511", "ground_truth": "                    this.notifyItemChanged(position)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ActorAdaptor.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.DiffUtil\nprivate fun updateActorList(newList: List<ActorMetaData>) {\r\n        val diffResult = DiffUtil.calculateDiff(\r\n            ActorDiffCallback(this.actors, newList)\r\n        )\r\n\r", "choices": [{"text": "//        this.actors = newList\r\n//        this.actorAdapter.notifyDataSetChanged()\r\n        diffResult.dispatchUpdatesTo(this.actorAdapter)\r\n    }\n"}], "metadata": {"task_id": "cloudstream/512", "ground_truth": "        actors.clear()\r\n        actors.addAll(newList)\r\n\r\n        diffResult.dispatchUpdatesTo(this)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ActorAdaptor.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.RecyclerView\noverride fun onViewDetachedFromWindow(holder: RecyclerView.ViewHolder) {\r\n        if (holder.itemView.hasFocus()) {\r", "choices": [{"text": "holder.itemView.clearFocus()\r\n        }\r\n        super.onViewDetachedFromWindow(holder)\r\n}\n"}], "metadata": {"task_id": "cloudstream/514", "ground_truth": "            holder.itemView.clearFocus()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\EpisodeAdapter.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.DiffUtil\nfun updateList(newList: List<ResultEpisode>) {\r\n        val diffResult = DiffUtil.calculateDiff(\r\n            ResultDiffCallback(this.cardList, newList)\r\n        )\r\n\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/515", "ground_truth": "        cardList.clear()\r\n        cardList.addAll(newList)\r\n\r\n        diffResult.dispatchUpdatesTo(this)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\EpisodeAdapter.kt"}}
{"prompt": "\n override fun getItemViewType(position: Int): Int {\r", "choices": [{"text": "return if (position == 0) {\r\nTYPE_HEADER\r\n} else {\r\nTYPE_ITEM\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/516", "ground_truth": "        val item = getItem(position)\r\n        return if (item.poster.isNullOrBlank()) 0 else 1\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\EpisodeAdapter.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.RecyclerView\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        when (holder) {\r\n            is EpisodeCardViewHolderLarge -> {\r\n                holder.bind(getItem(position))\r\n            }\r\n\r", "choices": [{"text": ""}], "metadata": {"task_id": "cloudstream/517", "ground_truth": "            is EpisodeCardViewHolderSmall -> {\r\n                holder.bind(getItem(position))\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\EpisodeAdapter.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.DiffUtil\nfun updateList(newList: List<Int>) {\r\n        val diffResult = DiffUtil.calculateDiff(\r\n            DiffCallback(this.images, newList)\r\n        )\r\n\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "cloudstream/520", "ground_truth": "        images.clear()\r\n        images.addAll(newList)\r\n\r\n        diffResult.dispatchUpdatesTo(this)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ImageAdapter.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nfun ResultEpisode.getRealPosition(): Long {\r\n    if (duration <= 0) return 0\r\n    val percentage = position * 100 / duration\r", "choices": [{"text": "//    Log.d(\"getRealPosition\", \"position: $position, duration: $duration, percentage: $percentage\")\r\n    return (percentage * duration / 100).toLong()\r\n}\n"}], "metadata": {"task_id": "cloudstream/523", "ground_truth": "    if (percentage <= 5 || percentage >= 95) return 0\r\n    return position\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultFragment.kt"}}
{"prompt": "\n fun updateUI(id: Int? = null) {\r", "choices": [{"text": "//    if (id == null) {\r\n//      binding.button.text = \"Add\"\r\n//      binding.button.setOnClickListener {\r\n//        val name = binding.editText.text.toString()\r\n//        if (name.isNotEmpty()) {\r\n//          viewModel.insert(name)\r\n//          binding.editText.text.clear()\r\n//        }\r\n//      }\r\n//    } else {\r\n//      binding.button.text = \"Update\"\r\n//      binding.button.setOnClickListener {\r\n//        val"}], "metadata": {"task_id": "cloudstream/526", "ground_truth": "       // updateUIListener?.invoke()\r\n        updateUIEvent.invoke(id)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultFragment.kt"}}
{"prompt": "\n override fun nextMirror() {\r", "choices": [{"text": "+    if (mirrorIndex == mirrors.size - 1) {\r\n+      mirrorIndex = 0\r\n+    } else {\r\n+      mirrorIndex++\r\n+    }\r\n+    mirror = mirrors[mirrorIndex]\r\n+  }\r\n+\r\n   override fun next() {\r\n-    if (mirrorIndex == mirrors.size - 1) {\r\n-      mirrorIndex = 0\r\n-    } else {\r\n-      mirrorIndex++\r\n-    }\r\n-    mirror = mirrors[mirrorIndex"}], "metadata": {"task_id": "cloudstream/527", "ground_truth": "        currentTrailerIndex++\r\n        loadTrailer()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultFragmentPhone.kt"}}
{"prompt": "\n override fun playerError(exception: Throwable) {\r\n        if (player.getIsPlaying()) { // because we don't want random toasts in player\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/528", "ground_truth": "            super.playerError(exception)\r\n        } else {\r\n            nextMirror()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultFragmentPhone.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.ExtractorLink\nimport com.lagradost.cloudstream3.R\nimport com.lagradost.cloudstream3.LoadResponse\nimport com.lagradost.cloudstream3.APIHolder.updateHasTrailers\nprivate fun setTrailers(trailers: List<ExtractorLink>?) {\r\n        context?.updateHasTrailers()\r\n        if (!LoadResponse.isTrailersEnabled) return\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/529", "ground_truth": "        currentTrailers = trailers?.sortedBy { -it.quality } ?: emptyList()\r\n        loadTrailer()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultFragmentPhone.kt"}}
{"prompt": " import android.view.View\nvar layout\nvar binding FragmentResultSwipeBinding?\nval gestureRegionsListener\nprivate fun setFocusUpAndDown(upper: View?, down: View?) {\r\n        if (upper == null || down == null) return\r", "choices": [{"text": "\n        upper.setOnTouchListener { _, event ->\r\n            if (event.action == MotionEvent.ACTION_DOWN) {\r\n                down.requestFocus()\r\n            }\r\n            false\r\n        }\r\n        down.setOnTouchListener { _, event ->\r\n            if (event.action == MotionEvent.ACTION_DOWN) {\r\n                upper.requestFocus()\r\n            }\r\n            false\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "cloudstream/530", "ground_truth": "        upper.nextFocusDownId = down.id\r\n        down.nextFocusUpId = upper.id\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultFragmentPhone.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.ui.result.ResultFragment.getStoredData\nimport com.lagradost.cloudstream3.R\nimport android.view.View\nprivate fun reloadViewModel(forceReload: Boolean) {\r\n        if (!viewModel.hasLoaded() || forceReload) {\r\n            val storedData = getStoredData() ?: return\r\n            viewModel.load(\r\n                activity,\r\n                storedData.url,\r\n                storedData.apiName,\r\n                storedData.showFillers,\r", "choices": [{"text": "\n import com.lagradost.cloudstream3.ui.result.ResultFragment.getStoredData\nimport com.lagradost.cloudstream3.R\nimport android.view.View\nprivate fun reloadViewModel(forceReload: Boolean) {\r\n        if (!viewModel.hasLoaded() || forceReload) {\r\n            val storedData = getStoredData()?: return\r\n            viewModel.load(\r\n                activity,\r\n                storedData.url,\r\n                storedData.apiName,\r\n                storedData.showFillers,\r\n//                storedData.showSubtitles,\r\n                storedData.showSubtitles,\r\n                storedData.showEpisodes,\r\n                storedData.showSeasons,\r\n                storedData.showSeries,\r\n                storedData.showMovies,\r\n                storedData.showAnime,\r\n                storedData.showGames,\r\n                storedData.showMusic,\r\n                storedData.showTvShows,\r\n                storedData.showAnime,\r\n                storedData.showGames,\r\n                storedData.showMusic,\r\n                storedData.showTvShows,\r\n                storedData.showMovies,\r\n                storedData.showSeries,\r\n                storedData.showEpisode"}], "metadata": {"task_id": "cloudstream/531", "ground_truth": "                storedData.dubStatus,\r\n                storedData.start\r\n            )\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultFragmentPhone.kt"}}
{"prompt": "\n override fun onStop() {\r", "choices": [{"text": "super.onStop()\r\nLog.d(\"onStop\", \"onStop\")\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nLog.d(\"onDestroy\", \"onDestroy\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/533", "ground_truth": "        afterPluginsLoadedEvent -= ::reloadViewModel\r\n        super.onStop()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultFragmentPhone.kt"}}
{"prompt": "\nvar viewModel ResultViewModel2\nvar layout\nvar binding FragmentResultSwipeBinding?\n private fun updateUI(id: Int?) {\r", "choices": [{"text": "//    viewModel.getResults(id)\r\n//    viewModel.results.observe(viewLifecycleOwner, Observer {\r\n//        binding?.resultList?.adapter = ResultAdapter(it)\r\n//    })\r\n}\r\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n    binding = FragmentResultSwipeBinding.inflate(inflater, container, false)\r\n    layout = binding?.root\r\n    return layout\r\n}\r\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n    super.onViewCreated(view,"}], "metadata": {"task_id": "cloudstream/534", "ground_truth": "        syncModel.updateUserData()\r\n        viewModel.reloadEpisodes()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultFragmentPhone.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r\n        binding = null\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/536", "ground_truth": "        updateUIEvent -= ::updateUI\r\n        super.onDestroyView()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultFragmentTv.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport com.lagradost.cloudstream3.DubStatus\nprivate fun handleSelection(data: Any) {\r\n        when (data) {\r\n            is EpisodeRange -> {\r\n                viewModel.changeRange(data)\r\n            }\r\n\r\n            is Int -> {\r\n                viewModel.changeSeason(data)\r\n            }\r\n\r\n            is DubStatus -> {\r\n                viewModel.changeDubStatus(data)\r\n            }\r\n\r", "choices": [{"text": "//            is String -> {\r\n//                viewModel.changeSearch(data)\r\n//            }\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "cloudstream/538", "ground_truth": "            is String -> {\r\n                setRecommendations(currentRecommendations, data)\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultFragmentTv.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nprivate fun RecyclerView?.update(data: List<SelectData>) {\r", "choices": [{"text": "this?.apply {\r\nadapter?.apply {\r\n(this as? SelectAdapter)?.update(data)\r\n}\r\n}\r\n}\n"}], "metadata": {"task_id": "cloudstream/539", "ground_truth": "        (this?.adapter as? SelectAdaptor?)?.updateSelectionList(data)\r\n        this?.isVisible = data.size > 1\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultFragmentTv.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nprivate fun RecyclerView?.setAdapter() {\r\n        this?.adapter = SelectAdaptor { data ->\r", "choices": [{"text": "//            Toast.makeText(this, data.toString(), Toast.LENGTH_SHORT).show()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/540", "ground_truth": "            handleSelection(data)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultFragmentTv.kt"}}
{"prompt": "\nvar popupDialog Dialog?\nvar loadingDialog Dialog?\nvar currentRecommendations List<SearchResponse>\n private fun focusPlayButton() {\r\n        binding?.resultPlayMovie?.requestFocus()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/541", "ground_truth": "        binding?.resultPlaySeries?.requestFocus()\r\n        binding?.resultResumeSeries?.requestFocus()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultFragmentTv.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.ui.result.ResultFragment.getStoredData\nimport com.lagradost.cloudstream3.R\nimport android.view.View\nprivate fun reloadViewModel(forceReload: Boolean) {\r\n        if (!viewModel.hasLoaded() || forceReload) {\r\n            val storedData = getStoredData() ?: return\r\n            viewModel.load(\r\n                activity,\r\n                storedData.url,\r\n                storedData.apiName,\r\n                storedData.showFillers,\r", "choices": [{"text": "\n import com.lagradost.cloudstream3.ui.result.ResultFragment.getStoredData\nimport com.lagradost.cloudstream3.R\nimport android.view.View\nprivate fun reloadViewModel(forceReload: Boolean) {\r\n        if (!viewModel.hasLoaded() || forceReload) {\r\n            val storedData = getStoredData()?: return\r\n            viewModel.load(\r\n                activity,\r\n                storedData.url,\r\n                storedData.apiName,\r\n                storedData.showFillers,\r\n//                storedData.showSubtitles,\r\n                storedData.showSubtitles,\r\n                storedData.showEpisodes,\r\n                storedData.showSeasons,\r\n                storedData.showSeries,\r\n                storedData.showMovies,\r\n                storedData.showAnime,\r\n                storedData.showGames,\r\n                storedData.showMusic,\r\n                storedData.showTvShows,\r\n                storedData.showAnime,\r\n                storedData.showGames,\r\n                storedData.showMusic,\r\n                storedData.showTvShows,\r\n                storedData.showMovies,\r\n                storedData.showSeries,\r\n                storedData.showEpisode"}], "metadata": {"task_id": "cloudstream/542", "ground_truth": "                storedData.dubStatus,\r\n                storedData.start\r\n            )\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultFragmentTv.kt"}}
{"prompt": "\n override fun onStop() {\r", "choices": [{"text": "super.onStop()\r\nLog.d(\"onStop\", \"onStop\")\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nLog.d(\"onDestroy\", \"onDestroy\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/544", "ground_truth": "        afterPluginsLoadedEvent -= ::reloadViewModel\r\n        super.onStop()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultFragmentTv.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.AppUtils.isRtl\nimport com.lagradost.cloudstream3.R\nprivate fun toggleEpisodes(show: Boolean) {\r\n        binding?.apply {\r\n            episodesShadow.fade(show)\r\n            episodeHolderTv.fade(show)\r\n            if (episodesShadow.isRtl()) {\r\n                episodesShadowBackground.scaleX = -1f\r", "choices": [{"text": "//                episodesShadowBackground.scaleY = -1f\r\n            } else {\r\n                episodesShadowBackground.scaleX = 1f\r\n//                episodesShadowBackground.scaleY = 1f\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/545", "ground_truth": "            } else {\r\n                episodesShadowBackground.scaleX = 1f\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultFragmentTv.kt"}}
{"prompt": "\n import android.content.res.Configuration\noverride fun onConfigurationChanged(newConfig: Configuration) {\r\n        super.onConfigurationChanged(newConfig)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/546", "ground_truth": "        uiReset()\r\n        fixPlayerSize()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultTrailerPlayer.kt"}}
{"prompt": "\nvar playerWidthHeight Pair<Int, Int>?\nval TAG\nvar isFullScreenPlayer\n override fun playerDimensionsLoaded(width: Int, height : Int) {\r", "choices": [{"text": "playerWidthHeight = Pair(width, height)\r\n}\n"}], "metadata": {"task_id": "cloudstream/547", "ground_truth": "        playerWidthHeight = width to height\r\n        fixPlayerSize()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultTrailerPlayer.kt"}}
{"prompt": "\n fun txt(status: DubStatus?): UiText? {\r\n    return txt(\r\n        when (status) {\r\n            DubStatus.Dubbed -> R.string.app_dubbed_text\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/549", "ground_truth": "            DubStatus.Subbed -> R.string.app_subbed_text\r\n            else -> null\r\n        }\r\n    )\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultViewModel2.kt"}}
{"prompt": "\n fun SelectPopup.getTitle(context: Context): String {\r\n    return when (this) {\r\n        is SelectPopup.SelectArray -> text.asString(context)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/552", "ground_truth": "        is SelectPopup.SelectText -> text.asString(context)\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultViewModel2.kt"}}
{"prompt": "\n fun SelectPopup.getOptions(context: Context): List<String> {\r\n    return when (this) {\r\n        is SelectPopup.SelectArray -> {\r\n            this.options.map { it.first.asString(context) }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/553", "ground_truth": "        }\r\n\r\n        is SelectPopup.SelectText -> options.map { it.asString(context) }\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultViewModel2.kt"}}
{"prompt": "\n fun clear() {\r", "choices": [{"text": "//     this.clear()\r\n// }\r\n//\r\n// fun add(element: T) {\r\n//     this.add(element)\r\n// }\r\n//\r\n// fun addAll(elements: Collection<T>) {\r\n//     this.addAll(elements)\r\n// }\r\n//\r\n// fun remove(element: T) {\r\n//     this.remove(element)\r\n// }\r\n//\r\n// fun removeAll(elements: Collection<T>) {\r\n//     this.removeAll(elements)\r\n//"}], "metadata": {"task_id": "cloudstream/554", "ground_truth": "        currentResponse = null\r\n        _page.postValue(null)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultViewModel2.kt"}}
{"prompt": "\n private fun List<SeasonData>?.getSeason(season: Int?): SeasonData? {\r", "choices": [{"text": "-    return this?.find { it.season == season }\r\n+    return this?.find { it.season == season?: 0 }\r\n }\r\n \r\n private fun List<SeasonData>?.getSeason(season: Int?, seasonData: SeasonData): SeasonData? {\r\n-    return this?.find { it.season == season }?: seasonData\r\n+    return this?.find { it.season == season?: 0 }?: seasonData\r\n }\r\n \r\n private fun List<SeasonData>?.getSeason(season: Int?, seasonData: SeasonData,"}], "metadata": {"task_id": "cloudstream/555", "ground_truth": "            if (season == null) return null\r\n            return this?.firstOrNull { it.season == season }\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultViewModel2.kt"}}
{"prompt": "\n import kotlinx.coroutines.*\nimport com.lagradost.cloudstream3.utils.*\nimport com.lagradost.cloudstream3.mvvm.*\nimport com.lagradost.cloudstream3.*\nimport android.content.*\nprivate fun filterName(name: String?): String? {\r\n            if (name == null) return null\r\n            Regex(\"[eE]pisode [0-9]*(.*)\").find(name)?.groupValues?.get(1)?.let {\r", "choices": [{"text": "               return it\r\n            }\r\n            return name\r\n        }\n\nclass EpisodesViewModel(application: Application) : BaseViewModel(application) {\n    private val _episodes = MutableLiveData<List<Episode>>()\n    val episodes: LiveData<List<Episode>>\n        get() = _episodes\n\n    private val _selectedEpisode = MutableLiveData<Episode>()\n    val selectedEpisode: LiveData<Episode>\n        get() = _selectedEpisode\n\n    private val _selectedEpisodeIndex = MutableLiveData<Int>()\n    val selectedEpisodeIndex: LiveData<Int>\n        get() = _selectedEpisodeIndex\n\n    private val _selectedEpisodePosition"}], "metadata": {"task_id": "cloudstream/556", "ground_truth": "                if (it.isEmpty())\r\n                    return null\r\n            }\r\n            return name\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultViewModel2.kt"}}
{"prompt": "\n fun singleMap(ep: ResultEpisode): Map<EpisodeIndexer, List<ResultEpisode>> =\r\n            mapOf(\r\n                EpisodeIndexer(DubStatus.None, 0) to listOf(\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/557", "ground_truth": "                    ep\r\n                )\r\n            )", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultViewModel2.kt"}}
{"prompt": "\n import java.io.File\nimport com.lagradost.cloudstream3.utils.Coroutines.main\nimport com.lagradost.cloudstream3.ui.player.SubtitleData\nprivate fun downloadSubtitle(\r\n            context: Context?,\r\n            link: SubtitleData,\r\n            meta: VideoDownloadManager.DownloadEpisodeMetadata,\r\n        ) {\r\n            context?.let { ctx ->\r\n                val fileName = VideoDownloadManager.getFileName(ctx, meta)\r\n                val folder = getFolder(meta.type ?: return, meta.mainName)\r\n                downloadSubtitle(\r\n                    ctx,\r\n                    ExtractorSubtitleLink(link.name, link.url, \"\"),\r", "choices": [{"text": "\n import java.io.File\nimport com.lagradost.cloudstream3.utils.Coroutines.main\nimport com.lagradost.cloudstream3.ui.player.SubtitleData\nprivate fun downloadSubtitle(\r\n            context: Context?,\r\n            link: SubtitleData,\r\n            meta: VideoDownloadManager.DownloadEpisodeMetadata,\r\n        ) {\r\n            context?.let { ctx ->\r\n                val fileName = VideoDownloadManager.getFileName(ctx, meta)\r\n                val folder = getFolder(meta.type?: return, meta.mainName)\r\n                downloadSubtitle(\r\n                    ctx,\r\n                    ExtractorSubtitleLink(link.name, link.url, \"\"),\r\n//                    ExtractorSubtitleLink(link.name, link.url, \"\"),\r\n                    folder,\r\n                    fileName,\r\n                    meta.type?: return\r\n                )\r\n            }\r\n        }\n"}], "metadata": {"task_id": "cloudstream/559", "ground_truth": "                    fileName,\r\n                    folder\r\n                )\r\n            }\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultViewModel2.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.ui.player.LoadType\nimport com.lagradost.cloudstream3.CommonActivity.activity\nimport android.app.Activity\nprivate fun startChromecast(\r\n        activity: Activity?,\r\n        result: ResultEpisode,\r\n        isVisible: Boolean = true\r\n    ) {\r\n        if (activity == null) return\r\n        loadLinks(result, isVisible = isVisible, LoadType.Chromecast) { data ->\r", "choices": [{"text": "//            val intent = Intent(activity, ChromecastActivity::class.java)\r\n//            intent.putExtra(ChromecastActivity.EXTRA_DATA, data)\r\n//            activity.startActivity(intent)\r\n        }\r\n    }\r\nprivate fun startChromecast(\r\n        activity: Activity?,\r\n        result: ResultEpisode,\r\n        isVisible: Boolean = true,\r\n        callback: (data: String) -> Unit\r\n    ) {\r\n        if (activity == null) return\r\n        loadLinks(result, isVisible = isVisible, LoadType.Chromecast) { data ->\r\n            callback(data)\r\n        }\r\n    }"}], "metadata": {"task_id": "cloudstream/561", "ground_truth": "            startChromecast(activity, result, data.links, data.subs, 0)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultViewModel2.kt"}}
{"prompt": "\nvar currentRanges Map<EpisodeIndexer, List<EpisodeRange>>\nvar currentResponse LoadResponse?\nvar currentMeta SyncAPI?.SyncResult?\n fun cancelLinks() {\r\n        currentLoadLinkJob?.cancel()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/564", "ground_truth": "        currentLoadLinkJob = null\r\n        _loadedLinks.postValue(null)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultViewModel2.kt"}}
{"prompt": "\n import androidx.lifecycle.viewModelScope\nprivate fun postPopup(text: UiText, options: List<UiText>, callback: suspend (Int?) -> Unit) {\r\n        _selectPopup.postValue(\r\n            SelectPopup.SelectText(\r\n                text,\r\n                options\r\n            ) { value ->\r\n                viewModelScope.launchSafe {\r\n                    _selectPopup.postValue(null)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/565", "ground_truth": "                    callback.invoke(value)\r\n                }\r\n            }\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultViewModel2.kt"}}
{"prompt": "\n import androidx.lifecycle.viewModelScope\n @JvmName(\"postPopupArray\")\r\n    private fun postPopup(\r\n        text: UiText,\r\n        options: List<Pair<UiText, Int>>,\r\n        callback: suspend (Int?) -> Unit\r\n    ) {\r\n        _selectPopup.postValue(\r\n            SelectPopup.SelectArray(\r\n                text,\r\n                options,\r\n            ) { value ->\r\n                viewModelScope.launchSafe {\r\n                    _selectPopup.postValue(null)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/566", "ground_truth": "                    callback.invoke(value)\r\n                }\r\n            }\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultViewModel2.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.Coroutines.ioSafe\nimport com.lagradost.cloudstream3.ui.player.LoadType\nprivate fun loadLinks(\r\n        result: ResultEpisode,\r\n        isVisible: Boolean,\r\n        type: LoadType,\r\n        clearCache: Boolean = false,\r\n        work: suspend (CoroutineScope.(LinkLoadingResult) -> Unit)\r\n    ) {\r\n        currentLoadLinkJob?.cancel()\r\n        currentLoadLinkJob = ioSafe {\r\n            val links = loadLinks(\r\n                result,\r\n                isVisible = isVisible,\r\n                type = type,\r\n                clearCache = clearCache\r", "choices": [{"text": "//                clearCache = true\r\n            )\r\n            work(links)\r\n        }\r\n    }\r\n\r\n    private fun loadLinks(\r\n        result: ResultEpisode,\r\n        isVisible: Boolean,\r\n        type: LoadType,\r\n        clearCache: Boolean = false\r\n    ): LinkLoadingResult {\r\n        val links = mutableListOf<Link>()\r\n        val linkLoadingResult = LinkLoadingResult()\r\n        val linkLoadingResult2 = LinkLoadingResult()\r\n        val linkLoadingResult3 = LinkLoadingResult()\r\n        val linkLoadingResult4 = LinkLoadingResult()\r\n        val linkLoadingResult5 = LinkLoadingResult()\r\n        val linkLoadingResult6 = LinkLoadingResult"}], "metadata": {"task_id": "cloudstream/567", "ground_truth": "            )\r\n            if (!this.isActive) return@ioSafe\r\n            work(links)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultViewModel2.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.ui.player.LoadType\nprivate fun acquireSingleSubtitle(\r\n        result: ResultEpisode,\r\n        text: UiText,\r\n        callback: (Pair<LinkLoadingResult, Int>) -> Unit,\r\n    ) {\r\n        loadLinks(result, isVisible = true, type = LoadType.Unknown) { links ->\r\n            postPopup(\r\n                text,\r\n                links.subs.map { txt(it.name) })\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/569", "ground_truth": "            {\r\n                callback.invoke(links to (it ?: return@postPopup))\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultViewModel2.kt"}}
{"prompt": "\n fun handleAction(click: EpisodeClickEvent) =\r", "choices": [{"text": "-    when (click.action) {\r\n-        EpisodeClickEvent.Action.PLAY -> play(click.episode)\r\n-        EpisodeClickEvent.Action.PAUSE -> pause()\r\n-        EpisodeClickEvent.Action.NEXT -> next()\r\n-        EpisodeClickEvent.Action.PREVIOUS -> previous()\r\n-        EpisodeClickEvent.Action.TOGGLE_PLAYBACK -> togglePlayback()\r\n-        EpisodeClickEvent.Action.TOGGLE_REPEAT -> toggleRepeat()\r\n-        EpisodeClickEvent.Action.TOGGLE_SH"}], "metadata": {"task_id": "cloudstream/570", "ground_truth": "        viewModelScope.launchSafe {\r\n            handleEpisodeClickEvent(click)\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultViewModel2.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.Coroutines.ioWorkSafe\nimport com.lagradost.cloudstream3.utils.Coroutines.ioWork\nprivate suspend fun updateFillers(name: String) {\r\n        fillers =\r\n            ioWorkSafe {\r", "choices": [{"text": "//                val fillers = Filler.getFillers(name)\r\n//                fillers.forEach {\r\n//                    it.save()\r\n//                }\r\n                val fillers = Filler.getFillers(name)\r\n                fillers.forEach {\r\n                    it.save()\r\n                }\r\n            }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/571", "ground_truth": "                FillerEpisodeCheck.getFillerEpisodes(name)\r\n            } ?: emptyMap()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultViewModel2.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.DataStoreHelper.getViewPos\nprivate fun getMovie(): ResultEpisode? {\r\n        return currentEpisodes.entries.firstOrNull()?.value?.firstOrNull()?.let { ep ->\r\n            val posDur = getViewPos(ep.id)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/572", "ground_truth": "            ep.copy(position = posDur?.position ?: 0, duration = posDur?.duration ?: 0)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultViewModel2.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.LoadResponse.Companion.isMovie\nfun reloadEpisodes() {\r\n        if (currentResponse?.isMovie() == true) {\r\n            postMovie()\r\n        } else {\r\n            _episodes.postValue(\r\n                Resource.Success(\r\n                    getEpisodes(\r\n                        currentIndex ?: return,\r\n                        currentRange ?: return\r\n                    )\r\n                )\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/573", "ground_truth": "            )\r\n            _movie.postValue(null)\r\n        }\r\n        postResume()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultViewModel2.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.APIHolder.getId\nprivate fun postFavorites(loadResponse: LoadResponse) {\r\n        val id = loadResponse.getId()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/575", "ground_truth": "        val isFavorite = getFavoritesData(id) != null\r\n        _favoriteStatus.postValue(isFavorite)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultViewModel2.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.Coroutines.ioSafe\nprivate fun loadTrailers(loadResponse: LoadResponse) = ioSafe {\r\n        _trailers.postValue(\r\n            getTrailers(\r", "choices": [{"text": "//                loadResponse.movie.id,\r\n                loadResponse.movie.id,\r\n                loadResponse.movie.title,\r\n                loadResponse.movie.posterPath,\r\n                loadResponse.movie.backdropPath,\r\n                loadResponse.movie.overview,\r\n                loadResponse.movie.releaseDate,\r\n                loadResponse.movie.voteAverage,\r\n                loadResponse.movie.voteCount,\r\n                loadResponse.movie.genres,\r\n                loadResponse.movie.runtime,\r\n                loadResponse.movie.tagline,\r\n                loadResponse.movie.status,\r\n                loadResponse.movie.adult,\r\n                loadResponse.movie.video"}], "metadata": {"task_id": "cloudstream/577", "ground_truth": "                loadResponse,\r\n                3\r\n            )\r\n        ) // we dont want to fetch too many trailers\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\ResultViewModel2.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\noverride fun onViewDetachedFromWindow(holder: RecyclerView.ViewHolder) {\r\n        if(holder.itemView.hasFocus()) {\r", "choices": [{"text": "holder.itemView.clearFocus()\r\n        }\r\n        super.onViewDetachedFromWindow(holder)\r\n    }\n"}], "metadata": {"task_id": "cloudstream/581", "ground_truth": "            holder.itemView.clearFocus()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\SelectAdaptor.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\nfun select(newIndex: Int, recyclerView: RecyclerView?) {\r\n        if(recyclerView == null) return\r\n        if(newIndex == selectedIndex) return\r\n        val oldIndex = selectedIndex\r", "choices": [{"text": "//        val oldView = recyclerView.findViewHolderForAdapterPosition(oldIndex)\r\n//        val newView = recyclerView.findViewHolderForAdapterPosition(newIndex)\r\n//        if(oldView!= null && newView!= null) {\r\n//            oldView.itemView.isSelected = false\r\n//            newView.itemView.isSelected = true\r\n//        }\r\n        selectedIndex = newIndex\r\n    }\r\n"}], "metadata": {"task_id": "cloudstream/582", "ground_truth": "        selectedIndex = newIndex\r\n\r\n        notifyItemChanged(selectedIndex)\r\n        notifyItemChanged(oldIndex)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\SelectAdaptor.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.DiffUtil\nfun updateSelectionList(newList: List<SelectData>) {\r\n        val diffResult = DiffUtil.calculateDiff(\r\n            SelectDataCallback(this.selection, newList)\r\n        )\r\n\r", "choices": [{"text": "//        this.selection = newList\r\n        diffResult.dispatchUpdatesTo(this)\r\n    }\r\n"}], "metadata": {"task_id": "cloudstream/583", "ground_truth": "        selection.clear()\r\n        selection.addAll(newList)\r\n\r\n        diffResult.dispatchUpdatesTo(this)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\SelectAdaptor.kt"}}
{"prompt": "\n private fun getMissing(): List<CurrentSynced> {\r\n        return repos.map {\r\n            CurrentSynced(\r\n                it.name,\r\n                it.idPrefix,\r\n                syncs.containsKey(it.idPrefix),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/585", "ground_truth": "                it.hasAccount(),\r\n                it.icon,\r\n            )\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\SyncViewModel.kt"}}
{"prompt": "\nval _currentSynced MutableLiveData<List<CurrentSynced>>\nval _userDataResponse MutableLiveData<Resource<SyncAPI.AbstractSyncStatus>?>\nval synced LiveData<List<CurrentSynced>>\n fun updateSynced() {\r", "choices": [{"text": "_currentSynced.value = _currentSynced.value?.map { it.copy(synced = true) }\r\n}\r\nfun updateSynced(id: String) {\r\n_currentSynced.value = _currentSynced.value?.map {\r\nif (it.id == id) it.copy(synced = true)\r\nelse it\r\n}\r\n}\r\nfun updateSynced(id: String, synced: Boolean) {\r\n_currentSynced.value = _currentSynced.value?.map {\r\nif (it"}], "metadata": {"task_id": "cloudstream/586", "ground_truth": "        Log.i(TAG, \"updateSynced\")\r\n        _currentSynced.postValue(getMissing())\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\SyncViewModel.kt"}}
{"prompt": " import android.util.Log\nval _currentSynced MutableLiveData<List<CurrentSynced>>\nval synced LiveData<List<CurrentSynced>>\nval syncs\nprivate fun addSync(idPrefix: String, id: String): Boolean {\r\n        if (syncs[idPrefix] == id) return false\r\n        Log.i(TAG, \"addSync $idPrefix = $id\")\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/587", "ground_truth": "\r\n        syncs[idPrefix] = id\r\n        //_syncIds.postValue(syncs)\r\n        return true\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\SyncViewModel.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.mvvm.Resource\nimport android.util.Log\nfun setEpisodesDelta(delta: Int) {\r\n        Log.i(TAG, \"setEpisodesDelta = $delta\")\r\n\r\n        val user = userData.value\r\n        if (user is Resource.Success) {\r\n            user.value.watchedEpisodes?.plus(\r\n                delta\r", "choices": [{"text": "//                if (delta > 0) {\r\n//                    delta\r\n//                } else {\r\n//                    -delta\r\n//                }\r\n            )?.let {\r\n                userData.value = Resource.Success(user.value.copy(watchedEpisodes = it))\r\n            }\r\n        }\r\n    }<file_sep>/app/src/main/java/com/lagradost/cloudstream3/mvvm/ui/home/HomeFragment.kt\npackage com.lagradost.cloudstream3.mvvm.ui.home\n\nimport android.os.Bundle\nimport android."}], "metadata": {"task_id": "cloudstream/589", "ground_truth": "            )?.let { episode ->\r\n                setEpisodes(episode)\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\SyncViewModel.kt"}}
{"prompt": "\n import android.util.Log\nfun modifyMaxEpisode(episodeNum: Int) {\r\n        Log.i(TAG, \"modifyMaxEpisode = $episodeNum\")\r\n        modifyData { status ->\r\n            status.watchedEpisodes = maxOf(\r\n                episodeNum,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/593", "ground_truth": "                status.watchedEpisodes ?: return@modifyData null\r\n            )\r\n            status\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\SyncViewModel.kt"}}
{"prompt": "\n fun setSync(syncName : String, syncId : String) {\r", "choices": [{"text": "//     val sync = Sync(syncName, syncId)\r\n//     syncs.add(sync)\r\n// }\r\n//\r\n// fun getSync(syncName : String) : Sync? {\r\n//     for (sync in syncs) {\r\n//         if (sync.name == syncName) {\r\n//             return sync\r\n//         }\r\n//     }\r\n//     return null\r\n// }\r\n//\r\n// fun getSync(syncId : String) : Sync? {\r\n//     for (sync in sync"}], "metadata": {"task_id": "cloudstream/595", "ground_truth": "        syncs.clear()\r\n        syncs[syncName] = syncId\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\SyncViewModel.kt"}}
{"prompt": "\nval _currentSynced MutableLiveData<List<CurrentSynced>>\nval metadata LiveData<Resource<SyncAPI.SyncResult>?>\nval syncs\n fun clear() {\r\n        syncs.clear()\r\n        _metaResponse.postValue(null)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/596", "ground_truth": "        _currentSynced.postValue(getMissing())\r\n        _userDataResponse.postValue(null)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\SyncViewModel.kt"}}
{"prompt": " import com.lagradost.cloudstream3.mvvm.Resource\nval _userDataResponse MutableLiveData<Resource<SyncAPI.AbstractSyncStatus>?>\nval userData LiveData<Resource<SyncAPI.AbstractSyncStatus>?>\nvar hasAddedFromUrl HashSet<String>\nfun updateMetaAndUser() {\r\n        _userDataResponse.postValue(Resource.Loading())\r\n        _metaResponse.postValue(Resource.Loading())\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/597", "ground_truth": "\r\n        Log.i(TAG, \"updateMetaAndUser\")\r\n        updateMetadata()\r\n        updateUserData()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\SyncViewModel.kt"}}
{"prompt": "\n import android.content.Context\nfun asStringNull(context: Context?): String? {\r\n        try {\r\n            return asString(context ?: return null)\r\n        } catch (e: Exception) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/598", "ground_truth": "            Log.e(TAG, \"Got invalid data from $this\")\r\n            logError(e)\r\n            return null\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\UiText.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.UIHelper.setImage\nimport android.widget.ImageView\nfun ImageView?.setImage(value: UiImage?, fadeIn: Boolean = true) {\r\n    when (value) {\r\n        is UiImage.Image -> setImageImage(value, fadeIn)\r\n        is UiImage.Drawable -> setImageDrawable(value)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/599", "ground_truth": "        null -> {\r\n            this?.isVisible = false\r\n        }\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\UiText.kt"}}
{"prompt": " import com.lagradost.cloudstream3.utils.UIHelper.setImage\nimport android.widget.ImageView\nval TAG\nfun ImageView?.setImageImage(value: UiImage.Image, fadeIn: Boolean = true) {\r", "choices": [{"text": "this?.setImage(value, fadeIn)\r\n}\n"}], "metadata": {"task_id": "cloudstream/600", "ground_truth": "    if (this == null) return\r\n    this.isVisible = setImage(value.url, value.headers, value.errorDrawable, fadeIn)\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\UiText.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.UIHelper.setImage\nimport android.widget.ImageView\nfun ImageView?.setImageDrawable(value: UiImage.Drawable) {\r\n    if (this == null) return\r", "choices": [{"text": "}\r\n\r\nfun ImageView?.setImageDrawable(value: UiImage.Drawable?) {\r\n    if (this == null) return\r\n}\r\n\r\nfun ImageView?.setImageDrawable(value: UiImage.Drawable?) {\r\n    if (this == null) return\r\n}\r\n\r\nfun ImageView?.setImageDrawable(value: UiImage.Drawable?) {\r\n    if (this == null) return\r\n}\r\n\r\nfun ImageView?.setImageDrawable(value: UiImage.Drawable?) {\r\n    if (this == null) return\r\n}\r\n\r\nfun ImageView?.setImageDrawable(value: UiImage.Drawable?) {\r\n    if"}], "metadata": {"task_id": "cloudstream/601", "ground_truth": "    this.isVisible = true\r\n    this.setImage(UiImage.Drawable(value.resId))\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\UiText.kt"}}
{"prompt": "\n import androidx.annotation.DrawableRes\n\r\n@JvmName(\"imgNull\")\r\nfun img(\r\n    url: String?,\r\n    headers: Map<String, String>? = null,\r\n    @DrawableRes errorDrawable: Int? = null\r\n): UiImage? {\r", "choices": [{"text": ""}], "metadata": {"task_id": "cloudstream/602", "ground_truth": "    if (url.isNullOrBlank()) return null\r\n    return UiImage.Image(url, headers, errorDrawable)\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\UiText.kt"}}
{"prompt": "\n import androidx.annotation.StringRes\n\r\n@JvmName(\"txtNull\")\r\nfun txt(@StringRes resId: Int?, vararg args: Any?): UiText? {\r\n    if (resId == null || args.any { it == null }) {\r\n        return null\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/603", "ground_truth": "    }\r\n    return UiText.StringResource(resId, args.filterNotNull().toList())\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\UiText.kt"}}
{"prompt": "\n import androidx.core.view.isVisible\nimport android.widget.TextView\nfun TextView?.setText(text: UiText?) {\r\n    if (this == null) return\r\n    if (text == null) {\r\n        this.isVisible = false\r\n    } else {\r\n        val str = text.asStringNull(context)?.let {\r\n            if (this.maxLines == 1) {\r\n                it.replace(\"\\n\", \" \")\r\n            } else {\r\n                it\r\n            }\r\n        }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/604", "ground_truth": "\r\n        this.isGone = str.isNullOrBlank()\r\n        this.text = str\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\result\\UiText.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        when (holder) {\r", "choices": [{"text": "//            is MyViewHolder -> holder.bind(items[position])\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "cloudstream/606", "ground_truth": "            is CardViewHolder -> {\r\n                holder.bind(cardList[position], position)\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\search\\SearchAdaptor.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.SearchResponse\nimport androidx.recyclerview.widget.DiffUtil\nfun updateList(newList: List<SearchResponse>) {\r\n        val diffResult = DiffUtil.calculateDiff(\r\n            SearchResponseDiffCallback(this.cardList, newList)\r\n        )\r\n\r", "choices": [{"text": "//        this.cardList = newList\r\n        diffResult.dispatchUpdatesTo(this)\r\n    }\n"}], "metadata": {"task_id": "cloudstream/607", "ground_truth": "        cardList.clear()\r\n        cardList.addAll(newList)\r\n\r\n        diffResult.dispatchUpdatesTo(this)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\search\\SearchAdaptor.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.SearchResponse\nimport android.widget.FrameLayout\nimport android.view.ViewGroup\nimport android.view.View\nfun bind(card: SearchResponse, position: Int) {\r\n            if (!compactView) {\r\n                cardView?.apply {\r\n                    layoutParams = FrameLayout.LayoutParams(\r\n                        ViewGroup.LayoutParams.MATCH_PARENT,\r\n                        coverHeight\r\n                    )\r", "choices": [{"text": "//                    setPadding(0, 0, 0, 0)\r\n                }\r\n            } else {\r\n                cardView?.apply {\r\n                    layoutParams = FrameLayout.LayoutParams(\r\n                        ViewGroup.LayoutParams.MATCH_PARENT,\r\n                        coverHeight\r\n                    )\r\n//                    setPadding(0, 0, 0, 0)\r\n                }\r\n            }\r\n        }<file_sep>/app/src/main/java/com/lagradost/cloudstream3/ui/search/SearchFragment.kt\npackage com.lagradost.cloudstream3.ui.search\n\nimport android.os.Bundle\n"}], "metadata": {"task_id": "cloudstream/608", "ground_truth": "                }\r\n            }\r\n\r\n            SearchResultBuilder.bind(clickCallback, card, position, itemView)\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\search\\SearchAdaptor.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.ui.APIRepository\nimport com.lagradost.cloudstream3.SearchResponse\nimport com.lagradost.cloudstream3.R\nimport com.lagradost.cloudstream3.AnimeSearchResponse\nfun List<SearchResponse>.filterSearchResponse(): List<SearchResponse> {\r\n            return this.filter { response ->\r\n                if (response is AnimeSearchResponse) {\r\n                    val status = response.dubStatus\r\n                    (status.isNullOrEmpty()) || (status.any {\r\n                        APIRepository.dubStatusActive.contains(it)\r\n                    })\r", "choices": [{"text": "//                    response.dubStatus.isNullOrEmpty() || response.dubStatus.any {\r\n//                        APIRepository.dubStatusActive.contains(it)\r\n//                    }\r\n                } else {\r\n                    true\r\n                }\r\n            }\r\n        }\n"}], "metadata": {"task_id": "cloudstream/609", "ground_truth": "                } else {\r\n                    true\r\n                }\r\n            }\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\search\\SearchFragment.kt"}}
{"prompt": "\n import android.os.Bundle\nfun newInstance(query: String): Bundle {\r\n            return Bundle().apply {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/610", "ground_truth": "                if(query.isNotBlank()) putString(SEARCH_QUERY, query)\r\n            }\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\search\\SearchFragment.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.AppUtils.ownShow\nimport com.lagradost.cloudstream3.ui.settings.SettingsFragment.Companion.isTvSettings\nimport com.lagradost.cloudstream3.R\nimport android.view.WindowManager\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?,\r\n    ): View? {\r\n        activity?.window?.setSoftInputMode(\r\n            WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE\r\n        )\r\n        bottomSheetDialog?.ownShow()\r\n\r\n        val layout = if (isTvSettings()) R.layout.fragment_search_tv else R.layout.fragment_search\r\n\r\n        val root = inflater.inflate(layout, container, false)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/611", "ground_truth": "        // TODO TRYCATCH\r\n        binding = FragmentSearchBinding.bind(root)\r\n\r\n        return root\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\search\\SearchFragment.kt"}}
{"prompt": "\n import android.content.res.Configuration\noverride fun onConfigurationChanged(newConfig: Configuration) {\r", "choices": [{"text": "super.onConfigurationChanged(newConfig)\r\nif (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n//landscape\r\n} else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {\r\n//portrait\r\n}\r\n}\n"}], "metadata": {"task_id": "cloudstream/613", "ground_truth": "        super.onConfigurationChanged(newConfig)\r\n        fixGrid()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\search\\SearchFragment.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.UIHelper.hideKeyboard\nimport com.lagradost.cloudstream3.utils.AppUtils.ownHide\nimport android.view.View\noverride fun onDestroyView() {\r\n        hideKeyboard()\r\n        bottomSheetDialog?.ownHide()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/614", "ground_truth": "        binding = null\r\n        super.onDestroyView()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\search\\SearchFragment.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\nfinish()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/615", "ground_truth": "        super.onResume()\r\n        afterPluginsLoadedEvent += ::reloadRepos\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\search\\SearchFragment.kt"}}
{"prompt": "\n override fun onStop() {\r", "choices": [{"text": "super.onStop()\r\nLog.d(\"onStop\", \"onStop\")\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nLog.d(\"onDestroy\", \"onDestroy\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/616", "ground_truth": "        super.onStop()\r\n        afterPluginsLoadedEvent -= ::reloadRepos\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\search\\SearchFragment.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.databinding.SearchHistoryItemBinding\nimport com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n        return CardViewHolder(\r\n            SearchHistoryItemBinding.inflate(LayoutInflater.from(parent.context), parent, false),\r", "choices": [{"text": ")\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        (holder as CardViewHolder).bind(getItem(position))\r\n    }\r\n\r\n    class CardViewHolder(private val binding: SearchHistoryItemBinding) : RecyclerView.ViewHolder(binding.root) {\r\n        fun bind(item: SearchHistoryItem) {\r\n            binding.item = item\r\n            binding.executePendingBindings()\r\n        }\r\n    }\r\n}\r\n<file_sep>/app/src/main/java/com/lagradost/cloudstream3/ui/search/SearchViewModel.kt\npackage com.lagradost"}], "metadata": {"task_id": "cloudstream/617", "ground_truth": "            clickCallback,\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\search\\SearchHistoryAdaptor.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        when (holder) {\r", "choices": [{"text": "//            is ViewHolder -> holder.bind(items[position])\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "cloudstream/618", "ground_truth": "            is CardViewHolder -> {\r\n                holder.bind(cardList[position])\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\search\\SearchHistoryAdaptor.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.DiffUtil\nfun updateList(newList: List<SearchHistoryItem>) {\r\n        val diffResult = DiffUtil.calculateDiff(\r\n            SearchHistoryDiffCallback(this.cardList, newList)\r\n        )\r\n\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/619", "ground_truth": "        cardList.clear()\r\n        cardList.addAll(newList)\r\n\r\n        diffResult.dispatchUpdatesTo(this)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\search\\SearchHistoryAdaptor.kt"}}
{"prompt": "\n fun clearSearch() {\r", "choices": [{"text": "//     searchInput.value = \"\";\r\n//     searchInput.placeholder = \"Search\";\r\n//     searchInput.classList.remove(\"search-input-active\");\r\n//     searchInput.classList.add(\"search-input-inactive\");\r\n//     searchIcon.classList.remove(\"search-icon-active\");\r\n//     searchIcon.classList.add(\"search-icon-inactive\");\r\n//     searchResults.classList.remove(\"search-results-active\");\r\n//     searchResults.classList.add(\"search-results-inactive\");\r\n//     search"}], "metadata": {"task_id": "cloudstream/622", "ground_truth": "        _searchResponse.postValue(Resource.Success(ArrayList()))\r\n        _currentSearch.postValue(emptyList())\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\search\\SearchViewModel.kt"}}
{"prompt": "\n fun searchAndCancel(\r\n        query: String,\r\n        providersActive: Set<String> = setOf(),\r\n        ignoreSettings: Boolean = false,\r\n        isQuickSearch: Boolean = false,\r\n    ) {\r\n        currentSearchIndex++\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/623", "ground_truth": "        onGoingSearch?.cancel()\r\n        onGoingSearch = search(query, providersActive, ignoreSettings, isQuickSearch)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\search\\SearchViewModel.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        when (holder) {\r", "choices": [{"text": "//            is ViewHolder -> holder.bind(items[position])\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "cloudstream/626", "ground_truth": "            is CardViewHolder -> {\r\n                holder.bind(cardList[position])\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\AccountAdapter.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/627", "ground_truth": "        binding = null\r\n        super.onDestroyView()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\extensions\\ExtensionsFragment.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\nfinish()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/630", "ground_truth": "        super.onResume()\r\n        afterRepositoryLoadedEvent += ::reloadRepositories\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\extensions\\ExtensionsFragment.kt"}}
{"prompt": "\n override fun onStop() {\r", "choices": [{"text": "super.onStop()\r\nLog.d(\"onStop\", \"onStop\")\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nLog.d(\"onDestroy\", \"onDestroy\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/631", "ground_truth": "        super.onStop()\r\n        afterRepositoryLoadedEvent -= ::reloadRepositories\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\extensions\\ExtensionsFragment.kt"}}
{"prompt": " import com.lagradost.cloudstream3.R\nvar binding FragmentExtensionsBinding?\nval extensionViewModel ExtensionsViewModel\nprivate fun reloadRepositories(success: Boolean = true) {\r", "choices": [{"text": "binding?.apply {\r\nif (success) {\r\nbinding?.progressBar?.visibility = View.GONE\r\nbinding?.recyclerView?.visibility = View.VISIBLE\r\n} else {\r\nbinding?.progressBar?.visibility = View.GONE\r\nbinding?.recyclerView?.visibility = View.GONE\r\nbinding?.errorTextView?.visibility = View.VISIBLE\r\n}\r\n}\r\n}\r\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\nbinding = FragmentExtensionsBinding.inflate(inflater, container, false)\r\n"}], "metadata": {"task_id": "cloudstream/632", "ground_truth": "        extensionViewModel.loadStats()\r\n        extensionViewModel.loadRepositories()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\extensions\\ExtensionsFragment.kt"}}
{"prompt": " import com.lagradost.cloudstream3.R\nval _repositories\nval repositories LiveData<Array<RepositoryData>>\nval _pluginStats MutableLiveData<PluginStats?>\nfun loadRepositories() {\r", "choices": [{"text": "repositories.value = null\r\nval repositories = ArrayList<RepositoryData>()\r\nval pluginStats = PluginStats()\r\nval pluginStats2 = PluginStats()\r\nval pluginStats3 = PluginStats()\r\nval pluginStats4 = PluginStats()\r\nval pluginStats5 = PluginStats()\r\nval pluginStats6 = PluginStats()\r\nval pluginStats7 = PluginStats()\r\nval pluginStats8 = PluginStats()\r\nval pluginStats9 = PluginStats()\r\nval pluginStats10 = PluginStats()\r\nval pluginStats11 = PluginStats()\r"}], "metadata": {"task_id": "cloudstream/633", "ground_truth": "        val urls = repos()\r\n        _repositories.postValue(urls)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\extensions\\ExtensionsViewModel.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.ui.settings.SettingsFragment.Companion.isTrueTvSettings\nimport com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n        val layout = if(isTrueTvSettings()) R.layout.repository_item_tv else R.layout.repository_item\r\n        val inflated = LayoutInflater.from(parent.context).inflate(layout, parent, false)\r", "choices": [{"text": "return RepositoryViewHolder(inflated)\r\n    }\n"}], "metadata": {"task_id": "cloudstream/634", "ground_truth": "\r\n        return PluginViewHolder(\r\n            RepositoryItemBinding.bind(inflated) // may crash\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\extensions\\PluginAdapter.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.RecyclerView\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        when (holder) {\r", "choices": [{"text": "//            is ViewHolder -> holder.bind(items[position])\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "cloudstream/635", "ground_truth": "            is PluginViewHolder -> {\r\n                holder.bind(plugins[position])\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\extensions\\PluginAdapter.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.DiffUtil\nfun updateList(newList: List<PluginViewData>) {\r\n        val diffResult = DiffUtil.calculateDiff(\r\n            PluginDiffCallback(this.plugins, newList)\r\n        )\r\n\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/636", "ground_truth": "        plugins.clear()\r\n        plugins.addAll(newList)\r\n\r\n        diffResult.dispatchUpdatesTo(this)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\extensions\\PluginAdapter.kt"}}
{"prompt": "\n private tailrec fun findClosestBase2(target: Int, current: Int = 16, max: Int = 512): Int {\r\n            if (current >= max) return max\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/638", "ground_truth": "            if (current >= target) return current\r\n            return findClosestBase2(target, current * 2, max)\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\extensions\\PluginAdapter.kt"}}
{"prompt": "\n private tailrec fun findClosestBase2(target: Int, current: Int = 16, max: Int = 512): Int {\r\n            if (current >= max) return max\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/640", "ground_truth": "            if (current >= target) return current\r\n            return findClosestBase2(target, current * 2, max)\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\extensions\\PluginDetailsFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/641", "ground_truth": "        binding = null\r\n        super.onDestroyView()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\extensions\\PluginDetailsFragment.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.databinding.FragmentPluginDetailsBinding\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        val localBinding = FragmentPluginDetailsBinding.inflate(inflater, container, false)\r\n        binding = localBinding\r", "choices": [{"text": "//        binding.lifecycleOwner = this\r\n        return binding.root\r\n    }\n"}], "metadata": {"task_id": "cloudstream/642", "ground_truth": "        return localBinding.root\r\n        //return inflater.inflate(R.layout.fragment_plugin_details, container, false)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\extensions\\PluginDetailsFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/644", "ground_truth": "        binding = null\r\n        super.onDestroyView()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\extensions\\PluginsFragment.kt"}}
{"prompt": "\n fun updateFilteredPlugins() {\r\n        _filteredPlugins.postValue(\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/651", "ground_truth": "            false to plugins.filterTvTypes().filterLang().sortByQuery(currentQuery)\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\extensions\\PluginsViewModel.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.mvvm.launchSafe\nimport androidx.lifecycle.viewModelScope\nimport android.content.Context\nfun updatePluginList(context: Context?, repositoryUrl: String) = viewModelScope.launchSafe {\r\n        if (context == null) return@launchSafe\r", "choices": [{"text": "//        val repository = Repository(repositoryUrl)\r\n//        val plugins = repository.getPlugins()\r\n//        val pluginList = PluginList(plugins)\r\n//        val pluginListLiveData = MutableLiveData<PluginList>()\r\n//        pluginListLiveData.value = pluginList\r\n//        pluginListLiveData.postValue(pluginList)\r\n    }<file_sep>/app/src/main/java/com/lagradost/cloudstream3/mvvm/viewmodel/PluginListViewModel.kt\npackage com.lagradost.cloudstream3.mvvm.viewmodel\n"}], "metadata": {"task_id": "cloudstream/652", "ground_truth": "        Log.i(TAG, \"updatePluginList = $repositoryUrl\")\r\n        updatePluginListPrivate(context, repositoryUrl)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\extensions\\PluginsViewModel.kt"}}
{"prompt": "\n fun search(query: String?) {\r\n        currentQuery = query\r\n        _filteredPlugins.postValue(\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/653", "ground_truth": "            true to (filteredPlugins.value?.second?.sortByQuery(query) ?: emptyList())\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\extensions\\PluginsViewModel.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.RecyclerView\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        when (holder) {\r", "choices": [{"text": "//            is ViewHolder -> holder.bind(items[position])\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "cloudstream/656", "ground_truth": "            is RepoViewHolder -> {\r\n                holder.bind(repositories[position])\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\extensions\\RepoAdapter.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.recyclerview.widget.DiffUtil\nfun updateList(newList: Array<RepositoryData>) {\r\n        val diffResult = DiffUtil.calculateDiff(\r\n            RepoDiffCallback(this.repositories, newList)\r\n        )\r\n\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/657", "ground_truth": "        repositories.clear()\r\n        repositories.addAll(newList)\r\n\r\n        diffResult.dispatchUpdatesTo(this)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\extensions\\RepoAdapter.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.ui.settings.SettingsFragment.Companion.setUpToolbar\nimport com.lagradost.cloudstream3.R\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        setUpToolbar(R.string.category_account)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/658", "ground_truth": "        setPaddingBottom()\r\n        setToolBarScrollFlags()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\SettingsAccount.kt"}}
{"prompt": "\n import androidx.preference.PreferenceFragmentCompat\nimport androidx.preference.Preference\nimport androidx.fragment.app.Fragment\nfun PreferenceFragmentCompat?.getPref(id: Int): Preference? {\r\n            if (this == null) return null\r\n\r\n            return try {\r\n                findPreference(getString(id))\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/659", "ground_truth": "            } catch (e: Exception) {\r\n                logError(e)\r\n                null\r\n            }\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\SettingsFragment.kt"}}
{"prompt": "\n import androidx.preference.PreferenceFragmentCompat\nimport androidx.preference.Preference\nimport androidx.fragment.app.Fragment\nfun PreferenceFragmentCompat.setPaddingBottom() {\r\n            if (isTvSettings()) {\r", "choices": [{"text": "//                val paddingBottom = resources.getDimensionPixelSize(R.dimen.tv_settings_padding_bottom)\r\n//                val paddingTop = resources.getDimensionPixelSize(R.dimen.tv_settings_padding_top)\r\n//                val paddingStart = resources.getDimensionPixelSize(R.dimen.tv_settings_padding_start)\r\n//                val paddingEnd = resources.getDimensionPixelSize(R.dimen.tv_settings_padding_end)\r\n//                val padding = Rect(paddingStart, paddingTop, paddingEnd"}], "metadata": {"task_id": "cloudstream/660", "ground_truth": "                listView?.setPadding(0, 0, 0, 100.toPx)\r\n            }\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\SettingsFragment.kt"}}
{"prompt": "\n import java.io.File\nfun getFolderSize(dir: File): Long {\r\n            var size: Long = 0\r\n            dir.listFiles()?.let {\r\n                for (file in it) {\r\n                    size += if (file.isFile) {\r\n                        // System.out.println(file.getName() + \" \" + file.length());\r\n                        file.length()\r\n                    } else getFolderSize(file)\r", "choices": [{"text": "}\r\n            }\r\n            return size\r\n        }\n"}], "metadata": {"task_id": "cloudstream/664", "ground_truth": "                }\r\n            }\r\n\r\n            return size\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\SettingsFragment.kt"}}
{"prompt": " import android.content.Context\nvar isTv Boolean\nvar binding MainSettingsBinding?\nvar beneneCount\nfun Context.updateTv() {\r", "choices": [{"text": "isTv = this.resources.getBoolean(R.bool.isTv)\r\n}\r\nfun Context.updateBeneneCount() {\r\nbeneneCount = this.resources.getInteger(R.integer.beneneCount)\r\n}\r\nfun Context.updateBinding(binding: MainSettingsBinding) {\r\nthis.binding = binding\r\n}\r\nfun Context.updateIsTv() {\r\nisTv = this.resources.getBoolean(R.bool.isTv)\r\n}\r\nfun Context.updateBeneneCount() {\r\nbeneneCount = this"}], "metadata": {"task_id": "cloudstream/668", "ground_truth": "            isTrueTv = isTrueTvSettings()\r\n            isTv = isTvSettings()\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\SettingsFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/670", "ground_truth": "        binding = null\r\n        super.onDestroyView()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\SettingsFragment.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.databinding.MainSettingsBinding\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?,\r\n    ): View {\r\n        val localBinding = MainSettingsBinding.inflate(inflater, container, false)\r\n        binding = localBinding\r", "choices": [{"text": "//        binding.lifecycleOwner = this\r\n        return binding.root\r\n    }\n"}], "metadata": {"task_id": "cloudstream/671", "ground_truth": "        return localBinding.root\r\n        //return inflater.inflate(R.layout.main_settings, container, false)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\SettingsFragment.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport android.os.Build\nimport android.content.Context\nfun getCurrentLocale(context: Context): String {\r\n    // val dm = res.displayMetrics\r\n    val res = context.resources\r\n    val conf = res.configuration\r\n\r\n    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n        conf?.locales?.get(0)?.toString() ?: \"en\"\r", "choices": [{"text": "\n import com.lagradost.cloudstream3.R\nimport android.os.Build\nimport android.content.Context\nfun getCurrentLocale(context: Context): String {\r\n    // val dm = res.displayMetrics\r\n    val res = context.resources\r\n    val conf = res.configuration\r\n\r\n    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n        conf?.locales?.get(0)?.toString()?: \"en\"\r\n//        conf.locales.get(0).toString()\r\n    } else {\r\n        conf.locale.toString()\r\n    }\r\n}<file_sep>/app/src/main/java/com/lagradost/cloudstream3/ui/fragments/SettingsFragment.kt\npackage com.lagradost.cloudstream3.ui.fragments\n\nimport android.content.Context\nimport android.content.Intent\nimport android.content.SharedPreferences\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget."}], "metadata": {"task_id": "cloudstream/672", "ground_truth": "    } else {\r\n        @Suppress(\"DEPRECATION\")\r\n        conf?.locale?.toString() ?: \"en\"\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\SettingsGeneral.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.ui.settings.SettingsFragment.Companion.setUpToolbar\nimport com.lagradost.cloudstream3.R\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        setUpToolbar(R.string.category_general)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/673", "ground_truth": "        setPaddingBottom()\r\n        setToolBarScrollFlags()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\SettingsGeneral.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.ui.settings.SettingsFragment.Companion.setUpToolbar\nimport com.lagradost.cloudstream3.R\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        setUpToolbar(R.string.category_player)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/674", "ground_truth": "        setPaddingBottom()\r\n        setToolBarScrollFlags()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\SettingsPlayer.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.ui.settings.SettingsFragment.Companion.setUpToolbar\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        setUpToolbar(R.string.category_providers)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/675", "ground_truth": "        setPaddingBottom()\r\n        setToolBarScrollFlags()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\SettingsProviders.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.ui.settings.SettingsFragment.Companion.setUpToolbar\nimport com.lagradost.cloudstream3.R\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        setUpToolbar(R.string.category_ui)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/676", "ground_truth": "        setPaddingBottom()\r\n        setToolBarScrollFlags()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\SettingsUI.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.ui.settings.SettingsFragment.Companion.setUpToolbar\nimport com.lagradost.cloudstream3.R\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        setUpToolbar(R.string.category_updates)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "cloudstream/677", "ground_truth": "        setPaddingBottom()\r\n        setToolBarScrollFlags()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\SettingsUpdates.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/678", "ground_truth": "        binding = null\r\n        super.onDestroyView()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\testing\\TestFragment.kt"}}
{"prompt": "\n private fun updateProgress() {\r", "choices": [{"text": "//        val progress = (100 * (mCurrentPosition / mDuration)).toInt()\r\n//        mBinding.progressBar.progress = progress\r\n//        mBinding.progressText.text = String.format(Locale.getDefault(), \"%d:%02d/%d:%02d\",\r\n//                TimeUnit.MILLISECONDS.toMinutes(mCurrentPosition.toLong()),\r\n//                TimeUnit.MILLISECONDS.toSeconds(mCurrentPosition.toLong()) -\r\n//                        TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(mCurrentPosition.to"}], "metadata": {"task_id": "cloudstream/683", "ground_truth": "        _providerProgress.postValue(TestProgress(passed, failed, total))\r\n        postProviders()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\testing\\TestViewModel.kt"}}
{"prompt": "\n fun setFilterMethod(filter: ProviderFilter) {\r\n        if (this.filter == filter) return\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/685", "ground_truth": "        this.filter = filter\r\n        postProviders()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\testing\\TestViewModel.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.TestingUtils\nimport com.lagradost.cloudstream3.MainAPI\nprivate fun addProvider(api: MainAPI, results: TestingUtils.TestResultProvider) {\r\n        synchronized(providers) {\r\n            val index = providers.indexOfFirst { it.first == api }\r\n            if (index == -1) {\r\n                providers.add(api to results)\r\n                if (results.success) passed++ else failed++\r\n            } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/686", "ground_truth": "                providers[index] = api to results\r\n            }\r\n            updateProgress()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\testing\\TestViewModel.kt"}}
{"prompt": "\n fun init() {\r", "choices": [{"text": "//     val a = 10\r\n//     val b = 20\r\n//     val c = 30\r\n//     val d = 40\r\n//     val e = 50\r\n//     val f = 60\r\n//     val g = 70\r\n//     val h = 80\r\n//     val i = 90\r\n//     val j = 100\r\n//     val k = 110\r\n//     val l = 120\r\n//     val m"}], "metadata": {"task_id": "cloudstream/687", "ground_truth": "        total = synchronized(APIHolder.allProviders) { APIHolder.allProviders.size }\r\n        updateProgress()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\testing\\TestViewModel.kt"}}
{"prompt": "\n fun stopTest() {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "cloudstream/689", "ground_truth": "        scope?.cancel()\r\n        scope = null\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\settings\\testing\\TestViewModel.kt"}}
{"prompt": "\n import android.os.Bundle\nfun newInstance(isSetup: Boolean): Bundle {\r\n            return Bundle().apply {\r", "choices": [{"text": "//                putBoolean(IS_SETUP, isSetup)\r\n            }\r\n        }\n"}], "metadata": {"task_id": "cloudstream/690", "ground_truth": "                putBoolean(SETUP_EXTENSION_BUNDLE_IS_SETUP, isSetup)\r\n            }\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\setup\\SetupFragmentExtensions.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/691", "ground_truth": "        binding = null\r\n        super.onDestroyView()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\setup\\SetupFragmentExtensions.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\nfinish()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/693", "ground_truth": "        super.onResume()\r\n        afterRepositoryLoadedEvent += ::setRepositories\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\setup\\SetupFragmentExtensions.kt"}}
{"prompt": "\n override fun onStop() {\r", "choices": [{"text": "super.onStop()\r\nLog.d(\"onStop\", \"onStop\")\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nLog.d(\"onDestroy\", \"onDestroy\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/694", "ground_truth": "        super.onStop()\r\n        afterRepositoryLoadedEvent -= ::setRepositories\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\setup\\SetupFragmentExtensions.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/695", "ground_truth": "        binding = null\r\n        super.onDestroyView()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\setup\\SetupFragmentLanguage.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.databinding.FragmentSetupLanguageBinding\nimport androidx.fragment.app.Fragment\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        val localBinding = FragmentSetupLanguageBinding.inflate(inflater, container, false)\r\n        binding = localBinding\r", "choices": [{"text": "//        val view = inflater.inflate(R.layout.fragment_setup_language, container, false)\r\n        return binding.root\r\n    }\n}<file_sep>/app/src/main/java/com/lagradost/cloudstream3/ui/setup/SetupFragment.kt\npackage com.lagradost.cloudstream3.ui.setup\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\nimport androidx.navigation.fragment.findNavController\nimport com"}], "metadata": {"task_id": "cloudstream/696", "ground_truth": "        return localBinding.root\r\n        //return inflater.inflate(R.layout.fragment_setup_language, container, false)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\setup\\SetupFragmentLanguage.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/697", "ground_truth": "        binding = null\r\n        super.onDestroyView()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\setup\\SetupFragmentLayout.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.databinding.FragmentSetupLayoutBinding\nimport androidx.fragment.app.Fragment\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        val localBinding = FragmentSetupLayoutBinding.inflate(inflater, container, false)\r\n        binding = localBinding\r", "choices": [{"text": "//        binding.button.setOnClickListener {\r\n//            val intent = Intent(activity, MainActivity::class.java)\r\n//            startActivity(intent)\r\n//        }\r\n        return binding.root\r\n    }\r\n}<file_sep>/app/src/main/java/com/lagradost/cloudstream3/ui/main/MainViewModel.kt\npackage com.lagradost.cloudstream3.ui.main\r\n\r\nimport android.app.Application\r\nimport androidx.lifecycle.AndroidViewModel\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\n"}], "metadata": {"task_id": "cloudstream/698", "ground_truth": "        return localBinding.root\r\n        //return inflater.inflate(R.layout.fragment_setup_layout, container, false)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\setup\\SetupFragmentLayout.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/699", "ground_truth": "        binding = null\r\n        super.onDestroyView()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\setup\\SetupFragmentMedia.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.databinding.FragmentSetupMediaBinding\nimport androidx.fragment.app.Fragment\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        val localBinding = FragmentSetupMediaBinding.inflate(inflater, container, false)\r\n        binding = localBinding\r", "choices": [{"text": "//        binding.button.setOnClickListener {\r\n//            val intent = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)\r\n//            startActivityForResult(intent, 1)\r\n//        }\r\n        return binding.root\r\n    }\r\n}<file_sep>/app/src/main/java/com/lagradost/cloudstream3/ui/setup/SetupFragment.kt\npackage com.lagradost.cloudstream3.ui.setup\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport"}], "metadata": {"task_id": "cloudstream/700", "ground_truth": "        return localBinding.root\r\n        //return inflater.inflate(R.layout.fragment_setup_media, container, false)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\setup\\SetupFragmentMedia.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/701", "ground_truth": "        binding = null\r\n        super.onDestroyView()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\setup\\SetupFragmentProviderLanguage.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.UIHelper.navigate\nimport com.lagradost.cloudstream3.R\nimport android.os.Bundle\nimport android.app.Activity\nfun push(activity: Activity?, hide: Boolean = true) {\r\n            activity.navigate(R.id.global_to_navigation_chrome_subtitles, Bundle().apply {\r", "choices": [{"text": "putBoolean(\"hide\", hide)\r\n}, hide)\r\n        }<file_sep>/app/src/main/java/com/lagradost/cloudstream3/utils/UIHelper.kt\npackage com.lagradost.cloudstream3.utils\n\nimport android.app.Activity\nimport android.content.Context\nimport android.content.Intent\nimport android.content.res.Configuration\nimport android.os.Bundle\nimport android.view.View\nimport android.view.ViewGroup\nimport android.view.inputmethod.InputMethodManager\nimport android.widget.EditText\nimport androidx"}], "metadata": {"task_id": "cloudstream/703", "ground_truth": "                putBoolean(\"hide\", hide)\r\n            })\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\subtitles\\ChromecastSubtitlesFragment.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun onColorSelected(stuff: Pair<Int, Int>) {\r\n        context?.setColor(stuff.first, stuff.second)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "cloudstream/706", "ground_truth": "        if (hide)\r\n            activity?.hideSystemUI()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\subtitles\\ChromecastSubtitlesFragment.kt"}}
{"prompt": "\n private fun onDialogDismissed(id: Int) {\r", "choices": [{"text": "// do something\r\n }\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/707", "ground_truth": "        if (hide)\r\n            activity?.hideSystemUI()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\subtitles\\ChromecastSubtitlesFragment.kt"}}
{"prompt": "\n import android.graphics.Color\nimport android.content.Context\nprivate fun Context.setColor(id: Int, color: Int?) {\r\n        val realColor = color ?: getDefColor(id)\r\n        when (id) {\r\n            0 -> state.foregroundColor = realColor\r\n            1 -> state.edgeColor = realColor\r\n            2 -> state.backgroundColor = realColor\r\n            3 -> state.windowColor = realColor\r", "choices": [{"text": "\n import android.graphics.Color\nimport android.content.Context\nprivate fun Context.setColor(id: Int, color: Int?) {\r\n        val realColor = color?: getDefColor(id)\r\n        when (id) {\r\n            0 -> state.foregroundColor = realColor\r\n            1 -> state.edgeColor = realColor\r\n            2 -> state.backgroundColor = realColor\r\n            3 -> state.windowColor = realColor\r\n//            4 -> state.windowBackgroundColor = realColor\r\n//            5 -> state.windowBackgroundEdgeColor = realColor\r\n//            6 -> state.windowBackgroundEdgeColor = realColor\r\n//            7 -> state.windowBackgroundEdgeColor = realColor\r\n//            8 -> state.windowBackgroundEdgeColor = realColor\r\n//            9 -> state.windowBackgroundEdgeColor = realColor\r\n//            10 -> state.windowBackgroundEdgeColor = realColor\r\n//            11 -> state.windowBackgroundEdgeColor = realColor\r\n//            12 -> state."}], "metadata": {"task_id": "cloudstream/709", "ground_truth": "\r\n            else -> Unit\r\n        }\r\n        updateState()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\subtitles\\ChromecastSubtitlesFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/711", "ground_truth": "        binding = null\r\n        super.onDestroyView()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\subtitles\\ChromecastSubtitlesFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/712", "ground_truth": "        super.onDestroy()\r\n        onColorSelectedEvent -= ::onColorSelected\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\subtitles\\ChromecastSubtitlesFragment.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.UIHelper.navigate\nimport com.lagradost.cloudstream3.R\nimport android.os.Bundle\nimport android.app.Activity\nfun push(activity: Activity?, hide: Boolean = true) {\r\n            activity.navigate(R.id.global_to_navigation_subtitles, Bundle().apply {\r", "choices": [{"text": "putBoolean(\"hide\", hide)\r\n}, hide)\r\n        }<file_sep>/app/src/main/java/com/lagradost/cloudstream3/utils/UIHelper.kt\npackage com.lagradost.cloudstream3.utils\n\nimport android.app.Activity\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Bundle\nimport android.support.v4.app.Fragment\nimport android.support.v4.app.FragmentActivity\nimport android.support.v4.app.FragmentManager\nimport android.support.v4"}], "metadata": {"task_id": "cloudstream/713", "ground_truth": "                putBoolean(\"hide\", hide)\r\n            })\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\subtitles\\SubtitlesFragment.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.AcraApplication.Companion.getKey\nimport androidx.media3.ui.CaptionStyleCompat\nimport android.graphics.Color\nfun getCurrentSavedStyle(): SaveCaptionStyle {\r\n            return getKey(SUBTITLE_KEY) ?: SaveCaptionStyle(\r\n                getDefColor(0),\r\n                getDefColor(2),\r\n                getDefColor(3),\r\n                CaptionStyleCompat.EDGE_TYPE_OUTLINE,\r\n                getDefColor(1),\r\n                null,\r", "choices": [{"text": "\n import com.lagradost.cloudstream3.AcraApplication.Companion.getKey\nimport androidx.media3.ui.CaptionStyleCompat\nimport android.graphics.Color\nfun getCurrentSavedStyle(): SaveCaptionStyle {\r\n            return getKey(SUBTITLE_KEY)?: SaveCaptionStyle(\r\n                getDefColor(0),\r\n                getDefColor(2),\r\n                getDefColor(3),\r\n                CaptionStyleCompat.EDGE_TYPE_OUTLINE,\r\n                getDefColor(1),\r\n                null,\r\n//                getDefColor(4),\r\n                getDefColor(5),\r\n                getDefColor(6),\r\n                getDefColor(7),\r\n                getDefColor(8),\r\n                getDefColor(9),\r\n                getDefColor(10),\r\n                getDefColor(11),\r\n                getDefColor(12),\r\n                getDefColor(13),\r\n                getDefColor(14),\r\n                getDefColor(15),\r\n                getDefColor(16),\r\n                getDefColor(17),\r\n                getDefColor(18),\r\n                getDefColor(19),\r\n                getDefColor"}], "metadata": {"task_id": "cloudstream/715", "ground_truth": "                null,\r\n                DEF_SUBS_ELEVATION,\r\n                null,\r\n            )\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\subtitles\\SubtitlesFragment.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate fun onColorSelected(stuff: Pair<Int, Int>) {\r\n        context?.setColor(stuff.first, stuff.second)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "cloudstream/717", "ground_truth": "        if (hide)\r\n            activity?.hideSystemUI()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\subtitles\\SubtitlesFragment.kt"}}
{"prompt": "\n private fun onDialogDismissed(id: Int) {\r", "choices": [{"text": "// do something\r\n }\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/718", "ground_truth": "        if (hide)\r\n            activity?.hideSystemUI()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\subtitles\\SubtitlesFragment.kt"}}
{"prompt": "\n import android.graphics.Color\nimport android.content.Context\nprivate fun Context.setColor(id: Int, color: Int?) {\r\n        val realColor = color ?: getDefColor(id)\r\n        when (id) {\r\n            0 -> state.foregroundColor = realColor\r\n            1 -> state.edgeColor = realColor\r\n            2 -> state.backgroundColor = realColor\r\n            3 -> state.windowColor = realColor\r", "choices": [{"text": "\n import android.graphics.Color\nimport android.content.Context\nprivate fun Context.setColor(id: Int, color: Int?) {\r\n        val realColor = color?: getDefColor(id)\r\n        when (id) {\r\n            0 -> state.foregroundColor = realColor\r\n            1 -> state.edgeColor = realColor\r\n            2 -> state.backgroundColor = realColor\r\n            3 -> state.windowColor = realColor\r\n//            4 -> state.windowBackgroundColor = realColor\r\n//            5 -> state.windowBackgroundEdgeColor = realColor\r\n//            6 -> state.windowBackgroundEdgeColor = realColor\r\n//            7 -> state.windowBackgroundEdgeColor = realColor\r\n//            8 -> state.windowBackgroundEdgeColor = realColor\r\n//            9 -> state.windowBackgroundEdgeColor = realColor\r\n//            10 -> state.windowBackgroundEdgeColor = realColor\r\n//            11 -> state.windowBackgroundEdgeColor = realColor\r\n//            12 -> state."}], "metadata": {"task_id": "cloudstream/719", "ground_truth": "\r\n            else -> Unit\r\n        }\r\n        updateState()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\subtitles\\SubtitlesFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/721", "ground_truth": "        binding = null\r\n        super.onDestroyView()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\subtitles\\SubtitlesFragment.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.databinding.SubtitleSettingsBinding\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        val localBinding = SubtitleSettingsBinding.inflate(inflater, container, false)\r\n        binding = localBinding\r", "choices": [{"text": "//        binding.subtitles.adapter = SubtitleAdapter(requireContext())\r\n        return binding.root\r\n    }\n"}], "metadata": {"task_id": "cloudstream/722", "ground_truth": "        return localBinding.root\r\n        //return inflater.inflate(R.layout.subtitle_settings, container, false)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\subtitles\\SubtitlesFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/723", "ground_truth": "        super.onDestroy()\r\n        onColorSelectedEvent -= ::onColorSelected\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\subtitles\\SubtitlesFragment.kt"}}
{"prompt": "\n import android.view.View\nfun newInstance(webViewUrl: String) =\r", "choices": [{"text": "WebFragment().apply {\r\n    arguments = Bundle().apply {\r\n        putString(ARG_URL, webViewUrl)\r\n    }\r\n}\r\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n    val view = inflater.inflate(R.layout.fragment_web, container, false)\r\n    val webView = view.findViewById<WebView>(R.id.webView)\r\n    webView.settings.javaScriptEnabled = true\r\n    webView.webViewClient = WebViewClient()\r\n    webView.loadUrl(arguments?.getString(ARG_URL))\r\n    return view\r\n"}], "metadata": {"task_id": "cloudstream/725", "ground_truth": "            Bundle().apply {\r\n                putString(WEBVIEW_URL, webViewUrl)\r\n            }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\ui\\WebviewFragment.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nfun RecyclerView.setMaxViewPoolSize(maxViewTypeId: Int, maxPoolSize: Int) {\r", "choices": [{"text": "val viewPool = viewPool\r\nif (viewPool.maxViewPoolSize < maxPoolSize) {\r\nviewPool.setMaxViewPoolSize(maxViewTypeId, maxPoolSize)\r\n}\r\n}\r\nfun RecyclerView.setMaxViewPoolSize(maxViewTypeId: Int, maxPoolSize: Int) {\r\nval viewPool = viewPool\r\nif (viewPool.maxViewPoolSize < maxPoolSize) {\r\nviewPool.setMaxViewPoolSize(maxViewTypeId, maxPoolSize)\r\n}\r\n}\r\nfun RecyclerView.setMaxViewPoolSize(maxViewTypeId: Int, maxPoolSize:"}], "metadata": {"task_id": "cloudstream/726", "ground_truth": "        for (i in 0..maxViewTypeId)\r\n            recycledViewPool.setMaxRecycledViews(i, maxPoolSize)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\AppUtils.kt"}}
{"prompt": "\n import androidx.core.text.HtmlCompat\nimport android.text.Spanned\nprivate fun getHtmlText(text: String): Spanned {\r\n        return try {\r\n            // I have no idea if this can throw any error, but I dont want to try\r\n            HtmlCompat.fromHtml(\r\n                text, HtmlCompat.FROM_HTML_MODE_LEGACY\r\n            )\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/729", "ground_truth": "        } catch (e: Exception) {\r\n            logError(e)\r\n            text.toSpanned()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\AppUtils.kt"}}
{"prompt": "\n import androidx.annotation.RequiresApi\nimport android.annotation.SuppressLint\n @RequiresApi(Build.VERSION_CODES.O)\r\n    @SuppressLint(\"Range\")\r\n    @Synchronized\r\n    private fun getWatchNextProgramByVideoId(\r\n        id: String,\r\n        context: Context\r\n    ): Pair<WatchNextProgram?, Long?> {\r\n        return findFirstWatchNextProgram(context) { cursor ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/732", "ground_truth": "            (cursor.getString(cursor.getColumnIndex(COLUMN_INTERNAL_PROVIDER_ID)) == id)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\AppUtils.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.DiffUtil\nfun updateList(newList: List<T>) {\r\n            val diffResult = DiffUtil.calculateDiff(\r\n                GenericDiffCallback(this.items, newList)\r\n            )\r\n\r", "choices": [{"text": ""}], "metadata": {"task_id": "cloudstream/733", "ground_truth": "            items.clear()\r\n            items.addAll(newList)\r\n\r\n            diffResult.dispatchUpdatesTo(this)\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\AppUtils.kt"}}
{"prompt": "\nvar currentAudioFocusRequest AudioFocusRequest?\nvar onAudioFocusEvent\nval continueWatchingLock\n fun Any.toJson(): String {\r", "choices": [{"text": "return Gson().toJson(this)\r\n}\r\nfun Any.fromJson(json: String): Any {\r\nreturn Gson().fromJson(json, this::class.java)\r\n}\r\nfun Any.fromJson(json: String, type: Type): Any {\r\nreturn Gson().fromJson(json, type)\r\n}\r\nfun Any.toJson(prettyPrint: Boolean): String {\r\nreturn GsonBuilder().setPrettyPrinting().create().toJson(this)\r\n}\r\nfun Any.toJson(prettyPrint: Boolean, type: Type): String {\r\nreturn"}], "metadata": {"task_id": "cloudstream/737", "ground_truth": "        if (this is String) return this\r\n        return mapper.writeValueAsString(this)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\AppUtils.kt"}}
{"prompt": "\n inline fun <reified T> tryParseJson(value: String?): T? {\r\n        return try {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/738", "ground_truth": "            parseJson(value ?: return null)\r\n        } catch (_: Exception) {\r\n            null\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\AppUtils.kt"}}
{"prompt": "\n import okhttp3.Cache\nimport com.lagradost.cloudstream3.utils.JsUnpacker.Companion.load\nimport android.net.NetworkCapabilities\nimport android.app.Activity\nfun Activity?.loadCache() {\r\n        try {\r\n            cacheClass(\"android.net.NetworkCapabilities\".load())\r", "choices": [{"text": "//            cacheClass(\"android.net.NetworkCapabilities\".load())\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/739", "ground_truth": "        } catch (_: Exception) {\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\AppUtils.kt"}}
{"prompt": "\n import com.google.android.gms.common.GoogleApiAvailability\nimport com.google.android.gms.common.ConnectionResult\nimport com.google.android.gms.cast.framework.CastContext\nfun Context.isCastApiAvailable(): Boolean {\r\n        val isCastApiAvailable =\r\n            GoogleApiAvailability.getInstance()\r\n                .isGooglePlayServicesAvailable(applicationContext) == ConnectionResult.SUCCESS\r\n        try {\r\n            applicationContext?.let { CastContext.getSharedInstance(it) }\r\n        } catch (e: Exception) {\r\n            println(e)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/742", "ground_truth": "            // track non-fatal\r\n            return false\r\n        }\r\n        return isCastApiAvailable\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\AppUtils.kt"}}
{"prompt": "\n import com.google.android.gms.cast.framework.CastState\nimport com.google.android.gms.cast.framework.CastContext\nfun Context.isConnectedToChromecast(): Boolean {\r\n        if (isCastApiAvailable()) {\r\n            val castContext = CastContext.getSharedInstance(this)\r\n            if (castContext.castState == CastState.CONNECTED) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/743", "ground_truth": "                return true\r\n            }\r\n        }\r\n        return false\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\AppUtils.kt"}}
{"prompt": "\n import okhttp3.Cache\nimport com.lagradost.cloudstream3.utils.FillerEpisodeCheck.toClassDir\nimport android.app.Activity\nprivate fun Activity?.cacheClass(clazz: String?) {\r\n        clazz?.let { c ->\r\n            this?.cacheDir?.let {\r\n                Cache(\r\n                    directory = File(it, c.toClassDir()),\r", "choices": [{"text": "//                    directory = File(it, \"cache\"),\r\n                    maxSize = 1024 * 1024 * 1024,\r\n                    version = 1\r\n                )\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/745", "ground_truth": "                    maxSize = 20L * 1024L * 1024L // 20 MiB\r\n                )\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\AppUtils.kt"}}
{"prompt": "\n import com.google.android.gms.common.wrappers.Wrappers\nimport android.content.pm.PackageManager\nfun Context.isAppInstalled(uri: String): Boolean {\r\n        val pm = Wrappers.packageManager(this)\r\n\r\n        return try {\r\n            pm.getPackageInfo(uri, 0) // PackageManager.GET_ACTIVITIES\r", "choices": [{"text": "\n            true\r\n        } catch (e: PackageManager.NameNotFoundException) {\r\n            false\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/746", "ground_truth": "            true\r\n        } catch (e: PackageManager.NameNotFoundException) {\r\n            false\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\AppUtils.kt"}}
{"prompt": "\n import android.content.Context\nprivate fun <T> Context.restoreMap(\r\n        map: Map<String, T>?,\r\n        isEditingAppSettings: Boolean = false\r\n    ) {\r\n        map?.filter { it.key.isTransferable() }?.forEach {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/747", "ground_truth": "            setKeyRaw(it.key, it.value, isEditingAppSettings)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\BackupUtils.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.lagradost.cloudstream3.utils.Coroutines.main\nimport com.google.android.gms.common.api.PendingResult\nimport com.google.android.gms.cast.framework.media.RemoteMediaClient\nfun awaitLinks(\r\n        pending: PendingResult<RemoteMediaClient.MediaChannelResult>?,\r\n        callback: (Boolean) -> Unit\r\n    ) {\r\n        if (pending == null) return\r\n        main {\r\n            val res = withContext(Dispatchers.IO) { pending.await() }\r\n            when (res.status.statusCode) {\r\n                CastStatusCodes.FAILED -> {\r\n                    callback.invoke(true)\r\n                    println(\"FAILED AND LOAD NEXT\")\r", "choices": [{"text": "//                    loadNext()\r\n                }\r\n                CastStatusCodes.SUCCESS -> {\r\n                    callback.invoke(false)\r\n                    println(\"SUCCESS\")\r\n                }\r\n                else -> {\r\n                    callback.invoke(true)\r\n                    println(\"ELSE AND LOAD NEXT\")\r\n//                    loadNext()\r\n                }\r\n            }\r\n        }\r\n    }<file_sep>/app/src/main/java/com/lagradost/cloudstream3/utils/Coroutines.kt\npackage com.lagradost.cloudstream3.utils\n\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.launch\n"}], "metadata": {"task_id": "cloudstream/748", "ground_truth": "                }\r\n                else -> Unit //IDK DO SMTH HERE\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\CastHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.mvvm.launchSafe\nfun <T> T.main(work: suspend ((T) -> Unit)): Job {\r\n        val value = this\r\n        return CoroutineScope(Dispatchers.Main).launchSafe {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/749", "ground_truth": "            work(value)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\Coroutines.kt"}}
{"prompt": "\n fun <T> T.ioSafe(work: suspend (CoroutineScope.(T) -> Unit)): Job {\r\n        val value = this\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/750", "ground_truth": "\r\n        return CoroutineScope(Dispatchers.IO).launchSafe {\r\n            work(value)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\Coroutines.kt"}}
{"prompt": "\n suspend fun <T, V> V.ioWorkSafe(work: suspend (CoroutineScope.(V) -> T)): T? {\r\n        val value = this\r\n        return withContext(Dispatchers.IO) {\r\n            try {\r\n                work(value)\r\n            } catch (e: Exception) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/751", "ground_truth": "                logError(e)\r\n                null\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\Coroutines.kt"}}
{"prompt": "\n suspend fun <T, V> V.ioWork(work: suspend (CoroutineScope.(V) -> T)): T {\r\n        val value = this\r\n        return withContext(Dispatchers.IO) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/752", "ground_truth": "            work(value)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\Coroutines.kt"}}
{"prompt": "\n suspend fun <T, V> V.mainWork(work: suspend (CoroutineScope.(V) -> T)): T {\r\n        val value = this\r\n        return withContext(Dispatchers.Main) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/753", "ground_truth": "            work(value)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\Coroutines.kt"}}
{"prompt": "\n import android.os.Looper\nimport android.os.Handler\nfun runOnMainThread(work: (() -> Unit)) {\r\n        val mainHandler = Handler(Looper.getMainLooper())\r\n        mainHandler.post {\r", "choices": [{"text": "//            work()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/754", "ground_truth": "            work()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\Coroutines.kt"}}
{"prompt": "\n import kotlin.reflect.KProperty\noperator fun setValue(\r\n        self: Any?,\r\n        property: KProperty<*>,\r\n        t: T?\r\n    ) {\r\n        cache = t\r\n        if (t == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/755", "ground_truth": "            removeKey(key)\r\n        } else {\r\n            setKeyClass(key, t)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DataStore.kt"}}
{"prompt": " import android.content.Context\nval klass KClass<out T>\nvar cache T?\nval mapper JsonMapper\nfun Context.containsKey(path: String): Boolean {\r", "choices": [{"text": "return this.getSharedPreferences(this.packageName, Context.MODE_PRIVATE).contains(path)\r\n}\n"}], "metadata": {"task_id": "cloudstream/756", "ground_truth": "        val prefs = getSharedPrefs()\r\n        return prefs.contains(path)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DataStore.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.AcraApplication.Companion.removeKey\nimport android.content.SharedPreferences\nimport android.content.Context\nfun Context.removeKey(path: String) {\r\n        try {\r\n            val prefs = getSharedPrefs()\r\n            if (prefs.contains(path)) {\r\n                val editor: SharedPreferences.Editor = prefs.edit()\r\n                editor.remove(path)\r\n                editor.apply()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/757", "ground_truth": "            }\r\n        } catch (e: Exception) {\r\n            logError(e)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DataStore.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.AcraApplication.Companion.removeKey\nimport android.content.Context\nfun Context.removeKeys(folder: String): Int {\r\n        val keys = getKeys(\"$folder/\")\r", "choices": [{"text": "return keys.size\r\n}\r\nfun Context.getKeys(folder: String): List<String> {\r\n        val keys = ArrayList<String>()\r\n        val prefs = getSharedPreferences(folder, Context.MODE_PRIVATE)\r\n        val keysArray = prefs.all.keys\r\n        for (key in keysArray) {\r\n                keys.add(key)\r\n        }\r\n        return keys\r\n}\r\nfun Context.removeKey(folder: String, key: String) {\r\n        val prefs = getSharedPreferences(folder, Context.MODE_PRIVATE)\r\n        val editor = prefs.edit()\r\n        editor.remove(key"}], "metadata": {"task_id": "cloudstream/758", "ground_truth": "        keys.forEach { value ->\r\n            removeKey(value)\r\n        }\r\n        return keys.size\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DataStore.kt"}}
{"prompt": "\n import android.content.SharedPreferences\nimport android.content.Context\nfun <T> Context.setKey(path: String, value: T) {\r\n        try {\r\n            val editor: SharedPreferences.Editor = getSharedPrefs().edit()\r\n            editor.putString(path, mapper.writeValueAsString(value))\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/759", "ground_truth": "            editor.apply()\r\n        } catch (e: Exception) {\r\n            logError(e)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DataStore.kt"}}
{"prompt": "\n import android.content.Context\nfun <T> Context.getKey(path: String, valueType: Class<T>): T? {\r\n        try {\r\n            val json: String = getSharedPrefs().getString(path, null) ?: return null\r", "choices": [{"text": "\n import android.content.Context\nfun <T> Context.getKey(path: String, valueType: Class<T>): T? {\r\n        try {\r\n            val json: String = getSharedPrefs().getString(path, null)?: return null\r\n//            val gson = Gson()\r\n            return Gson().fromJson(json, valueType)\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n        return null\r\n    }\r\n"}], "metadata": {"task_id": "cloudstream/760", "ground_truth": "            return json.toKotlinObject(valueType)\r\n        } catch (e: Exception) {\r\n            return null\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DataStore.kt"}}
{"prompt": "\n import android.content.Context\ninline fun <reified T : Any> Context.getKey(path: String, defVal: T?): T? {\r\n        try {\r\n            val json: String = getSharedPrefs().getString(path, null) ?: return defVal\r", "choices": [{"text": "\n import android.content.Context\ninline fun <reified T : Any> Context.getKey(path: String, defVal: T?): T? {\r\n        try {\r\n            val json: String = getSharedPrefs().getString(path, null)?: return defVal\r\n//            val json = getSharedPrefs().getString(path, null)?: return defVal\r\n            val gson = Gson()\r\n            return gson.fromJson(json, T::class.java)\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n            return defVal\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "cloudstream/761", "ground_truth": "            return json.toKotlinObject()\r\n        } catch (e: Exception) {\r\n            return null\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DataStore.kt"}}
{"prompt": " import kotlin.reflect.KProperty\nimport com.lagradost.cloudstream3.*\nvar searchPreferenceTags List<TvType>\nval klass KClass<out T>\nvar searchPreferenceProviders List<String>\noperator fun setValue(\r\n        self: Any?,\r\n        property: KProperty<*>,\r\n        t: T?\r\n    ) {\r\n        if (t == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/762", "ground_truth": "            removeKey(realKey)\r\n        } else {\r\n            AcraApplication.setKeyClass(realKey, t)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DataStoreHelper.kt"}}
{"prompt": "\n private fun deserializeTv(data : List<String>) : List<TvType> {\r\n        return data.mapNotNull { listName ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/763", "ground_truth": "            TvType.values().firstOrNull { it.name == listName }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DataStoreHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.AcraApplication.Companion.context\nimport android.content.Context\nfun getAccounts(context: Context): List<Account> {\r\n        return accounts.toMutableList().apply {\r", "choices": [{"text": "//            add(Account(\"<EMAIL>\", \"<EMAIL>\"))\r\n//            add(Account(\"<EMAIL>\", \"<EMAIL>\"))\r\n//            add(Account(\"<EMAIL>\", \"<EMAIL>\"))\r\n//            add(Account(\"<EMAIL>\", \"<EMAIL>\"))\r\n//            add(Account(\"<EMAIL>\", \"<EMAIL>\"))\r\n//            add(Account(\"<EMAIL>\", \"<EMAIL>\"))\r\n//            add(Account(\"<EMAIL>\", \"<EMAIL>\"))\r\n//            add(Account(\"<EMAIL>\", \"<EMAIL>\"))\r\n//            add(Account(\"<EMAIL>\", \"<EMAIL>\"))\r\n//            add(Account(\"<EMAIL>\", \"<EMAIL>"}], "metadata": {"task_id": "cloudstream/765", "ground_truth": "            val item = getDefaultAccount(context)\r\n            remove(item)\r\n            add(0, item)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DataStoreHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.AcraApplication.Companion.getKeys\nimport com.lagradost.cloudstream3.AcraApplication.Companion.getKey\nfun getAllWatchStateIds(): List<Int>? {\r\n        val folder = \"$currentAccount/$RESULT_WATCH_STATE\"\r\n        return getKeys(folder)?.mapNotNull {\r", "choices": [{"text": "//            it.substring(RESULT_WATCH_STATE.length + 1).toIntOrNull()\r\n            it.substring(RESULT_WATCH_STATE.length + 1)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/770", "ground_truth": "            it.removePrefix(\"$folder/\").toIntOrNull()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DataStoreHelper.kt"}}
{"prompt": "\n fun deleteAllResumeStateIds() {\r", "choices": [{"text": "//     val query = \"DELETE FROM resume_state_ids\"\r\n//     db.execSQL(query)\r\n// }\r\n//\r\n// fun deleteAllResumeStateIds(resumeId: String) {\r\n//     val query = \"DELETE FROM resume_state_ids WHERE resume_id = '$resumeId'\"\r\n//     db.execSQL(query)\r\n// }\r\n//\r\n// fun deleteAllResumeStateIds(resumeId: String, stateId: String) {\r\n//     val query = \"DELETE FROM resume_state_ids WHERE"}], "metadata": {"task_id": "cloudstream/771", "ground_truth": "        val folder = \"$currentAccount/$RESULT_RESUME_WATCHING\"\r\n        removeKeys(folder)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DataStoreHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.AcraApplication.Companion.getKeys\nimport com.lagradost.cloudstream3.AcraApplication.Companion.getKey\nfun getAllResumeStateIds(): List<Int>? {\r\n        val folder = \"$currentAccount/$RESULT_RESUME_WATCHING\"\r\n        return getKeys(folder)?.mapNotNull {\r", "choices": [{"text": "//            it.toIntOrNull()\r\n            it.toInt()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/773", "ground_truth": "            it.removePrefix(\"$folder/\").toIntOrNull()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DataStoreHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.AcraApplication.Companion.getKeys\nimport com.lagradost.cloudstream3.AcraApplication.Companion.getKey\nprivate fun getAllResumeStateIdsOld(): List<Int>? {\r\n        val folder = \"$currentAccount/$RESULT_RESUME_WATCHING_OLD\"\r\n        return getKeys(folder)?.mapNotNull {\r", "choices": [{"text": "//            it.toInt()\r\n            it.toIntOrNull()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/774", "ground_truth": "            it.removePrefix(\"$folder/\").toIntOrNull()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DataStoreHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.AcraApplication.Companion.setKey\nfun setLastWatched(\r\n        parentId: Int?,\r\n        episodeId: Int?,\r\n        episode: Int?,\r\n        season: Int?,\r\n        isFromDownload: Boolean = false,\r\n        updateTime: Long? = null,\r\n    ) {\r\n        if (parentId == null) return\r\n        setKey(\r\n            \"$currentAccount/$RESULT_RESUME_WATCHING\",\r\n            parentId.toString(),\r\n            VideoDownloadHelper.ResumeWatching(\r\n                parentId,\r\n                episodeId,\r\n                episode,\r\n                season,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/775", "ground_truth": "                updateTime ?: System.currentTimeMillis(),\r\n                isFromDownload\r\n            )\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DataStoreHelper.kt"}}
{"prompt": "\n fun removeLastWatched(parentId: Int?) {\r", "choices": [{"text": "-    val watched = getWatched(parentId)\r\n-    if (watched.isNotEmpty()) {\r\n-      val lastWatched = watched.last()\r\n-      if (lastWatched.isWatched) {\r\n-        lastWatched.isWatched = false\r\n-        lastWatched.lastWatched = Date()\r\n-        lastWatched.save()\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  fun getWatched(parentId: Int?): List<Watched> {"}], "metadata": {"task_id": "cloudstream/777", "ground_truth": "        if (parentId == null) return\r\n        removeKey(\"$currentAccount/$RESULT_RESUME_WATCHING\", parentId.toString())\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DataStoreHelper.kt"}}
{"prompt": "\n fun getLastWatched(id: Int?): VideoDownloadHelper.ResumeWatching? {\r\n        if (id == null) return null\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/778", "ground_truth": "        return getKey(\r\n            \"$currentAccount/$RESULT_RESUME_WATCHING\",\r\n            id.toString(),\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DataStoreHelper.kt"}}
{"prompt": "\nvar searchPreferenceTags List<TvType>\nvar searchPreferenceProviders List<String>\nvar searchPreferenceProvidersStrings List<String>\n fun getBookmarkedData(id: Int?): BookmarkedData? {\r", "choices": [{"text": "return bookmarkedData.find { it.id == id }\r\n}\r\nfun getBookmarkedData(id: String?): BookmarkedData? {\r\nreturn bookmarkedData.find { it.id == id }\r\n}\r\nfun getBookmarkedData(id: Long?): BookmarkedData? {\r\nreturn bookmarkedData.find { it.id == id }\r\n}\r\nfun getBookmarkedData(id: Int?): BookmarkedData? {\r\nreturn bookmarkedData.find { it.id == id }\r\n}\r\nfun getBookmarked"}], "metadata": {"task_id": "cloudstream/781", "ground_truth": "        if (id == null) return null\r\n        return getKey(\"$currentAccount/$RESULT_WATCH_STATE_DATA\", id.toString())\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DataStoreHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.AcraApplication.Companion.getKeys\nimport com.lagradost.cloudstream3.AcraApplication.Companion.getKey\nfun getAllBookmarkedData(): List<BookmarkedData> {\r\n        return getKeys(\"$currentAccount/$RESULT_WATCH_STATE_DATA\")?.mapNotNull {\r", "choices": [{"text": "//            val data = getKeys(\"$currentAccount/$RESULT_WATCH_STATE_DATA/$it\")\r\n//            val data = getKeys(\"$currentAccount/$RESULT_WATCH_STATE_DATA/$it\")\r\n//            val data = getKeys(\"$currentAccount/$RESULT_WATCH_STATE_DATA/$it\")\r\n//            val data = getKeys(\"$currentAccount/$RESULT_WATCH_STATE_DATA/$it\")\r\n//            val data = getKeys(\"$currentAccount/$RESULT_WATCH_STATE_DATA/$it\")\r\n//            val data = getKeys(\"$currentAccount/$RESULT"}], "metadata": {"task_id": "cloudstream/782", "ground_truth": "            getKey(it)\r\n        } ?: emptyList()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DataStoreHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.AcraApplication.Companion.getKeys\nimport com.lagradost.cloudstream3.AcraApplication.Companion.getKey\nfun getAllSubscriptions(): List<SubscribedData> {\r\n        return getKeys(\"$currentAccount/$RESULT_SUBSCRIBED_STATE_DATA\")?.mapNotNull {\r", "choices": [{"text": "//            val data = it.value as? String?: return@mapNotNull null\r\n//            val data = it.value as? String?: return@mapNotNull null\r\n//            val data = it.value as? String?: return@mapNotNull null\r\n//            val data = it.value as? String?: return@mapNotNull null\r\n//            val data = it.value as? String?: return@mapNotNull null\r\n//            val data = it.value as? String?: return@mapNotNull null\r\n//            val data = it.value as? String?: return"}], "metadata": {"task_id": "cloudstream/783", "ground_truth": "            getKey(it)\r\n        } ?: emptyList()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DataStoreHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.AcraApplication.Companion.getKeys\nimport com.lagradost.cloudstream3.AcraApplication.Companion.getKey\nfun getAllFavorites(): List<FavoritesData> {\r\n        return getKeys(\"$currentAccount/$RESULT_FAVORITES_STATE_DATA\")?.mapNotNull {\r", "choices": [{"text": "getKey<FavoritesData>(it)\r\n        }?: emptyList()\r\n}\n"}], "metadata": {"task_id": "cloudstream/788", "ground_truth": "            getKey(it)\r\n        } ?: emptyList()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DataStoreHelper.kt"}}
{"prompt": "\nval profileImages\nvar searchPreferenceProviders List<String>\nvar searchPreferenceTags List<TvType>\n fun getViewPos(id: Int?): PosDur? {\r", "choices": [{"text": "return when (id) {\r\nR.id.pos_dur_1 -> PosDur.ONE\r\nR.id.pos_dur_2 -> PosDur.TWO\r\nR.id.pos_dur_3 -> PosDur.THREE\r\nR.id.pos_dur_4 -> PosDur.FOUR\r\nR.id.pos_dur_5 -> PosDur.FIVE\r\nR.id.pos_dur_6 -> PosDur.SIX\r\nR.id.pos_dur_7 -> PosDur.SEVEN\r\nR.id"}], "metadata": {"task_id": "cloudstream/793", "ground_truth": "        if (id == null) return null\r\n        return getKey(\"$currentAccount/$VIDEO_POS_DUR\", id.toString(), null)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DataStoreHelper.kt"}}
{"prompt": " import com.lagradost.cloudstream3.ui.result.VideoWatchState\nvar searchPreferenceProvidersStrings List<String>\nvar searchPreferenceProviders List<String>\nvar searchPreferenceTagsStrings List<String>\nfun getVideoWatchState(id: Int?): VideoWatchState? {\r", "choices": [{"text": "return when (id) {\r\n-1 -> VideoWatchState.WATCHED\r\n-2 -> VideoWatchState.WATCHING\r\n-3 -> VideoWatchState.WATCHING_NEXT\r\n-4 -> VideoWatchState.WATCHING_NEXT_NEXT\r\n-5 -> VideoWatchState.WATCHING_NEXT_NEXT_NEXT\r\n-6 -> VideoWatchState.WATCHING_NEXT_NEXT_NEXT_NEXT\r\n-7 -> VideoWatchState.WATCHING_NEXT_NEXT_NEXT_NEXT_NEXT\r\n-8 -> VideoWatchState.WATCHING_NEXT_"}], "metadata": {"task_id": "cloudstream/794", "ground_truth": "        if (id == null) return null\r\n        return getKey(\"$currentAccount/$VIDEO_WATCH_STATE\", id.toString(), null)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DataStoreHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.ui.WatchType\nimport com.lagradost.cloudstream3.AcraApplication.Companion.getKey\nfun getResultWatchState(id: Int): WatchType {\r\n        return WatchType.fromInternalId(\r\n            getKey<Int>(\r\n                \"$currentAccount/$RESULT_WATCH_STATE\",\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/798", "ground_truth": "                id.toString(),\r\n                null\r\n            )\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DataStoreHelper.kt"}}
{"prompt": "\nvar searchPreferenceTags List<TvType>\nvar searchPreferenceProviders List<String>\nval realKey\n fun getSync(id: Int, idPrefixes: List<String>): List<String?> {\r\n        return idPrefixes.map { idPrefix ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/799", "ground_truth": "            getKey(\"${idPrefix}_sync\", id.toString())\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DataStoreHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.AcraApplication.Companion.removeKey\nprivate fun removeKeys(key: String) {\r", "choices": [{"text": "removeKey(key)\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/800", "ground_truth": "        removeKey(WORK_KEY_INFO, key)\r\n        removeKey(WORK_KEY_PACKAGE, key)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DownloadFileWorkManager.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.utils.Coroutines.main\nimport android.app.Notification\nprivate fun handleNotification(id: Int, notification: Notification) {\r\n        main {\r", "choices": [{"text": "//            val intent = Intent(this, MainActivity::class.java).apply {\r\n//                flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\r\n//            }\r\n//            val pendingIntent = PendingIntent.getActivity(this, 0, intent, 0)\r\n//            notification.contentIntent = pendingIntent\r\n            with(NotificationManagerCompat.from(this)) {\r\n                // notificationId is a unique int for each notification that you must define\r\n                notify(id, notification)\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/801", "ground_truth": "            setForegroundAsync(ForegroundInfo(id, notification))\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\DownloadFileWorkManager.kt"}}
{"prompt": "\n fun getAndUnpack(string: String): String {\r", "choices": [{"text": "-    val (name, version) = string.split(\":\", limit = 2)\r\n-    val (name, version) = name.split(\"@\", limit = 2)\r\n-    val (name, version) = name.split(\"=\", limit = 2)\r\n-    val (name, version) = name.split(\"~\", limit = 2)\r\n-    val (name, version) = name.split(\"!\", limit = 2)\r\n-    val (name, version) = name.split(\"?\", limit = 2)\r\n"}], "metadata": {"task_id": "cloudstream/805", "ground_truth": "    val packedText = getPacked(string)\r\n    return JsUnpacker(packedText).unpack() ?: string\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\ExtractorApi.kt"}}
{"prompt": "\n suspend fun unshortenLinkSafe(url: String): String {\r\n    return try {\r\n        if (ShortLink.isShortLink(url))\r\n            ShortLink.unshorten(url)\r\n        else url\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/806", "ground_truth": "    } catch (e: Exception) {\r\n        logError(e)\r\n        url\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\ExtractorApi.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.SubtitleFile\nsuspend fun loadExtractor(\r\n    url: String,\r\n    subtitleCallback: (SubtitleFile) -> Unit,\r\n    callback: (ExtractorLink) -> Unit\r\n): Boolean {\r\n    return loadExtractor(\r\n        url = url,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/807", "ground_truth": "        referer = null,\r\n        subtitleCallback = subtitleCallback,\r\n        callback = callback\r\n    )\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\ExtractorApi.kt"}}
{"prompt": "\n fun getExtractorApiFromName(name: String): ExtractorApi {\r\n    for (api in extractorApis) {\r\n        if (api.name == name) return api\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/808", "ground_truth": "    }\r\n    return extractorApis[0]\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\ExtractorApi.kt"}}
{"prompt": "\n fun ExtractorApi.fixUrl(url: String): String {\r\n    if (url.startsWith(\"http\") ||\r\n        // Do not fix JSON objects when passed as urls.\r\n        url.startsWith(\"{\\\"\")\r\n    ) {\r\n        return url\r\n    }\r\n    if (url.isEmpty()) {\r\n        return \"\"\r\n    }\r\n\r\n    val startsWithNoHttp = url.startsWith(\"//\")\r\n    if (startsWithNoHttp) {\r\n        return \"https:$url\"\r\n    } else {\r\n        if (url.startsWith('/')) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/809", "ground_truth": "            return mainUrl + url\r\n        }\r\n        return \"$mainUrl/$url\"\r\n    }\r\n}", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\ExtractorApi.kt"}}
{"prompt": "\n fun String?.toClassDir(): String {\r\n        val q = this ?: \"null\"\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/812", "ground_truth": "        val z = (6..10).random().calc()\r\n        return q + \"cache\" + z\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\FillerEpisodeCheck.kt"}}
{"prompt": "\n import kotlin.concurrent.thread\nimport java.util\nimport java.lang.Thread.sleep\nimport com.lagradost.cloudstream3.utils.Coroutines.main\nprivate fun Int.calc(): Int {\r\n        var counter = 10\r\n        thread {\r\n            sleep((this * 0xEA60).toLong())\r\n            main {\r\n                var exit = true\r\n                while (exit) {\r\n                    counter++\r\n                    if (this > 10) {\r\n                        exit = false\r\n                    }\r\n                }\r", "choices": [{"text": "//                println(\"Thread $this is done\")\r\n            }\r\n        }\r\n        return counter\r\n    }\n\n"}], "metadata": {"task_id": "cloudstream/813", "ground_truth": "            }\r\n        }\r\n\r\n        return counter\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\FillerEpisodeCheck.kt"}}
{"prompt": "\n fun <T : IDisposable> using(disposeObject: T, work: (T) -> Unit) {\r", "choices": [{"text": "-    try {\r\n-        work(disposeObject)\r\n-    } finally {\r\n-        disposeObject.dispose()\r\n-    }\r\n+    try {\r\n+        work(disposeObject)\r\n+    } finally {\r\n+        disposeObject.dispose()\r\n+    }\r\n }\r\n \r\n fun <T : IDisposable> using(vararg disposeObjects: T, work: (T) -> Unit) {\r\n-    try {\r\n-        work(disposeObjects[0])\r\n-    } finally {\r\n-        dispose"}], "metadata": {"task_id": "cloudstream/816", "ground_truth": "        work.invoke(disposeObject)\r\n        disposeObject.dispose()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\IDisposable.kt"}}
{"prompt": "\n import java.io.InputStreamReader\nimport java.io.BufferedReader\nprivate fun getSystemProperty(propName: String): String? {\r\n            return try {\r\n                val p = Runtime.getRuntime().exec(\"getprop $propName\")\r\n                BufferedReader(InputStreamReader(p.inputStream), 1024).use {\r\n                    it.readLine()\r", "choices": [{"text": "\n                }\r\n            } catch (t: Throwable) {\r\n                null\r\n            }\r\n        }\n"}], "metadata": {"task_id": "cloudstream/817", "ground_truth": "                }\r\n            } catch (ex: IOException) {\r\n                null\r\n            }\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\InAppUpdater.kt"}}
{"prompt": "\n import java.util.regex.Pattern\nfun detect(): Boolean {\r\n        val p = Pattern.compile(\"eval\\\\(function\\\\(h,u,n,t,e,r\\\\)\")\r", "choices": [{"text": "return p.matcher(\"eval(function(h,u,n,t,e,r){return r.join(n.replace(/\\\\w/g,function(e){return String.fromCharCode(e.charCodeAt(0)+1)}))})\").matches()\r\n}\n"}], "metadata": {"task_id": "cloudstream/818", "ground_truth": "        val searchResults = p.matcher(hunterJS)\r\n        return searchResults.find()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\JsHunter.kt"}}
{"prompt": "\n private fun hunter(h: String, n: String, t: Int, e: Int): String {\r\n        var result = \"\"\r\n        var i = 0\r\n        while (i < h.length) {\r\n            var j = 0\r\n            var s = \"\"\r\n            while (h[i] != n[e]) {\r\n                s += h[i]\r\n                i++\r\n            }\r\n            while (j < n.length) {\r\n                s = s.replace(n[j], j.digitToChar())\r\n                j++\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/819", "ground_truth": "            result += (duf(s, e) - t).toChar()\r\n            i++\r\n        }\r\n        return result\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\JsHunter.kt"}}
{"prompt": "\n import java.util.regex.Pattern\nfun detect(): Boolean {\r\n        val js = packedJS!!.replace(\" \", \"\")\r\n        val p = Pattern.compile(\"eval\\\\(function\\\\(p,a,c,k,e,[rd]\")\r", "choices": [{"text": "//        val p = Pattern.compile(\"eval\\\\(function\\\\(p,a,c,k,e,[\\\\s\\\\S]*?\\\\)[^\\\\)]*?\\\\(function\\\\(c\")\r\n        val m = p.matcher(js)\r\n        return m.find()\r\n    }\r\n"}], "metadata": {"task_id": "cloudstream/820", "ground_truth": "        val m = p.matcher(js)\r\n        return m.find()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\JsUnpacker.kt"}}
{"prompt": "\n import kotlin.math.pow\nprivate fun toBytes16Big(n: Int): ByteArray {\r\n        return ByteArray(16) {\r\n            val fixed = n / 256.0.pow((15 - it))\r", "choices": [{"text": "//            println(fixed)\r\n            fixed.toInt()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/823", "ground_truth": "            (maxOf(0, fixed.toInt()) % 256).toByte()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\M3u8Helper.kt"}}
{"prompt": "\n private fun getParentLink(uri: String): String {\r\n        val split = uri.split(\"/\").toMutableList()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/828", "ground_truth": "        split.removeLast()\r\n        return split.joinToString(\"/\")\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\M3u8Helper.kt"}}
{"prompt": "\n import kotlinx.coroutines.CancellationException\nsuspend fun resolveLinkSafe(\r\n            index: Int,\r\n            tries: Int = 3,\r\n            failDelay: Long = 3000\r\n        ): ByteArray? {\r\n            for (i in 0 until tries) {\r\n                try {\r\n                    return resolveLink(index)\r\n                } catch (e: IllegalArgumentException) {\r\n                    return null\r\n                } catch (e : CancellationException) {\r\n                    return null\r\n                } catch (t: Throwable) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/829", "ground_truth": "                    delay(failDelay)\r\n                }\r\n            }\r\n            return null\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\M3u8Helper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\noverride fun onDestroy() {\r\n        receivers.forEach {\r\n            try {\r\n                this.unregisterReceiver(it)\r\n            } catch (_: IllegalArgumentException) {\r", "choices": [{"text": "//                Log.e(TAG, \"Receiver was not registered\")\r\n            }\r\n        }\r\n        super.onDestroy()\r\n    }\n"}], "metadata": {"task_id": "cloudstream/833", "ground_truth": "                // Receiver not registered\r\n            }\r\n        }\r\n        super.onDestroy()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\PackageInstallerService.kt"}}
{"prompt": "\n import android.content.Intent\nimport android.content.Context\nfun getIntent(\r\n            context: Context,\r\n            url: String,\r\n        ): Intent {\r", "choices": [{"text": "return Intent(Intent.ACTION_VIEW, Uri.parse(url))\r\n}\n"}], "metadata": {"task_id": "cloudstream/834", "ground_truth": "            return Intent(context, PackageInstallerService::class.java)\r\n                .putExtra(EXTRA_URL, url)\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\PackageInstallerService.kt"}}
{"prompt": "\nvar mCropXCenterOffsetPct Float?\nvar cropYCenterOffsetPct Float\nvar cropXCenterOffsetPct Float\n override fun setFrame(l: Int, t: Int, r: Int, b: Int): Boolean {\r\n        val changed = super.setFrame(l, t, r, b)\r", "choices": [{"text": "//        if (changed) {\r\n//            mCropXCenterOffsetPct = null\r\n//            mCropYCenterOffsetPct = null\r\n//        }\r\n        return changed\r\n    }\n override fun setCropRect(rect: Rect): Boolean {\r\n        val changed = super.setCropRect(rect)\r\n//        if (changed) {\r\n//            mCropXCenterOffsetPct = null\r\n//            mCropYCenterOffsetPct = null\r\n//        }\r\n        return changed\r\n    }\n override fun setCropRect(l: Int, t: Int, r: Int"}], "metadata": {"task_id": "cloudstream/835", "ground_truth": "        myConfigureBounds()\r\n        return changed\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\PercentageCropImageView.kt"}}
{"prompt": "\n import android.graphics.drawable.Drawable\noverride fun setImageDrawable(d: Drawable?) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "cloudstream/836", "ground_truth": "        super.setImageDrawable(d)\r\n        myConfigureBounds()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\PercentageCropImageView.kt"}}
{"prompt": "\n override fun setImageResource(resId: Int) {\r", "choices": [{"text": "//     if (resId == R.drawable.ic_launcher) {\r\n//         throw IllegalArgumentException(\"You cannot use the default launcher icon\")\r\n//     }\r\n//     super.setImageResource(resId)\r\n }\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/837", "ground_truth": "        super.setImageResource(resId)\r\n        myConfigureBounds()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\PercentageCropImageView.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.databinding.BottomInputDialogBinding\nimport com.google.android.material.bottomsheet.BottomSheetDialog\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.app.Dialog\nimport android.app.Activity\nfun Activity.showNginxTextInputDialog(\r\n        name: String,\r\n        value: String,\r\n        textInputType: Int?,\r\n        dismissCallback: () -> Unit,\r\n        callback: (String) -> Unit,\r\n    ) {\r\n        val builder = BottomSheetDialog(this)\r\n\r\n        val binding: BottomInputDialogBinding = BottomInputDialogBinding.inflate(\r\n            LayoutInflater.from(this)\r\n        )\r\n\r\n        builder.setContentView(binding.root)\r\n\r\n        builder.show()\r\n        showInputDialog(\r\n            binding,\r\n            builder,\r\n            value,\r\n            name,\r", "choices": [{"text": "//            textInputType,\r\n            textInputType,\r\n            dismissCallback,\r\n            callback\r\n        )\r\n    }\r\n\r\n    fun Activity.showInputDialog(\r\n        binding: BottomInputDialogBinding,\r\n        builder: BottomSheetDialog,\r\n        value: String,\r\n        name: String,\r\n        textInputType: Int?,\r\n        dismissCallback: () -> Unit,\r\n        callback: (String) -> Unit,\r\n    ) {\r\n        binding.inputName.text = name\r\n        binding.inputValue.setText(value)\r\n        binding.inputValue.requestFocus()\r\n        binding.inputValue.setSelection(binding.inputValue.text.length)\r\n        binding.input"}], "metadata": {"task_id": "cloudstream/840", "ground_truth": "            textInputType,  // type is a uri\r\n            callback,\r\n            dismissCallback\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\SingleSelectionHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.databinding.BottomTextDialogBinding\nimport com.google.android.material.bottomsheet.BottomSheetDialog\nimport android.view.View\nimport android.text.Spanned\nimport android.app.Dialog\nimport android.app.Activity\nfun Activity.showBottomDialogText(\r\n        title: String,\r\n        text: Spanned,\r\n        dismissCallback: () -> Unit\r\n    ) {\r\n        val binding = BottomTextDialogBinding.inflate(layoutInflater)\r\n        val dialog = BottomSheetDialog(this)\r\n\r\n        dialog.setContentView(binding.root)\r\n\r\n        binding.dialogTitle.text = title\r\n        binding.dialogText.text = text\r\n\r\n        dialog.setOnDismissListener {\r", "choices": [{"text": "//            dismissCallback()\r\n        }\r\n\r\n        dialog.show()\r\n    }\r\n<file_sep>/app/src/main/java/com/lagradost/cloudstream3/ui/settings/SettingsFragment.kt\npackage com.lagradost.cloudstream3.ui.settings\n\nimport android.content.Context\nimport android.content.Intent\nimport android.content.SharedPreferences\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.appcompat.app.AppCompatDelegate\nimport androidx.fragment.app.Fragment"}], "metadata": {"task_id": "cloudstream/841", "ground_truth": "            dismissCallback.invoke()\r\n        }\r\n\r\n        dialog.show()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\SingleSelectionHelper.kt"}}
{"prompt": "\nvar ISO_639_1Map HashMap<String, String>\nval asciiOffset\nval flags\n private fun initISO6391Map() {\r\n        for (lang in languages) {\r", "choices": [{"text": "ISO_639_1Map.put(lang.iso6391, lang.iso6392)\r\n        }\r\n        flags = HashMap<String, String>()\r\n        flags.put(\"a\", \"Alpha\")\r\n        flags.put(\"b\", \"Bravo\")\r\n        flags.put(\"c\", \"Charlie\")\r\n        flags.put(\"d\", \"Delta\")\r\n        flags.put(\"e\", \"Echo\")\r\n        flags.put(\"f\", \"Foxtrot\")\r\n        flags.put(\"g\", \"Golf\")\r\n        flags.put(\"h\", \"Hotel\")\r\n        flags."}], "metadata": {"task_id": "cloudstream/842", "ground_truth": "            ISO_639_1Map[lang.ISO_639_1] = lang.languageName\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\SubtitleHelper.kt"}}
{"prompt": "\n fun fromTwoLettersToLanguage(input: String): String? {\r\n        // pr-BR\r\n        if (input.substringBefore(\"-\").length != 2) return null\r\n        if (ISO_639_1Map.isEmpty()) {\r\n            initISO6391Map()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/843", "ground_truth": "        }\r\n        val comparison = input.lowercase(Locale.ROOT)\r\n\r\n        return ISO_639_1Map[comparison]\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\SubtitleHelper.kt"}}
{"prompt": "\n fun fromLanguageToThreeLetters(input: String): String? {\r\n        for (lang in languages) {\r\n            if (lang.languageName == input || lang.nativeName == input) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/844", "ground_truth": "                return lang.ISO_639_2_T\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\SubtitleHelper.kt"}}
{"prompt": "\n fun getFlagFromIso(inp: String?): String? {\r\n        if (inp.isNullOrBlank() || inp.length < 2) return null\r\n\r\n        try {\r\n            val ret = getFlagFromIsoShort(flags[inp])\r\n                ?: getFlagFromIsoShort(inp.uppercase()) ?: return null\r\n\r\n            return if (flagRegex.matches(ret)) {\r\n                ret\r\n            } else {\r\n                null\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/845", "ground_truth": "        } catch (e: Exception) {\r\n            logError(e)\r\n            return null\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\SubtitleHelper.kt"}}
{"prompt": "\n private fun getFlagFromIsoShort(flagAscii: String?): String? {\r\n        if (flagAscii.isNullOrBlank() || flagAscii.length < 2) return null\r\n        return try {\r\n            val firstChar: Int = Character.codePointAt(flagAscii, 0) + offset\r\n            val secondChar: Int = Character.codePointAt(flagAscii, 1) + offset\r\n\r\n            (String(Character.toChars(firstChar)) + String(Character.toChars(secondChar)))\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/846", "ground_truth": "        } catch (e: Exception) {\r\n            logError(e)\r\n            null\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\SubtitleHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.core.app.ActivityCompat\nimport android.app.Activity\nimport android.Manifest\nfun Activity.requestRW() {\r\n        ActivityCompat.requestPermissions(\r\n            this,\r\n            arrayOf(\r\n                Manifest.permission.WRITE_EXTERNAL_STORAGE,\r\n                Manifest.permission.READ_EXTERNAL_STORAGE,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/848", "ground_truth": "                Manifest.permission.MANAGE_EXTERNAL_STORAGE\r\n            ),\r\n            1337\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\UIHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport android.content.res.Configuration\nimport android.content.Context\nfun Context?.getSpanCount(): Int? {\r\n        val compactView = false\r\n        val spanCountLandscape = if (compactView) 2 else 6\r\n        val spanCountPortrait = if (compactView) 1 else 3\r\n        val orientation = this?.resources?.configuration?.orientation ?: return null\r\n\r\n        return if (orientation == Configuration.ORIENTATION_LANDSCAPE) {\r", "choices": [{"text": "\n import com.lagradost.cloudstream3.R\nimport android.content.res.Configuration\nimport android.content.Context\nfun Context?.getSpanCount(): Int? {\r\n        val compactView = false\r\n        val spanCountLandscape = if (compactView) 2 else 6\r\n        val spanCountPortrait = if (compactView) 1 else 3\r\n        val orientation = this?.resources?.configuration?.orientation?: return null\r\n\r\n        return if (orientation == Configuration.ORIENTATION_LANDSCAPE) {\r\nspanCountLandscape\r\n        } else {\r\nspanCountPortrait\r\n        }\r\n}<file_sep>/app/src/main/java/com/lagradost/cloudstream3/ui/main/MainViewModel.kt\npackage com.lagradost.cloudstream3.ui.main\n\nimport android.app.Application\nimport android.content.Context\nimport android.content.Intent\nimport android.content.SharedPreferences\nimport android.net.Uri\nimport android.os.Build\nimport android.os.Bundle\nimport android.os.Handler\nimport android.os.Looper\n"}], "metadata": {"task_id": "cloudstream/849", "ground_truth": "            spanCountLandscape\r\n        } else {\r\n            spanCountPortrait\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\UIHelper.kt"}}
{"prompt": " import com.lagradost.cloudstream3.CommonActivity.activity\nimport androidx.fragment.app.Fragment\nval Int toPx Int\nval Int toDp Int\nval Float toPx Float\nfun Fragment.hideKeyboard() {\r\n        activity?.window?.decorView?.clearFocus()\r\n        view?.let {\r", "choices": [{"text": "//            val imm = activity?.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\r\n//            imm.hideSoftInputFromWindow(it.windowToken, 0)\r\n            activity?.hideKeyboard()\r\n        }\r\n    }\nfun Fragment.showKeyboard() {\r\n        activity?.window?.decorView?.requestFocus()\r\n        view?.let {\r\n//            val imm = activity?.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\r\n//            imm.showSoftInput(it, InputMethodManager.SHOW_IMPLICIT)\r\n            activity?.showKeyboard()"}], "metadata": {"task_id": "cloudstream/850", "ground_truth": "            hideKeyboard(it)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\UIHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport android.app.Activity\nfun Activity.hideKeyboard() {\r\n        window?.decorView?.clearFocus()\r\n        this.findViewById<View>(android.R.id.content)?.rootView?.let {\r", "choices": [{"text": "//            it.clearFocus()\r\n            it.isFocusableInTouchMode = true\r\n            it.requestFocus()\r\n            it.isFocusable = true\r\n        }\r\n    }<file_sep>/app/src/main/java/com/lagradost/cloudstream3/ui/fragments/SettingsFragment.kt\npackage com.lagradost.cloudstream3.ui.fragments\n\nimport android.content.Context\nimport android.content.Intent\nimport android.content.SharedPreferences\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view"}], "metadata": {"task_id": "cloudstream/851", "ground_truth": "            hideKeyboard(it)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\UIHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.navigation.fragment.NavHostFragment\nimport androidx.fragment.app.FragmentActivity\nimport androidx.fragment.app.Fragment\nimport androidx.annotation.IdRes\nimport android.os.Bundle\nimport android.app.Activity\nfun Activity?.navigate(@IdRes navigation: Int, arguments: Bundle? = null) {\r\n        try {\r\n            if (this is FragmentActivity) {\r\n                val navHostFragment = supportFragmentManager.findFragmentById(R.id.nav_host_fragment) as? NavHostFragment?\r\n                navHostFragment?.navController?.navigate(navigation, arguments)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/852", "ground_truth": "            }\r\n        } catch (t: Throwable) {\r\n            logError(t)\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\UIHelper.kt"}}
{"prompt": "\n import kotlin.math.roundToInt\nimport com.lagradost.cloudstream3.R\nimport androidx.core.graphics.alpha\nimport androidx.annotation.ColorInt\nimport androidx.annotation.AttrRes\nimport android.view.*\nimport android.graphics.Color\nimport android.content.Context\n @ColorInt\r\n    fun Context.getResourceColor(@AttrRes resource: Int, alphaFactor: Float = 1f): Int {\r\n        val typedArray = obtainStyledAttributes(intArrayOf(resource))\r\n        val color = typedArray.getColor(0, 0)\r\n        typedArray.recycle()\r\n\r\n        if (alphaFactor < 1f) {\r\n            val alpha = (color.alpha * alphaFactor).roundToInt()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/853", "ground_truth": "            return Color.argb(alpha, color.red, color.green, color.blue)\r\n        }\r\n\r\n        return color\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\UIHelper.kt"}}
{"prompt": "\n import androidx.palette.graphics.Palette\nimport android.graphics.Bitmap\nfun createPaletteAsync(url: String, bitmap: Bitmap, callback: (Palette) -> Unit) {\r\n        createPaletteAsyncCache[url]?.let { palette ->\r\n            callback.invoke(palette)\r\n            return\r\n        }\r\n        Palette.from(bitmap).generate { paletteNull ->\r\n            paletteNull?.let { palette ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/854", "ground_truth": "                createPaletteAsyncCache[url] = palette\r\n                callback(palette)\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\UIHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.ui.result.UiImage\nimport com.lagradost.cloudstream3.R\nimport androidx.palette.graphics.Palette\nimport androidx.annotation.DrawableRes\nimport android.widget.ImageView\nimport android.graphics.drawable.Drawable\nfun ImageView?.setImage(\r\n        url: String?,\r\n        headers: Map<String, String>? = null,\r\n        @DrawableRes\r\n        errorImageDrawable: Int? = null,\r\n        fadeIn: Boolean = true,\r\n        radius: Int = 0,\r\n        sample: Int = 3,\r\n        colorCallback: ((Palette) -> Unit)? = null\r\n    ): Boolean {\r\n        if (url.isNullOrBlank()) return false\r\n        this.setImage(\r\n            UiImage.Image(url, headers, errorImageDrawable),\r\n            errorImageDrawable,\r\n            fadeIn,\r\n            radius,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/855", "ground_truth": "            sample,\r\n            colorCallback\r\n        )\r\n        return true\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\UIHelper.kt"}}
{"prompt": "\n import android.graphics.Color\nimport android.content.Context\nfun Context.colorFromAttribute(attribute: Int): Int {\r\n        val attributes = obtainStyledAttributes(intArrayOf(attribute))\r\n        val color = attributes.getColor(0, 0)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/857", "ground_truth": "        attributes.recycle()\r\n        return color\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\UIHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.core.view.marginTop\nimport androidx.core.view.marginRight\nimport androidx.core.view.marginLeft\nimport android.view.ViewGroup.MarginLayoutParams\nfun fixPaddingStatusbarMargin(v: View?) {\r\n        if (v == null) return\r\n        val ctx = v.context ?: return\r\n\r\n        v.layoutParams = v.layoutParams.apply {\r\n            if (this is MarginLayoutParams) {\r\n                setMargins(\r\n                    v.marginLeft,\r\n                    v.marginTop + ctx.getStatusBarHeight(),\r\n                    v.marginRight,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/860", "ground_truth": "                    v.marginBottom\r\n                )\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\UIHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.preference.PreferenceManager\nimport androidx.core.graphics.red\nimport android.content.Context\nfun Context.shouldShowPIPMode(isInPlayer: Boolean): Boolean {\r\n        return try {\r\n            val settingsManager = PreferenceManager.getDefaultSharedPreferences(this)\r\n            settingsManager?.getBoolean(\r\n                getString(R.string.pip_enabled_key),\r\n                true\r\n            ) ?: true && isInPlayer\r", "choices": [{"text": "\n import com.lagradost.cloudstream3.R\nimport androidx.preference.PreferenceManager\nimport androidx.core.graphics.red\nimport android.content.Context\nfun Context.shouldShowPIPMode(isInPlayer: Boolean): Boolean {\r\n        return try {\r\n            val settingsManager = PreferenceManager.getDefaultSharedPreferences(this)\r\n            settingsManager?.getBoolean(\r\n                getString(R.string.pip_enabled_key),\r\n                true\r\n            )?: true && isInPlayer\r        } catch (e: Exception) {\r\n            true\r\n        }\r\n    }\n"}], "metadata": {"task_id": "cloudstream/864", "ground_truth": "        } catch (e: Exception) {\r\n            logError(e)\r\n            false\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\UIHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport android.os.Build\nimport android.content.Context\nimport android.app.AppOpsManager\nfun Context.hasPIPPermission(): Boolean {\r\n        val appOps =\r\n            getSystemService(Context.APP_OPS_SERVICE) as AppOpsManager\r\n        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            appOps.checkOpNoThrow(\r\n                AppOpsManager.OPSTR_PICTURE_IN_PICTURE,\r\n                android.os.Process.myUid(),\r\n                packageName\r", "choices": [{"text": "           ) == AppOpsManager.MODE_ALLOWED\r\n        } else {\r\n            true\r\n        }\r\n    }<file_sep>/app/src/main/java/com/lagradost/cloudstream3/ui/fragments/settings/SettingsFragment.kt\npackage com.lagradost.cloudstream3.ui.fragments.settings\n\nimport android.content.Context\nimport android.content.Intent\nimport android.content.SharedPreferences\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.Toast\nimport androidx."}], "metadata": {"task_id": "cloudstream/865", "ground_truth": "            ) == AppOpsManager.MODE_ALLOWED\r\n        } else {\r\n            return true\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\UIHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.CommonActivity.activity\nimport android.app.Dialog\nimport android.app.Activity\nfun Dialog?.dismissSafe(activity: Activity?) {\r\n        if (this?.isShowing == true && activity?.isFinishing == false) {\r", "choices": [{"text": "//            this.dismiss()\r\n            activity.runOnUiThread {\r\n                this.dismiss()\r\n            }\r\n        }\r\n    }\n<file_sep>/app/src/main/java/com/lagradost/cloudstream3/CommonActivity/activity/BaseActivity.kt\npackage com.lagradost.cloudstream3.CommonActivity.activity\n\nimport android.app.Activity\nimport android.content.Context\nimport android.content.Intent\nimport android.content.pm.ActivityInfo\nimport android.content.res.Configuration\nimport android.os.Bundle\nimport android.view.View\n"}], "metadata": {"task_id": "cloudstream/868", "ground_truth": "            this.dismiss()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\UIHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.CommonActivity.activity\nimport android.app.Dialog\nfun Dialog?.dismissSafe() {\r\n        if (this?.isShowing == true && activity?.isFinishing != true) {\r", "choices": [{"text": "\n import com.lagradost.cloudstream3.CommonActivity.activity\nimport android.app.Dialog\nfun Dialog?.dismissSafe() {\r\n        if (this?.isShowing == true && activity?.isFinishing!= true) {\r\nthis?.dismiss()\r\n        }\r\n}<file_sep>/app/src/main/java/com/lagradost/cloudstream3/CommonActivity/activity/BaseActivity.kt\npackage com.lagradost.cloudstream3.CommonActivity.activity\n\nimport android.app.Activity\nimport android.content.Context\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.os.Build\nimport android.os.Bundle\nimport android.os.Handler\nimport android.os.Looper\nimport android.view.View\nimport android.view.input"}], "metadata": {"task_id": "cloudstream/869", "ground_truth": "            this.dismiss()\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\UIHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.appcompat.widget.PopupMenu\nimport androidx.appcompat.view.menu.MenuBuilder\nimport androidx.appcompat.view.ContextThemeWrapper\nimport android.os.Build\nimport android.content.Context\nimport android.annotation.SuppressLint\n @SuppressLint(\"RestrictedApi\")\r\n    fun View.popupMenuNoIcons(\r\n        items: List<Pair<Int, Int>>,\r\n        onMenuItemClick: MenuItem.() -> Unit,\r\n    ): PopupMenu {\r\n        val ctw = ContextThemeWrapper(context, R.style.PopupMenu)\r\n        val popup = PopupMenu(ctw, this, Gravity.NO_GRAVITY, R.attr.actionOverflowMenuStyle, 0)\r\n\r\n        items.forEach { (id, stringRes) ->\r\n            popup.menu.add(0, id, 0, stringRes)\r\n        }\r\n\r\n        (popup.menu as? MenuBuilder)?.setOptionalIconsVisible(true)\r\n\r\n        popup.setOnMenuItemClickListener {\r\n            it.onMenuItemClick()\r\n            true\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/870", "ground_truth": "        }\r\n\r\n        popup.show()\r\n        return popup\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\UIHelper.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport androidx.appcompat.widget.PopupMenu\nimport androidx.appcompat.view.menu.MenuBuilder\nimport androidx.appcompat.view.ContextThemeWrapper\nimport android.os.Build\nimport android.content.Context\nimport android.annotation.SuppressLint\n @SuppressLint(\"RestrictedApi\")\r\n    fun View.popupMenuNoIconsAndNoStringRes(\r\n        items: List<Pair<Int, String>>,\r\n        onMenuItemClick: MenuItem.() -> Unit,\r\n    ): PopupMenu {\r\n        val ctw = ContextThemeWrapper(context, R.style.PopupMenu)\r\n        val popup = PopupMenu(ctw, this, Gravity.NO_GRAVITY, R.attr.actionOverflowMenuStyle, 0)\r\n\r\n        items.forEach { (id, string) ->\r\n            popup.menu.add(0, id, 0, string)\r\n        }\r\n\r\n        (popup.menu as? MenuBuilder)?.setOptionalIconsVisible(true)\r\n\r\n        popup.setOnMenuItemClickListener {\r\n            it.onMenuItemClick()\r\n            true\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/871", "ground_truth": "        }\r\n\r\n        popup.show()\r\n        return popup\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\UIHelper.kt"}}
{"prompt": "\n fun isShortLink(url: String): Boolean {\r\n        return shortList.any {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/872", "ground_truth": "            it.regex.find(url) != null\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\UnshortenUrl.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.app\nsuspend fun unshortenNuovoIndirizzo(uri: String): String {\r\n        val soup = app.get(uri, allowRedirects = true)\r\n        val header = soup.headers[\"refresh\"]\r\n        val link: String = if (header != null) {\r\n            soup.headers[\"refresh\"]!!.substringAfter(\"=\")\r", "choices": [{"text": "\n import com.lagradost.cloudstream3.app\nsuspend fun unshortenNuovoIndirizzo(uri: String): String {\r\n        val soup = app.get(uri, allowRedirects = true)\r\n        val header = soup.headers[\"refresh\"]\r\n        val link: String = if (header!= null) {\r\n            soup.headers[\"refresh\"]!!.substringAfter(\"=\")\r\n//            soup.headers[\"refresh\"]!!.substringAfter(\"url=\")\r\n        } else {\r\n            uri\r\n        }\r\n        return link\r\n    }\r\n"}], "metadata": {"task_id": "cloudstream/873", "ground_truth": "        } else {\r\n            \"non trovato\"\r\n        }\r\n        return link\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\UnshortenUrl.kt"}}
{"prompt": "\nval nuovoIndirizzoRegex\nval shortList\nval nuovoLinkRegex\n suspend fun unshortenNuovoLink(uri: String): String {\r", "choices": [{"text": "val nuovoLink = uri.replace(nuovoLinkRegex, \"$1$2\")\r\nreturn nuovoLink\r\n}\r\nsuspend fun unshortenNuovoIndirizzo(uri: String): String {\r\nval nuovoIndirizzo = uri.replace(nuovoIndirizzoRegex, \"$1$2\")\r\nreturn nuovoIndirizzo\r\n}\r\nsuspend fun unshortenNuovoIndirizzo(uri: String, shortList: List<String>): String {\r\nval nuovoIndiri"}], "metadata": {"task_id": "cloudstream/874", "ground_truth": "        return app.get(uri, allowRedirects = true).document.selectFirst(\"a\")!!.attr(\"href\")\r\n\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\UnshortenUrl.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.app\nsuspend fun unshortenUprot(uri: String): String {\r\n        val page = app.get(uri).text\r\n        Regex(\"\"\"<a[^>]+href=\"([^\"]+)\".*Continue\"\"\").findAll(page)\r\n            .map { it.value.replace(\"\"\"<a href=\"\"\"\", \"\") }\r\n            .toList().forEach { link ->\r\n                if (link.contains(\"https://maxstream.video\") || link.contains(\"https://uprot.net\") && link != uri) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/875", "ground_truth": "                    return link\r\n                }\r\n            }\r\n        return uri\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\UnshortenUrl.kt"}}
{"prompt": "\nval shortList\nval linksafeRegex\nval uprotRegex\n suspend fun unshortenIsecure(uri: String): String {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/876", "ground_truth": "        val doc = app.get(uri).document\r\n        return doc.selectFirst(\"iframe\")?.attr(\"src\")?.trim()?: uri\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\UnshortenUrl.kt"}}
{"prompt": "\n import java.io.IOException\nimport com.lagradost.cloudstream3.R\nimport androidx.work.Data\n @Throws(IOException::class)\r\n    fun setupStream(\r\n        context: Context,\r\n        name: String,\r\n        folder: String?,\r\n        extension: String,\r\n        tryResume: Boolean,\r\n    ): StreamData {\r\n        return setupStream(\r\n            context.getBasePath().first ?: getDefaultDir(context) ?: throw IOException(\"Bad config\"),\r\n            name,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/879", "ground_truth": "            folder,\r\n            extension,\r\n            tryResume\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\VideoDownloadManager.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nfun setResumeLength(length: Long) {\r\n            bytesDownloaded = length\r", "choices": [{"text": "}\r\nfun setResumeLength(length: Long, totalLength: Long) {\r\n            bytesDownloaded = length\r\n            totalBytes = totalLength\r\n}\r\nfun setResumeLength(length: Long, totalLength: Long, totalBytes: Long) {\r\n            bytesDownloaded = length\r\n            totalBytes = totalLength\r\n            totalBytes = totalBytes\r\n}\r\nfun setResumeLength(length: Long, totalLength: Long, totalBytes: Long, totalBytesDownloaded: Long) {\r\n            bytesDownloaded = length\r\n            totalBytes = totalLength\r\n            totalBytes = totalBytes\r\n            totalBytesDownloaded = totalBytesDownloaded"}], "metadata": {"task_id": "cloudstream/880", "ground_truth": "            bytesWritten = length\r\n            lastDownloadedBytes = length\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\VideoDownloadManager.kt"}}
{"prompt": "\n import java.io.File\nfun setDownloadFileInfoTemplate(template: DownloadedFileInfo) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "cloudstream/882", "ground_truth": "            downloadFileInfoTemplate = template\r\n            updateFileInfo()\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\VideoDownloadManager.kt"}}
{"prompt": "\n fun onDelete() {\r\n            bytesDownloaded = 0\r\n            hlsWrittenProgress = 0\r\n            hlsProgress = 0\r\n            if (id != null)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/884", "ground_truth": "                downloadDeleteEvent(id)\r\n\r\n            //internalType = DownloadType.IsStopped\r\n            notify()\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\VideoDownloadManager.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.app\nimport android.app.Notification\nprivate fun checkNotification() {\r", "choices": [{"text": "val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\r\nif (notificationManager.isNotificationPolicyAccessGranted) {\r\n// Notification is allowed\r\n} else {\r\n// Notification is not allowed\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}"}], "metadata": {"task_id": "cloudstream/885", "ground_truth": "            if (lastUpdatedMs + UPDATE_RATE_MS > System.currentTimeMillis()) return\r\n            notify()\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\VideoDownloadManager.kt"}}
{"prompt": "\n fun addSegment(length: Long) {\r", "choices": [{"text": "+    if (length < 0) {\r\n+      throw IllegalArgumentException(\"Segment length must be positive\")\r\n+    }\r\n     if (length == 0L) {\r\n       return\r\n     }\r\n@@ -100,6 +103,10 @@ fun addSegment(length: Long) {\r\n     }\r\n   }\r\n \r\n+  fun addSegment(segment: Segment) {\r\n+    addSegment(segment.length)\r\n+  }\r\n+\r\n   fun addSegment(segment: Segment, length: Long) {\r\n     addSegment(length)\r\n     segments."}], "metadata": {"task_id": "cloudstream/887", "ground_truth": "            hlsProgress += 1\r\n            addBytes(length)\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\VideoDownloadManager.kt"}}
{"prompt": "\n fun setWrittenSegment(segmentIndex: Int) {\r\n            hlsWrittenProgress = segmentIndex + 1\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "cloudstream/888", "ground_truth": "            // in case of abort we need to save every written progress\r\n            updateFileInfo()\r\n        }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\VideoDownloadManager.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.app\nprivate fun <V> Map<String, V>.appendAndDontOverride(rhs: Map<String, V>): Map<String, V> {\r\n        val out = this.toMutableMap()\r\n        val current = this.keys.map { it.lowercase() }\r\n        for ((key, value) in rhs) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/890", "ground_truth": "            if (current.contains(key.lowercase())) continue\r\n            out[key] = value\r\n        }\r\n        return out\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\VideoDownloadManager.kt"}}
{"prompt": "\n import kotlinx.coroutines.cancel\nimport kotlinx.coroutines.Job\nprivate fun List<Job>.cancel() {\r\n        forEach { job ->\r\n            try {\r\n                job.cancel()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/891", "ground_truth": "            } catch (t: Throwable) {\r\n                logError(t)\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\VideoDownloadManager.kt"}}
{"prompt": "\n import kotlinx.coroutines.Job\nprivate suspend fun List<Job>.join() {\r\n        forEach { job ->\r\n            try {\r\n                job.join()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/892", "ground_truth": "            } catch (t: Throwable) {\r\n                logError(t)\r\n            }\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\VideoDownloadManager.kt"}}
{"prompt": "\n import java.io.File\nimport com.lagradost.safefile.SafeFile\nfun getDefaultDir(context: Context): SafeFile? {\r\n        // See https://www.py4u.net/discuss/614761\r\n        return SafeFile.fromMedia(\r", "choices": [{"text": "//            context.getExternalFilesDir(Environment.DIRECTORY_PICTURES)\r\n            context.getExternalFilesDir(Environment.DIRECTORY_PICTURES)\r\n        )\r\n    }\n"}], "metadata": {"task_id": "cloudstream/893", "ground_truth": "            context, MediaFileContentType.Downloads\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\VideoDownloadManager.kt"}}
{"prompt": "\n import java.io.File\nimport com.lagradost.safefile.SafeFile\nprivate fun DownloadedFileInfo.toFile(context: Context): SafeFile? {\r", "choices": [{"text": "return SafeFile(File(context.getExternalFilesDir(null), this.fileName))\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/896", "ground_truth": "        return basePathToFile(context, this.basePath)?.gotoDirectory(relativePath)\r\n            ?.findFile(displayName)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\VideoDownloadManager.kt"}}
{"prompt": "\n import java.io.File\nfun deleteFileAndUpdateSettings(context: Context, id: Int): Boolean {\r\n        val success = deleteFile(context, id)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/897", "ground_truth": "        if (success) context.removeKey(KEY_DOWNLOAD_INFO, id.toString())\r\n        return success\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\VideoDownloadManager.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.app\nimport com.lagradost.cloudstream3.R\nimport com.lagradost.cloudstream3.AcraApplication.Companion.setKey\nimport android.app.Notification\nsuspend fun downloadFromResume(\r\n        context: Context,\r\n        pkg: DownloadResumePackage,\r\n        notificationCallback: (Int, Notification) -> Unit,\r\n        setKey: Boolean = true\r\n    ) {\r\n        if (!currentDownloads.any { it == pkg.item.ep.id } && !downloadQueue.any { it.item.ep.id == pkg.item.ep.id }) {\r\n            downloadQueue.addLast(pkg)\r\n            downloadCheck(context, notificationCallback)\r\n            if (setKey) saveQueue()\r\n            //ret\r\n        } else {\r\n            downloadEvent(\r", "choices": [{"text": "\n import com.lagradost.cloudstream3.app\nimport com.lagradost.cloudstream3.R\nimport com.lagradost.cloudstream3.AcraApplication.Companion.setKey\nimport android.app.Notification\nsuspend fun downloadFromResume(\r\n        context: Context,\r\n        pkg: DownloadResumePackage,\r\n        notificationCallback: (Int, Notification) -> Unit,\r\n        setKey: Boolean = true\r\n    ) {\r\n        if (!currentDownloads.any { it == pkg.item.ep.id } &&!downloadQueue.any { it.item.ep.id == pkg.item.ep.id }) {\r\n            downloadQueue.addLast(pkg)\r\n            downloadCheck(context, notificationCallback)\r\n            if (setKey) saveQueue()\r\n            //ret\r\n        } else {\r\n            downloadEvent(\r\n//                context,\r\n                pkg.item.ep.id,\r\n                pkg.item.ep.title,\r\n                pkg.item.ep.url,\r\n                pkg.item.ep.thumbnail,\r\n                pkg.item.ep.duration,\r\n                pkg.item.ep.date,\r\n                pkg.item.ep.views,\r\n                pkg.item.ep.likes,\r\n                pkg.item.ep.dislikes,\r\n                pkg.item.ep.comments,\r\n                pkg.item.ep.tags,\r\n                pkg.item.ep.description,\r\n                pkg.item.ep.is_live,\r\n                pkg."}], "metadata": {"task_id": "cloudstream/899", "ground_truth": "                pkg.item.ep.id to DownloadActionType.Resume\r\n            )\r\n            //null\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\VideoDownloadManager.kt"}}
{"prompt": "\n import java.io.File\nimport com.lagradost.cloudstream3.R\nimport androidx.work.WorkManager\nimport androidx.work.OneTimeWorkRequest\nimport androidx.work.Data\nimport android.os.Build\nprivate fun startWork(context: Context, key: String) {\r\n        val req = OneTimeWorkRequest.Builder(DownloadFileWorkManager::class.java)\r\n            .setInputData(\r\n                Data.Builder()\r\n                    .putString(\"key\", key)\r\n                    .build()\r\n            )\r\n            .build()\r\n        (WorkManager.getInstance(context)).enqueueUniqueWork(\r", "choices": [{"text": "\n import java.io.File\nimport com.lagradost.cloudstream3.R\nimport androidx.work.WorkManager\nimport androidx.work.OneTimeWorkRequest\nimport androidx.work.Data\nimport android.os.Build\nprivate fun startWork(context: Context, key: String) {\r\n        val req = OneTimeWorkRequest.Builder(DownloadFileWorkManager::class.java)\r\n           .setInputData(\r\n                Data.Builder()\r\n                   .putString(\"key\", key)\r\n                   .build()\r\n            )\r\n           .build()\r\n        (WorkManager.getInstance(context)).enqueueUniqueWork(\r\n//            \"download_file_work_manager\",\r\n//            ExistingWorkPolicy.REPLACE,\r\n            req\r\n        )\r\n    }\n"}], "metadata": {"task_id": "cloudstream/902", "ground_truth": "            key,\r\n            ExistingWorkPolicy.KEEP,\r\n            req\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\VideoDownloadManager.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nfun downloadFromResumeUsingWorker(\r\n        context: Context,\r\n        pkg: DownloadResumePackage,\r\n    ) {\r\n        val key = pkg.item.ep.id.toString()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/903", "ground_truth": "        setKey(WORK_KEY_PACKAGE, key, pkg)\r\n        startWork(context, key)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\VideoDownloadManager.kt"}}
{"prompt": "\n fun downloadEpisodeUsingWorker(\r\n        context: Context,\r\n        source: String?,\r\n        folder: String?,\r\n        ep: DownloadEpisodeMetadata,\r\n        links: List<ExtractorLink>,\r\n    ) {\r\n        val info = DownloadInfo(\r\n            source, folder, ep, links\r\n        )\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/904", "ground_truth": "\r\n        val key = info.ep.id.toString()\r\n        setKey(WORK_KEY_INFO, key, info)\r\n        startWork(context, key)\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\utils\\VideoDownloadManager.kt"}}
{"prompt": "\n fun setOnSizeListener(listener: (Int) -> Unit) {\r", "choices": [{"text": "+    this.onSizeChanged = listener\r\n+}\r\n+\r\n+fun View.setOnSizeChangedListener(listener: (Int) -> Unit) {\r\n     this.onSizeChanged = listener\r\n }\r\n"}], "metadata": {"task_id": "cloudstream/905", "ground_truth": "        lastViewIndex = null\r\n        itemListener = listener\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\widget\\CenterZoomLayoutManager.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\nimport androidx.recyclerview.widget.LinearSnapHelper\noverride fun onLayoutCompleted(state: RecyclerView.State?) {\r\n        super.onLayoutCompleted(state)\r\n        if(waitForSnap != null) {\r\n            this.getChildAt(snapChild ?: 1)?.let { view ->\r\n                LinearSnapHelper().calculateDistanceToFinalSnap(this,view)?.get(0)?.let { dx ->\r\n                    waitForSnap?.invoke(dx)\r\n                    waitForSnap = null\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/906", "ground_truth": "                }\r\n            }\r\n        }\r\n        updateSize()\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\widget\\CenterZoomLayoutManager.kt"}}
{"prompt": "\nvar snapChild Int?\nvar waitForSnap\nvar itemListener\n fun snap(snap : Int? = null, callback : (Int) -> Unit) {\r", "choices": [{"text": "waitForSnap = true\r\nsnapChild = snap\r\nitemListener = callback\r\n}\r\n"}], "metadata": {"task_id": "cloudstream/907", "ground_truth": "        waitForSnap = callback\r\n        snapChild = snap\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\widget\\CenterZoomLayoutManager.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\noverride fun scrollHorizontallyBy(dx: Int, recycler: RecyclerView.Recycler, state: RecyclerView.State): Int {\r\n        val orientation = orientation\r\n        return if (orientation == HORIZONTAL) {\r\n            val scrolled = super.scrollHorizontallyBy(dx, recycler, state)\r\n            updateSize()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/908", "ground_truth": "            scrolled\r\n        } else {\r\n            0\r\n        }\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\widget\\CenterZoomLayoutManager.kt"}}
{"prompt": "\n import com.lagradost.cloudstream3.R\nimport android.view.ViewGroup\noverride fun generateDefaultLayoutParams(): LayoutParams {\r\n        return LayoutParams(\r\n            ViewGroup.LayoutParams.WRAP_CONTENT,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "cloudstream/910", "ground_truth": "            ViewGroup.LayoutParams.WRAP_CONTENT\r\n        )\r\n    }", "fpath": "cloudstream\\app\\src\\main\\java\\com\\lagradost\\cloudstream3\\widget\\FlowLayout.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(binding.root)\r\n\r\n        if (checkAppSideloading()) {\r\n            return\r\n        }\r\n\r\n        setupOptionsMenu()\r\n        handlePermission(getPermissionToRequest()) {\r\n            if (!it) {\r\n                toast(com.simplemobiletools.commons.R.string.no_storage_permissions)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/0", "ground_truth": "                finish()\r\n            }\r\n            initEditActivity()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\EditActivity.kt"}}
{"prompt": "\nvar currPrimaryAction\nvar uri Uri?\nvar currAspectRatio\n override fun onStop() {\r\n        super.onStop()\r\n        if (isEditingWithThirdParty) {\r", "choices": [{"text": "//            if (currPrimaryAction == null) {\r\n//                currPrimaryAction = primaryAction\r\n//            }\r\n            if (uri!= null) {\r\n                uri!!.close()\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/2", "ground_truth": "            finish()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\EditActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.commons.helpers.ensureBackgroundThread\nimport android.widget.ImageView\nprivate fun loadDrawCanvas() {\r\n        binding.defaultImageView.beGone()\r\n        binding.cropImageView.beGone()\r\n        binding.editorDrawCanvas.beVisible()\r\n\r\n        if (!wasDrawCanvasPositioned) {\r\n            wasDrawCanvasPositioned = true\r\n            binding.editorDrawCanvas.onGlobalLayout {\r\n                ensureBackgroundThread {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/4", "ground_truth": "                    fillCanvasBackground()\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\EditActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nimport com.simplemobiletools.commons.helpers.isNougatPlus\nimport com.bumptech.glide.request.target.Target\nimport androidx.exifinterface.media.ExifInterface\nimport android.os.Build\nimport android.annotation.TargetApi\n @TargetApi(Build.VERSION_CODES.N)\r\n    private fun setOldExif() {\r\n        var inputStream: InputStream? = null\r\n        try {\r\n            if (isNougatPlus()) {\r\n                inputStream = contentResolver.openInputStream(uri!!)\r\n                oldExif = ExifInterface(inputStream!!)\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/5", "ground_truth": "        } catch (e: Exception) {\r\n        } finally {\r\n            inputStream?.close()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\EditActivity.kt"}}
{"prompt": " import com.simplemobiletools.gallery.pro.R\nvar resizeHeight\nvar currAspectRatio\nvar currPrimaryAction\nprivate fun setupBottomActions() {\r\n        setupPrimaryActionButtons()\r\n        setupCropRotateActionButtons()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Simple-Gallery/7", "ground_truth": "        setupAspectRatioButtons()\r\n        setupDrawButtons()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\EditActivity.kt"}}
{"prompt": "\n import com.zomato.photofilters.imageprocessors.Filter\nimport com.simplemobiletools.gallery.pro.R\nprivate fun bottomFilterClicked() {\r\n        currPrimaryAction = if (currPrimaryAction == PRIMARY_ACTION_FILTER) {\r\n            PRIMARY_ACTION_NONE\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/8", "ground_truth": "        } else {\r\n            PRIMARY_ACTION_FILTER\r\n        }\r\n        updatePrimaryActionButtons()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\EditActivity.kt"}}
{"prompt": " import com.simplemobiletools.gallery.pro.R\nvar currCropRotateAction\nvar isCropIntent\nvar resizeWidth\nprivate fun bottomCropRotateClicked() {\r\n        currPrimaryAction = if (currPrimaryAction == PRIMARY_ACTION_CROP_ROTATE) {\r\n            PRIMARY_ACTION_NONE\r", "choices": [{"text": "} else {\r\n            PRIMARY_ACTION_CROP_ROTATE\r\n}\r\n        updatePrimaryAction()\r\n    }\n\n"}], "metadata": {"task_id": "Simple-Gallery/9", "ground_truth": "        } else {\r\n            PRIMARY_ACTION_CROP_ROTATE\r\n        }\r\n        updatePrimaryActionButtons()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\EditActivity.kt"}}
{"prompt": " import com.simplemobiletools.gallery.pro.R\nvar currPrimaryAction\nvar drawColor\nvar saveUri Uri\nprivate fun bottomDrawClicked() {\r\n        currPrimaryAction = if (currPrimaryAction == PRIMARY_ACTION_DRAW) {\r\n            PRIMARY_ACTION_NONE\r", "choices": [{"text": "} else {\r\n            PRIMARY_ACTION_DRAW\r\n}\r\n        updatePrimaryAction()\r\n    }\nprivate fun bottomCropClicked() {\r\n        currPrimaryAction = if (currPrimaryAction == PRIMARY_ACTION_CROP) {\r\n            PRIMARY_ACTION_NONE\r\n} else {\r\n            PRIMARY_ACTION_CROP\r\n}\r\n        updatePrimaryAction()\r\n    }\nprivate fun bottomRotateClicked() {\r\n        currPrimaryAction = if (currPrimaryAction == PRIMARY_ACTION_ROTATE) {\r\n            PRIMARY_ACTION_NONE\r\n} else {\r\n            PRIMARY_ACTION_ROTATE\r\n}\r\n        updatePrimaryAction()"}], "metadata": {"task_id": "Simple-Gallery/10", "ground_truth": "        } else {\r\n            PRIMARY_ACTION_DRAW\r\n        }\r\n        updatePrimaryActionButtons()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\EditActivity.kt"}}
{"prompt": "\n import com.zomato.photofilters.imageprocessors.Filter\nimport com.simplemobiletools.gallery.pro.R\nimport android.graphics.Color\nprivate fun updateCropRotateActionButtons() {\r\n        arrayOf(binding.bottomEditorCropRotateActions.bottomAspectRatio).forEach {\r\n            it.applyColorFilter(Color.WHITE)\r\n        }\r\n\r\n        val primaryActionView = when (currCropRotateAction) {\r\n            CROP_ROTATE_ASPECT_RATIO -> binding.bottomEditorCropRotateActions.bottomAspectRatio\r", "choices": [{"text": "//            CROP_ROTATE_FLIP_HORIZONTALLY -> binding.bottomEditorCropRotateActions.bottomFlipHorizontally\r\n//            CROP_ROTATE_FLIP_VERTICALLY -> binding.bottomEditorCropRotateActions.bottomFlipVertically\r\n//            CROP_ROTATE_ROTATE_90_CW -> binding.bottomEditorCropRotateActions.bottomRotate90CW\r\n//            CROP_ROTATE_ROTATE_90_CCW -> binding.bottomEditorCropRotateActions.bottomRotate90CCW\r\n//            CROP"}], "metadata": {"task_id": "Simple-Gallery/13", "ground_truth": "            else -> null\r\n        }\r\n\r\n        primaryActionView?.applyColorFilter(getProperPrimaryColor())\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\EditActivity.kt"}}
{"prompt": "\n import com.zomato.photofilters.imageprocessors.Filter\nimport android.graphics.Color\nprivate fun updateDrawColor(color: Int) {\r\n        drawColor = color\r\n        binding.bottomEditorDrawActions.bottomDrawColor.applyColorFilter(color)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Simple-Gallery/14", "ground_truth": "        config.lastEditorDrawColor = color\r\n        binding.editorDrawCanvas.updateColor(color)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\EditActivity.kt"}}
{"prompt": "\nvar isCropIntent\nvar currCropRotateAction\nvar currPrimaryAction\n private fun shouldCropSquare(): Boolean {\r\n        val extras = intent.extras\r\n        return if (extras != null && extras.containsKey(ASPECT_X) && extras.containsKey(ASPECT_Y)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/16", "ground_truth": "            extras.getInt(ASPECT_X) == extras.getInt(ASPECT_Y)\r\n        } else {\r\n            false\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\EditActivity.kt"}}
{"prompt": "\nvar uri Uri?\nvar currPrimaryAction\nvar resizeWidth\n private fun editWith() {\r", "choices": [{"text": "val intent = Intent(this, EditActivity::class.java)\r\nintent.putExtra(\"uri\", uri)\r\nstartActivity(intent)\r\n}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval uri = intent.getParcelableExtra(\"uri\")\r\nval bitmap = MediaStore.Images.Media.getBitmap(contentResolver, uri)\r\nval imageView = findViewById(R.id.imageView) as ImageView\r\nimageView.setImageBitmap(bitmap)\r\nval editButton"}], "metadata": {"task_id": "Simple-Gallery/18", "ground_truth": "        openEditor(uri.toString(), true)\r\n        isEditingWithThirdParty = true\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\EditActivity.kt"}}
{"prompt": "\n import android.widget.ImageView\nprivate fun setupLongPress(view: ImageView) {\r\n        view.setOnLongClickListener {\r\n            val contentDescription = view.contentDescription\r\n            if (contentDescription != null) {\r", "choices": [{"text": "\n import android.widget.ImageView\nprivate fun setupLongPress(view: ImageView) {\r\n        view.setOnLongClickListener {\r\n            val contentDescription = view.contentDescription\r\n            if (contentDescription!= null) {\r\n//                Toast.makeText(this, contentDescription, Toast.LENGTH_SHORT).show()\r\n            }\r\n            true\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/20", "ground_truth": "                toast(contentDescription.toString())\r\n            }\r\n            true\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\EditActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\nfinish()\r\n}\r\n}<issue_comment>username_1: I'm not sure what you're trying to do. You can't start the main activity from the gallery activity.<issue_comment>username_0: I want to start the main activity from the gallery activity.<issue_comment>username_1: You can't start the main activity from the gallery activity. You can start the main activity from the gallery activity by calling `startActivity(intent)` in the `onResume` method of the gallery activity."}], "metadata": {"task_id": "Simple-Gallery/21", "ground_truth": "        super.onResume()\r\n        setupToolbar(binding.manageFoldersToolbar, NavigationIcon.Arrow)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ExcludedFoldersActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\nfinish()\r\n}\r\n}<issue_comment>username_1: I'm not sure what you're trying to do. You can't start the main activity from the gallery activity.<issue_comment>username_0: I want to start the main activity from the gallery activity.<issue_comment>username_1: You can't start the main activity from the gallery activity. You can start the main activity from the gallery activity by calling `startActivity(intent)` in the `onResume` method of the gallery activity."}], "metadata": {"task_id": "Simple-Gallery/25", "ground_truth": "        super.onResume()\r\n        setupToolbar(binding.manageFoldersToolbar, NavigationIcon.Arrow)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\HiddenFoldersActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.extensions.config\nimport com.simplemobiletools.gallery.pro.extensions.addNoMedia\nimport com.simplemobiletools.commons.helpers.ensureBackgroundThread\nimport com.simplemobiletools.commons.dialogs.FilePickerDialog\nprivate fun addFolder() {\r\n        FilePickerDialog(this, config.lastFilepickerPath, false, config.shouldShowHidden, false, true) {\r\n            config.lastFilepickerPath = it\r\n            ensureBackgroundThread {\r\n                addNoMedia(it) {\r", "choices": [{"text": "//                    val intent = Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE)\r\n//                    intent.data = Uri.fromFile(it)\r\n//                    sendBroadcast(intent)\r\n                }\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/27", "ground_truth": "                    updateFolders()\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\HiddenFoldersActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\nfinish()\r\n}\r\n}<issue_comment>username_1: I'm not sure what you're trying to do. You can't start the main activity from the gallery activity.<issue_comment>username_0: I want to start the main activity from the gallery activity.<issue_comment>username_1: You can't start the main activity from the gallery activity. You can start the main activity from the gallery activity by calling `startActivity(intent)` in the `onResume` method of the gallery activity."}], "metadata": {"task_id": "Simple-Gallery/28", "ground_truth": "        super.onResume()\r\n        setupToolbar(binding.manageFoldersToolbar, NavigationIcon.Arrow)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\IncludedFoldersActivity.kt"}}
{"prompt": "\nval binding\n private fun addFolder() {\r\n        showAddIncludedFolderDialog {\r", "choices": [{"text": "//            val folder = it.toFile()\r\n//            val folderName = folder.name\r\n//            val folderPath = folder.absolutePath\r\n//            val folderId = folder.id\r\n//            val folderUri = folder.uri\r\n//            val folderUriString = folder.uri.toString()\r\n//            val folderUriString2 = folder.uri.toString()\r\n//            val folderUriString3 = folder.uri.toString()\r\n//            val folderUriString4 = folder.uri.toString()\r\n//            val folderUriString5"}], "metadata": {"task_id": "Simple-Gallery/31", "ground_truth": "            updateFolders()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\IncludedFoldersActivity.kt"}}
{"prompt": "\nvar mIsPickImageIntent\nvar mIsGetAnyContentIntent\nvar mIsGettingDirs\n override fun onStart() {\r", "choices": [{"text": "super.onStart()\r\nmIsGettingDirs = true\r\nmIsPickImageIntent = false\r\nmIsGetAnyContentIntent = false\r\nmIsGettingDirs = false\r\n}\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\nsuper.onActivityResult(requestCode, resultCode, data)\r\nif (resultCode == Activity.RESULT_OK) {\r\nif (requestCode == REQUEST_CODE_PICK_IMAGE) {\r\nmIsPickImageIntent = true\r\nmIsGetAnyContentIntent"}], "metadata": {"task_id": "Simple-Gallery/32", "ground_truth": "        super.onStart()\r\n        mTempShowHiddenHandler.removeCallbacksAndMessages(null)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MainActivity.kt"}}
{"prompt": "\n override fun onBackPressed() {\r\n        if (binding.mainMenu.isSearchOpen) {\r\n            binding.mainMenu.closeSearch()\r\n        } else if (config.groupDirectSubfolders) {\r\n            if (mCurrentPathPrefix.isEmpty()) {\r\n                super.onBackPressed()\r\n            } else {\r\n                mOpenedSubfolders.removeLast()\r\n                mCurrentPathPrefix = mOpenedSubfolders.last()\r\n                setupAdapter(mDirs)\r", "choices": [{"text": "//                setupAdapter(mDirs.filter { it.path.startsWith(mCurrentPathPrefix) })\r\n            }\r\n        } else {\r\n            super.onBackPressed()\r\n        }\r\n    }\r\n\r\n    private fun setupAdapter(dirs: List<Dir>) {\r\n        val adapter = DirsAdapter(dirs, this)\r\n        binding.mainMenu.setAdapter(adapter)\r\n        binding.mainMenu.setOnItemClickListener { _, _, position, _ ->\r\n            val dir = dirs[position]\r\n            if (dir.isDir) {\r\n                if (config.groupDirectSubfolders) {\r\n                    mOpenedSubfolders.add(dir."}], "metadata": {"task_id": "Simple-Gallery/34", "ground_truth": "            }\r\n        } else {\r\n            super.onBackPressed()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MainActivity.kt"}}
{"prompt": " import android.os.Bundle\nvar mIsPickImageIntent\nvar mIsSetWallpaperIntent\nvar mIsGetImageContentIntent\noverride fun onSaveInstanceState(outState: Bundle) {\r", "choices": [{"text": "super.onSaveInstanceState(outState)\r\noutState.putBoolean(\"isPickImageIntent\", mIsPickImageIntent)\r\noutState.putBoolean(\"isSetWallpaperIntent\", mIsSetWallpaperIntent)\r\noutState.putBoolean(\"isGetImageContentIntent\", mIsGetImageContentIntent)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\nsuper.onRestoreInstanceState(savedInstanceState)\r\nmIsPickImageIntent = savedInstanceState.getBoolean(\"isPickImageIntent\")\r\nmIsSetWallpaperIntent = savedInstanceState.getBoolean(\"isSetWallpaperIntent"}], "metadata": {"task_id": "Simple-Gallery/35", "ground_truth": "        super.onSaveInstanceState(outState)\r\n        outState.putBoolean(WAS_PROTECTION_HANDLED, mWasProtectionHandled)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MainActivity.kt"}}
{"prompt": "\n private fun updateMenuColors() {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/37", "ground_truth": "        updateStatusbarColor(getProperBackgroundColor())\r\n        binding.mainMenu.updateColors()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MainActivity.kt"}}
{"prompt": "\n private fun checkDefaultSpamFolders() {\r\n        if (!config.spamFoldersChecked) {\r\n            val spamFolders = arrayListOf(\r\n                \"/storage/emulated/0/Android/data/com.facebook.orca/files/stickers\"\r\n            )\r\n\r\n            val OTGPath = config.OTGPath\r\n            spamFolders.forEach {\r\n                if (getDoesFilePathExist(it, OTGPath)) {\r\n                    config.addExcludedFolder(it)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/40", "ground_truth": "                }\r\n            }\r\n            config.spamFoldersChecked = true\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MainActivity.kt"}}
{"prompt": "\n import android.content.Intent\nimport android.app.Activity\nprivate fun launchSearchActivity() {\r\n        hideKeyboard()\r\n        Intent(this, SearchActivity::class.java).apply {\r\n            startActivity(this)\r\n        }\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Simple-Gallery/42", "ground_truth": "\r\n        binding.mainMenu.postDelayed({\r\n            binding.mainMenu.closeSearch()\r\n        }, 500)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MainActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nimport android.content.Intent\nimport android.app.Activity\nprivate fun showAllMedia() {\r\n        config.showAll = true\r\n        Intent(this, MediaActivity::class.java).apply {\r\n            putExtra(DIRECTORY, \"\")\r\n\r\n            if (mIsThirdPartyIntent) {\r\n                handleMediaIntent(this)\r\n            } else {\r\n                hideKeyboard()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/44", "ground_truth": "                startActivity(this)\r\n                finish()\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MainActivity.kt"}}
{"prompt": "\n import java.io\nimport com.simplemobiletools.gallery.pro.dialogs.GrantAllFilesDialog\nimport com.simplemobiletools.gallery.pro.R\nprivate fun tryToggleTemporarilyShowHidden() {\r\n        if (config.temporarilyShowHidden) {\r\n            toggleTemporarilyShowHidden(false)\r\n        } else {\r\n            if (isRPlus() && !isExternalStorageManager()) {\r\n                GrantAllFilesDialog(this)\r\n            } else {\r\n                handleHiddenFolderPasswordProtection {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/46", "ground_truth": "                    toggleTemporarilyShowHidden(true)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MainActivity.kt"}}
{"prompt": "\nvar mAllowPickingMultiple\nvar mIsGetImageContentIntent\nvar mIsPickImageIntent\n private fun increaseColumnCount() {\r", "choices": [{"text": "mColumnCount++\r\nmAdapter.notifyDataSetChanged()\r\n}\r\nprivate fun decreaseColumnCount() {\r\nmColumnCount--\r\nmAdapter.notifyDataSetChanged()\r\n}\r\nprivate fun increaseRowCount() {\r\nmRowCount++\r\nmAdapter.notifyDataSetChanged()\r\n}\r\nprivate fun decreaseRowCount() {\r\nmRowCount--\r\nmAdapter.notifyDataSetChanged()\r\n}\r\nprivate fun increaseColumnWidth() {\r\nmColumnWidth++\r\nmAdapter.notifyDataSetChanged()\r\n}\r\nprivate fun decreaseColumnWidth"}], "metadata": {"task_id": "Simple-Gallery/53", "ground_truth": "        config.dirColumnCnt += 1\r\n        columnCountChanged()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MainActivity.kt"}}
{"prompt": "\nvar mIsGetAnyContentIntent\nvar mAllowPickingMultiple\nvar mIsGetImageContentIntent\n private fun reduceColumnCount() {\r", "choices": [{"text": "if (mColumnCount > 1) {\r\nmColumnCount = 1\r\n}\r\n}\r\nprivate fun getColumnCount(): Int {\r\nreturn mColumnCount\r\n}\r\nprivate fun getColumnCount(context: Context): Int {\r\nreturn if (mColumnCount > 1) {\r\nmColumnCount\r\n} else {\r\nval columnCount = context.resources.getInteger(R.integer.column_count)\r\nif (columnCount > 1) {\r\ncolumnCount\r\n} else {\r\n1\r\n}\r\n"}], "metadata": {"task_id": "Simple-Gallery/54", "ground_truth": "        config.dirColumnCnt -= 1\r\n        columnCountChanged()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MainActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nimport android.content.Intent\nimport android.app.Activity\nprivate fun itemClicked(path: String) {\r\n        handleLockedFolderOpening(path) { success ->\r\n            if (success) {\r\n                Intent(this, MediaActivity::class.java).apply {\r\n                    putExtra(SKIP_AUTHENTICATION, true)\r\n                    putExtra(DIRECTORY, path)\r", "choices": [{"text": "//                    putExtra(SHOW_HIDDEN, showHidden)\r\n                    startActivity(this)\r\n                }\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/58", "ground_truth": "                    handleMediaIntent(this)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MainActivity.kt"}}
{"prompt": "\nvar mWasDefaultFolderChecked\nvar mIsSetWallpaperIntent\nvar mAllowPickingMultiple\n private fun setAsDefaultFolder() {\r", "choices": [{"text": "mWasDefaultFolderChecked = mDefaultFolder.isChecked\r\nmDefaultFolder.isChecked = true\r\n}\r\nprivate fun setAsNonDefaultFolder() {\r\nmDefaultFolder.isChecked = false\r\n}\r\nprivate fun setAsDefaultFolder(isDefault: Boolean) {\r\nif (isDefault) {\r\nsetAsDefaultFolder()\r\n} else {\r\nsetAsNonDefaultFolder()\r\n}\r\n}\r\nprivate fun setAsDefaultFolder(isDefault: Boolean, isChecked: Boolean) {\r\nif (isDefault) {\r\nsetAs"}], "metadata": {"task_id": "Simple-Gallery/59", "ground_truth": "        config.defaultFolder = \"\"\r\n        refreshMenuItems()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MainActivity.kt"}}
{"prompt": "\nvar mIsGettingDirs\nvar mIsSetWallpaperIntent\nvar mAllowPickingMultiple\n override fun recheckPinnedFolders() {\r\n        ensureBackgroundThread {\r", "choices": [{"text": "//            val isPinnedFolders = mIsGettingDirs\r\n//            if (isPinnedFolders) {\r\n//                mIsGettingDirs = false\r\n//                mPinnedFolders.clear()\r\n//                mPinnedFolders.addAll(getPinnedFolders())\r\n//            }\r\n        }\r\n    }\r\n override fun getPinnedFolders(): List<FolderInfo> {\r\n        ensureBackgroundThread {\r\n//            if (!mIsGettingDirs) {\r\n//                mIsGettingDirs = true\r\n//                mPinnedFolders.clear()\r\n//                m"}], "metadata": {"task_id": "Simple-Gallery/62", "ground_truth": "            gotDirectories(movePinnedDirectoriesToFront(getCurrentlyDisplayedDirs()))\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MainActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.Directory\noverride fun updateDirectories(directories: ArrayList<Directory>) {\r\n        ensureBackgroundThread {\r\n            storeDirectoryItems(directories)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/63", "ground_truth": "            removeInvalidDBDirectories()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MainActivity.kt"}}
{"prompt": "\nvar mPath\nvar mShowAll\nvar mIsGetAnyIntent\n override fun onStart() {\r", "choices": [{"text": "super.onStart()\r\nmIsGetAnyIntent = false\r\nmShowAll = false\r\nmPath = \"\"\r\nmPath = intent.getStringExtra(\"path\")\r\nmShowAll = intent.getBooleanExtra(\"showAll\", false)\r\nmIsGetAnyIntent = true\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nif (mIsGetAnyIntent) {\r\nmIsGetAnyIntent = false\r\nif (mShowAll) {\r\nmPath = \"\"\r\n}\r\nif (mPath.isEmpty"}], "metadata": {"task_id": "Simple-Gallery/64", "ground_truth": "        super.onStart()\r\n        mTempShowHiddenHandler.removeCallbacksAndMessages(null)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MediaActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nimport android.os.Handler\noverride fun onPause() {\r\n        super.onPause()\r\n        mIsGettingMedia = false\r\n        binding.mediaRefreshLayout.isRefreshing = false\r\n        storeStateVariables()\r\n        mLastMediaHandler.removeCallbacksAndMessages(null)\r", "choices": [{"text": "}\r\noverride fun onResume() {\r\n        super.onResume()\r\n        mIsGettingMedia = true\r\n        binding.mediaRefreshLayout.isRefreshing = true\r\n        mLastMediaHandler.postDelayed(mGetMediaRunnable, 100)\r\n}\r\nprivate fun storeStateVariables() {\r\n        mLastMediaHandler.removeCallbacksAndMessages(null)\r\n        mLastMediaHandler.postDelayed(mGetMediaRunnable, 100)\r\n}\r\nprivate val mGetMediaRunnable = Runnable {\r\n        if (mIsGettingMedia) {\r\n                mIsGettingMedia = false"}], "metadata": {"task_id": "Simple-Gallery/65", "ground_truth": "\r\n        if (!mMedia.isEmpty()) {\r\n            mCurrAsyncTask?.stopFetching()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MediaActivity.kt"}}
{"prompt": "\n override fun onBackPressed() {\r\n        if (binding.mediaMenu.isSearchOpen) {\r", "choices": [{"text": "binding.mediaMenu.closeSearch()\r\n        } else {\r\n            super.onBackPressed()\r\n        }\r\n    }\r\n}<file_sep>/app/src/main/java/com/example/myapplication/ui/home/HomeFragment.kt\npackage com.example.myapplication.ui.home\r\n\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.fragment.findNavController\r"}], "metadata": {"task_id": "Simple-Gallery/68", "ground_truth": "            binding.mediaMenu.closeSearch()\r\n        } else {\r\n            super.onBackPressed()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MediaActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.Medium\nimport android.content.Intent\nimport android.app.Activity\nprivate fun startSlideshow() {\r\n        if (mMedia.isNotEmpty()) {\r\n            hideKeyboard()\r\n            Intent(this, ViewPagerActivity::class.java).apply {\r\n                val item = mMedia.firstOrNull { it is Medium } as? Medium ?: return\r\n                putExtra(SKIP_AUTHENTICATION, shouldSkipAuthentication())\r\n                putExtra(PATH, item.path)\r\n                putExtra(SHOW_ALL, mShowAll)\r", "choices": [{"text": "\n import com.simplemobiletools.gallery.pro.models.Medium\nimport android.content.Intent\nimport android.app.Activity\nprivate fun startSlideshow() {\r\n        if (mMedia.isNotEmpty()) {\r\n            hideKeyboard()\r\n            Intent(this, ViewPagerActivity::class.java).apply {\r\n                val item = mMedia.firstOrNull { it is Medium } as? Medium?: return\r\n                putExtra(SKIP_AUTHENTICATION, shouldSkipAuthentication())\r\n                putExtra(PATH, item.path)\r\n                putExtra(SHOW_ALL, mShowAll)\r\n//                putExtra(SHOW_ALL, true)\r\n                putExtra(SHOW_ALBUM_PREVIEW, mShowAlbumPreview)\r\n                putExtra(SHOW_ALBUM_PREVIEW_ON_SINGLE_ITEM, mShowAlbumPreviewOnSingleItem)\r\n                putExtra(SHOW_ALBUM_PREVIEW_ON_SINGLE_ITEM_ON_SINGLE_ITEM, mShowAlbumPreviewOnSingleItemOnSingleItem)\r\n                putExtra(SHOW_ALBUM_PREVIEW_ON_SINGLE_ITEM_ON_SINGLE_ITEM_ON_SINGLE_ITEM, mShowAlbumPreview"}], "metadata": {"task_id": "Simple-Gallery/70", "ground_truth": "                putExtra(SLIDESHOW_START_ON_ENTER, true)\r\n                startActivity(this)\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MediaActivity.kt"}}
{"prompt": "\n private fun updateMenuColors() {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/71", "ground_truth": "        updateStatusbarColor(getProperBackgroundColor())\r\n        binding.mediaMenu.updateColors()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MediaActivity.kt"}}
{"prompt": " import com.simplemobiletools.gallery.pro.R\nvar mMedia\nvar mIsGettingMedia\nvar mIsGetImageIntent\nprivate fun emptyRecycleBin() {\r\n        showRecycleBinEmptyingDialog {\r", "choices": [{"text": "\n            mMedia = ArrayList()\r\r\n            mIsGettingMedia = false\r\r\n            mIsGetImageIntent = false\r\r\n            mRecycleBinAdapter.clear()\r\r\n            mRecycleBinAdapter.notifyDataSetChanged()\r\r\n            mEmptyRecycleBin.visibility = View.GONE\r\r\n            mRecycleBin.visibility = View.GONE\r\r\n            mEmptyRecycleBin.text = getString(R.string.recycle_bin_empty)\r\r\n            mEmptyRecycleBin.setTextColor(ContextCompat.getColor(this, R.color.colorPrimary))\r\r\n            mEmptyRecycleBin.setCompoundDrawables"}], "metadata": {"task_id": "Simple-Gallery/75", "ground_truth": "            emptyTheRecycleBin {\r\n                finish()\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MediaActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nprivate fun emptyAndDisableRecycleBin() {\r\n        showRecycleBinEmptyingDialog {\r", "choices": [{"text": "//            val recycleBin = RecycleBin(this)\r\n//            recycleBin.emptyRecycleBin()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/76", "ground_truth": "            emptyAndDisableTheRecycleBin {\r\n                finish()\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MediaActivity.kt"}}
{"prompt": "\n import java.io.File\nimport com.simplemobiletools.gallery.pro.models.Medium\nimport com.simplemobiletools.gallery.pro.R\nprivate fun restoreAllFiles() {\r\n        val paths = mMedia.filter { it is Medium }.map { (it as Medium).path } as ArrayList<String>\r\n        restoreRecycleBinPaths(paths) {\r\n            ensureBackgroundThread {\r", "choices": [{"text": "               val files = mMedia.filter { it is Medium }.map { (it as Medium).file } as ArrayList<File>\r\n                restoreRecycleBinFiles(files) {\r\n                    ensureBackgroundThread {\r\n                        val files = mMedia.filter { it is Medium }.map { (it as Medium).file } as ArrayList<File>\r\n                        restoreRecycleBinFiles(files) {\r\n                            ensureBackgroundThread {\r\n                                val files = mMedia.filter { it is Medium }.map { (it as Medium).file } as ArrayList<File>\r\n                                restoreRecycleBinFiles(files) {\r\n                                    ensureBackgroundThread {\r\n                                        val"}], "metadata": {"task_id": "Simple-Gallery/77", "ground_truth": "                directoryDB.deleteDirPath(RECYCLE_BIN)\r\n            }\r\n            finish()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MediaActivity.kt"}}
{"prompt": "\nvar mPath\nvar mIsGetAnyIntent\nvar mMedia\n private fun switchToFolderView() {\r\n        hideKeyboard()\r\n        config.showAll = false\r", "choices": [{"text": "//        mMedia = Media(this)\r\n        mMedia = Media(this)\r\n        mMedia.setMediaListener(this)\r\n        mMedia.setMediaListener(this)\r\n        mMedia.setMediaListener(this)\r\n        mMedia.setMediaListener(this)\r\n        mMedia.setMediaListener(this)\r\n        mMedia.setMediaListener(this)\r\n        mMedia.setMediaListener(this)\r\n        mMedia.setMediaListener(this)\r\n        mMedia.setMediaListener(this)\r\n        mMedia.setMediaListener(this)\r\n        mMedia.setMediaListener(this)"}], "metadata": {"task_id": "Simple-Gallery/79", "ground_truth": "        startActivity(Intent(this, MainActivity::class.java))\r\n        finish()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MediaActivity.kt"}}
{"prompt": "\n private fun changeViewType() {\r\n        ChangeViewTypeDialog(this, false, mPath) {\r\n            refreshMenuItems()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/80", "ground_truth": "            setupLayoutManager()\r\n            binding.mediaGrid.adapter = null\r\n            setupAdapter()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MediaActivity.kt"}}
{"prompt": "\n import java.io.File\nimport com.simplemobiletools.commons.models.FileDirItem\nprivate fun deleteDirectoryIfEmpty() {\r\n        if (config.deleteEmptyFolders) {\r\n            val fileDirItem = FileDirItem(mPath, mPath.getFilenameFromPath(), true)\r\n            if (!fileDirItem.isDownloadsFolder() && fileDirItem.isDirectory) {\r\n                ensureBackgroundThread {\r\n                    if (fileDirItem.getProperFileCount(this, true) == 0) {\r\n                        tryDeleteFileDirItem(fileDirItem, true, true)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/82", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MediaActivity.kt"}}
{"prompt": "\nvar mMedia\nvar mIsGettingMedia\nvar mIsGetImageIntent\n private fun deleteDBDirectory() {\r\n        ensureBackgroundThread {\r\n            try {\r", "choices": [{"text": "//                val db = mDatabaseHelper.writableDatabase\r\n//                db.delete(MediaStore.Images.Media.EXTERNAL_CONTENT_URI.toString(), null, null)\r\n//                db.close()\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n    }\r\n private fun deleteDBDirectory() {\r\n        ensureBackgroundThread {\r\n            try {\r\n//                val db = mDatabaseHelper.writableDatabase\r\n//                db.delete(MediaStore.Images.Media.EXTERNAL_CONTENT_URI.toString(), null, null)\r\n//                db"}], "metadata": {"task_id": "Simple-Gallery/83", "ground_truth": "                directoryDB.deleteDirPath(mPath)\r\n            } catch (ignored: Exception) {\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MediaActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.dialogs\nimport com.simplemobiletools.commons.dialogs.CreateNewFolderDialog\nprivate fun createNewFolder() {\r\n        CreateNewFolderDialog(this, mPath) {\r", "choices": [{"text": "}\r\n}\n"}], "metadata": {"task_id": "Simple-Gallery/84", "ground_truth": "            config.tempFolderPath = it\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MediaActivity.kt"}}
{"prompt": "\n import java.io.File\nimport com.simplemobiletools.gallery.pro.R\nprivate fun tryToggleTemporarilyShowHidden() {\r\n        if (config.temporarilyShowHidden) {\r\n            toggleTemporarilyShowHidden(false)\r\n        } else {\r\n            if (isRPlus() && !isExternalStorageManager()) {\r\n                GrantAllFilesDialog(this)\r\n            } else {\r\n                handleHiddenFolderPasswordProtection {\r", "choices": [{"text": "\n import java.io.File\nimport com.simplemobiletools.gallery.pro.R\nprivate fun tryToggleTemporarilyShowHidden() {\r\n        if (config.temporarilyShowHidden) {\r\n            toggleTemporarilyShowHidden(false)\r\n        } else {\r\n            if (isRPlus() &&!isExternalStorageManager()) {\r\n                GrantAllFilesDialog(this)\r\n            } else {\r\n                handleHiddenFolderPasswordProtection {\r\n//                    toggleTemporarilyShowHidden(true)\r\n                }\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/85", "ground_truth": "                    toggleTemporarilyShowHidden(true)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MediaActivity.kt"}}
{"prompt": "\n private fun toggleTemporarilyShowHidden(show: Boolean) {\r\n        mLoadedInitialPhotos = false\r\n        config.temporarilyShowHidden = show\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/86", "ground_truth": "        getMedia()\r\n        refreshMenuItems()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MediaActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nprivate fun setupLayoutManager() {\r\n        val viewType = config.getFolderViewType(if (mShowAll) SHOW_ALL else mPath)\r\n        if (viewType == VIEW_TYPE_GRID) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/87", "ground_truth": "            setupGridLayoutManager()\r\n        } else {\r\n            setupListLayoutManager()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MediaActivity.kt"}}
{"prompt": "\nvar mIsGetImageIntent\nvar mAllowPickingMultiple\nvar mIsGetVideoIntent\n private fun increaseColumnCount() {\r", "choices": [{"text": "mColumnCount++\r\nif (mColumnCount > 3) {\r\nmColumnCount = 1\r\n}\r\n}\r\nprivate fun decreaseColumnCount() {\r\nmColumnCount--\r\nif (mColumnCount < 1) {\r\nmColumnCount = 3\r\n}\r\n}\r\nprivate fun increaseRowCount() {\r\nmRowCount++\r\nif (mRowCount > 3) {\r\nmRowCount = 1\r\n}\r\n}\r\nprivate fun decreaseRowCount() {\r\nmRowCount--\r\nif (mRowCount"}], "metadata": {"task_id": "Simple-Gallery/89", "ground_truth": "        config.mediaColumnCnt += 1\r\n        columnCountChanged()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MediaActivity.kt"}}
{"prompt": "\nvar mMedia\nvar mIsGettingMedia\nvar mIsGetImageIntent\n private fun reduceColumnCount() {\r", "choices": [{"text": "mMedia = Media.getMedia(mMedia, mIsGettingMedia, mIsGetImageIntent)\r\nmMedia.columnCount = 2\r\nmMedia.rowCount = 2\r\nmMedia.columnWidth = 100\r\nmMedia.rowHeight = 100\r\nmMedia.columnSpacing = 10\r\nmMedia.rowSpacing = 10\r\nmMedia.columnPadding = 10\r\nmMedia.rowPadding = 10\r\nmMedia.columnCount = 2\r\nmMedia.rowCount = "}], "metadata": {"task_id": "Simple-Gallery/90", "ground_truth": "        config.mediaColumnCnt -= 1\r\n        columnCountChanged()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MediaActivity.kt"}}
{"prompt": "\n import android.content.Intent\noverride fun selectedPaths(paths: ArrayList<String>) {\r\n        Intent().apply {\r", "choices": [{"text": "//            putExtra(Intent.EXTRA_STREAM, Uri.parse(paths[0]))\r\n            putExtra(Intent.EXTRA_STREAM, Uri.parse(paths[0]))\r\n            type = \"image/*\"\r\n            action = Intent.ACTION_SEND\r\n            startActivity(Intent.createChooser(this, \"Share Image\"))\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/92", "ground_truth": "            putExtra(PICKED_PATHS, paths)\r\n            setResult(Activity.RESULT_OK, this)\r\n        }\r\n        finish()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MediaActivity.kt"}}
{"prompt": "\nvar mIsGettingMedia\nval LAST_MEDIA_CHECK_PERIOD\nvar mPath\n private fun setAsDefaultFolder() {\r", "choices": [{"text": "mPath = Environment.getExternalStorageDirectory().toString() + \"/DCIM/Camera\"\r\n}\r\nprivate fun getMedia() {\r\nmIsGettingMedia = true\r\nval mediaList = ArrayList<String>()\r\nval mediaList2 = ArrayList<String>()\r\nval mediaList3 = ArrayList<String>()\r\nval mediaList4 = ArrayList<String>()\r\nval mediaList5 = ArrayList<String>()\r\nval mediaList6 = ArrayList<String>()\r\nval mediaList7 = ArrayList<String>()\r\nval mediaList8 = ArrayList<String>()\r\n"}], "metadata": {"task_id": "Simple-Gallery/94", "ground_truth": "        config.defaultFolder = mPath\r\n        refreshMenuItems()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MediaActivity.kt"}}
{"prompt": "\nvar mMedia\nvar mIsGettingMedia\nvar mIsGetImageIntent\n private fun unsetAsDefaultFolder() {\r", "choices": [{"text": "mMedia = null\r\nmIsGettingMedia = false\r\nmIsGetImageIntent = false\r\n}\r\nprivate fun getMedia() {\r\nmIsGettingMedia = true\r\nval intent = Intent(Intent.ACTION_GET_CONTENT)\r\nintent.type = \"image/*\"\r\nstartActivityForResult(intent, REQUEST_CODE_GET_IMAGE)\r\n}\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\nsuper.onActivityResult(requestCode, resultCode, data)\r\nif (resultCode"}], "metadata": {"task_id": "Simple-Gallery/95", "ground_truth": "        config.defaultFolder = \"\"\r\n        refreshMenuItems()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\MediaActivity.kt"}}
{"prompt": "\n override fun onPause() {\r\n        super.onPause()\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Simple-Gallery/97", "ground_truth": "        binding.panoramaView.pauseRendering()\r\n        isRendering = false\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\PanoramaPhotoActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n        if (isRendering) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/98", "ground_truth": "            binding.panoramaView.shutdown()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\PanoramaPhotoActivity.kt"}}
{"prompt": "\n import android.content.res.Configuration\noverride fun onConfigurationChanged(newConfig: Configuration) {\r", "choices": [{"text": "super.onConfigurationChanged(newConfig)\r\nif (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n//landscape\r\n} else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {\r\n//portrait\r\n}\r\n}\n"}], "metadata": {"task_id": "Simple-Gallery/99", "ground_truth": "        super.onConfigurationChanged(newConfig)\r\n        setupButtonMargins()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\PanoramaPhotoActivity.kt"}}
{"prompt": "\n private fun toggleButtonVisibility() {\r\n        arrayOf(binding.cardboard, binding.explore, binding.panoramaGradientBackground).forEach {\r\n            it.animate().alpha(if (isFullscreen) 0f else 1f)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/101", "ground_truth": "            it.isClickable = !isFullscreen\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\PanoramaPhotoActivity.kt"}}
{"prompt": "\nval binding\nvar isExploreEnabled\nvar isRendering\n private fun handleClick() {\r\n        isFullscreen = !isFullscreen\r\n        toggleButtonVisibility()\r\n        if (isFullscreen) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/102", "ground_truth": "            hideSystemUI(false)\r\n        } else {\r\n            showSystemUI(false)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\PanoramaPhotoActivity.kt"}}
{"prompt": "\n override fun onPause() {\r\n        super.onPause()\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Simple-Gallery/105", "ground_truth": "        binding.vrVideoView.pauseRendering()\r\n        mIsRendering = false\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\PanoramaVideoActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nimport android.view.View\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n        if (mIsRendering) {\r\n            binding.vrVideoView.shutdown()\r\n        }\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Simple-Gallery/106", "ground_truth": "\r\n        if (!isChangingConfigurations) {\r\n            mTimerHandler.removeCallbacksAndMessages(null)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\PanoramaVideoActivity.kt"}}
{"prompt": "\n import android.content.res.Configuration\noverride fun onConfigurationChanged(newConfig: Configuration) {\r", "choices": [{"text": "super.onConfigurationChanged(newConfig)\r\nif (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n//landscape\r\n} else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {\r\n//portrait\r\n}\r\n}\n"}], "metadata": {"task_id": "Simple-Gallery/107", "ground_truth": "        super.onConfigurationChanged(newConfig)\r\n        setupButtons()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\PanoramaVideoActivity.kt"}}
{"prompt": "\n private fun setupDuration(duration: Long) {\r\n        mDuration = (duration / 1000).toInt()\r\n        binding.bottomVideoTimeHolder.videoSeekbar.max = mDuration\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Simple-Gallery/108", "ground_truth": "        binding.bottomVideoTimeHolder.videoDuration.text = mDuration.getFormattedDuration()\r\n        setVideoProgress(0)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\PanoramaVideoActivity.kt"}}
{"prompt": "\n private fun togglePlayPause() {\r\n        mIsPlaying = !mIsPlaying\r\n        if (mIsPlaying) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/109", "ground_truth": "            resumeVideo()\r\n        } else {\r\n            pauseVideo()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\PanoramaVideoActivity.kt"}}
{"prompt": "\n import android.view.View\nprivate fun setVideoProgress(seconds: Int) {\r\n        binding.vrVideoView.seekTo(seconds * 1000L)\r\n        binding.bottomVideoTimeHolder.videoSeekbar.progress = seconds\r", "choices": [{"text": "}\r\nprivate fun setVideoDuration(seconds: Int) {\r\n        binding.bottomVideoTimeHolder.videoSeekbar.max = seconds\r\n}\r\nprivate fun setVideoProgress(progress: Int) {\r\n        binding.bottomVideoTimeHolder.videoSeekbar.progress = progress\r\n}\r\nprivate fun setVideoDuration(duration: Int) {\r\n        binding.bottomVideoTimeHolder.videoSeekbar.max = duration\r\n}\r\nprivate fun setVideoProgress(progress: Int) {\r\n        binding.bottomVideoTimeHolder.videoSeekbar.progress = progress\r\n}\r\n"}], "metadata": {"task_id": "Simple-Gallery/112", "ground_truth": "        mCurrTime = seconds\r\n        binding.bottomVideoTimeHolder.videoCurrTime.text = seconds.getFormattedDuration()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\PanoramaVideoActivity.kt"}}
{"prompt": "\n private fun handleClick() {\r\n        mIsFullscreen = !mIsFullscreen\r\n        toggleButtonVisibility()\r\n        if (mIsFullscreen) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/114", "ground_truth": "            hideSystemUI(false)\r\n        } else {\r\n            showSystemUI(false)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\PanoramaVideoActivity.kt"}}
{"prompt": "\n import android.widget.SeekBar\noverride fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {\r\n        if (fromUser) {\r", "choices": [{"text": "//            val progress = seekBar?.progress\r\n//            val progressText = findViewById<TextView>(R.id.progress_text)\r\n//            progressText.text = progress.toString()\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Simple-Gallery/115", "ground_truth": "            setVideoProgress(progress)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\PanoramaVideoActivity.kt"}}
{"prompt": "\n import android.widget.SeekBar\noverride fun onStartTrackingTouch(seekBar: SeekBar?) {\r", "choices": [{"text": "}\r\noverride fun onStopTrackingTouch(seekBar: SeekBar?) {\r\n}\r\noverride fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Simple-Gallery/116", "ground_truth": "        binding.vrVideoView.pauseVideo()\r\n        mIsDragged = true\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\PanoramaVideoActivity.kt"}}
{"prompt": "\n import android.widget.SeekBar\noverride fun onStopTrackingTouch(seekBar: SeekBar?) {\r\n        mIsPlaying = true\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Simple-Gallery/117", "ground_truth": "        resumeVideo()\r\n        mIsDragged = false\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\PanoramaVideoActivity.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval intent = Intent(this, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\nval button = findViewById<Button>(R.id.button)"}], "metadata": {"task_id": "Simple-Gallery/118", "ground_truth": "        mIsVideo = false\r\n        super.onCreate(savedInstanceState)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\PhotoActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nimport android.graphics.Color\noverride fun onResume() {\r\n        super.onResume()\r\n\r\n        if (config.bottomActions) {\r\n            window.navigationBarColor = Color.TRANSPARENT\r\n        } else {\r\n            setTranslucentNavigation()\r\n        }\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Simple-Gallery/119", "ground_truth": "\r\n        if (config.blackBackground) {\r\n            updateStatusbarColor(Color.BLACK)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\PhotoVideoActivity.kt"}}
{"prompt": "\n import android.view.View\nimport android.provider.MediaStore\nimport android.content.Intent\nprivate fun sendViewPagerIntent(path: String) {\r\n        ensureBackgroundThread {\r\n            if (isPathPresentInMediaStore(path)) {\r\n                openViewPager(path)\r\n            } else {\r\n                rescanPath(path) {\r", "choices": [{"text": "//                    openViewPager(path)\r\n                }\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/120", "ground_truth": "                    openViewPager(path)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\PhotoVideoActivity.kt"}}
{"prompt": "\n import java.io.File\nimport com.simplemobiletools.gallery.pro.R\nimport android.provider.MediaStore\nimport android.net.Uri\nprivate fun isPathPresentInMediaStore(path: String): Boolean {\r\n        val uri = MediaStore.Files.getContentUri(\"external\")\r\n        val selection = \"${MediaStore.Images.Media.DATA} = ?\"\r\n        val selectionArgs = arrayOf(path)\r\n\r\n        try {\r\n            val cursor = contentResolver.query(uri, null, selection, selectionArgs, null)\r\n            cursor?.use {\r\n                return cursor.moveToFirst()\r\n            }\r", "choices": [{"text": "\n import java.io.File\nimport com.simplemobiletools.gallery.pro.R\nimport android.provider.MediaStore\nimport android.net.Uri\nprivate fun isPathPresentInMediaStore(path: String): Boolean {\r\n        val uri = MediaStore.Files.getContentUri(\"external\")\r\n        val selection = \"${MediaStore.Images.Media.DATA} =?\"\r\n        val selectionArgs = arrayOf(path)\r\n\r\n        try {\r\n            val cursor = contentResolver.query(uri, null, selection, selectionArgs, null)\r\n            cursor?.use {\r\n                return cursor.moveToFirst()\r\n            }\r        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n\r\n        return false\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/121", "ground_truth": "        } catch (e: Exception) {\r\n        }\r\n\r\n        return false\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\PhotoVideoActivity.kt"}}
{"prompt": "\nval binding\nvar mUri Uri?\nvar mFragment ViewPagerFragment?\n private fun initBottomActions() {\r", "choices": [{"text": "binding.bottomNavigation.setOnNavigationItemSelectedListener { item ->\r\n    when (item.itemId) {\r\n        R.id.action_home -> {\r\n            binding.viewPager.currentItem = 0\r\n            true\r\n        }\r\n        R.id.action_search -> {\r\n            binding.viewPager.currentItem = 1\r\n            true\r\n        }\r\n        R.id.action_profile -> {\r\n            binding.viewPager.currentItem = 2\r\n            true\r\n        }\r\n        else -> false\r\n    }\r\n}\r\n}\r\nprivate fun initViewPager() {\r\nbinding.viewPager.adapter = ViewPagerAdapter(supportFragmentManager"}], "metadata": {"task_id": "Simple-Gallery/123", "ground_truth": "        initBottomActionButtons()\r\n        initBottomActionsLayout()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\PhotoVideoActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\nfinish()\r\n}\r\n}<issue_comment>username_1: I'm not sure what you're trying to do. You can't start the main activity from the gallery activity.<issue_comment>username_0: I want to start the main activity from the gallery activity.<issue_comment>username_1: You can't start the main activity from the gallery activity. You can start the main activity from the gallery activity by calling `startActivity(intent)` in the `onResume` method of the gallery activity."}], "metadata": {"task_id": "Simple-Gallery/126", "ground_truth": "        super.onResume()\r\n        updateMenuColors()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\SearchActivity.kt"}}
{"prompt": "\nval binding\nvar mCurrAsyncTask GetMediaAsynctask?\nvar mAllMedia\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nbinding.recyclerView.adapter = null\r\nbinding.recyclerView.layoutManager = null\r\nbinding.recyclerView.setHasFixedSize(true)\r\nbinding.recyclerView.isNestedScrollingEnabled = false\r\nbinding.recyclerView.isFocusable = false\r\nbinding.recyclerView.isFocusableInTouchMode = false\r\nbinding.recyclerView.isClickable = false\r\nbinding.recyclerView.isFocusable = false\r\nbinding.recyclerView.isFocusableInTouchMode = false\r\nbinding.recyclerView.isClickable"}], "metadata": {"task_id": "Simple-Gallery/127", "ground_truth": "        super.onDestroy()\r\n        mCurrAsyncTask?.stopFetching()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\SearchActivity.kt"}}
{"prompt": "\n private fun updateMenuColors() {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/128", "ground_truth": "        updateStatusbarColor(getProperBackgroundColor())\r\n        binding.searchMenu.updateColors()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\SearchActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.helpers.PATH\nimport android.content.Intent\nprivate fun itemClicked(path: String) {\r\n        val isVideo = path.isVideoFast()\r\n        if (isVideo) {\r\n            openPath(path, false)\r\n        } else {\r\n            Intent(this, ViewPagerActivity::class.java).apply {\r\n                putExtra(PATH, path)\r", "choices": [{"text": "//                putExtra(IS_VIDEO, isVideo)\r\n                startActivity(this)\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/130", "ground_truth": "                putExtra(SHOW_ALL, false)\r\n                startActivity(this)\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\SearchActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.helpers.SHOW_ALL\nimport com.simplemobiletools.gallery.pro.R\nimport com.simplemobiletools.commons.helpers.VIEW_TYPE_GRID\nprivate fun setupLayoutManager() {\r\n        val viewType = config.getFolderViewType(SHOW_ALL)\r\n        if (viewType == VIEW_TYPE_GRID) {\r", "choices": [{"text": "//            val gridLayoutManager = GridLayoutManager(this, 3)\r\n//            gridLayoutManager.spanSizeLookup = object : GridLayoutManager.SpanSizeLookup() {\r\n//                override fun getSpanSize(position: Int): Int {\r\n//                    return if (position == 0) 3 else 1\r\n//                }\r\n//            }\r\n//            recyclerView.layoutManager = gridLayoutManager\r\n        } else {\r\n            recyclerView.layoutManager = LinearLayoutManager(this)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/131", "ground_truth": "            setupGridLayoutManager()\r\n        } else {\r\n            setupListLayoutManager()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\SearchActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.commons.views.MyGridLayoutManager\nimport androidx.recyclerview.widget.GridLayoutManager\nprivate fun setupListLayoutManager() {\r\n        val layoutManager = binding.searchGrid.layoutManager as MyGridLayoutManager\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Simple-Gallery/132", "ground_truth": "        layoutManager.spanCount = 1\r\n        layoutManager.orientation = RecyclerView.VERTICAL\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\SearchActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.ThumbnailItem\nprivate fun getAllMedia() {\r\n        getCachedMedia(\"\") {\r\n            if (it.isNotEmpty()) {\r\n                mAllMedia = it.clone() as ArrayList<ThumbnailItem>\r\n            }\r\n            runOnUiThread {\r", "choices": [{"text": "//                mAdapter.notifyDataSetChanged()\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/134", "ground_truth": "                setupAdapter()\r\n            }\r\n            startAsyncTask(false)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\SearchActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.ThumbnailItem\nimport com.simplemobiletools.gallery.pro.asynctasks.GetMediaAsynctask\nprivate fun startAsyncTask(updateItems: Boolean) {\r\n        mCurrAsyncTask?.stopFetching()\r\n        mCurrAsyncTask = GetMediaAsynctask(applicationContext, \"\", showAll = true) {\r\n            mAllMedia = it.clone() as ArrayList<ThumbnailItem>\r\n            if (updateItems) {\r\n                textChanged(mLastSearchedText)\r", "choices": [{"text": "//                mAdapter.notifyDataSetChanged()\r\n            }\r\n        }\r\n        mCurrAsyncTask?.execute()\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/135", "ground_truth": "            }\r\n        }\r\n\r\n        mCurrAsyncTask!!.execute()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\SearchActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\noverride fun onResume() {\r\n        super.onResume()\r", "choices": [{"text": "}\r\noverride fun onPause() {\r\n        super.onPause()\r\n}\r\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n}\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n}\r\noverride fun onRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n}\r\noverride fun onBackPressed"}], "metadata": {"task_id": "Simple-Gallery/137", "ground_truth": "        setupToolbar(binding.settingsToolbar, NavigationIcon.Arrow)\r\n        setupSettingItems()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\SettingsActivity.kt"}}
{"prompt": "\n private fun setupCustomizeColors() {\r\n        binding.settingsColorCustomizationHolder.setOnClickListener {\r", "choices": [{"text": "//            val colorPickerDialog = ColorPickerDialog(this, R.style.ColorPickerDialogTheme)\r\n//            colorPickerDialog.show()\r\n            val colorPickerDialog = ColorPickerDialog(this, R.style.ColorPickerDialogTheme)\r\n            colorPickerDialog.show()\r\n            colorPickerDialog.onColorSelectedListener = object : ColorPickerDialog.OnColorSelectedListener {\r\n                override fun onColorSelected(color: Int) {\r\n                    binding.settingsColorCustomizationHolder.setBackgroundColor(color)\r\n                }\r\n            }\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Simple-Gallery/138", "ground_truth": "            startCustomizationActivity()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\SettingsActivity.kt"}}
{"prompt": "\n private fun setupChangeDateTimeFormat() {\r\n        binding.settingsChangeDateTimeFormatHolder.setOnClickListener {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/141", "ground_truth": "            ChangeDateTimeFormatDialog(this) {}\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\SettingsActivity.kt"}}
{"prompt": "\n import java.io.File\nprivate fun setupFileThumbnailStyle() {\r\n        binding.settingsFileThumbnailStyleHolder.setOnClickListener {\r", "choices": [{"text": "//            val intent = Intent(Intent.ACTION_OPEN_DOCUMENT)\r\n//            intent.addCategory(Intent.CATEGORY_OPENABLE)\r\n//            intent.type = \"image/*\"\r\n//            startActivityForResult(intent, 1)\r\n            val intent = Intent(Intent.ACTION_OPEN_DOCUMENT)\r\n            intent.addCategory(Intent.CATEGORY_OPENABLE)\r\n            intent.type = \"image/*\"\r\n            startActivityForResult(intent, 1)\r\n        }\r\n    }\n\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent"}], "metadata": {"task_id": "Simple-Gallery/163", "ground_truth": "            ChangeFileThumbnailStyleDialog(this)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\SettingsActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nprivate fun getFolderStyleText() = getString(\r\n        when (config.folderStyle) {\r\n            FOLDER_STYLE_SQUARE -> R.string.square\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/165", "ground_truth": "            else -> R.string.rounded_corners\r\n        }\r\n    )", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\SettingsActivity.kt"}}
{"prompt": "\n private fun setupManageExtendedDetails() {\r\n        binding.settingsManageExtendedDetailsHolder.setOnClickListener {\r\n            ManageExtendedDetailsDialog(this) {\r\n                if (config.extendedDetails == 0) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/175", "ground_truth": "                    binding.settingsShowExtendedDetailsHolder.callOnClick()\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\SettingsActivity.kt"}}
{"prompt": "\n private fun setupManageBottomActions() {\r\n        binding.settingsManageBottomActionsHolder.setOnClickListener {\r\n            ManageBottomActionsDialog(this) {\r\n                if (config.visibleBottomActions == 0) {\r\n                    binding.settingsBottomActionsCheckboxHolder.callOnClick()\r\n                    config.bottomActions = false\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/180", "ground_truth": "                    config.visibleBottomActions = DEFAULT_BOTTOM_ACTIONS\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\SettingsActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\nfinish()\r\n}\r\n}<issue_comment>username_1: I'm not sure what you're trying to do. You can't start the main activity from the gallery activity.<issue_comment>username_0: I want to start the main activity from the gallery activity.<issue_comment>username_1: You can't start the main activity from the gallery activity. You can start the main activity from the gallery activity by calling `startActivity(intent)` in the `onResume` method of the gallery activity."}], "metadata": {"task_id": "Simple-Gallery/186", "ground_truth": "        super.onResume()\r\n        setupToolbar(binding.setWallpaperToolbar, NavigationIcon.Arrow)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\SetWallpaperActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nimport android.content.Intent\nimport android.app.Activity\noverride fun onActivityResult(requestCode: Int, resultCode: Int, resultData: Intent?) {\r\n        if (requestCode == PICK_IMAGE) {\r\n            if (resultCode == Activity.RESULT_OK && resultData != null) {\r\n                handleImage(resultData)\r\n            } else {\r", "choices": [{"text": "\n import com.simplemobiletools.gallery.pro.R\nimport android.content.Intent\nimport android.app.Activity\noverride fun onActivityResult(requestCode: Int, resultCode: Int, resultData: Intent?) {\r\n        if (requestCode == PICK_IMAGE) {\r\n            if (resultCode == Activity.RESULT_OK && resultData!= null) {\r\n                handleImage(resultData)\r\n            } else {\r\n//                Toast.makeText(this, \"No image selected\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/187", "ground_truth": "                finish()\r\n            }\r\n        }\r\n        super.onActivityResult(requestCode, resultCode, resultData)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\SetWallpaperActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nimport com.simplemobiletools.commons.extensions.toast\nimport android.content.Intent\nimport android.app.WallpaperManager\nimport android.app.Activity\nprivate fun handleImage(intent: Intent) {\r\n        uri = intent.data!!\r\n        if (uri.scheme != \"file\" && uri.scheme != \"content\") {\r\n            toast(R.string.unknown_file_location)\r\n            finish()\r\n            return\r\n        }\r\n\r\n        wallpaperManager = WallpaperManager.getInstance(applicationContext)\r\n        binding.cropImageView.apply {\r\n            setOnCropImageCompleteListener(this@SetWallpaperActivity)\r", "choices": [{"text": "\n import com.simplemobiletools.gallery.pro.R\nimport com.simplemobiletools.commons.extensions.toast\nimport android.content.Intent\nimport android.app.WallpaperManager\nimport android.app.Activity\nprivate fun handleImage(intent: Intent) {\r\n        uri = intent.data!!\r\n        if (uri.scheme!= \"file\" && uri.scheme!= \"content\") {\r\n            toast(R.string.unknown_file_location)\r\n            finish()\r\n            return\r\n        }\r\n\r\n        wallpaperManager = WallpaperManager.getInstance(applicationContext)\r\n        binding.cropImageView.apply {\r\n            setOnCropImageCompleteListener(this@SetWallpaperActivity)\r\n//            setOnSetImageUriCompleteListener(this@SetWallpaperActivity)\r\n            setOnSetImageBitmapCompleteListener(this@SetWallpaperActivity)\r\n            setOnSetImageResourceCompleteListener(this@SetWallpaperActivity)\r\n            setOnSetImagePathCompleteListener(this@SetWallpaperActivity)\r\n            setOnSetImageUriCompleteListener(this@SetWallpaperActivity)\r\n            setOnSetImageDrawableCompleteListener(this@SetWallpaperActivity)\r\n            setOnSetImageBitmapCompleteListener(this@SetWallpaperActivity)\r\n            setOnSetImageResourceCompleteListener(this@SetWallpaper"}], "metadata": {"task_id": "Simple-Gallery/189", "ground_truth": "            setImageUriAsync(uri)\r\n        }\r\n\r\n        setupAspectRatio()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\SetWallpaperActivity.kt"}}
{"prompt": " import com.simplemobiletools.gallery.pro.R\nvar aspectRatio\nval RATIO_PORTRAIT\nval PICK_IMAGE\nprivate fun changeAspectRatio() {\r", "choices": [{"text": "aspectRatio = if (aspectRatio == RATIO_PORTRAIT) {\r\nRATIO_SQUARE\r\n} else {\r\nRATIO_PORTRAIT\r\n}\r\n}\r\nprivate fun changeOrientation() {\r\nval orientation = if (orientation == ORIENTATION_PORTRAIT) {\r\nORIENTATION_LANDSCAPE\r\n} else {\r\nORIENTATION_PORTRAIT\r\n}\r\n}\r\nprivate fun changePickImage() {\r\nval pickImage = if (pickImage == PICK_IMAGE) {\r\nPICK_VIDEO\r\n"}], "metadata": {"task_id": "Simple-Gallery/191", "ground_truth": "        aspectRatio = ++aspectRatio % (RATIO_SQUARE + 1)\r\n        setupAspectRatio()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\SetWallpaperActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nimport android.database.ContentObserver\nprotected fun unregisterFileUpdateListener() {\r\n        try {\r\n            contentResolver.unregisterContentObserver(observer)\r", "choices": [{"text": "} catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\nprotected fun registerFileUpdateListener() {\r\n        try {\r\n            contentResolver.registerContentObserver(Uri.parse(\"content://media/external/images/media\"), true, observer)\r\n} catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\nprivate val observer = object : ContentObserver(Handler()) {\r\n        override fun onChange(selfChange: Boolean) {\r\n            super.onChange(selfChange)\r\n            if (selfChange) {\r\n                updateFiles()\r\n            }\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Simple-Gallery/194", "ground_truth": "        } catch (ignored: Exception) {\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\SimpleActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.extensions.config\nimport com.simplemobiletools.commons.dialogs.FilePickerDialog\nprotected fun showAddIncludedFolderDialog(callback: () -> Unit) {\r\n        FilePickerDialog(this, config.lastFilepickerPath, false, config.shouldShowHidden, false, true) {\r\n            config.lastFilepickerPath = it\r\n            config.addIncludedFolder(it)\r\n            callback()\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Simple-Gallery/195", "ground_truth": "            ensureBackgroundThread {\r\n                scanPathRecursively(it)\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\SimpleActivity.kt"}}
{"prompt": "\n private fun launchActivity() {\r", "choices": [{"text": "val intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\nfinish()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Simple-Gallery/196", "ground_truth": "        startActivity(Intent(this, MainActivity::class.java))\r\n        finish()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\SplashActivity.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval intent = Intent(this, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\nval button = findViewById<Button>(R.id.button)"}], "metadata": {"task_id": "Simple-Gallery/197", "ground_truth": "        mIsVideo = true\r\n        super.onCreate(savedInstanceState)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\VideoActivity.kt"}}
{"prompt": "\n import android.os.Bundle\npublic override fun onCreate(savedInstanceState: Bundle?) {\r\n        showTransparentTop = true\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(binding.root)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Simple-Gallery/198", "ground_truth": "        setupOptionsMenu()\r\n        setupOrientation()\r\n        checkNotchSupport()\r\n        initPlayer()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\VideoPlayerActivity.kt"}}
{"prompt": "\n override fun onPause() {\r\n        super.onPause()\r\n        pauseVideo()\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Simple-Gallery/199", "ground_truth": "\r\n        if (config.rememberLastVideoPosition && mWasVideoStarted) {\r\n            saveVideoProgress()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\VideoPlayerActivity.kt"}}
{"prompt": "\n private fun togglePlayPause() {\r\n        mIsPlaying = !mIsPlaying\r\n        if (mIsPlaying) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/205", "ground_truth": "            resumeVideo()\r\n        } else {\r\n            pauseVideo()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\VideoPlayerActivity.kt"}}
{"prompt": "\n import android.net.Uri\nprivate fun setLastVideoSavedPosition() {\r\n        val pos = config.getLastVideoPosition(mUri.toString())\r\n        if (pos > 0) {\r", "choices": [{"text": "//            mVideoView.seekTo(pos)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/207", "ground_truth": "            setPosition(pos)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\VideoPlayerActivity.kt"}}
{"prompt": "\n import androidx.media3.exoplayer.ExoPlayer\nprivate fun didVideoEnd(): Boolean {\r\n        val currentPos = mExoPlayer?.currentPosition ?: 0\r", "choices": [{"text": "\n import androidx.media3.exoplayer.ExoPlayer\nprivate fun didVideoEnd(): Boolean {\r\n        val currentPos = mExoPlayer?.currentPosition?: 0\r\n//        val duration = mExoPlayer?.duration?: 0\r\n        return currentPos >= duration\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/209", "ground_truth": "        val duration = mExoPlayer?.duration ?: 0\r\n        return currentPos != 0L && currentPos >= duration\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\VideoPlayerActivity.kt"}}
{"prompt": "\nvar mWasVideoStarted\nvar mVideoSize\nvar mIsDragged\n private fun saveVideoProgress() {\r\n        if (!didVideoEnd()) {\r", "choices": [{"text": "//            mVideoProgress = mVideoView.getCurrentPosition()\r\n            mVideoProgress = mVideoView.currentPosition\r\n            mVideoSize = mVideoView.videoSize\r\n            mWasVideoStarted = mVideoView.isPlaying\r\n            mIsDragged = false\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Simple-Gallery/210", "ground_truth": "            config.saveLastVideoPosition(mUri.toString(), mExoPlayer!!.currentPosition.toInt() / 1000)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\VideoPlayerActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nimport androidx.media3.exoplayer.ExoPlayer\nprivate fun doSkip(forward: Boolean) {\r\n        if (mExoPlayer == null) {\r\n            return\r\n        }\r\n\r\n        val curr = mExoPlayer!!.currentPosition\r\n        val newProgress = if (forward) curr + FAST_FORWARD_VIDEO_MS else curr - FAST_FORWARD_VIDEO_MS\r\n        val roundProgress = Math.round(newProgress / 1000f)\r\n        val limitedProgress = Math.max(Math.min(mExoPlayer!!.duration.toInt() / 1000, roundProgress), 0)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/212", "ground_truth": "        setPosition(limitedProgress)\r\n        if (!mIsPlaying) {\r\n            togglePlayPause()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\VideoPlayerActivity.kt"}}
{"prompt": "\n import androidx.media3.exoplayer.ExoPlayer\nprivate fun releaseExoPlayer() {\r\n        mExoPlayer?.apply {\r", "choices": [{"text": "//            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)"}], "metadata": {"task_id": "Simple-Gallery/216", "ground_truth": "            stop()\r\n            release()\r\n        }\r\n        mExoPlayer = null\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\VideoPlayerActivity.kt"}}
{"prompt": "\n import androidx.media3.exoplayer.ExoPlayer\nimport android.widget.SeekBar\noverride fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {\r\n        if (mExoPlayer != null && fromUser) {\r\n            setPosition(progress)\r", "choices": [{"text": "\n import androidx.media3.exoplayer.ExoPlayer\nimport android.widget.SeekBar\noverride fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {\r\n        if (mExoPlayer!= null && fromUser) {\r\n            setPosition(progress)\r\n}\r\n}\n"}], "metadata": {"task_id": "Simple-Gallery/217", "ground_truth": "            resetPlayWhenReady()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\VideoPlayerActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nimport androidx.media3.exoplayer.ExoPlayer\nimport android.widget.SeekBar\noverride fun onStopTrackingTouch(seekBar: SeekBar?) {\r\n        if (mExoPlayer == null)\r\n            return\r\n\r\n        if (mIsPlaying) {\r\n            mExoPlayer!!.playWhenReady = true\r\n        } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/218", "ground_truth": "            togglePlayPause()\r\n        }\r\n\r\n        mIsDragged = false\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\VideoPlayerActivity.kt"}}
{"prompt": "\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nmMapView.onPause()\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nmMapView.onResume()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nmMapView.onDestroy()\r\n}\r\noverride fun onLowMemory() {\r\nsuper.onLowMemory()\r\nmMapView.onLowMemory()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Simple-Gallery/219", "ground_truth": "        super.onPause()\r\n        stopSlideshow()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": "\nvar mPos\nvar mDirectory\nvar mPath\n private fun initBottomActions() {\r", "choices": [{"text": "mBottomActions = findViewById(R.id.bottom_actions)\r\nmBottomActions.setNavigationItemSelectedListener(this)\r\nmBottomActions.setOnNavigationItemSelectedListener(this)\r\nmBottomActions.setOnNavigationItemReselectedListener(this)\r\nmBottomActions.setOnNavigationItemLongClickListener(this)\r\nmBottomActions.setOnNavigationItemCheckedListener(this)\r\nmBottomActions.setOnNavigationMenuVisibilityListener(this)\r\nmBottomActions.setOnNavigationContentDescriptionRes(R.string.abc_action_bar_home_description)\r\nmBottom"}], "metadata": {"task_id": "Simple-Gallery/223", "ground_truth": "        initBottomActionButtons()\r\n        initBottomActionsLayout()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": "\nvar mPath\nvar mDirectory\nvar mPos\n private fun initFavorites() {\r\n        ensureBackgroundThread {\r", "choices": [{"text": "//            mPath = Environment.getExternalStorageDirectory().toString() + \"/Android/data/com.example.myapplication/files/favorites.txt\"\r\n            mPath = Environment.getExternalStorageDirectory().toString() + \"/Android/data/com.example.myapplication/files/favorites.txt\"\r\n            mDirectory = File(mPath)\r\n            if (!mDirectory.exists()) {\r\n                mDirectory.mkdirs()\r\n            }\r\n            mPos = 0\r\n            mFavorites = ArrayList()\r\n            if (mDirectory.exists()) {\r\n                val files = mDirectory.listFiles()\r\n                if ("}], "metadata": {"task_id": "Simple-Gallery/224", "ground_truth": "            mFavoritePaths = getFavoritePaths()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": " import com.simplemobiletools.gallery.pro.R\nvar mIsSlideshowActive\nval REQUEST_VIEW_VIDEO\nvar mDirectory\nprivate fun checkSlideshowOnEnter() {\r\n        if (intent.getBooleanExtra(SLIDESHOW_START_ON_ENTER, false)) {\r", "choices": [{"text": "var mIsSlideshowActive\nval REQUEST_VIEW_VIDEO\nvar mDirectory\nprivate fun checkSlideshowOnEnter() {\r\n        if (intent.getBooleanExtra(SLIDESHOW_START_ON_ENTER, false)) {\r\nvar mIsSlideshowActive\nval REQUEST_VIEW_VIDEO\nvar mDirectory\nprivate fun checkSlideshowOnEnter() {\r\n        if (intent.getBooleanExtra(SLIDESHOW_START_ON_ENTER, false)) {\r\nvar mIsSlideshowActive\nval REQUEST_VIEW_VIDEO\nvar mDirectory\nprivate fun checkSlideshowOnEnter"}], "metadata": {"task_id": "Simple-Gallery/226", "ground_truth": "            initSlideshow()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.dialogs.SlideshowDialog\nprivate fun initSlideshow() {\r\n        SlideshowDialog(this) {\r", "choices": [{"text": "//            val intent = Intent(this, SlideshowActivity::class.java)\r\n//            startActivity(intent)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/227", "ground_truth": "            startSlideshow()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": "\n private fun slideshowEnded(forward: Boolean) {\r\n        if (config.loopSlideshow) {\r\n            if (forward) {\r\n                binding.viewPager.setCurrentItem(0, false)\r\n            } else {\r\n                binding.viewPager.setCurrentItem(binding.viewPager.adapter!!.count - 1, false)\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/229", "ground_truth": "        } else {\r\n            stopSlideshow()\r\n            toast(R.string.slideshow_ended)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nimport android.view.WindowManager\nimport android.os.Handler\nprivate fun stopSlideshow() {\r\n        if (mIsSlideshowActive) {\r\n            binding.viewPager.setPageTransformer(false, DefaultPageTransformer())\r\n            mIsSlideshowActive = false\r\n            showSystemUI(true)\r\n            mSlideshowHandler.removeCallbacksAndMessages(null)\r\n            window.clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)\r\n            mAreSlideShowMediaVisible = false\r\n\r", "choices": [{"text": "}\r\n}\r\nprivate fun startSlideshow() {\r\n        if (!mIsSlideshowActive) {\r\n            binding.viewPager.setPageTransformer(true, ZoomOutPageTransformer())\r\n            mIsSlideshowActive = true\r\n            showSystemUI(false)\r\n            mSlideshowHandler.postDelayed(mSlideshowRunnable, mSlideshowDelay)\r\n            window.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)\r\n            mAreSlideShowMediaVisible = true\r\n        }\r\n    }\r\nprivate fun showSystemUI(show: Boolean) {\r\n        if (show) {\r\n            window."}], "metadata": {"task_id": "Simple-Gallery/230", "ground_truth": "            if (config.slideshowRandomOrder) {\r\n                mRandomSlideshowStopped = true\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": " import java.io.File\nvar mDirectory\nvar mPath\nvar mSlideshowHandler\nprivate fun moveFileTo() {\r\n        handleDeletePasswordProtection {\r", "choices": [{"text": "//            mDirectory = File(Environment.getExternalStorageDirectory().toString() + \"/DCIM/Camera\")\r\n//            mPath = mDirectory.toString() + \"/$fileName\"\r\n//            val file = File(mPath)\r\n//            if (file.exists()) {\r\n//                file.delete()\r\n//            }\r\n//            val file1 = File(mPath)\r\n//            if (!file1.exists()) {\r\n//                file1.createNewFile()\r\n//            }\r\n//            val file2 = File(m"}], "metadata": {"task_id": "Simple-Gallery/232", "ground_truth": "            checkMediaManagementAndCopy(false)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": "\nvar mSlideshowMedia\nvar mAreSlideShowMediaVisible\nvar mIsSlideshowActive\n private fun checkMediaManagementAndCopy(isCopyOperation: Boolean) {\r\n        handleMediaManagementPrompt {\r", "choices": [{"text": "//            if (isCopyOperation) {\r\n//                mIsSlideshowActive = false\r\n//                mAreSlideShowMediaVisible = false\r\n//                mSlideshowMedia = null\r\n//            }\r\n            if (mAreSlideShowMediaVisible) {\r\n                mAreSlideShowMediaVisible = false\r\n                mSlideshowMedia = null\r\n            }\r\n            if (mIsSlideshowActive) {\r\n                mIsSlideshowActive = false\r\n                mSlideshowMedia = null\r\n            }\r\n            if (mSlideshowMedia!= null) {\r\n                mSlideshowMedia.stop()\r\n                mSlideshowMedia"}], "metadata": {"task_id": "Simple-Gallery/233", "ground_truth": "            copyMoveTo(isCopyOperation)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": "\n import java.io.File\nimport com.simplemobiletools.gallery.pro.models.Medium\nimport android.view.View\nprivate fun toggleFileVisibility(hide: Boolean, callback: (() -> Unit)? = null) {\r\n        toggleFileVisibility(getCurrentPath(), hide) {\r\n            val newFileName = it.getFilenameFromPath()\r\n            binding.mediumViewerToolbar.title = newFileName\r\n\r\n            getCurrentMedium()!!.apply {\r\n                name = newFileName\r\n                path = it\r\n                getCurrentMedia()[mPos] = this\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/234", "ground_truth": "\r\n            refreshMenuItems()\r\n            callback?.invoke()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": "\n private fun rotateImage(degrees: Int) {\r\n        val currentPath = getCurrentPath()\r\n        if (needsStupidWritePermissions(currentPath)) {\r\n            handleSAFDialog(currentPath) {\r\n                if (it) {\r\n                    rotateBy(degrees)\r\n                }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/235", "ground_truth": "            }\r\n        } else {\r\n            rotateBy(degrees)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": "\n private fun rotateBy(degrees: Int) {\r", "choices": [{"text": "//    val rotation = degrees % 360\r\n//    val rotation = degrees % 360\r\n//    val rotation = degrees % 360\r\n//    val rotation = degrees % 360\r\n//    val rotation = degrees % 360\r\n//    val rotation = degrees % 360\r\n//    val rotation = degrees % 360\r\n//    val rotation = degrees % 360\r\n//    val rotation = degrees % 360\r\n//    val rotation = degrees % 36"}], "metadata": {"task_id": "Simple-Gallery/236", "ground_truth": "        getCurrentPhotoFragment()?.rotateImageViewBy(degrees)\r\n        refreshMenuItems()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": "\n private fun toggleOrientation(orientation: Int) {\r\n        requestedOrientation = orientation\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Simple-Gallery/237", "ground_truth": "        mIsOrientationLocked = orientation != ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED\r\n        refreshMenuItems()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": "\n import java.io.File\nprivate fun isShowHiddenFlagNeeded(): Boolean {\r\n        val file = File(mPath)\r\n        if (file.isHidden) {\r\n            return true\r\n        }\r\n\r\n        var parent = file.parentFile ?: return false\r\n        while (true) {\r\n            if (parent.isHidden || parent.list()?.any { it.startsWith(NOMEDIA) } == true) {\r\n                return true\r\n            }\r\n\r\n            if (parent.absolutePath == \"/\") {\r\n                break\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/239", "ground_truth": "            parent = parent.parentFile ?: return false\r\n        }\r\n\r\n        return false\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.Medium\nprivate fun showProperties() {\r\n        if (getCurrentMedium() != null) {\r", "choices": [{"text": "\n import com.simplemobiletools.gallery.pro.models.Medium\nprivate fun showProperties() {\r\n        if (getCurrentMedium()!= null) {\r\n//            val medium = getCurrentMedium()!!\r\n//            val medium = getCurrentMedium()!!\r\n//            val medium = getCurrentMedium()!!\r\n//            val medium = getCurrentMedium()!!\r\n//            val medium = getCurrentMedium()!!\r\n//            val medium = getCurrentMedium()!!\r\n//            val medium = getCurrentMedium()!!\r\n//            val medium = getCurrentMedium()!!\r\n//            val medium = getCurrentMedium()!!\r\n//            val medium = getCurrentMedium()!!\r\n//            val medium = getCurrentMedium()!!\r\n//            val medium = getCurrent"}], "metadata": {"task_id": "Simple-Gallery/240", "ground_truth": "            PropertiesDialog(this, getCurrentPath(), false)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.Medium\nprivate fun toggleFavorite() {\r\n        val medium = getCurrentMedium() ?: return\r\n        medium.isFavorite = !medium.isFavorite\r\n        ensureBackgroundThread {\r\n            updateFavorite(medium.path, medium.isFavorite)\r\n            if (medium.isFavorite) {\r\n                mFavoritePaths.add(medium.path)\r\n            } else {\r\n                mFavoritePaths.remove(medium.path)\r\n            }\r\n\r", "choices": [{"text": "\n import com.simplemobiletools.gallery.pro.models.Medium\nprivate fun toggleFavorite() {\r\n        val medium = getCurrentMedium()?: return\r\n        medium.isFavorite =!medium.isFavorite\r\n        ensureBackgroundThread {\r\n            updateFavorite(medium.path, medium.isFavorite)\r\n            if (medium.isFavorite) {\r\n                mFavoritePaths.add(medium.path)\r\n            } else {\r\n                mFavoritePaths.remove(medium.path)\r\n            }\r\n\r\n}\r\n}\n"}], "metadata": {"task_id": "Simple-Gallery/241", "ground_truth": "            runOnUiThread {\r\n                refreshMenuItems()\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": " import java.io.File\nimport com.simplemobiletools.gallery.pro.R\nvar mDirectory\nvar mSlideshowHandler\nvar mIsSlideshowActive\nprivate fun restoreFile() {\r\n        restoreRecycleBinPath(getCurrentPath()) {\r", "choices": [{"text": "}\r\n}\r\nprivate fun restoreRecycleBinPath(path: String, callback: () -> Unit) {\r\n        val recycleBinPath = File(path, \".recycle-bin\")\r\n        if (recycleBinPath.exists()) {\r\n            val files = recycleBinPath.listFiles()\r\n            if (files!= null) {\r\n                for (file in files) {\r\n                    val newPath = file.absolutePath.replace(\".recycle-bin\", \"\")\r\n                    val newFile = File(newPath)\r\n                    if (newFile.exists()) {\r\n                        newFile.delete()\r\n                    }\r\n                    file.rename"}], "metadata": {"task_id": "Simple-Gallery/242", "ground_truth": "            refreshViewPager()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": "\nval REQUEST_VIEW_VIDEO\nvar mIsSlideshowActive\nvar mPath\n private fun resizeImage() {\r", "choices": [{"text": "val bitmap = BitmapFactory.decodeFile(mPath)\r\nval width = bitmap.width\r\nval height = bitmap.height\r\nval scaleWidth = 100f / width\r\nval scaleHeight = 100f / height\r\nval matrix = Matrix()\r\nmatrix.postScale(scaleWidth, scaleHeight)\r\nval resizedBitmap = Bitmap.createBitmap(bitmap, 0, 0, width, height, matrix, false)\r\nval file = File(mPath)\r\nval fileOutputStream = FileOutputStream(file)\r\nresizedBitmap."}], "metadata": {"task_id": "Simple-Gallery/243", "ground_truth": "        val oldPath = getCurrentPath()\r\n        launchResizeImageDialog(oldPath)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": " import com.simplemobiletools.gallery.pro.models.Medium\nvar mIsSlideshowActive\nvar mPos\nval REQUEST_VIEW_VIDEO\nprivate fun isDirEmpty(media: ArrayList<Medium>): Boolean {\r\n        return if (media.isEmpty()) {\r\n            deleteDirectoryIfEmpty()\r\n            finish()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/244", "ground_truth": "            true\r\n        } else {\r\n            false\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": " import com.simplemobiletools.gallery.pro.R\nvar mSlideshowMedia\nvar mAreSlideShowMediaVisible\nvar mIsSlideshowActive\nprivate fun checkMediaManagementAndRename() {\r\n        handleMediaManagementPrompt {\r", "choices": [{"text": "if (mIsSlideshowActive) {\r\nmIsSlideshowActive = false\r\nmSlideshowMedia.stop()\r\n}\r\nmAreSlideShowMediaVisible = false\r\nmSlideshowMedia.visibility = View.GONE\r\nmSlideshowMedia.stop()\r\nmSlideshowMedia.release()\r\nmSlideshowMedia = null\r\nmSlideshowMedia = MediaPlayer()\r\nmSlideshowMedia.setAudioStreamType(AudioManager.STREAM_MUSIC)\r\nmSlideshowMedia.setDataSource(mSlideshowMediaPath)\r\n"}], "metadata": {"task_id": "Simple-Gallery/245", "ground_truth": "            renameFile()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": "\n import kotlin.math.min\nimport java.io.File\nimport com.simplemobiletools.gallery.pro.models.Medium\nimport androidx.viewpager.widget.ViewPager\nimport android.view.View\nprivate fun refreshUI(media: ArrayList<Medium>, refetchViewPagerPosition: Boolean) {\r\n        mPrevHashcode = media.hashCode()\r\n        mMediaFiles = media\r\n\r\n        if (refetchViewPagerPosition || mPos == -1) {\r\n            mPos = getPositionInList(media)\r\n            if (mPos == -1) {\r\n                min(mPos, media.lastIndex)\r\n            }\r\n        }\r\n\r\n        updateActionbarTitle()\r\n        updatePagerItems(mMediaFiles.toMutableList())\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Simple-Gallery/247", "ground_truth": "\r\n        refreshMenuItems()\r\n        checkOrientation()\r\n        initBottomActions()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": "\nvar mPath\nvar mDirectory\nvar mPos\n override fun fragmentClicked() {\r\n        mIsFullScreen = !mIsFullScreen\r", "choices": [{"text": "\nvar mPath\nvar mDirectory\nvar mPos\n override fun fragmentClicked() {\r\n        mIsFullScreen =!mIsFullScreen\r\n}\n"}], "metadata": {"task_id": "Simple-Gallery/248", "ground_truth": "        checkSystemUI()\r\n        fullscreenToggled()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.Medium\noverride fun videoEnded(): Boolean {\r\n        if (mIsSlideshowActive) {\r\n            swipeToNextMedium()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/249", "ground_truth": "        }\r\n        return mIsSlideshowActive\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": "\n override fun goToPrevItem() {\r", "choices": [{"text": "//    if (mCurrentPosition > 0) {\r\n//      mCurrentPosition--\r\n//      mViewPager.setCurrentItem(mCurrentPosition, false)\r\n//    }\r\n  }\r\n\r\n  override fun goToNextItem() {\r\n//    if (mCurrentPosition < mAdapter.count - 1) {\r\n//      mCurrentPosition++\r\n//      mViewPager.setCurrentItem(mCurrentPosition, false)\r\n//    }\r\n  }\r\n\r\n  override fun onPageScrollStateChanged(state: Int) {\r\n    if (state == ViewPager.SCROLL_STATE_IDLE)"}], "metadata": {"task_id": "Simple-Gallery/250", "ground_truth": "        binding.viewPager.setCurrentItem(binding.viewPager.currentItem - 1, false)\r\n        checkOrientation()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": "\nvar mIsSlideshowActive\nval REQUEST_VIEW_VIDEO\nvar mPath\n override fun goToNextItem() {\r", "choices": [{"text": "mIsSlideshowActive = true\r\nmPath = mVideoList[mCurrentPosition].path\r\nmVideoList[mCurrentPosition].isPlaying = true\r\nmVideoList[mCurrentPosition].isPaused = false\r\nmVideoList[mCurrentPosition].isStopped = false\r\nmVideoList[mCurrentPosition].isCompleted = false\r\nmVideoList[mCurrentPosition].isBuffering = false\r\nmVideoList[mCurrentPosition].isSeeking = false\r\nmVideoList[mCurrentPosition].isBuffering = false\r\nmVideoList"}], "metadata": {"task_id": "Simple-Gallery/251", "ground_truth": "        binding.viewPager.setCurrentItem(binding.viewPager.currentItem + 1, false)\r\n        checkOrientation()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": "\n private fun checkSystemUI() {\r\n        if (mIsFullScreen) {\r\n            hideSystemUI(true)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/252", "ground_truth": "        } else {\r\n            stopSlideshow()\r\n            showSystemUI(true)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.Medium\nprivate fun getCurrentMedium(): Medium? {\r\n        return if (getCurrentMedia().isEmpty() || mPos == -1) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/254", "ground_truth": "            null\r\n        } else {\r\n            getCurrentMedia()[min(mPos, getCurrentMedia().lastIndex)]\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": "\n override fun onPageSelected(position: Int) {\r\n        if (mPos != position) {\r\n            mPos = position\r", "choices": [{"text": "\n override fun onPageSelected(position: Int) {\r\n        if (mPos!= position) {\r\n            mPos = position\r\n//            mViewPager.setCurrentItem(position, false)\r\n            mViewPager.setCurrentItem(position, true)\r\n        }\r\n    }\r\n\r\n    override fun onPageScrollStateChanged(state: Int) {\r\n\r\n    }\r\n\r\n    override fun onPageScrolled(position: Int, positionOffset: Float, positionOffsetPixels: Int) {\r\n\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        mViewPager.removeOnPageChangeListener(this)\r\n    }\r\n}<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\r\n\r\n"}], "metadata": {"task_id": "Simple-Gallery/255", "ground_truth": "            updateActionbarTitle()\r\n            refreshMenuItems()\r\n            scheduleSwipe()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.Medium\nimport com.simplemobiletools.gallery.pro.R\nimport androidx.viewpager.widget.ViewPager\nimport android.view.View\noverride fun onPageScrollStateChanged(state: Int) {\r\n        if (state == ViewPager.SCROLL_STATE_IDLE && getCurrentMedium() != null) {\r", "choices": [{"text": "\n import com.simplemobiletools.gallery.pro.models.Medium\nimport com.simplemobiletools.gallery.pro.R\nimport androidx.viewpager.widget.ViewPager\nimport android.view.View\noverride fun onPageScrollStateChanged(state: Int) {\r\n        if (state == ViewPager.SCROLL_STATE_IDLE && getCurrentMedium()!= null) {\r\n//            val medium = getCurrentMedium()\r\n//            val position = viewPager.currentItem\r\n//            val isLast = position == medium.photos.size - 1\r\n//            val isFirst = position == 0\r\n//            if (isLast) {\r\n//                if (medium.photos.size > 1) {\r\n//                    viewPager.setCurrentItem(0, false)\r\n//                }\r\n//            } else if (isFirst) {\r\n//                if (medium.photos.size > 1) {\r\n//                    view"}], "metadata": {"task_id": "Simple-Gallery/256", "ground_truth": "            checkOrientation()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\ViewPagerActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.Widget\nimport android.graphics.Color\nprivate fun storeWidgetColors() {\r\n        config.apply {\r\n            widgetBgColor = mBgColor\r", "choices": [{"text": "//            widgetTextColor = mTextColor\r\n            widgetTextColor = Color.WHITE\r\n            widgetTextSize = mTextSize\r\n            widgetTextTypeface = mTextTypeface\r\n            widgetTextAlign = mTextAlign\r\n            widgetTextBold = mTextBold\r\n            widgetTextItalic = mTextItalic\r\n            widgetTextUnderline = mTextUnderline\r\n            widgetTextStrikethrough = mTextStrikethrough\r\n            widgetTextShadow = mTextShadow\r\n            widgetTextShadowColor = mTextShadowColor\r\n            widgetTextShadowDx = mTextShadowDx\r\n            widgetTextShadowDy = mTextShadowDy\r\n            widgetTextShadowRadius = mTextShadowRadius\r\n            widgetText"}], "metadata": {"task_id": "Simple-Gallery/257", "ground_truth": "            widgetTextColor = mTextColor\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\WidgetConfigureActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.Widget\nimport com.simplemobiletools.gallery.pro.helpers.MyWidgetProvider\nimport com.simplemobiletools.gallery.pro.R\nimport android.content.Intent\nimport android.appwidget.AppWidgetManager\nprivate fun requestWidgetUpdate() {\r\n        Intent(AppWidgetManager.ACTION_APPWIDGET_UPDATE, null, this, MyWidgetProvider::class.java).apply {\r\n            putExtra(AppWidgetManager.EXTRA_APPWIDGET_IDS, intArrayOf(mWidgetId))\r", "choices": [{"text": "//            sendBroadcast(this)\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "Simple-Gallery/258", "ground_truth": "            sendBroadcast(this)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\WidgetConfigureActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.commons.dialogs.ColorPickerDialog\nimport android.graphics.Color\nprivate fun pickBackgroundColor() {\r\n        ColorPickerDialog(this, mBgColorWithoutTransparency) { wasPositivePressed, color ->\r\n            if (wasPositivePressed) {\r", "choices": [{"text": "//                mBgColor = color\r\n//                mBgColorWithoutTransparency = Color.argb(255, Color.red(color), Color.green(color), Color.blue(color))\r\n//                mBgColorWithTransparency = color\r\n//                mBgColorWithoutTransparency = Color.argb(255, Color.red(color), Color.green(color), Color.blue(color))\r\n//                mBgColorWithTransparency = color\r\n//                mBgColorWithoutTransparency = Color.argb(255, Color.red(color"}], "metadata": {"task_id": "Simple-Gallery/261", "ground_truth": "                mBgColorWithoutTransparency = color\r\n                updateBackgroundColor()\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\WidgetConfigureActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.commons.dialogs.ColorPickerDialog\nimport android.graphics.Color\nprivate fun pickTextColor() {\r\n        ColorPickerDialog(this, mTextColor) { wasPositivePressed, color ->\r\n            if (wasPositivePressed) {\r", "choices": [{"text": "mTextColor = color\r\n                mTextPaint.color = color\r\n                mTextPaint.isFakeBoldText = mIsBold\r\n                mTextPaint.isUnderlineText = mIsUnderline\r\n                mTextPaint.isStrikeThruText = mIsStrikeThrough\r\n                mTextPaint.isAntiAlias = mIsAntiAlias\r\n                mTextPaint.textSize = mTextSize\r\n                mTextPaint.typeface = mTypeface\r\n                mTextPaint.textAlign = mTextAlign\r\n                mTextPaint.textScaleX = mTextScaleX\r\n                mTextPaint.letterSpacing = mLetterSpacing\r\n                mTextPaint"}], "metadata": {"task_id": "Simple-Gallery/262", "ground_truth": "                mTextColor = color\r\n                updateTextColor()\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\WidgetConfigureActivity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.Directory\nimport com.simplemobiletools.gallery.pro.dialogs.PickDirectoryDialog\nprivate fun changeSelectedFolder() {\r\n        PickDirectoryDialog(this, \"\", false, true, false, true) {\r", "choices": [{"text": "//            val selectedFolder = it\r\n//            val selectedFolder = it\r\n//            val selectedFolder = it\r\n//            val selectedFolder = it\r\n//            val selectedFolder = it\r\n//            val selectedFolder = it\r\n//            val selectedFolder = it\r\n//            val selectedFolder = it\r\n//            val selectedFolder = it\r\n//            val selectedFolder = it\r\n//            val selectedFolder = it\r\n//            val selectedFolder = it\r\n//            val selectedFolder = it\r\n//            val selectedFolder = it\r\n//"}], "metadata": {"task_id": "Simple-Gallery/263", "ground_truth": "            updateFolderImage(it)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\activities\\WidgetConfigureActivity.kt"}}
{"prompt": "\n import android.text.TextUtils\noverride fun onActionModeDestroyed() {\r\n        if (isDragAndDropping) {\r\n            notifyDataSetChanged()\r\n\r\n            val reorderedFoldersList = dirs.map { it.path }\r\n            config.customFoldersOrder = TextUtils.join(\"|||\", reorderedFoldersList)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Simple-Gallery/267", "ground_truth": "            config.directorySorting = SORT_BY_CUSTOM\r\n        }\r\n\r\n        isDragAndDropping = false\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\DirectoryAdapter.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nimport android.view.View\noverride fun onViewRecycled(holder: ViewHolder) {\r\n        super.onViewRecycled(holder)\r\n        if (!activity.isDestroyed) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/268", "ground_truth": "            Glide.with(activity).clear(bindItem(holder.itemView).dirThumbnail)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\DirectoryAdapter.kt"}}
{"prompt": "\n private fun moveSelectedItemsToTop() {\r\n        selectedKeys.reversed().forEach { key ->\r\n            val position = dirs.indexOfFirst { it.path.hashCode() == key }\r\n            val tempItem = dirs[position]\r\n            dirs.removeAt(position)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/271", "ground_truth": "            dirs.add(0, tempItem)\r\n        }\r\n\r\n        notifyDataSetChanged()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\DirectoryAdapter.kt"}}
{"prompt": "\n private fun moveSelectedItemsToBottom() {\r\n        selectedKeys.forEach { key ->\r\n            val position = dirs.indexOfFirst { it.path.hashCode() == key }\r\n            val tempItem = dirs[position]\r\n            dirs.removeAt(position)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/272", "ground_truth": "            dirs.add(dirs.size, tempItem)\r\n        }\r\n\r\n        notifyDataSetChanged()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\DirectoryAdapter.kt"}}
{"prompt": "\n private fun hideFolders(paths: ArrayList<String>) {\r\n        for (path in paths) {\r\n            activity.handleLockedFolderOpening(path) { success ->\r\n                if (success) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/273", "ground_truth": "                    hideFolder(path)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\DirectoryAdapter.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nprivate fun tryEmptyRecycleBin(askConfirmation: Boolean) {\r\n        if (askConfirmation) {\r\n            activity.showRecycleBinEmptyingDialog {\r\n                emptyRecycleBin()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/274", "ground_truth": "            }\r\n        } else {\r\n            emptyRecycleBin()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\DirectoryAdapter.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nprivate fun emptyRecycleBin() {\r\n        activity.handleLockedFolderOpening(RECYCLE_BIN) { success ->\r\n            if (success) {\r\n                activity.emptyTheRecycleBin {\r", "choices": [{"text": ""}], "metadata": {"task_id": "Simple-Gallery/275", "ground_truth": "                    listener?.refreshItems()\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\DirectoryAdapter.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nprivate fun emptyAndDisableRecycleBin() {\r\n        activity.handleLockedFolderOpening(RECYCLE_BIN) { success ->\r\n            if (success) {\r\n                activity.showRecycleBinEmptyingDialog {\r\n                    activity.emptyAndDisableTheRecycleBin {\r\n                        listener?.refreshItems()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/276", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\DirectoryAdapter.kt"}}
{"prompt": "\nvar limitFolderTitle\nvar lockedFolderPaths\nvar directorySorting\n private fun tryLockFolder() {\r\n        if (config.wasFolderLockingNoticeShown) {\r\n            lockFolder()\r\n        } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/278", "ground_truth": "            FolderLockingNoticeDialog(activity) {\r\n                lockFolder()\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\DirectoryAdapter.kt"}}
{"prompt": "\n private fun lockFolder() {\r\n        SecurityDialog(activity, \"\", SHOW_ALL_TABS) { hash, type, success ->\r\n            if (success) {\r\n                getSelectedPaths().filter { !config.isFolderProtected(it) }.forEach {\r\n                    config.addFolderProtection(it, hash, type)\r\n                    lockedFolderPaths.add(it)\r\n                }\r\n\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/279", "ground_truth": "                listener?.refreshItems()\r\n                finishActMode()\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\DirectoryAdapter.kt"}}
{"prompt": " import java.io.File\nvar directorySorting\nval config\nvar pinnedFolders\nprivate fun copyFilesTo() {\r\n        handleLockedFolderOpeningForFolders(getSelectedPaths()) {\r", "choices": [{"text": "//            val file = File(it)\r\n//            if (file.exists()) {\r\n//                val file1 = File(it + File.separator + \"copy\")\r\n//                if (!file1.exists()) {\r\n//                    file1.mkdirs()\r\n//                }\r\n//                val file2 = File(it + File.separator + \"copy\" + File.separator + file.name)\r\n//                if (!file2.exists()) {\r\n//                    file2.createNewFile()\r\n//                }\r\n//                val file"}], "metadata": {"task_id": "Simple-Gallery/281", "ground_truth": "            copyMoveTo(it, true)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\DirectoryAdapter.kt"}}
{"prompt": "\nvar directorySorting\nvar currentDirectoriesHash\nvar cropThumbnails\n private fun tryCreateShortcut() {\r\n        if (!isOreoPlus()) {\r\n            return\r\n        }\r\n\r\n        activity.handleLockedFolderOpening(getFirstSelectedItemPath() ?: \"\") { success ->\r", "choices": [{"text": "\nvar directorySorting\nvar currentDirectoriesHash\nvar cropThumbnails\n private fun tryCreateShortcut() {\r\n        if (!isOreoPlus()) {\r\n            return\r\n        }\r\n\r\n        activity.handleLockedFolderOpening(getFirstSelectedItemPath()?: \"\") { success ->\r\n//            if (success) {\r\n//                activity.showToast(R.string.shortcut_created)\r\n//            } else {\r\n//                activity.showToast(R.string.shortcut_creation_failed)\r\n//            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/283", "ground_truth": "            if (success) {\r\n                createShortcut()\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\DirectoryAdapter.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.AlbumCover\nprivate fun tryChangeAlbumCover(useDefault: Boolean) {\r\n        activity.handleLockedFolderOpening(getFirstSelectedItemPath() ?: \"\") { success ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/285", "ground_truth": "            if (success) {\r\n                changeAlbumCover(useDefault)\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\DirectoryAdapter.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.AlbumCover\nprivate fun changeAlbumCover(useDefault: Boolean) {\r\n        if (selectedKeys.size != 1)\r\n            return\r\n\r\n        val path = getFirstSelectedItemPath() ?: return\r\n\r\n        if (useDefault) {\r\n            val albumCovers = getAlbumCoversWithout(path)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/286", "ground_truth": "            storeCovers(albumCovers)\r\n        } else {\r\n            pickMediumFrom(path, path)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\DirectoryAdapter.kt"}}
{"prompt": "\n import java.io.File\nimport com.simplemobiletools.gallery.pro.models.Directory\nimport com.simplemobiletools.gallery.pro.models.AlbumCover\nimport com.simplemobiletools.gallery.pro.dialogs.PickMediumDialog\nprivate fun pickMediumFrom(targetFolder: String, path: String) {\r\n        PickMediumDialog(activity, path) {\r\n            if (File(it).isDirectory) {\r\n                pickMediumFrom(targetFolder, it)\r\n            } else {\r\n                val albumCovers = getAlbumCoversWithout(path)\r\n                val cover = AlbumCover(targetFolder, it)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/287", "ground_truth": "                albumCovers.add(cover)\r\n                storeCovers(albumCovers)\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\DirectoryAdapter.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.AlbumCover\nimport com.google.gson.Gson\nprivate fun storeCovers(albumCovers: ArrayList<AlbumCover>) {\r\n        config.albumCovers = Gson().toJson(albumCovers)\r", "choices": [{"text": "}\r\n\r\nprivate fun getCovers(): ArrayList<AlbumCover> {\r\n        val albumCovers = ArrayList<AlbumCover>()\r\n        val coverJson = config.albumCovers\r\n        if (coverJson.isNotEmpty()) {\r\n            albumCovers.addAll(Gson().fromJson(coverJson, Array<AlbumCover>::class.java).toList())\r\n        }\r\n        return albumCovers\r\n}\r\n\r\nprivate fun getCover(album: Album): AlbumCover? {\r\n        val albumCovers = getCovers()\r\n        return albumCovers.find { it.album == album }\r\n}\r\n\r\nprivate fun get"}], "metadata": {"task_id": "Simple-Gallery/288", "ground_truth": "        finishActMode()\r\n        listener?.refreshItems()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\DirectoryAdapter.kt"}}
{"prompt": "\n private fun fillLockedFolders() {\r\n        lockedFolderPaths.clear()\r\n        dirs.map { it.path }.filter { config.isFolderProtected(it) }.forEach {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/289", "ground_truth": "            lockedFolderPaths.add(it)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\DirectoryAdapter.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.Directory\nfun updateDirs(newDirs: ArrayList<Directory>) {\r\n        val directories = newDirs.clone() as ArrayList<Directory>\r\n        if (directories.hashCode() != currentDirectoriesHash) {\r\n            currentDirectoriesHash = directories.hashCode()\r\n            dirs = directories\r", "choices": [{"text": "\n import com.simplemobiletools.gallery.pro.models.Directory\nfun updateDirs(newDirs: ArrayList<Directory>) {\r\n        val directories = newDirs.clone() as ArrayList<Directory>\r\n        if (directories.hashCode()!= currentDirectoriesHash) {\r\n            currentDirectoriesHash = directories.hashCode()\r\n            dirs = directories\r\n}\r\n"}], "metadata": {"task_id": "Simple-Gallery/290", "ground_truth": "            fillLockedFolders()\r\n            notifyDataSetChanged()\r\n            finishActMode()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\DirectoryAdapter.kt"}}
{"prompt": "\n fun updateAnimateGifs(animateGifs: Boolean) {\r", "choices": [{"text": "//    if (animateGifs) {\r\n//      animateGifs = true\r\n//      animateGifsButton.text = \"Animate GIFs\"\r\n//    } else {\r\n//      animateGifs = false\r\n//      animateGifsButton.text = \"Animate GIFs (disabled)\"\r\n//    }\r\n//    animateGifsButton.isEnabled =!animateGifs\r\n//    animateGifsButton.isClickable =!animateGifs\r\n//    animateGifsButton.isFocusable =!animateGifs\r\n//    animateG"}], "metadata": {"task_id": "Simple-Gallery/291", "ground_truth": "        this.animateGifs = animateGifs\r\n        notifyDataSetChanged()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\DirectoryAdapter.kt"}}
{"prompt": "\nvar cropThumbnails\nval config\nvar animateGifs\n fun updateCropThumbnails(cropThumbnails: Boolean) {\r", "choices": [{"text": "this.cropThumbnails = cropThumbnails\r\n}\r\nfun updateConfig(config: Config) {\r\nthis.config = config\r\n}\r\nfun updateAnimateGifs(animateGifs: Boolean) {\r\nthis.animateGifs = animateGifs\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Simple-Gallery/292", "ground_truth": "        this.cropThumbnails = cropThumbnails\r\n        notifyDataSetChanged()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\DirectoryAdapter.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\noverride fun onRowMoved(fromPosition: Int, toPosition: Int) {\r\n        if (fromPosition < toPosition) {\r\n            for (i in fromPosition until toPosition) {\r\n                Collections.swap(dirs, i, i + 1)\r\n            }\r\n        } else {\r\n            for (i in fromPosition downTo toPosition + 1) {\r\n                Collections.swap(dirs, i, i - 1)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/293", "ground_truth": "            }\r\n        }\r\n\r\n        notifyItemMoved(fromPosition, toPosition)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\DirectoryAdapter.kt"}}
{"prompt": "\n override fun actionItemPressed(id: Int) {\r\n        when (id) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/297", "ground_truth": "            com.simplemobiletools.commons.R.id.cab_remove -> removeSelection()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\ManageFoldersAdapter.kt"}}
{"prompt": "\nval config\n private fun executeItemMenuOperation(eventTypeId: Int, callback: () -> Unit) {\r\n        selectedKeys.clear()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/299", "ground_truth": "        selectedKeys.add(eventTypeId)\r\n        callback()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\ManageFoldersAdapter.kt"}}
{"prompt": "\n override fun actionItemPressed(id: Int) {\r\n        when (id) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/300", "ground_truth": "            R.id.cab_unhide -> tryUnhideFolders()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\ManageHiddenFoldersAdapter.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.databinding.ItemManageFolderBinding\nimport com.simplemobiletools.commons.extensions.setupViewBackground\nimport android.view.View\nprivate fun setupView(view: View, folder: String) {\r\n        ItemManageFolderBinding.bind(view).apply {\r\n            root.setupViewBackground(activity)\r\n            manageFolderHolder.isSelected = selectedKeys.contains(folder.hashCode())\r\n            manageFolderTitle.apply {\r", "choices": [{"text": "//                text = folder\r\n                text = folder.substring(folder.lastIndexOf(\"/\") + 1)\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/302", "ground_truth": "                text = folder\r\n                setTextColor(context.getProperTextColor())\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\ManageHiddenFoldersAdapter.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.extensions.removeNoMedia\nprivate fun unhideFolders(removeFolders: ArrayList<String>) {\r\n        val position = getSelectedItemPositions()\r\n        getSelectedItems().forEach {\r\n            removeFolders.add(it)\r\n            activity.removeNoMedia(it)\r\n        }\r\n\r\n        folders.removeAll(removeFolders)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Simple-Gallery/303", "ground_truth": "        removeSelectedItems(position)\r\n        if (folders.isEmpty()) {\r\n            listener?.refreshItems()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\ManageHiddenFoldersAdapter.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nimport androidx.core.view.allViews\nimport android.view.View\noverride fun onViewRecycled(holder: ViewHolder) {\r\n        super.onViewRecycled(holder)\r\n        if (!activity.isDestroyed) {\r\n            val itemView = holder.itemView\r\n            visibleItemPaths.remove(itemView.allViews.firstOrNull { it.id == R.id.medium_name }?.tag)\r\n            val tmb = itemView.allViews.firstOrNull { it.id == R.id.medium_thumbnail }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/305", "ground_truth": "            if (tmb != null) {\r\n                Glide.with(activity).clear(tmb)\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MediaAdapter.kt"}}
{"prompt": " import com.simplemobiletools.gallery.pro.R\nval config\nval ITEM_SECTION\nvar currentMediaHash\nprivate fun checkMediaManagementAndRename() {\r\n        activity.handleMediaManagementPrompt {\r", "choices": [{"text": "\n            val media = it.media\r\r\n            val mediaHash = it.mediaHash\r\r\n            val mediaType = it.mediaType\r\r\n            val mediaName = it.mediaName\r\r\n            val mediaPath = it.mediaPath\r\r\n            val mediaSize = it.mediaSize\r\r\n            val mediaDuration = it.mediaDuration\r\r\n            val mediaWidth = it.mediaWidth\r\r\n            val mediaHeight = it.mediaHeight\r\r\n            val mediaOrientation = it.mediaOrientation\r\r\n            val mediaDate = it.mediaDate\r\r\n            val mediaDateTaken = it.mediaDateTaken\r\r\n            val mediaLatitude = it.media"}], "metadata": {"task_id": "Simple-Gallery/309", "ground_truth": "            renameFile()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MediaAdapter.kt"}}
{"prompt": "\nvar showFileTypes\nval ITEM_SECTION\nval config\n private fun editFile() {\r", "choices": [{"text": "val intent = Intent(Intent.ACTION_EDIT)\r\nintent.setDataAndType(Uri.fromFile(file), \"text/plain\")\r\nstartActivity(intent)\r\n}\r\nprivate fun shareFile() {\r\nval intent = Intent(Intent.ACTION_SEND)\r\nintent.type = \"text/plain\"\r\nintent.putExtra(Intent.EXTRA_SUBJECT, \"Subject\")\r\nintent.putExtra(Intent.EXTRA_TEXT, \"Text\")\r\nstartActivity(Intent.createChooser(intent, \"Share File\"))\r\n}\r\nprivate fun deleteFile()"}], "metadata": {"task_id": "Simple-Gallery/310", "ground_truth": "        val path = getFirstSelectedItemPath() ?: return\r\n        activity.openEditor(path)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MediaAdapter.kt"}}
{"prompt": "\nvar visibleItemPaths\nval isListViewType\nval viewType\n private fun openPath() {\r", "choices": [{"text": "val intent = Intent(Intent.ACTION_VIEW)\r\nintent.setDataAndType(Uri.parse(path), \"application/pdf\")\r\nstartActivity(intent)\r\n}\r\nprivate fun openPath(path: String) {\r\nval intent = Intent(Intent.ACTION_VIEW)\r\nintent.setDataAndType(Uri.parse(path), \"application/pdf\")\r\nstartActivity(intent)\r\n}\r\nprivate fun openPath(path: String, viewType: Int) {\r\nval intent = Intent(Intent.ACTION_VIEW)\r\nintent.setData"}], "metadata": {"task_id": "Simple-Gallery/311", "ground_truth": "        val path = getFirstSelectedItemPath() ?: return\r\n        activity.openPath(path, true)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MediaAdapter.kt"}}
{"prompt": "\nval ITEM_SECTION\nval config\nval viewType\n private fun setAs() {\r", "choices": [{"text": "}\r\n\r\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\nreturn when (viewType) {\r\nITEM_SECTION -> {\r\nval view = LayoutInflater.from(parent.context).inflate(R.layout.item_section, parent, false)\r\nSectionViewHolder(view)\r\n}\r\nelse -> {\r\nval view = LayoutInflater.from(parent.context).inflate(R.layout.item_row, parent, false)\r\nItemViewHolder(view)\r\n}\r\n}\r\n}\r\n\r\noverride fun on"}], "metadata": {"task_id": "Simple-Gallery/312", "ground_truth": "        val path = getFirstSelectedItemPath() ?: return\r\n        activity.setAs(path)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MediaAdapter.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nprivate fun resize() {\r\n        val paths = getSelectedItems().filter { it.isImage() }.map { it.path }\r\n        if (isOneItemSelected()) {\r\n            val path = paths.first()\r\n            activity.launchResizeImageDialog(path) {\r\n                finishActMode()\r\n                listener?.refreshItems()\r\n            }\r\n        } else {\r\n            activity.launchResizeMultipleImagesDialog(paths) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/313", "ground_truth": "                finishActMode()\r\n                listener?.refreshItems()\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MediaAdapter.kt"}}
{"prompt": "\n private fun toggleFileVisibility(hide: Boolean) {\r\n        ensureBackgroundThread {\r\n            getSelectedItems().forEach {\r\n                activity.toggleFileVisibility(it.path, hide)\r\n            }\r\n            activity.runOnUiThread {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/315", "ground_truth": "                listener?.refreshItems()\r\n                finishActMode()\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MediaAdapter.kt"}}
{"prompt": "\n private fun toggleFavorites(add: Boolean) {\r\n        ensureBackgroundThread {\r\n            getSelectedItems().forEach {\r\n                it.isFavorite = add\r\n                activity.updateFavorite(it.path, add)\r\n            }\r\n            activity.runOnUiThread {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/316", "ground_truth": "                listener?.refreshItems()\r\n                finishActMode()\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MediaAdapter.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nprivate fun restoreFiles() {\r\n        activity.restoreRecycleBinPaths(getSelectedPaths()) {\r\n            listener?.refreshItems()\r", "choices": [{"text": "}\r\n}\r\n"}], "metadata": {"task_id": "Simple-Gallery/317", "ground_truth": "            finishActMode()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MediaAdapter.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nprivate fun rotateSelection(degrees: Int) {\r\n        val paths = getSelectedPaths().filter { it.isImageFast() }\r\n\r\n        if (paths.any { activity.needsStupidWritePermissions(it) }) {\r\n            activity.handleSAFDialog(paths.first { activity.needsStupidWritePermissions(it) }) {\r\n                if (it) {\r\n                    handleRotate(paths, degrees)\r\n                }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/319", "ground_truth": "            }\r\n        } else {\r\n            handleRotate(paths, degrees)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MediaAdapter.kt"}}
{"prompt": "\nvar visibleItemPaths\nval ITEM_SECTION\nval viewType\n private fun moveFilesTo() {\r\n        activity.handleDeletePasswordProtection {\r", "choices": [{"text": "//            val file = File(activity.getExternalFilesDir(null), \"password.txt\")\r\n//            val file2 = File(activity.getExternalFilesDir(null), \"password.txt\")\r\n//            val file3 = File(activity.getExternalFilesDir(null), \"password.txt\")\r\n//            val file4 = File(activity.getExternalFilesDir(null), \"password.txt\")\r\n//            val file5 = File(activity.getExternalFilesDir(null), \"password.txt\")\r\n//            val file6 = File("}], "metadata": {"task_id": "Simple-Gallery/320", "ground_truth": "            checkMediaManagementAndCopy(false)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MediaAdapter.kt"}}
{"prompt": "\nvar currentMediaHash\nval ITEM_MEDIUM_PHOTO\nval INSTANT_LOAD_DURATION\n private fun checkMediaManagementAndCopy(isCopyOperation: Boolean) {\r\n        activity.handleMediaManagementPrompt {\r", "choices": [{"text": "//            val media = activity.getMedia(currentMediaHash)\r\n//            val media = activity.getMedia(currentMediaHash)\r\n//            val media = activity.getMedia(currentMediaHash)\r\n//            val media = activity.getMedia(currentMediaHash)\r\n//            val media = activity.getMedia(currentMediaHash)\r\n//            val media = activity.getMedia(currentMediaHash)\r\n//            val media = activity.getMedia(currentMediaHash)\r\n//            val media = activity.getMedia(currentMediaHash)\r"}], "metadata": {"task_id": "Simple-Gallery/321", "ground_truth": "            copyMoveTo(isCopyOperation)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MediaAdapter.kt"}}
{"prompt": "\nval IMAGE_LOAD_DELAY\nval ITEM_SECTION\nval isListViewType\n private fun fixDateTaken() {\r\n        ensureBackgroundThread {\r\n            activity.fixDateTaken(getSelectedPaths(), true) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/322", "ground_truth": "                listener?.refreshItems()\r\n                finishActMode()\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MediaAdapter.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nprivate fun checkDeleteConfirmation() {\r\n        activity.handleMediaManagementPrompt {\r\n            if (config.isDeletePasswordProtectionOn) {\r\n                activity.handleDeletePasswordProtection {\r\n                    deleteFiles(config.tempSkipRecycleBin)\r\n                }\r\n            } else if (config.tempSkipDeleteConfirmation || config.skipDeleteConfirmation) {\r\n                deleteFiles(config.tempSkipRecycleBin)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/323", "ground_truth": "            } else {\r\n                askConfirmDelete()\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MediaAdapter.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.ThumbnailItem\nfun updateMedia(newMedia: ArrayList<ThumbnailItem>) {\r\n        val thumbnailItems = newMedia.clone() as ArrayList<ThumbnailItem>\r\n        if (thumbnailItems.hashCode() != currentMediaHash) {\r\n            currentMediaHash = thumbnailItems.hashCode()\r\n            media = thumbnailItems\r", "choices": [{"text": "\n import com.simplemobiletools.gallery.pro.models.ThumbnailItem\nfun updateMedia(newMedia: ArrayList<ThumbnailItem>) {\r\n        val thumbnailItems = newMedia.clone() as ArrayList<ThumbnailItem>\r\n        if (thumbnailItems.hashCode()!= currentMediaHash) {\r\n            currentMediaHash = thumbnailItems.hashCode()\r\n            media = thumbnailItems\r\n}\r\n"}], "metadata": {"task_id": "Simple-Gallery/324", "ground_truth": "            enableInstantLoad()\r\n            notifyDataSetChanged()\r\n            finishActMode()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MediaAdapter.kt"}}
{"prompt": "\n fun updateDisplayFilenames(displayFilenames: Boolean) {\r\n        this.displayFilenames = displayFilenames\r", "choices": [{"text": "}\r\n\r\nfun getDisplayFilenames(): Boolean {\r\n        return displayFilenames\r\n}\r\n\r\nfun setDisplayFilenames(displayFilenames: Boolean) {\r\n        this.displayFilenames = displayFilenames\r\n}\r\n\r\nfun getDisplayFilenames(): Boolean {\r\n        return displayFilenames\r\n}\r\n\r\nfun setDisplayFilenames(displayFilenames: Boolean) {\r\n        this.displayFilenames = displayFilenames\r\n}\r\n\r\nfun getDisplayFilenames(): Boolean {\r\n        return displayFilenames\r\n}\r\n\r\nfun setDisplayFilenames(displayFilenames: Boolean) {\r\n       "}], "metadata": {"task_id": "Simple-Gallery/325", "ground_truth": "        enableInstantLoad()\r\n        notifyDataSetChanged()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MediaAdapter.kt"}}
{"prompt": "\n fun updateAnimateGifs(animateGifs: Boolean) {\r", "choices": [{"text": "//    if (animateGifs) {\r\n//      animateGifs = true\r\n//      animateGifsButton.text = \"Animate GIFs\"\r\n//    } else {\r\n//      animateGifs = false\r\n//      animateGifsButton.text = \"Animate GIFs (disabled)\"\r\n//    }\r\n//    animateGifsButton.isEnabled =!animateGifs\r\n//    animateGifsButton.isClickable =!animateGifs\r\n//    animateGifsButton.isFocusable =!animateGifs\r\n//    animateG"}], "metadata": {"task_id": "Simple-Gallery/326", "ground_truth": "        this.animateGifs = animateGifs\r\n        notifyDataSetChanged()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MediaAdapter.kt"}}
{"prompt": "\nvar cropThumbnails\nval config\nval IMAGE_LOAD_DELAY\n fun updateCropThumbnails(cropThumbnails: Boolean) {\r", "choices": [{"text": "this.cropThumbnails = cropThumbnails\r\n}\r\nfun updateConfig(config: Config) {\r\nthis.config = config\r\n}\r\nfun updateImageLoadDelay(imageLoadDelay: Int) {\r\nthis.IMAGE_LOAD_DELAY = imageLoadDelay\r\n}\r\nfun getCropThumbnails(): Boolean {\r\nreturn cropThumbnails\r\n}\r\nfun getConfig(): Config {\r\nreturn config\r\n}\r\nfun getImageLoadDelay(): Int {\r\nreturn IMAGE_LOAD_DELAY\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Simple-Gallery/327", "ground_truth": "        this.cropThumbnails = cropThumbnails\r\n        notifyDataSetChanged()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MediaAdapter.kt"}}
{"prompt": "\n fun updateShowFileTypes(showFileTypes: Boolean) {\r", "choices": [{"text": "-    val showFileTypesKey = \"showFileTypes\"\r\n-    val showFileTypesValue = showFileTypes\r\n-    val editor = getEditor()\r\n-    editor.putBoolean(showFileTypesKey, showFileTypesValue)\r\n-    editor.apply()\r\n+    val editor = getEditor()\r\n+    editor.putBoolean(SHOW_FILE_TYPES_KEY, showFileTypes)\r\n+    editor.apply()\r\n }\r\n \r\n fun getShowFileTypes(): Boolean {\r\n-    val showFileTypesKey = \"showFile"}], "metadata": {"task_id": "Simple-Gallery/328", "ground_truth": "        this.showFileTypes = showFileTypes\r\n        notifyDataSetChanged()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MediaAdapter.kt"}}
{"prompt": " import android.os.Handler\nval ITEM_MEDIUM_VIDEO_PORTRAIT\nval INSTANT_LOAD_DURATION\nval isListViewType\nprivate fun enableInstantLoad() {\r\n        loadImageInstantly = true\r\n        delayHandler.postDelayed({\r", "choices": [{"text": "//            loadImageInstantly = false\r\n        }, INSTANT_LOAD_DURATION)\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/329", "ground_truth": "            loadImageInstantly = false\r\n        }, INSTANT_LOAD_DURATION)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MediaAdapter.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.ThumbnailSection\nimport android.view.View\nprivate fun setupSection(view: View, section: ThumbnailSection) {\r\n        ThumbnailSectionBinding.bind(view).apply {\r\n            thumbnailSection.text = section.title\r", "choices": [{"text": "//            thumbnailSection.setOnClickListener {\r\n//                if (section.title == \"Recent\") {\r\n//                    val intent = Intent(context, RecentActivity::class.java)\r\n//                    startActivity(intent)\r\n//                } else {\r\n//                    val intent = Intent(context, GalleryActivity::class.java)\r\n//                    startActivity(intent)\r\n//                }\r\n//            }\r\n        }\r\n    }<file_sep>/app/src/main/java/com/simplemobiletools/gallery/pro/models/ThumbnailSection.kt\npackage com.simplemobiletools"}], "metadata": {"task_id": "Simple-Gallery/330", "ground_truth": "            thumbnailSection.setTextColor(textColor)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MediaAdapter.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.helpers.SHOULD_INIT_FRAGMENT\nimport com.simplemobiletools.gallery.pro.helpers.MEDIUM\nimport com.simplemobiletools.gallery.pro.fragments.VideoFragment\nimport com.simplemobiletools.gallery.pro.fragments.PhotoFragment\nimport androidx.fragment.app.Fragment\nimport android.os.Bundle\noverride fun getItem(position: Int): Fragment {\r\n        val medium = media[position]\r\n        val bundle = Bundle()\r\n        bundle.putSerializable(MEDIUM, medium)\r\n        bundle.putBoolean(SHOULD_INIT_FRAGMENT, shouldInitFragment)\r\n        val fragment = if (medium.isVideo()) {\r\n            VideoFragment()\r\n        } else {\r\n            PhotoFragment()\r\n        }\r", "choices": [{"text": "fragment.arguments = bundle\r\n        return fragment\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/332", "ground_truth": "\r\n        fragment.arguments = bundle\r\n        fragment.listener = activity\r\n        return fragment\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MyPagerAdapter.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.fragments.ViewPagerFragment\nimport androidx.fragment.app.Fragment\nimport android.view.ViewGroup\noverride fun instantiateItem(container: ViewGroup, position: Int): Any {\r\n        val fragment = super.instantiateItem(container, position) as ViewPagerFragment\r", "choices": [{"text": "//        val fragment = super.instantiateItem(container, position) as Fragment\r\n//        val fragment = super.instantiateItem(container, position) as Fragment\r\n        val fragment = super.instantiateItem(container, position) as Fragment\r\n        val fragmentManager = fragment.fragmentManager\r\n        val fragmentTransaction = fragmentManager.beginTransaction()\r\n        val fragmentTag = fragment.javaClass.name\r\n        val fragmentByTag = fragmentManager.findFragmentByTag(fragmentTag)\r\n        if (fragmentByTag!= null) {\r\n            fragmentTransaction.remove(fragmentByTag)\r\n        }\r\n        fragmentTransaction.commit()\r\n        return fragment"}], "metadata": {"task_id": "Simple-Gallery/333", "ground_truth": "        fragments[position] = fragment\r\n        return fragment\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MyPagerAdapter.kt"}}
{"prompt": " import android.view.ViewGroup\nval fragments\nvar shouldInitFragment\noverride fun destroyItem(container: ViewGroup, position: Int, any: Any) {\r", "choices": [{"text": "if (position == 0) {\r\nshouldInitFragment = true\r\n}\r\nsuper.destroyItem(container, position, any)\r\n}\r\noverride fun instantiateItem(container: ViewGroup, position: Int): Any {\r\nif (shouldInitFragment) {\r\nshouldInitFragment = false\r\nreturn super.instantiateItem(container, position)\r\n}\r\nreturn super.instantiateItem(container, position)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Simple-Gallery/334", "ground_truth": "        fragments.remove(position)\r\n        super.destroyItem(container, position, any)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MyPagerAdapter.kt"}}
{"prompt": "\nval fragments\nvar shouldInitFragment\n fun toggleFullscreen(isFullscreen: Boolean) {\r\n        for ((pos, fragment) in fragments) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/335", "ground_truth": "            fragment.fullscreenToggled(isFullscreen)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MyPagerAdapter.kt"}}
{"prompt": "\n import android.os.Parcelable\nimport android.os.Bundle\noverride fun saveState(): Parcelable? {\r\n        val bundle = super.saveState() as Bundle?\r", "choices": [{"text": "bundle?.putParcelable(\"key\", value)\r\nreturn bundle\r\n}\r\noverride fun restoreState(state: Parcelable?, loader: ClassLoader?) {\r\n        super.restoreState(state, loader)\r\nval bundle = state as Bundle?\r\nbundle?.getParcelable<Parcelable>(\"key\")\r\n}\n"}], "metadata": {"task_id": "Simple-Gallery/336", "ground_truth": "        bundle?.putParcelableArray(\"states\", null)\r\n        return bundle\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\MyPagerAdapter.kt"}}
{"prompt": "\n fun setCurrentPhoto(position: Int) {\r\n        if (currentSelectionIndex != position) {\r\n            currentSelectionIndex = position\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/338", "ground_truth": "            notifyDataSetChanged()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\adapters\\PortraitPhotosAdapter.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.ThumbnailItem\noverride fun onPostExecute(media: ArrayList<ThumbnailItem>) {\r", "choices": [{"text": "super.onPostExecute(media)\r\nif (media.size > 0) {\r\nval thumbnailItem = media[0]\r\nval thumbnail = thumbnailItem.thumbnail\r\nval thumbnailUri = Uri.parse(thumbnail)\r\nval thumbnailBitmap = MediaStore.Images.Media.getBitmap(context.contentResolver, thumbnailUri)\r\nval thumbnailBitmapDrawable = BitmapDrawable(context.resources, thumbnailBitmap)\r\nval thumbnailBitmapDrawableUri = thumbnailBitmapDrawable.getUri()\r\nval thumbnailBitmapDrawableUriString = thumbnailBitmapDrawableUri.toString()\r\nval thumbnail"}], "metadata": {"task_id": "Simple-Gallery/340", "ground_truth": "        super.onPostExecute(media)\r\n        callback(media)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\asynctasks\\GetMediaAsynctask.kt"}}
{"prompt": "\n fun stopFetching() {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/341", "ground_truth": "        mediaFetcher.shouldStop = true\r\n        cancel(true)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\asynctasks\\GetMediaAsynctask.kt"}}
{"prompt": "\n fun destroyInstance() {\r\n            if (db?.isOpen == true) {\r\n                db?.close()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/342", "ground_truth": "            }\r\n            db = null\r\n        }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\databases\\GalleryDatabase.kt"}}
{"prompt": "\n private fun positivePressed() {\r", "choices": [{"text": "//    val positiveButton = findViewById<Button>(R.id.positiveButton)\r\n//    positiveButton.setOnClickListener {\r\n//        val intent = Intent(this, MainActivity::class.java)\r\n//        startActivity(intent)\r\n//    }\r\n}\r\n"}], "metadata": {"task_id": "Simple-Gallery/343", "ground_truth": "        dialog?.dismiss()\r\n        callback(true)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\dialogs\\AllFilesPermissionDialog.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.extensions.config\nimport com.simplemobiletools.gallery.pro.R\nprivate fun setupStyle() {\r\n        val styleRadio = binding.dialogRadioFolderStyle\r\n        styleRadio.setOnCheckedChangeListener { group, checkedId ->\r\n            updateSample()\r\n        }\r\n\r\n        val styleBtn = when (config.folderStyle) {\r\n            FOLDER_STYLE_SQUARE -> binding.dialogRadioFolderSquare\r", "choices": [{"text": "//            FOLDER_STYLE_CIRCLE -> binding.dialogRadioFolderCircle\r\n            else -> binding.dialogRadioFolderSquare\r\n        }\r\n        styleBtn.isChecked = true\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/345", "ground_truth": "            else -> binding.dialogRadioFolderRoundedCorners\r\n        }\r\n\r\n        styleBtn.isChecked = true\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\dialogs\\ChangeFolderThumbnailStyleDialog.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.extensions.config\nimport com.simplemobiletools.gallery.pro.R\nprivate fun setupMediaCount() {\r\n        val countRadio = binding.dialogRadioFolderCountHolder\r\n        countRadio.setOnCheckedChangeListener { group, checkedId ->\r\n            updateSample()\r\n        }\r\n\r\n        val countBtn = when (config.showFolderMediaCount) {\r\n            FOLDER_MEDIA_CNT_LINE -> binding.dialogRadioFolderCountLine\r\n            FOLDER_MEDIA_CNT_BRACKETS -> binding.dialogRadioFolderCountBrackets\r", "choices": [{"text": "//            FOLDER_MEDIA_CNT_NONE -> binding.dialogRadioFolderCountNone\r\n            else -> binding.dialogRadioFolderCountNone\r\n        }\r\n        countBtn.isChecked = true\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/346", "ground_truth": "            else -> binding.dialogRadioFolderCountNone\r\n        }\r\n\r\n        countBtn.isChecked = true\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\dialogs\\ChangeFolderThumbnailStyleDialog.kt"}}
{"prompt": "\nvar dialog AlertDialog?\n private fun dialogConfirmed() {\r", "choices": [{"text": "dialog?.dismiss()\r\n}\r\n"}], "metadata": {"task_id": "Simple-Gallery/349", "ground_truth": "        dialog?.dismiss()\r\n        callback()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\dialogs\\ConfirmDeleteFolderDialog.kt"}}
{"prompt": "\n import android.widget.EditText\nprivate fun getViewValue(view: EditText): Float {\r", "choices": [{"text": "return view.text.toString().toFloat()\r\n}\r\nfun main(args: Array<String>) {\r\nval view = EditText(null)\r\nval value = getViewValue(view)\r\n}\r\n"}], "metadata": {"task_id": "Simple-Gallery/350", "ground_truth": "        val textValue = view.value\r\n        return if (textValue.isEmpty()) 0f else textValue.toFloat()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\dialogs\\CustomAspectRatioDialog.kt"}}
{"prompt": "\n private fun dialogConfirmed() {\r\n        val path = if (alternativePaths.isEmpty()) selectedPaths[0] else alternativePaths[radioGroup!!.checkedRadioButtonId]\r", "choices": [{"text": "//        val path = selectedPaths[0]\r\n        val intent = Intent(this, MainActivity::class.java)\r\n        intent.putExtra(\"path\", path)\r\n        startActivity(intent)\r\n    }\r\n}<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport com.example"}], "metadata": {"task_id": "Simple-Gallery/352", "ground_truth": "        activity.config.addExcludedFolder(path)\r\n        callback()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\dialogs\\ExcludeFolderDialog.kt"}}
{"prompt": "\n private fun customRatioPicked() {\r\n        CustomAspectRatioDialog(activity, lastOtherAspectRatio) {\r\n            callback(it)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/353", "ground_truth": "            dialog?.dismiss()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\dialogs\\OtherAspectRatioDialog.kt"}}
{"prompt": "\n private fun ratioPicked(pair: Pair<Float, Float>) {\r", "choices": [{"text": "//    val ratio = pair.first / pair.second\r\n//    val ratio = pair.first / pair.second\r\n//    val ratio = pair.first / pair.second\r\n//    val ratio = pair.first / pair.second\r\n//    val ratio = pair.first / pair.second\r\n//    val ratio = pair.first / pair.second\r\n//    val ratio = pair.first / pair.second\r\n//    val ratio = pair.first / pair.second\r\n//    val ratio = pair.first / pair.second\r\n//"}], "metadata": {"task_id": "Simple-Gallery/354", "ground_truth": "        callback(pair)\r\n        dialog?.dismiss()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\dialogs\\OtherAspectRatioDialog.kt"}}
{"prompt": " import com.simplemobiletools.commons.views.MySearchMenu\nimport android.graphics.Color\nval searchView\nvar openedSubfolders\nval searchViewAppBarLayout\nprivate fun MySearchMenu.updateSearchViewUi() {\r\n        getToolbar().beInvisible()\r\n        updateColors()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Simple-Gallery/356", "ground_truth": "        setBackgroundColor(Color.TRANSPARENT)\r\n        searchViewAppBarLayout.setBackgroundColor(Color.TRANSPARENT)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\dialogs\\PickDirectoryDialog.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nimport com.simplemobiletools.commons.views.MySearchMenu\nprivate fun MySearchMenu.setSearchViewListeners() {\r\n        onSearchOpenListener = {\r\n            updateSearchViewLeftIcon(com.simplemobiletools.commons.R.drawable.ic_cross_vector)\r\n        }\r\n\r\n        onSearchClosedListener = {\r\n            searchEditText.clearFocus()\r\n            activity.hideKeyboard(searchEditText)\r\n            updateSearchViewLeftIcon(com.simplemobiletools.commons.R.drawable.ic_search_vector)\r\n        }\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Simple-Gallery/357", "ground_truth": "\r\n        onSearchTextChangedListener = { text ->\r\n            filterFolderListBySearchQuery(text)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\dialogs\\PickDirectoryDialog.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nprivate fun updateSearchViewLeftIcon(iconResId: Int) = with(searchView.binding.topToolbarSearchIcon) {\r\n        post {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/358", "ground_truth": "            setImageResource(iconResId)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\dialogs\\PickDirectoryDialog.kt"}}
{"prompt": "\n private fun fetchDirectories(forceShowHiddenAndExcluded: Boolean) {\r\n        activity.getCachedDirectories(forceShowHidden = forceShowHiddenAndExcluded, forceShowExcluded = forceShowHiddenAndExcluded) {\r\n            if (it.isNotEmpty()) {\r\n                it.forEach {\r\n                    it.subfoldersMediaCount = it.mediaCnt\r\n                }\r\n\r\n                activity.runOnUiThread {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/360", "ground_truth": "                    gotDirectories(activity.addTempFolderIfNeeded(it))\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\dialogs\\PickDirectoryDialog.kt"}}
{"prompt": "\n private fun backPressed() {\r\n        if (searchView.isSearchOpen) {\r\n            searchView.closeSearch()\r\n        } else if (activity.config.groupDirectSubfolders) {\r\n            if (currentPathPrefix.isEmpty()) {\r\n                dialog?.dismiss()\r\n            } else {\r\n                openedSubfolders.removeLast()\r\n                currentPathPrefix = openedSubfolders.last()\r\n                gotDirectories(allDirectories)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/361", "ground_truth": "            }\r\n        } else {\r\n            dialog?.dismiss()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\dialogs\\PickDirectoryDialog.kt"}}
{"prompt": "\n private fun showOtherFolder() {\r\n        PickDirectoryDialog(activity, path, true, true, false, false) {\r\n            callback(it)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/362", "ground_truth": "            dialog?.dismiss()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\dialogs\\PickMediumDialog.kt"}}
{"prompt": "\n import android.widget.EditText\nprivate fun getViewValue(view: EditText): Int {\r", "choices": [{"text": "return view.text.toString().toInt()\r\n}\r\nfun main(args: Array<String>) {\r\nval view = EditText(null)\r\nval value = getViewValue(view)\r\n}\r\n"}], "metadata": {"task_id": "Simple-Gallery/363", "ground_truth": "        val textValue = view.value\r\n        return if (textValue.isEmpty()) 0 else textValue.toInt()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\dialogs\\ResizeDialog.kt"}}
{"prompt": "\n import android.widget.EditText\nprivate fun getViewValue(view: EditText): Int {\r", "choices": [{"text": "return view.text.toString().toInt()\r\n}\r\nfun main(args: Array<String>) {\r\nval view = EditText(null)\r\nval value = getViewValue(view)\r\n}\r\n"}], "metadata": {"task_id": "Simple-Gallery/364", "ground_truth": "        val textValue = view.value\r\n        return if (textValue.isEmpty()) 0 else textValue.toInt()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\dialogs\\ResizeWithPathDialog.kt"}}
{"prompt": "\n import androidx.appcompat.app.AlertDialog\nprivate fun selectPath(alertDialog: AlertDialog, newPath: String) {\r\n        activity.handleSAFDialogSdk30(newPath) {\r\n            if (!it) {\r\n                return@handleSAFDialogSdk30\r", "choices": [{"text": "//                Toast.makeText(activity, \"Error\", Toast.LENGTH_SHORT).show()\r\n            }\r\n            alertDialog.dismiss()\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Simple-Gallery/365", "ground_truth": "            }\r\n            callback(newPath)\r\n            alertDialog.dismiss()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\dialogs\\SaveAsDialog.kt"}}
{"prompt": "\n import android.app.Activity\nfun Activity.openEditor(path: String, forceChooser: Boolean = false) {\r", "choices": [{"text": "-    val intent = Intent(Intent.ACTION_EDIT)\r\n-    intent.setDataAndType(Uri.parse(path), \"text/plain\")\r\n-    if (forceChooser) {\r\n-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n-    }\r\n-    startActivity(intent)\r\n+    val intent = Intent(Intent.ACTION_EDIT)\r\n+    intent.setDataAndType(Uri.parse(path), \"text/plain\")\r\n+    if (forceChooser) {\r\n+        intent"}], "metadata": {"task_id": "Simple-Gallery/368", "ground_truth": "    val newPath = path.removePrefix(\"file://\")\r\n    openEditorIntent(newPath, forceChooser, BuildConfig.APPLICATION_ID)\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Activity.kt"}}
{"prompt": "\n import android.app.Activity\nfun Activity.launchCamera() {\r", "choices": [{"text": "val intent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)\r\nstartActivityForResult(intent, 1)\r\n}\r\n"}], "metadata": {"task_id": "Simple-Gallery/369", "ground_truth": "    val intent = Intent(MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA)\r\n    launchActivityIntent(intent)\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Activity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.activities.SimpleActivity\nimport android.provider.Settings\nimport android.app.Activity\nfun SimpleActivity.launchSettings() {\r", "choices": [{"text": "startActivity(Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS, Uri.parse(\"package:$packageName\")))\r\n}\n"}], "metadata": {"task_id": "Simple-Gallery/370", "ground_truth": "    hideKeyboard()\r\n    startActivity(Intent(applicationContext, SettingsActivity::class.java))\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Activity.kt"}}
{"prompt": "\n import androidx.appcompat.app.AppCompatActivity\nimport android.view.View\nimport android.app.Activity\nfun AppCompatActivity.showSystemUI(toggleActionBarVisibility: Boolean) {\r\n    window.decorView.systemUiVisibility = View.SYSTEM_UI_FLAG_LAYOUT_STABLE or\r", "choices": [{"text": "                                           View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION or\r\n                                           View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN or\r\n                                           View.SYSTEM_UI_FLAG_HIDE_NAVIGATION or\r\n                                           View.SYSTEM_UI_FLAG_FULLSCREEN or\r\n                                           View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY\r\n    if (toggleActionBarVisibility) {\r\n        supportActionBar?.show()\r\n    }\r\n}\r\n\r\nfun AppCompatActivity.hideSystemUI(toggleActionBarVisibility: Boolean) {\r\n    window.decorView.systemUiVisibility = View.SYSTEM_UI_"}], "metadata": {"task_id": "Simple-Gallery/371", "ground_truth": "        View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION or\r\n        View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Activity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.activities.SimpleActivity\nimport com.simplemobiletools.commons.models.FileDirItem\nimport com.simplemobiletools.commons.activities.BaseSimpleActivity\nimport android.provider.MediaStore.Files\nimport android.app.Activity\nfun BaseSimpleActivity.tryDeleteFileDirItem(\r\n    fileDirItem: FileDirItem, allowDeleteFolder: Boolean = false, deleteFromDatabase: Boolean,\r\n    callback: ((wasSuccess: Boolean) -> Unit)? = null\r\n) {\r\n    deleteFile(fileDirItem, allowDeleteFolder, isDeletingMultipleFiles = false) {\r\n        if (deleteFromDatabase) {\r\n            ensureBackgroundThread {\r\n                deleteDBPath(fileDirItem.path)\r\n                runOnUiThread {\r\n                    callback?.invoke(it)\r\n                }\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/374", "ground_truth": "        } else {\r\n            callback?.invoke(it)\r\n        }\r\n    }\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Activity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.activities.SimpleActivity\nimport com.simplemobiletools.gallery.pro.R\nimport com.simplemobiletools.commons.activities.BaseSimpleActivity\nimport android.app.Activity\nfun BaseSimpleActivity.emptyAndDisableTheRecycleBin(callback: () -> Unit) {\r\n    ensureBackgroundThread {\r\n        emptyTheRecycleBin {\r", "choices": [{"text": "//            callback()\r\n        }\r\n    }\r\n}\r\n\r\nfun BaseSimpleActivity.emptyTheRecycleBin(callback: () -> Unit) {\r\n    val recycleBin = getRecycleBin()\r\n    if (recycleBin.isEmpty()) {\r\n        callback()\r\n        return\r\n    }\r\n\r\n    val dialog = AlertDialog.Builder(this)\r\n           .setTitle(R.string.empty_recycle_bin)\r\n           .setMessage(R.string.empty_recycle_bin_message)\r\n           .setPositiveButton(R.string.empty_recycle_bin_button) { _, _ ->\r\n                recycleBin.empty()"}], "metadata": {"task_id": "Simple-Gallery/376", "ground_truth": "            config.useRecycleBin = false\r\n            callback()\r\n        }\r\n    }\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Activity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.activities.SimpleActivity\nimport com.simplemobiletools.gallery.pro.R\nimport com.simplemobiletools.commons.dialogs.ConfirmationDialog\nimport com.simplemobiletools.commons.activities.BaseSimpleActivity\nimport android.app.Activity\nfun BaseSimpleActivity.showRecycleBinEmptyingDialog(callback: () -> Unit) {\r\n    ConfirmationDialog(\r\n        this,\r\n        \"\",\r\n        com.simplemobiletools.commons.R.string.empty_recycle_bin_confirmation,\r\n        com.simplemobiletools.commons.R.string.yes,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/377", "ground_truth": "        com.simplemobiletools.commons.R.string.no\r\n    ) {\r\n        callback()\r\n    }\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Activity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.activities.SimpleActivity\nimport com.simplemobiletools.commons.models.FileDirItem\nimport com.simplemobiletools.commons.activities.BaseSimpleActivity\nimport android.app.Activity\nfun BaseSimpleActivity.updateFavoritePaths(fileDirItems: ArrayList<FileDirItem>, destination: String) {\r\n    ensureBackgroundThread {\r\n        fileDirItems.forEach {\r", "choices": [{"text": "//            val path = it.path\r\n//            val newPath = path.replace(it.parentPath, destination)\r\n//            it.path = newPath\r\n//            it.parentPath = destination\r\n//            it.isFavorite = true\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "Simple-Gallery/378", "ground_truth": "            val newPath = \"$destination/${it.name}\"\r\n            updateDBMediaPath(it.path, newPath)\r\n        }\r\n    }\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Activity.kt"}}
{"prompt": "\n import com.squareup.picasso.Picasso\nimport com.simplemobiletools.gallery.pro.R\nimport com.bumptech.glide.Glide\nimport android.app.Activity\nfun Activity.fileRotatedSuccessfully(path: String, lastModified: Long) {\r\n    if (config.keepLastModified && lastModified != 0L) {\r\n        File(path).setLastModified(lastModified)\r\n        updateLastModified(path, lastModified)\r\n    }\r\n\r\n    Picasso.get().invalidate(path.getFileKey(lastModified))\r\n    // we cannot refresh a specific image in Glide Cache, so just clear it all\r\n    val glide = Glide.get(applicationContext)\r", "choices": [{"text": "\n import com.squareup.picasso.Picasso\nimport com.simplemobiletools.gallery.pro.R\nimport com.bumptech.glide.Glide\nimport android.app.Activity\nfun Activity.fileRotatedSuccessfully(path: String, lastModified: Long) {\r\n    if (config.keepLastModified && lastModified!= 0L) {\r\n        File(path).setLastModified(lastModified)\r\n        updateLastModified(path, lastModified)\r\n    }\r\n\r\n    Picasso.get().invalidate(path.getFileKey(lastModified))\r\n    // we cannot refresh a specific image in Glide Cache, so just clear it all\r\n    val glide = Glide.get(applicationContext)\r\n//    glide.clearDiskCache()\r\n    glide.clearMemory()\r\n}<file_sep>/app/src/main/java/com/simplemobiletools/gallery/pro/extensions/Activity.kt\npackage com.simplemobiletools.gallery.pro.extensions\n\nimport android.app.Activity\nimport android.content.Context\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.content.res.Configuration\nimport android.graphics.Bitmap\nimport android.graphics.BitmapFactory\nimport android.graphics.Matrix\nimport android.media.Exif"}], "metadata": {"task_id": "Simple-Gallery/380", "ground_truth": "    glide.clearDiskCache()\r\n    runOnUiThread {\r\n        glide.clearMemory()\r\n    }\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Activity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.activities.SimpleActivity\nimport com.simplemobiletools.commons.activities.BaseSimpleActivity\nimport android.app.Activity\nfun BaseSimpleActivity.copyFile(source: String, destination: String) {\r\n    var inputStream: InputStream? = null\r\n    var out: OutputStream? = null\r\n    try {\r\n        out = getFileOutputStreamSync(destination, source.getMimeType())\r\n        inputStream = getFileInputStreamSync(source)\r\n        inputStream!!.copyTo(out!!)\r\n    } catch (e: Exception) {\r\n        showErrorToast(e)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/381", "ground_truth": "    } finally {\r\n        inputStream?.close()\r\n        out?.close()\r\n    }\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Activity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.DateTaken\nimport com.simplemobiletools.gallery.pro.activities.SimpleActivity\nimport com.simplemobiletools.commons.activities.BaseSimpleActivity\nimport android.app.Activity\nfun BaseSimpleActivity.rescanPathsAndUpdateLastModified(paths: ArrayList<String>, pathLastModifiedMap: Map<String, Long>, callback: () -> Unit) {\r\n    fixDateTaken(paths, false)\r\n    for (path in paths) {\r\n        val file = File(path)\r\n        val lastModified = pathLastModifiedMap[path]\r\n        if (config.keepLastModified && lastModified != null && lastModified != 0L) {\r\n            File(file.absolutePath).setLastModified(lastModified)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/382", "ground_truth": "            updateLastModified(file.absolutePath, lastModified)\r\n        }\r\n    }\r\n    rescanPaths(paths, callback)\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Activity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nimport androidx.exifinterface.media.ExifInterface\nimport android.os.Build\nimport android.net.Uri\nimport android.app.Activity\nimport android.annotation.TargetApi\n\r\n@TargetApi(Build.VERSION_CODES.N)\r\nfun Activity.showFileOnMap(path: String) {\r\n    val exif = try {\r\n        if (path.startsWith(\"content://\") && isNougatPlus()) {\r\n            ExifInterface(contentResolver.openInputStream(Uri.parse(path))!!)\r\n        } else {\r\n            ExifInterface(path)\r\n        }\r\n    } catch (e: Exception) {\r\n        showErrorToast(e)\r\n        return\r\n    }\r\n\r\n    val latLon = FloatArray(2)\r\n    if (exif.getLatLong(latLon)) {\r", "choices": [{"text": "//        val lat = latLon[0]\r\n//        val lon = latLon[1]\r\n        val lat = latLon[0]\r\n        val lon = latLon[1]\r\n        val uri = Uri.parse(\"geo:$lat,$lon?q=$lat,$lon(Location)\")\r\n        val intent = Intent(Intent.ACTION_VIEW, uri)\r\n        intent.setPackage(\"com.google.android.apps.maps\")\r\n        startActivity(intent)\r\n    } else {\r\n        showErrorToast(getString(R.string.no_location_found))\r\n    }\r\n}\r\n<file_sep>/app"}], "metadata": {"task_id": "Simple-Gallery/384", "ground_truth": "        showLocationOnMap(\"${latLon[0]}, ${latLon[1]}\")\r\n    } else {\r\n        toast(R.string.unknown_location)\r\n    }\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Activity.kt"}}
{"prompt": "\n import com.simplemobiletools.commons.dialogs.SecurityDialog\nimport android.app.Activity\nfun Activity.handleExcludedFolderPasswordProtection(callback: () -> Unit) {\r\n    if (config.isExcludedPasswordProtectionOn) {\r\n        SecurityDialog(this, config.excludedPasswordHash, config.excludedProtectionType) { _, _, success ->\r\n            if (success) {\r\n                callback()\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/385", "ground_truth": "        }\r\n    } else {\r\n        callback()\r\n    }\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Activity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.helpers.RECYCLE_BIN\nimport com.simplemobiletools.gallery.pro.helpers.DIRECTORY\nimport com.simplemobiletools.gallery.pro.activities.MediaActivity\nimport com.simplemobiletools.gallery.pro.R\nimport android.content.Intent\nimport android.app.Activity\nfun Activity.openRecycleBin() {\r\n    Intent(this, MediaActivity::class.java).apply {\r\n        putExtra(DIRECTORY, RECYCLE_BIN)\r", "choices": [{"text": "//        putExtra(MediaActivity.EXTRA_SHOW_RECYCLE_BIN, true)\r\n        startActivity(this)\r\n    }\r\n}<file_sep>/app/src/main/java/com/simplemobiletools/gallery/pro/helpers/Constants.kt\npackage com.simplemobiletools.gallery.pro.helpers\n\nconst val RECYCLE_BIN = \"recycle_bin\"\nconst val DIRECTORY = \"directory\"\nconst val MEDIA_TYPE = \"media_type\"\nconst val MEDIA_TYPE_IMAGE = \"image\"\nconst val MEDIA_TYPE_VIDEO = \""}], "metadata": {"task_id": "Simple-Gallery/386", "ground_truth": "        startActivity(this)\r\n    }\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Activity.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.Medium\nfun ArrayList<Medium>.getDirMediaTypes(): Int {\r\n    var types = 0\r\n    if (any { it.isImage() }) {\r\n        types += TYPE_IMAGES\r\n    }\r\n\r\n    if (any { it.isVideo() }) {\r\n        types += TYPE_VIDEOS\r\n    }\r\n\r\n    if (any { it.isGIF() }) {\r\n        types += TYPE_GIFS\r\n    }\r\n\r\n    if (any { it.isRaw() }) {\r\n        types += TYPE_RAWS\r\n    }\r\n\r\n    if (any { it.isSVG() }) {\r\n        types += TYPE_SVGS\r\n    }\r\n\r\n    if (any { it.isPortrait() }) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/387", "ground_truth": "        types += TYPE_PORTRAITS\r\n    }\r\n\r\n    return types\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\ArrayList.kt"}}
{"prompt": "\n import java.io.File\nimport android.content.Context\nfun Context.getHumanizedFilename(path: String): String {\r", "choices": [{"text": "val file = File(path)\r\nval name = file.name\r\nval extension = name.substring(name.lastIndexOf(\".\") + 1)\r\nval filename = name.substring(0, name.lastIndexOf(\".\"))\r\nval humanized = filename.replace(\"_\", \" \")\r\nreturn humanized + \".\" + extension\r\n}\r\n"}], "metadata": {"task_id": "Simple-Gallery/388", "ground_truth": "    val humanized = humanizePath(path)\r\n    return humanized.substring(humanized.lastIndexOf(\"/\") + 1)\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Context.kt"}}
{"prompt": "\n import android.content.Context\nfun Context.getNoMediaFolders(callback: (folders: ArrayList<String>) -> Unit) {\r\n    ensureBackgroundThread {\r", "choices": [{"text": "//        val folders = ArrayList<String>()\r\n//        val mediaStore = MediaStore.Files.getContentUri(\"external\")\r\n//        val projection = arrayOf(MediaStore.Files.FileColumns.DATA)\r\n//        val selection = \"${MediaStore.Files.FileColumns.MEDIA_TYPE} =?\"\r\n//        val selectionArgs = arrayOf(MediaStore.Files.FileColumns.MEDIA_TYPE_FOLDER.toString())\r\n//        val cursor = contentResolver.query(mediaStore, projection, selection, selectionArgs, null)\r\n//        cursor?.use {"}], "metadata": {"task_id": "Simple-Gallery/389", "ground_truth": "        callback(getNoMediaFoldersSync())\r\n    }\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Context.kt"}}
{"prompt": "\n import android.content.Context\nfun Context.rescanFolderMedia(path: String) {\r\n    ensureBackgroundThread {\r", "choices": [{"text": "//        val mediaScannerConnection = MediaScannerConnection(this, object : MediaScannerConnection.MediaScannerConnectionClient {\r\n//            override fun onMediaScannerConnected() {\r\n//                Log.d(\"MediaScanner\", \"onMediaScannerConnected\")\r\n//            }\r\n//\r\n//            override fun onScanCompleted(path: String, uri: Uri) {\r\n//                Log.d(\"MediaScanner\", \"onScanCompleted\")\r\n//            }\r\n//        })\r\n//        mediaScannerConnection.scanFile(path, null)\r\n//        mediaScanner"}], "metadata": {"task_id": "Simple-Gallery/390", "ground_truth": "        rescanFolderMediaSync(path)\r\n    }\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Context.kt"}}
{"prompt": "\n import android.content.Context\nfun Context.storeDirectoryItems(items: ArrayList<Directory>) {\r\n    ensureBackgroundThread {\r", "choices": [{"text": "//        val directoryDao = DirectoryDao(this)\r\n//        directoryDao.insertAll(items)\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Simple-Gallery/391", "ground_truth": "        directoryDB.insertAll(items)\r\n    }\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Context.kt"}}
{"prompt": "\n import android.content.Context\nfun Context.checkAppendingHidden(path: String, hidden: String, includedFolders: MutableSet<String>, noMediaFolders: ArrayList<String>): String {\r\n    val dirName = getFolderNameFromPath(path)\r\n    val folderNoMediaStatuses = HashMap<String, Boolean>()\r\n    noMediaFolders.forEach { folder ->\r\n        folderNoMediaStatuses[\"$folder/$NOMEDIA\"] = true\r\n    }\r\n\r\n    return if (path.doesThisOrParentHaveNoMedia(folderNoMediaStatuses, null) && !path.isThisOrParentIncluded(includedFolders)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/392", "ground_truth": "        \"$dirName $hidden\"\r\n    } else {\r\n        dirName\r\n    }\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Context.kt"}}
{"prompt": "\n import java.io.File\nimport android.content.Context\nfun Context.addTempFolderIfNeeded(dirs: ArrayList<Directory>): ArrayList<Directory> {\r\n    val tempFolderPath = config.tempFolderPath\r\n    return if (tempFolderPath.isNotEmpty()) {\r\n        val directories = ArrayList<Directory>()\r\n        val newFolder = Directory(null, tempFolderPath, \"\", tempFolderPath.getFilenameFromPath(), 0, 0, 0, 0L, getPathLocation(tempFolderPath), 0, \"\")\r\n        directories.add(newFolder)\r\n        directories.addAll(dirs)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/395", "ground_truth": "        directories\r\n    } else {\r\n        dirs\r\n    }\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Context.kt"}}
{"prompt": "\n import android.content.Context\nfun Context.getPathLocation(path: String): Int {\r\n    return when {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/396", "ground_truth": "        isPathOnSD(path) -> LOCATION_SD\r\n        isPathOnOTG(path) -> LOCATION_OTG\r\n        else -> LOCATION_INTERNAL\r\n    }\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Context.kt"}}
{"prompt": "\n import java.io.File\nimport com.simplemobiletools.gallery.pro.R\nimport android.content.Context\nfun Context.removeInvalidDBDirectories(dirs: ArrayList<Directory>? = null) {\r\n    val dirsToCheck = dirs ?: directoryDB.getAll()\r\n    val OTGPath = config.OTGPath\r\n    dirsToCheck.filter { !it.areFavorites() && !it.isRecycleBin() && !getDoesFilePathExist(it.path, OTGPath) && it.path != config.tempFolderPath }.forEach {\r\n        try {\r", "choices": [{"text": "\n import java.io.File\nimport com.simplemobiletools.gallery.pro.R\nimport android.content.Context\nfun Context.removeInvalidDBDirectories(dirs: ArrayList<Directory>? = null) {\r\n    val dirsToCheck = dirs?: directoryDB.getAll()\r\n    val OTGPath = config.OTGPath\r\n    dirsToCheck.filter {!it.areFavorites() &&!it.isRecycleBin() &&!getDoesFilePathExist(it.path, OTGPath) && it.path!= config.tempFolderPath }.forEach {\r\n        try {\r\n//            if (it.path.contains(\"DCIM\")) {\r\n//                Log.d(\"removeInvalidDBDirectories\", \"DCIM\")\r\n//            }\r\n            if (it.path.contains(\"DCIM\")) {\r\n                Log.d(\"removeInvalidDBDirectories\", \"DCIM\")\r\n            }\r\n            if (it.path.contains(\"DCIM\")) {\r\n                Log.d(\"removeInvalidDBDirectories\", \"DCIM\")\r\n            }\r\n            if (it.path.contains(\"DCIM\")) {\r\n                Log.d(\"removeInvalidDBDirectories\", \"DCIM\")\r\n            }\r\n            if (it"}], "metadata": {"task_id": "Simple-Gallery/397", "ground_truth": "            directoryDB.deleteDirPath(it.path)\r\n        } catch (ignored: Exception) {\r\n        }\r\n    }\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Context.kt"}}
{"prompt": "\n import android.content.Context\nfun Context.updateDBDirectory(directory: Directory) {\r\n    try {\r\n        directoryDB.updateDirectory(\r\n            directory.path,\r\n            directory.tmb,\r\n            directory.mediaCnt,\r\n            directory.modified,\r\n            directory.taken,\r\n            directory.size,\r\n            directory.types,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/399", "ground_truth": "            directory.sortValue\r\n        )\r\n    } catch (ignored: Exception) {\r\n    }\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Context.kt"}}
{"prompt": "\n import android.content.Context\nfun Context.getFavoritePaths(): ArrayList<String> {\r\n    return try {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/400", "ground_truth": "        favoritesDB.getValidFavoritePaths() as ArrayList<String>\r\n    } catch (e: Exception) {\r\n        ArrayList()\r\n    }\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Context.kt"}}
{"prompt": "\n import android.content.Context\nfun Context.updateFavorite(path: String, isFavorite: Boolean) {\r\n    try {\r\n        if (isFavorite) {\r\n            favoritesDB.insert(getFavoriteFromPath(path))\r\n        } else {\r\n            favoritesDB.deleteFavoritePath(path)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/401", "ground_truth": "        }\r\n    } catch (e: Exception) {\r\n        toast(com.simplemobiletools.commons.R.string.unknown_error_occurred)\r\n    }\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Context.kt"}}
{"prompt": "\n import android.content.Context\nfun Context.deleteMediumWithPath(path: String) {\r\n    try {\r\n        mediaDB.deleteMediumPath(path)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/403", "ground_truth": "    } catch (ignored: Exception) {\r\n    }\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Context.kt"}}
{"prompt": "\n import android.content.Intent\nimport android.content.Context\nimport android.content.ComponentName\nimport android.appwidget.AppWidgetManager\nfun Context.updateWidgets() {\r\n    val widgetIDs = AppWidgetManager.getInstance(applicationContext)?.getAppWidgetIds(ComponentName(applicationContext, MyWidgetProvider::class.java))\r\n        ?: return\r\n    if (widgetIDs.isNotEmpty()) {\r\n        Intent(applicationContext, MyWidgetProvider::class.java).apply {\r\n            action = AppWidgetManager.ACTION_APPWIDGET_UPDATE\r", "choices": [{"text": "\n import android.content.Intent\nimport android.content.Context\nimport android.content.ComponentName\nimport android.appwidget.AppWidgetManager\nfun Context.updateWidgets() {\r\n    val widgetIDs = AppWidgetManager.getInstance(applicationContext)?.getAppWidgetIds(ComponentName(applicationContext, MyWidgetProvider::class.java))\r\n       ?: return\r\n    if (widgetIDs.isNotEmpty()) {\r\n        Intent(applicationContext, MyWidgetProvider::class.java).apply {\r\n            action = AppWidgetManager.ACTION_APPWIDGET_UPDATE\r\n//            putExtra(AppWidgetManager.EXTRA_APPWIDGET_IDS, widgetIDs)\r\n            sendBroadcast(this)\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "Simple-Gallery/404", "ground_truth": "            putExtra(AppWidgetManager.EXTRA_APPWIDGET_IDS, widgetIDs)\r\n            sendBroadcast(this)\r\n        }\r\n    }\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Context.kt"}}
{"prompt": "\n import androidx.exifinterface.media.ExifInterface\nfun ExifInterface.copyNonDimensionAttributesTo(destination: ExifInterface) {\r\n    val attributes = ExifInterfaceAttributes.AllNonDimensionAttributes\r\n\r\n    attributes.forEach {\r\n        val value = getAttribute(it)\r\n        if (value != null) {\r\n            destination.setAttribute(it, value)\r\n        }\r\n    }\r\n\r", "choices": [{"text": "\n import androidx.exifinterface.media.ExifInterface\nfun ExifInterface.copyNonDimensionAttributesTo(destination: ExifInterface) {\r\n    val attributes = ExifInterfaceAttributes.AllNonDimensionAttributes\r\n\r\n    attributes.forEach {\r\n        val value = getAttribute(it)\r\n        if (value!= null) {\r\n            destination.setAttribute(it, value)\r\n        }\r\n    }\r\n\r\n}\n"}], "metadata": {"task_id": "Simple-Gallery/405", "ground_truth": "    try {\r\n        destination.saveAttributes()\r\n    } catch (ignored: Exception) {\r\n    }\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\ExifInterface.kt"}}
{"prompt": "\n import java.lang.reflect.Field\nprivate fun isExif(field: Field): Boolean {\r\n            return field.type == String::class.java &&\r", "choices": [{"text": "field.name.startsWith(\"TAG_\") &&\r\nfield.name.endsWith(\"_\")\r\n}\n"}], "metadata": {"task_id": "Simple-Gallery/406", "ground_truth": "                isPublicStaticFinal(field.modifiers) &&\r\n                field.name.startsWith(\"TAG_\")\r\n        }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\ExifInterface.kt"}}
{"prompt": "\n import android.content.res.Resources\nfun Resources.getStatusBarHeight(): Int {\r\n    val id = getIdentifier(\"status_bar_height\", \"dimen\", \"android\")\r", "choices": [{"text": "return if (id > 0) getDimensionPixelSize(id) else 0\r\n}\n"}], "metadata": {"task_id": "Simple-Gallery/408", "ground_truth": "    return if (id > 0) {\r\n        getDimensionPixelSize(id)\r\n    } else\r\n        0\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Resources.kt"}}
{"prompt": "\n import android.content.res.Resources\nfun Resources.getNavBarHeight(): Int {\r\n    val id = getIdentifier(\"navigation_bar_height\", \"dimen\", \"android\")\r", "choices": [{"text": "return if (id > 0) {\r\n    getDimensionPixelSize(id)\r\n} else 0\r\n}\n"}], "metadata": {"task_id": "Simple-Gallery/409", "ground_truth": "    return if (id > 0) {\r\n        getDimensionPixelSize(id)\r\n    } else\r\n        0\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\Resources.kt"}}
{"prompt": "\n fun String.getDistinctPath(): String {\r\n    return try {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/410", "ground_truth": "        File(this).canonicalPath.toLowerCase()\r\n    } catch (e: IOException) {\r\n        toLowerCase()\r\n    }\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\String.kt"}}
{"prompt": "\n import java.io.File\nfun String.isThisOrParentFolderHidden(): Boolean {\r\n    var curFile = File(this)\r\n    while (true) {\r\n        if (curFile.isHidden) {\r\n            return true\r\n        }\r\n\r\n        curFile = curFile.parentFile ?: break\r\n        if (curFile.absolutePath == \"/\") {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/411", "ground_truth": "            break\r\n        }\r\n    }\r\n    return false\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\extensions\\String.kt"}}
{"prompt": "\nval ZOOMABLE_VIEW_LOAD_DELAY\nval WEIRD_DEVICES\nvar mIsFragmentVisible\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nmIsFragmentVisible = false\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nmIsFragmentVisible = true\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nmIsFragmentVisible = false\r\n}\r\noverride fun onDetach() {\r\nsuper.onDetach()\r\nmIsFragmentVisible = false\r\n}\r\noverride fun onSaveInstanceState(outState: Bundle) {\r\nsuper.onSaveInstanceState(outState)\r\noutState.putBoolean("}], "metadata": {"task_id": "Simple-Gallery/413", "ground_truth": "        super.onPause()\r\n        storeStateVariables()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\PhotoFragment.kt"}}
{"prompt": "\n private fun checkScreenDimensions() {\r\n        if (mScreenWidth == 0 || mScreenHeight == 0) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/416", "ground_truth": "            measureScreen()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\PhotoFragment.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nimport android.util.DisplayMetrics\nprivate fun measureScreen() {\r\n        val metrics = DisplayMetrics()\r\n        activity?.windowManager?.defaultDisplay?.getRealMetrics(metrics)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Simple-Gallery/417", "ground_truth": "        mScreenWidth = metrics.widthPixels\r\n        mScreenHeight = metrics.heightPixels\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\PhotoFragment.kt"}}
{"prompt": "\n private fun photoFragmentVisibilityChanged(isVisible: Boolean) {\r\n        if (isVisible) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/418", "ground_truth": "            scheduleZoomableView()\r\n        } else {\r\n            hideZoomableView()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\PhotoFragment.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nprivate fun degreesForRotation(orientation: Int) = when (orientation) {\r\n        ORIENTATION_ROTATE_270, ORIENTATION_TRANSPOSE -> 270\r\n        ORIENTATION_ROTATE_180 -> 180\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/419", "ground_truth": "        ORIENTATION_ROTATE_90, ORIENTATION_TRANSVERSE -> 90\r\n        else -> 0\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\PhotoFragment.kt"}}
{"prompt": "\n import java.io.File\nimport com.simplemobiletools.gallery.pro.models.Medium\nimport com.github.penfeizhou.animation.apng.APNGDrawable\nimport android.graphics.drawable.Drawable\nprivate fun loadAPNG() {\r\n        if (context != null) {\r\n            val drawable = APNGDrawable.fromFile(mMedium.path)\r", "choices": [{"text": "\n import java.io.File\nimport com.simplemobiletools.gallery.pro.models.Medium\nimport com.github.penfeizhou.animation.apng.APNGDrawable\nimport android.graphics.drawable.Drawable\nprivate fun loadAPNG() {\r\n        if (context!= null) {\r\n            val drawable = APNGDrawable.fromFile(mMedium.path)\r\n//            val drawable = APNGDrawable.fromFile(File(mMedium.path))\r\n            val imageView = findViewById<ImageView>(R.id.image)\r\n            imageView.setImageDrawable(drawable)\r\n            imageView.setOnClickListener {\r\n                if (drawable.isRunning) {\r\n                    drawable.stop()\r\n                } else {\r\n                    drawable.start()\r\n                }\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/422", "ground_truth": "            binding.gesturesView.setImageDrawable(drawable)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\PhotoFragment.kt"}}
{"prompt": "\n import java.io.File\nimport com.github.penfeizhou.animation.webp.WebPDrawable\nimport com.bumptech.glide.Glide\nimport android.view.View\nimport android.graphics.drawable.Drawable\nimport android.graphics.Bitmap\nprivate fun loadBitmap(addZoomableView: Boolean = true) {\r\n        if (context == null) {\r\n            return\r\n        }\r\n\r\n        val path = getFilePathToShow()\r\n        if (path.isWebP()) {\r\n            val drawable = WebPDrawable.fromFile(path)\r\n            if (drawable.intrinsicWidth == 0) {\r\n                loadWithGlide(path, addZoomableView)\r\n            } else {\r\n                binding.gesturesView.setImageDrawable(drawable)\r", "choices": [{"text": "//                binding.gesturesView.setImageBitmap(drawable.bitmap)\r\n            }\r\n        } else {\r\n            loadWithGlide(path, addZoomableView)\r\n        }\r\n    }\r\n\r\n    private fun loadWithGlide(path: String, addZoomableView: Boolean) {\r\n        Glide.with(context!!)\r\n           .asBitmap()\r\n           .load(path)\r\n           .into(object : CustomTarget<Bitmap>() {\r\n                override fun onResourceReady(\r\n                    resource: Bitmap,\r\n                    transition: Transition<in Bitmap>?\r\n                ) {\r\n                    binding.gesturesView.setImageBitmap(resource)\r\n                    if (add"}], "metadata": {"task_id": "Simple-Gallery/423", "ground_truth": "            }\r\n        } else {\r\n            loadWithGlide(path, addZoomableView)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\PhotoFragment.kt"}}
{"prompt": "\n import java.io.File\nprivate fun fillPhotoPaths(files: ArrayList<File>, fakeItemsCnt: Int): ArrayList<String> {\r\n        val paths = ArrayList<String>()\r\n        for (i in 0 until fakeItemsCnt) {\r\n            paths.add(\"\")\r\n        }\r\n\r\n        files.forEach {\r\n            paths.add(it.absolutePath)\r\n        }\r\n\r", "choices": [{"text": "return paths\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/424", "ground_truth": "        for (i in 0 until fakeItemsCnt) {\r\n            paths.add(\"\")\r\n        }\r\n        return paths\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\PhotoFragment.kt"}}
{"prompt": "\n private fun getCoverImageIndex(paths: ArrayList<String>): Int {\r\n        var coverIndex = -1\r\n        paths.forEachIndexed { index, path ->\r\n            if (path.contains(\"cover\", true)) {\r\n                coverIndex = index\r\n            }\r\n        }\r\n\r\n        if (coverIndex == -1) {\r\n            paths.forEachIndexed { index, path ->\r\n                if (path.isNotEmpty()) {\r\n                    coverIndex = index\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/426", "ground_truth": "                }\r\n            }\r\n        }\r\n        return coverIndex\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\PhotoFragment.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.Medium\nimport com.simplemobiletools.gallery.pro.activities.PhotoActivity\nimport com.simplemobiletools.gallery.pro.activities.PanoramaPhotoActivity\nimport android.content.Intent\nprivate fun openPanorama() {\r\n        Intent(context, PanoramaPhotoActivity::class.java).apply {\r\n            putExtra(PATH, mMedium.path)\r", "choices": [{"text": "//            putExtra(IS_PANORAMA, true)\r\n            startActivity(this)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/427", "ground_truth": "            startActivity(this)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\PhotoFragment.kt"}}
{"prompt": "\n import android.content.res.Configuration\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n        if (activity?.isChangingConfigurations == false) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/435", "ground_truth": "            cleanup()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\VideoFragment.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r", "choices": [{"text": "super.onSaveInstanceState(outState)\r\noutState.putInt(\"key\", 1)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\nsuper.onRestoreInstanceState(savedInstanceState)\r\nval value = savedInstanceState.getInt(\"key\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Simple-Gallery/438", "ground_truth": "        super.onSaveInstanceState(outState)\r\n        outState.putInt(PROGRESS, mCurrTime)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\VideoFragment.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.Medium\nprivate fun restoreLastVideoSavedPosition() {\r\n        val pos = mConfig.getLastVideoPosition(mMedium.path)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Simple-Gallery/441", "ground_truth": "        if (pos > 0) {\r\n            mPositionAtPause = pos * 1000L\r\n            setPosition(pos)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\VideoFragment.kt"}}
{"prompt": "\n import android.widget.SeekBar\nprivate fun setupTimeHolder() {\r\n        mSeekBar.max = mDuration\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Simple-Gallery/442", "ground_truth": "        binding.bottomVideoTimeHolder.videoDuration.text = mDuration.getFormattedDuration()\r\n        setupTimer()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\VideoFragment.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nimport androidx.media3.exoplayer.ExoPlayer\nimport android.widget.SeekBar\nprivate fun setupTimer() {\r\n        activity?.runOnUiThread(object : Runnable {\r\n            override fun run() {\r\n                if (mExoPlayer != null && !mIsDragged && mIsPlaying) {\r\n                    mCurrTime = (mExoPlayer!!.currentPosition / 1000).toInt()\r\n                    mSeekBar.progress = mCurrTime\r\n                    mCurrTimeView.text = mCurrTime.getFormattedDuration()\r\n                }\r", "choices": [{"text": "\n import com.simplemobiletools.gallery.pro.R\nimport androidx.media3.exoplayer.ExoPlayer\nimport android.widget.SeekBar\nprivate fun setupTimer() {\r\n        activity?.runOnUiThread(object : Runnable {\r\n            override fun run() {\r\n                if (mExoPlayer!= null &&!mIsDragged && mIsPlaying) {\r\n                    mCurrTime = (mExoPlayer!!.currentPosition / 1000).toInt()\r\n                    mSeekBar.progress = mCurrTime\r\n                    mCurrTimeView.text = mCurrTime.getFormattedDuration()\r\n                }\r\n//                mHandler.postDelayed(this, 1000)\r\n            }\r\n        })\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/443", "ground_truth": "\r\n                mTimerHandler.postDelayed(this, 1000)\r\n            }\r\n        })\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\VideoFragment.kt"}}
{"prompt": "\n import java.io.FileInputStream\nimport java.io.File\nimport com.simplemobiletools.gallery.pro.models.Medium\nimport com.simplemobiletools.gallery.pro.extensions.parseFileChannel\nprivate fun checkIfPanorama() {\r\n        try {\r\n            val fis = FileInputStream(File(mMedium.path))\r\n            fis.use {\r\n                requireContext().parseFileChannel(mMedium.path, it.channel, 0, 0, 0) {\r\n                    mIsPanorama = true\r\n                }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/445", "ground_truth": "            }\r\n        } catch (ignored: Exception) {\r\n        } catch (ignored: OutOfMemoryError) {\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\VideoFragment.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.Medium\nimport com.simplemobiletools.gallery.pro.activities.VideoActivity\nimport com.simplemobiletools.gallery.pro.activities.PanoramaVideoActivity\nimport android.content.Intent\nprivate fun openPanorama() {\r\n        Intent(context, PanoramaVideoActivity::class.java).apply {\r\n            putExtra(PATH, mMedium.path)\r", "choices": [{"text": "//            putExtra(VIDEO_PATH, mMedium.path)\r\n            putExtra(VIDEO_PATH, mMedium.path)\r\n            putExtra(VIDEO_PATH, mMedium.path)\r\n            putExtra(VIDEO_PATH, mMedium.path)\r\n            putExtra(VIDEO_PATH, mMedium.path)\r\n            putExtra(VIDEO_PATH, mMedium.path)\r\n            putExtra(VIDEO_PATH, mMedium.path)\r\n            putExtra(VIDEO_PATH, mMedium.path)\r\n            putExtra(VIDEO_PATH, mMedium.path)\r\n            putExtra(VIDEO_PATH, m"}], "metadata": {"task_id": "Simple-Gallery/446", "ground_truth": "            startActivity(this)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\VideoFragment.kt"}}
{"prompt": " import androidx.media3.exoplayer.ExoPlayer\nvar mWasFragmentInit\nvar mWasVideoStarted\nvar mIsDragged\nprivate fun skip(forward: Boolean) {\r\n        if (mIsPanorama) {\r\n            return\r\n        } else if (mExoPlayer == null) {\r\n            playVideo()\r\n            return\r", "choices": [{"text": "}\r\n        val currentPosition = mExoPlayer!!.currentPosition\r\n        val duration = mExoPlayer!!.duration\r\n        if (duration == C.TIME_UNSET) {\r\n            return\r\n        }\r\n        val seekPosition = if (forward) {\r\n            currentPosition + 10000\r\n        } else {\r\n            currentPosition - 10000\r\n        }\r\n        if (seekPosition < 0) {\r\n            return\r\n        }\r\n        if (seekPosition > duration) {\r\n            return\r\n        }\r\n        mExoPlayer!!.seekTo(seekPosition)\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/447", "ground_truth": "        }\r\n\r\n        mPositionAtPause = 0L\r\n        doSkip(forward)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\VideoFragment.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nimport androidx.media3.exoplayer.ExoPlayer\nprivate fun doSkip(forward: Boolean) {\r\n        if (mExoPlayer == null) {\r\n            return\r\n        }\r\n\r\n        val curr = mExoPlayer!!.currentPosition\r\n        val newProgress = if (forward) curr + FAST_FORWARD_VIDEO_MS else curr - FAST_FORWARD_VIDEO_MS\r\n        val roundProgress = Math.round(newProgress / 1000f)\r\n        val limitedProgress = Math.max(Math.min(mExoPlayer!!.duration.toInt() / 1000, roundProgress), 0)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/448", "ground_truth": "        setPosition(limitedProgress)\r\n        if (!mIsPlaying) {\r\n            togglePlayPause()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\VideoFragment.kt"}}
{"prompt": "\n import androidx.media3.exoplayer.ExoPlayer\nimport android.widget.SeekBar\noverride fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {\r\n        if (fromUser) {\r\n            if (mExoPlayer != null) {\r\n                if (!mWasPlayerInited) {\r\n                    mPositionWhenInit = progress\r\n                }\r\n                setPosition(progress)\r\n            }\r\n\r\n            if (mExoPlayer == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/449", "ground_truth": "                mPositionAtPause = progress * 1000L\r\n                playVideo()\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\VideoFragment.kt"}}
{"prompt": "\n import androidx.media3.exoplayer.ExoPlayer\nimport android.widget.SeekBar\noverride fun onStartTrackingTouch(seekBar: SeekBar) {\r\n        if (mExoPlayer == null) {\r\n            return\r", "choices": [{"text": "\n        }\r\n        mExoPlayer!!.pause()\r\r\n        mSeekBar.isEnabled = false\r\r\n        mSeekBar.progress = 0\r\r\n        mSeekBar.secondaryProgress = 0\r\r\n        mSeekBar.max = 0\r\r\n        mSeekBar.progress = 0\r\r\n        mSeekBar.secondaryProgress = 0\r\r\n        mSeekBar.max = 0\r\r\n        mSeekBar.isEnabled = true\r\r\n        mSeekBar.progress = 0\r\r\n        mSeekBar.secondaryProgress = 0\r\r\n        mSeekBar.max = 0\r\r\n        mSeekBar.progress ="}], "metadata": {"task_id": "Simple-Gallery/450", "ground_truth": "        }\r\n\r\n        mExoPlayer!!.playWhenReady = false\r\n        mIsDragged = true\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\VideoFragment.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nimport androidx.media3.exoplayer.ExoPlayer\nimport android.widget.SeekBar\noverride fun onStopTrackingTouch(seekBar: SeekBar) {\r\n        if (mIsPanorama) {\r\n            openPanorama()\r\n            return\r\n        }\r\n\r\n        if (mExoPlayer == null) {\r\n            return\r\n        }\r\n\r\n        if (mIsPlaying) {\r\n            mExoPlayer!!.playWhenReady = true\r\n        } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/451", "ground_truth": "            playVideo()\r\n        }\r\n\r\n        mIsDragged = false\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\VideoFragment.kt"}}
{"prompt": "\n private fun togglePlayPause() {\r\n        if (activity == null || !isAdded) {\r\n            return\r\n        }\r\n\r\n        if (mIsPlaying) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/452", "ground_truth": "            pauseVideo()\r\n        } else {\r\n            playVideo()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\VideoFragment.kt"}}
{"prompt": "\n import androidx.media3.exoplayer.ExoPlayer\nprivate fun videoEnded(): Boolean {\r\n        val currentPos = mExoPlayer?.currentPosition ?: 0\r", "choices": [{"text": "\n import androidx.media3.exoplayer.ExoPlayer\nprivate fun videoEnded(): Boolean {\r\n        val currentPos = mExoPlayer?.currentPosition?: 0\r\n//        val duration = mExoPlayer?.duration?: 0\r\n        return currentPos >= duration\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/454", "ground_truth": "        val duration = mExoPlayer?.duration ?: 0\r\n        return currentPos != 0L && currentPos >= duration\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\VideoFragment.kt"}}
{"prompt": "\n import androidx.media3.exoplayer.ExoPlayer\nimport android.widget.SeekBar\nprivate fun setPosition(seconds: Int) {\r\n        mExoPlayer?.seekTo(seconds * 1000L)\r\n        mSeekBar.progress = seconds\r\n        mCurrTimeView.text = seconds.getFormattedDuration()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Simple-Gallery/455", "ground_truth": "\r\n        if (!mIsPlaying) {\r\n            mPositionAtPause = mExoPlayer?.currentPosition ?: 0L\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\VideoFragment.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.Medium\nimport com.simplemobiletools.gallery.pro.helpers\nimport com.simplemobiletools.commons.helpers.ensureBackgroundThread\nprivate fun setupVideoDuration() {\r\n        ensureBackgroundThread {\r\n            mDuration = context?.getDuration(mMedium.path) ?: 0\r\n\r\n            activity?.runOnUiThread {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/456", "ground_truth": "                setupTimeHolder()\r\n                setPosition(0)\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\VideoFragment.kt"}}
{"prompt": " import androidx.media3.exoplayer.ExoPlayer\nvar mExoPlayer ExoPlayer?\nvar mVideoSize\nvar mIsFragmentVisible\nprivate fun releaseExoPlayer() {\r\n        mIsPlayerPrepared = false\r\n        mExoPlayer?.apply {\r", "choices": [{"text": "//            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)\r\n            removeListener(mExoPlayerEventListener)"}], "metadata": {"task_id": "Simple-Gallery/459", "ground_truth": "            stop()\r\n            release()\r\n        }\r\n        mExoPlayer = null\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\VideoFragment.kt"}}
{"prompt": "\n import androidx.exifinterface.media.ExifInterface\nprivate fun getLatLonAltitude(path: String): String {\r\n        var result = \"\"\r\n        val exif = try {\r\n            ExifInterface(path)\r\n        } catch (e: Exception) {\r\n            return \"\"\r\n        }\r\n\r\n        val latLon = FloatArray(2)\r\n\r\n        if (exif.getLatLong(latLon)) {\r\n            result = \"${latLon[0]},  ${latLon[1]}\"\r\n        }\r\n\r\n        val altitude = exif.getAltitude(0.0)\r\n        if (altitude != 0.0) {\r", "choices": [{"text": "\n import androidx.exifinterface.media.ExifInterface\nprivate fun getLatLonAltitude(path: String): String {\r\n        var result = \"\"\r\n        val exif = try {\r\n            ExifInterface(path)\r\n        } catch (e: Exception) {\r\n            return \"\"\r\n        }\r\n\r\n        val latLon = FloatArray(2)\r\n\r\n        if (exif.getLatLong(latLon)) {\r\n            result = \"${latLon[0]},  ${latLon[1]}\"\r\n        }\r\n\r\n        val altitude = exif.getAltitude(0.0)\r\n        if (altitude!= 0.0) {\r\n//            result += \"  ${altitude}m\"\r\n        }\r\n\r\n        return result\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/460", "ground_truth": "            result += \",  ${altitude}m\"\r\n        }\r\n\r\n        return result.trimStart(',').trim()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\fragments\\ViewPagerFragment.kt"}}
{"prompt": "\n fun removePinnedFolders(paths: Set<String>) {\r\n        val currPinnedFolders = HashSet<String>(pinnedFolders)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/465", "ground_truth": "        currPinnedFolders.removeAll(paths)\r\n        pinnedFolders = currPinnedFolders\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\helpers\\Config.kt"}}
{"prompt": "\nvar isExcludedPasswordProtectionOn Boolean\nvar wasHideFolderTooltipShown Boolean\nvar tempFolderPath String\n fun removeExcludedFolder(path: String) {\r\n        val currExcludedFolders = HashSet<String>(excludedFolders)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/467", "ground_truth": "        currExcludedFolders.remove(path)\r\n        excludedFolders = currExcludedFolders\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\helpers\\Config.kt"}}
{"prompt": "\nvar showFolderMediaCount Int\nvar limitFolderTitle Boolean\nvar directorySorting Int\n fun addIncludedFolder(path: String) {\r\n        val currIncludedFolders = HashSet<String>(includedFolders)\r", "choices": [{"text": "includeFolder(path, currIncludedFolders)\r\nincludedFolders = currIncludedFolders\r\n}\n"}], "metadata": {"task_id": "Simple-Gallery/468", "ground_truth": "        currIncludedFolders.add(path)\r\n        includedFolders = currIncludedFolders\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\helpers\\Config.kt"}}
{"prompt": "\nvar wasHideFolderTooltipShown Boolean\nvar shouldShowHidden\nvar directorySorting Int\n fun removeIncludedFolder(path: String) {\r\n        val currIncludedFolders = HashSet<String>(includedFolders)\r", "choices": [{"text": "includeFolder(path)\r\n        val newIncludedFolders = HashSet<String>(includedFolders)\r\n        newIncludedFolders.removeAll(currIncludedFolders)\r\n        includedFolders = newIncludedFolders\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/470", "ground_truth": "        currIncludedFolders.remove(path)\r\n        includedFolders = currIncludedFolders\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\helpers\\Config.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nimport android.content.res.Configuration\nprivate fun getDirectoryColumnsField(): String {\r\n        val isPortrait = context.resources.configuration.orientation == Configuration.ORIENTATION_PORTRAIT\r\n        return if (isPortrait) {\r\n            if (scrollHorizontally) {\r\n                DIR_HORIZONTAL_COLUMN_CNT\r\n            } else {\r\n                DIR_COLUMN_CNT\r\n            }\r\n        } else {\r\n            if (scrollHorizontally) {\r\n                DIR_LANDSCAPE_HORIZONTAL_COLUMN_CNT\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/471", "ground_truth": "            } else {\r\n                DIR_LANDSCAPE_COLUMN_CNT\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\helpers\\Config.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nimport android.content.res.Configuration\nprivate fun getMediaColumnsField(): String {\r\n        val isPortrait = context.resources.configuration.orientation == Configuration.ORIENTATION_PORTRAIT\r\n        return if (isPortrait) {\r\n            if (scrollHorizontally) {\r\n                MEDIA_HORIZONTAL_COLUMN_CNT\r\n            } else {\r\n                MEDIA_COLUMN_CNT\r\n            }\r\n        } else {\r\n            if (scrollHorizontally) {\r\n                MEDIA_LANDSCAPE_HORIZONTAL_COLUMN_CNT\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/473", "ground_truth": "            } else {\r\n                MEDIA_LANDSCAPE_COLUMN_CNT\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\helpers\\Config.kt"}}
{"prompt": "\nvar rememberLastVideoPosition Boolean\nvar showThumbnailVideoDuration Boolean\nvar showRecycleBinLast Boolean\n fun saveLastVideoPosition(path: String, value: Int) {\r\n        if (path.isNotEmpty()) {\r", "choices": [{"text": "//            val prefs = PreferenceManager.getDefaultSharedPreferences(context)\r\n//            val editor = prefs.edit()\r\n//            editor.putInt(path, value)\r\n//            editor.apply()\r\n        }\r\n    }\r\n\r\n    fun getLastVideoPosition(path: String): Int {\r\n        if (path.isNotEmpty()) {\r\n//            val prefs = PreferenceManager.getDefaultSharedPreferences(context)\r\n//            return prefs.getInt(path, 0)\r\n        }\r\n        return 0\r\n    }\r\n\r\n    fun saveLastVideoDuration(path: String, value: Int) {\r\n        if (path."}], "metadata": {"task_id": "Simple-Gallery/476", "ground_truth": "            prefs.edit().putInt(\"$LAST_VIDEO_POSITION_PREFIX${path.toLowerCase()}\", value).apply()\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\helpers\\Config.kt"}}
{"prompt": "\n fun getPermissionsToRequest(): Collection<Int> {\r\n    val permissions = mutableListOf(getPermissionToRequest())\r\n    if (isRPlus()) {\r\n        permissions.add(PERMISSION_MEDIA_LOCATION)\r\n    }\r\n\r\n    if (isTiramisuPlus()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/477", "ground_truth": "        permissions.add(PERMISSION_READ_MEDIA_VIDEO)\r\n    }\r\n\r\n    return permissions\r\n}", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\helpers\\Constants.kt"}}
{"prompt": "\n import android.view.View\noverride fun transformPage(view: View, position: Float) {\r\n        view.translationX = view.width * -position\r\n\r\n        view.alpha = if (position <= -1f || position >= 1f) {\r\n            0f\r\n        } else if (position == 0f) {\r", "choices": [{"text": "//            view.alpha = 1f\r\n            0f\r\n        } else {\r\n            1f\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/478", "ground_truth": "            1f\r\n        } else {\r\n            1f - Math.abs(position)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\helpers\\FadePageTransformer.kt"}}
{"prompt": "\n fun clearThumbs() {\r", "choices": [{"text": "//     thumbs.clear()\r\n//     thumbs.forEach { it.clear() }\r\n//     thumbs.clear()\r\n//     thumbs.forEach { it.clear() }\r\n//     thumbs.clear()\r\n//     thumbs.forEach { it.clear() }\r\n//     thumbs.clear()\r\n//     thumbs.forEach { it.clear() }\r\n//     thumbs.clear()\r\n//     thumbs.forEach { it.clear() }\r\n//     thumbs.clear()\r\n//     thumb"}], "metadata": {"task_id": "Simple-Gallery/480", "ground_truth": "        filterThumbnails = ArrayList()\r\n        processedThumbnails = ArrayList()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\helpers\\FilterThumbnailsManager.kt"}}
{"prompt": "\n import java.nio.ByteBuffer\nfun readUInt32(bb: ByteBuffer): Long {\r\n        var i = bb.int.toLong()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/481", "ground_truth": "        if (i < 0) {\r\n            i += 1L shl 32\r\n        }\r\n        return i\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\helpers\\IsoTypeReader.kt"}}
{"prompt": "\n import java.io.File\nimport android.provider.MediaStore.Files\nprivate fun addFolder(curFolders: HashSet<String>, folder: String) {\r\n        curFolders.add(folder)\r\n        val files = File(folder).listFiles() ?: return\r\n        for (file in files) {\r", "choices": [{"text": "\n import java.io.File\nimport android.provider.MediaStore.Files\nprivate fun addFolder(curFolders: HashSet<String>, folder: String) {\r\n        curFolders.add(folder)\r\n        val files = File(folder).listFiles()?: return\r\n        for (file in files) {\r\n//            if (file.isDirectory) {\r\n//                addFolder(curFolders, file.absolutePath)\r\n//            } else {\r\n                curFolders.add(file.absolutePath)\r\n//            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/483", "ground_truth": "            if (file.isDirectory) {\r\n                addFolder(curFolders, file.absolutePath)\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\helpers\\MediaFetcher.kt"}}
{"prompt": "\n import java.util.Locale\nimport java.util.Calendar\nprivate fun formatDate(timestamp: String, showDay: Boolean): String {\r\n        return if (timestamp.areDigitsOnly()) {\r\n            val cal = Calendar.getInstance(Locale.ENGLISH)\r\n            cal.timeInMillis = timestamp.toLong()\r\n            val format = if (showDay) context.config.dateFormat else \"MMMM yyyy\"\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/485", "ground_truth": "            DateFormat.format(format, cal).toString()\r\n        } else {\r\n            \"\"\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\helpers\\MediaFetcher.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.models.Widget\nimport com.simplemobiletools.commons.helpers.ensureBackgroundThread\nimport android.content.Context\noverride fun onDeleted(context: Context, appWidgetIds: IntArray) {\r\n        super.onDeleted(context, appWidgetIds)\r\n        ensureBackgroundThread {\r", "choices": [{"text": "//            val widget = Widget(context, appWidgetIds[0])\r\n//            widget.delete()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/490", "ground_truth": "            appWidgetIds.forEach {\r\n                context.widgetsDB.deleteWidgetId(it)\r\n            }\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\helpers\\MyWidgetProvider.kt"}}
{"prompt": "\n import android.content.Context\nimport android.app.job.JobScheduler\nfun isScheduled(context: Context): Boolean {\r\n        val jobScheduler = context.getSystemService(JobScheduler::class.java)\r", "choices": [{"text": "return jobScheduler.allPendingJobs.isNotEmpty()\r\n}\n"}], "metadata": {"task_id": "Simple-Gallery/493", "ground_truth": "        val jobs = jobScheduler.allPendingJobs\r\n        return jobs.any { it.id == PHOTO_VIDEO_CONTENT_JOB }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\jobs\\NewPhotoFetcher.kt"}}
{"prompt": "\n import android.app.job.JobParameters\noverride fun onStopJob(params: JobParameters): Boolean {\r", "choices": [{"text": "// do something\r\nreturn true\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Simple-Gallery/494", "ground_truth": "        mHandler.removeCallbacks(mWorker)\r\n        return false\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\jobs\\NewPhotoFetcher.kt"}}
{"prompt": "\n import java.util.Locale\nimport java.util.Calendar\nprivate fun getDayStartTS(ts: Long, resetDays: Boolean): String {\r\n        val calendar = Calendar.getInstance(Locale.ENGLISH).apply {\r\n            timeInMillis = ts\r\n            set(Calendar.HOUR_OF_DAY, 0)\r\n            set(Calendar.MINUTE, 0)\r\n            set(Calendar.SECOND, 0)\r\n            set(Calendar.MILLISECOND, 0)\r\n\r\n            if (resetDays) {\r\n                set(Calendar.DAY_OF_MONTH, 1)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/497", "ground_truth": "            }\r\n        }\r\n\r\n        return calendar.timeInMillis.toString()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\models\\Medium.kt"}}
{"prompt": "\n fun getSignature(): String {\r\n        val lastModified = if (modified > 1) {\r\n            modified\r\n        } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/498", "ground_truth": "            File(path).lastModified()\r\n        }\r\n\r\n        return \"$path-$lastModified-$size\"\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\models\\Medium.kt"}}
{"prompt": "\n import android.content.Intent\nimport android.content.Context\noverride fun onReceive(context: Context, intent: Intent) {\r", "choices": [{"text": "val action = intent.action\r\nif (action == \"android.intent.action.BOOT_COMPLETED\") {\r\nval intent = Intent(context, MainActivity::class.java)\r\nintent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\ncontext.startActivity(intent)\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Simple-Gallery/500", "ground_truth": "        val path = intent.getStringExtra(REFRESH_PATH) ?: return\r\n        context.addPathToDB(path)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\receivers\\RefreshMediaReceiver.kt"}}
{"prompt": "\n import com.caverock.androidsvg.SVG\nimport com.bumptech.glide.load.engine.Resource\nimport com.bumptech.glide.load.Options\nimport android.graphics.drawable.PictureDrawable\noverride fun transcode(toTranscode: Resource<SVG>, options: Options): Resource<PictureDrawable>? {\r\n        val svg = toTranscode.get()\r\n        val picture = svg.renderToPicture()\r", "choices": [{"text": "//        val picture = svg.renderToPicture(options.width, options.height)\r\n        return Resource.obtain(PictureDrawable(picture), toTranscode.get().get().get().get())\r\n    }\r\n}\n"}], "metadata": {"task_id": "Simple-Gallery/502", "ground_truth": "        val drawable = PictureDrawable(picture)\r\n        return SimpleResource(drawable)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\svg\\SvgDrawableTranscoder.kt"}}
{"prompt": "\n import com.bumptech.glide.request.target.Target\nimport com.bumptech.glide.request.target.ImageViewTarget\nimport com.bumptech.glide.load.engine.GlideException\nimport android.widget.ImageView\nimport android.graphics.drawable.PictureDrawable\noverride fun onLoadFailed(e: GlideException?, model: Any?, target: Target<PictureDrawable>, isFirstResource: Boolean): Boolean {\r\n        val view = (target as ImageViewTarget<*>).view\r", "choices": [{"text": "//        view.setImageDrawable(ContextCompat.getDrawable(view.context, R.drawable.ic_launcher_background))\r\n        return false\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/503", "ground_truth": "        view.setLayerType(ImageView.LAYER_TYPE_NONE, null)\r\n        return false\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\svg\\SvgSoftwareLayerSetter.kt"}}
{"prompt": "\n import com.bumptech.glide.request.target.Target\nimport com.bumptech.glide.request.target.ImageViewTarget\nimport com.bumptech.glide.load.DataSource\nimport android.widget.ImageView\nimport android.graphics.drawable.PictureDrawable\noverride fun onResourceReady(\r\n        resource: PictureDrawable,\r\n        model: Any,\r\n        target: Target<PictureDrawable>,\r\n        dataSource: DataSource,\r\n        isFirstResource: Boolean\r\n    ): Boolean {\r\n        val view = (target as ImageViewTarget<*>).view\r", "choices": [{"text": "//        val drawable = view.drawable\r\n//        val anim = DrawableCrossFadeFactory.Builder().setCrossFadeEnabled(true).build().createAnimatable(drawable)\r\n//        anim.start()\r\n        return false\r\n    }\r\n}\n"}], "metadata": {"task_id": "Simple-Gallery/504", "ground_truth": "        view.setLayerType(ImageView.LAYER_TYPE_SOFTWARE, null)\r\n        return false\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\svg\\SvgSoftwareLayerSetter.kt"}}
{"prompt": "\n override fun onDraw(canvas: Canvas) {\r\n        super.onDraw(canvas)\r\n        canvas.save()\r\n\r\n        if (backgroundBitmap != null) {\r\n            canvas.drawBitmap(backgroundBitmap!!, 0f, 0f, null)\r\n        }\r\n\r\n        for ((key, value) in mPaths) {\r\n            changePaint(value)\r\n            canvas.drawPath(key, mPaint)\r\n        }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/505", "ground_truth": "\r\n        changePaint(mPaintOptions)\r\n        canvas.drawPath(mPath, mPaint)\r\n        canvas.restore()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\views\\EditorDrawCanvas.kt"}}
{"prompt": "\n private fun actionDown(x: Float, y: Float) {\r\n        mPath.reset()\r\n        mPath.moveTo(x, y)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Simple-Gallery/506", "ground_truth": "        mCurX = x\r\n        mCurY = y\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\views\\EditorDrawCanvas.kt"}}
{"prompt": "\n private fun actionMove(x: Float, y: Float) {\r\n        mPath.quadTo(mCurX, mCurY, (x + mCurX) / 2, (y + mCurY) / 2)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/507", "ground_truth": "        mCurX = x\r\n        mCurY = y\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\views\\EditorDrawCanvas.kt"}}
{"prompt": " import com.simplemobiletools.gallery.pro.models.PaintOptions\nvar mPaint\nvar mWasMultitouch\nvar mColor\nprivate fun changePaint(paintOptions: PaintOptions) {\r", "choices": [{"text": "mPaint = paintOptions.paint\r\nmColor = paintOptions.color\r\nmPaint.color = mColor\r\nmPaint.style = Paint.Style.STROKE\r\nmPaint.strokeWidth = 10f\r\nmPaint.strokeCap = Paint.Cap.ROUND\r\nmPaint.strokeJoin = Paint.Join.ROUND\r\nmPaint.isAntiAlias = true\r\nmPaint.isDither = true\r\nmPaint.isFilterBitmap = true\r\nmPaint.isLinearText = true\r\nmPaint.isSubpixelText ="}], "metadata": {"task_id": "Simple-Gallery/509", "ground_truth": "        mPaint.color = paintOptions.color\r\n        mPaint.strokeWidth = paintOptions.strokeWidth\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\views\\EditorDrawCanvas.kt"}}
{"prompt": "\n fun updateBackgroundBitmap(bitmap: Bitmap) {\r", "choices": [{"text": "//     val canvas = Canvas(bitmap)\r\n//     val paint = Paint()\r\n//     paint.isAntiAlias = true\r\n//     paint.color = Color.WHITE\r\n//     canvas.drawRect(0f, 0f, bitmap.width.toFloat(), bitmap.height.toFloat(), paint)\r\n//     paint.color = Color.BLACK\r\n//     paint.textSize = 100f\r\n//     canvas.drawText(\"Hello World\", 100f, 100f, paint)\r\n//     paint."}], "metadata": {"task_id": "Simple-Gallery/510", "ground_truth": "        backgroundBitmap = bitmap\r\n        invalidate()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\views\\EditorDrawCanvas.kt"}}
{"prompt": "\n import com.simplemobiletools.gallery.pro.R\nfun getBitmap(): Bitmap {\r\n        val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Simple-Gallery/511", "ground_truth": "        val canvas = Canvas(bitmap)\r\n        canvas.drawColor(Color.WHITE)\r\n        draw(canvas)\r\n        return bitmap\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\views\\EditorDrawCanvas.kt"}}
{"prompt": "\n fun undo() {\r\n        if (mPaths.isEmpty()) {\r\n            return\r\n        }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/512", "ground_truth": "\r\n        val lastKey = mPaths.keys.lastOrNull()\r\n        mPaths.remove(lastKey)\r\n        invalidate()\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\views\\EditorDrawCanvas.kt"}}
{"prompt": "\n import android.view.MotionEvent\noverride fun dispatchTouchEvent(ev: MotionEvent): Boolean {\r\n        if (passTouches) {\r\n            if (ev.actionMasked == MotionEvent.ACTION_DOWN) {\r\n                passTouches = false\r", "choices": [{"text": "//                Log.d(\"TAG\", \"passTouches = false\")\r\n            }\r\n            return super.dispatchTouchEvent(ev)\r\n        }\r\n        return true\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/513", "ground_truth": "            }\r\n            return false\r\n        }\r\n        return super.dispatchTouchEvent(ev)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\views\\InstantItemSwitch.kt"}}
{"prompt": "\n import android.view.MotionEvent\noverride fun dispatchTouchEvent(ev: MotionEvent): Boolean {\r\n        if (mPassTouches) {\r\n            if (ev.actionMasked == MotionEvent.ACTION_DOWN) {\r\n                mPassTouches = false\r", "choices": [{"text": "//                Log.d(\"TAG\", \"dispatchTouchEvent: ACTION_DOWN\")\r\n            }\r\n            return super.dispatchTouchEvent(ev)\r\n        }\r\n        return false\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/515", "ground_truth": "            }\r\n            return false\r\n        }\r\n        return super.dispatchTouchEvent(ev)\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\views\\MediaSideScroll.kt"}}
{"prompt": "\n private fun percentChanged(percent: Int) {\r\n        if (mIsBrightnessScroll) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Simple-Gallery/517", "ground_truth": "            brightnessPercentChanged(percent)\r\n        } else {\r\n            volumePercentChanged(percent)\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\views\\MediaSideScroll.kt"}}
{"prompt": "\nvar mViewHeight\nvar mTempBrightness\nvar mTouchDownValue\n private fun showValue(percent: Int) {\r\n        slideInfoView.apply {\r\n            text = \"$mSlideInfoText:\\n$percent%\"\r", "choices": [{"text": "//            setTextSize(TypedValue.COMPLEX_UNIT_SP, 18f)\r\n            setTextColor(Color.WHITE)\r\n            setBackgroundColor(Color.TRANSPARENT)\r\n            setPadding(0, 0, 0, 0)\r\n            gravity = Gravity.CENTER\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Simple-Gallery/518", "ground_truth": "            alpha = 1f\r\n        }\r\n    }", "fpath": "Simple-Gallery\\app\\src\\main\\kotlin\\com\\simplemobiletools\\gallery\\pro\\views\\MediaSideScroll.kt"}}
{"prompt": "\n import android.widget.TextView\nimport android.view.View\n/**\r\n * Set the custom layout to be inflated for the tab views.\r\n *\r\n * @param layoutResId Layout id to be inflated\r\n * @param textViewId id of the {@link TextView} in the inflated view\r\n */\r\npublic void setCustomTabView(int layoutResId, int textViewId) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/0", "ground_truth": "    mTabViewLayoutId = layoutResId;\r\n    mTabViewTextViewId = textViewId;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\android\\support\\iosched\\tabs\\SlidingTabLayout.java"}}
{"prompt": "\n import androidx.viewpager.widget.ViewPager\nimport android.view.View\n@Override\r\nprotected void onAttachedToWindow() {\r\n    super.onAttachedToWindow();\r\n    if (mViewPager != null) {\r", "choices": [{"text": "\n import androidx.viewpager.widget.ViewPager\nimport android.view.View\n@Override\r\nprotected void onAttachedToWindow() {\r\n    super.onAttachedToWindow();\r\n    if (mViewPager!= null) {\r\nmViewPager.setOffscreenPageLimit(mViewPager.getAdapter().getCount());\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "vanilla/2", "ground_truth": "        scrollToTab(mViewPager.getCurrentItem(), 0);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\android\\support\\iosched\\tabs\\SlidingTabLayout.java"}}
{"prompt": "\n import androidx.viewpager.widget.ViewPager\nimport android.view.View\n@Override\r\npublic void onPageScrollStateChanged(int state) {\r\n    mScrollState = state;\r\n    if (mViewPagerPageChangeListener != null) {\r", "choices": [{"text": "\n import androidx.viewpager.widget.ViewPager\nimport android.view.View\n@Override\r\npublic void onPageScrollStateChanged(int state) {\r\n    mScrollState = state;\r\n    if (mViewPagerPageChangeListener!= null) {\r\nmViewPagerPageChangeListener.onPageScrollStateChanged(state);\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "vanilla/3", "ground_truth": "        mViewPagerPageChangeListener.onPageScrollStateChanged(state);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\android\\support\\iosched\\tabs\\SlidingTabLayout.java"}}
{"prompt": "\n import android.view.View\n@Override\r\npublic void onClick(View v) {\r\n    for (int i = 0; i < mTabStrip.getChildCount(); i++) {\r\n        if (v == mTabStrip.getChildAt(i)) {\r", "choices": [{"text": "//            mViewPager.setCurrentItem(i);\r\n            break;\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "vanilla/5", "ground_truth": "            mViewPager.setCurrentItem(i);\r\n            return;\r\n        }\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\android\\support\\iosched\\tabs\\SlidingTabLayout.java"}}
{"prompt": "\n import android.graphics.Color\nvoid setCustomTabColorizer(SlidingTabLayout.TabColorizer customTabColorizer) {\r", "choices": [{"text": "//        customTabColorizer.setIndicatorColor(Color.parseColor(\"#000000\"));\r\n//        customTabColorizer.setIndicatorColor(Color.parseColor(\"#000000\"));\r\n//        customTabColorizer.setIndicatorColor(Color.parseColor(\"#000000\"));\r\n//        customTabColorizer.setIndicatorColor(Color.parseColor(\"#000000\"));\r\n//        customTabColorizer.setIndicatorColor(Color.parseColor(\"#000000\"));\r\n//       "}], "metadata": {"task_id": "vanilla/6", "ground_truth": "    mCustomTabColorizer = customTabColorizer;\r\n    invalidate();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\android\\support\\iosched\\tabs\\SlidingTabStrip.java"}}
{"prompt": "\n import android.graphics.Color\nvoid setSelectedIndicatorColors(int... colors) {\r\n    // Make sure that the custom colorizer is removed\r\n    mCustomTabColorizer = null;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/7", "ground_truth": "    mDefaultTabColorizer.setIndicatorColors(colors);\r\n    invalidate();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\android\\support\\iosched\\tabs\\SlidingTabStrip.java"}}
{"prompt": "\n import android.view.View\nvoid onViewPagerPageChanged(int position, float positionOffset) {\r\n    mSelectedPosition = position;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/8", "ground_truth": "    mSelectionOffset = positionOffset;\r\n    invalidate();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\android\\support\\iosched\\tabs\\SlidingTabStrip.java"}}
{"prompt": "\n import android.widget.TextView\nimport android.content.Context\n/**\r\n * Overrides the default text color\r\n */\r\n@Override\r\nprotected TextView createDefaultTabView(Context context) {\r\n    TextView view = super.createDefaultTabView(context);\r\n    view.setTextColor(getResources().getColorStateList(ch.blinkenlights.android.vanilla.R.color.tab_text_selector));\r\n    view.setBackgroundResource(ch.blinkenlights.android.vanilla.R.drawable.unbound_ripple_light);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/10", "ground_truth": "    view.setMaxLines(1);\r\n    view.setEllipsize(TextUtils.TruncateAt.END);\r\n    view.setTextSize(14);\r\n    return view;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\android\\support\\iosched\\tabs\\VanillaTabLayout.java"}}
{"prompt": "\n import android.content.Context\nprivate static MediaLibraryBackend getBackend(Context context) {\r\n    if (sBackend == null) {\r\n        // -> unlikely\r\n        synchronized (sWait) {\r\n            if (sBackend == null) {\r\n                sBackend = new MediaLibraryBackend(context.getApplicationContext());\r\n                sScanner = new MediaScanner(context.getApplicationContext(), sBackend);\r\n                sScanner.startQuickScan(50);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/11", "ground_truth": "            }\r\n        }\r\n    }\r\n    return sBackend;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\medialibrary\\MediaLibrary.java"}}
{"prompt": "\n import android.content.Context\n/**\r\n * Triggers a rescan of the library\r\n *\r\n * @param context the context to use\r\n * @param forceFull starts a full / slow scan if true\r\n * @param drop drop the existing library if true\r\n */\r\npublic static void startLibraryScan(Context context, boolean forceFull, boolean drop) {\r\n    // also initialized sScanner\r\n    MediaLibraryBackend backend = getBackend(context);\r\n    if (drop) {\r\n        sScanner.flushDatabase();\r\n    }\r\n    if (forceFull) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/13", "ground_truth": "        sScanner.startFullScan();\r\n    } else {\r\n        sScanner.startNormalScan();\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\medialibrary\\MediaLibrary.java"}}
{"prompt": "\n import android.content.Context\n/**\r\n * Stops any running scan\r\n *\r\n * @param context the context to use\r\n */\r\npublic static void abortLibraryScan(Context context) {\r\n    // also initialized sScanner\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/14", "ground_truth": "    MediaLibraryBackend backend = getBackend(context);\r\n    sScanner.abortScan();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\medialibrary\\MediaLibrary.java"}}
{"prompt": "\n import android.content.Context\n/**\r\n * Whacky function to get the current scan progress\r\n *\r\n * @param context the context to use\r\n * @return a description of the progress\r\n */\r\npublic static MediaLibrary.ScanProgress describeScanProgress(Context context) {\r\n    // also initialized sScanner\r", "choices": [{"text": "//    if (sScanner == null) {\r\n//        sScanner = new MediaScanner(context);\r\n//    }\r\n    return sScanner.describeScanProgress();\r\n}\r\n"}], "metadata": {"task_id": "vanilla/15", "ground_truth": "    MediaLibraryBackend backend = getBackend(context);\r\n    return sScanner.describeScanProgress();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\medialibrary\\MediaLibrary.java"}}
{"prompt": "\n /**\r\n * Registers a new library observer for the media library\r\n *\r\n * The MediaLibrary will call `onLibraryChanged()` if\r\n * the media library changed.\r\n *\r\n * `ongoing` will be set to `true` if you are expected to receive\r\n * more updates soon. A value of `false` indicates that no\r\n * scan is going on.\r\n *\r\n * @param observer the content observer we are going to call on changes\r\n */\r\npublic static void registerLibraryObserver(LibraryObserver observer) {\r\n    if (sLibraryObservers.contains(observer))\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/16", "ground_truth": "        throw new IllegalStateException(\"LibraryObserver was already registered\");\r\n    sLibraryObservers.add(observer);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\medialibrary\\MediaLibrary.java"}}
{"prompt": "\n /**\r\n * Unregisters a library observer which was previously registered\r\n * by calling registerLibraryObserver().\r\n *\r\n * @param observer the content observer to unregister.\r\n */\r\npublic static void unregisterLibraryObserver(LibraryObserver observer) {\r\n    boolean removed = sLibraryObservers.remove(observer);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/17", "ground_truth": "    if (!removed)\r\n        throw new IllegalArgumentException(\"This library observer was never registered!\");\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\medialibrary\\MediaLibrary.java"}}
{"prompt": "\n import android.database.Cursor\nimport android.content.Context\n/**\r\n * Returns the number of songs in the music library\r\n *\r\n * @param context the context to use\r\n * @return the number of songs\r\n */\r\npublic static int getLibrarySize(Context context) {\r\n    int count = 0;\r\n    Cursor cursor = queryLibrary(context, TABLE_SONGS, new String[] { \"count(*)\" }, null, null, null);\r", "choices": [{"text": "if (cursor!= null) {\r\n    cursor.moveToFirst();\r\n    count = cursor.getInt(0);\r\n    cursor.close();\r\n}\r\nreturn count;\r\n}\n"}], "metadata": {"task_id": "vanilla/23", "ground_truth": "    if (cursor.moveToFirst())\r\n        count = cursor.getInt(0);\r\n    cursor.close();\r\n    return count;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\medialibrary\\MediaLibrary.java"}}
{"prompt": "\n import android.database.Cursor\n/**\r\n * Returns the `long' value stored in the column of the given id.\r\n *\r\n * @param column the column to return of `id'\r\n * @param id the song id to query\r\n * @return the value of `column'\r\n */\r\nlong getColumnFromSongId(String column, long id) {\r\n    long mtime = 0;\r\n    Cursor cursor = query(false, MediaLibrary.TABLE_SONGS, new String[] { column }, MediaLibrary.SongColumns._ID + \"=\" + Long.toString(id), null, null, null, null, \"1\");\r", "choices": [{"text": "if (cursor!= null) {\r\n        if (cursor.moveToFirst()) {\r\n            mtime = cursor.getLong(0);\r\n        }\r\n        cursor.close();\r\n    }\r\n    return mtime;\r\n}\n"}], "metadata": {"task_id": "vanilla/25", "ground_truth": "    if (cursor.moveToFirst())\r\n        mtime = cursor.getLong(0);\r\n    cursor.close();\r\n    return mtime;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\medialibrary\\MediaLibraryBackend.java"}}
{"prompt": "\n /**\r\n * Wrapper for SQLiteDatabse.delete() function\r\n *\r\n * @param table the table to delete data from\r\n * @param whereClause the selection\r\n * @param whereArgs arguments to selection\r\n * @return the number of affected rows\r\n */\r\nint delete(String table, String whereClause, String[] whereArgs) {\r", "choices": [{"text": "return db.delete(table, whereClause, whereArgs);\r\n}\r\n\r\n/**\r\n * Wrapper for SQLiteDatabse.update() function\r\n *\r\n * @param table the table to update data in\r\n * @param values the values to update\r\n * @param whereClause the selection\r\n * @param whereArgs arguments to selection\r\n * @return the number of affected rows\r\n */\r\nint update(String table, ContentValues values, String whereClause, String[] whereArgs) {\r\nreturn db.update(table, values, whereClause, whereArgs);\r\n}\r\n\r\n/**\r\n"}], "metadata": {"task_id": "vanilla/26", "ground_truth": "    SQLiteDatabase dbh = getWritableDatabase();\r\n    return dbh.delete(table, whereClause, whereArgs);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\medialibrary\\MediaLibraryBackend.java"}}
{"prompt": "\n import android.database.sqlite.SQLiteDatabase\nimport android.content.ContentValues\n/**\r\n * Wrapper for SQLiteDatabase.update() function\r\n *\r\n * @param table the table to update\r\n * @param values the data to set / modify\r\n * @param whereClause the selection\r\n * @param whereArgs arguments to selection\r\n * @return the number of affected rows\r\n */\r\nint update(String table, ContentValues values, String whereClause, String[] whereArgs) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/27", "ground_truth": "    SQLiteDatabase dbh = getWritableDatabase();\r\n    return dbh.update(table, values, whereClause, whereArgs);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\medialibrary\\MediaLibraryBackend.java"}}
{"prompt": "\n import android.database.sqlite.SQLiteDatabase\nimport android.content.ContentValues\n/**\r\n * Wrapper for SQLiteDatabase.insert() function\r\n *\r\n * @param table the table to insert data to\r\n * @param nullColumnHack android hackery (see SQLiteDatabase documentation)\r\n * @param values the values to insert\r\n */\r\nlong insert(String table, String nullColumnHack, ContentValues values) {\r\n    long result = -1;\r\n    try {\r\n        result = getWritableDatabase().insertOrThrow(table, nullColumnHack, values);\r", "choices": [{"text": "//        Log.d(TAG, \"insert: \" + result);\r\n    } catch (Exception e) {\r\n        Log.e(TAG, \"insert: \" + e.getMessage());\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Wrapper for SQLiteDatabase.delete() function\r\n *\r\n * @param table the table to delete from\r\n * @param whereClause the where clause\r\n * @param whereArgs the where arguments\r\n */\r\nint delete(String table, String whereClause, String[] whereArgs) {\r\n    int result = -1;\r\n    try {\r\n        result = getWritableDatabase"}], "metadata": {"task_id": "vanilla/28", "ground_truth": "    } catch (Exception e) {\r\n        // avoid logspam as done by insert()\r\n    }\r\n    return result;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\medialibrary\\MediaLibraryBackend.java"}}
{"prompt": "\n /**\r\n * Returns the first element matching this key, null on if not found\r\n *\r\n * @param key the key to look up\r\n * @return the value of the first entry, null if the key was not found\r\n */\r\npublic String getFirst(String key) {\r\n    String result = null;\r\n    if (containsKey(key))\r", "choices": [{"text": "{\r\n        result = (String) map.get(key);\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns the last element matching this key, null on if not found\r\n *\r\n * @param key the key to look up\r\n * @return the value of the last entry, null if the key was not found\r\n */\r\npublic String getLast(String key) {\r\n    String result = null;\r\n    if (containsKey(key))\r\n{\r\n        result = (String) map.get(key);\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns the first"}], "metadata": {"task_id": "vanilla/30", "ground_truth": "        result = get(key).get(0);\r\n    return result;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\medialibrary\\MediaMetadataExtractor.java"}}
{"prompt": "\n import java.util.regex.Pattern\nimport java.util.regex.Matcher\nimport java.util.ArrayList\n/**\r\n * Matches all elements of `data' with `filter' and adds the result as `key'\r\n *\r\n * @param filter the pattern to use, result is expected to be in capture group 1\r\n * @param key the key to use for the data to put\r\n * @param data the array list to inspect\r\n */\r\nprivate void addFiltered(Pattern filter, String key, ArrayList<String> data) {\r\n    ArrayList<String> list = new ArrayList<>();\r\n    for (String s : data) {\r\n        Matcher matcher = filter.matcher(s);\r\n        if (matcher.matches()) {\r\n            list.add(matcher.group(1).trim());\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/32", "ground_truth": "        }\r\n    }\r\n    if (list.size() > 0)\r\n        put(key, list);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\medialibrary\\MediaMetadataExtractor.java"}}
{"prompt": "\n /**\r\n * Decode the given MIME type into a more human-friendly description.\r\n *\r\n * @return a human-friendly description of the MIME type\r\n */\r\nprivate static String decodeMimeType(String mime) {\r\n    if (\"audio/mpeg\".equals(mime)) {\r\n        return \"MP3\";\r\n    } else if (\"audio/mp4\".equals(mime)) {\r\n        return \"AAC\";\r\n    } else if (\"audio/vorbis\".equals(mime)) {\r\n        return \"Ogg Vorbis\";\r\n    } else if (\"application/ogg\".equals(mime)) {\r\n        return \"Ogg Vorbis\";\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/33", "ground_truth": "    } else if (\"audio/flac\".equals(mime)) {\r\n        return \"FLAC\";\r\n    }\r\n    return mime;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\medialibrary\\MediaMetadataExtractor.java"}}
{"prompt": "\n import android.os.Message\nimport android.os.Handler\nimport ch.blinkenlights.android.vanilla.R\n/**\r\n * Called by the content observer if a change in the media library\r\n * has been detected\r\n *\r\n * @param delay how many ms we should wait (used to coalesce multiple calls)\r\n */\r\npublic void startQuickScan(int delay) {\r\n    if (!mHandler.hasMessages(MSG_GUESS_QUICKSCAN) && !mHandler.hasMessages(MSG_SCAN_RPC)) {\r", "choices": [{"text": "\n import android.os.Message\nimport android.os.Handler\nimport ch.blinkenlights.android.vanilla.R\n/**\r\n * Called by the content observer if a change in the media library\r\n * has been detected\r\n *\r\n * @param delay how many ms we should wait (used to coalesce multiple calls)\r\n */\r\npublic void startQuickScan(int delay) {\r\n    if (!mHandler.hasMessages(MSG_GUESS_QUICKSCAN) &&!mHandler.hasMessages(MSG_SCAN_RPC)) {\r\n//        Log.d(TAG, \"startQuickScan\");\r\n        mHandler.sendEmptyMessageDelayed(MSG_GUESS_QUICKSCAN, delay);\r\n    }\r\n}\r\n/**\r\n * Called by the content observer if a change in the media library\r\n * has been detected\r\n *\r\n * @param delay how many ms we should wait (used to coalesce multiple calls)\r\n */\r\npublic void startScan(int delay) {\r\n    if (!mHandler.hasMessages(MSG_GUESS_QUICKSCAN) &&!mHandler.hasMessages(MSG_SCAN_RPC)) {"}], "metadata": {"task_id": "vanilla/36", "ground_truth": "        mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_GUESS_QUICKSCAN, 0, 0), delay);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\medialibrary\\MediaScanner.java"}}
{"prompt": "\n import android.os.Message\nimport android.os.Handler\nimport ch.blinkenlights.android.vanilla.R\n/**\r\n * Stops a running scan\r\n */\r\npublic void abortScan() {\r\n    mHandler.removeMessages(MSG_SCAN_RPC);\r", "choices": [{"text": "}\r\n/**\r\n * Starts a scan\r\n */\r\npublic void startScan() {\r\n    mHandler.sendEmptyMessage(MSG_SCAN_RPC);\r\n}\r\n/**\r\n * Stops a running scan\r\n */\r\npublic void stopScan() {\r\n    mHandler.removeMessages(MSG_SCAN_RPC);\r\n}\r\n/**\r\n * Stops a running scan\r\n */\r\npublic void startScan() {\r\n    mHandler.sendEmptyMessage(MSG_SCAN_RPC);\r\n}\r\n/**\r\n * Stops a running scan\r\n */\r\npublic void stopScan"}], "metadata": {"task_id": "vanilla/37", "ground_truth": "    mScanPlan.clear();\r\n    mHandler.sendMessage(mHandler.obtainMessage(MSG_SCAN_RPC, RPC_KICKSTART, 0));\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\medialibrary\\MediaScanner.java"}}
{"prompt": "\n /**\r\n * Prepares a flush of the databse.\r\n */\r\npublic void flushDatabase() {\r\n    mBackend.setPendingDeletion();\r", "choices": [{"text": "}\r\n\r\n/**\r\n * Returns the number of pending deletions.\r\n */\r\npublic int getPendingDeletions() {\r\n    return mBackend.getPendingDeletions();\r\n}\r\n\r\n/**\r\n * Returns the number of pending updates.\r\n */\r\npublic int getPendingUpdates() {\r\n    return mBackend.getPendingUpdates();\r\n}\r\n\r\n/**\r\n * Returns the number of pending inserts.\r\n */\r\npublic int getPendingInserts() {\r\n    return mBackend.getPendingInserts();\r\n}\r\n\r\n/**\r\n * Returns the number of pending deletes.\r\n */\r\n"}], "metadata": {"task_id": "vanilla/38", "ground_truth": "    mPendingCleanup = true;\r\n    setNativeLastMtime(MTIME_PRISTINE);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\medialibrary\\MediaScanner.java"}}
{"prompt": "\n import android.content.Context\n/**\r\n * Updates the _nativeLastMtime value in the media scanner storage\r\n *\r\n * @param mtime or one of MTIME_*\r\n */\r\nprivate void setNativeLastMtime(int mtime) {\r\n    MediaLibrary.Preferences prefs = MediaLibrary.getPreferences(mContext);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/40", "ground_truth": "    prefs._nativeLastMtime = mtime;\r\n    MediaLibrary.setPreferences(mContext, prefs);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\medialibrary\\MediaScanner.java"}}
{"prompt": "\n void reset() {\r\n    this.seen = 0;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/42", "ground_truth": "    this.changed = 0;\r\n    this.lastFile = null;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\medialibrary\\MediaScanner.java"}}
{"prompt": "\n import java.io.File\n/**\r\n * Called by the scanner to signal that a file was handled\r\n *\r\n * @param path the file we scanned\r\n * @param changed true if this triggered a database update\r\n */\r\nvoid registerProgress(String path, boolean changed) {\r\n    mStats.lastFile = path;\r", "choices": [{"text": "}\r\n\r\n/**\r\n * Called by the scanner to signal that a file was handled\r\n *\r\n * @param path the file we scanned\r\n * @param changed true if this triggered a database update\r\n */\r\nvoid registerProgress(File path, boolean changed) {\r\n    mStats.lastFile = path.getAbsolutePath();\r\n}\r\n\r\n/**\r\n * Called by the scanner to signal that a file was handled\r\n *\r\n * @param path the file we scanned\r\n * @param changed true if this triggered a database update\r\n */\r\nvoid registerProgress(File path) {\r\n    mStats.lastFile ="}], "metadata": {"task_id": "vanilla/43", "ground_truth": "    mStats.seen++;\r\n    if (changed) {\r\n        mStats.changed++;\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\medialibrary\\MediaScanner.java"}}
{"prompt": "\n /**\r\n * Flushes all progress, turning the object into a fresh state\r\n */\r\nvoid clear() {\r", "choices": [{"text": "-  _progress = 0;\r\n+  _progress = 0;\r\n+  _total = 0;\r\n}\r\n\r\n/**\r\n * Returns the current progress of the object\r\n *\r\n * @return the current progress of the object\r\n */\r\n-int progress() {\r\n+int progress() {\r\n+  return _progress;\r\n}\r\n\r\n/**\r\n * Returns the total progress of the object\r\n *\r\n * @return the total progress of the object\r\n */\r\n-int total() {\r\n+int total() {\r\n+  return"}], "metadata": {"task_id": "vanilla/44", "ground_truth": "    mSteps.clear();\r\n    mStats.reset();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\medialibrary\\MediaScanner.java"}}
{"prompt": "\n /**\r\n * Adds the next step in our plan\r\n *\r\n * @param msg the message to add\r\n * @param arg the argument to msg\r\n */\r\nMediaScanPlan addNextStep(int msg, Object arg) {\r", "choices": [{"text": "//\tSystem.out.println(\"addNextStep: \" + msg + \" \" + arg);\r\n\tMediaScanPlan plan = new MediaScanPlan();\r\n\tplan.msg = msg;\r\n\tplan.arg = arg;\r\n\tplan.next = null;\r\n\tif (next == null) {\r\n\t\tnext = plan;\r\n\t} else {\r\n\t\tMediaScanPlan p = next;\r\n\t\twhile (p.next!= null) {\r\n\t\t\tp = p.next;\r\n\t\t}\r\n\t\tp.next = plan;\r\n\t}\r\n\treturn plan;\r\n}"}], "metadata": {"task_id": "vanilla/45", "ground_truth": "    mSteps.add(new Step(msg, arg, Step.MODE_NORMAL));\r\n    return this;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\medialibrary\\MediaScanner.java"}}
{"prompt": "\n /**\r\n * Adds an optional step to our plan. This will NOT\r\n * run if the previous step caused database changes\r\n *\r\n * @param msg the message to add\r\n * @param arg the argument to msg\r\n */\r\nMediaScanPlan addOptionalStep(int msg, Object arg) {\r", "choices": [{"text": "//\tif (msg == MediaScanPlan.MSG_DELETE_FILE) {\r\n//\t\treturn this;\r\n//\t}\r\n\tMediaScanPlan step = new MediaScanPlan(msg, arg);\r\n\tsteps.add(step);\r\n\treturn this;\r\n}\r\n\r\n/**\r\n * Adds a step to our plan. This will run if the previous step caused database changes\r\n *\r\n * @param msg the message to add\r\n * @param arg the argument to msg\r\n */\r\nMediaScanPlan addStep(int msg, Object arg) {\r\n\tMediaScanPlan step"}], "metadata": {"task_id": "vanilla/46", "ground_truth": "    mSteps.add(new Step(msg, arg, Step.MODE_OPTIONAL));\r\n    return this;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\medialibrary\\MediaScanner.java"}}
{"prompt": "\n /**\r\n * Adds a chained step to our plan. This will ONLY\r\n * run if the previous step caused database changes\r\n *\r\n * @param msg the message to add\r\n * @param arg the argument to msg\r\n */\r\nMediaScanPlan addChainedStep(int msg, Object arg) {\r", "choices": [{"text": "//\tSystem.out.println(\"Adding chained step: \" + msg);\r\n\tMediaScanPlan plan = new MediaScanPlan();\r\n\tplan.msg = msg;\r\n\tplan.arg = arg;\r\n\tplan.chained = true;\r\n\tplan.next = null;\r\n\treturn plan;\r\n}\r\n\r\n/**\r\n * Adds a step to our plan. This will ONLY\r\n * run if the previous step caused database changes\r\n *\r\n * @param msg the message to add\r\n * @param arg the argument to msg\r\n */\r\nMediaScanPlan addStep(int msg,"}], "metadata": {"task_id": "vanilla/47", "ground_truth": "    mSteps.add(new Step(msg, arg, Step.MODE_CHAINED));\r\n    return this;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\medialibrary\\MediaScanner.java"}}
{"prompt": "\n import ch.blinkenlights.android.vanilla.R\n/**\r\n * Returns the next step of our scan plan\r\n *\r\n * @return a new step object, null if we hit the end\r\n */\r\nStep getNextStep() {\r\n    Step next = (mSteps.size() != 0 ? mSteps.remove(0) : null);\r\n    if (next != null) {\r\n        if (next.mode == Step.MODE_OPTIONAL && mStats.changed != 0) {\r\n            next = null;\r\n            mSteps.clear();\r\n        }\r\n        if (next.mode == Step.MODE_CHAINED && mStats.changed == 0) {\r\n            next = null;\r\n            mSteps.clear();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/48", "ground_truth": "        }\r\n    }\r\n    mStats.reset();\r\n    return next;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\medialibrary\\MediaScanner.java"}}
{"prompt": "\n import android.content.SharedPreferences\n/**\r\n * Retrieve an action from the given SharedPreferences.\r\n *\r\n * @param prefs The SharedPreferences instance to load from.\r\n * @param key The preference key to load.\r\n * @param def The value to return if the key is not found or cannot be loaded.\r\n * @return The loaded action or def if no action could be loaded.\r\n */\r\npublic static Action getAction(SharedPreferences prefs, String key, Action def) {\r\n    try {\r\n        String pref = prefs.getString(key, null);\r\n        if (pref == null)\r\n            return def;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/49", "ground_truth": "        return Enum.valueOf(Action.class, pref);\r\n    } catch (Exception e) {\r\n        return def;\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\Action.java"}}
{"prompt": "\n /**\r\n * Returns a GainValues object for `path'\r\n */\r\npublic GainValues getReplayGainValues(String path) {\r\n    if (path == null) {\r\n        // path must not be null\r\n        path = \"//null\\\\\";\r\n    }\r\n    GainValues cached = rgCache.get(path);\r\n    if (cached == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/50", "ground_truth": "        cached = getReplayGainValuesFromFile(path);\r\n        rgCache.put(path, cached);\r\n    }\r\n    return cached;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\BastpUtil.java"}}
{"prompt": "\n /**\r\n * Parses common replayGain string values\r\n */\r\nprivate float getFloatFromString(String rg_raw) {\r\n    float rg_float = 0f;\r\n    try {\r\n        String nums = rg_raw.replaceAll(\"[^0-9.-]\", \"\");\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/51", "ground_truth": "        rg_float = Float.parseFloat(nums);\r\n    } catch (Exception e) {\r\n    }\r\n    return rg_float;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\BastpUtil.java"}}
{"prompt": "\n import android.os.Parcelable\n@Override\r\npublic Parcelable onSaveInstanceState() {\r\n    // Forcefully hide (and clear) search as we are not going to restore the state\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/54", "ground_truth": "    showSearch(false);\r\n    return super.onSaveInstanceState();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\BottomBarControls.java"}}
{"prompt": "\n import android.view.View\n/**\r\n * Sets the ControlsContent to be clickable\r\n */\r\npublic void setOnClickListener(View.OnClickListener listener) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/55", "ground_truth": "    mParentClickConsumer = listener;\r\n    mControlsContent.setOnClickListener(this);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\BottomBarControls.java"}}
{"prompt": "\n import android.widget.PopupMenu\nimport android.view.Menu\n/**\r\n * Opens the OptionsMenu of this view\r\n */\r\npublic void openMenu() {\r\n    if (mPopupMenu == null || mParentMenuConsumer == null)\r\n        return;\r", "choices": [{"text": "//    mPopupMenu.show();\r\n    mParentMenuConsumer.onMenuOpened(Menu.NONE, mPopupMenu);\r\n}\r\n/**\r\n * Closes the OptionsMenu of this view\r\n */\r\npublic void closeMenu() {\r\n    if (mPopupMenu == null || mParentMenuConsumer == null)\r\n        return;\r\n//    mPopupMenu.dismiss();\r\n    mParentMenuConsumer.onMenuClosed(Menu.NONE, mPopupMenu);\r\n}\r\n/**\r\n * Sets the parent menu consumer of this view\r\n * @param parentMenuConsumer the parent menu consumer\r\n */\r\npublic void set"}], "metadata": {"task_id": "vanilla/56", "ground_truth": "    mParentMenuConsumer.onPrepareOptionsMenu(mPopupMenu.getMenu());\r\n    mPopupMenu.show();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\BottomBarControls.java"}}
{"prompt": "\n import android.graphics.Bitmap\n/**\r\n * Updates the cover image of this view\r\n *\r\n * @param cover the bitmap to display. Will use a placeholder image if cover is null\r\n */\r\npublic void setCover(Bitmap cover) {\r\n    if (cover == null)\r\n        mCover.setImageResource(R.drawable.fallback_cover);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/57", "ground_truth": "    else\r\n        mCover.setImageBitmap(cover);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\BottomBarControls.java"}}
{"prompt": "\n import android.widget.ImageButton\nimport android.graphics.drawable.Drawable\nimport android.content.Context\n/**\r\n * Returns a new image button to be placed on the bar\r\n *\r\n * @param drawable The icon to use\r\n */\r\nprivate ImageButton getImageButton(Drawable drawable) {\r\n    ImageButton button = new ImageButton(mContext);\r\n    button.setImageDrawable(drawable);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/59", "ground_truth": "    button.setBackgroundResource(R.drawable.unbound_ripple_light);\r\n    return button;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\BottomBarControls.java"}}
{"prompt": "\n import android.widget.TextView\nimport android.widget.SearchView\nimport android.widget.ImageView\nimport android.view.ViewGroup\nimport android.view.View\n/**\r\n * Changing the colors of a search view is a MAJOR pain using XML\r\n * This cheap trick just loop trough the view and changes the\r\n * color of all text- and image views to 'style'\r\n *\r\n * @param view the view to search\r\n * @param color the color to apply\r\n */\r\nprivate void styleSearchView(View view, int color) {\r\n    if (view != null) {\r\n        if (view instanceof TextView) {\r\n            ((TextView) view).setTextColor(color);\r\n        } else if (view instanceof ImageView) {\r\n            ((ImageView) view).setColorFilter(color);\r\n        } else if (view instanceof ViewGroup) {\r\n            ViewGroup group = (ViewGroup) view;\r\n            for (int i = 0; i < group.getChildCount(); i++) {\r", "choices": [{"text": "\n import android.widget.TextView\nimport android.widget.SearchView\nimport android.widget.ImageView\nimport android.view.ViewGroup\nimport android.view.View\n/**\r\n * Changing the colors of a search view is a MAJOR pain using XML\r\n * This cheap trick just loop trough the view and changes the\r\n * color of all text- and image views to'style'\r\n *\r\n * @param view the view to search\r\n * @param color the color to apply\r\n */\r\nprivate void styleSearchView(View view, int color) {\r\n    if (view!= null) {\r\n        if (view instanceof TextView) {\r\n            ((TextView) view).setTextColor(color);\r\n        } else if (view instanceof ImageView) {\r\n            ((ImageView) view).setColorFilter(color);\r\n        } else if (view instanceof ViewGroup) {\r\n            ViewGroup group = (ViewGroup) view;\r\n            for (int i = 0; i < group.getChildCount(); i++) {\r\nstyleSearchView(group.getChildAt(i), color);\r\n            }\r\n        }\r\n    }\r\n}\r\n\n/**\r\n * This is the main activity of the app.\r\n * It is the main entry point of the app.\r\n *\r\n * @author <NAME>\r\n * @version 1.0\r\n */\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    private static final String TAG = \"MainActivity\";\r\n\r\n    private static final String KEY_SEARCH_QUERY = \"search_query\";\r\n\r\n    private static final String KEY_SEARCH_RESULTS = \"search_results\";\r\n\r\n    private static final String KEY_SEARCH_RESULTS_"}], "metadata": {"task_id": "vanilla/60", "ground_truth": "                styleSearchView(group.getChildAt(i), color);\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\BottomBarControls.java"}}
{"prompt": "\n /**\r\n * Returns true if we need to add a margin to the menu.\r\n * Because ...reasons.\r\n */\r\nprivate boolean menuMargin() {\r", "choices": [{"text": "\n /**\r\n * Returns true if we need to add a margin to the menu.\r\n * Because...reasons.\r\n */\r\nprivate boolean menuMargin() {\r\nreturn (menu.getMenuItems().size() > 1);\r\n}\r\n/**\r\n * Returns the menu margin.\r\n */\r\nprivate int menuMargin() {\r\nreturn (menuMargin()? 1 : 0);\r\n}\r\n/**\r\n * Returns the menu margin.\r\n */\r\nprivate int menuMargin() {\r\nreturn (menuMargin()? 1 : 0);\r\n}\r\n/**\r\n * Returns the menu margin.\r\n */\r\nprivate int menuMargin() {\r\nreturn (menuMargin()? 1 : 0);\r\n"}], "metadata": {"task_id": "vanilla/61", "ground_truth": "    // Was false for holo, maybe will be true again in the future? ;-)\r\n    return true;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\BottomBarControls.java"}}
{"prompt": "\n import android.graphics.Bitmap\nimport android.content.Context\n/**\r\n * Returns a (possibly uncached) cover for the song - will return null if the song has no cover\r\n *\r\n * @param ctx The context to retrieve the bitmap from cache via external content uri\r\n * @param song The song used to identify the artwork to load\r\n * @return a bitmap or null if no artwork was found\r\n */\r\npublic Bitmap getCoverFromSong(Context ctx, Song song, int size) {\r\n    CoverKey key = new CoverCache.CoverKey(MediaUtils.TYPE_ALBUM, song.albumId, size);\r\n    Bitmap cover = getStoredCover(key);\r\n    if (cover == null) {\r\n        cover = sBitmapDiskCache.createBitmap(ctx, song, size * size);\r\n        if (cover != null) {\r\n            storeCover(key, cover);\r\n            // return lossy version to avoid random quality changes\r", "choices": [{"text": "\n import android.graphics.Bitmap\nimport android.content.Context\n/**\r\n * Returns a (possibly uncached) cover for the song - will return null if the song has no cover\r\n *\r\n * @param ctx The context to retrieve the bitmap from cache via external content uri\r\n * @param song The song used to identify the artwork to load\r\n * @return a bitmap or null if no artwork was found\r\n */\r\npublic Bitmap getCoverFromSong(Context ctx, Song song, int size) {\r\n    CoverKey key = new CoverCache.CoverKey(MediaUtils.TYPE_ALBUM, song.albumId, size);\r\n    Bitmap cover = getStoredCover(key);\r\n    if (cover == null) {\r\n        cover = sBitmapDiskCache.createBitmap(ctx, song, size * size);\r\n        if (cover!= null) {\r\n            storeCover(key, cover);\r\n            // return lossy version to avoid random quality changes\r\n//            cover = Bitmap.createScaledBitmap(cover, size, size, false);\r\n        }\r\n    }\r\n    return cover;\r\n}\n"}], "metadata": {"task_id": "vanilla/65", "ground_truth": "            cover = getStoredCover(key);\r\n        }\r\n    }\r\n    return cover;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\CoverCache.java"}}
{"prompt": "\n import android.graphics.Bitmap\n/**\r\n * Deletes all items hold in the cover caches\r\n */\r\npublic static void evictAll() {\r\n    if (sBitmapDiskCache != null) {\r", "choices": [{"text": "\n import android.graphics.Bitmap\n/**\r\n * Deletes all items hold in the cover caches\r\n */\r\npublic static void evictAll() {\r\n    if (sBitmapDiskCache!= null) {\r\nsBitmapDiskCache.evictAll();\r\n    }\r\n}\r\n/**\r\n * Deletes all items hold in the cover caches\r\n */\r\npublic static void evictAll() {\r\n    if (sBitmapDiskCache!= null) {\r\nsBitmapDiskCache.evictAll();\r\n    }\r\n}\r\n/**\r\n * Deletes all items hold in the cover caches\r\n */\r\npublic static void evictAll() {\r\n    if (sBitmapDiskCache!= null) {\r\nsBitmapDiskCache.evictAll();\r\n    }\r\n}\r\n/**\r\n * Deletes all items hold"}], "metadata": {"task_id": "vanilla/66", "ground_truth": "        sBitmapDiskCache.evictAll();\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\CoverCache.java"}}
{"prompt": "\n @Override\r\npublic boolean equals(Object obj) {\r\n    if (obj instanceof CoverKey && this.mediaId == ((CoverKey) obj).mediaId && this.mediaType == ((CoverKey) obj).mediaType && this.coverSize == ((CoverKey) obj).coverSize) {\r\n        return true;\r", "choices": [{"text": "}\r\nreturn false;\r\n}\r\n}\r\n"}], "metadata": {"task_id": "vanilla/67", "ground_truth": "    }\r\n    return false;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\CoverCache.java"}}
{"prompt": "\n /**\r\n * Deletes all cached elements from the on-disk cache\r\n */\r\npublic void evictAll() {\r\n    // purge all cached entries\r\n    trim(0);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/69", "ground_truth": "    // and release the dbh\r\n    getWritableDatabase().close();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\CoverCache.java"}}
{"prompt": "\n import android.database.sqlite.SQLiteDatabase\nimport android.database.Cursor\n/**\r\n * Calculates the space used by the sqlite database\r\n *\r\n * @return long the space used in bytes\r\n */\r\nprivate long getUsedSpace() {\r\n    long usedSpace = -1;\r\n    SQLiteDatabase dbh = getWritableDatabase();\r\n    Cursor cursor = dbh.query(TABLE_NAME, new String[] { \"SUM(size)\" }, null, null, null, null, null);\r\n    if (cursor != null) {\r\n        if (cursor.moveToNext())\r", "choices": [{"text": "\n import android.database.sqlite.SQLiteDatabase\nimport android.database.Cursor\n/**\r\n * Calculates the space used by the sqlite database\r\n *\r\n * @return long the space used in bytes\r\n */\r\nprivate long getUsedSpace() {\r\n    long usedSpace = -1;\r\n    SQLiteDatabase dbh = getWritableDatabase();\r\n    Cursor cursor = dbh.query(TABLE_NAME, new String[] { \"SUM(size)\" }, null, null, null, null, null);\r\n    if (cursor!= null) {\r\n        if (cursor.moveToNext())\r\n//            usedSpace = cursor.getLong(0);\r\n            usedSpace = cursor.getLong(0);\r\n        cursor.close();\r\n    }\r\n    dbh.close();\r\n    return usedSpace;\r\n}\n"}], "metadata": {"task_id": "vanilla/70", "ground_truth": "            usedSpace = cursor.getLong(0);\r\n        cursor.close();\r\n    }\r\n    return usedSpace;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\CoverCache.java"}}
{"prompt": "\n import android.os.Looper\nimport android.os.Handler\n/**\r\n * Configures and sets up this view\r\n */\r\npublic void setup(Looper looper, Callback callback, int style) {\r\n    mUiHandler = new Handler(this);\r\n    mHandler = new Handler(looper, this);\r", "choices": [{"text": "}\r\n/**\r\n * Called when the view is ready to be displayed\r\n */\r\npublic void onViewReady() {\r\n    mUiHandler.post(new Runnable() {\r\n        public void run() {\r\n            mUiHandler.post(new Runnable() {\r\n                public void run() {\r\n                    mUiHandler.post(new Runnable() {\r\n                        public void run() {\r\n                            mUiHandler.post(new Runnable() {\r\n                                public void run() {\r\n                                    mUiHandler.post(new Runnable() {\r\n                                        public void run() {\r\n                                            mUiHandler.post(new Runnable() {\r\n                                                public void run()"}], "metadata": {"task_id": "vanilla/72", "ground_truth": "    mCallback = callback;\r\n    mCoverStyle = style;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\CoverView.java"}}
{"prompt": "\n import android.graphics.Bitmap\n/**\r\n * Sent if the songs timeline changed and we should check if\r\n * mCacheBitmap is stale.\r\n * Just calls querySongsInternal() via handler to ensure\r\n * that we do this in a background thread.\r\n */\r\npublic void querySongs() {\r", "choices": [{"text": "//\tmHandler.removeMessages(MSG_QUERY_SONGS);\r\n//\tmHandler.sendEmptyMessage(MSG_QUERY_SONGS);\r\n}\r\n/**\r\n * Called by querySongs() to query the songs.\r\n * This is done in a background thread.\r\n */\r\nprivate void querySongsInternal() {\r\n//\tmSongs = new ArrayList<Song>();\r\n//\tmSongs.add(new Song(\"Song 1\", \"Artist 1\", 1000));\r\n//\tmSongs.add(new Song"}], "metadata": {"task_id": "vanilla/73", "ground_truth": "    mHandler.removeMessages(MSG_QUERY_SONGS);\r\n    mHandler.sendEmptyMessage(MSG_QUERY_SONGS);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\CoverView.java"}}
{"prompt": "\n /**\r\n * Triggers if the view changes its size, may call querySongs() if it was called\r\n * previously but had to be aborted as the view was not yet laid out.\r\n */\r\n@Override\r\nprotected void onSizeChanged(int width, int height, int oldWidth, int oldHeight) {\r\n    if (mPendingQuery && width != 0 && height != 0) {\r\n        mPendingQuery = false;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/76", "ground_truth": "        querySongs();\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\CoverView.java"}}
{"prompt": "\n import android.graphics.Bitmap\npublic void setSongBitmap(int i, Song song, Bitmap bitmap) {\r", "choices": [{"text": ""}], "metadata": {"task_id": "vanilla/78", "ground_truth": "    mCacheSongs[i] = song;\r\n    mCacheBitmaps[i] = bitmap;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\CoverView.java"}}
{"prompt": "\n import android.graphics.Bitmap\npublic Bitmap grepBitmap(Song song) {\r\n    final int len = mCacheSongs.length;\r\n    for (int i = 0; i < len; i++) {\r\n        if (song != null && song.equals(mCacheSongs[i])) {\r", "choices": [{"text": "\n import android.graphics.Bitmap\npublic Bitmap grepBitmap(Song song) {\r\n    final int len = mCacheSongs.length;\r\n    for (int i = 0; i < len; i++) {\r\n        if (song!= null && song.equals(mCacheSongs[i])) {\r\n//            return mCacheBitmaps[i];\r\n            return mCacheBitmaps[i];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n"}], "metadata": {"task_id": "vanilla/79", "ground_truth": "            return mCacheBitmaps[i];\r\n        }\r\n    }\r\n    return null;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\CoverView.java"}}
{"prompt": "\n import android.graphics.Bitmap\n/**\r\n * Abort a scroll initiated by prepareScroll.\r\n */\r\npublic void abortScroll() {\r\n    // undo our guess we did in prepareScroll\r\n    System.arraycopy(mSnapshotBitmaps, 0, mCacheBitmaps, 0, 3);\r", "choices": [{"text": "}\r\n/**\r\n * Prepare a scroll initiated by a fling.\r\n */\r\npublic void prepareScroll(int startX, int startY, int dx, int dy, int minX, int maxX, int minY, int maxY) {\r\n    // save the current bitmaps\r\n    System.arraycopy(mCacheBitmaps, 0, mSnapshotBitmaps, 0, 3);\r\n    // save the current scroll values\r\n    mStartX = startX;\r\n    mStartY = startY;\r\n    mCurX = startX;\r\n    mCurY = startY;\r\n    m"}], "metadata": {"task_id": "vanilla/80", "ground_truth": "    System.arraycopy(mSnapshotSongs, 0, mCacheSongs, 0, 3);\r\n    finalizeScroll();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\CoverView.java"}}
{"prompt": "\n import android.graphics.Bitmap\npublic void finalizeScroll() {\r\n    for (int i = 0; i <= 2; i++) {\r\n        mSnapshotBitmaps[i] = null;\r", "choices": [{"text": "}\r\n}\n"}], "metadata": {"task_id": "vanilla/81", "ground_truth": "        mSnapshotSongs[i] = null;\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\CoverView.java"}}
{"prompt": "\n @Override\r\npublic void abortAnimation() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.abortAnimation();\r\n}\r\n\r\n@Override\r\npublic void clearAnimation() {\r\n// TODO Auto-generated method stub\r\nsuper.clearAnimation();\r\n}\r\n\r\n@Override\r\npublic void clearAnimation(boolean cancel) {\r\n// TODO Auto-generated method stub\r\nsuper.clearAnimation(cancel);\r\n}\r\n\r\n@Override\r\npublic void clearAnimation(boolean cancel, boolean clearParent) {\r\n// TODO Auto-generated method stub\r\nsuper.clearAnimation(cancel, clearParent);\r\n}"}], "metadata": {"task_id": "vanilla/82", "ground_truth": "    mCoverIntent = 0;\r\n    super.abortAnimation();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\CoverView.java"}}
{"prompt": "\n @Override\r\npublic void setChecked(boolean checked) {\r", "choices": [{"text": "super.setChecked(checked);\r\nif (checked) {\r\nmCheckedTextView.setCompoundDrawablesWithIntrinsicBounds(mCheckedIcon, 0, 0, 0);\r\n} else {\r\nmCheckedTextView.setCompoundDrawablesWithIntrinsicBounds(mUncheckedIcon, 0, 0, 0);\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "vanilla/85", "ground_truth": "    mChecked = checked;\r\n    mCheckBox.setChecked(mChecked);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\DraggableRow.java"}}
{"prompt": "\n /**\r\n * Change visibility of dragger element\r\n *\r\n * @param state shows or hides the dragger\r\n */\r\npublic void showDragger(boolean state) {\r", "choices": [{"text": "if (dragger!= null) {\r\ndragger.setVisibility(state? View.VISIBLE : View.GONE);\r\n}\r\n}\r\n/**\r\n * Change visibility of dragger element\r\n *\r\n * @param state shows or hides the dragger\r\n */\r\npublic void showDragger(boolean state, boolean animate) {\r\nif (dragger!= null) {\r\nif (animate) {\r\ndragger.animate().alpha(state? 1 : 0).setDuration(200).start();\r\n} else {\r\ndragger.setVisibility"}], "metadata": {"task_id": "vanilla/86", "ground_truth": "    mDragger.setVisibility(state ? View.VISIBLE : View.GONE);\r\n    adjustPadding();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\DraggableRow.java"}}
{"prompt": "\n /**\r\n * Change visibility of duration textview\r\n *\r\n * @param state shows or hides the textview\r\n */\r\npublic void showDuration(boolean state) {\r", "choices": [{"text": "if (state) {\r\nduration.setVisibility(View.VISIBLE);\r\n} else {\r\nduration.setVisibility(View.GONE);\r\n}\r\n}\r\n\r\n/**\r\n * Change visibility of duration textview\r\n *\r\n * @param state shows or hides the textview\r\n */\r\npublic void showDuration(int state) {\r\nif (state == 0) {\r\nduration.setVisibility(View.GONE);\r\n} else {\r\nduration.setVisibility(View.VISIBLE);\r\n}\r\n}\r\n\r\n/**\r\n * Change visibility of duration textview\r\n"}], "metadata": {"task_id": "vanilla/87", "ground_truth": "    mDurationView.setVisibility(state ? View.VISIBLE : View.GONE);\r\n    adjustPadding();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\DraggableRow.java"}}
{"prompt": "\n import android.view.View\nimport android.util.TypedValue\nimport android.content.Context\npublic void setDraggerOnClickListener(View.OnClickListener listener) {\r\n    TypedValue v = new TypedValue();\r\n    getContext().getTheme().resolveAttribute(android.R.attr.selectableItemBackground, v, true);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "vanilla/88", "ground_truth": "    mDragger.setBackgroundResource(v.resourceId);\r\n    mDragger.setOnClickListener(listener);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\DraggableRow.java"}}
{"prompt": "\n import android.widget.ListView\nimport android.view.View\n/**\r\n * Register a view for long click observation.\r\n *\r\n * @param view the view to listen for long clicks\r\n */\r\npublic void registerForOnItemLongClickListener(ListView view) {\r", "choices": [{"text": "}\r\n/**\r\n * Register a view for long click observation.\r\n *\r\n * @param view the view to listen for long clicks\r\n * @param listener the listener to be notified when a long click occurs\r\n */\r\npublic void registerForOnItemLongClickListener(ListView view, OnItemLongClickListener listener) {\r\n}\r\n/**\r\n * Register a view for long click observation.\r\n *\r\n * @param view the view to listen for long clicks\r\n * @param listener the listener to be notified when a long click occurs\r\n * @param longPressTimeout the timeout in milliseconds for a long press\r\n"}], "metadata": {"task_id": "vanilla/92", "ground_truth": "    view.setOnItemLongClickListener(this);\r\n    view.setOnTouchListener(this);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ext\\CoordClickListener.java"}}
{"prompt": "\n import android.view.View.OnTouchListener\nimport android.view.View\nimport android.view.MotionEvent\n/**\r\n * Implementation of OnTouchListener interface\r\n */\r\n@Override\r\npublic boolean onTouch(View view, MotionEvent ev) {\r\n    mPosX = ev.getX();\r\n    mPosY = ev.getY();\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/93", "ground_truth": "    // Not handled: we just observe.\r\n    return false;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ext\\CoordClickListener.java"}}
{"prompt": "\n import java.util.ArrayList\nimport java.io.File\nimport android.content.SharedPreferences\n@Override\r\npublic void onFolderPicked(File directory, ArrayList<String> a, ArrayList<String> b) {\r\n    SharedPreferences.Editor editor = SharedPrefHelper.getSettings(this).edit();\r\n    editor.putString(PrefKeys.FILESYSTEM_BROWSE_START, directory.getAbsolutePath());\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/95", "ground_truth": "    editor.apply();\r\n    finish();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FilebrowserStartActivity.java"}}
{"prompt": "\n import java.io.File\n@Override\r\npublic boolean accept(File dir, String filename) {\r\n    if (filename.charAt(0) == '.')\r\n        return false;\r\n    if (mFilter != null) {\r\n        filename = filename.toLowerCase();\r\n        for (String term : mFilter) {\r\n            if (!filename.contains(term))\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/96", "ground_truth": "                return false;\r\n        }\r\n    }\r\n    return true;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FileSystemAdapter.java"}}
{"prompt": "\n @Override\r\npublic void commitQuery(Object data) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\n}\r\n@Override\r\npublic void commitQuery(Object data, String query) {\r\n// TODO Auto-generated method stub\r\n}\r\n@Override\r\npublic void commitQuery(Object data, String query, String[] params) {\r\n// TODO Auto-generated method stub\r\n}\r\n@Override\r\npublic void commitQuery(Object data, String query, String[] params,\r\nString[] types) {\r\n// TODO Auto-generated method stub\r\n}\r\n@Override\r\npublic void commitQuery(Object data"}], "metadata": {"task_id": "vanilla/97", "ground_truth": "    mFiles = (File[]) data;\r\n    notifyDataSetChanged();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FileSystemAdapter.java"}}
{"prompt": "\n @Override\r\npublic void clear() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}"}], "metadata": {"task_id": "vanilla/98", "ground_truth": "    mFiles = null;\r\n    notifyDataSetInvalidated();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FileSystemAdapter.java"}}
{"prompt": "\n import java.io.File\n@Override\r\npublic int getCount() {\r\n    if (mFiles == null)\r", "choices": [{"text": "return 0;\r\nreturn mFiles.length;\r\n}\r\n@Override\r\npublic Object getItem(int position) {\r\nreturn mFiles[position];\r\n}\r\n@Override\r\npublic long getItemId(int position) {\r\nreturn position;\r\n}\r\n@Override\r\npublic View getView(int position, View convertView, ViewGroup parent) {\r\nif (convertView == null) {\r\nconvertView = mInflater.inflate(R.layout.list_item, parent, false);\r\n}\r\nTextView textView = (TextView)"}], "metadata": {"task_id": "vanilla/99", "ground_truth": "        return 0;\r\n    return mFiles.length;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FileSystemAdapter.java"}}
{"prompt": "\n @Override\r\npublic void setFilter(String filter) {\r\n    if (filter == null)\r\n        mFilter = null;\r", "choices": [{"text": "else\r\n        mFilter = filter.toLowerCase();\r\n}\r\n"}], "metadata": {"task_id": "vanilla/100", "ground_truth": "    else\r\n        mFilter = SPACE_SPLIT.split(filter.toLowerCase());\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FileSystemAdapter.java"}}
{"prompt": "\n import java.io.File\n@Override\r\npublic Limiter buildLimiter(long id) {\r\n    for (int i = 0; i < mFiles.length; i++) {\r\n        if (id == getItemId(i)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/104", "ground_truth": "            return buildLimiter(mFiles[i]);\r\n        }\r\n    }\r\n    return null;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FileSystemAdapter.java"}}
{"prompt": "\nprivate static final Pattern GUESS_IMAGE = Pattern.compile(\"^(.+\\\\.(gif|jpe?g|png|bmp|tiff?|webp))$\", Pattern.CASE_INSENSITIVE);\nprivate static final Pattern GUESS_MUSIC = Pattern.compile(\"^(.+\\\\.(mp3|ogg|mka|opus|flac|aac|m4a|wav))$\", Pattern.CASE_INSENSITIVE);\nprivate static final Pattern SPACE_SPLIT = Pattern.compile(\"\\\\s+\");\n @Override\r\npublic void onEvent(int event, String path) {\r\n    if (// Android bug? We seem to receive MOVE_SELF events\r", "choices": [{"text": "event == FileObserver.MOVE_SELF) {\r\n        return;\r\n    }\r\n    if (event == FileObserver.CREATE) {\r\n        // We only care about new files\r\n        return;\r\n    }\r\n    if (event == FileObserver.DELETE) {\r\n        // We only care about deleted files\r\n        return;\r\n    }\r\n    if (event == FileObserver.DELETE_SELF) {\r\n        // We only care about deleted files\r\n        return;\r\n    }\r\n    if (event == FileObserver.MODIFY) {\r\n        // We only care about modified files\r\n        return;\r\n    }\r\n    if (event == FileObserver.MOVED_FROM) {"}], "metadata": {"task_id": "vanilla/105", "ground_truth": "    path != null)\r\n        mActivity.mPagerAdapter.postRequestRequery(FileSystemAdapter.this);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FileSystemAdapter.java"}}
{"prompt": "\n /**\r\n * Returns all songs represented by this adapter.\r\n * Note that this will do a recursive query!\r\n *\r\n * @param projection the projection to use\r\n * @return a query task\r\n */\r\n@Override\r\npublic QueryTask buildSongQuery(String[] projection) {\r", "choices": [{"text": "return new QueryTask(this, projection);\r\n}\r\n\r\n/**\r\n * Returns all songs represented by this adapter.\r\n * Note that this will do a recursive query!\r\n *\r\n * @param projection the projection to use\r\n * @param sortOrder the sort order to use\r\n * @return a query task\r\n */\r\n@Override\r\npublic QueryTask buildSongQuery(String[] projection, String sortOrder) {\r\nreturn new QueryTask(this, projection, sortOrder);\r\n}\r\n\r\n/**\r\n * Returns all songs represented by this adapter.\r\n * Note that this will do a"}], "metadata": {"task_id": "vanilla/106", "ground_truth": "    File path = getLimiterPath();\r\n    return MediaUtils.buildFileQuery(path.getPath(), projection, true);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FileSystemAdapter.java"}}
{"prompt": "\n import java.io.File\nimport android.content.Intent\n/**\r\n * A row was clicked: this was dispatched by LibraryPagerAdapter\r\n *\r\n * @param intent likely created by createData()\r\n */\r\npublic void onItemClicked(Intent intent) {\r\n    boolean isFolder = intent.getBooleanExtra(LibraryAdapter.DATA_EXPANDABLE, false);\r\n    boolean isHeader = intent.getLongExtra(LibraryAdapter.DATA_ID, LibraryAdapter.INVALID_ID) == LibraryAdapter.HEADER_ID;\r\n    if (!isHeader && FileUtils.canDispatchIntent(intent) && FileUtils.dispatchIntent(mActivity, intent))\r\n        return;\r\n    if (isFolder) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/107", "ground_truth": "        mActivity.onItemExpanded(intent);\r\n    } else {\r\n        mActivity.onItemClicked(intent);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FileSystemAdapter.java"}}
{"prompt": "\n import android.os.Build\nimport java.io.File\n/**\r\n * Converts common path separator characters ('/' or '\\\\') to the value of File.separatorChar.\r\n *\r\n * @param path The path to convert directory separators within.\r\n * @return A path with all valid separators normalized to the system's.\r\n */\r\npublic static String normalizeDirectorySeparators(String path) {\r\n    final StringBuilder sb = new StringBuilder(path);\r\n    for (int i = 0; i < sb.length(); i++) {\r\n        final char originalChar = sb.charAt(i);\r\n        if (originalChar == '/' || originalChar == '\\\\') {\r", "choices": [{"text": "//            sb.setCharAt(i, File.separatorChar);\r\n            sb.setCharAt(i, File.separatorChar);\r\n        }\r\n    }\r\n    return sb.toString();\r\n}\n"}], "metadata": {"task_id": "vanilla/109", "ground_truth": "            sb.setCharAt(i, File.separatorChar);\r\n        }\r\n    }\r\n    return sb.toString();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FileUtils.java"}}
{"prompt": "\n import android.os.Build\nimport java.nio.file.Path\nimport java.io.File\n/**\r\n * Utility function to prepend n-parent directory traversals to a path.\r\n *\r\n * @param path A relative path to traverse upwards from within.\r\n * @param traversalCount The number of directories to navigate upwards.\r\n * @return The result of creating the relative path.\r\n */\r\nprivate static String traversePathUpwards(String path, int traversalCount) {\r\n    if (traversalCount < 0)\r\n        throw new IllegalArgumentException(\"Cannot descend into the directory structure.\");\r\n    if (traversalCount == 0)\r\n        return path;\r\n    StringBuilder sb = new StringBuilder((FileUtils.NAME_PARENT_FOLDER.length() + 1) * traversalCount + path.length());\r\n    for (int i = 0; i < traversalCount; i++) {\r\n        sb.append(FileUtils.NAME_PARENT_FOLDER);\r", "choices": [{"text": "//        sb.append(File.separatorChar);\r\n    }\r\n    sb.append(path);\r\n    return sb.toString();\r\n}\r\n/**\r\n * Utility function to prepend n-parent directory traversals to a path.\r\n *\r\n * @param path A relative path to traverse upwards from within.\r\n * @param traversalCount The number of directories to navigate upwards.\r\n * @return The result of creating the relative path.\r\n */\r\nprivate static Path traversePathUpwards(Path path, int traversalCount) {\r\n    if (traversalCount < 0)\r\n        throw new IllegalArgumentException(\""}], "metadata": {"task_id": "vanilla/110", "ground_truth": "        sb.append(File.separatorChar);\r\n    }\r\n    sb.append(path);\r\n    return sb.toString();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FileUtils.java"}}
{"prompt": "\n import android.net.Uri\nimport android.content.Intent\nimport java.net.URLConnection\nimport java.io.File\n/**\r\n * Opens an intent in an external application\r\n *\r\n * @param activity The library activity to use\r\n * @param intent The intent to examine and launch\r\n * @return bool true if the intent was dispatched\r\n */\r\npublic static boolean dispatchIntent(LibraryActivity activity, Intent intent) {\r\n    boolean handled = true;\r\n    String path = intent.getStringExtra(LibraryAdapter.DATA_FILE);\r\n    String mimeGuess = URLConnection.guessContentTypeFromName(path);\r\n    File file = new File(path);\r\n    Uri uri = Uri.fromFile(file);\r\n    Intent extView = new Intent(Intent.ACTION_VIEW);\r\n    extView.setDataAndType(uri, mimeGuess);\r\n    try {\r\n        activity.startActivity(extView);\r", "choices": [{"text": "//        activity.startActivity(Intent.createChooser(extView, \"Open with\"));\r\n    } catch (ActivityNotFoundException e) {\r\n        handled = false;\r\n    }\r\n    return handled;\r\n}\n"}], "metadata": {"task_id": "vanilla/111", "ground_truth": "    } catch (Exception ActivityNotFoundException) {\r\n        handled = false;\r\n    }\r\n    return handled;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FileUtils.java"}}
{"prompt": "\n import java.io.File\n/**\r\n * Return the file extension for a given filename (including dot).\r\n * Empty string is returned if there is no extension.\r\n */\r\npublic static String getFileExtension(String filename) {\r", "choices": [{"text": "int i = filename.lastIndexOf('.');\r\nif (i > 0 && i < filename.length() - 1) {\r\nreturn filename.substring(i);\r\n}\r\nreturn \"\";\r\n}\r\n/**\r\n * Return the file extension for a given filename (including dot).\r\n * Empty string is returned if there is no extension.\r\n */\r\npublic static String getFileExtension(File file) {\r\nreturn getFileExtension(file.getName());\r\n}\r\n/**\r\n * Return the file extension for a given filename (including dot).\r\n * Empty string is returned if there"}], "metadata": {"task_id": "vanilla/113", "ground_truth": "    int index = filename.lastIndexOf('.');\r\n    return index > 0 ? filename.substring(index) : \"\";\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FileUtils.java"}}
{"prompt": "\n import android.text.Editable\n@Override\r\npublic void afterTextChanged(Editable s) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\n}\r\n});\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}"}], "metadata": {"task_id": "vanilla/115", "ground_truth": "    final File dir = new File(s.toString());\r\n    setCurrentDir(dir);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FolderPickerActivity.java"}}
{"prompt": "\n import android.view.Menu\nimport android.view.MenuItem\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    if (item.getItemId() == android.R.id.home) {\r\n        finish();\r", "choices": [{"text": "}\r\nreturn super.onOptionsItemSelected(item);\r\n}\r\n}\n"}], "metadata": {"task_id": "vanilla/118", "ground_truth": "        return true;\r\n    } else {\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FolderPickerActivity.java"}}
{"prompt": "\n import android.widget.AdapterView\nimport android.view.View\nimport java.io.File\n/**\r\n * Called if user taps a row\r\n */\r\n@Override\r\npublic void onItemClick(AdapterView<?> parent, View view, int pos, long id) {\r\n    FolderPickerAdapter.Item item = mListAdapter.getItem(pos);\r\n    File curPath = mListAdapter.getCurrentDir();\r\n    File newPath = null;\r\n    if (item.file == null) {\r\n        // This is the '..' entry\r\n        newPath = curPath.getParentFile();\r\n    } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/120", "ground_truth": "        newPath = new File(curPath, item.name);\r\n    }\r\n    if (newPath != null)\r\n        setCurrentDir(newPath);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FolderPickerActivity.java"}}
{"prompt": "\n import android.content.DialogInterface\npublic void onClick(DialogInterface dialog, int which) {\r\n    switch(which) {\r\n        case 0:\r\n            setFolderState(path, FolderState.INCLUDE);\r\n            break;\r\n        case 1:\r\n            setFolderState(path, FolderState.EXCLUDE);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/121", "ground_truth": "            break;\r\n        default:\r\n            setFolderState(path, FolderState.NEUTRAL);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FolderPickerActivity.java"}}
{"prompt": "\n import java.io.File\n/**\r\n * Changes the currently active directory\r\n */\r\npublic void setCurrentDir(File dir) {\r", "choices": [{"text": "}\r\n/**\r\n * Returns the current directory\r\n */\r\npublic File getCurrentDir() {\r\n}\r\n/**\r\n * Returns the current directory as a string\r\n */\r\npublic String getCurrentDirAsString() {\r\n}\r\n/**\r\n * Returns the current directory as a string\r\n */\r\npublic String getCurrentDirAsString() {\r\n}\r\n/**\r\n * Returns the current directory as a string\r\n */\r\npublic String getCurrentDirAsString() {\r\n}\r\n/**\r\n * Returns the current directory as a string\r\n */\r\npublic String getCurrentDirAsString() {\r\n}"}], "metadata": {"task_id": "vanilla/122", "ground_truth": "    mCurrentDir = dir;\r\n    refresh();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FolderPickerAdapter.java"}}
{"prompt": "\n import java.util.List\nimport java.util.ArrayList\n/**\r\n * Sets the included dirlist\r\n *\r\n * @param list the arraylist to use\r\n */\r\npublic void setIncludedDirs(ArrayList<String> list) {\r", "choices": [{"text": "includedDirs = list;\r\n}\r\n/**\r\n * Sets the excluded dirlist\r\n *\r\n * @param list the arraylist to use\r\n */\r\npublic void setExcludedDirs(ArrayList<String> list) {\r\nexcludedDirs = list;\r\n}\r\n/**\r\n * Sets the included filelist\r\n *\r\n * @param list the arraylist to use\r\n */\r\npublic void setIncludedFiles(ArrayList<String> list) {\r\nincludedFiles = list;\r\n}\r\n/**\r\n * Sets the excluded filelist\r\n *\r\n * @param list the arraylist to"}], "metadata": {"task_id": "vanilla/123", "ground_truth": "    mIncludedDirs = verifyDirs(list);\r\n    refresh();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FolderPickerAdapter.java"}}
{"prompt": "\n import java.util.List\nimport java.util.ArrayList\n/**\r\n * Sets the excluded dirlist\r\n *\r\n * @param list the arraylist to use\r\n */\r\npublic void setExcludedDirs(ArrayList<String> list) {\r", "choices": [{"text": "excludedDirs = list;\r\n}\r\n/**\r\n * Sets the excluded filelist\r\n *\r\n * @param list the arraylist to use\r\n */\r\npublic void setExcludedFiles(ArrayList<String> list) {\r\nexcludedFiles = list;\r\n}\r\n/**\r\n * Sets the excluded filelist\r\n *\r\n * @param list the arraylist to use\r\n */\r\npublic void setExcludedFiles(List<String> list) {\r\nexcludedFiles = new ArrayList<String>(list);\r\n}\r\n/**\r\n * Sets the excluded dirlist\r\n *\r\n * @param"}], "metadata": {"task_id": "vanilla/124", "ground_truth": "    mExcludedDirs = verifyDirs(list);\r\n    refresh();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FolderPickerAdapter.java"}}
{"prompt": "\n import java.util.List\nimport java.util.ArrayList\nimport java.io.File\n/**\r\n * Returns list, weeding out non-existing or invalid dirs\r\n *\r\n * @param list the list to check\r\n * @return list the checked list\r\n */\r\nprivate ArrayList<String> verifyDirs(ArrayList<String> list) {\r\n    ArrayList<String> result = new ArrayList<String>();\r\n    for (String path : list) {\r\n        File file = new File(path);\r", "choices": [{"text": "//        if (file.exists() && file.isDirectory()) {\r\n//            result.add(path);\r\n//        }\r\n    }\r\n    return result;\r\n}\n"}], "metadata": {"task_id": "vanilla/125", "ground_truth": "        if (file.isDirectory())\r\n            result.add(path);\r\n    }\r\n    return result;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FolderPickerAdapter.java"}}
{"prompt": "\n import android.content.Context\nimport android.appwidget.AppWidgetManager\n@Override\r\npublic void onUpdate(Context context, AppWidgetManager manager, int[] ids) {\r\n    Song song = null;\r\n    int state = 0;\r\n    if (PlaybackService.hasInstance()) {\r\n        PlaybackService service = PlaybackService.get(context);\r\n        song = service.getSong(0);\r", "choices": [{"text": "//        state = service.getState();\r\n    }\r\n    RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.widget_layout);\r\n    views.setTextViewText(R.id.widget_song_title, song.getTitle());\r\n    views.setTextViewText(R.id.widget_song_artist, song.getArtist());\r\n    views.setTextViewText(R.id.widget_song_album, song.getAlbum());\r\n    views.setImageViewResource(R.id.widget_play_pause, R.drawable.ic_play_arrow_white_2"}], "metadata": {"task_id": "vanilla/126", "ground_truth": "        state = service.getState();\r\n    }\r\n    sEnabled = true;\r\n    updateWidget(context, manager, song, state);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FourLongWidget.java"}}
{"prompt": "\n import android.content.Context\nimport android.appwidget.AppWidgetManager\n@Override\r\npublic void onUpdate(Context context, AppWidgetManager manager, int[] ids) {\r\n    Song song = null;\r\n    int state = 0;\r\n    if (PlaybackService.hasInstance()) {\r\n        PlaybackService service = PlaybackService.get(context);\r\n        song = service.getSong(0);\r", "choices": [{"text": "//        state = service.getState();\r\n    }\r\n    RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.widget_layout);\r\n    views.setTextViewText(R.id.widget_song_title, song.getTitle());\r\n    views.setTextViewText(R.id.widget_song_artist, song.getArtist());\r\n    views.setTextViewText(R.id.widget_song_album, song.getAlbum());\r\n    views.setImageViewResource(R.id.widget_play_pause, R.drawable.ic_play_arrow_white_2"}], "metadata": {"task_id": "vanilla/127", "ground_truth": "        state = service.getState();\r\n    }\r\n    sEnabled = true;\r\n    updateWidget(context, manager, song, state);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FourSquareWidget.java"}}
{"prompt": "\n import android.content.Context\nimport android.appwidget.AppWidgetManager\n@Override\r\npublic void onUpdate(Context context, AppWidgetManager manager, int[] ids) {\r\n    Song song = null;\r\n    int state = 0;\r\n    if (PlaybackService.hasInstance()) {\r\n        PlaybackService service = PlaybackService.get(context);\r\n        song = service.getSong(0);\r", "choices": [{"text": "//        state = service.getState();\r\n    }\r\n    RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.widget_layout);\r\n    views.setTextViewText(R.id.widget_song_title, song.getTitle());\r\n    views.setTextViewText(R.id.widget_song_artist, song.getArtist());\r\n    views.setTextViewText(R.id.widget_song_album, song.getAlbum());\r\n    views.setImageViewResource(R.id.widget_play_pause, R.drawable.ic_play_arrow_white_2"}], "metadata": {"task_id": "vanilla/128", "ground_truth": "        state = service.getState();\r\n    }\r\n    sEnabled = true;\r\n    updateWidget(context, manager, song, state);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FourWhiteWidget.java"}}
{"prompt": "\n import android.os.Message\n/**\r\n * Hide the message overlay, if it exists.\r\n */\r\nprivate void hideMessageOverlay() {\r", "choices": [{"text": "if (mMessageOverlay!= null) {\r\nmMessageOverlay.setVisibility(View.GONE);\r\n}\r\n}\r\n/**\r\n * Show the message overlay, if it exists.\r\n */\r\nprivate void showMessageOverlay() {\r\nif (mMessageOverlay!= null) {\r\nmMessageOverlay.setVisibility(View.VISIBLE);\r\n}\r\n}\r\n/**\r\n * Show the message overlay, if it exists.\r\n */\r\nprivate void showMessageOverlay(String message) {\r\nif (mMessageOverlay!= null) {\r\nmMessageOverlay.setVisibility"}], "metadata": {"task_id": "vanilla/129", "ground_truth": "    if (mOverlayText != null)\r\n        mOverlayText.setVisibility(View.GONE);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FullPlaybackActivity.java"}}
{"prompt": "\nprivate boolean mExtraInfoVisible;\nprivate TextView mOverlayText;\nprivate TextView mTitle;\n @Override\r\npublic void onPositionInfoChanged() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.onPositionInfoChanged();\r\nif (mExtraInfoVisible) {\r\nmOverlayText.setText(getExtraInfo());\r\n}\r\n}\r\n @Override\r\npublic void onStatusChanged(String provider, int status, Bundle extras) {\r\n// TODO Auto-generated method stub\r\nsuper.onStatusChanged(provider, status, extras);\r\nif (mExtraInfoVisible) {\r\nmOverlayText.setText(getExtraInfo());\r\n}\r\n}\r\n @Override\r\npublic void onProviderEnabled("}], "metadata": {"task_id": "vanilla/130", "ground_truth": "    if (mQueuePosView != null)\r\n        mUiHandler.sendEmptyMessage(MSG_UPDATE_POSITION);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FullPlaybackActivity.java"}}
{"prompt": "\nprivate TableLayout mInfoTable;\nprivate TextView mQueuePosView;\npublic static final int DISPLAY_INFO_OVERLAP = 0;\n @Override\r\npublic boolean onSearchRequested() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nreturn super.onSearchRequested();\r\n}\r\n\n @Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\nsuper.onCreate(savedInstanceState);\r\nsetContentView(R.layout.main);\r\nmInfoTable = (TableLayout) findViewById(R.id.info_table);\r\nmQueuePosView = (TextView) findViewById(R.id.queue_pos);\r\nmQueuePosView.setText(String.format(getString(R.string.queue_pos), 0));\r\nmQueuePosView.setVisibility("}], "metadata": {"task_id": "vanilla/132", "ground_truth": "    openLibrary(null, -1);\r\n    return false;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FullPlaybackActivity.java"}}
{"prompt": "\n import android.view.View\nimport android.view.KeyEvent\nimport android.os.Message\n@Override\r\npublic boolean onKeyUp(int keyCode, KeyEvent event) {\r\n    switch(keyCode) {\r\n        case KeyEvent.KEYCODE_DPAD_CENTER:\r\n        case KeyEvent.KEYCODE_ENTER:\r\n            setControlsVisible(!mControlsVisible);\r\n            mHandler.sendEmptyMessage(MSG_SAVE_CONTROLS);\r\n            return true;\r\n        case KeyEvent.KEYCODE_BACK:\r\n            if (mSlidingView.isShrinkable()) {\r\n                mSlidingView.hideSlide();\r", "choices": [{"text": "//                mSlidingView.setShrinkable(false);\r\n                return true;\r\n            }\r\n            break;\r\n    }\r\n    return super.onKeyUp(keyCode, event);\r\n}\n"}], "metadata": {"task_id": "vanilla/133", "ground_truth": "                return true;\r\n            }\r\n    }\r\n    return super.onKeyUp(keyCode, event);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FullPlaybackActivity.java"}}
{"prompt": "\n import android.view.View\n/**\r\n * Set the visibility of the controls views.\r\n *\r\n * @param visible True to show, false to hide\r\n */\r\nprivate void setControlsVisible(boolean visible) {\r\n    int mode = visible ? View.VISIBLE : View.GONE;\r\n    mSlidingView.setVisibility(mode);\r", "choices": [{"text": "\n import android.view.View\n/**\r\n * Set the visibility of the controls views.\r\n *\r\n * @param visible True to show, false to hide\r\n */\r\nprivate void setControlsVisible(boolean visible) {\r\n    int mode = visible? View.VISIBLE : View.GONE;\r\n    mSlidingView.setVisibility(mode);\r\n}\r\n"}], "metadata": {"task_id": "vanilla/134", "ground_truth": "    mControlsVisible = visible;\r\n    if (visible) {\r\n        mPlayPauseButton.requestFocus();\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FullPlaybackActivity.java"}}
{"prompt": "\n import android.view.View\nimport android.os.Message\n@Override\r\nprotected void performAction(Action action) {\r\n    switch(action) {\r\n        case ToggleControls:\r\n            setControlsVisible(!mControlsVisible);\r\n            mHandler.sendEmptyMessage(MSG_SAVE_CONTROLS);\r\n            break;\r\n        case ShowQueue:\r\n            mSlidingView.expandSlide();\r", "choices": [{"text": "//            mSlidingView.expandSlide();\r\n            break;\r\n        case HideQueue:\r\n            mSlidingView.collapseSlide();\r\n            break;\r\n        case ToggleQueue:\r\n            if (mSlidingView.isExpanded()) {\r\n                mSlidingView.collapseSlide();\r\n            } else {\r\n                mSlidingView.expandSlide();\r\n            }\r\n            break;\r\n        case TogglePlayPause:\r\n            if (mPlayer.isPlaying()) {\r\n                mPlayer.pause();\r\n            } else {\r\n                mPlayer.start();\r\n            }\r\n            break;\r\n        case ToggleShuffle:\r\n            mPlayer.setShuffle(!mPlayer.is"}], "metadata": {"task_id": "vanilla/135", "ground_truth": "            break;\r\n        default:\r\n            super.performAction(action);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FullPlaybackActivity.java"}}
{"prompt": "\n import android.view.View\n@Override\r\npublic void onClick(View view) {\r\n    if (view == mOverlayText && (mState & PlaybackService.FLAG_EMPTY_QUEUE) != 0) {\r\n        setState(PlaybackService.get(this).setFinishAction(SongTimeline.FINISH_RANDOM));\r\n    } else if (view == mCoverView) {\r\n        performAction(mCoverPressAction);\r\n    } else if (view.getId() == R.id.info_table) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/136", "ground_truth": "        openLibrary(mCurrentSong, MediaUtils.TYPE_ALBUM);\r\n    } else {\r\n        super.onClick(view);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FullPlaybackActivity.java"}}
{"prompt": "\n import android.view.View\nimport android.os.Message\n@Override\r\npublic boolean onLongClick(View view) {\r\n    switch(view.getId()) {\r\n        case R.id.cover_view:\r\n            performAction(mCoverLongPressAction);\r\n            break;\r\n        case R.id.info_table:\r\n            setExtraInfoVisible(!mExtraInfoVisible);\r\n            mHandler.sendEmptyMessage(MSG_SAVE_CONTROLS);\r\n            break;\r", "choices": [{"text": "//        case R.id.info_table_header:\r\n//            setExtraInfoVisible(!mExtraInfoVisible);\r\n//            mHandler.sendEmptyMessage(MSG_SAVE_CONTROLS);\r\n//            break;\r\n        case R.id.info_table_header:\r\n            setExtraInfoVisible(!mExtraInfoVisible);\r\n            mHandler.sendEmptyMessage(MSG_SAVE_CONTROLS);\r\n            break;\r\n        case R.id.info_table_footer:\r\n            setExtraInfoVisible(!mExtraInfoVisible);\r\n            mHandler.sendEmptyMessage(MSG_SAVE_"}], "metadata": {"task_id": "vanilla/137", "ground_truth": "        default:\r\n            return false;\r\n    }\r\n    return true;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\FullPlaybackActivity.java"}}
{"prompt": "\n @Override\r\nprotected void onDialogClosed(boolean positiveResult) {\r\n    if (positiveResult && shouldPersist()) {\r\n        persistInt(mValue);\r", "choices": [{"text": "}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "vanilla/140", "ground_truth": "        notifyChanged();\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\IdlePreference.java"}}
{"prompt": "\n import android.widget.SeekBar\n@Override\r\npublic void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\r\n    // Approximate an exponential curve with x^4. Produces a value from MIN-MAX.\r\n    if (fromUser) {\r\n        float value = seekBar.getProgress() / 1000.0f;\r\n        value *= value;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/141", "ground_truth": "        value *= value;\r\n        mValue = (int) (value * (MAX - MIN)) + MIN;\r\n        updateText();\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\IdlePreference.java"}}
{"prompt": "\n import android.widget.EditText\nimport android.view.View\nimport android.app.Dialog\n@Override\r\npublic void onTextChanged(CharSequence s, int start, int before, int count) {\r\n    EditText editText = (EditText) getDialog().getCurrentFocus();\r\n    if (editText.length() == 2) {\r\n        View view = editText.focusSearch(View.FOCUS_RIGHT);\r", "choices": [{"text": "if (view!= null) {\r\n    view.requestFocus();\r\n}\r\n    }\r\n}\n"}], "metadata": {"task_id": "vanilla/142", "ground_truth": "        if (view != null) {\r\n            view.requestFocus();\r\n        }\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\JumpToTimeDialog.java"}}
{"prompt": "\n /**\r\n * Parses the given string as an integer. This returns 0 if the given string is empty.\r\n *\r\n * @param s the string to parse\r\n * @return the integer result\r\n */\r\nstatic int parseInteger(String s) {\r\n    if (s.length() == 0) {\r\n        return 0;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/143", "ground_truth": "    }\r\n    return Integer.parseInt(s);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\JumpToTimeDialog.java"}}
{"prompt": "\n import android.util.LruCache\nimport android.graphics.drawable.BitmapDrawable\nimport android.graphics.drawable.TransitionDrawable\nimport android.graphics.drawable.Drawable\nimport android.graphics.Bitmap\n/**\r\n * Updates the view with a cached bitmap\r\n * A fallback image will be used on cache miss\r\n *\r\n * @param key The cover message containing the cache key and view to use\r\n */\r\npublic boolean drawFromCache(CoverCache.CoverKey key, boolean fadeIn) {\r\n    boolean cacheHit = true;\r\n    Bitmap bitmap = sBitmapLruCache.get(key);\r\n    if (bitmap == null) {\r\n        cacheHit = false;\r\n    }\r\n    if (fadeIn) {\r\n        TransitionDrawable td = new TransitionDrawable(new Drawable[] { getDrawable(), (new BitmapDrawable(getResources(), bitmap)) });\r\n        setImageDrawable(td);\r\n        td.startTransition(120);\r", "choices": [{"text": "} else {\r\n        setImageBitmap(bitmap);\r\n    }\r\n    return cacheHit;\r\n}\r\n<file_sep>/app/src/main/java/com/example/android/musicplayer/MainActivity.java\npackage com.example.android.musicplayer;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.view.View;\nimport android.widget.Button;\n\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);"}], "metadata": {"task_id": "vanilla/145", "ground_truth": "    } else {\r\n        setImageBitmap(bitmap);\r\n    }\r\n    return cacheHit;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LazyCoverView.java"}}
{"prompt": "\n * Action for row click: play the row.\r\n * Action for row click: enqueue the row.\r\n * Action for row click: perform the last used action.\r\n @Override\r\npublic void onStart() {\r\n    super.onStart();\r\n    loadPreferences();\r", "choices": [{"text": "}\r\n\r\n@Override\r\npublic void onStop() {\r\n    super.onStop();\r\n    savePreferences();\r\n}\r\n\r\n@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n    savePreferences();\r\n}\r\n\r\n@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    savePreferences();\r\n}\r\n\r\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    loadPreferences();\r\n}\r\n\r\n@Override\r\npublic void onSaveInstanceState(Bundle outState) {\r\n    super.onSaveInstanceState(outState"}], "metadata": {"task_id": "vanilla/146", "ground_truth": "    loadTabOrder();\r\n    updateHeaders();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryActivity.java"}}
{"prompt": "\n /**\r\n * Load the tab order and update the tab bars if needed.\r\n */\r\nprivate void loadTabOrder() {\r\n    if (mPagerAdapter.loadTabOrder()) {\r\n        // Reinitializes all tabs\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/148", "ground_truth": "        mVanillaTabLayout.setViewPager(mViewPager);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryActivity.java"}}
{"prompt": "\n import android.content.SharedPreferences\nimport android.content.Intent\n/**\r\n * If this intent looks like a launch from icon/widget/etc, perform\r\n * launch actions.\r\n */\r\nprivate void checkForLaunch(Intent intent) {\r\n    SharedPreferences settings = SharedPrefHelper.getSettings(this);\r\n    if (settings.getBoolean(PrefKeys.PLAYBACK_ON_STARTUP, PrefDefaults.PLAYBACK_ON_STARTUP) && Intent.ACTION_MAIN.equals(intent.getAction())) {\r", "choices": [{"text": "//        if (settings.getBoolean(PrefKeys.PLAYBACK_ON_STARTUP, PrefDefaults.PLAYBACK_ON_STARTUP)) {\r\n            Intent i = new Intent(this, MainActivity.class);\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r\n            startActivity(i);\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "vanilla/149", "ground_truth": "        startActivity(new Intent(this, FullPlaybackActivity.class));\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryActivity.java"}}
{"prompt": " import android.content.Intent\n * Action for row click: play the row.\r\n * Action for row click: enqueue the row.\r\n * Action for row click: perform the last used action.\r\n@Override\r\npublic void onNewIntent(Intent intent) {\r\n    if (intent == null)\r\n        return;\r", "choices": [{"text": "}\r\n * @Override\r\npublic void onNewIntent(Intent intent) {\r\n    if (intent == null)\r\n        return;\r\n}\r\n * @Override\r\npublic void onNewIntent(Intent intent) {\r\n    if (intent == null)\r\n        return;\r\n}\r\n * @Override\r\npublic void onNewIntent(Intent intent) {\r\n    if (intent == null)\r\n        return;\r\n}\r\n * @Override\r\npublic void onNewIntent(Intent intent) {\r\n    if (intent == null)\r\n        return;\r\n}\r\n * @Override\r\npublic void onNew"}], "metadata": {"task_id": "vanilla/150", "ground_truth": "    checkForLaunch(intent);\r\n    loadLimiterIntent(intent);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryActivity.java"}}
{"prompt": "\n import android.view.KeyEvent\n@Override\r\npublic boolean onKeyDown(int keyCode, KeyEvent event) {\r\n    if (keyCode == KeyEvent.KEYCODE_DEL || keyCode == KeyEvent.KEYCODE_FORWARD_DEL)\r\n        // On ICS, EditText reports backspace events as unhandled despite\r\n        // actually handling them. To workaround, just assume the event was\r\n        // handled if we get here.\r", "choices": [{"text": "//        return true;\r\n        return false;\r\n    else\r\n        return super.onKeyDown(keyCode, event);\r\n}\r\n"}], "metadata": {"task_id": "vanilla/151", "ground_truth": "        return true;\r\n    if (super.onKeyDown(keyCode, event))\r\n        return true;\r\n    return false;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryActivity.java"}}
{"prompt": "\n import android.view.View\n/**\r\n * Open the playback activity and close any activities above it in the\r\n * stack.\r\n */\r\npublic void openPlaybackActivity() {\r\n    if (mSlidingView.isShrinkable())\r", "choices": [{"text": "//        mSlidingView.shrink();\r\n        mSlidingView.close();\r\n    Intent intent = new Intent(this, PlaybackActivity.class);\r\n    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n    startActivity(intent);\r\n}\r\n"}], "metadata": {"task_id": "vanilla/154", "ground_truth": "        mSlidingView.hideSlideDelayed();\r\n    startActivity(new Intent(this, FullPlaybackActivity.class));\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryActivity.java"}}
{"prompt": "\n import android.content.Intent\n/**\r\n * Called by LibraryAdapters when a row's expand arrow has been clicked.\r\n *\r\n * @param rowData The data for the row that was clicked.\r\n */\r\npublic void onItemExpanded(Intent rowData) {\r\n    int type = rowData.getIntExtra(LibraryAdapter.DATA_TYPE, MediaUtils.TYPE_INVALID);\r", "choices": [{"text": "}\r\n<file_sep>/app/src/main/java/com/example/android/apis/app/NotificationTest.java\n/*\n * Copyright (C) 2007 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n"}], "metadata": {"task_id": "vanilla/155", "ground_truth": "    if (type == MediaUtils.TYPE_PLAYLIST)\r\n        editPlaylist(rowData);\r\n    else\r\n        expand(rowData);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryActivity.java"}}
{"prompt": "\n import android.graphics.Bitmap\n/**\r\n * Updates mCover with the new bitmap, running in the UI thread\r\n *\r\n * @param cover the cover to set, will use a fallback drawable if null\r\n */\r\nprivate void updateCover(final Bitmap cover) {\r\n    runOnUiThread(new Runnable() {\r\n\r\n        @Override\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/156", "ground_truth": "        public void run() {\r\n            mBottomBarControls.setCover(cover);\r\n        }\r\n    });\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryActivity.java"}}
{"prompt": "\n import android.content.Intent\n/**\r\n * Open the playlist editor for the playlist with the given id.\r\n */\r\nprivate void editPlaylist(Intent rowData) {\r\n    Intent launch = new Intent(this, PlaylistActivity.class);\r\n    launch.putExtra(\"playlist\", rowData.getLongExtra(LibraryAdapter.DATA_ID, LibraryAdapter.INVALID_ID));\r", "choices": [{"text": "//    launch.putExtra(\"playlist\", rowData.getLongExtra(LibraryAdapter.DATA_ID, LibraryAdapter.INVALID_ID));\r\n    startActivity(launch);\r\n}\n"}], "metadata": {"task_id": "vanilla/157", "ground_truth": "    launch.putExtra(\"title\", rowData.getStringExtra(LibraryAdapter.DATA_TITLE));\r\n    startActivity(launch);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryActivity.java"}}
{"prompt": "\n import android.widget.SearchView\nimport android.view.View\n/**\r\n * Callback of mSearchView while user types in text\r\n */\r\n@Override\r\npublic boolean onQueryTextChange(String newText) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nreturn false;\r\n}\r\n/**\r\n * Callback of mSearchView while user clicks on search button\r\n */\r\n@Override\r\npublic boolean onQueryTextSubmit(String query) {\r\n// TODO Auto-generated method stub\r\nreturn false;\r\n}\r\n/**\r\n * Callback of mSearchView while user clicks on close button\r\n */\r\n@Override\r\npublic boolean onQueryTextCleared() {\r\n// TODO Auto-generated method stub\r\nreturn false;\r\n}\r\n}\r\n<file_sep>/app/src/"}], "metadata": {"task_id": "vanilla/161", "ground_truth": "    mPagerAdapter.setFilter(newText);\r\n    return true;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryActivity.java"}}
{"prompt": "\n import android.widget.SearchView\nimport android.view.View\n/**\r\n * Callback of mSearchViews submit action\r\n */\r\n@Override\r\npublic boolean onQueryTextSubmit(String query) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nreturn false;\r\n}\r\n/**\r\n * Callback of mSearchViews text change action\r\n */\r\n@Override\r\npublic boolean onQueryTextChange(String newText) {\r\n// TODO Auto-generated method stub\r\nreturn false;\r\n}\r\n}\r\n<file_sep>/app/src/main/java/com/example/android/sunshine/app/MainActivity.java\npackage com.example.android.sunshine.app;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport"}], "metadata": {"task_id": "vanilla/162", "ground_truth": "    mPagerAdapter.setFilter(query);\r\n    return true;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryActivity.java"}}
{"prompt": "\npublic static final int ACTION_PLAY = 0;\npublic static final int ACTION_LAST_USED = 2;\n * NOTE: ACTION_* must be in sync with default_action_entries\r\n @Override\r\npublic void onMediaChange() {\r", "choices": [{"text": "super.onMediaChange();\r\nif (mMediaController!= null) {\r\nmMediaController.setPlaybackInfo(mMediaController.getPlaybackInfo());\r\n}\r\n}\r\n * @Override\r\npublic void onPlaybackStateChanged(int state) {\r\nsuper.onPlaybackStateChanged(state);\r\nif (mMediaController!= null) {\r\nmMediaController.setPlaybackInfo(mMediaController.getPlaybackInfo());\r\n}\r\n}\r\n * @Override\r\npublic void onPlaybackProgressChanged(int progress) {\r\nsuper.onPlaybackProgressChanged"}], "metadata": {"task_id": "vanilla/163", "ground_truth": "    if (mPagerAdapter != null)\r\n        mPagerAdapter.invalidateData();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryActivity.java"}}
{"prompt": "\n @Override\r\nprotected void onStateChange(int state, int toggled) {\r\n    super.onStateChange(state, toggled);\r", "choices": [{"text": "}\r\n\r\n@Override\r\nprotected void onToggled(boolean toggled) {\r\n    super.onToggled(toggled);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "vanilla/164", "ground_truth": "    if ((state & PlaybackService.FLAG_EMPTY_QUEUE) != 0)\r\n        mBottomBarControls.setSong(null);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryActivity.java"}}
{"prompt": "\n import android.widget.ListView\nimport android.widget.CheckBox\nimport android.view.View\nimport android.content.DialogInterface\nimport android.app.AlertDialog\n@Override\r\npublic void onDismiss(DialogInterface dialog) {\r\n    ListView list = ((AlertDialog) dialog).getListView();\r\n    int which = list.getCheckedItemPosition();\r\n    CheckBox reverseSort = (CheckBox) list.findViewById(R.id.reverse_sort);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "vanilla/166", "ground_truth": "    if (reverseSort.isChecked()) {\r\n        which = ~which;\r\n    }\r\n    mPagerAdapter.setSortMode(which);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryActivity.java"}}
{"prompt": "\n import android.widget.ListView\nimport android.view.View\n@Override\r\npublic int getItemPosition(Object item) {\r\n    int type = (Integer) ((ListView) item).getTag();\r", "choices": [{"text": "return type;\r\n}\r\n"}], "metadata": {"task_id": "vanilla/167", "ground_truth": "    int pos = getMediaTypePosition(type);\r\n    return pos == -1 ? POSITION_NONE : pos;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryPagerAdapter.java"}}
{"prompt": "\n import android.view.View\n/**\r\n * Sets the text to be displayed in the first row of the artist, album, and\r\n * song lists.\r\n */\r\npublic void setHeaderText(String text) {\r\n    for (DraggableRow row : mHeaderViews) {\r\n        row.setText(text);\r", "choices": [{"text": "}\r\n/**\r\n * Sets the text to be displayed in the first row of the artist, album, and\r\n * song lists.\r\n */\r\npublic void setHeaderText(String text) {\r\n    for (DraggableRow row : mHeaderViews) {\r\n        row.setText(text);\r\n}\r\n/**\r\n * Sets the text to be displayed in the first row of the artist, album, and\r\n * song lists.\r\n */\r\npublic void setHeaderText(String text) {\r\n    for (DraggableRow row : mHeaderViews) {\r\n        row.setText(text);\r"}], "metadata": {"task_id": "vanilla/169", "ground_truth": "    }\r\n    mHeaderText = text;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryPagerAdapter.java"}}
{"prompt": "\n /**\r\n * Restores the saved scrolling position\r\n */\r\nprivate void restorePosition(int index) {\r\n    // Restore scrolling position if present and valid\r\n    Integer curPos = sLruAdapterPos.popPosition(mAdapters[index]);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/171", "ground_truth": "    if (curPos != null && curPos < mLists[index].getCount())\r\n        mLists[index].setSelection(curPos);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryPagerAdapter.java"}}
{"prompt": "\n /**\r\n * Returns the limiter set on the current adapter or null if there is none.\r\n */\r\npublic Limiter getCurrentLimiter() {\r\n    LibraryAdapter current = mCurrentAdapter;\r\n    if (current == null)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/172", "ground_truth": "        return null;\r\n    return current.getLimiter();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryPagerAdapter.java"}}
{"prompt": "\n /**\r\n * Returns the tab position of given media type, -1 if not visible.\r\n *\r\n * @return int\r\n */\r\npublic int getMediaTypePosition(int type) {\r\n    int[] order = mTabOrder;\r\n    for (int i = mTabCount; --i != -1; ) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/173", "ground_truth": "        if (order[i] == type)\r\n            return i;\r\n    }\r\n    return -1;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryPagerAdapter.java"}}
{"prompt": "\n import androidx.viewpager.widget.PagerAdapter\n/**\r\n * Call {@link LibraryPagerAdapter#requestRequery(LibraryAdapter)} on the UI\r\n * thread.\r\n *\r\n * @param adapter The adapter, passed to requestRequery.\r\n */\r\npublic void postRequestRequery(LibraryAdapter adapter) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/175", "ground_truth": "    Handler handler = mUiHandler;\r\n    handler.sendMessage(handler.obtainMessage(MSG_REQUEST_REQUERY, adapter));\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryPagerAdapter.java"}}
{"prompt": "\n import android.os.Handler\n/**\r\n * Schedule a query to be run for the given adapter on the worker thread.\r\n *\r\n * @param adapter The adapter to run the query for.\r\n */\r\nprivate void postRunQuery(LibraryAdapter adapter) {\r\n    mRequeryNeeded[adapter.getMediaType()] = false;\r\n    Handler handler = mWorkerHandler;\r", "choices": [{"text": "}\r\n\n/**\r\n * Run the query for the given adapter on the worker thread.\r\n *\r\n * @param adapter The adapter to run the query for.\r\n */\r\nprivate void runQuery(LibraryAdapter adapter) {\r\n    if (mRequeryNeeded[adapter.getMediaType()]) {\r\n        mRequeryNeeded[adapter.getMediaType()] = false;\r\n        adapter.runQueryOnBackgroundThread();\r\n    }\r\n}\r\n\n/**\r\n * Run the query for the given adapter on the worker thread.\r\n *\r\n * @param adapter The adapter to run the query for.\r\n */\r\nprivate void"}], "metadata": {"task_id": "vanilla/176", "ground_truth": "    handler.removeMessages(MSG_RUN_QUERY, adapter);\r\n    handler.sendMessage(handler.obtainMessage(MSG_RUN_QUERY, adapter));\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryPagerAdapter.java"}}
{"prompt": "\n /**\r\n * Requery the adapter of the given type if it exists and needs a requery.\r\n *\r\n * @param type One of MediaUtils.TYPE_*\r\n */\r\nprivate void requeryIfNeeded(int type) {\r\n    LibraryAdapter adapter = mAdapters[type];\r\n    if (adapter != null && mRequeryNeeded[type]) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/177", "ground_truth": "        postRunQuery(adapter);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryPagerAdapter.java"}}
{"prompt": "\n /**\r\n * Invalidate the data for all adapters.\r\n */\r\npublic void invalidateData() {\r\n    for (LibraryAdapter adapter : mAdapters) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/178", "ground_truth": "        if (adapter != null) {\r\n            postRequestRequery(adapter);\r\n        }\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryPagerAdapter.java"}}
{"prompt": "\n /**\r\n * Set the saved sort mode for the given adapter. The adapter should\r\n * be re-queried after calling this.\r\n *\r\n * @param adapter The adapter to load for.\r\n */\r\npublic void loadSortOrder(SortableAdapter adapter) {\r\n    String key = adapter.getSortSettingsKey();\r\n    int def = adapter.getDefaultSortMode();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/179", "ground_truth": "    int sort = SharedPrefHelper.getSettings(mActivity).getInt(key, def);\r\n    adapter.setSortMode(sort);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryPagerAdapter.java"}}
{"prompt": "\n /**\r\n * Set a new filter on all the adapters.\r\n */\r\npublic void setFilter(String text) {\r\n    if (text.length() == 0)\r\n        text = null;\r\n    mFilter = text;\r\n    for (LibraryAdapter adapter : mAdapters) {\r\n        if (adapter != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/181", "ground_truth": "            adapter.setFilter(text);\r\n            requestRequery(adapter);\r\n        }\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryPagerAdapter.java"}}
{"prompt": "\n import android.widget.AdapterView\nimport android.view.View\nimport android.content.Intent\n@Override\r\npublic void onItemClick(AdapterView<?> parent, View view, int position, long id) {\r\n    Intent intent = id == LibraryAdapter.HEADER_ID ? createHeaderIntent(view) : mCurrentAdapter.createData(view);\r\n    int type = (Integer) ((View) view.getParent()).getTag();\r\n    if (type == MediaUtils.TYPE_FILE) {\r", "choices": [{"text": "\n import android.widget.AdapterView\nimport android.view.View\nimport android.content.Intent\n@Override\r\npublic void onItemClick(AdapterView<?> parent, View view, int position, long id) {\r\n    Intent intent = id == LibraryAdapter.HEADER_ID? createHeaderIntent(view) : mCurrentAdapter.createData(view);\r\n    int type = (Integer) ((View) view.getParent()).getTag();\r\n    if (type == MediaUtils.TYPE_FILE) {\r\n//        intent.putExtra(MediaUtils.EXTRA_FILE_PATH, mCurrentAdapter.getItem(position));\r\n        intent.putExtra(MediaUtils.EXTRA_FILE_PATH, mCurrentAdapter.getItem(position));\r\n        intent.putExtra(MediaUtils.EXTRA_FILE_TYPE, MediaUtils.TYPE_FILE);\r\n    } else if (type == MediaUtils.TYPE_FOLDER) {\r\n        intent.putExtra(MediaUtils.EXTRA_FILE_PATH, mCurrentAdapter.getItem(position));\r\n        intent.putExtra(MediaUtils.EXTRA_FILE_TYPE, MediaUtils.TYPE_FOLDER);\r\n    }\r\n    startActivity(intent"}], "metadata": {"task_id": "vanilla/185", "ground_truth": "        mFilesAdapter.onItemClicked(intent);\r\n    } else {\r\n        mActivity.onItemClicked(intent);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryPagerAdapter.java"}}
{"prompt": "\n /**\r\n * Assemble internal cache key from adapter\r\n */\r\nprivate String _k(LibraryAdapter adapter) {\r\n    String result = adapter.getMediaType() + \"://\";\r\n    Limiter limiter = adapter.getLimiter();\r\n    if (limiter != null) {\r\n        for (String entry : limiter.names) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/186", "ground_truth": "            result = result + entry + \"/\";\r\n        }\r\n    }\r\n    return result;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\LibraryPagerAdapter.java"}}
{"prompt": "\n @Override\r\nprotected void onDialogClosed(boolean positiveResult) {\r\n    super.onDialogClosed(positiveResult);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/187", "ground_truth": "    notifyDependencyChange(shouldDisableDependents());\r\n    notifyChanged();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ListPreferenceSummary.java"}}
{"prompt": "\n /**\r\n * Set whether or not the expander button should be shown in each row.\r\n * Defaults to true for playlist adapter and false for all others.\r\n *\r\n * @param expandable True to show expander, false to hide.\r\n */\r\npublic void setExpandable(boolean expandable) {\r\n    if (expandable != mExpandable) {\r\n        mExpandable = expandable;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/189", "ground_truth": "        notifyDataSetChanged();\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\MediaAdapter.java"}}
{"prompt": "\n /**\r\n * Build a query for all the songs represented by this adapter, for adding\r\n * to the timeline.\r\n *\r\n * @param projection The columns to query.\r\n */\r\n@Override\r\npublic QueryTask buildSongQuery(String[] projection) {\r\n    QueryTask query = buildQuery(projection, true);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/190", "ground_truth": "    query.type = mType;\r\n    return query;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\MediaAdapter.java"}}
{"prompt": "\n import android.database.Cursor\n/**\r\n * Set a new cursor for this adapter. The old cursor will be closed.\r\n *\r\n * @param cursor The new cursor.\r\n */\r\npublic void changeCursor(Cursor cursor) {\r\n    Cursor old = mCursor;\r\n    mCursor = cursor;\r\n    buildAlphabet();\r\n    if (cursor == null) {\r\n        notifyDataSetInvalidated();\r\n    } else {\r\n        notifyDataSetChanged();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/191", "ground_truth": "    }\r\n    if (old != null) {\r\n        old.close();\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\MediaAdapter.java"}}
{"prompt": "\n /**\r\n * Returns the type of the current limiter.\r\n *\r\n * @return One of MediaUtils.TYPE_, or MediaUtils.TYPE_INVALID if there is\r\n * no limiter set.\r\n */\r\npublic int getLimiterType() {\r\n    Limiter limiter = mLimiter;\r\n    if (limiter != null)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/192", "ground_truth": "        return limiter.type;\r\n    return MediaUtils.TYPE_INVALID;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\MediaAdapter.java"}}
{"prompt": "\n import android.database.Cursor\n@Override\r\npublic int getCount() {\r\n    Cursor cursor = mCursor;\r\n    if (cursor == null)\r", "choices": [{"text": "return 0;\r\n    return cursor.getCount();\r\n}\n"}], "metadata": {"task_id": "vanilla/196", "ground_truth": "        return 0;\r\n    return cursor.getCount();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\MediaAdapter.java"}}
{"prompt": "\n @Override\r\npublic int getSectionForPosition(int position) {\r\n    for (int i = 0; i < mAlphabet.size(); ++i) {\r", "choices": [{"text": "if (position < mAlphabet.get(i).getSectionStart()) {\r\nreturn i - 1;\r\n}\r\n}\r\nreturn mAlphabet.size() - 1;\r\n}\r\n\r\n@Override\r\npublic int getPositionForSection(int section) {\r\nif (section < 0 || section >= mAlphabet.size()) {\r\nreturn -1;\r\n}\r\nreturn mAlphabet.get(section).getSectionStart();\r\n}\r\n\r\n@Override\r\npublic Object[] getSections() {\r\nreturn mAlphabet.toArray();\r"}], "metadata": {"task_id": "vanilla/199", "ground_truth": "        if (mAlphabet.get(i).position > position)\r\n            return i - 1;\r\n    }\r\n    return 0;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\MediaAdapter.java"}}
{"prompt": "\n /**\r\n * Cleans up the underlying media session\r\n */\r\npublic void release() {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/206", "ground_truth": "    mMediaSession.setActive(false);\r\n    mMediaSession.release();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\MediaSessionTracker.java"}}
{"prompt": "\n import java.util.Random\n/**\r\n * Returns a cached random instanced, creating it if necessary.\r\n */\r\npublic static Random getRandom() {\r\n    if (sRandom == null)\r", "choices": [{"text": "sRandom = new Random();\r\n    return sRandom;\r\n}\r\n"}], "metadata": {"task_id": "vanilla/207", "ground_truth": "        sRandom = new Random();\r\n    return sRandom;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\MediaUtils.java"}}
{"prompt": "\n import android.provider.MediaStore\nimport android.database.Cursor\nimport android.content.Context\nimport ch.blinkenlights.android.medialibrary.MediaLibrary\n/**\r\n * Query the MediaStore to determine the id of the genre the song belongs\r\n * to.\r\n *\r\n * @param context The context to use\r\n * @param id The id of the song to query the genre for.\r\n */\r\npublic static long queryGenreForSong(Context context, long id) {\r\n    String[] projection = { MediaLibrary.GenreSongColumns._GENRE_ID };\r\n    String query = MediaLibrary.GenreSongColumns.SONG_ID + \"=?\";\r\n    String[] queryArgs = new String[] { Long.toString(id) };\r\n    Cursor cursor = MediaLibrary.queryLibrary(context, MediaLibrary.TABLE_GENRES_SONGS, projection, query, queryArgs, null);\r\n    if (cursor != null) {\r\n        if (cursor.moveToNext())\r", "choices": [{"text": "\n import android.provider.MediaStore\nimport android.database.Cursor\nimport android.content.Context\nimport ch.blinkenlights.android.medialibrary.MediaLibrary\n/**\r\n * Query the MediaStore to determine the id of the genre the song belongs\r\n * to.\r\n *\r\n * @param context The context to use\r\n * @param id The id of the song to query the genre for.\r\n */\r\npublic static long queryGenreForSong(Context context, long id) {\r\n    String[] projection = { MediaLibrary.GenreSongColumns._GENRE_ID };\r\n    String query = MediaLibrary.GenreSongColumns.SONG_ID + \"=?\";\r\n    String[] queryArgs = new String[] { Long.toString(id) };\r\n    Cursor cursor = MediaLibrary.queryLibrary(context, MediaLibrary.TABLE_GENRES_SONGS, projection, query, queryArgs, null);\r\n    if (cursor!= null) {\r\n        if (cursor.moveToNext())\r\n//            return cursor.getLong(0);\r\n            return 0;\r\n        cursor.close();\r\n    }\r\n    return 0;\r\n}\n"}], "metadata": {"task_id": "vanilla/210", "ground_truth": "            return cursor.getLong(0);\r\n        cursor.close();\r\n    }\r\n    return 0;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\MediaUtils.java"}}
{"prompt": "\n import android.content.Context\nimport ch.blinkenlights.android.medialibrary.MediaLibrary\n/**\r\n * Determine if any songs are available from the library.\r\n *\r\n * @param context The Context to use\r\n * @return True if it's possible to retrieve any songs, false otherwise. For\r\n * example, false could be returned if there are no songs in the library.\r\n */\r\npublic static boolean isSongAvailable(Context context) {\r\n    if (sSongCount == -1) {\r\n        sSongCount = MediaLibrary.getLibrarySize(context);\r", "choices": [{"text": "}\r\n    return sSongCount > 0;\r\n}\n"}], "metadata": {"task_id": "vanilla/211", "ground_truth": "    }\r\n    return sSongCount != 0;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\MediaUtils.java"}}
{"prompt": "\n import android.database.Cursor\nimport android.content.Context\nimport java.util.List\nimport java.util.ArrayList\nimport ch.blinkenlights.android.medialibrary.MediaLibrary\n/**\r\n * Returns a list containing all the songs found on the\r\n * device's library.\r\n *\r\n * @param context The Context to use\r\n */\r\nprivate static ArrayList<Song> getAllSongs(Context context) {\r\n    QueryTask query = new QueryTask(MediaLibrary.VIEW_SONGS_ALBUMS_ARTISTS, Song.FILLED_PROJECTION, null, null, null);\r\n    Cursor cursor = query.runQuery(context);\r\n    ArrayList<Song> list = new ArrayList<Song>();\r\n    if (cursor == null)\r\n        return list;\r\n    while (cursor.moveToNext()) {\r\n        Song song = new Song(-1);\r\n        song.populate(cursor);\r", "choices": [{"text": "//        Log.d(\"Song\", song.toString());\r\n        list.add(song);\r\n    }\r\n    cursor.close();\r\n    return list;\r\n}\r\n/**\r\n * Returns a list containing all the artists found on the\r\n * device's library.\r\n *\r\n * @param context The Context to use\r\n */\r\nprivate static ArrayList<Artist> getAllArtists(Context context) {\r\n    QueryTask query = new QueryTask(MediaLibrary.VIEW_SONGS_ALBUMS_ARTISTS, Artist.FILLED_PROJECTION, null, null, null);\r\n    Cursor cursor = query"}], "metadata": {"task_id": "vanilla/212", "ground_truth": "        list.add(song);\r\n    }\r\n    cursor.close();\r\n    return list;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\MediaUtils.java"}}
{"prompt": "\n /**\r\n * Called if we detected a medium change\r\n * This flushes some cached data\r\n */\r\npublic static void onMediaChange() {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/213", "ground_truth": "    sSongCount = -1;\r\n    sAllSongs.clear();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\MediaUtils.java"}}
{"prompt": "\n import android.database.Cursor\nimport android.content.Context\n/**\r\n * Returns the first matching song (or NULL) of given type + id combination\r\n *\r\n * @param context A Context to use.\r\n * @param type The MediaTye to query\r\n * @param id The id of given type to query\r\n */\r\npublic static Song getSongByTypeId(Context context, int type, long id) {\r\n    Song song = new Song(-1);\r\n    QueryTask query = buildQuery(type, id, Song.FILLED_PROJECTION, null);\r\n    Cursor cursor = query.runQuery(context);\r\n    if (cursor != null) {\r\n        if (cursor.getCount() > 0) {\r\n            cursor.moveToPosition(0);\r\n            song.populate(cursor);\r", "choices": [{"text": "\n import android.database.Cursor\nimport android.content.Context\n/**\r\n * Returns the first matching song (or NULL) of given type + id combination\r\n *\r\n * @param context A Context to use.\r\n * @param type The MediaTye to query\r\n * @param id The id of given type to query\r\n */\r\npublic static Song getSongByTypeId(Context context, int type, long id) {\r\n    Song song = new Song(-1);\r\n    QueryTask query = buildQuery(type, id, Song.FILLED_PROJECTION, null);\r\n    Cursor cursor = query.runQuery(context);\r\n    if (cursor!= null) {\r\n        if (cursor.getCount() > 0) {\r\n            cursor.moveToPosition(0);\r\n            song.populate(cursor);\r        }\r\n        cursor.close();\r\n    }\r\n    return song;\r\n}\n"}], "metadata": {"task_id": "vanilla/214", "ground_truth": "        }\r\n        cursor.close();\r\n    }\r\n    return song.isFilled() ? song : null;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\MediaUtils.java"}}
{"prompt": "\n import java.io.File\n/**\r\n * Delete the given file or directory recursively.\r\n *\r\n * @return True if successful; false otherwise.\r\n */\r\npublic static boolean deleteFile(File file) {\r\n    File[] children = file.listFiles();\r\n    if (children != null) {\r\n        for (File child : children) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/215", "ground_truth": "            deleteFile(child);\r\n        }\r\n    }\r\n    return file.delete();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\MediaUtils.java"}}
{"prompt": "\n import java.io.File\n/**\r\n * Adds a final slash if the path points to an existing directory\r\n */\r\nprivate static String addDirEndSlash(String path) {\r\n    if (path.length() > 0 && path.charAt(path.length() - 1) != '/') {\r\n        if ((new File(path)).isDirectory()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/216", "ground_truth": "            path += \"/\";\r\n        }\r\n    }\r\n    return path;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\MediaUtils.java"}}
{"prompt": "\n import android.database.MatrixCursor\nimport android.database.Cursor\nimport java.io.File\n/**\r\n * Returns a (possibly empty) Cursor for given file path.\r\n *\r\n * For directories, it recursively adds all files contained\r\n * in this directory.\r\n *\r\n * @param path The path to the file to be queried\r\n * @return A new Cursor object\r\n */\r\npublic static Cursor getCursorForFileQuery(String path) {\r\n    MatrixCursor matrixCursor = new MatrixCursor(Song.FILLED_PROJECTION);\r\n    File directory = new File(path);\r\n    if (directory.isDirectory()) {\r\n        addDirectoryToCursor(directory, matrixCursor);\r", "choices": [{"text": "} else {\r\n        addFileToCursor(directory, matrixCursor);\r\n    }\r\n    return matrixCursor;\r\n}\r\n/**\r\n * Adds all files contained in the given directory to the given cursor.\r\n *\r\n * @param directory The directory to be added\r\n * @param cursor The cursor to which the files should be added\r\n */\r\nprivate static void addDirectoryToCursor(File directory, MatrixCursor cursor) {\r\n    File[] files = directory.listFiles();\r\n    if (files!= null) {\r\n        for (File file : files) {\r\n            if (file.isDirectory()) {\r\n                addDirectoryTo"}], "metadata": {"task_id": "vanilla/217", "ground_truth": "    } else {\r\n        addFileToCursor(path, matrixCursor);\r\n    }\r\n    return matrixCursor;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\MediaUtils.java"}}
{"prompt": "\n /**\r\n * Retrieve ID of specified media type for requested song. This works only for\r\n * media-oriented types: {@link #TYPE_ARTIST}, {@link #TYPE_ALBUM}, {@link #TYPE_SONG}\r\n * @param song requested song\r\n * @param mType media type e.g. {@link #TYPE_ARTIST}\r\n * @return ID of media type, {@link #TYPE_INVALID} if unsupported\r\n */\r\npublic static long getCurrentIdForType(Song song, int mType) {\r\n    if (song == null)\r\n        return TYPE_INVALID;\r\n    switch(mType) {\r\n        case TYPE_ARTIST:\r\n            return song.artistId;\r\n        case TYPE_ALBUM:\r\n            return song.albumId;\r\n        case TYPE_SONG:\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/218", "ground_truth": "            return song.id;\r\n        default:\r\n            return TYPE_INVALID;\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\MediaUtils.java"}}
{"prompt": "\n import android.view.View\nimport android.content.Intent\n@Override\r\npublic void onClick(View view) {\r\n    switch(view.getId()) {\r\n        case R.id.cover_view:\r\n            startActivity(new Intent(this, FullPlaybackActivity.class));\r\n            finish();\r", "choices": [{"text": "}\r\n}\n"}], "metadata": {"task_id": "vanilla/220", "ground_truth": "            break;\r\n        default:\r\n            super.onClick(view);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\MiniPlaybackActivity.java"}}
{"prompt": "\n import android.content.Context\nimport android.appwidget.AppWidgetManager\n@Override\r\npublic void onUpdate(Context context, AppWidgetManager manager, int[] ids) {\r\n    Song song = null;\r\n    int state = 0;\r\n    if (PlaybackService.hasInstance()) {\r\n        PlaybackService service = PlaybackService.get(context);\r\n        song = service.getSong(0);\r", "choices": [{"text": "//        state = service.getState();\r\n    }\r\n    RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.widget_layout);\r\n    views.setTextViewText(R.id.widget_song_title, song.getTitle());\r\n    views.setTextViewText(R.id.widget_song_artist, song.getArtist());\r\n    views.setTextViewText(R.id.widget_song_album, song.getAlbum());\r\n    views.setImageViewResource(R.id.widget_play_pause, R.drawable.ic_play_arrow_white_2"}], "metadata": {"task_id": "vanilla/221", "ground_truth": "        state = service.getState();\r\n    }\r\n    sEnabled = true;\r\n    updateWidget(context, manager, song, state);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\OneCellWidget.java"}}
{"prompt": "\n import android.content.Context\nimport android.content.pm.PackageManager\n/**\r\n * Checks if all required permissions have been granted\r\n *\r\n * @param context The context to use\r\n * @return boolean true if all permissions have been granded\r\n */\r\npublic static boolean havePermissions(Context context) {\r\n    for (String permission : getNeededPermissions()) {\r\n        if (context.checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {\r", "choices": [{"text": "\n import android.content.Context\nimport android.content.pm.PackageManager\n/**\r\n * Checks if all required permissions have been granted\r\n *\r\n * @param context The context to use\r\n * @return boolean true if all permissions have been granded\r\n */\r\npublic static boolean havePermissions(Context context) {\r\n    for (String permission : getNeededPermissions()) {\r\n        if (context.checkSelfPermission(permission)!= PackageManager.PERMISSION_GRANTED) {\r\n//            Log.d(TAG, \"Permission \" + permission + \" not granted\");\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\n"}], "metadata": {"task_id": "vanilla/225", "ground_truth": "            return false;\r\n        }\r\n    }\r\n    return true;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PermissionRequestActivity.java"}}
{"prompt": "\n import android.os.Build\nimport android.Manifest\nprivate static String[] getOptionalPermissions() {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n        return new String[] { Manifest.permission.POST_NOTIFICATIONS };\r", "choices": [{"text": "} else {\r\n        return new String[] { };\r\n}\r\n}\n"}], "metadata": {"task_id": "vanilla/227", "ground_truth": "    }\r\n    return new String[] {};\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PermissionRequestActivity.java"}}
{"prompt": "\n @Override\r\npublic void onDestroy() {\r\n    PlaybackService.removeTimelineCallback(this);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/229", "ground_truth": "    mLooper.quit();\r\n    super.onDestroy();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackActivity.java"}}
{"prompt": "\n import android.view.View\n@Override\r\npublic void onClick(View view) {\r\n    switch(view.getId()) {\r\n        case R.id.next:\r\n            shiftCurrentSong(SongTimeline.SHIFT_NEXT_SONG);\r\n            break;\r\n        case R.id.play_pause:\r\n            playPause();\r\n            break;\r\n        case R.id.previous:\r\n            rewindCurrentSong();\r\n            break;\r\n        case R.id.end_action:\r\n            cycleFinishAction();\r\n            break;\r", "choices": [{"text": "}\r\n}\r\n"}], "metadata": {"task_id": "vanilla/234", "ground_truth": "        case R.id.shuffle:\r\n            cycleShuffle();\r\n            break;\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackActivity.java"}}
{"prompt": "\n protected void setState(final int state) {\r\n    mLastStateEvent = System.nanoTime();\r\n    if (mState != state) {\r\n        final int toggled = mState ^ state;\r\n        mState = state;\r\n        runOnUiThread(new Runnable() {\r\n\r\n            @Override\r\n            public void run() {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/235", "ground_truth": "                onStateChange(state, toggled);\r\n            }\r\n        });\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackActivity.java"}}
{"prompt": "\n /**\r\n * Called by PlaybackService to update the state.\r\n */\r\npublic void setState(long uptime, int state) {\r\n    if (uptime > mLastStateEvent) {\r\n        setState(state);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/236", "ground_truth": "        mLastStateEvent = uptime;\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackActivity.java"}}
{"prompt": "\n /**\r\n * Sets up components when the PlaybackService is initialized and available to\r\n * interact with. Override to implement further post-initialization behavior.\r\n */\r\nprotected void onServiceReady() {\r\n    PlaybackService service = PlaybackService.get(this);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/237", "ground_truth": "    setSong(service.getSong(0));\r\n    setState(service.getState());\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackActivity.java"}}
{"prompt": "\n /**\r\n * Called when the current song changes.\r\n *\r\n * @param song The new song\r\n */\r\nprotected void onSongChange(Song song) {\r", "choices": [{"text": "}\r\n\r\n/**\r\n * Called when the current song changes.\r\n *\r\n * @param song The new song\r\n */\r\nprotected void onSongChange(Song song, int position) {\r\n}\r\n\r\n/**\r\n * Called when the current song changes.\r\n *\r\n * @param song The new song\r\n */\r\nprotected void onSongChange(Song song, int position, int duration) {\r\n}\r\n\r\n/**\r\n * Called when the current song changes.\r\n *\r\n * @param song The new song\r\n */\r\nprotected void onSongChange(Song song, int position, int"}], "metadata": {"task_id": "vanilla/238", "ground_truth": "    if (mCoverView != null)\r\n        mCoverView.querySongs();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackActivity.java"}}
{"prompt": "\n protected void setSong(final Song song) {\r\n    mLastSongEvent = System.nanoTime();\r\n    runOnUiThread(new Runnable() {\r\n\r\n        @Override\r", "choices": [{"text": "public void run() {\r\n            mSong = song;\r\n            mSongTitle.setText(song.getTitle());\r\n            mSongArtist.setText(song.getArtist());\r\n            mSongAlbum.setText(song.getAlbum());\r\n            mSongDuration.setText(song.getDuration());\r\n            mSongProgress.setMax(song.getDuration());\r\n            mSongProgress.setProgress(0);\r\n            mSongProgress.setSecondaryProgress(0);\r\n            mSongProgress.setProgressDrawable(getResources().getDrawable(R.drawable.progress_bar));\r\n            mSongProgress.setSecondaryProgressDrawable(getResources().getDrawable"}], "metadata": {"task_id": "vanilla/239", "ground_truth": "        public void run() {\r\n            onSongChange(song);\r\n        }\r\n    });\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackActivity.java"}}
{"prompt": "\n /**\r\n * Called by PlaybackService to update the current song.\r\n */\r\npublic void setSong(long uptime, Song song) {\r\n    if (uptime > mLastSongEvent) {\r\n        setSong(song);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/240", "ground_truth": "        mLastSongEvent = uptime;\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackActivity.java"}}
{"prompt": "\n /**\r\n * Called by PlaybackService to update an active song (next, previous, or\r\n * current).\r\n */\r\npublic void replaceSong(int delta, Song song) {\r", "choices": [{"text": "}\r\n\r\n/**\r\n * Called by PlaybackService to update the current song.\r\n */\r\npublic void replaceSong(Song song) {\r\n}\r\n\r\n/**\r\n * Called by PlaybackService to update the current song.\r\n */\r\npublic void replaceSong(Song song, int position) {\r\n}\r\n\r\n/**\r\n * Called by PlaybackService to update the current song.\r\n */\r\npublic void replaceSong(Song song, int position, int duration) {\r\n}\r\n\r\n/**\r\n * Called by PlaybackService to update the current song.\r\n */\r\npublic"}], "metadata": {"task_id": "vanilla/241", "ground_truth": "    if (mCoverView != null)\r\n        mCoverView.replaceSong(delta, song);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackActivity.java"}}
{"prompt": "\n import android.view.Menu\n@Override\r\npublic boolean onCreateOptionsMenu(Menu menu) {\r", "choices": [{"text": "// Inflate the menu; this adds items to the action bar if it is present.\r\ngetMenuInflater().inflate(R.menu.main, menu);\r\nreturn true;\r\n}\r\n}\r\n<file_sep>/README.md\n# Android-App-Development\nAndroid App Development\n<|endoftext|>"}], "metadata": {"task_id": "vanilla/242", "ground_truth": "    menu.add(0, MENU_PREFS, 10, R.string.settings).setIcon(R.drawable.ic_menu_preferences);\r\n    return true;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackActivity.java"}}
{"prompt": "\n import android.view.MenuItem\nimport android.view.Menu\nimport android.content.Intent\nimport android.app.Activity\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    switch(item.getItemId()) {\r\n        case MENU_PREFS:\r\n            startActivity(new Intent(this, PreferencesActivity.class));\r\n            break;\r\n        case MENU_CLEAR_QUEUE:\r\n            PlaybackService.get(this).clearQueue();\r\n            break;\r\n        case MENU_EMPTY_QUEUE:\r\n            PlaybackService.get(this).emptyQueue();\r\n            break;\r", "choices": [{"text": "}\r\nreturn super.onOptionsItemSelected(item);\r\n}\n"}], "metadata": {"task_id": "vanilla/243", "ground_truth": "        default:\r\n            return false;\r\n    }\r\n    return true;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackActivity.java"}}
{"prompt": "\n import java.io.IOException\nimport android.media.MediaPlayer\npublic void prepareMediaPlayer(VanillaMediaPlayer mp, String path) throws IOException {\r\n    mp.setDataSource(path);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "vanilla/247", "ground_truth": "    mp.prepare();\r\n    applyReplayGain(mp);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n import android.media.MediaPlayer\n/**\r\n * Make sure that the current ReplayGain volume matches\r\n * the (maybe just changed) user settings\r\n */\r\nprivate void refreshReplayGainValues() {\r\n    if (mMediaPlayer != null) {\r\n        applyReplayGain(mMediaPlayer);\r", "choices": [{"text": "\n import android.media.MediaPlayer\n/**\r\n * Make sure that the current ReplayGain volume matches\r\n * the (maybe just changed) user settings\r\n */\r\nprivate void refreshReplayGainValues() {\r\n    if (mMediaPlayer!= null) {\r\n        applyReplayGain(mMediaPlayer);\r\n}\r\n/**\r\n * Apply the ReplayGain values to the MediaPlayer\r\n */\r\nprivate void applyReplayGain(MediaPlayer mp) {\r\n    if (mp == null) {\r\n        return;\r\n    }\r\n    if (mReplayGainMode == ReplayGainMode.DISABLED) {\r\n        mp.setVolume(1.0f, 1.0f);\r\n        return;\r\n    }\r\n    float gain = 1.0f;\r\n    if (mReplayGainMode == ReplayGainMode.TRACK) {\r\n        gain = mTrackGain;\r\n    } else if (mReplayGainMode == ReplayGain"}], "metadata": {"task_id": "vanilla/248", "ground_truth": "    }\r\n    if (mPreparedMediaPlayer != null) {\r\n        applyReplayGain(mPreparedMediaPlayer);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n import android.media.MediaPlayer\nprivate void refreshDuckingValues() {\r\n    float duckingFactor = ((float) mVolumeDuringDucking) / 100f;\r\n    if (mMediaPlayer != null) {\r\n        mMediaPlayer.setDuckingFactor(duckingFactor);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/249", "ground_truth": "    }\r\n    if (mPreparedMediaPlayer != null) {\r\n        mPreparedMediaPlayer.setDuckingFactor(duckingFactor);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n * Header for state file to help indicate if the file is in the right\r\n * format.\r\n * Name of the state file.\r\n /**\r\n * Stops or starts the readahead thread\r\n */\r\nprivate void triggerReadAhead() {\r\n    Song song = mCurrentSong;\r\n    if ((mState & FLAG_PLAYING) != 0 && song != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/251", "ground_truth": "        mReadahead.setSong(song);\r\n    } else {\r\n        mReadahead.pause();\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n /**\r\n * Set a state flag.\r\n */\r\npublic void setFlag(int flag) {\r\n    synchronized (mStateLock) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/253", "ground_truth": "        updateState(mState | flag);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n /**\r\n * Unset a state flag.\r\n */\r\npublic void unsetFlag(int flag) {\r\n    synchronized (mStateLock) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/254", "ground_truth": "        updateState(mState & ~flag);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n import android.widget.Toast\n/**\r\n * Start playing if currently paused.\r\n *\r\n * @return The new state after this is called.\r\n */\r\npublic int play() {\r\n    synchronized (mStateLock) {\r\n        if ((mState & FLAG_EMPTY_QUEUE) != 0) {\r\n            setFinishAction(SongTimeline.FINISH_RANDOM);\r\n            showToast(R.string.random_enabling, Toast.LENGTH_SHORT);\r\n        }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/258", "ground_truth": "        int state = updateState(mState | FLAG_PLAYING);\r\n        userActionTriggered();\r\n        return state;\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n import android.app.Notification\n/**\r\n * If playing, pause. If paused, play.\r\n *\r\n * @return The new state after this is called.\r\n */\r\npublic int playPause(boolean forceNotification) {\r\n    synchronized (mStateLock) {\r\n        mForceNotificationVisible = forceNotification;\r\n        if ((mState & FLAG_PLAYING) != 0)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/260", "ground_truth": "            return pause();\r\n        else\r\n            return play();\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n /**\r\n * Change the end action (e.g. repeat, random).\r\n *\r\n * @param action The new action. One of SongTimeline.FINISH_*.\r\n * @return The new state after this is called.\r\n */\r\npublic int setFinishAction(int action) {\r\n    synchronized (mStateLock) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/261", "ground_truth": "        return updateState(mState & ~MASK_FINISH | action << SHIFT_FINISH);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n /**\r\n * Change the shuffle mode.\r\n *\r\n * @param mode The new mode. One of SongTimeline.SHUFFLE_*.\r\n * @return The new state after this is called.\r\n */\r\npublic int setShuffleMode(int mode) {\r\n    synchronized (mStateLock) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/263", "ground_truth": "        return updateState(mState & ~MASK_SHUFFLE | mode << SHIFT_SHUFFLE);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n import android.media.MediaPlayer\n@Override\r\npublic boolean onError(MediaPlayer player, int what, int extra) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nreturn false;\r\n}\r\n});\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r"}], "metadata": {"task_id": "vanilla/265", "ground_truth": "    Log.e(\"VanillaMusic\", \"MediaPlayer error: \" + what + ' ' + extra);\r\n    return true;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n /**\r\n * Returns the song <code>delta</code> places away from the current\r\n * position.\r\n *\r\n * @see SongTimeline#getSong(int)\r\n */\r\npublic Song getSong(int delta) {\r\n    if (mTimeline == null)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/266", "ground_truth": "        return null;\r\n    if (delta == 0)\r\n        return mCurrentSong;\r\n    return mTimeline.getSong(delta);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n import android.media.AudioManager\nimport android.content.Intent\nimport android.content.Context\n@Override\r\npublic void onReceive(Context content, Intent intent) {\r\n    String action = intent.getAction();\r\n    if (AudioManager.ACTION_AUDIO_BECOMING_NOISY.equals(action)) {\r\n        if (mHeadsetPause) {\r\n            pause();\r", "choices": [{"text": "}\r\n}\r\n}\n"}], "metadata": {"task_id": "vanilla/267", "ground_truth": "        }\r\n    } else if (Intent.ACTION_SCREEN_ON.equals(action)) {\r\n        userActionTriggered();\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n /**\r\n * Returns the current service state. The state comprises several individual\r\n * flags.\r\n */\r\npublic int getState() {\r\n    synchronized (mStateLock) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/269", "ground_truth": "        return mState;\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n import android.media.MediaPlayer\n/**\r\n * Returns the current position in current song in milliseconds.\r\n */\r\npublic int getPosition() {\r\n    if (!mMediaPlayerInitialized)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/270", "ground_truth": "        return 0;\r\n    return mMediaPlayer.getCurrentPosition();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n import android.media.MediaPlayer\n/**\r\n * Returns the song duration in milliseconds.\r\n */\r\npublic int getDuration() {\r\n    if (!mMediaPlayerInitialized)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/271", "ground_truth": "        return 0;\r\n    return mMediaPlayer.getDuration();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n /**\r\n * Returns the global audio session\r\n */\r\npublic int getAudioSession() {\r\n    // Must not be 'ready' or initialized: the audio session\r", "choices": [{"text": "\n /**\r\n * Returns the global audio session\r\n */\r\npublic int getAudioSession() {\r\n    // Must not be'ready' or initialized: the audio session\r\n//    if (mAudioSession == null) {\r\n//        throw new IllegalStateException(\"Audio session not initialized\");\r\n//    }\r\n    return mAudioSession;\r\n}\r\n\r\n/**\r\n * Returns the global audio session\r\n */\r\npublic int getAudioSession() {\r\n    // Must not be'ready' or initialized: the audio session\r\n    if (mAudioSession == null) {\r\n        throw new IllegalStateException(\"Audio session not initialized\");\r\n    }\r\n    return mAudioSession;\r\n}\r\n\r\n/**\r\n * Returns the global audio session\r\n */\r\npublic int getAudioSession() {\r\n    //"}], "metadata": {"task_id": "vanilla/272", "ground_truth": "    // is set on object creation\r\n    return mMediaPlayer.getAudioSessionId();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n import android.media.MediaPlayer\n/**\r\n * Seek to a position in the current song.\r\n *\r\n * @param progress Proportion of song completed (where 1000 is the end of the song)\r\n */\r\npublic void seekToProgress(int progress) {\r\n    if (!mMediaPlayerInitialized)\r\n        return;\r", "choices": [{"text": "//    mMediaPlayer.seekTo(progress * mMediaPlayer.getDuration() / 1000);\r\n}\r\n"}], "metadata": {"task_id": "vanilla/273", "ground_truth": "    long position = (long) mMediaPlayer.getDuration() * progress / 1000;\r\n    seekToPosition((int) position);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n import android.media.MediaPlayer\n/**\r\n * Seeks to the given position in the current song.\r\n *\r\n * @param msec the offset in milliseconds from the start to seek to\r\n */\r\npublic void seekToPosition(int msec) {\r\n    if (!mMediaPlayerInitialized) {\r", "choices": [{"text": "//        Log.e(TAG, \"seekToPosition: mMediaPlayer not initialized\");\r\n        return;\r\n    }\r\n    mMediaPlayer.seekTo(msec);\r\n}\r\n"}], "metadata": {"task_id": "vanilla/274", "ground_truth": "        return;\r\n    }\r\n    mMediaPlayer.seekTo(msec);\r\n    mHandler.sendEmptyMessage(MSG_BROADCAST_SEEK);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n import java.util.ArrayList\n@Override\r\npublic void activeSongReplaced(int delta, Song song) {\r\n    ArrayList<TimelineCallback> list = sCallbacks;\r\n    for (int i = list.size(); --i != -1; ) list.get(i).replaceSong(delta, song);\r", "choices": [{"text": "\n import java.util.ArrayList\n@Override\r\npublic void activeSongReplaced(int delta, Song song) {\r\n    ArrayList<TimelineCallback> list = sCallbacks;\r\n    for (int i = list.size(); --i!= -1; ) list.get(i).replaceSong(delta, song);\r\n}\r\n"}], "metadata": {"task_id": "vanilla/275", "ground_truth": "    if (delta == 0)\r\n        setCurrentSong(0);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n /**\r\n * Move to next or previous song or album in the queue.\r\n *\r\n * @param delta One of SongTimeline.SHIFT_*.\r\n * @return The new current song.\r\n */\r\npublic Song shiftCurrentSong(int delta) {\r\n    preparePlayCountsUpdate(delta);\r\n    Song song = setCurrentSong(delta);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/276", "ground_truth": "    userActionTriggered();\r\n    return song;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n /**\r\n * Empty the song queue.\r\n */\r\npublic void emptyQueue() {\r\n    pause();\r", "choices": [{"text": "}\r\n\r\n/**\r\n * Pause the player.\r\n */\r\npublic void pause() {\r\n    if (player!= null) {\r\n        player.pause();\r\n    }\r\n}\r\n\r\n/**\r\n * Resume the player.\r\n */\r\npublic void resume() {\r\n    if (player!= null) {\r\n        player.resume();\r\n    }\r\n}\r\n\r\n/**\r\n * Stop the player.\r\n */\r\npublic void stop() {\r\n    if (player!= null) {\r\n        player.stop();\r\n    }\r\n}\r\n\r\n/**\r\n * Set the player volume.\r\n *\r\n * @param volume The"}], "metadata": {"task_id": "vanilla/279", "ground_truth": "    setFlag(FLAG_EMPTY_QUEUE);\r\n    mTimeline.emptyQueue();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n import ch.blinkenlights.android.medialibrary.LibraryObserver\n@Override\r\npublic void onChange(LibraryObserver.Type type, long id, boolean ongoing) {\r\n    if (type != LibraryObserver.Type.SONG && type != LibraryObserver.Type.PLAYLIST)\r\n        return;\r", "choices": [{"text": "\n import ch.blinkenlights.android.medialibrary.LibraryObserver\n@Override\r\npublic void onChange(LibraryObserver.Type type, long id, boolean ongoing) {\r\n    if (type!= LibraryObserver.Type.SONG && type!= LibraryObserver.Type.PLAYLIST)\r\n        return;\r\n}\r\n"}], "metadata": {"task_id": "vanilla/281", "ground_truth": "    MediaUtils.onMediaChange();\r\n    onMediaChange();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n import android.content.Intent\nimport android.content.Context\nimport android.app.Service\n/**\r\n * Return the PlaybackService instance, creating one if needed.\r\n */\r\npublic static PlaybackService get(Context context) {\r\n    if (sInstance == null) {\r\n        context.startService(new Intent(context, PlaybackService.class));\r\n        while (sInstance == null) {\r\n            try {\r\n                synchronized (sWait) {\r\n                    sWait.wait();\r\n                }\r\n            } catch (InterruptedException ignored) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/282", "ground_truth": "            }\r\n        }\r\n    }\r\n    return sInstance;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n import java.io.File\nimport java.io.DataOutputStream\nimport android.media.MediaPlayer\n/**\r\n * Save the service state to disk.\r\n *\r\n * @param pendingSeek The pendingSeek to store. Should be the current\r\n * MediaPlayer position or 0.\r\n */\r\npublic void saveState(int pendingSeek) {\r\n    try {\r\n        DataOutputStream out = new DataOutputStream(openFileOutput(STATE_FILE, 0));\r\n        Song song = mCurrentSong;\r\n        out.writeLong(STATE_FILE_MAGIC);\r\n        out.writeInt(STATE_VERSION);\r\n        out.writeInt(pendingSeek);\r\n        out.writeLong(song == null ? -1 : song.id);\r\n        mTimeline.writeState(out);\r", "choices": [{"text": "\n import java.io.File\nimport java.io.DataOutputStream\nimport android.media.MediaPlayer\n/**\r\n * Save the service state to disk.\r\n *\r\n * @param pendingSeek The pendingSeek to store. Should be the current\r\n * MediaPlayer position or 0.\r\n */\r\npublic void saveState(int pendingSeek) {\r\n    try {\r\n        DataOutputStream out = new DataOutputStream(openFileOutput(STATE_FILE, 0));\r\n        Song song = mCurrentSong;\r\n        out.writeLong(STATE_FILE_MAGIC);\r\n        out.writeInt(STATE_VERSION);\r\n        out.writeInt(pendingSeek);\r\n        out.writeLong(song == null? -1 : song.id);\r\n        mTimeline.writeState(out);\r\n//        mTimeline.writeState(out);\r\n        out.close();\r\n    } catch (IOException e) {\r\n        Log.e(TAG, \"Error saving state\", e);\r\n    }\r\n}\r\n/**\r\n * Load the service state from disk.\r\n *\r\n * @return true if the state was successfully loaded, false otherwise.\r\n */\r\npublic boolean loadState() {\r\n    try {\r\n        DataInputStream in = new DataInputStream(openFileInput(STATE_FILE));\r\n        long magic = in.readLong();\r\n        if (magic!= STATE_FILE_MAGIC) {\r\n            Log.e("}], "metadata": {"task_id": "vanilla/283", "ground_truth": "        out.close();\r\n    } catch (IOException e) {\r\n        Log.w(\"VanillaMusic\", \"Failed to save state\", e);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n /**\r\n * Do a 'hard' jump to given queue position\r\n */\r\npublic void jumpToQueuePosition(int pos) {\r", "choices": [{"text": "if (pos < 0 || pos >= queue.size()) {\r\nthrow new IllegalArgumentException(\"Invalid queue position: \" + pos);\r\n}\r\nif (pos == queue.size() - 1) {\r\n// Already at the end\r\nreturn;\r\n}\r\n// Remove all items after the jump position\r\nqueue.remove(pos + 1, queue.size());\r\n// Add all items before the jump position\r\nqueue.addAll(0, queue.subList(0, pos));\r\n}\r\n/**\r\n * Do a'soft' jump to"}], "metadata": {"task_id": "vanilla/284", "ground_truth": "    mTimeline.setCurrentQueuePosition(pos);\r\n    play();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaybackService.java"}}
{"prompt": "\n import android.content.Context\n/**\r\n * Counts this song object as 'played' or 'skipped'\r\n */\r\npublic static void countSong(Context context, Song song, boolean played) {\r", "choices": [{"text": "\n import android.content.Context\n/**\r\n * Counts this song object as 'played' or'skipped'\r\n */\r\npublic static void countSong(Context context, Song song, boolean played) {\r\n//\t\tif (played) {\r\n//\t\t\tsong.setPlayCount(song.getPlayCount() + 1);\r\n//\t\t} else {\r\n//\t\t\tsong.setSkipCount(song.getSkipCount() + 1);\r\n//\t\t}\r\n//\t\tsong.setLastPlayed(new Date());\r\n//\t\tsong.setLastSkipped(new Date());\r\n//\t\tsong.setLastPlayed(new Date());\r\n//\t\tsong.setLastSkipped(new Date());\r\n//\t"}], "metadata": {"task_id": "vanilla/285", "ground_truth": "    final long id = Song.getId(song);\r\n    MediaLibrary.updateSongPlayCounts(context, id, played);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlayCountsHelper.java"}}
{"prompt": "\n import java.util.ArrayList\nimport android.database.Cursor\nimport android.content.Context\nimport ch.blinkenlights.android.medialibrary.MediaLibrary\n/**\r\n * Returns a sorted array list of most often listen song ids\r\n */\r\npublic static ArrayList<Long> getTopSongs(Context context, int limit) {\r\n    ArrayList<Long> payload = new ArrayList<Long>();\r\n    Cursor cursor = MediaLibrary.queryLibrary(context, MediaLibrary.TABLE_SONGS, new String[] { MediaLibrary.SongColumns._ID }, MediaLibrary.SongColumns.PLAYCOUNT + \" > 0\", null, MediaLibrary.SongColumns.PLAYCOUNT + \" DESC\");\r\n    while (cursor.moveToNext() && limit > 0) {\r\n        payload.add(cursor.getLong(0));\r", "choices": [{"text": "limit--;\r\n    }\r\n    cursor.close();\r\n    return payload;\r\n}\n"}], "metadata": {"task_id": "vanilla/286", "ground_truth": "        limit--;\r\n    }\r\n    cursor.close();\r\n    return payload;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlayCountsHelper.java"}}
{"prompt": "\n import android.database.Cursor\nimport android.content.Context\nimport ch.blinkenlights.android.medialibrary.MediaLibrary\n/**\r\n * Retrieves the id for a playlist with the given name.\r\n *\r\n * @param context the context to use\r\n * @param name The name of the playlist.\r\n * @return The id of the playlist, or -1 if there is no playlist with the\r\n * given name.\r\n */\r\npublic static long getPlaylist(Context context, String name) {\r\n    long id = -1;\r\n    final String[] projection = { MediaLibrary.PlaylistColumns._ID };\r\n    final String selection = MediaLibrary.PlaylistColumns.NAME + \"=?\";\r\n    final String[] selectionArgs = { name };\r\n    Cursor cursor = MediaLibrary.queryLibrary(context, MediaLibrary.TABLE_PLAYLISTS, projection, selection, selectionArgs, null);\r\n    if (cursor != null) {\r\n        if (cursor.moveToNext())\r", "choices": [{"text": "\n import android.database.Cursor\nimport android.content.Context\nimport ch.blinkenlights.android.medialibrary.MediaLibrary\n/**\r\n * Retrieves the id for a playlist with the given name.\r\n *\r\n * @param context the context to use\r\n * @param name The name of the playlist.\r\n * @return The id of the playlist, or -1 if there is no playlist with the\r\n * given name.\r\n */\r\npublic static long getPlaylist(Context context, String name) {\r\n    long id = -1;\r\n    final String[] projection = { MediaLibrary.PlaylistColumns._ID };\r\n    final String selection = MediaLibrary.PlaylistColumns.NAME + \"=?\";\r\n    final String[] selectionArgs = { name };\r\n    Cursor cursor = MediaLibrary.queryLibrary(context, MediaLibrary.TABLE_PLAYLISTS, projection, selection, selectionArgs, null);\r\n    if (cursor!= null) {\r\n        if (cursor.moveToNext())\r\nid = cursor.getLong(0);\r\n        cursor.close();\r\n    }\r\n    return id;\r\n}\n"}], "metadata": {"task_id": "vanilla/288", "ground_truth": "            id = cursor.getLong(0);\r\n        cursor.close();\r\n    }\r\n    return id;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\Playlist.java"}}
{"prompt": "\n import java.util.ArrayList\nimport android.database.Cursor\nimport android.content.Context\n/**\r\n * Run the given query and add the results to the given playlist. Should be\r\n * run on a background thread.\r\n *\r\n * @param context the context to use\r\n * @param playlistId The playlist id of the playlist to\r\n * modify.\r\n * @param query The query to run. The audio id should be the first column.\r\n * @return The number of songs that were added to the playlist.\r\n */\r\npublic static int addToPlaylist(Context context, long playlistId, QueryTask query) {\r\n    ArrayList<Long> result = new ArrayList<Long>();\r\n    Cursor cursor = query.runQuery(context);\r\n    if (cursor != null) {\r\n        while (cursor.moveToNext()) {\r", "choices": [{"text": "\n import java.util.ArrayList\nimport android.database.Cursor\nimport android.content.Context\n/**\r\n * Run the given query and add the results to the given playlist. Should be\r\n * run on a background thread.\r\n *\r\n * @param context the context to use\r\n * @param playlistId The playlist id of the playlist to\r\n * modify.\r\n * @param query The query to run. The audio id should be the first column.\r\n * @return The number of songs that were added to the playlist.\r\n */\r\npublic static int addToPlaylist(Context context, long playlistId, QueryTask query) {\r\n    ArrayList<Long> result = new ArrayList<Long>();\r\n    Cursor cursor = query.runQuery(context);\r\n    if (cursor!= null) {\r\n        while (cursor.moveToNext()) {\r\n//            result.add(cursor.getLong(0));\r\n        }\r\n        cursor.close();\r\n    }\r\n    return result.size();\r\n}\n"}], "metadata": {"task_id": "vanilla/290", "ground_truth": "            result.add(cursor.getLong(0));\r\n        }\r\n    }\r\n    return addToPlaylist(context, playlistId, result);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\Playlist.java"}}
{"prompt": "\n import java.util.ArrayList\nimport android.content.Context\n/**\r\n * Adds a set of audioIds to the given playlist. Should be\r\n * run on a background thread.\r\n *\r\n * @param context the context to use\r\n * @param playlistId The playlist id of the playlist to\r\n * modify.\r\n * @param audioIds An ArrayList with all IDs to add\r\n * @return The number of songs that were added to the playlist.\r\n */\r\npublic static int addToPlaylist(Context context, long playlistId, ArrayList<Long> audioIds) {\r\n    if (playlistId == -1)\r", "choices": [{"text": "//        throw new IllegalArgumentException(\"playlistId must be set\");\r\n        return 0;\r\n    if (audioIds == null || audioIds.size() == 0)\r\n//        throw new IllegalArgumentException(\"audioIds must be set\");\r\n        return 0;\r\n    ContentResolver resolver = context.getContentResolver();\r\n    ContentValues values = new ContentValues();\r\n    values.put(MediaStore.Audio.Playlists.Members.PLAYLIST_ID, playlistId);\r\n    int count = 0;\r\n    for (Long audioId : audioIds) {\r\n        values.put(MediaStore.Audio.Playlists.Members"}], "metadata": {"task_id": "vanilla/291", "ground_truth": "        return 0;\r\n    return MediaLibrary.addToPlaylist(context, playlistId, audioIds);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\Playlist.java"}}
{"prompt": "\n @Override\r\npublic void onDestroy() {\r", "choices": [{"text": "super.onDestroy();\r\nif (mLocationManager!= null) {\r\nmLocationManager.removeUpdates(this);\r\n}\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "vanilla/295", "ground_truth": "    mLooper.quit();\r\n    super.onDestroy();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaylistActivity.java"}}
{"prompt": "\n import android.content.Intent\n@Override\r\npublic void onNewIntent(Intent intent) {\r\n    long id = intent.getLongExtra(\"playlist\", 0);\r\n    String title = intent.getStringExtra(\"title\");\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "vanilla/296", "ground_truth": "    mAdapter.setPlaylistId(id);\r\n    setTitle(title);\r\n    mPlaylistId = id;\r\n    mPlaylistName = title;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaylistActivity.java"}}
{"prompt": "\n import android.content.DialogInterface\n@Override\r\npublic void onClick(DialogInterface dialog, int which) {\r\n    if (which == DialogInterface.BUTTON_POSITIVE) {\r", "choices": [{"text": "// do something\r\n    } else if (which == DialogInterface.BUTTON_NEGATIVE) {\r\n// do something else\r\n    }\r\n}\r\n});\r\nalertDialog.show();\r\n}\r\n});\r\n"}], "metadata": {"task_id": "vanilla/299", "ground_truth": "        Playlist.deletePlaylist(this, mPlaylistId);\r\n        finish();\r\n    }\r\n    dialog.dismiss();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaylistActivity.java"}}
{"prompt": "\n import android.view.MenuItem\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    if (item.getItemId() == android.R.id.home) {\r\n        finish();\r", "choices": [{"text": "}\r\nreturn super.onOptionsItemSelected(item);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "vanilla/300", "ground_truth": "        return true;\r\n    } else {\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaylistActivity.java"}}
{"prompt": "\n /**\r\n * Set the id of the backing playlist.\r\n *\r\n * @param id The id of a playlist.\r\n */\r\npublic void setPlaylistId(long id) {\r", "choices": [{"text": "this.playlistId = id;\r\n}\r\n\r\n/**\r\n * Get the id of the backing playlist.\r\n *\r\n * @return The id of a playlist.\r\n */\r\npublic long getPlaylistId() {\r\nreturn this.playlistId;\r\n}\r\n\r\n/**\r\n * Set the name of the backing playlist.\r\n *\r\n * @param name The name of a playlist.\r\n */\r\npublic void setPlaylistName(String name) {\r\nthis.playlistName = name;\r\n}\r\n\r\n/**\r\n * Get the name of the backing playlist.\r\n *\r\n * @"}], "metadata": {"task_id": "vanilla/301", "ground_truth": "    mPlaylistId = id;\r\n    mWorkerHandler.sendEmptyMessage(MSG_RUN_QUERY);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaylistAdapter.java"}}
{"prompt": "\n /**\r\n * Enabled or disable edit mode. Edit mode adds a drag grabber to the left\r\n * side a views and a delete button to the right side of views.\r\n *\r\n * @param editable True to enable edit mode.\r\n */\r\npublic void setEditable(boolean editable) {\r", "choices": [{"text": "}\r\n\r\n/**\r\n * Returns the current edit mode.\r\n *\r\n * @return True if edit mode is enabled.\r\n */\r\npublic boolean isEditable() {\r\n}\r\n\r\n/**\r\n * Sets the edit mode to the given mode.\r\n *\r\n * @param mode The edit mode to set.\r\n */\r\npublic void setEditMode(EditMode mode) {\r\n}\r\n\r\n/**\r\n * Returns the current edit mode.\r\n *\r\n * @return The current edit mode.\r\n */\r\npublic EditMode getEditMode() {\r\n}\r\n\r\n/**\r\n * Sets the"}], "metadata": {"task_id": "vanilla/302", "ground_truth": "    mEditable = editable;\r\n    notifyDataSetInvalidated();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaylistAdapter.java"}}
{"prompt": "\n import android.os.Message\nimport android.os.Handler\nimport android.database.Cursor\n@Override\r\npublic boolean handleMessage(Message message) {\r\n    switch(message.what) {\r\n        case MSG_RUN_QUERY:\r\n            {\r\n                Cursor cursor = runQuery();\r\n                mUiHandler.sendMessage(mUiHandler.obtainMessage(MSG_UPDATE_CURSOR, cursor));\r\n                break;\r\n            }\r\n        case MSG_UPDATE_CURSOR:\r\n            changeCursor((Cursor) message.obj);\r\n            break;\r", "choices": [{"text": "}\r\nreturn true;\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r"}], "metadata": {"task_id": "vanilla/303", "ground_truth": "        default:\r\n            return false;\r\n    }\r\n    return true;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaylistAdapter.java"}}
{"prompt": "\n import android.database.Cursor\n/**\r\n * Query the playlist songs.\r\n *\r\n * @return The resulting cursor.\r\n */\r\nprivate Cursor runQuery() {\r", "choices": [{"text": "// TODO: Implement this method\r\n}\r\n"}], "metadata": {"task_id": "vanilla/304", "ground_truth": "    QueryTask query = MediaUtils.buildPlaylistQuery(mPlaylistId, PROJECTION);\r\n    return query.runQuery(mContext);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaylistAdapter.java"}}
{"prompt": "\n import android.content.Intent\nimport android.app.Dialog\n/**\r\n * Creates a new playlist dialog to assemble a playlist using an intent.\r\n * Uses a static constructor method to satisfy Gradle Release Lint.\r\n */\r\npublic static PlaylistDialog newInstance(Callback callback, Intent intent, LibraryAdapter allSource, Song currentSong) {\r\n    PlaylistDialog pd = new PlaylistDialog();\r\n    pd.mCallback = callback;\r\n    pd.mData = pd.new Data();\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/307", "ground_truth": "    pd.mData.sourceIntent = intent;\r\n    pd.mData.allSource = allSource;\r\n    pd.mCurrentSong = currentSong;\r\n    return pd;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaylistDialog.java"}}
{"prompt": "\n @Override\r\npublic void onSuccess(String input) {\r\n    mData.id = -1;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/308", "ground_truth": "    mData.name = input;\r\n    mCallback.updatePlaylistFromPlaylistDialog(mData);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaylistDialog.java"}}
{"prompt": "\n import android.widget.EditText\nimport android.app.Dialog\n/**\r\n * Creates a new instance.\r\n * Uses a static constructor method to satisfy Gradle Release Lint.\r\n * @param callback the callback to call back\r\n * @param initialText the initial value mEditText\r\n * @param actionRes the label of the positive button\r\n */\r\npublic static PlaylistInputDialog newInstance(Callback callback, String initialText, int actionRes) {\r\n    PlaylistInputDialog pid = new PlaylistInputDialog();\r", "choices": [{"text": ""}], "metadata": {"task_id": "vanilla/309", "ground_truth": "    pid.mCallback = callback;\r\n    pid.mInitialText = initialText;\r\n    pid.mActionRes = actionRes;\r\n    return pid;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaylistInputDialog.java"}}
{"prompt": "\n import android.content.DialogInterface\nimport android.app.Dialog\n/**\r\n * Called when the view becomes visible, so we can\r\n * set the button positive-button and request focus\r\n */\r\npublic void onStart() {\r\n    super.onStart();\r\n    mDialog.getButton(DialogInterface.BUTTON_POSITIVE).setEnabled(false);\r", "choices": [{"text": "}\r\n/**\r\n * Called when the view is attached to the window\r\n * so we can set the button positive-button and request focus\r\n */\r\npublic void onResume() {\r\n    super.onResume();\r\n    mDialog.getButton(DialogInterface.BUTTON_POSITIVE).setEnabled(false);\r\n}\r\n/**\r\n * Called when the view is detached from the window\r\n * so we can set the button positive-button and request focus\r\n */\r\npublic void onPause() {\r\n    super.onPause();\r\n    mDialog.getButton(DialogInterface.BUTTON_POSITIVE).setEnabled(false);"}], "metadata": {"task_id": "vanilla/310", "ground_truth": "    mEditText.setText(mInitialText);\r\n    mEditText.requestFocus();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaylistInputDialog.java"}}
{"prompt": "\n import android.widget.EditText\nimport android.content.DialogInterface\nimport android.app.Dialog\n@Override\r\npublic void onClick(DialogInterface dialog, int which) {\r\n    switch(which) {\r\n        case DialogInterface.BUTTON_NEGATIVE:\r\n            // noop\r\n            break;\r\n        case DialogInterface.BUTTON_POSITIVE:\r\n            mCallback.onSuccess(mEditText.getText().toString());\r\n            break;\r", "choices": [{"text": "}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "vanilla/312", "ground_truth": "        default:\r\n            break;\r\n    }\r\n    dialog.dismiss();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaylistInputDialog.java"}}
{"prompt": "\n import ch.blinkenlights.android.medialibrary.LibraryObserver\nimport ch.blinkenlights.android.medialibrary.MediaLibrary\n/**\r\n * Unregisters this observer, the object must not be used anymore\r\n * after this function was called.\r\n */\r\npublic void unregister() {\r\n    MediaLibrary.unregisterLibraryObserver(mLibraryObserver);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/313", "ground_truth": "    mFileObserver.stopWatching();\r\n    mHandlerThread.quitSafely();\r\n    mHandlerThread = null;\r\n    mHandler = null;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaylistObserver.java"}}
{"prompt": "\n import java.io.File\n/**\r\n * Whether or not to handle (or drop) any events received.\r\n * This has the same effect as unregistering, without actually\r\n * unregistering. The function prevents false events from\r\n * being handled if our playlists folder becomes 'suspect'.\r\n */\r\nprivate boolean shouldDispatch() {\r\n    // This is so sad, but java.nio.file is only available since API 26,\r\n    // so we are stuck with java being java.\r\n    boolean deny = false;\r\n    try {\r\n        File f = File.createTempFile(\"vanilla-write-check\", null, mPlaylists);\r\n        f.delete();\r\n    } catch (Exception e) {\r\n        // don't care about the exact error: as long as the write failed,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/314", "ground_truth": "        // we should not assume that we could write anything else.\r\n        deny = true;\r\n    }\r\n    return !deny;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaylistObserver.java"}}
{"prompt": "\n import android.database.Cursor\nimport android.content.Context\n/**\r\n * Dumps all playlist to stable storage.\r\n */\r\nprivate void dumpAllAsM3uPlaylist() {\r\n    XT(\"dumpAllAsM3uPlaylist: called\");\r\n    Cursor cursor = Playlist.queryPlaylists(mContext);\r\n    if (cursor != null) {\r\n        while (cursor.moveToNext()) {\r\n            final long id = cursor.getLong(0);\r\n            XT(\"dumpAllAsM3uPlaylist: Dumping ID \" + id);\r", "choices": [{"text": "\n import android.database.Cursor\nimport android.content.Context\n/**\r\n * Dumps all playlist to stable storage.\r\n */\r\nprivate void dumpAllAsM3uPlaylist() {\r\n    XT(\"dumpAllAsM3uPlaylist: called\");\r\n    Cursor cursor = Playlist.queryPlaylists(mContext);\r\n    if (cursor!= null) {\r\n        while (cursor.moveToNext()) {\r\n            final long id = cursor.getLong(0);\r\n            XT(\"dumpAllAsM3uPlaylist: Dumping ID \" + id);\r\n//            dumpAsM3uPlaylist(id);\r\n        }\r\n        cursor.close();\r\n    }\r\n}\r\n/**\r\n * Dumps all playlist to stable storage.\r\n */\r\nprivate void dumpAsM3uPlaylist(long playlistId) {\r\n    XT(\"dumpAsM3uPlaylist: called\");\r\n    Cursor cursor = Playlist.queryPlaylist(mContext, playlistId);\r\n    if (cursor!= null) {\r\n        final String playlistName = cursor.getString(1);\r\n        final String playlistDescription = cursor.getString(2);\r\n        final String playlistAuthor = cursor.getString(3);\r\n        final"}], "metadata": {"task_id": "vanilla/316", "ground_truth": "            sendUniqueMessage(MSG_DUMP_M3U, id);\r\n        }\r\n        cursor.close();\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaylistObserver.java"}}
{"prompt": "\n import java.io.File\n/**\r\n * Returns a file object for given name\r\n *\r\n * @param name name of playlist to use.\r\n * @return file object for given name\r\n */\r\nprivate File getFileForName(File parent, String name) {\r\n    name = name.replaceAll(\"/\", \"_\");\r", "choices": [{"text": "//    name = name.replaceAll(\" \", \"_\");\r\n    return new File(parent, name);\r\n}\r\n/**\r\n * Returns a file object for given name\r\n *\r\n * @param name name of playlist to use.\r\n * @return file object for given name\r\n */\r\nprivate File getFileForName(String name) {\r\n    return getFileForName(new File(System.getProperty(\"user.home\")), name);\r\n}\r\n/**\r\n * Returns a file object for given name\r\n *\r\n * @param name name of playlist to use.\r\n * @return file object for given name"}], "metadata": {"task_id": "vanilla/318", "ground_truth": "    File f = new File(parent, name);\r\n    return f;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaylistObserver.java"}}
{"prompt": "\n import java.util.zip.CRC32\nimport java.io.FileInputStream\nimport java.io.File\n/**\r\n * Hashes the contents of given file\r\n *\r\n * @param f the file to hash\r\n * @return the calculated hash, -1 on error.\r\n */\r\nprivate long getHash(File f) {\r\n    long hash = -1;\r\n    byte[] buff = new byte[4096];\r\n    try (FileInputStream fis = new FileInputStream(f)) {\r\n        CRC32 crc = new CRC32();\r\n        while (fis.read(buff) != -1) {\r\n            crc.update(buff);\r\n        }\r\n        hash = crc.getValue();\r\n        if (hash < 0)\r\n            hash = hash * -1;\r", "choices": [{"text": "\n import java.util.zip.CRC32\nimport java.io.FileInputStream\nimport java.io.File\n/**\r\n * Hashes the contents of given file\r\n *\r\n * @param f the file to hash\r\n * @return the calculated hash, -1 on error.\r\n */\r\nprivate long getHash(File f) {\r\n    long hash = -1;\r\n    byte[] buff = new byte[4096];\r\n    try (FileInputStream fis = new FileInputStream(f)) {\r\n        CRC32 crc = new CRC32();\r\n        while (fis.read(buff)!= -1) {\r\n            crc.update(buff);\r\n        }\r\n        hash = crc.getValue();\r\n        if (hash < 0)\r\n            hash = hash * -1;\r\n//        System.out.println(\"Hash: \" + hash);\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n    return hash;\r\n}\n"}], "metadata": {"task_id": "vanilla/323", "ground_truth": "    } catch (IOException e) {\r\n        // hash will be -1 which signals failure.\r\n    }\r\n    return hash;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaylistObserver.java"}}
{"prompt": "\n import java.io.PrintWriter\nimport java.io.FileOutputStream\nimport java.io.File\nprivate void XT(String s) {\r\n    if (DEBUG) {\r\n        try (PrintWriter pw = new PrintWriter(new FileOutputStream(new File(\"/sdcard/playlist-observer.txt\"), true))) {\r\n            pw.println(System.currentTimeMillis() / 1000 + \": \" + s);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/324", "ground_truth": "            Log.v(\"VanillaMusic\", \"XTRACE: \" + s);\r\n        } catch (Exception e) {\r\n        }\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaylistObserver.java"}}
{"prompt": "\n import java.util.ArrayList\nimport java.io.File\nimport android.content.SharedPreferences\n@Override\r\npublic void onFolderPicked(File directory, ArrayList<String> a, ArrayList<String> b) {\r\n    SharedPreferences.Editor editor = SharedPrefHelper.getSettings(this).edit();\r\n    editor.putString(PrefKeys.PLAYLIST_SYNC_FOLDER, directory.getAbsolutePath());\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/326", "ground_truth": "    editor.apply();\r\n    finish();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PlaylistObserverDirActivity.java"}}
{"prompt": "\nSeekBarPreference sbUntaggedDebump;\nCheckBoxPreference cbTrackReplayGain;\n * The package name of our external helper app\r\n @Override\r\nprotected void onDestroy() {\r", "choices": [{"text": "super.onDestroy();\r\nif (mHelper!= null) {\r\nmHelper.stop();\r\n}\r\n}\r\n * The package name of our external helper app\r\n @Override\r\nprotected void onResume() {\r\nsuper.onResume();\r\nif (mHelper!= null) {\r\nmHelper.onResume();\r\n}\r\n}\r\n * The package name of our external helper app\r\n @Override\r\nprotected void onPause() {\r\nsuper.onPause();\r\nif (mHelper!= null) {\r\nmHelper.onPause();\r"}], "metadata": {"task_id": "vanilla/330", "ground_truth": "    super.onDestroy();\r\n    SharedPrefHelper.getSettings(this).unregisterOnSharedPreferenceChangeListener(this);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PreferencesActivity.java"}}
{"prompt": " import java.util.List\nimport java.util.ArrayList\n * The package name of our external helper app\r\nCheckBoxPreference cbTrackReplayGain;\nCheckBoxPreference cbAlbumReplayGain;\n@Override\r\npublic void onBuildHeaders(List<Header> target) {\r\n    ArrayList<Header> tmp = new ArrayList<Header>();\r", "choices": [{"text": "//    tmp.add(new Header(\"Music\", R.drawable.ic_menu_music));\r\n    tmp.add(new Header(\"Music\", R.drawable.ic_menu_music));\r\n    tmp.add(new Header(\"Settings\", R.drawable.ic_menu_settings));\r\n    target.addAll(tmp);\r\n}\n * The package name of our external helper app\r\nCheckBoxPreference cbTrackReplayGain;\nCheckBoxPreference cbAlbumReplayGain;\n@Override\r\npublic void onBuildHeaders(List<Header> target) {\r\n    ArrayList<Header> tmp = new ArrayList<Header"}], "metadata": {"task_id": "vanilla/331", "ground_truth": "    loadHeadersFromResource(R.xml.preference_headers, tmp);\r\n    for (Header obj : tmp) {\r\n        target.add(obj);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PreferencesActivity.java"}}
{"prompt": "\n import android.os.Bundle\n@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r", "choices": [{"text": "super.onCreate(savedInstanceState);\r\nsetContentView(R.layout.main);\r\n}\r\n}\r\n<file_sep>/README.md\n# Android-Studio-Projects\nAndroid Studio Projects\n<|endoftext|>"}], "metadata": {"task_id": "vanilla/333", "ground_truth": "    super.onCreate(savedInstanceState);\r\n    addPreferencesFromResource(R.xml.preference_audio);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PreferencesActivity.java"}}
{"prompt": " import android.preference.Preference\nCheckBoxPreference cbTrackReplayGain;\nSeekBarPreference sbGainBump;\nCheckBoxPreference cbAlbumReplayGain;\npublic boolean onPreferenceClick(Preference preference) {\r", "choices": [{"text": "if (preference == cbTrackReplayGain) {\r\nif (cbTrackReplayGain.isChecked()) {\r\nsbGainBump.setEnabled(true);\r\n} else {\r\nsbGainBump.setEnabled(false);\r\n}\r\n}\r\nreturn true;\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}"}], "metadata": {"task_id": "vanilla/334", "ground_truth": "    updateConfigWidgets();\r\n    return false;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PreferencesActivity.java"}}
{"prompt": "\n private void updateConfigWidgets() {\r\n    boolean rgOn = (cbTrackReplayGain.isChecked() || cbAlbumReplayGain.isChecked());\r", "choices": [{"text": ""}], "metadata": {"task_id": "vanilla/335", "ground_truth": "    sbGainBump.setEnabled(rgOn);\r\n    sbUntaggedDebump.setEnabled(rgOn);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PreferencesActivity.java"}}
{"prompt": "\n import android.os.Bundle\n@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r", "choices": [{"text": "super.onCreate(savedInstanceState);\r\nsetContentView(R.layout.main);\r\n}\r\n}\r\n<file_sep>/README.md\n# Android-Studio-Projects\nAndroid Studio Projects\n<|endoftext|>"}], "metadata": {"task_id": "vanilla/336", "ground_truth": "    super.onCreate(savedInstanceState);\r\n    addPreferencesFromResource(R.xml.preference_playback);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PreferencesActivity.java"}}
{"prompt": "\n import android.os.Bundle\n@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r", "choices": [{"text": "super.onCreate(savedInstanceState);\r\nsetContentView(R.layout.main);\r\n}\r\n}\r\n<file_sep>/README.md\n# Android-Studio-Projects\nAndroid Studio Projects\n<|endoftext|>"}], "metadata": {"task_id": "vanilla/337", "ground_truth": "    super.onCreate(savedInstanceState);\r\n    addPreferencesFromResource(R.xml.preference_library);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PreferencesActivity.java"}}
{"prompt": "\n import android.os.Bundle\n@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r", "choices": [{"text": "super.onCreate(savedInstanceState);\r\nsetContentView(R.layout.main);\r\n}\r\n}\r\n<file_sep>/README.md\n# Android-Studio-Projects\nAndroid Studio Projects\n<|endoftext|>"}], "metadata": {"task_id": "vanilla/338", "ground_truth": "    super.onCreate(savedInstanceState);\r\n    addPreferencesFromResource(R.xml.preference_notifications);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PreferencesActivity.java"}}
{"prompt": "\n import android.os.Bundle\n@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r", "choices": [{"text": "super.onCreate(savedInstanceState);\r\nsetContentView(R.layout.main);\r\n}\r\n}\r\n<file_sep>/README.md\n# Android-Studio-Projects\nAndroid Studio Projects\n<|endoftext|>"}], "metadata": {"task_id": "vanilla/339", "ground_truth": "    super.onCreate(savedInstanceState);\r\n    addPreferencesFromResource(R.xml.preference_shake);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PreferencesActivity.java"}}
{"prompt": "\n import android.os.Bundle\n@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r", "choices": [{"text": "super.onCreate(savedInstanceState);\r\nsetContentView(R.layout.main);\r\n}\r\n}\r\n<file_sep>/README.md\n# Android-Studio-Projects\nAndroid Studio Projects\n<|endoftext|>"}], "metadata": {"task_id": "vanilla/340", "ground_truth": "    super.onCreate(savedInstanceState);\r\n    addPreferencesFromResource(R.xml.preference_coverart);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PreferencesActivity.java"}}
{"prompt": "\n import android.os.Bundle\n@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r", "choices": [{"text": "super.onCreate(savedInstanceState);\r\nsetContentView(R.layout.main);\r\n}\r\n}\r\n<file_sep>/README.md\n# Android-Studio-Projects\nAndroid Studio Projects\n<|endoftext|>"}], "metadata": {"task_id": "vanilla/341", "ground_truth": "    super.onCreate(savedInstanceState);\r\n    addPreferencesFromResource(R.xml.preference_misc);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PreferencesActivity.java"}}
{"prompt": "\n import android.os.Bundle\n@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r", "choices": [{"text": "super.onCreate(savedInstanceState);\r\nsetContentView(R.layout.main);\r\n}\r\n}\r\n<file_sep>/README.md\n# Android-Studio-Projects\nAndroid Studio Projects\n<|endoftext|>"}], "metadata": {"task_id": "vanilla/342", "ground_truth": "    super.onCreate(savedInstanceState);\r\n    addPreferencesFromResource(R.xml.preference_playlist);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PreferencesActivity.java"}}
{"prompt": "\n import android.net.Uri\nimport android.content.Intent\nimport android.os.Bundle\nimport android.app.Activity\n@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    Activity activity = getActivity();\r\n    Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"https://github.com/vanilla-music/vanilla-music.github.io/wiki\"));\r", "choices": [{"text": "activity.startActivity(intent);\r\n}\n"}], "metadata": {"task_id": "vanilla/343", "ground_truth": "    if (intent != null) {\r\n        startActivity(intent);\r\n    }\r\n    activity.finish();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PreferencesActivity.java"}}
{"prompt": "\n import ch.blinkenlights.android.medialibrary.LibraryObserver\n@Override\r\npublic void onChange(LibraryObserver.Type type, long id, boolean ongoing) {\r\n    if (type != LibraryObserver.Type.SCAN_PROGRESS)\r\n        return;\r\n    getActivity().runOnUiThread(new Runnable() {\r\n\r\n        @Override\r", "choices": [{"text": "\n import ch.blinkenlights.android.medialibrary.LibraryObserver\n@Override\r\npublic void onChange(LibraryObserver.Type type, long id, boolean ongoing) {\r\n    if (type!= LibraryObserver.Type.SCAN_PROGRESS)\r\n        return;\r\n    getActivity().runOnUiThread(new Runnable() {\r\n\r\n        @Override\r\npublic void run() {\r\n            // TODO Auto-generated method stub\r\n            // update progress bar here\r\n        }\r\n    });\r\n}\r\n"}], "metadata": {"task_id": "vanilla/345", "ground_truth": "        public void run() {\r\n            updateProgress();\r\n        }\r\n    });\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PreferencesMediaLibrary.java"}}
{"prompt": "\n import android.view.View\n@Override\r\npublic void onClick(View view) {\r\n    switch(view.getId()) {\r\n        case R.id.start_button:\r\n            startButtonPressed(view);\r\n            break;\r\n        case R.id.cancel_button:\r\n            cancelButtonPressed(view);\r\n            break;\r\n        case R.id.edit_button:\r\n            editButtonPressed(view);\r\n            break;\r\n        case R.id.media_scan_group_albums:\r", "choices": [{"text": "//            mediaScanGroupAlbums(view);\r\n            break;\r\n        case R.id.media_scan_group_artists:\r\n//            mediaScanGroupArtists(view);\r\n            break;\r\n        case R.id.media_scan_group_genres:\r\n//            mediaScanGroupGenres(view);\r\n            break;\r\n        case R.id.media_scan_group_playlists:\r\n//            mediaScanGroupPlaylists(view);\r\n            break;\r\n        case R.id.media_scan_group_songs:\r\n//            mediaScanGroupSongs(view);"}], "metadata": {"task_id": "vanilla/347", "ground_truth": "        case R.id.media_scan_force_bastp:\r\n            confirmUpdatePreferences((CheckBox) view);\r\n            break;\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PreferencesMediaLibrary.java"}}
{"prompt": "\n import android.content.DialogInterface\npublic void onClick(DialogInterface dialog, int id) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\n}\r\n});\r\nAlertDialog alert = builder.create();\r\nalert.show();\r\n}\r\n});\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}"}], "metadata": {"task_id": "vanilla/349", "ground_truth": "    mFullScanPending = true;\r\n    confirmUpdatePreferences(checkbox);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PreferencesMediaLibrary.java"}}
{"prompt": "\n import android.content.DialogInterface\npublic void onClick(DialogInterface dialog, int id) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\n}\r\n});\r\nAlertDialog alert = builder.create();\r\nalert.show();\r\n}\r\n});\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}"}], "metadata": {"task_id": "vanilla/350", "ground_truth": "    // restore old condition if use does not want to proceed\r\n    checkbox.setChecked(!checkbox.isChecked());\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PreferencesMediaLibrary.java"}}
{"prompt": "\n import android.database.Cursor\nimport android.content.Context\nimport ch.blinkenlights.android.medialibrary.MediaLibrary\n/**\r\n * Queries the media library and calculates the sum of given column.\r\n *\r\n * @param context the context to use\r\n * @param column the column to sum up\r\n * @return the play time of the library in ms\r\n */\r\npublic long calculateSongSum(Context context, String column) {\r\n    long duration = 0;\r\n    Cursor cursor = MediaLibrary.queryLibrary(context, MediaLibrary.TABLE_SONGS, new String[] { \"SUM(\" + column + \")\" }, null, null, null);\r\n    if (cursor != null) {\r\n        if (cursor.moveToFirst()) {\r\n            duration = cursor.getLong(0);\r", "choices": [{"text": "\n import android.database.Cursor\nimport android.content.Context\nimport ch.blinkenlights.android.medialibrary.MediaLibrary\n/**\r\n * Queries the media library and calculates the sum of given column.\r\n *\r\n * @param context the context to use\r\n * @param column the column to sum up\r\n * @return the play time of the library in ms\r\n */\r\npublic long calculateSongSum(Context context, String column) {\r\n    long duration = 0;\r\n    Cursor cursor = MediaLibrary.queryLibrary(context, MediaLibrary.TABLE_SONGS, new String[] { \"SUM(\" + column + \")\" }, null, null, null);\r\n    if (cursor!= null) {\r\n        if (cursor.moveToFirst()) {\r\n            duration = cursor.getLong(0);\r\n//            Log.d(TAG, \"calculateSongSum: \" + duration);\r\n        }\r\n        cursor.close();\r\n    }\r\n    return duration;\r\n}\n"}], "metadata": {"task_id": "vanilla/352", "ground_truth": "        }\r\n        cursor.close();\r\n    }\r\n    return duration;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PreferencesMediaLibrary.java"}}
{"prompt": "\n /**\r\n * Launches the edit dialog\r\n */\r\nprivate void startMediaFoldersSelection() {\r", "choices": [{"text": "//\t\tif (mediaFolders.size() == 0) {\r\n//\t\t\treturn;\r\n//\t\t}\r\n//\t\tif (mediaFolders.size() == 1) {\r\n//\t\t\teditMediaFolder(mediaFolders.get(0));\r\n//\t\t\treturn;\r\n//\t\t}\r\n//\t\tMediaFolderDialog dialog = new MediaFolderDialog(this, mediaFolders);\r\n//\t\tdialog.show();\r\n//\t\tdialog.addListener(new MediaFolderDialog.Listener() {\r\n//\t\t\t@Override"}], "metadata": {"task_id": "vanilla/353", "ground_truth": "    mIsEditingDirectories = true;\r\n    startActivity(new Intent(getActivity(), MediaFoldersSelectionActivity.class));\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PreferencesMediaLibrary.java"}}
{"prompt": "\n import android.preference.Preference\nimport android.content.SharedPreferences\nimport android.content.Context\n@Override\r\npublic boolean onPreferenceClick(Preference pref) {\r\n    SharedPreferences.Editor editor = SharedPrefHelper.getSettings(mContext).edit();\r\n    editor.putString(PrefKeys.SELECTED_THEME, pref.getKey());\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "vanilla/354", "ground_truth": "    editor.apply();\r\n    return true;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PreferencesTheme.java"}}
{"prompt": "\n private int[] decodeValue(String v) {\r\n    String[] parts = v.split(\",\");\r\n    int[] values = new int[parts.length];\r\n    for (int i = 0; i < parts.length; i++) {\r\n        // the colors overflow an int, so we first must parse it as Long to make java happy.\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/355", "ground_truth": "        long parsedLong = (long) Long.decode(parts[i]);\r\n        values[i] = (int) parsedLong;\r\n    }\r\n    return values;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\PreferencesTheme.java"}}
{"prompt": "\n /**\r\n * Aborts all current in-flight RPCs, pausing the readahead operation\r\n */\r\npublic void pause() {\r", "choices": [{"text": "}\r\n\r\n/**\r\n * Resumes the readahead operation\r\n */\r\npublic void resume() {\r\n}\r\n\r\n/**\r\n * Sets the readahead size\r\n *\r\n * @param size the readahead size\r\n */\r\npublic void setReadahead(int size) {\r\n}\r\n\r\n/**\r\n * Sets the readahead size\r\n *\r\n * @param size the readahead size\r\n */\r\npublic void setReadahead(long size) {\r\n}\r\n\r\n/**\r\n * Sets the readahead size\r\n *\r\n * @param size the readahead size\r\n */\r\npublic void"}], "metadata": {"task_id": "vanilla/356", "ground_truth": "    mHandler.removeMessages(MSG_SET_SONG);\r\n    mHandler.removeMessages(MSG_READ_CHUNK);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ReadaheadThread.java"}}
{"prompt": "\n /**\r\n * Starts a new readahead operation. Will resume if `song.path' equals\r\n * the currently open file\r\n *\r\n * @param path The path to read ahead\r\n */\r\npublic void setSong(final Song song) {\r\n    // cancell all in-flight rpc's\r", "choices": [{"text": "}\r\n\r\n/**\r\n * Starts a new readahead operation. Will resume if `song.path' equals\r\n * the currently open file\r\n *\r\n * @param path The path to read ahead\r\n */\r\npublic void setSong(final String path) {\r\n    // cancell all in-flight rpc's\r\n}\r\n\r\n/**\r\n * Starts a new readahead operation. Will resume if `song.path' equals\r\n * the currently open file\r\n *\r\n * @param path The path to read ahead\r\n */\r\npublic void setSong(final String path, final int start, final int end) {"}], "metadata": {"task_id": "vanilla/357", "ground_truth": "    pause();\r\n    mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_SET_SONG, song), 1000);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ReadaheadThread.java"}}
{"prompt": "\n import android.app.job.JobParameters\n/**\r\n * Called by the scheduler to abort the job\r\n *\r\n * @param params the parameters of the job to abort\r\n * @return false as we do not want to get backed-off\r\n */\r\n@Override\r\npublic boolean onStopJob(JobParameters params) {\r", "choices": [{"text": "return false;\r\n}\r\n}\r\n<file_sep>/app/src/main/java/com/example/android/sunshine/app/MainActivity.java\npackage com.example.android.sunshine.app;\n\nimport android.app.Activity;\nimport android.app.AlarmManager;\nimport android.app.PendingIntent;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.preference.PreferenceManager;\nimport"}], "metadata": {"task_id": "vanilla/359", "ground_truth": "    finalizeScan();\r\n    return false;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ScheduledLibraryUpdate.java"}}
{"prompt": "\n import ch.blinkenlights.android.medialibrary.LibraryObserver\nimport ch.blinkenlights.android.medialibrary.MediaLibrary\n/**\r\n * Aborts a running scan job\r\n */\r\nprivate void finalizeScan() {\r\n    MediaLibrary.unregisterLibraryObserver(mObserver);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/360", "ground_truth": "    MediaLibrary.abortLibraryScan(this);\r\n    mJobParams = null;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ScheduledLibraryUpdate.java"}}
{"prompt": "\n import ch.blinkenlights.android.medialibrary.LibraryObserver\n@Override\r\npublic void onChange(LibraryObserver.Type type, long id, boolean ongoing) {\r\n    if (type == LibraryObserver.Type.SONG && !ongoing) {\r\n        jobFinished(mJobParams, false);\r", "choices": [{"text": "\n import ch.blinkenlights.android.medialibrary.LibraryObserver\n@Override\r\npublic void onChange(LibraryObserver.Type type, long id, boolean ongoing) {\r\n    if (type == LibraryObserver.Type.SONG &&!ongoing) {\r\n        jobFinished(mJobParams, false);\r\n}\r\n"}], "metadata": {"task_id": "vanilla/361", "ground_truth": "        finalizeScan();\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ScheduledLibraryUpdate.java"}}
{"prompt": "\n import android.widget.CheckBox\n@Override\r\nprotected void onDialogClosed(boolean positiveResult) {\r\n    if (positiveResult) {\r\n        mInitialValue = mValue;\r\n        if (mCheckBox != null)\r\n            saveCheckBoxPreference(mCheckBox.isChecked());\r\n    } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/363", "ground_truth": "        // User aborted: Set remembered start value\r\n        setValue(mInitialValue);\r\n    }\r\n    notifyChanged();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SeekBarPreference.java"}}
{"prompt": "\n import android.widget.SeekBar\n@Override\r\npublic void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\r\n    if (fromUser) {\r", "choices": [{"text": "//        Toast.makeText(this, \"Progress: \" + progress, Toast.LENGTH_SHORT).show();\r\n        if (progress == 0) {\r\n            seekBar.setProgress(1);\r\n        } else if (progress == 100) {\r\n            seekBar.setProgress(99);\r\n        } else {\r\n            seekBar.setProgress(progress);\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "vanilla/364", "ground_truth": "        progress = (progress / mSteps) * mSteps;\r\n        seekBar.setProgress(progress);\r\n        setValue(progress);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SeekBarPreference.java"}}
{"prompt": "\nprivate int mValue;\nprivate Context mContext;\nprivate float mSummaryValueAddition;\n private void setValue(int value) {\r\n    mValue = value;\r", "choices": [{"text": "}\n\n"}], "metadata": {"task_id": "vanilla/365", "ground_truth": "    mValueText.setText(getSummary(value));\r\n    persistInt(value);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SeekBarPreference.java"}}
{"prompt": "\n import android.widget.CheckBox\nimport android.content.SharedPreferences\nimport android.content.Context\nprivate void saveCheckBoxPreference(boolean enabled) {\r\n    SharedPreferences.Editor editor = SharedPrefHelper.getSettings(mContext).edit();\r", "choices": [{"text": "editor.putBoolean(SharedPrefHelper.KEY_CHECKBOX_ENABLED, enabled);\r\neditor.apply();\r\n}\r\nprivate boolean getCheckBoxPreference() {\r\nreturn SharedPrefHelper.getSettings(mContext).getBoolean(SharedPrefHelper.KEY_CHECKBOX_ENABLED, false);\r\n}\r\nprivate void saveCheckBoxPreference(boolean enabled) {\r\nSharedPreferences.Editor editor = SharedPrefHelper.getSettings(mContext).edit();\r\neditor.putBoolean(SharedPrefHelper.KEY_CHECKBOX_ENABLED, enabled);\r\neditor.apply();\r\n}\r\n"}], "metadata": {"task_id": "vanilla/366", "ground_truth": "    editor.putBoolean(mCheckBoxKey, enabled);\r\n    editor.apply();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SeekBarPreference.java"}}
{"prompt": "\n import android.content.SharedPreferences\nimport android.content.Context\n/**\r\n * Return the SharedPreferences instance containing\r\n * Application settings.\r\n */\r\npublic static SharedPreferences getSettings(Context context) {\r\n    if (sSettings == null)\r", "choices": [{"text": "sSettings = context.getSharedPreferences(PREFS_NAME, 0);\r\n    return sSettings;\r\n}\r\n"}], "metadata": {"task_id": "vanilla/368", "ground_truth": "        sSettings = PreferenceManager.getDefaultSharedPreferences(context);\r\n    return sSettings;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SharedPrefHelper.java"}}
{"prompt": "\n /**\r\n * Configures our data source\r\n *\r\n * @param service the playback service instance to use\r\n * @param pos the row to highlight, setting this to -1 disables the feature\r\n */\r\npublic void setData(PlaybackService service, int pos) {\r\n    mService = service;\r\n    mHighlightRow = pos;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/370", "ground_truth": "    mSongCount = service.getTimelineLength();\r\n    notifyDataSetChanged();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ShowQueueAdapter.java"}}
{"prompt": "\n /**\r\n * Returns the song at given position\r\n *\r\n * @param pos the position to query\r\n * @return a Song object\r\n */\r\n@Override\r\npublic Song getItem(int pos) {\r", "choices": [{"text": "return songs.get(pos);\r\n}\r\n\r\n/**\r\n * Returns the number of songs in the playlist\r\n *\r\n * @return the number of songs in the playlist\r\n */\r\n@Override\r\npublic int getCount() {\r\nreturn songs.size();\r\n}\r\n\r\n/**\r\n * Returns the position of the song in the playlist\r\n *\r\n * @param song the song to query\r\n * @return the position of the song in the playlist\r\n */\r\n@Override\r\npublic long getItemId(int pos) {\r\nreturn pos;\r\n}\r\n\r\n/**\r\n *"}], "metadata": {"task_id": "vanilla/371", "ground_truth": "    Song item = mService.getSongByQueuePosition(pos);\r\n    return (item != null ? item : new Song(-1));\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ShowQueueAdapter.java"}}
{"prompt": "\n import android.view.View\n@Override\r\npublic void onDestroyView() {\r", "choices": [{"text": "super.onDestroyView();\r\nif (mWebView!= null) {\r\nmWebView.loadDataWithBaseURL(null, \"\", \"text/html\", \"utf-8\", null);\r\nmWebView.clearHistory();\r\nmWebView.clearView();\r\nmWebView.removeAllViews();\r\nmWebView.destroy();\r\nmWebView = null;\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "vanilla/372", "ground_truth": "    PlaybackService.removeTimelineCallback(this);\r\n    super.onDestroyView();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ShowQueueFragment.java"}}
{"prompt": "\n /**\r\n * Fired from adapter listview  if user moved an item\r\n * @param from the item index that was dragged\r\n * @param to the index where the item was dropped\r\n */\r\n@Override\r\npublic void drop(int from, int to) {\r\n    if (from != to) {\r", "choices": [{"text": "\n /**\r\n * Fired from adapter listview  if user moved an item\r\n * @param from the item index that was dragged\r\n * @param to the index where the item was dropped\r\n */\r\n@Override\r\npublic void drop(int from, int to) {\r\n    if (from!= to) {\r\n//        Log.d(TAG, \"drop from \" + from + \" to \" + to);\r\n        // swap the items\r\n        String item = adapter.getItem(from);\r\n        adapter.remove(from);\r\n        adapter.insert(item, to);\r\n        adapter.notifyDataSetChanged();\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "vanilla/374", "ground_truth": "        playbackService().moveSongPosition(from, to);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ShowQueueFragment.java"}}
{"prompt": "\n import android.view.View\nimport android.annotation.SuppressLint\n/**\r\n * Scrolls to the current song<br/>\r\n * We suppress the new api lint check as lint thinks\r\n * {@link android.widget.AbsListView#setSelectionFromTop(int, int)} was only added in\r\n * {@link Build.VERSION_CODES#JELLY_BEAN}, but it was actually added in API\r\n * level 1<br/>\r\n * <a href=\"https://developer.android.com/reference/android/widget/AbsListView.html#setSelectionFromTop%28int,%20int%29\">\r\n *     Android reference: AbsListView.setSelectionFromTop()</a>\r\n * @param currentSongPosition The position in {@link #mListView} of the current song\r\n */\r\n@SuppressLint(\"NewApi\")\r\nprivate void scrollToCurrentSong(int currentSongPosition) {\r", "choices": [{"text": "mListView.setSelectionFromTop(currentSongPosition, 0);\r\n}\r\n"}], "metadata": {"task_id": "vanilla/376", "ground_truth": "    mListView.setSelectionFromTop(currentSongPosition, 0);\r\n    /* scroll to currently playing song */\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ShowQueueFragment.java"}}
{"prompt": "\n import android.content.Context\n/**\r\n * Called after a song has been set.\r\n *\r\n * We are generally not interested in such events as we do not display\r\n * any playback state - only the queue (which has its changes announced\r\n * using `onTimelineChanged()'.\r\n * However: We are still interested in `setSong()' if we are unpopulated:\r\n * Such an event will then indicate that the PlaybackService just finished\r\n * its startup and is ready to be queried.\r\n */\r\npublic void setSong(long uptime, Song song) {\r\n    if (PlaybackService.hasInstance()) {\r\n        boolean scroll = SharedPrefHelper.getSettings(getActivity().getApplicationContext()).getBoolean(PrefKeys.QUEUE_ENABLE_SCROLL_TO_SONG, PrefDefaults.QUEUE_ENABLE_SCROLL_TO_SONG);\r", "choices": [{"text": "//        if (scroll) {\r\n//            mQueue.scrollToSong(song);\r\n//        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "vanilla/377", "ground_truth": "        if (!mIsPopulated || scroll) {\r\n            refreshSongQueueList(scroll);\r\n        }\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ShowQueueFragment.java"}}
{"prompt": "\n /**\r\n * Called after the timeline changed\r\n */\r\npublic void onTimelineChanged() {\r\n    if (PlaybackService.hasInstance()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/378", "ground_truth": "        refreshSongQueueList(false);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ShowQueueFragment.java"}}
{"prompt": "\n @Override\r\npublic void onResume() {\r\n    super.onResume();\r", "choices": [{"text": "}\r\n\r\n@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n}\r\n\r\n@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "vanilla/380", "ground_truth": "    mPaused = false;\r\n    updateElapsedTime();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SlidingPlaybackActivity.java"}}
{"prompt": "\n @Override\r\npublic void onPause() {\r", "choices": [{"text": "super.onPause();\r\nif (mAdView!= null) {\r\nmAdView.pause();\r\n}\r\n}\r\n\r\n@Override\r\npublic void onResume() {\r\nsuper.onResume();\r\nif (mAdView!= null) {\r\nmAdView.resume();\r\n}\r\n}\r\n\r\n@Override\r\npublic void onDestroy() {\r\nsuper.onDestroy();\r\nif (mAdView!= null) {\r\nmAdView.destroy();\r\n}\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "vanilla/381", "ground_truth": "    super.onPause();\r\n    mPaused = true;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SlidingPlaybackActivity.java"}}
{"prompt": "\n @Override\r\nprotected void onSongChange(Song song) {\r\n    setDuration(song == null ? 0 : song.duration);\r", "choices": [{"text": "\n @Override\r\nprotected void onSongChange(Song song) {\r\n    setDuration(song == null? 0 : song.duration);\r\n}\r\n"}], "metadata": {"task_id": "vanilla/382", "ground_truth": "    updateElapsedTime();\r\n    super.onSongChange(song);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SlidingPlaybackActivity.java"}}
{"prompt": "\n @Override\r\nprotected void onStateChange(int state, int toggled) {\r", "choices": [{"text": "super.onStateChange(state, toggled);\r\nif (state == STATE_ON) {\r\n// do something\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "vanilla/383", "ground_truth": "    updateElapsedTime();\r\n    super.onStateChange(state, toggled);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SlidingPlaybackActivity.java"}}
{"prompt": "\n import android.os.Message\n@Override\r\npublic boolean handleMessage(Message message) {\r\n    switch(message.what) {\r\n        case MSG_UPDATE_PROGRESS:\r\n            updateElapsedTime();\r\n            break;\r\n        case MSG_SEEK_TO_PROGRESS:\r\n            PlaybackService.get(this).seekToProgress(message.arg1);\r\n            updateElapsedTime();\r\n            break;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/384", "ground_truth": "        default:\r\n            return super.handleMessage(message);\r\n    }\r\n    return true;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SlidingPlaybackActivity.java"}}
{"prompt": "\n /**\r\n * Update the current song duration fields.\r\n *\r\n * @param duration The new duration, in milliseconds.\r\n */\r\nprivate void setDuration(long duration) {\r", "choices": [{"text": "mDuration = duration;\r\nmDurationString = formatTime(duration);\r\nmDurationView.setText(mDurationString);\r\n}\r\n\r\n/**\r\n * Update the current song position fields.\r\n *\r\n * @param position The new position, in milliseconds.\r\n */\r\nprivate void setPosition(long position) {\r\nmPosition = position;\r\nmPositionString = formatTime(position);\r\nmPositionView.setText(mPositionString);\r\n}\r\n\r\n/**\r\n * Update the current song progress bar.\r\n *\r\n * @param progress The new progress, in"}], "metadata": {"task_id": "vanilla/385", "ground_truth": "    mDuration = duration;\r\n    mDurationView.setText(DateUtils.formatElapsedTime(mTimeBuilder, duration / 1000));\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SlidingPlaybackActivity.java"}}
{"prompt": "\n @Override\r\npublic void onPositionSubmit(int position) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\n}\r\n}\r\n"}], "metadata": {"task_id": "vanilla/387", "ground_truth": "    PlaybackService.get(this).seekToPosition(position);\r\n    updateElapsedTime();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SlidingPlaybackActivity.java"}}
{"prompt": "\n /**\r\n * Hides the slide\r\n */\r\npublic void hideSlide() {\r\n    // ensure that parent is visible before the animation starts\r", "choices": [{"text": "//    if (parent.getVisibility()!= View.VISIBLE) {\r\n//        parent.setVisibility(View.VISIBLE);\r\n//    }\r\n    // animate the slide out\r\n    slideAnimator.start();\r\n}\r\n"}], "metadata": {"task_id": "vanilla/388", "ground_truth": "    setSlaveViewStage(0);\r\n    setExpansionStage(0);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SlidingView.java"}}
{"prompt": "\n import android.view.View.OnTouchListener\nimport android.view.ViewGroup\nimport android.view.View\n/**\r\n * Called after the view was inflated, binds an onTouchListener to all child\r\n * elements of the child view\r\n */\r\n@Override\r\nprotected void onFinishInflate() {\r\n    super.onFinishInflate();\r\n    View handle = findViewById(mSliderHandleId);\r\n    if (handle != null) {\r\n        if (handle instanceof ViewGroup) {\r\n            ViewGroup group = (ViewGroup) handle;\r\n            for (int i = 0; i < group.getChildCount(); i++) {\r\n                group.getChildAt(i).setOnTouchListener(this);\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/391", "ground_truth": "        } else {\r\n            handle.setOnTouchListener(this);\r\n        }\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SlidingView.java"}}
{"prompt": "\n import android.view.View\n@Override\r\nprotected void onWindowVisibilityChanged(int state) {\r\n    super.onWindowVisibilityChanged(state);\r\n    if (state == View.GONE && mDelayedHide) {\r", "choices": [{"text": "//        mHideHandler.removeCallbacks(mHideRunnable);\r\n        mHideHandler.postDelayed(mHideRunnable, HIDE_DELAY_MILLIS);\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "vanilla/392", "ground_truth": "        hideSlide();\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SlidingView.java"}}
{"prompt": "\n import android.view.MotionEvent\n@Override\r\npublic boolean onFling(MotionEvent event1, MotionEvent event2, float velocityX, float velocityY) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nif(event1.getX()-event2.getX()>120){\r\n//Toast.makeText(getApplicationContext(), \"Left to Right\", Toast.LENGTH_SHORT).show();\r\nreturn true;\r\n}\r\nelse if(event1.getX()-event2.getX()<-120){\r\n//Toast.makeText(getApplicationContext(), \"Right to Left\", Toast.LENGTH_SHORT).show();\r\nreturn true;\r\n}\r\nelse if(event1.getY()-event2.getY()>120){\r\n//"}], "metadata": {"task_id": "vanilla/393", "ground_truth": "    mFlingVelocity = velocityY;\r\n    return true;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SlidingView.java"}}
{"prompt": "\n /**\r\n * Get the id of the given song.\r\n *\r\n * @param song The Song to get the id from.\r\n * @return The id, or 0 if the given song is null.\r\n */\r\npublic static long getId(Song song) {\r\n    if (song == null)\r", "choices": [{"text": "return 0;\r\nreturn song.getId();\r\n}\r\n/**\r\n * Get the id of the given song.\r\n *\r\n * @param song The Song to get the id from.\r\n * @return The id, or 0 if the given song is null.\r\n */\r\npublic static long getId(Song song) {\r\n    if (song == null)\r\nreturn 0;\r\nreturn song.getId();\r\n}\r\n/**\r\n * Get the id of the given song.\r\n *\r\n * @param song The Song to get the id from.\r\n * @return"}], "metadata": {"task_id": "vanilla/395", "ground_truth": "        return 0;\r\n    return song.id;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\Song.java"}}
{"prompt": "\n /**\r\n * @return track and disc number of this song within its album\r\n */\r\npublic String getTrackAndDiscNumber() {\r\n    String result = Integer.toString(trackNumber);\r", "choices": [{"text": "//    if (discNumber > 1) {\r\n//        result += \" (\" + Integer.toString(discNumber) + \")\";\r\n//    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * @return track and disc number of this song within its album\r\n */\r\npublic String getTrackAndDiscNumber(String separator) {\r\n    String result = Integer.toString(trackNumber);\r\n    if (discNumber > 1) {\r\n        result += separator + Integer.toString(discNumber);\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * @return track and disc number"}], "metadata": {"task_id": "vanilla/396", "ground_truth": "    if (discNumber > 0) {\r\n        result += String.format(\" (%d\ud83d\udcbf)\", discNumber);\r\n    }\r\n    return result;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\Song.java"}}
{"prompt": "\n @Override\r\npublic int compare(Song a, Song b) {\r\n    if (a.id == b.id)\r", "choices": [{"text": "return 0;\r\nelse if (a.id < b.id)\r\nreturn -1;\r\nelse\r\nreturn 1;\r\n}\r\n}\r\n}\r\n<file_sep>/src/main/java/com/example/demo/controller/SongController.java\npackage com.example.demo.controller;\r\n\r\nimport java.util.List;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.DeleteMapping;\r\nimport org.springframework.web.bind.annotation.GetMapping;"}], "metadata": {"task_id": "vanilla/400", "ground_truth": "        return 0;\r\n    if (a.id > b.id)\r\n        return 1;\r\n    return -1;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SongTimeline.java"}}
{"prompt": "\n import java.util.List\nimport java.util.ArrayList\n/**\r\n * Set how to shuffle. Will shuffle the current set of songs when enabling\r\n * shuffling if random mode is not enabled.\r\n *\r\n * @param mode One of SongTimeline.MODE_*\r\n */\r\npublic void setShuffleMode(int mode) {\r\n    if (mode == mShuffleMode)\r\n        return;\r\n    synchronized (this) {\r\n        saveActiveSongs();\r\n        mShuffleMode = mode;\r\n        if (mode != SHUFFLE_NONE && mFinishAction != FINISH_RANDOM && !mSongs.isEmpty()) {\r\n            ArrayList<Song> songs = getShuffledTimeline(false);\r\n            mCurrentPos = songs.indexOf(mSavedCurrent);\r\n            mSongs = songs;\r", "choices": [{"text": "\n import java.util.List\nimport java.util.ArrayList\n/**\r\n * Set how to shuffle. Will shuffle the current set of songs when enabling\r\n * shuffling if random mode is not enabled.\r\n *\r\n * @param mode One of SongTimeline.MODE_*\r\n */\r\npublic void setShuffleMode(int mode) {\r\n    if (mode == mShuffleMode)\r\n        return;\r\n    synchronized (this) {\r\n        saveActiveSongs();\r\n        mShuffleMode = mode;\r\n        if (mode!= SHUFFLE_NONE && mFinishAction!= FINISH_RANDOM &&!mSongs.isEmpty()) {\r\n            ArrayList<Song> songs = getShuffledTimeline(false);\r\n            mCurrentPos = songs.indexOf(mSavedCurrent);\r\n            mSongs = songs;\r\n//            mSavedCurrent = mSongs.get(mCurrentPos);\r\n            mSavedCurrent = mSongs.get(mCurrentPos);\r\n            mSavedCurrent.setPlayed(true);\r\n            mSavedCurrent.setPlayedCount(1);\r\n            mSavedCurrent.setPlayedTime(0);\r\n            mSavedCurrent.setPlayedTime(0);\r\n            mSavedCurrent.setPlayedTime(0);\r\n            mSavedCurrent.setPlayedTime(0);\r\n            mSavedCurrent.setPlayedTime(0);\r\n            mSavedCurrent.setPlayedTime(0);\r\n           "}], "metadata": {"task_id": "vanilla/401", "ground_truth": "        }\r\n        broadcastChangedSongs();\r\n    }\r\n    changed();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SongTimeline.java"}}
{"prompt": "\n import java.util.List\nimport java.util.Collections\nimport java.util.ArrayList\n/**\r\n * Shuffles the current timeline but keeps the current\r\n * queue position\r\n */\r\nprivate void reshuffleTimeline() {\r\n    synchronized (this) {\r\n        saveActiveSongs();\r\n        ArrayList<Song> songs = getShuffledTimeline(false);\r\n        int newPosition = songs.indexOf(mSavedCurrent);\r\n        Collections.swap(songs, newPosition, mCurrentPos);\r", "choices": [{"text": "//        mSavedCurrent = songs.get(mCurrentPos);\r\n        mSavedCurrent = mSavedCurrent.clone();\r\n        mSavedCurrent.setQueuePosition(mCurrentPos);\r\n        mSavedCurrent.setQueue(songs);\r\n        mSavedCurrent.setQueueSize(songs.size());\r\n        mSavedCurrent.setQueuePosition(newPosition);\r\n        mSavedCurrent.setQueue(songs);\r\n        mSavedCurrent.setQueueSize(songs.size());\r\n        mSavedCurrent.setQueuePosition(newPosition);\r\n        mSavedCurrent.setQueue(songs);\r\n        mSavedCurrent.setQueueSize("}], "metadata": {"task_id": "vanilla/403", "ground_truth": "        mSongs = songs;\r\n        broadcastChangedSongs();\r\n    }\r\n    changed();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SongTimeline.java"}}
{"prompt": "\n /**\r\n * Internal implementation for shiftCurrentSong. Does all the work except\r\n * broadcasting the timeline change: updates mCurrentPos and handles\r\n * shuffling, repeating, and random mode.\r\n *\r\n * @param delta -1 to move to the previous song or 1 for the next.\r\n */\r\nprivate void shiftCurrentSongInternal(int delta) {\r\n    int pos = mCurrentPos + delta;\r\n    if (mFinishAction != FINISH_RANDOM && pos == mSongs.size()) {\r\n        if (mShuffleMode != SHUFFLE_NONE && !mSongs.isEmpty()) {\r\n            mSongs = getShuffledTimeline(true);\r\n        }\r\n        pos = 0;\r\n    } else if (pos < 0) {\r\n        if (mFinishAction == FINISH_RANDOM)\r\n            pos = 0;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/404", "ground_truth": "        else\r\n            pos = Math.max(0, mSongs.size() - 1);\r\n    }\r\n    mCurrentPos = pos;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SongTimeline.java"}}
{"prompt": "\n /**\r\n * Hard-Jump to given queue position\r\n */\r\npublic Song setCurrentQueuePosition(int pos) {\r\n    synchronized (this) {\r\n        saveActiveSongs();\r\n        mCurrentPos = pos;\r", "choices": [{"text": "//        mPlayer.seekTo(mCurrentPos);\r\n        return mActiveSongs.get(mCurrentPos);\r\n    }\r\n}\r\n\r\n/**\r\n * Hard-Jump to given queue position\r\n */\r\npublic Song setCurrentQueuePosition(int pos, boolean play) {\r\n    synchronized (this) {\r\n        saveActiveSongs();\r\n        mCurrentPos = pos;\r\n//        mPlayer.seekTo(mCurrentPos);\r\n        if (play) {\r\n            play();\r\n        }\r\n        return mActiveSongs.get(mCurrentPos);\r\n    }\r\n}\r\n\r\n/**\r\n * Hard-"}], "metadata": {"task_id": "vanilla/405", "ground_truth": "        broadcastChangedSongs();\r\n    }\r\n    changed();\r\n    return getSong(0);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SongTimeline.java"}}
{"prompt": "\n /**\r\n * Returns 'Song' at given position in queue\r\n */\r\npublic Song getSongByQueuePosition(int pos) {\r\n    Song song = null;\r\n    synchronized (this) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/406", "ground_truth": "        if (mSongs.size() > pos)\r\n            song = mSongs.get(pos);\r\n    }\r\n    return song;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SongTimeline.java"}}
{"prompt": "\n /**\r\n * Returns song position for given {@link Song.id}\r\n */\r\npublic int getQueuePositionForSongId(long id) {\r\n    synchronized (this) {\r\n        for (int pos = 0; pos < mSongs.size(); pos++) {\r\n            Song current = mSongs.get(pos);\r\n            if (current.id == id)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/407", "ground_truth": "                return pos;\r\n        }\r\n    }\r\n    return -1;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SongTimeline.java"}}
{"prompt": "\n /**\r\n * Removes any songs greater than `len' songs before the current song.\r\n */\r\nprivate void shrinkQueue(int len) {\r\n    synchronized (this) {\r\n        while (mCurrentPos > len) {\r\n            mSongs.remove(0);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/408", "ground_truth": "            mCurrentPos--;\r\n        }\r\n    }\r\n    changed();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SongTimeline.java"}}
{"prompt": "\n /**\r\n * Clear the song queue.\r\n */\r\npublic void clearQueue() {\r\n    synchronized (this) {\r\n        saveActiveSongs();\r\n        if (mCurrentPos + 1 < mSongs.size())\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/409", "ground_truth": "            mSongs.subList(mCurrentPos + 1, mSongs.size()).clear();\r\n        broadcastChangedSongs();\r\n    }\r\n    changed();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SongTimeline.java"}}
{"prompt": "\n /**\r\n * Empty the song queue (clear the whole queue).\r\n */\r\npublic void emptyQueue() {\r\n    synchronized (this) {\r\n        saveActiveSongs();\r\n        mSongs.clear();\r", "choices": [{"text": "//        mSongs.notifyAll();\r\n        mSongs.notify();\r\n    }\r\n}\r\n\r\n/**\r\n * Get the song at the given position in the queue.\r\n *\r\n * @param position The position of the song in the queue.\r\n * @return The song at the given position.\r\n */\r\npublic Song getSong(int position) {\r\n    synchronized (this) {\r\n        return mSongs.get(position);\r\n    }\r\n}\r\n\r\n/**\r\n * Get the song at the given position in the queue.\r\n *\r\n * @param position The position of the song in"}], "metadata": {"task_id": "vanilla/410", "ground_truth": "        mCurrentPos = 0;\r\n        broadcastChangedSongs();\r\n    }\r\n    changed();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SongTimeline.java"}}
{"prompt": "\n import java.util.List\nimport java.util.ArrayList\n/**\r\n * Removes song in timeline at given position\r\n * @param pos index to use\r\n */\r\npublic void removeSongPosition(int pos) {\r\n    synchronized (this) {\r\n        ArrayList<Song> songs = mSongs;\r\n        if (// may happen if we race with purge()\r\n        songs.size() <= pos)\r\n            return;\r\n        saveActiveSongs();\r\n        songs.remove(pos);\r\n        if (pos < mCurrentPos)\r\n            mCurrentPos--;\r\n        if (// wrap around if this was the last song\r\n        getSong(1) == null)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/412", "ground_truth": "            mCurrentPos = 0;\r\n        broadcastChangedSongs();\r\n    }\r\n    changed();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SongTimeline.java"}}
{"prompt": "\n /**\r\n * Return true if the finish action is to stop at the end of the queue and\r\n * the current song is the last in the queue.\r\n */\r\npublic boolean isEndOfQueue() {\r\n    synchronized (this) {\r", "choices": [{"text": "//        if (queue.size() == 0) {\r\n//            return true;\r\n//        }\r\n        return (queue.size() == 0) || (queue.peek() == currentSong);\r\n    }\r\n}\r\n\r\n/**\r\n * Return true if the finish action is to stop at the end of the queue and\r\n * the current song is the last in the queue.\r\n */\r\npublic boolean isEndOfQueue() {\r\n    synchronized (this) {\r\n//        if (queue.size() == 0) {\r\n//            return true;\r\n//       "}], "metadata": {"task_id": "vanilla/414", "ground_truth": "        return mFinishAction == FINISH_STOP && mCurrentPos == mSongs.size() - 1;\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SongTimeline.java"}}
{"prompt": "\nint mSortMode;\nint[] mSortEntries;\n * instead of ascending).\r\n private int getIndexForSortMode(int mode) {\r", "choices": [{"text": "return Arrays.asList(mSortEntries).indexOf(mode);\r\n }\r\n *\r\n * @param mode\r\n * @return\r\n */\r\nprivate int getSortMode(int mode) {\r\nreturn mSortEntries[mode];\r\n }\r\n *\r\n * @param mode\r\n * @return\r\n */\r\nprivate int getSortMode(String mode) {\r\nreturn Arrays.asList(mSortEntries).indexOf(mode);\r\n }\r\n *\r\n * @param mode\r\n * @return\r\n */\r\nprivate String getSortMode(int mode) {\r\nreturn mSortEntries[mode];"}], "metadata": {"task_id": "vanilla/415", "ground_truth": "    // 'negative' modes are actually inverted indexes\r\n    return mode < 0 ? ~mode : mode;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\SortableAdapter.java"}}
{"prompt": "\n import android.view.MenuItem\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    if (item.getItemId() == android.R.id.home) {\r\n        finish();\r", "choices": [{"text": "}\r\nreturn super.onOptionsItemSelected(item);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "vanilla/418", "ground_truth": "        return true;\r\n    } else {\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\TabOrderActivity.java"}}
{"prompt": "\n import android.view.View\n@Override\r\npublic void onClick(View view) {\r\n    switch(view.getId()) {\r\n        case R.id.done:\r\n            finish();\r\n            break;\r", "choices": [{"text": "}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "vanilla/419", "ground_truth": "        case R.id.restore_default:\r\n            restoreDefault();\r\n            break;\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\TabOrderActivity.java"}}
{"prompt": "\n /**\r\n * Set the array containing the order of tab ids.\r\n */\r\npublic void setTabIds(int[] ids) {\r", "choices": [{"text": "tabIds = ids;\r\n}\r\n/**\r\n * Set the array containing the order of tab ids.\r\n */\r\npublic void setTabIds(String[] ids) {\r\ntabIds = new int[ids.length];\r\nfor (int i = 0; i < ids.length; i++) {\r\ntabIds[i] = Integer.parseInt(ids[i]);\r\n}\r\n}\r\n/**\r\n * Set the array containing the order of tab ids.\r\n */\r\npublic void setTabIds(String ids) {\r\ntabIds = new int"}], "metadata": {"task_id": "vanilla/423", "ground_truth": "    mTabIds = ids;\r\n    notifyDataSetChanged();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\TabOrderAdapter.java"}}
{"prompt": "\n import android.content.Context\n/**\r\n * Returns TRUE if we should use the dark material theme,\r\n * Returns FALSE otherwise - always returns FALSE on pre-5.x devices\r\n */\r\nfinal private static boolean usesDarkTheme(Context context) {\r\n    final int idx = getSelectedThemeIndex(context);\r\n    final String[] variants = context.getResources().getStringArray(R.array.theme_variant);\r", "choices": [{"text": "//    Log.d(TAG, \"Theme index: \" + idx + \" variant: \" + variants[idx]);\r\n    return idx == 1;\r\n}\n"}], "metadata": {"task_id": "vanilla/425", "ground_truth": "    boolean useDark = variants[idx].equals(\"dark\");\r\n    return useDark;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ThemeHelper.java"}}
{"prompt": "\n import android.content.SharedPreferences\nimport android.content.Context\n/**\r\n * Returns the user-selected theme index from the shared peferences provider\r\n *\r\n * @param context the context to use\r\n * @return integer of the selected theme\r\n */\r\nfinal private static int getSelectedThemeIndex(Context context) {\r\n    SharedPreferences settings = SharedPrefHelper.getSettings(context);\r\n    String prefValue = settings.getString(PrefKeys.SELECTED_THEME, PrefDefaults.SELECTED_THEME);\r\n    final String[] ids = context.getResources().getStringArray(R.array.theme_ids);\r\n    for (int i = 0; i < ids.length; i++) {\r\n        if (ids[i].equals(prefValue))\r", "choices": [{"text": "return i;\r\n    }\r\n    return 0;\r\n}\r\n/**\r\n * Returns the user-selected theme from the shared peferences provider\r\n *\r\n * @param context the context to use\r\n * @return integer of the selected theme\r\n */\r\nfinal private static int getSelectedTheme(Context context) {\r\n    SharedPreferences settings = SharedPrefHelper.getSettings(context);\r\n    String prefValue = settings.getString(PrefKeys.SELECTED_THEME, PrefDefaults.SELECTED_THEME);\r\n    final String[] ids = context.getResources().getStringArray(R.array.theme_ids);\r\n    for ("}], "metadata": {"task_id": "vanilla/426", "ground_truth": "            return i;\r\n    }\r\n    // no theme found? return default theme.\r\n    return 0;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ThemeHelper.java"}}
{"prompt": "\n import android.content.res.TypedArray\nimport android.content.Context\n/**\r\n * Fetches a color resource from the current theme\r\n */\r\nfinal public static int fetchThemeColor(Context context, int resId) {\r\n    TypedArray a = context.obtainStyledAttributes(new int[] { resId });\r\n    int color = a.getColor(0, 0);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/427", "ground_truth": "    a.recycle();\r\n    return color;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ThemeHelper.java"}}
{"prompt": "\n import android.content.Context\n/**\r\n * Returns the color to be used to draw the placeholder cover.\r\n */\r\nfinal public static int[] getDefaultCoverColors(Context context) {\r\n    int bg = fetchThemeColor(context, android.R.attr.colorBackground);\r", "choices": [{"text": "//    int bg = context.getResources().getColor(android.R.color.background_dark);\r\n    return new int[] { bg, bg, bg, bg };\r\n}\r\n/**\r\n * Returns the color to be used to draw the placeholder cover.\r\n */\r\nfinal public static int[] getDefaultCoverColors(Context context, int bg) {\r\n    return new int[] { bg, bg, bg, bg };\r\n}\r\n/**\r\n * Returns the color to be used to draw the placeholder cover.\r\n */\r\nfinal public static int[] getDefaultCoverColors(Context context, int bg"}], "metadata": {"task_id": "vanilla/428", "ground_truth": "    int diff = 0x00171717 * (bg > 0xFF888888 ? -1 : 1);\r\n    return new int[] { bg, bg + diff };\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ThemeHelper.java"}}
{"prompt": "\n /**\r\n * Creates a new dialog to show details about the given song\r\n *\r\n * @param songId ID of song this dialog is for\r\n * @return a new dialog\r\n */\r\npublic static TrackDetailsDialog newInstance(long songId) {\r\n    TrackDetailsDialog dialog = new TrackDetailsDialog();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/429", "ground_truth": "    Bundle args = new Bundle();\r\n    args.putLong(SONG_ID, songId);\r\n    dialog.setArguments(args);\r\n    return dialog;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\TrackDetailsDialog.java"}}
{"prompt": "\n import android.os.HandlerThread\nimport android.os.Handler\nimport android.os.Bundle\n@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    mHandlerThread = new HandlerThread(getClass().getName());\r", "choices": [{"text": "}\r\n@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n    mHandlerThread.quit();\r\n}\r\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n    mHandlerThread.start();\r\n    mHandler = new Handler(mHandlerThread.getLooper());\r\n}\r\n@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    mHandler.removeCallbacksAndMessages(null);\r\n    mHandlerThread.quit();\r\n}\r\n"}], "metadata": {"task_id": "vanilla/430", "ground_truth": "    mHandlerThread.start();\r\n    setStyle(DialogFragment.STYLE_NO_TITLE, 0);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\TrackDetailsDialog.java"}}
{"prompt": "\n @Override\r\npublic void onDestroy() {\r", "choices": [{"text": "super.onDestroy();\r\nif (mLocationManager!= null) {\r\nmLocationManager.removeUpdates(this);\r\n}\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "vanilla/432", "ground_truth": "    super.onDestroy();\r\n    mHandlerThread.quit();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\TrackDetailsDialog.java"}}
{"prompt": "\n import android.graphics.drawable.PaintDrawable\nimport android.graphics.Paint\n/**\r\n * Set arrow and background color of this view.\r\n */\r\npublic void setColors(int colA, int colB) {\r\n    PaintDrawable bg = new PaintDrawable(colB);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/433", "ground_truth": "    setBackgroundDrawable(bg);\r\n    mArrowColor = colA;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ui\\ArrowedText.java"}}
{"prompt": "\n import android.content.Context\n/**\r\n * Internal add implementation\r\n *\r\n * @param id the id which identifies the object\r\n * @param order how to sort this item\r\n * @param icon the icon resource to use\r\n * @param text the text label to display\r\n * @param spacer whether or not this is a spacer\r\n * @return a new FancyMenuItem\r\n */\r\nprivate FancyMenuItem addInternal(int id, int order, int icon, CharSequence text, boolean spacer) {\r\n    FancyMenuItem item = new FancyMenuItem(mContext, id).setIcon(icon).setTitle(text).setIsSpacer(spacer);\r\n    while (order >= mItems.size()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/435", "ground_truth": "        mItems.add(new ArrayList<FancyMenuItem>());\r\n    }\r\n    mItems.get(order).add(item);\r\n    return item;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ui\\FancyMenu.java"}}
{"prompt": "\n import java.util.ArrayList\nimport android.content.Context\n/**\r\n * Creates an Adapter from a nested ArrayList\r\n *\r\n * @param items the nested list containing the items\r\n * @return the new adapter\r\n */\r\nprivate Adapter assembleAdapter(ArrayList<ArrayList<FancyMenuItem>> items) {\r\n    final Adapter adapter = new Adapter(mContext, 0);\r\n    for (ArrayList<FancyMenuItem> sub : items) {\r\n        for (FancyMenuItem item : sub) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/436", "ground_truth": "            adapter.add(item);\r\n        }\r\n    }\r\n    return adapter;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ui\\FancyMenu.java"}}
{"prompt": "\n import android.widget.AdapterView\nimport android.view.View\n@Override\r\npublic void onItemClick(AdapterView<?> parent, View view, int pos, long id) {\r\n    FancyMenuItem item = adapter.getItem(pos);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "vanilla/437", "ground_truth": "    if (!item.isSpacer()) {\r\n        mCallback.onFancyItemSelected(item);\r\n    }\r\n    sheet.dismiss();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ui\\FancyMenu.java"}}
{"prompt": "\n import android.view.MenuItem\npublic FancyMenuItem setIsSpacer(boolean spacer) {\r", "choices": [{"text": ""}], "metadata": {"task_id": "vanilla/438", "ground_truth": "    mSpacer = spacer;\r\n    return this;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ui\\FancyMenuItem.java"}}
{"prompt": "\n import android.graphics.drawable.Drawable\n@Override\r\npublic Drawable getIcon() {\r\n    if (mIconRes != 0)\r", "choices": [{"text": "\n import android.graphics.drawable.Drawable\n@Override\r\npublic Drawable getIcon() {\r\n    if (mIconRes!= 0)\r\nreturn getResources().getDrawable(mIconRes);\r\nelse\r\nreturn null;\r\n}\r\n}\r\n"}], "metadata": {"task_id": "vanilla/439", "ground_truth": "        return mContext.getResources().getDrawable(mIconRes);\r\n    return mIcon;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ui\\FancyMenuItem.java"}}
{"prompt": "\n import android.view.MenuItem\nimport android.graphics.drawable.Drawable\n@Override\r\npublic FancyMenuItem setIcon(Drawable drawable) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/440", "ground_truth": "    mIcon = drawable;\r\n    return this;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ui\\FancyMenuItem.java"}}
{"prompt": "\n import android.view.MenuItem\n@Override\r\npublic FancyMenuItem setIcon(int res) {\r", "choices": [{"text": "...\r\n}\r\n"}], "metadata": {"task_id": "vanilla/441", "ground_truth": "    mIconRes = res;\r\n    return this;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ui\\FancyMenuItem.java"}}
{"prompt": " import android.view.MenuItem\nimport android.content.Intent\nprivate Intent mIntent;\nprivate Context mContext;\nprivate CharSequence mTitle;\n@Override\r\npublic FancyMenuItem setIntent(Intent intent) {\r", "choices": [{"text": "mIntent = intent;\r\nreturn this;\r\n}\r\n@Override\r\npublic FancyMenuItem setContext(Context context) {\r\nmContext = context;\r\nreturn this;\r\n}\r\n@Override\r\npublic FancyMenuItem setTitle(CharSequence title) {\r\nmTitle = title;\r\nreturn this;\r\n}\r\n@Override\r\npublic FancyMenuItem setIcon(int icon) {\r\nmIcon = icon;\r\nreturn this;\r\n}\r\n@Override\r\npublic FancyMenuItem setIcon(Drawable icon) {\r\nm"}], "metadata": {"task_id": "vanilla/442", "ground_truth": "    mIntent = intent;\r\n    return this;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ui\\FancyMenuItem.java"}}
{"prompt": "\n import android.view.MenuItem\n@Override\r\npublic FancyMenuItem setTitle(CharSequence title) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nreturn super.setTitle(title);\r\n}\r\n@Override\r\npublic FancyMenuItem setTitle(int titleId) {\r\n// TODO Auto-generated method stub\r\nreturn super.setTitle(titleId);\r\n}\r\n@Override\r\npublic FancyMenuItem setTitleCondensed(CharSequence title) {\r\n// TODO Auto-generated method stub\r\nreturn super.setTitleCondensed(title);\r\n}\r\n@Override\r\npublic FancyMenuItem setTitleCondensed(int titleId) {\r\n// TODO Auto-"}], "metadata": {"task_id": "vanilla/443", "ground_truth": "    mTitle = title;\r\n    return this;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\ui\\FancyMenuItem.java"}}
{"prompt": "\n @Override\r\npublic void setImageResource(int resId) {\r", "choices": [{"text": "super.setImageResource(resId);\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "vanilla/444", "ground_truth": "    super.setImageResource(resId);\r\n    this.updateImageTint(resId);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\VanillaImageButton.java"}}
{"prompt": "\n import android.graphics.Color\nprivate void updateImageTint(int resHint) {\r\n    int filterColor = mNormalTint;\r\n    switch(resHint) {\r\n        case R.drawable.repeat_active:\r\n        case R.drawable.repeat_current_active:\r\n        case R.drawable.stop_current_active:\r\n        case R.drawable.shuffle_active:\r\n        case R.drawable.shuffle_album_active:\r", "choices": [{"text": "//            filterColor = mActiveTint;\r\n            break;\r\n        case R.drawable.repeat_inactive:\r\n        case R.drawable.repeat_current_inactive:\r\n        case R.drawable.stop_current_inactive:\r\n        case R.drawable.shuffle_inactive:\r\n        case R.drawable.shuffle_album_inactive:\r\n//            filterColor = mInactiveTint;\r\n            break;\r\n    }\r\n    mImage.setColorFilter(filterColor, PorterDuff.Mode.SRC_ATOP);\r\n}\n"}], "metadata": {"task_id": "vanilla/445", "ground_truth": "        case R.drawable.random_active:\r\n            filterColor = mActiveTint;\r\n    }\r\n    this.setColorFilter(filterColor);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\VanillaImageButton.java"}}
{"prompt": "\n /**\r\n * Resets the media player to an unconfigured state\r\n */\r\npublic void reset() {\r\n    mDataSource = null;\r", "choices": [{"text": "}\r\n\r\n/**\r\n * Sets the data source for the media player.\r\n *\r\n * @param dataSource The data source for the media player.\r\n */\r\npublic void setDataSource(DataSource dataSource) throws IOException {\r\n    mDataSource = dataSource;\r\n}\r\n\r\n/**\r\n * Sets the data source for the media player.\r\n *\r\n * @param dataSource The data source for the media player.\r\n * @param offset The offset of the data source.\r\n * @param length The length of the data source.\r\n */\r\npublic void setDataSource(DataSource dataSource, long offset, long length) throws IOException"}], "metadata": {"task_id": "vanilla/447", "ground_truth": "    mHasNextMediaPlayer = false;\r\n    super.reset();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\VanillaMediaPlayer.java"}}
{"prompt": "\n import android.media.audiofx.AudioEffect\n/**\r\n * Releases the media player and frees any claimed AudioEffect\r\n */\r\npublic void release() {\r\n    mDataSource = null;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/448", "ground_truth": "    mHasNextMediaPlayer = false;\r\n    super.release();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\VanillaMediaPlayer.java"}}
{"prompt": "\n import android.os.Build\nimport android.media.MediaPlayer\nimport android.annotation.TargetApi\n/**\r\n * Sets the next media player data source\r\n */\r\n@TargetApi(Build.VERSION_CODES.JELLY_BEAN)\r\npublic void setNextMediaPlayer(VanillaMediaPlayer next) {\r", "choices": [{"text": "}\r\n/**\r\n * Sets the previous media player data source\r\n */\r\n@TargetApi(Build.VERSION_CODES.JELLY_BEAN)\r\npublic void setPreviousMediaPlayer(VanillaMediaPlayer previous) {\r\n}\r\n/**\r\n * Sets the current media player data source\r\n */\r\n@TargetApi(Build.VERSION_CODES.JELLY_BEAN)\r\npublic void setCurrentMediaPlayer(VanillaMediaPlayer current) {\r\n}\r\n/**\r\n * Sets the current media player data source\r\n */\r\n@TargetApi(Build.VERSION_CODES.J"}], "metadata": {"task_id": "vanilla/449", "ground_truth": "    super.setNextMediaPlayer(next);\r\n    mHasNextMediaPlayer = (next != null);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\VanillaMediaPlayer.java"}}
{"prompt": "\n import android.media.audiofx.AudioEffect\nimport android.content.Intent\n/**\r\n * Creates a new AudioEffect for our AudioSession\r\n */\r\npublic void openAudioFx() {\r\n    Intent i = new Intent(AudioEffect.ACTION_OPEN_AUDIO_EFFECT_CONTROL_SESSION);\r\n    i.putExtra(AudioEffect.EXTRA_AUDIO_SESSION, this.getAudioSessionId());\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "vanilla/450", "ground_truth": "    i.putExtra(AudioEffect.EXTRA_PACKAGE_NAME, mContext.getPackageName());\r\n    mContext.sendBroadcast(i);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\VanillaMediaPlayer.java"}}
{"prompt": "\n import android.media.audiofx.AudioEffect\nimport android.content.Intent\n/**\r\n * Releases a previously claimed audio session id\r\n */\r\npublic void closeAudioFx() {\r\n    Intent i = new Intent(AudioEffect.ACTION_CLOSE_AUDIO_EFFECT_CONTROL_SESSION);\r\n    i.putExtra(AudioEffect.EXTRA_AUDIO_SESSION, this.getAudioSessionId());\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "vanilla/451", "ground_truth": "    i.putExtra(AudioEffect.EXTRA_PACKAGE_NAME, mContext.getPackageName());\r\n    mContext.sendBroadcast(i);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\VanillaMediaPlayer.java"}}
{"prompt": "\n /**\r\n * Sets the desired scaling due to replay gain.\r\n * @param replayGain the factor to adjust the volume by. Must be between 0 and 1 (inclusive)\r\n *                    or {@link Float#NaN} to disable replay gain scaling\r\n */\r\npublic void setReplayGain(float replayGain) {\r", "choices": [{"text": "}\r\n\r\n/**\r\n * Sets the desired scaling due to replay gain.\r\n * @param replayGain the factor to adjust the volume by. Must be between 0 and 1 (inclusive)\r\n *                    or {@link Float#NaN} to disable replay gain scaling\r\n */\r\npublic void setReplayGain(double replayGain) {\r\n}\r\n\r\n/**\r\n * Sets the desired scaling due to replay gain.\r\n * @param replayGain the factor to adjust the volume by. Must be between 0 and 1 (inclusive)\r\n *                    or {@link Float#NaN} to disable replay gain scaling"}], "metadata": {"task_id": "vanilla/452", "ground_truth": "    mReplayGain = replayGain;\r\n    updateVolume();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\VanillaMediaPlayer.java"}}
{"prompt": "\n /**\r\n * Sets whether we are ducking or not. Ducking is when we temporarily decrease the volume for\r\n * a transient sound to play from another application, such as a notification's beep.\r\n * @param isDucking true if we are ducking, false if we are not\r\n */\r\npublic void setIsDucking(boolean isDucking) {\r", "choices": [{"text": "this.isDucking = isDucking;\r\n}\r\n/**\r\n * Sets whether we are muted or not. Muting is when we temporarily decrease the volume for\r\n * a transient sound to play from another application, such as a notification's beep.\r\n * @param isMuted true if we are muted, false if we are not\r\n */\r\npublic void setIsMuted(boolean isMuted) {\r\nthis.isMuted = isMuted;\r\n}\r\n/**\r\n * Sets whether we are playing a sound or not.\r\n * @param isPlaying"}], "metadata": {"task_id": "vanilla/453", "ground_truth": "    mIsDucking = isDucking;\r\n    updateVolume();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\VanillaMediaPlayer.java"}}
{"prompt": "\n /**\r\n * Sets the desired scaling while ducking.\r\n * @param duckingFactor the factor to adjust the volume by while ducking. Must be between 0\r\n *                         and 1 (inclusive) or {@link Float#NaN} to disable ducking completely\r\n *\r\n * See also {@link #setIsDucking(boolean)}\r\n */\r\npublic void setDuckingFactor(float duckingFactor) {\r", "choices": [{"text": "}\r\n\r\n/**\r\n * Sets the desired scaling while ducking.\r\n * @param duckingFactor the factor to adjust the volume by while ducking. Must be between 0\r\n *                         and 1 (inclusive) or {@link Float#NaN} to disable ducking completely\r\n *\r\n * See also {@link #setIsDucking(boolean)}\r\n */\r\npublic void setDuckingFactor(double duckingFactor) {\r\n}\r\n\r\n/**\r\n * Sets the desired scaling while ducking.\r\n * @param duckingFactor the factor to adjust the volume by"}], "metadata": {"task_id": "vanilla/454", "ground_truth": "    mDuckingFactor = duckingFactor;\r\n    updateVolume();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\VanillaMediaPlayer.java"}}
{"prompt": "\n import android.content.Context\nimport android.appwidget.AppWidgetManager\n@Override\r\npublic void onUpdate(Context context, AppWidgetManager manager, int[] ids) {\r\n    Song song = null;\r\n    int state = 0;\r\n    if (PlaybackService.hasInstance()) {\r\n        PlaybackService service = PlaybackService.get(context);\r\n        song = service.getSong(0);\r", "choices": [{"text": "//        state = service.getState();\r\n    }\r\n    RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.widget_layout);\r\n    views.setTextViewText(R.id.widget_song_title, song.getTitle());\r\n    views.setTextViewText(R.id.widget_song_artist, song.getArtist());\r\n    views.setTextViewText(R.id.widget_song_album, song.getAlbum());\r\n    views.setImageViewResource(R.id.widget_play_pause, R.drawable.ic_play_arrow_white_2"}], "metadata": {"task_id": "vanilla/456", "ground_truth": "        state = service.getState();\r\n    }\r\n    sEnabled = true;\r\n    updateWidget(context, manager, song, state);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\WidgetD.java"}}
{"prompt": "\n import android.content.Context\nimport android.appwidget.AppWidgetManager\n@Override\r\npublic void onUpdate(Context context, AppWidgetManager manager, int[] ids) {\r\n    Song song = null;\r\n    int state = 0;\r\n    if (PlaybackService.hasInstance()) {\r\n        PlaybackService service = PlaybackService.get(context);\r\n        song = service.getSong(0);\r", "choices": [{"text": "//        state = service.getState();\r\n    }\r\n    RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.widget_layout);\r\n    views.setTextViewText(R.id.widget_song_title, song.getTitle());\r\n    views.setTextViewText(R.id.widget_song_artist, song.getArtist());\r\n    views.setTextViewText(R.id.widget_song_album, song.getAlbum());\r\n    views.setImageViewResource(R.id.widget_play_pause, R.drawable.ic_play_arrow_white_2"}], "metadata": {"task_id": "vanilla/457", "ground_truth": "        state = service.getState();\r\n    }\r\n    sEnabled = true;\r\n    updateWidget(context, manager, song, state);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\android\\vanilla\\WidgetE.java"}}
{"prompt": "\n import java.util.HashMap\nimport java.io.RandomAccessFile\npublic HashMap getTags(String fname) {\r\n    HashMap tags = new HashMap();\r\n    try {\r\n        RandomAccessFile ra = new RandomAccessFile(fname, \"r\");\r\n        tags = getTags(ra);\r\n        ra.close();\r", "choices": [{"text": "} catch (Exception e) {\r\n        e.printStackTrace();\r\n}\r\nreturn tags;\r\n}\r\npublic HashMap getTags(RandomAccessFile ra) {\r\n    HashMap tags = new HashMap();\r\n    try {\r\n        String tag = \"\";\r\n        int tagLength = 0;\r\n        int tagType = 0;\r\n        int tagCount = 0;\r\n        while (tagCount < 6) {\r\n            tag = ra.readUTF();\r\n            tagLength = ra.readInt();\r\n            tagType = ra.readByte();\r\n            if (tagType == 0) {\r\n                tags.put(tag,"}], "metadata": {"task_id": "vanilla/458", "ground_truth": "    } catch (Exception e) {\r\n        /* we dont' care much: SOMETHING went wrong. d'oh! */\r\n    }\r\n    return tags;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\bastp\\Bastp.java"}}
{"prompt": "\n import java.util.HashMap\nprivate void inheritTag(String key, HashMap from, HashMap to) {\r\n    if (!to.containsKey(key) && from.containsKey(key)) {\r", "choices": [{"text": "to.put(key, from.get(key));\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "vanilla/459", "ground_truth": "        to.put(key, from.get(key));\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\bastp\\Bastp.java"}}
{"prompt": "\n /**\r\n * Returns a 32bit int from given byte offset in LE\r\n */\r\npublic int b2le32(byte[] b, int off) {\r\n    int r = 0;\r", "choices": [{"text": "//    r |= b[off] & 0xFF;\r\n//    r |= (b[off + 1] & 0xFF) << 8;\r\n//    r |= (b[off + 2] & 0xFF) << 16;\r\n//    r |= (b[off + 3] & 0xFF) << 24;\r\n    r |= b[off] & 0xFF;\r\n    r |= (b[off + 1] & 0xFF) << 8;\r\n    r |= (b[off + 2]"}], "metadata": {"task_id": "vanilla/460", "ground_truth": "    for (int i = 0; i < 4; i++) {\r\n        r |= (b2u(b[off + i]) << (8 * i));\r\n    }\r\n    return r;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\bastp\\Common.java"}}
{"prompt": "\n import java.io.RandomAccessFile\nimport java.io.IOException\n/**\r\n * Same as b2le32 but reads from a RandomAccessFile instead of a buffer\r\n */\r\npublic int raf2le32(RandomAccessFile fh, long off) throws IOException {\r\n    byte[] scratch = new byte[4];\r\n    fh.seek(off);\r", "choices": [{"text": "//    fh.readFully(scratch);\r\n    int i = fh.read(scratch);\r\n    if (i!= 4) {\r\n        throw new IOException(\"short read\");\r\n    }\r\n    return (scratch[0] & 0xff) | ((scratch[1] & 0xff) << 8) | ((scratch[2] & 0xff) << 16) | ((scratch[3] & 0xff) << 24);\r\n}\n"}], "metadata": {"task_id": "vanilla/461", "ground_truth": "    fh.read(scratch);\r\n    return b2le32(scratch, 0);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\bastp\\Common.java"}}
{"prompt": "\n import java.util.ArrayList\nimport java.util.HashMap\npublic void addTagEntry(HashMap tags, String key, String value) {\r\n    if (tags.containsKey(key)) {\r\n        // just add to existing vector\r\n        ((ArrayList) tags.get(key)).add(value);\r\n    } else {\r", "choices": [{"text": "//        tags.put(key, new ArrayList());\r\n        // create new vector and add to hashmap\r\n        ArrayList newList = new ArrayList();\r\n        newList.add(value);\r\n        tags.put(key, newList);\r\n    }\r\n}\n"}], "metadata": {"task_id": "vanilla/462", "ground_truth": "        ArrayList l = new ArrayList<String>();\r\n        l.add(value);\r\n        tags.put(key, l);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\bastp\\Common.java"}}
{"prompt": "\n /**\r\n * Calculates the frame length baased on the frame size and the\r\n */\r\nprivate int calculateFrameLength(byte[] frame, int offset, int v3major) {\r\n    // ID3v2 (aka ID3v2.2) had a 3-byte unencoded length field.\r\n    if (v3major < 3) {\r\n        return (frame[offset] << 16) + (frame[offset + 1] << 8) + frame[offset + 2];\r\n    }\r\n    int rawlen = b2be32(frame, offset);\r\n    // Encoders prior ID3v2.4 did not encode the frame length\r", "choices": [{"text": "//    if (rawlen == 0) {\r\n//        return 0;\r\n//    }\r\n    return rawlen;\r\n}\r\n\r\n/**\r\n * Calculates the frame length baased on the frame size and the\r\n */\r\nprivate int calculateFrameLength(byte[] frame, int offset, int v3major, int v4major) {\r\n    // ID3v2 (aka ID3v2.2) had a 3-byte unencoded length field.\r\n    if (v3major < 3) {\r\n        return (frame[offset] << 16) +"}], "metadata": {"task_id": "vanilla/464", "ground_truth": "    if (v3major < 4) {\r\n        return rawlen;\r\n    }\r\n    return unsyncsafe(rawlen);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\bastp\\ID3v2File.java"}}
{"prompt": "\n import java.util.HashMap\nimport java.util.Arrays\nimport java.io.RandomAccessFile\nimport java.io.IOException\npublic HashMap getTags(RandomAccessFile s) throws IOException {\r\n    HashMap rgain = parseLameHeader(s, 0);\r\n    HashMap tags = parseV1Header(s, s.length() - 128);\r\n    // Add replay gain info to returned object if available\r\n    for (String k : Arrays.asList(\"REPLAYGAIN_TRACK_GAIN\", \"REPLAYGAIN_ALBUM_GAIN\")) {\r", "choices": [{"text": "if (rgain.containsKey(k)) {\r\ntags.put(k, rgain.get(k));\r\n}\r\n}\r\nreturn tags;\r\n}\n"}], "metadata": {"task_id": "vanilla/465", "ground_truth": "        if (rgain.containsKey(k))\r\n            tags.put(k, rgain.get(k));\r\n    }\r\n    return tags;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\bastp\\LameHeader.java"}}
{"prompt": "\n import java.io.RandomAccessFile\nimport java.io.IOException\n/*\r\n\t* Reads bytes from an atom up to the buffer size limit, currently 512B\r\n\t*/\r\nprivate byte[] readIntoBuffer(RandomAccessFile s, int dataSize) throws IOException {\r\n    // read tag up to buffer limit\r\n    int bufferSize = Math.min(dataSize, MAX_BUFFER_SIZE);\r\n    byte[] buffer = new byte[bufferSize];\r\n    s.read(buffer, 0, buffer.length);\r", "choices": [{"text": "//    System.out.println(\"read \" + buffer.length + \" bytes\");\r\n    return buffer;\r\n}\r\n\r\n/*\r\n\t* Reads bytes from an atom up to the buffer size limit, currently 512B\r\n\t*/\r\nprivate byte[] readIntoBuffer(RandomAccessFile s, int dataSize, int offset) throws IOException {\r\n    // read tag up to buffer limit\r\n    int bufferSize = Math.min(dataSize, MAX_BUFFER_SIZE);\r\n    byte[] buffer = new byte[bufferSize];\r\n    s.read(buffer, offset, buffer.length);\r\n"}], "metadata": {"task_id": "vanilla/466", "ground_truth": "    if (dataSize > bufferSize) {\r\n        s.skipBytes(dataSize - bufferSize);\r\n    }\r\n    return buffer;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\bastp\\Mp4File.java"}}
{"prompt": "\n import java.util.HashMap\nimport java.io.RandomAccessFile\nimport java.io.IOException\n/**\r\n * Returns the tags of a Raw File which is just an empty HashMap.\r\n * This shall be used for raw streams with no (supported) tags.\r\n */\r\npublic HashMap getTags(RandomAccessFile s) throws IOException {\r", "choices": [{"text": "return new HashMap();\r\n}\n"}], "metadata": {"task_id": "vanilla/471", "ground_truth": "    HashMap tags = new HashMap();\r\n    return tags;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\ch\\blinkenlights\\bastp\\RawFile.java"}}
{"prompt": "\n import android.view.View\nimport android.graphics.Point\n/**\r\n * Overrides to provide fading when slide removal is enabled.\r\n */\r\n@Override\r\npublic void onDragFloatView(View floatView, Point position, Point touch) {\r\n    if (mRemoveEnabled && mIsRemoving) {\r", "choices": [{"text": "//        floatView.setAlpha(1.0f - (float)position.y / floatView.getHeight());\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "vanilla/473", "ground_truth": "        mPositionX = position.x;\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortController.java"}}
{"prompt": "\n import android.view.MotionEvent\n@Override\r\npublic boolean onDown(MotionEvent ev) {\r\n    if (mRemoveEnabled && mRemoveMode == CLICK_REMOVE) {\r\n        mClickRemoveHitPos = viewIdHitPosition(ev, mClickRemoveId);\r\n    }\r\n    mHitPos = startDragPosition(ev);\r\n    if (mHitPos != MISS && mDragInitMode == ON_DOWN) {\r\n        startDrag(mHitPos, (int) ev.getX() - mItemX, (int) ev.getY() - mItemY);\r\n    }\r\n    mIsRemoving = false;\r", "choices": [{"text": "\n import android.view.MotionEvent\n@Override\r\npublic boolean onDown(MotionEvent ev) {\r\n    if (mRemoveEnabled && mRemoveMode == CLICK_REMOVE) {\r\n        mClickRemoveHitPos = viewIdHitPosition(ev, mClickRemoveId);\r\n    }\r\n    mHitPos = startDragPosition(ev);\r\n    if (mHitPos!= MISS && mDragInitMode == ON_DOWN) {\r\n        startDrag(mHitPos, (int) ev.getX() - mItemX, (int) ev.getY() - mItemY);\r\n    }\r\n    mIsRemoving = false;\r\n}\r\n"}], "metadata": {"task_id": "vanilla/474", "ground_truth": "    mCanDrag = true;\r\n    mPositionX = 0;\r\n    mFlingHitPos = startFlingPosition(ev);\r\n    return true;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortController.java"}}
{"prompt": "\n import android.view.MotionEvent\n// complete the OnGestureListener interface\r\n@Override\r\npublic boolean onSingleTapUp(MotionEvent ev) {\r\n    if (mRemoveEnabled && mRemoveMode == CLICK_REMOVE) {\r\n        if (mClickRemoveHitPos != MISS) {\r", "choices": [{"text": "\n import android.view.MotionEvent\n// complete the OnGestureListener interface\r\n@Override\r\npublic boolean onSingleTapUp(MotionEvent ev) {\r\n    if (mRemoveEnabled && mRemoveMode == CLICK_REMOVE) {\r\n        if (mClickRemoveHitPos!= MISS) {\r\n// complete the code to remove the selected item\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"}], "metadata": {"task_id": "vanilla/476", "ground_truth": "            mDslv.removeItem(mClickRemoveHitPos - mDslv.getHeaderViewsCount());\r\n        }\r\n    }\r\n    return true;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortController.java"}}
{"prompt": "\n import android.widget.CursorAdapter\nimport android.database.Cursor\n/**\r\n * Swaps Cursor and clears list-Cursor mapping.\r\n *\r\n * @see android.widget.CursorAdapter#swapCursor(android.database.Cursor)\r\n */\r\n@Override\r\npublic Cursor swapCursor(Cursor newCursor) {\r\n    Cursor old = super.swapCursor(newCursor);\r", "choices": [{"text": "//    if (old!= null) {\r\n//        old.close();\r\n//    }\r\n    return old;\r\n}\r\n"}], "metadata": {"task_id": "vanilla/477", "ground_truth": "    resetMappings();\r\n    return old;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortCursorAdapter.java"}}
{"prompt": "\n import android.widget.CursorAdapter\nimport android.database.Cursor\n/**\r\n * Changes Cursor and clears list-Cursor mapping.\r\n *\r\n * @see android.widget.CursorAdapter#changeCursor(android.database.Cursor)\r\n */\r\n@Override\r\npublic void changeCursor(Cursor cursor) {\r", "choices": [{"text": "super.changeCursor(cursor);\r\nif (mCursor!= null) {\r\nmCursor.unregisterContentObserver(mObserver);\r\nmCursor = null;\r\n}\r\n}\r\n}\r\n<file_sep>/app/src/main/java/com/example/android/sunshine/app/MainActivity.java\npackage com.example.android.sunshine.app;\n\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.preference.PreferenceManager;"}], "metadata": {"task_id": "vanilla/478", "ground_truth": "    super.changeCursor(cursor);\r\n    resetMappings();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortCursorAdapter.java"}}
{"prompt": "\n /**\r\n * Resets list-cursor mapping.\r\n */\r\npublic void reset() {\r", "choices": [{"text": "}\r\n/**\r\n * Returns the number of elements in the list.\r\n * @return the number of elements in the list.\r\n */\r\npublic int size() {\r\nreturn 0;\r\n}\r\n/**\r\n * Returns the element at the specified position in the list.\r\n * @param index the index of the element to return.\r\n * @return the element at the specified position in the list.\r\n */\r\npublic Object get(int index) {\r\nreturn null;\r\n}\r\n/**\r\n * Returns the index of the first occurrence of the specified element in the list"}], "metadata": {"task_id": "vanilla/479", "ground_truth": "    resetMappings();\r\n    notifyDataSetChanged();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortCursorAdapter.java"}}
{"prompt": "\n private void resetMappings() {\r", "choices": [{"text": "//    for (int i = 0; i < 10; i++) {\r\n//      for (int j = 0; j < 10; j++) {\r\n//        if (i == j) {\r\n//          continue;\r\n//        }\r\n//        if (i == 0) {\r\n//          if (j == 1) {\r\n//            continue;\r\n//          }\r\n//        }\r\n//        if (i == 1) {\r\n//          if (j == 0) {\r"}], "metadata": {"task_id": "vanilla/480", "ground_truth": "    mListMapping.clear();\r\n    mRemovedCursorPositions.clear();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortCursorAdapter.java"}}
{"prompt": "\n import android.view.View\nimport android.database.Cursor\n/**\r\n * On remove, this updates the mapping between Cursor positions\r\n * and ListView positions. The Cursor is unchanged. Retrieve\r\n * the current mapping with {@link getCursorPositions()}.\r\n *\r\n * @see DragSortListView.RemoveListener#remove(int)\r\n */\r\n@Override\r\npublic void remove(int which) {\r\n    int cursorPos = mListMapping.get(which, which);\r\n    if (!mRemovedCursorPositions.contains(cursorPos)) {\r\n        mRemovedCursorPositions.add(cursorPos);\r\n    }\r\n    int newCount = getCount();\r\n    for (int i = which; i < newCount; ++i) {\r\n        mListMapping.put(i, mListMapping.get(i + 1, i + 1));\r", "choices": [{"text": "}\r\n}\r\n/**\r\n * @return the mapping between Cursor positions and ListView positions.\r\n */\r\n@Override\r\npublic SparseArray<Integer> getCursorPositions() {\r\n    return mListMapping;\r\n}\r\n/**\r\n * @return the mapping between Cursor positions and ListView positions.\r\n */\r\n@Override\r\npublic SparseArray<Integer> getCursorPositions() {\r\n    return mListMapping;\r\n}\r\n/**\r\n * @return the mapping between Cursor positions and ListView positions.\r\n */\r\n@Override\r\npublic SparseArray<Integer> getCursorPositions() {"}], "metadata": {"task_id": "vanilla/481", "ground_truth": "    }\r\n    mListMapping.delete(newCount);\r\n    cleanMapping();\r\n    notifyDataSetChanged();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortCursorAdapter.java"}}
{"prompt": "\n import java.util.ArrayList\n/**\r\n * Remove unnecessary mappings from sparse array.\r\n */\r\nprivate void cleanMapping() {\r\n    ArrayList<Integer> toRemove = new ArrayList<Integer>();\r\n    int size = mListMapping.size();\r\n    for (int i = 0; i < size; ++i) {\r\n        if (mListMapping.keyAt(i) == mListMapping.valueAt(i)) {\r\n            toRemove.add(mListMapping.keyAt(i));\r\n        }\r\n    }\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/482", "ground_truth": "    size = toRemove.size();\r\n    for (int i = 0; i < size; ++i) {\r\n        mListMapping.delete(toRemove.get(i));\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortCursorAdapter.java"}}
{"prompt": "\n import android.database.Cursor\nimport java.util.ArrayList\n/**\r\n * Get the current order of Cursor positions presented by the\r\n * list.\r\n */\r\npublic ArrayList<Integer> getCursorPositions() {\r\n    ArrayList<Integer> result = new ArrayList<Integer>();\r", "choices": [{"text": "//    Cursor cursor = getCursor();\r\n    int count = getCount();\r\n    for (int i = 0; i < count; i++) {\r\n        result.add(i);\r\n    }\r\n    return result;\r\n}\n"}], "metadata": {"task_id": "vanilla/483", "ground_truth": "    for (int i = 0; i < getCount(); ++i) {\r\n        result.add(mListMapping.get(i, i));\r\n    }\r\n    return result;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortCursorAdapter.java"}}
{"prompt": "\n import android.database.Cursor\n/**\r\n * Get the list position mapped to by the provided Cursor position.\r\n * If the provided Cursor position has been removed by a drag-sort,\r\n * this returns {@link #REMOVED}.\r\n *\r\n * @param cursorPosition A Cursor position\r\n * @return The mapped-to list position or REMOVED\r\n */\r\npublic int getListPosition(int cursorPosition) {\r\n    if (mRemovedCursorPositions.contains(cursorPosition)) {\r\n        return REMOVED;\r\n    }\r\n    int index = mListMapping.indexOfValue(cursorPosition);\r\n    if (index < 0) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/484", "ground_truth": "        return cursorPosition;\r\n    } else {\r\n        return mListMapping.keyAt(index);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortCursorAdapter.java"}}
{"prompt": "\n import android.view.View\n@Override\r\npublic boolean isChecked() {\r\n    View child = getChildAt(0);\r", "choices": [{"text": "if (child!= null) {\r\n    return child.isShown();\r\n}\r\nreturn false;\r\n}\r\n@Override\r\npublic void setChecked(boolean checked) {\r\nsuper.setChecked(checked);\r\nView child = getChildAt(0);\r\nif (child!= null) {\r\n    child.setVisibility(checked? View.VISIBLE : View.GONE);\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "vanilla/486", "ground_truth": "    if (child instanceof Checkable)\r\n        return ((Checkable) child).isChecked();\r\n    else\r\n        return false;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortItemViewCheckable.java"}}
{"prompt": "\n import android.view.View\n@Override\r\npublic void setChecked(boolean checked) {\r\n    View child = getChildAt(0);\r", "choices": [{"text": "if (child!= null) {\r\n    child.setEnabled(checked);\r\n}\r\nsuper.setChecked(checked);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "vanilla/487", "ground_truth": "    if (child instanceof Checkable)\r\n        ((Checkable) child).setChecked(checked);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortItemViewCheckable.java"}}
{"prompt": "\n import android.view.View\n@Override\r\npublic void toggle() {\r\n    View child = getChildAt(0);\r", "choices": [{"text": "if (child!= null) {\r\n    child.setVisibility(child.getVisibility() == View.VISIBLE? View.GONE : View.VISIBLE);\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "vanilla/488", "ground_truth": "    if (child instanceof Checkable)\r\n        ((Checkable) child).toggle();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortItemViewCheckable.java"}}
{"prompt": "\n import ch.blinkenlights.android.vanilla.R\nprivate void cancel() {\r\n    if (mDragState == DRAGGING) {\r", "choices": [{"text": "//        mDragState = IDLE;\r\n        mDragState = IDLE;\r\n        mDragView.setVisibility(View.GONE);\r\n        mDragView.setAlpha(1.0f);\r\n        mDragView.setTranslationX(0);\r\n        mDragView.setTranslationY(0);\r\n        mDragView.setScaleX(1.0f);\r\n        mDragView.setScaleY(1.0f);\r\n        mDragView.setPivotX(0);\r\n        mDragView.setPivotY(0);\r\n        mDragView.setPivotX(0);\r\n        mDrag"}], "metadata": {"task_id": "vanilla/489", "ground_truth": "        cancelDrag();\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n import android.widget.ListView\nimport android.view.View\n/**\r\n * DragSortListView registers the the controler as an onTouch listener.\r\n * We implement this method to ensure that users of this listview can also\r\n * register their own onTouch listener without disabling our own registration.\r\n */\r\n@Override\r\npublic void setOnTouchListener(View.OnTouchListener l) {\r\n    if (mFloatViewManager != null) {\r", "choices": [{"text": "\n import android.widget.ListView\nimport android.view.View\n/**\r\n * DragSortListView registers the the controler as an onTouch listener.\r\n * We implement this method to ensure that users of this listview can also\r\n * register their own onTouch listener without disabling our own registration.\r\n */\r\n@Override\r\npublic void setOnTouchListener(View.OnTouchListener l) {\r\n    if (mFloatViewManager!= null) {\r\n//        mFloatViewManager.setOnTouchListener(l);\r\n    }\r\n}\r\n/**\r\n * DragSortListView registers the the controler as an onTouch listener.\r\n * We implement this method to ensure that users of this listview can also\r\n * register their own onTouch listener without disabling our own registration.\r\n */\r\n@Override\r\npublic void setOnScrollListener(AbsListView.OnScrollListener l) {\r\n    if (mFloatViewManager!= null) {\r\n//        mFloatViewManager.setOnScrollListener(l);\r\n    }\r\n}\r\n/**\r\n"}], "metadata": {"task_id": "vanilla/490", "ground_truth": "        mFloatViewManager.setSecondaryOnTouchListener(l);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n import android.widget.ListView\nimport android.widget.ListAdapter\nimport android.view.View\n/**\r\n * As opposed to {@link ListView#getAdapter()}, which returns\r\n * a heavily wrapped ListAdapter (DragSortListView wraps the\r\n * input ListAdapter {\\emph and} ListView wraps the wrapped one).\r\n *\r\n * @return The ListAdapter set as the argument of {@link setAdapter()}\r\n */\r\npublic ListAdapter getInputAdapter() {\r\n    if (mAdapterWrapper == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/491", "ground_truth": "        return null;\r\n    } else {\r\n        return mAdapterWrapper.getAdapter();\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n /**\r\n * Add item height at position if doesn't already exist.\r\n */\r\npublic void add(int position, int height) {\r\n    int currHeight = mMap.get(position, -1);\r\n    if (currHeight != height) {\r\n        if (currHeight == -1) {\r\n            if (mMap.size() == mMaxSize) {\r\n                // remove oldest entry\r\n                mMap.delete(mOrder.remove(0));\r\n            }\r\n        } else {\r\n            // move position to newest slot\r\n            mOrder.remove((Integer) position);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/493", "ground_truth": "        }\r\n        mMap.put(position, height);\r\n        mOrder.add(position);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n public void clear() {\r", "choices": [{"text": "//     this.list.clear();\r\n// }\r\n public void clear() {\r\n     this.list.clear();\r\n     this.list.add(new ArrayList<String>());\r\n }\r\n public void add(String s) {\r\n     this.list.get(this.list.size() - 1).add(s);\r\n }\r\n public void add(List<String> l) {\r\n     this.list.add(l);\r\n }\r\n public void add(String[] l) {\r\n     this.list.add(Arrays.asList(l));\r\n }\r\n public void add(List<List"}], "metadata": {"task_id": "vanilla/494", "ground_truth": "    mMap.clear();\r\n    mOrder.clear();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n import android.graphics.Canvas\n@Override\r\nprotected void onDraw(Canvas canvas) {\r\n    super.onDraw(canvas);\r\n    if (mTrackDragSort) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/495", "ground_truth": "        mDragSortTracker.appendState();\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n public float transform(float frac) {\r\n    if (frac < mAlpha) {\r\n        return mA * frac * frac;\r\n    } else if (frac < 1f - mAlpha) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/496", "ground_truth": "        return mB + mC * frac;\r\n    } else {\r\n        return 1f - mD * (frac - 1f) * (frac - 1f);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n import android.os.SystemClock\npublic void start() {\r\n    mStartTime = SystemClock.uptimeMillis();\r\n    mCanceled = false;\r", "choices": [{"text": "}\r\npublic void stop() {\r\n    mCanceled = true;\r\n}\r\npublic boolean isCanceled() {\r\n    return mCanceled;\r\n}\r\npublic long getElapsedTime() {\r\n    if (mCanceled) {\r\n        return 0;\r\n    }\r\n    return SystemClock.uptimeMillis() - mStartTime;\r\n}\r\n"}], "metadata": {"task_id": "vanilla/497", "ground_truth": "    onStart();\r\n    post(this);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n import android.os.SystemClock\n@Override\r\npublic void run() {\r\n    if (mCanceled) {\r\n        return;\r\n    }\r\n    float fraction = ((float) (SystemClock.uptimeMillis() - mStartTime)) / mDurationF;\r\n    if (fraction >= 1f) {\r\n        onUpdate(1f, 1f);\r\n        onStop();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/498", "ground_truth": "    } else {\r\n        onUpdate(fraction, transform(fraction));\r\n        post(this);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n @Override\r\npublic void onStart() {\r", "choices": [{"text": "super.onStart();\r\nmGoogleApiClient.connect();\r\n}\r\n\r\n@Override\r\npublic void onStop() {\r\nsuper.onStop();\r\nif (mGoogleApiClient.isConnected()) {\r\nmGoogleApiClient.disconnect();\r\n}\r\n}\r\n\r\n@Override\r\npublic void onConnected(Bundle connectionHint) {\r\nmLocationRequest = LocationRequest.create();\r\nmLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);\r\nmLocationRequest.setInterval(1000);\r\nmLocationRequest.set"}], "metadata": {"task_id": "vanilla/499", "ground_truth": "    mInitDragDeltaY = mDragDeltaY;\r\n    mFinalDragDeltaY = mFloatViewHeightHalf;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n public void removeItem(int which) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\n }\r\n\r\n @Override\r\n public void removeItem(Object object) {\r\n// TODO Auto-generated method stub\r\n }\r\n\r\n @Override\r\n public void setItemChecked(int which, boolean isChecked) {\r\n// TODO Auto-generated method stub\r\n }\r\n\r\n @Override\r\n public void setItemsCanFocus(boolean itemsCanFocus) {\r\n// TODO Auto-generated method stub\r\n }\r\n\r\n @Override\r\n public void setOnCheckedChangeListener(OnCheckedChangeListener listener) {\r\n// TODO Auto-generated method stub\r\n }\r\n\r\n @Override\r\n public void setOnCreate"}], "metadata": {"task_id": "vanilla/503", "ground_truth": "    mUseRemoveVelocity = false;\r\n    removeItem(which, 0);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n import ch.blinkenlights.android.vanilla.R\nimport android.view.View\n/**\r\n * Cancel a drag. Calls {@link #stopDrag(boolean, boolean)} with\r\n * <code>true</code> as the first argument.\r\n */\r\npublic void cancelDrag() {\r\n    if (mDragState == DRAGGING) {\r\n        mDragScroller.stopScrolling(true);\r\n        destroyFloatView();\r\n        clearPositions();\r\n        adjustAllItems();\r\n        if (mInTouchEvent) {\r\n            mDragState = STOPPED;\r", "choices": [{"text": "//            mDragScroller.stopScrolling(true);\r\n            mDragScroller.stopScrolling(false);\r\n            mDragScroller.stopScrolling(true);\r\n            mDragScroller.stopScrolling(false);\r\n            mDragScroller.stopScrolling(true);\r\n            mDragScroller.stopScrolling(false);\r\n            mDragScroller.stopScrolling(true);\r\n            mDragScroller.stopScrolling(false);\r\n            mDragScroller.stopScrolling(true);\r\n            mDragScroller.stopScrolling(false);\r\n            mDragScroller.stopScrolling(true);\r\n            mDragScroller.stopScrolling(false);\r\n            mDragScroller.stop"}], "metadata": {"task_id": "vanilla/505", "ground_truth": "        } else {\r\n            mDragState = IDLE;\r\n        }\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n private void clearPositions() {\r\n    mSrcPos = -1;\r\n    mFirstExpPos = -1;\r", "choices": [{"text": "}\r\n\r\n"}], "metadata": {"task_id": "vanilla/506", "ground_truth": "    mSecondExpPos = -1;\r\n    mFloatPos = -1;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n import ch.blinkenlights.android.vanilla.R\nimport android.view.View\nimport android.database.DataSetObserver\n/**\r\n * Removes dragged item from the list. Calls RemoveListener.\r\n */\r\nprivate void doRemoveItem(int which) {\r\n    // must set to avoid cancelDrag being called from the\r\n    // DataSetObserver\r\n    mDragState = REMOVING;\r\n    // end it\r\n    if (mRemoveListener != null) {\r\n        mRemoveListener.remove(which);\r\n    }\r\n    destroyFloatView();\r\n    adjustOnReorder();\r\n    clearPositions();\r\n    // now the drag is done\r\n    if (mInTouchEvent) {\r", "choices": [{"text": "\n import ch.blinkenlights.android.vanilla.R\nimport android.view.View\nimport android.database.DataSetObserver\n/**\r\n * Removes dragged item from the list. Calls RemoveListener.\r\n */\r\nprivate void doRemoveItem(int which) {\r\n    // must set to avoid cancelDrag being called from the\r\n    // DataSetObserver\r\n    mDragState = REMOVING;\r\n    // end it\r\n    if (mRemoveListener!= null) {\r\n        mRemoveListener.remove(which);\r\n    }\r\n    destroyFloatView();\r\n    adjustOnReorder();\r\n    clearPositions();\r\n    // now the drag is done\r\n    if (mInTouchEvent) {\r\n//        mDragState = DONE;\r\n        mInTouchEvent = false;\r\n    }\r\n}\r\n/**\r\n * Removes dragged item from the list. Calls RemoveListener.\r\n */\r\nprivate void doRemoveItem(int which, boolean animate) {\r\n    // must set to avoid cancelDrag being called from the\r\n    // DataSetObserver\r\n    mDragState = REMOVING;\r\n    // end it\r\n    if (mRemoveListener!= null) {\r\n        mRemoveListener.remove(which);\r\n    }\r\n    destroyFloatView();\r\n    adjustOnReorder();\r\n    clearPositions();\r\n    // now the drag is done"}], "metadata": {"task_id": "vanilla/507", "ground_truth": "        mDragState = STOPPED;\r\n    } else {\r\n        mDragState = IDLE;\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n import ch.blinkenlights.android.vanilla.R\nimport android.view.View\n/**\r\n * Stop a drag in progress. Pass <code>true</code> if you would\r\n * like to remove the dragged item from the list.\r\n *\r\n * @param remove Remove the dragged item from the list. Calls\r\n * a registered RemoveListener, if one exists. Otherwise, calls\r\n * the DropListener, if one exists.\r\n *\r\n * @return True if the stop was successful. False if there is\r\n * no floating View.\r\n */\r\npublic boolean stopDrag(boolean remove) {\r", "choices": [{"text": "}\r\n/**\r\n * Stop a drag in progress. Pass <code>true</code> if you would\r\n * like to remove the dragged item from the list.\r\n *\r\n * @param remove Remove the dragged item from the list. Calls\r\n * a registered RemoveListener, if one exists. Otherwise, calls\r\n * the DropListener, if one exists.\r\n *\r\n * @return True if the stop was successful. False if there is\r\n * no floating View.\r\n */\r\npublic boolean stopDrag(boolean remove, boolean animate) {\r\n}\r\n/**\r\n * Stop a drag"}], "metadata": {"task_id": "vanilla/508", "ground_truth": "    mUseRemoveVelocity = false;\r\n    return stopDrag(remove, 0);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n public boolean stopDragWithVelocity(boolean remove, float velocityX) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/509", "ground_truth": "    mUseRemoveVelocity = true;\r\n    return stopDrag(remove, velocityX);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n private void doActionUpOrCancel() {\r\n    mCancelMethod = NO_CANCEL;\r\n    mInTouchEvent = false;\r\n    if (mDragState == STOPPED) {\r\n        mDragState = IDLE;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/510", "ground_truth": "    }\r\n    mCurrFloatAlpha = mFloatAlpha;\r\n    mListViewIntercepted = false;\r\n    mChildHeightCache.clear();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n import android.view.MotionEvent\nprivate void saveTouchCoords(MotionEvent ev) {\r\n    int action = ev.getAction() & MotionEvent.ACTION_MASK;\r\n    if (action != MotionEvent.ACTION_DOWN) {\r\n        mLastX = mX;\r\n        mLastY = mY;\r\n    }\r\n    mX = (int) ev.getX();\r\n    mY = (int) ev.getY();\r\n    if (action == MotionEvent.ACTION_DOWN) {\r\n        mLastX = mX;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/511", "ground_truth": "        mLastY = mY;\r\n    }\r\n    mOffsetX = (int) ev.getRawX() - mX;\r\n    mOffsetY = (int) ev.getRawY() - mY;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n import android.widget.ListView\nimport android.view.View\n/**\r\n * Set the width of each drag scroll region by specifying\r\n * a fraction of the ListView height.\r\n *\r\n * @param upperFrac Fraction of ListView height for up-scroll bound.\r\n * Capped at 0.5f.\r\n * @param lowerFrac Fraction of ListView height for down-scroll bound.\r\n * Capped at 0.5f.\r\n */\r\npublic void setDragScrollStarts(float upperFrac, float lowerFrac) {\r\n    if (lowerFrac > 0.5f) {\r\n        mDragDownScrollStartFrac = 0.5f;\r\n    } else {\r\n        mDragDownScrollStartFrac = lowerFrac;\r\n    }\r\n    if (upperFrac > 0.5f) {\r\n        mDragUpScrollStartFrac = 0.5f;\r\n    } else {\r\n        mDragUpScrollStartFrac = upperFrac;\r", "choices": [{"text": "}\r\n}\r\n/**\r\n * Set the width of each drag scroll region by specifying\r\n * a fraction of the ListView height.\r\n *\r\n * @param upperFrac Fraction of ListView height for up-scroll bound.\r\n * Capped at 0.5f.\r\n * @param lowerFrac Fraction of ListView height for down-scroll bound.\r\n * Capped at 0.5f.\r\n */\r\npublic void setDragScrollStarts(float upperFrac, float lowerFrac) {\r\n    if (lowerFrac > 0.5f) {\r\n        mDragDownScrollStartFrac = 0"}], "metadata": {"task_id": "vanilla/512", "ground_truth": "    }\r\n    if (getHeight() != 0) {\r\n        updateScrollStarts();\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n @Override\r\nprotected void onSizeChanged(int w, int h, int oldw, int oldh) {\r", "choices": [{"text": "super.onSizeChanged(w, h, oldw, oldh);\r\nif (w!= oldw) {\r\nmWidth = w;\r\nmHeight = h;\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "vanilla/513", "ground_truth": "    super.onSizeChanged(w, h, oldw, oldh);\r\n    updateScrollStarts();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n import android.view.View\nprivate void adjustAllItems() {\r\n    final int first = getFirstVisiblePosition();\r\n    final int last = getLastVisiblePosition();\r\n    int begin = Math.max(0, getHeaderViewsCount() - first);\r\n    int end = Math.min(last - first, getCount() - 1 - getFooterViewsCount() - first);\r\n    for (int i = begin; i <= end; ++i) {\r\n        View v = getChildAt(i);\r", "choices": [{"text": "//        if (v!= null) {\r\n//            v.setPadding(0, 0, 0, 0);\r\n//        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "vanilla/514", "ground_truth": "        if (v != null) {\r\n            adjustItem(first + i, v, false);\r\n        }\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n import android.view.View\nprivate void adjustItem(int position) {\r\n    View v = getChildAt(position - getFirstVisiblePosition());\r\n    if (v != null) {\r", "choices": [{"text": "\n import android.view.View\nprivate void adjustItem(int position) {\r\n    View v = getChildAt(position - getFirstVisiblePosition());\r\n    if (v!= null) {\r\n//        v.setBackgroundColor(Color.RED);\r\n        v.setBackgroundColor(Color.WHITE);\r\n    }\r\n}\n"}], "metadata": {"task_id": "vanilla/515", "ground_truth": "        adjustItem(position, v, false);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n import ch.blinkenlights.android.vanilla.R\n@Override\r\npublic void requestLayout() {\r\n    if (!mBlockLayoutRequests) {\r", "choices": [{"text": "super.requestLayout();\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "vanilla/516", "ground_truth": "        super.requestLayout();\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n import ch.blinkenlights.android.vanilla.R\nimport android.view.View\nimport android.util.Log\n@Override\r\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\r\n    super.onMeasure(widthMeasureSpec, heightMeasureSpec);\r\n    // Log.d(\"mobeta\", \"onMeasure called\");\r\n    if (mFloatView != null) {\r\n        if (mFloatView.isLayoutRequested()) {\r\n            measureFloatView();\r\n        }\r", "choices": [{"text": "\n import ch.blinkenlights.android.vanilla.R\nimport android.view.View\nimport android.util.Log\n@Override\r\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\r\n    super.onMeasure(widthMeasureSpec, heightMeasureSpec);\r\n    // Log.d(\"mobeta\", \"onMeasure called\");\r\n    if (mFloatView!= null) {\r\n        if (mFloatView.isLayoutRequested()) {\r\n            measureFloatView();\r\n        }\r\n}\r\n}\r\n@Override\r\nprotected void onLayout(boolean changed, int left, int top, int right, int bottom) {\r\n    super.onLayout(changed, left, top, right, bottom);\r\n    // Log.d(\"mobeta\", \"onLayout called\");\r\n    if (mFloatView!= null) {\r\n        if (mFloatView.isLayoutRequested()) {\r\n            layoutFloatView();\r\n        }\r\n}\r\n}\r\n@Override\r\nprotected void onAttachedToWindow() {\r\n    super.onAttachedToWindow();\r\n    // Log.d(\"mobeta\","}], "metadata": {"task_id": "vanilla/518", "ground_truth": "        // set to false after layout\r\n        mFloatViewOnMeasured = true;\r\n    }\r\n    mWidthMeasureSpec = widthMeasureSpec;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n import ch.blinkenlights.android.vanilla.R\nimport android.view.View\n/**\r\n * Start a drag of item at <code>position</code> using the\r\n * registered FloatViewManager. Calls through\r\n * to {@link #startDrag(int,View,int,int,int)} after obtaining\r\n * the floating View from the FloatViewManager.\r\n *\r\n * @param position Item to drag.\r\n * @param dragFlags Flags that restrict some movements of the\r\n * floating View. For example, set <code>dragFlags |=\r\n * ~{@link #DRAG_NEG_X}</code> to allow dragging the floating\r\n * View in all directions except off the screen to the left.\r\n * @param deltaX Offset in x of the touch coordinate from the\r\n * left edge of the floating View (i.e. touch-x minus float View\r\n * left).\r\n * @param deltaY Offset in y of the touch coordinate from the\r\n * top edge of the floating View (i.e. touch-y minus float View\r\n * top).\r\n *\r\n * @return True if the drag was started, false otherwise. This\r\n * <code>startDrag</code> will fail if we are not currently in\r\n * a touch event, there is no registered FloatViewManager,\r\n * or the FloatViewManager returns a null View.\r\n */\r\npublic boolean startDrag(int position, int dragFlags, int deltaX, int deltaY) {\r\n    if (!mInTouchEvent || mFloatViewManager == null) {\r\n        return false;\r\n    }\r\n    View v = mFloatViewManager.onCreateFloatView(position);\r\n    if (v == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/519", "ground_truth": "        return false;\r\n    } else {\r\n        return startDrag(position, v, dragFlags, deltaX, deltaY);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n import android.view.View\nprivate void doDragFloatView(boolean forceInvalidate) {\r\n    int movePos = getFirstVisiblePosition() + getChildCount() / 2;\r\n    View moveItem = getChildAt(getChildCount() / 2);\r", "choices": [{"text": "//    if (moveItem!= null) {\r\n//        int moveItemHeight = moveItem.getHeight();\r\n//        int moveItemWidth = moveItem.getWidth();\r\n//        int moveItemLeft = moveItem.getLeft();\r\n//        int moveItemTop = moveItem.getTop();\r\n//        int moveItemRight = moveItem.getRight();\r\n//        int moveItemBottom = moveItem.getBottom();\r\n//        int moveItemCenterX = moveItemLeft + moveItemWidth / 2;\r\n//        int moveItemCenter"}], "metadata": {"task_id": "vanilla/520", "ground_truth": "    if (moveItem == null) {\r\n        return;\r\n    }\r\n    doDragFloatView(movePos, moveItem, forceInvalidate);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n import android.view.View\nprivate void destroyFloatView() {\r\n    if (mFloatView != null) {\r\n        mFloatView.setVisibility(GONE);\r\n        if (mFloatViewManager != null) {\r\n            mFloatViewManager.onDestroyFloatView(mFloatView);\r", "choices": [{"text": "\n import android.view.View\nprivate void destroyFloatView() {\r\n    if (mFloatView!= null) {\r\n        mFloatView.setVisibility(GONE);\r\n        if (mFloatViewManager!= null) {\r\n            mFloatViewManager.onDestroyFloatView(mFloatView);\r\n//            mFloatViewManager.onDestroyFloatView(mFloatView);\r\n        }\r\n        mFloatView = null;\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "vanilla/521", "ground_truth": "        }\r\n        mFloatView = null;\r\n        invalidate();\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n public void setDragSortListener(DragSortListener l) {\r\n    setDropListener(l);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "vanilla/522", "ground_truth": "    setDragListener(l);\r\n    setRemoveListener(l);\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n import android.widget.ListView\nimport android.view.View\n/**\r\n * Completely custom scroll speed profile. Default increases linearly\r\n * with position and is constant in time. Create your own by implementing\r\n * {@link DragSortListView.DragScrollProfile}.\r\n *\r\n * @param ssp\r\n */\r\npublic void setDragScrollProfile(DragScrollProfile ssp) {\r\n    if (ssp != null) {\r", "choices": [{"text": "\n import android.widget.ListView\nimport android.view.View\n/**\r\n * Completely custom scroll speed profile. Default increases linearly\r\n * with position and is constant in time. Create your own by implementing\r\n * {@link DragSortListView.DragScrollProfile}.\r\n *\r\n * @param ssp\r\n */\r\npublic void setDragScrollProfile(DragScrollProfile ssp) {\r\n    if (ssp!= null) {\r\n//        mDragScrollProfile = ssp;\r\n    }\r\n}\r\n\n/**\r\n * Returns the current drag scroll profile.\r\n *\r\n * @return\r\n */\r\npublic DragScrollProfile getDragScrollProfile() {\r\n    return mDragScrollProfile;\r\n}\r\n\n/**\r\n * Sets the drag scroll profile to a default profile.\r\n */\r\npublic void setDragScrollProfileDefault() {\r\n    setDragScrollProfile(new DragScrollProfileDefault());\r\n}\r\n\n/**\r\n * Sets the drag scroll profile to a default profile.\r\n */\r\npublic void setDragScrollProfileDefault()"}], "metadata": {"task_id": "vanilla/523", "ground_truth": "        mScrollProfile = ssp;\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n private static int rotate(int value, int offset, int lowerBound, int upperBound) {\r\n    int windowSize = upperBound - lowerBound;\r\n    value += offset;\r\n    if (value < lowerBound) {\r\n        value += windowSize;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/524", "ground_truth": "    } else if (value >= upperBound) {\r\n        value -= windowSize;\r\n    }\r\n    return value;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n import android.util.SparseBooleanArray\nprivate static int insertionIndexForKey(SparseBooleanArray sba, int key) {\r\n    int low = 0;\r\n    int high = sba.size();\r\n    while (high - low > 0) {\r\n        int middle = (low + high) >> 1;\r\n        if (sba.keyAt(middle) < key)\r\n            low = middle + 1;\r", "choices": [{"text": "else\r\n            high = middle;\r\n    }\r\n    return low;\r\n}\n"}], "metadata": {"task_id": "vanilla/526", "ground_truth": "        else\r\n            high = middle;\r\n    }\r\n    return low;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n import android.os.SystemClock\npublic void startScrolling(int dir) {\r\n    if (!mScrolling) {\r\n        // Debug.startMethodTracing(\"dslv-scroll\");\r\n        mAbort = false;\r\n        mScrolling = true;\r\n        tStart = SystemClock.uptimeMillis();\r", "choices": [{"text": "//        mScroller.startScroll(mScrollX, mScrollY, dir, 0, 1000);\r\n        mScroller.startScroll(mScrollX, mScrollY, dir, 0, 1000);\r\n        mHandler.sendEmptyMessage(MSG_SCROLL);\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "vanilla/527", "ground_truth": "        mPrevTime = tStart;\r\n        scrollDir = dir;\r\n        post(this);\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n import android.widget.ListView\nimport android.view.View\npublic void stopScrolling(boolean now) {\r\n    if (now) {\r\n        DragSortListView.this.removeCallbacks(this);\r\n        mScrolling = false;\r", "choices": [{"text": "} else {\r\n        DragSortListView.this.postDelayed(this, 100);\r\n        mScrolling = true;\r\n}\r\n}\n"}], "metadata": {"task_id": "vanilla/528", "ground_truth": "    } else {\r\n        mAbort = true;\r\n    }\r\n    // Debug.stopMethodTracing();\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\nprivate int mDragState = IDLE;\nprivate int mDragDeltaY;\nprivate int mDragDeltaX;\n public void startTracking() {\r\n    mBuilder.append(\"<DSLVStates>\\n\");\r", "choices": [{"text": "}\r\n public void stopTracking() {\r\n    mBuilder.append(\"</DSLVStates>\\n\");\r\n}\r\n public void setDragState(int state) {\r\n    mDragState = state;\r\n}\r\n public int getDragState() {\r\n    return mDragState;\r\n}\r\n public void setDragDeltaY(int delta) {\r\n    mDragDeltaY = delta;\r\n}\r\n public int getDragDeltaY() {\r\n    return mDragDeltaY;\r\n}\r\n public void setDragDeltaX(int delta) {\r\n    mDragDeltaX = delta;\r\n}\r\n"}], "metadata": {"task_id": "vanilla/529", "ground_truth": "    mNumFlushes = 0;\r\n    mTracking = true;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n import java.io.FileWriter\nimport java.io.File\npublic void flush() {\r\n    if (!mTracking) {\r\n        return;\r\n    }\r\n    // save to file on sdcard\r\n    try {\r\n        boolean append = true;\r\n        if (mNumFlushes == 0) {\r\n            append = false;\r\n        }\r\n        FileWriter writer = new FileWriter(mFile, append);\r\n        writer.write(mBuilder.toString());\r\n        mBuilder.delete(0, mBuilder.length());\r\n        writer.flush();\r\n        writer.close();\r", "choices": [{"text": "//        Log.d(TAG, \"flush to file: \" + mFile.getAbsolutePath());\r\n    } catch (IOException e) {\r\n        Log.e(TAG, \"Error writing to file: \" + mFile.getAbsolutePath(), e);\r\n    }\r\n    mNumFlushes++;\r\n}\n"}], "metadata": {"task_id": "vanilla/530", "ground_truth": "        mNumFlushes++;\r\n    } catch (IOException e) {\r\n        // do nothing\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n public void stopTracking() {\r\n    if (mTracking) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/531", "ground_truth": "        mBuilder.append(\"</DSLVStates>\\n\");\r\n        flush();\r\n        mTracking = false;\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\DragSortListView.java"}}
{"prompt": "\n import android.database.Cursor\n/**\r\n * Create a map from an array of strings to an array of column-id integers in cursor c.\r\n * If c is null, the array will be discarded.\r\n *\r\n * @param c the cursor to find the columns from\r\n * @param from the Strings naming the columns of interest\r\n */\r\nprivate void findColumns(Cursor c, String[] from) {\r\n    if (c != null) {\r\n        int i;\r\n        int count = from.length;\r\n        if (mFrom == null || mFrom.length != count) {\r\n            mFrom = new int[count];\r\n        }\r\n        for (i = 0; i < count; i++) {\r\n            mFrom[i] = c.getColumnIndexOrThrow(from[i]);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "vanilla/534", "ground_truth": "        }\r\n    } else {\r\n        mFrom = null;\r\n    }\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\SimpleDragSortCursorAdapter.java"}}
{"prompt": "\n import android.view.View\nimport android.widget.ImageView\nimport android.graphics.Bitmap\n/**\r\n * Removes the Bitmap from the ImageView created in\r\n * onCreateFloatView() and tells the system to recycle it.\r\n */\r\n@Override\r\npublic void onDestroyFloatView(View floatView) {\r\n    ((ImageView) floatView).setImageDrawable(null);\r", "choices": [{"text": "}\r\n/**\r\n * Creates a new ImageView and sets it to the floatView.\r\n */\r\n@Override\r\npublic void onShowFloatView(View floatView) {\r\n    ImageView imageView = new ImageView(this);\r\n    imageView.setImageBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.ic_launcher));\r\n    ((ViewGroup) floatView).addView(imageView);\r\n}\r\n/**\r\n * Creates a new ImageView and sets it to the floatView.\r\n */\r\n@Override\r\npublic void onHideFloatView(View floatView) {\r\n    ((ViewGroup) floatView)."}], "metadata": {"task_id": "vanilla/537", "ground_truth": "    mFloatBitmap.recycle();\r\n    mFloatBitmap = null;\r\n}", "fpath": "vanilla\\app\\src\\main\\java\\com\\mobeta\\android\\dslv\\SimpleFloatViewManager.java"}}
{"prompt": "\n import android.view.View\nprotected View getRootView() {\r", "choices": [{"text": "return this.mRootView;\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/0", "ground_truth": "    viewBinding = AboutBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\AboutActivity.java"}}
{"prompt": "\n @Override\r\nprotected void onDestroy() {\r", "choices": [{"text": "super.onDestroy();\r\nif (mLocationManager!= null) {\r\nmLocationManager.removeUpdates(this);\r\n}\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/1", "ground_truth": "    super.onDestroy();\r\n    viewBinding = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\AboutActivity.java"}}
{"prompt": "\n import android.os.Bundle\n@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    // Set volume control stream for text to speech\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/2", "ground_truth": "    setVolumeControlStream(TTSManager.AUDIO_STREAM);\r\n    setContentView(getRootView());\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\AbstractActivity.java"}}
{"prompt": "\n @Override\r\npublic boolean onSupportNavigateUp() {\r", "choices": [{"text": "//        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment);\r\n//        return NavigationUI.navigateUp(navController, mAppBarConfiguration) || super.onSupportNavigateUp();\r\n        return super.onSupportNavigateUp();\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/3", "ground_truth": "    getOnBackPressedDispatcher().onBackPressed();\r\n    return true;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\AbstractActivity.java"}}
{"prompt": "\n import de.dennisguse.opentracks.databinding.ChartBinding\nimport androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\n@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n    viewBinding = ChartBinding.inflate(inflater, container, false);\r", "choices": [{"text": "return viewBinding.getRoot();\r\n}\n"}], "metadata": {"task_id": "OpenTracks/8", "ground_truth": "    viewBinding.chartView.setChartByDistance(chartByDistance);\r\n    return viewBinding.getRoot();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java"}}
{"prompt": "\n @Override\r\npublic void onPause() {\r\n    super.onPause();\r", "choices": [{"text": "}\r\n\r\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n}\r\n\r\n@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/10", "ground_truth": "    pauseTrackDataHub();\r\n    PreferencesUtils.unregisterOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java"}}
{"prompt": "\n import android.view.View\n@Override\r\npublic void onDestroyView() {\r", "choices": [{"text": "super.onDestroyView();\r\nif (mWebView!= null) {\r\nmWebView.loadDataWithBaseURL(null, \"\", \"text/html\", \"utf-8\", null);\r\nmWebView.clearHistory();\r\nmWebView.clearView();\r\nmWebView.removeAllViews();\r\nmWebView.destroy();\r\nmWebView = null;\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/11", "ground_truth": "    super.onDestroyView();\r\n    viewBinding = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.R\nimport android.view.View\n@Override\r\npublic void clearTrackPoints() {\r\n    if (isResumed()) {\r\n        pendingPoints.clear();\r\n        viewBinding.chartView.reset();\r\n        runOnUiThread(() -> {\r\n            if (isResumed()) {\r", "choices": [{"text": "//                viewBinding.chartView.clearTrackPoints();\r\n                viewBinding.chartView.invalidate();\r\n            }\r\n        });\r\n    }\r\n}\r\n<file_sep>/app/src/main/java/de/dennisguse/opentracks/data/models/TrackPoint.kt\n/*\n * Copyright 2012 <NAME>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www."}], "metadata": {"task_id": "OpenTracks/13", "ground_truth": "                viewBinding.chartView.resetScroll();\r\n            }\r\n        });\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java"}}
{"prompt": "\n import de.dennisguse.opentracks.stats.TrackStatistics\nimport de.dennisguse.opentracks.settings.UnitSystem\nimport de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.R\nimport androidx.annotation.NonNull\nimport android.view.View\npublic void onSampledInTrackPoint(@NonNull TrackPoint trackPoint, @NonNull TrackStatistics trackStatistics) {\r\n    if (isResumed()) {\r\n        ChartPoint point = ChartPoint.create(trackStatistics, trackPoint, trackPoint.getSpeed(), chartByDistance, viewBinding.chartView.getUnitSystem());\r", "choices": [{"text": "//        if (point!= null) {\r\n//            viewBinding.chartView.addPoint(point);\r\n//        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "OpenTracks/14", "ground_truth": "        pendingPoints.add(point);\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Marker\nimport de.dennisguse.opentracks.R\n@Override\r\npublic void clearMarkers() {\r\n    if (isResumed()) {\r", "choices": [{"text": "//        mMap.clear();\r\n        mMap.clear();\r\n        mMap.addMarker(new MarkerOptions().position(new LatLng(0, 0)).title(\"Marker\"));\r\n    }\r\n}\n"}], "metadata": {"task_id": "OpenTracks/16", "ground_truth": "        viewBinding.chartView.clearMarker();\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Marker\nimport de.dennisguse.opentracks.R\nimport androidx.annotation.NonNull\n@Override\r\npublic void onNewMarker(@NonNull Marker marker) {\r\n    if (isResumed()) {\r", "choices": [{"text": "//        if (marker.getTrack()!= null) {\r\n//            if (marker.getTrack().getTrackType() == TrackType.ROUTE) {\r\n//                if (marker.getTrack().getTrackType() == TrackType.ROUTE) {\r\n//                    if (marker.getTrack().getTrackType() == TrackType.ROUTE) {\r\n//                        if (marker.getTrack().getTrackType() == TrackType.ROUTE) {\r\n//                            if (marker.getTrack().getTrackType() == TrackType.ROUTE) {\r\n//                               "}], "metadata": {"task_id": "OpenTracks/17", "ground_truth": "        viewBinding.chartView.addMarker(marker);\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Marker\nimport de.dennisguse.opentracks.R\n@Override\r\npublic void onNewMarkersDone() {\r\n    if (isResumed()) {\r", "choices": [{"text": "//        mMap.clear();\r\n        mMap.addMarkers(mMarkers);\r\n    }\r\n}\n"}], "metadata": {"task_id": "OpenTracks/18", "ground_truth": "        runOnUiThread(updateChart);\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\nimport android.view.View\n/**\r\n * Checks the chart settings.\r\n */\r\nprivate void checkChartSettings() {\r\n    boolean needUpdate = viewBinding.chartView.applyReportSpeed();\r\n    if (needUpdate) {\r", "choices": [{"text": "//        viewBinding.chartView.updateChart();\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/19", "ground_truth": "        viewBinding.chartView.postInvalidate();\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.data.TrackDataHub\n/**\r\n * Pauses the trackDataHub.\r\n * Needs to be synchronized because trackDataHub can be accessed by multiple threads.\r\n */\r\nprivate synchronized void pauseTrackDataHub() {\r", "choices": [{"text": "if (trackDataHub!= null) {\r\ntrackDataHub.pause();\r\n}\r\n}\r\n/**\r\n * Resumes the trackDataHub.\r\n * Needs to be synchronized because trackDataHub can be accessed by multiple threads.\r\n */\r\nprivate synchronized void resumeTrackDataHub() {\r\nif (trackDataHub!= null) {\r\ntrackDataHub.resume();\r\n}\r\n}\r\n/**\r\n * Stops the trackDataHub.\r\n * Needs to be synchronized because trackDataHub can be accessed by multiple threads.\r\n */\r\nprivate synchronized void stop"}], "metadata": {"task_id": "OpenTracks/21", "ground_truth": "    trackDataHub.unregisterTrackDataListener(this);\r\n    trackDataHub = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\nimport android.app.Activity\n/**\r\n * Runs a runnable on the UI thread if possible.\r\n *\r\n * @param runnable the runnable\r\n */\r\nprivate void runOnUiThread(Runnable runnable) {\r\n    Activity fragmentActivity = getActivity();\r\n    if (fragmentActivity != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/22", "ground_truth": "        fragmentActivity.runOnUiThread(runnable);\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartFragment.java"}}
{"prompt": "\n /**\r\n * Updates the series with a new {@link ChartPoint}.\r\n */\r\nvoid update(ChartPoint chartPoint) {\r\n    if (isChartPointValid(chartPoint)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/23", "ground_truth": "        extremityMonitor.update(extractDataFromChartPoint(chartPoint));\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartValueSeries.java"}}
{"prompt": "\n void drawPath(Canvas canvas, boolean shouldFillPathArea) {\r\n    if (shouldFillPathArea) {\r\n        canvas.drawPath(path, fillPaint);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/24", "ground_truth": "    }\r\n    canvas.drawPath(path, strokePaint);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartValueSeries.java"}}
{"prompt": "\n /**\r\n * Gets the interval value.\r\n *\r\n * @param min the min value\r\n * @param max the max value\r\n */\r\nprivate int getInterval(double min, double max) {\r\n    for (int intervalValue : intervalValues) {\r\n        int minValue = getMinMarkerValue(min, intervalValue);\r\n        double targetInterval = (max - minValue) / ChartView.Y_AXIS_INTERVALS;\r\n        if (intervalValue >= targetInterval) {\r\n            return intervalValue;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/26", "ground_truth": "        }\r\n    }\r\n    // Return the largest interval\r\n    return intervalValues[intervalValues.length - 1];\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartValueSeries.java"}}
{"prompt": "\n /**\r\n * Gets the min marker value.\r\n *\r\n * @param min           the min series value\r\n * @param intervalValue the interval value\r\n */\r\nprivate int getMinMarkerValue(double min, int intervalValue) {\r\n    // Round down to the nearest intervalValue\r\n    int value = ((int) (min / intervalValue)) * intervalValue;\r\n    // value > min if min is negative\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/27", "ground_truth": "    if (value > min) {\r\n        return value - intervalValue;\r\n    }\r\n    return value;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartValueSeries.java"}}
{"prompt": "\n int getTitleId(UnitSystem unitSystem) {\r\n    return switch(unitSystem) {\r\n        case METRIC ->\r\n            metricTitleId;\r\n        case IMPERIAL_FEET, IMPERIAL_METER ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/28", "ground_truth": "            imperialTitleId;\r\n        case NAUTICAL_IMPERIAL ->\r\n            nauticalTitleId;\r\n    };\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartValueSeries.java"}}
{"prompt": "\n @Override\r\npublic boolean onDown(MotionEvent e) {\r\n    if (!scroller.isFinished()) {\r\n        scroller.abortAnimation();\r", "choices": [{"text": "}\r\nreturn true;\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/30", "ground_truth": "    }\r\n    return true;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java"}}
{"prompt": "\n @Override\r\npublic boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\r\n    if (Math.abs(distanceX) > 0) {\r\n        int availableToScroll = effectiveWidth * (zoomLevel - 1) - getScrollX();\r\n        if (availableToScroll > 0) {\r", "choices": [{"text": "//            if (distanceX > 0) {\r\n//                if (getScrollX() < availableToScroll) {\r\n//                    scrollBy(distanceX, 0);\r\n//                } else {\r\n//                    scrollBy(availableToScroll, 0);\r\n//                }\r\n//            } else {\r\n//                if (getScrollX() > -availableToScroll) {\r\n//                    scrollBy(distanceX, 0);\r\n//                } else {\r\n//                    scrollBy(-availableToScroll, 0);\r\n//"}], "metadata": {"task_id": "OpenTracks/31", "ground_truth": "            scrollBy(Math.min(availableToScroll, (int) distanceX));\r\n        }\r\n    }\r\n    return true;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java"}}
{"prompt": "\n @Override\r\npublic boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\r", "choices": [{"text": "if (e1.getX() - e2.getX() > SWIPE_MIN_DISTANCE && Math.abs(velocityX) > SWIPE_THRESHOLD_VELOCITY) {\r\n// Left to Right swipe action\r\nreturn true;\r\n} else if (e2.getX() - e1.getX() > SWIPE_MIN_DISTANCE && Math.abs(velocityX) > SWIPE_THRESHOLD_VELOCITY) {\r\n// Right to Left swipe action\r\nreturn true;\r\n}\r\nif (e1.getY() - e2"}], "metadata": {"task_id": "OpenTracks/32", "ground_truth": "    fling((int) -velocityX);\r\n    return true;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java"}}
{"prompt": "\n @Override\r\npublic boolean onScale(ScaleGestureDetector detector) {\r\n    float scaleFactor = detector.getScaleFactor();\r\n    if (scaleFactor >= 1.1f) {\r\n        zoomIn();\r\n        return true;\r\n    } else if (scaleFactor <= 0.9) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/33", "ground_truth": "        zoomOut();\r\n        return true;\r\n    }\r\n    return false;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java"}}
{"prompt": "\n public boolean applyReportSpeed() {\r\n    if (reportSpeed) {\r\n        if (!speedSeries.isEnabled()) {\r\n            speedSeries.setEnabled(true);\r\n            paceSeries.setEnabled(false);\r\n            return true;\r\n        }\r\n    } else {\r\n        if (!paceSeries.isEnabled()) {\r\n            speedSeries.setEnabled(false);\r\n            paceSeries.setEnabled(true);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/34", "ground_truth": "            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java"}}
{"prompt": "\n public void addChartPoints(List<ChartPoint> dataPoints) {\r\n    synchronized (chartPoints) {\r\n        chartPoints.addAll(dataPoints);\r\n        for (ChartPoint dataPoint : dataPoints) {\r\n            xExtremityMonitor.update(dataPoint.timeOrDistance());\r\n            for (ChartValueSeries i : seriesList) {\r\n                i.update(dataPoint);\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/35", "ground_truth": "        }\r\n        updateDimensions();\r\n        updateSeries();\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java"}}
{"prompt": "\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final NumberFormat X_NUMBER_FORMAT = NumberFormat.getIntegerInstance();\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\n /**\r\n * Clears all data.\r\n */\r\npublic void reset() {\r\n    synchronized (chartPoints) {\r\n        chartPoints.clear();\r", "choices": [{"text": "}\r\n}\n"}], "metadata": {"task_id": "OpenTracks/36", "ground_truth": "        xExtremityMonitor.reset();\r\n        zoomLevel = 1;\r\n        updateDimensions();\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java"}}
{"prompt": "\n public void addMarker(Marker marker) {\r\n    synchronized (markers) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/37", "ground_truth": "        markers.add(marker);\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java"}}
{"prompt": "\nprivate final LinkedList<ChartPoint> chartPoints = new LinkedList<>();\nprivate static final NumberFormat X_FRACTION_FORMAT = NumberFormat.getNumberInstance();\nprivate static final int MAX_ZOOM_LEVEL = 10;\n public void clearMarker() {\r\n    synchronized (markers) {\r", "choices": [{"text": "markers.clear();\r\n}\r\n}\n"}], "metadata": {"task_id": "OpenTracks/38", "ground_truth": "        markers.clear();\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java"}}
{"prompt": "\n private void zoomIn() {\r\n    if (canZoomIn()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/39", "ground_truth": "        zoomLevel++;\r\n        updateSeries();\r\n        invalidate();\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java"}}
{"prompt": "\n private void zoomOut() {\r\n    if (canZoomOut()) {\r\n        zoomLevel--;\r\n        scroller.abortAnimation();\r\n        int scrollX = getScrollX();\r\n        int maxWidth = effectiveWidth * (zoomLevel - 1);\r\n        if (scrollX > maxWidth) {\r\n            scrollX = maxWidth;\r\n            scrollTo(scrollX, 0);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/40", "ground_truth": "        }\r\n        updateSeries();\r\n        invalidate();\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java"}}
{"prompt": "\n /**\r\n * Initiates flinging.\r\n *\r\n * @param velocityX velocity of fling in pixels per second\r\n */\r\nprivate void fling(int velocityX) {\r\n    int maxWidth = effectiveWidth * (zoomLevel - 1);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/41", "ground_truth": "    scroller.fling(getScrollX(), 0, velocityX, 0, 0, maxWidth, 0, 0);\r\n    invalidate();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java"}}
{"prompt": "\n /**\r\n * Handle parent's view disallow touch event.\r\n *\r\n * @param disallow Does disallow parent touch event?\r\n */\r\nprivate void requestDisallowInterceptTouchEventInParent(boolean disallow) {\r\n    ViewParent parent = getParent();\r\n    if (parent != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/42", "ground_truth": "        parent.requestDisallowInterceptTouchEvent(disallow);\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java"}}
{"prompt": "\n /**\r\n * Scrolls the view horizontally by a given amount.\r\n *\r\n * @param deltaX the number of pixels to scroll\r\n */\r\nprivate void scrollBy(int deltaX) {\r\n    int scrollX = getScrollX() + deltaX;\r\n    if (scrollX <= 0) {\r\n        scrollX = 0;\r\n    }\r\n    int maxWidth = effectiveWidth * (zoomLevel - 1);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/43", "ground_truth": "    if (scrollX >= maxWidth) {\r\n        scrollX = maxWidth;\r\n    }\r\n    scrollTo(scrollX, 0);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java"}}
{"prompt": "\n /**\r\n * Called by the parent to indicate that the mScrollX/Y values need to be\r\n * updated. Triggers a redraw during flinging.\r\n */\r\n@Override\r\npublic void computeScroll() {\r\n    if (scroller.computeScrollOffset()) {\r\n        int oldX = getScrollX();\r\n        int x = scroller.getCurrX();\r\n        scrollTo(x, 0);\r\n        if (oldX != x) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/44", "ground_truth": "            onScrollChanged(x, 0, oldX, 0);\r\n            postInvalidate();\r\n        }\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java"}}
{"prompt": "\n @Override\r\nprotected void onDraw(Canvas canvas) {\r\n    synchronized (chartPoints) {\r\n        canvas.save();\r\n        canvas.drawColor(backgroundColor);\r\n        canvas.save();\r\n        clipToGraphArea(canvas);\r\n        drawDataSeries(canvas);\r\n        drawMarker(canvas);\r\n        drawGrid(canvas);\r\n        canvas.restore();\r\n        drawSeriesTitles(canvas);\r\n        drawXAxis(canvas);\r\n        drawYAxis(canvas);\r\n        canvas.restore();\r", "choices": [{"text": "}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/47", "ground_truth": "        if (showPointer) {\r\n            drawPointer(canvas);\r\n        }\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java"}}
{"prompt": "\n /**\r\n * Clips a canvas to the graph area.\r\n *\r\n * @param canvas the canvas\r\n */\r\nprivate void clipToGraphArea(Canvas canvas) {\r\n    int x = getScrollX() + leftBorder;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/48", "ground_truth": "    int y = topBorder;\r\n    canvas.clipRect(x, y, x + effectiveWidth, y + effectiveHeight);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java"}}
{"prompt": "\n private String getXAxisLabel() {\r\n    Context context = getContext();\r\n    if (chartByDistance) {\r\n        return switch(unitSystem) {\r\n            case METRIC ->\r\n                context.getString(R.string.unit_kilometer);\r\n            case IMPERIAL_FEET, IMPERIAL_METER ->\r\n                context.getString(R.string.unit_mile);\r\n            case NAUTICAL_IMPERIAL ->\r\n                context.getString(R.string.unit_nautical_mile);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/50", "ground_truth": "        };\r\n    } else {\r\n        return context.getString(R.string.description_time);\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java"}}
{"prompt": "\n private double getXAxisInterval() {\r\n    double interval = maxX / zoomLevel / TARGET_X_AXIS_INTERVALS;\r\n    if (interval < 1) {\r\n        interval = .5;\r\n    } else if (interval < 5) {\r\n        interval = 2;\r\n    } else if (interval < 10) {\r\n        interval = 5;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/52", "ground_truth": "    } else {\r\n        interval = (interval / 10) * 10;\r\n    }\r\n    return interval;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java"}}
{"prompt": "\n private List<Double> getXAxisMarkerPositions(double interval) {\r\n    List<Double> markers = new ArrayList<>();\r\n    markers.add(0d);\r\n    for (int i = 1; i * interval < maxX; i++) {\r\n        markers.add(i * interval);\r\n    }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/53", "ground_truth": "    if (markers.size() < 2) {\r\n        markers.add(maxX);\r\n    }\r\n    return markers;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java"}}
{"prompt": "\n /**\r\n * The path needs to be updated any time after the data or the dimensions change.\r\n */\r\nprivate void updateSeries() {\r\n    synchronized (chartPoints) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/56", "ground_truth": "        seriesList.stream().forEach(this::updateSerie);\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java"}}
{"prompt": "\n /**\r\n * Updates the effective dimensions if changed.\r\n *\r\n * @param newWidth  the new width\r\n * @param newHeight the new height\r\n */\r\nprivate void updateEffectiveDimensionsIfChanged(int newWidth, int newHeight) {\r\n    if (width != newWidth || height != newHeight) {\r\n        width = newWidth;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/58", "ground_truth": "        height = newHeight;\r\n        updateEffectiveDimensions();\r\n        updateSeries();\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java"}}
{"prompt": "\n /**\r\n * Gets a paint's Rect for a string.\r\n *\r\n * @param paint  the paint\r\n * @param string the string\r\n */\r\nprivate Rect getRect(Paint paint, String string) {\r\n    Rect rect = new Rect();\r", "choices": [{"text": "paint.getTextBounds(string, 0, string.length(), rect);\r\nreturn rect;\r\n}\r\n/**\r\n * Gets the paint.\r\n *\r\n * @return the paint\r\n */\r\nprivate Paint getPaint() {\r\nPaint paint = new Paint();\r\npaint.setColor(Color.BLACK);\r\npaint.setTextSize(100);\r\npaint.setAntiAlias(true);\r\nreturn paint;\r\n}\r\n/**\r\n * Gets the paint.\r\n *\r\n * @return the paint\r\n */\r\nprivate Paint getPaint(int color)"}], "metadata": {"task_id": "OpenTracks/62", "ground_truth": "    paint.getTextBounds(string, 0, string.length(), rect);\r\n    return rect;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java"}}
{"prompt": "\n /**\r\n * Returns true if the index is allowed when the chartData is empty.\r\n */\r\nprivate boolean allowIfEmpty(ChartValueSeries chartValueSeries) {\r\n    if (!chartPoints.isEmpty()) {\r\n        return false;\r", "choices": [{"text": "}\r\nreturn chartValueSeries.isAllowIfEmpty();\r\n}\r\n/**\r\n * Returns true if the index is allowed when the chartData is empty.\r\n */\r\nprivate boolean allowIfEmpty(ChartValueSeries chartValueSeries, int index) {\r\n    if (!chartPoints.isEmpty()) {\r\n        return false;\r\n}\r\nreturn chartValueSeries.isAllowIfEmpty(index);\r\n}\r\n/**\r\n * Returns true if the index is allowed when the chartData is empty.\r\n */\r\nprivate boolean allowIfEmpty(ChartValueSeries chartValueSeries, int index"}], "metadata": {"task_id": "OpenTracks/63", "ground_truth": "    }\r\n    return chartValueSeries.drawIfChartPointHasNoData();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\chart\\ChartView.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.tables.TracksColumns\nimport de.dennisguse.opentracks.data.models.Track\nimport java.util.List\nimport java.util.ArrayList\nimport androidx.annotation.VisibleForTesting\nimport android.database.Cursor\n//TODO Only use for tests; also move to tests.\r\n@VisibleForTesting\r\npublic List<Track> getTracks() {\r\n    ArrayList<Track> tracks = new ArrayList<>();\r\n    try (Cursor cursor = getTrackCursor(null, null, TracksColumns._ID)) {\r\n        if (cursor != null && cursor.moveToFirst()) {\r\n            tracks.ensureCapacity(cursor.getCount());\r\n            do {\r\n                tracks.add(createTrack(cursor));\r", "choices": [{"text": "\n import de.dennisguse.opentracks.data.tables.TracksColumns\nimport de.dennisguse.opentracks.data.models.Track\nimport java.util.List\nimport java.util.ArrayList\nimport androidx.annotation.VisibleForTesting\nimport android.database.Cursor\n//TODO Only use for tests; also move to tests.\r\n@VisibleForTesting\r\npublic List<Track> getTracks() {\r\n    ArrayList<Track> tracks = new ArrayList<>();\r\n    try (Cursor cursor = getTrackCursor(null, null, TracksColumns._ID)) {\r\n        if (cursor!= null && cursor.moveToFirst()) {\r\n            tracks.ensureCapacity(cursor.getCount());\r\n            do {\r\n                tracks.add(createTrack(cursor));\r\n//                Log.d(TAG, \"getTracks: \" + tracks.get(tracks.size() - 1).toString());\r\n            } while (cursor.moveToNext());\r\n        }\r\n    }\r\n    return tracks;\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/67", "ground_truth": "            } while (cursor.moveToNext());\r\n        }\r\n    }\r\n    return tracks;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.tables.TracksColumns\nimport de.dennisguse.opentracks.data.models.Track\nimport java.util.List\nimport java.util.ArrayList\nimport android.database.Cursor\npublic List<Track> getTracks(ContentProviderSelectionInterface selection) {\r\n    SelectionData selectionData = selection.buildSelection();\r\n    ArrayList<Track> tracks = new ArrayList<>();\r\n    try (Cursor cursor = getTrackCursor(selectionData.selection(), selectionData.selectionArgs(), TracksColumns._ID)) {\r\n        if (cursor != null && cursor.moveToFirst()) {\r\n            tracks.ensureCapacity(cursor.getCount());\r\n            do {\r\n                tracks.add(createTrack(cursor));\r", "choices": [{"text": "\n import de.dennisguse.opentracks.data.tables.TracksColumns\nimport de.dennisguse.opentracks.data.models.Track\nimport java.util.List\nimport java.util.ArrayList\nimport android.database.Cursor\npublic List<Track> getTracks(ContentProviderSelectionInterface selection) {\r\n    SelectionData selectionData = selection.buildSelection();\r\n    ArrayList<Track> tracks = new ArrayList<>();\r\n    try (Cursor cursor = getTrackCursor(selectionData.selection(), selectionData.selectionArgs(), TracksColumns._ID)) {\r\n        if (cursor!= null && cursor.moveToFirst()) {\r\n            tracks.ensureCapacity(cursor.getCount());\r\n            do {\r\n                tracks.add(createTrack(cursor));\r\n} while (cursor.moveToNext());\r\n}\r\n}\r\nreturn tracks;\r\n}\r\npublic Track getTrack(ContentProviderSelectionInterface selection) {\r\n    SelectionData selectionData = selection.buildSelection();\r\n    Track track = null;\r\n    try (Cursor cursor = getTrackCursor(selectionData.selection(), selectionData.selectionArgs(), TracksColumns._ID)) {\r\n        if (cursor!= null && cursor.moveToFirst()) {\r\n            track = createTrack(cursor);\r\n}\r\n}\r\nreturn track;\r\n}\r\npublic Cursor getTrackCursor(String selection,"}], "metadata": {"task_id": "OpenTracks/68", "ground_truth": "            } while (cursor.moveToNext());\r\n        }\r\n    }\r\n    return tracks;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.tables.TracksColumns\nimport de.dennisguse.opentracks.data.models.Track\nimport androidx.annotation.NonNull\nimport android.database.Cursor\npublic Track getTrack(@NonNull Track.Id trackId) {\r\n    try (Cursor cursor = getTrackCursor(TracksColumns._ID + \"=?\", new String[] { Long.toString(trackId.id()) }, null)) {\r\n        if (cursor != null && cursor.moveToNext()) {\r", "choices": [{"text": "\n import de.dennisguse.opentracks.data.tables.TracksColumns\nimport de.dennisguse.opentracks.data.models.Track\nimport androidx.annotation.NonNull\nimport android.database.Cursor\npublic Track getTrack(@NonNull Track.Id trackId) {\r\n    try (Cursor cursor = getTrackCursor(TracksColumns._ID + \"=?\", new String[] { Long.toString(trackId.id()) }, null)) {\r\n        if (cursor!= null && cursor.moveToNext()) {\r\nreturn getTrack(cursor);\r\n        }\r\n    }\r\n    return null;\r\n}\n"}], "metadata": {"task_id": "OpenTracks/69", "ground_truth": "            return createTrack(cursor);\r\n        }\r\n    }\r\n    return null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.tables.TracksColumns\nimport de.dennisguse.opentracks.data.models.Track\nimport java.util.UUID\nimport androidx.annotation.NonNull\nimport android.database.Cursor\npublic Track getTrack(@NonNull UUID trackUUID) {\r\n    String trackUUIDsearch = UUIDUtils.toHex(trackUUID);\r\n    try (Cursor cursor = getTrackCursor(\"hex(\" + TracksColumns.UUID + \")=?\", new String[] { trackUUIDsearch }, null)) {\r\n        if (cursor != null && cursor.moveToNext()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/70", "ground_truth": "            return createTrack(cursor);\r\n        }\r\n    }\r\n    return null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.tables.MarkerColumns\nimport de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.data.models.Marker\nimport androidx.annotation.NonNull\nimport android.database.Cursor\n/**\r\n * @return null if not able to get the next marker number.\r\n */\r\npublic Integer getNextMarkerNumber(@NonNull Track.Id trackId) {\r\n    String[] projection = { MarkerColumns._ID };\r\n    String selection = MarkerColumns.TRACKID + \"=?\";\r\n    String[] selectionArgs = new String[] { Long.toString(trackId.id()) };\r\n    try (Cursor cursor = getMarkerCursor(projection, selection, selectionArgs, MarkerColumns._ID, -1)) {\r\n        if (cursor != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/73", "ground_truth": "            return cursor.getCount();\r\n        }\r\n    }\r\n    return null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.tables.MarkerColumns\nimport de.dennisguse.opentracks.data.models.Marker\nimport androidx.annotation.NonNull\nimport android.database.Cursor\npublic Marker getMarker(@NonNull Marker.Id markerId) {\r\n    try (Cursor cursor = getMarkerCursor(null, MarkerColumns._ID + \"=?\", new String[] { Long.toString(markerId.id()) }, MarkerColumns._ID, 1)) {\r\n        if (cursor != null && cursor.moveToFirst()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/74", "ground_truth": "            return createMarker(cursor);\r\n        }\r\n    }\r\n    return null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Marker\nimport androidx.annotation.NonNull\nimport android.net.Uri\n/**\r\n * @return the content provider URI of the inserted marker.\r\n */\r\npublic Uri insertMarker(@NonNull Marker marker) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/76", "ground_truth": "    marker.setId(null);\r\n    return contentResolver.insert(MarkerColumns.CONTENT_URI, createContentValues(marker));\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java"}}
{"prompt": "\n import de.dennisguse.opentracks.ui.markers.MarkerUtils\nimport de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.data.models.Marker\nimport java.io.File\nimport android.net.Uri\nimport android.content.Context\nprivate void deleteMarkerPhoto(Context context, Marker marker) {\r\n    if (marker != null && marker.hasPhoto()) {\r\n        Uri uri = marker.getPhotoURI();\r\n        File file = MarkerUtils.buildInternalPhotoFile(context, marker.getTrackId(), uri);\r\n        if (file.exists()) {\r\n            File parent = file.getParentFile();\r\n            file.delete();\r\n            if (parent.listFiles().length == 0) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/77", "ground_truth": "                parent.delete();\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java"}}
{"prompt": "\n import java.util.List\nimport android.net.Uri\n/**\r\n * Formats an array of IDs as comma separated string value\r\n *\r\n * @param ids array with IDs\r\n * @return comma separated list of ids\r\n */\r\nprivate static String formatIdListForUri(long[] ids) {\r\n    StringBuilder idsPathSegment = new StringBuilder();\r\n    for (long id : ids) {\r\n        if (idsPathSegment.length() > 0) {\r\n            idsPathSegment.append(ID_SEPARATOR);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/85", "ground_truth": "        }\r\n        idsPathSegment.append(id);\r\n    }\r\n    return idsPathSegment.toString();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ContentProviderUtils.java"}}
{"prompt": "\n private int getTotalChanges() {\r\n    int totalCount;\r\n    try (Cursor cursor = db.rawQuery(\"SELECT total_changes()\", null)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/87", "ground_truth": "        cursor.moveToNext();\r\n        totalCount = cursor.getInt(0);\r\n    }\r\n    return totalCount;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\CustomContentProvider.java"}}
{"prompt": "\n import android.database.sqlite.SQLiteDatabase\n/**\r\n * Add elevation gain\r\n */\r\nprivate void upgradeFrom26to27(SQLiteDatabase db) {\r\n    db.beginTransaction();\r\n    db.execSQL(\"ALTER TABLE trackpoints ADD COLUMN elevation_gain FLOAT\");\r", "choices": [{"text": "}\r\n/**\r\n * Add elevation gain\r\n */\r\nprivate void upgradeFrom27to28(SQLiteDatabase db) {\r\n    db.beginTransaction();\r\n    db.execSQL(\"ALTER TABLE trackpoints ADD COLUMN elevation_gain_meters FLOAT\");\r\n}\r\n/**\r\n * Add elevation gain\r\n */\r\nprivate void upgradeFrom28to29(SQLiteDatabase db) {\r\n    db.beginTransaction();\r\n    db.execSQL(\"ALTER TABLE trackpoints ADD COLUMN elevation_gain_meters_delta FLOAT\");\r\n}\r\n/**\r\n * Add elevation gain\r\n */\r\nprivate void upgradeFrom"}], "metadata": {"task_id": "OpenTracks/97", "ground_truth": "    db.setTransactionSuccessful();\r\n    db.endTransaction();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\CustomSQLiteOpenHelper.java"}}
{"prompt": "\n import android.database.sqlite.SQLiteDatabase\n/**\r\n * Add accuracy_vertical\r\n */\r\nprivate void upgradeFrom33to34(SQLiteDatabase db) {\r\n    db.beginTransaction();\r\n    db.execSQL(\"ALTER TABLE trackpoints ADD COLUMN accuracy_vertical FLOAT\");\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/100", "ground_truth": "    db.setTransactionSuccessful();\r\n    db.endTransaction();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\CustomSQLiteOpenHelper.java"}}
{"prompt": "\n public static Cadence of(float value, Duration duration) {\r\n    if (duration.isZero()) {\r\n        return zero();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/101", "ground_truth": "    }\r\n    return new Cadence(value / (duration.toMillis() / (float) Duration.ofMinutes(1).toMillis()));\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\Cadence.java"}}
{"prompt": "\n public static Distance of(Double distance_m) {\r\n    if (distance_m == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/102", "ground_truth": "        return Distance.of(Double.NaN);\r\n    } else {\r\n        return Distance.of((double) distance_m);\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\Distance.java"}}
{"prompt": "\n @Nullable\r\npublic static Distance ofOrNull(Double distance_m) {\r\n    if (distance_m == null) {\r\n        return null;\r", "choices": [{"text": "}\r\nreturn new Distance(distance_m);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/103", "ground_truth": "    }\r\n    return of(distance_m);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\Distance.java"}}
{"prompt": "\n public static Distance one(UnitSystem unitSystem) {\r\n    return switch(unitSystem) {\r\n        case METRIC ->\r\n            Distance.ofKilometer(1);\r\n        case IMPERIAL_FEET, IMPERIAL_METER ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/104", "ground_truth": "            Distance.ofMile(1);\r\n        case NAUTICAL_IMPERIAL ->\r\n            Distance.ofNauticalMile(1);\r\n    };\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\Distance.java"}}
{"prompt": "\n public double toKM_Miles(UnitSystem unitSystem) {\r\n    return switch(unitSystem) {\r\n        case METRIC ->\r\n            toKM();\r\n        case IMPERIAL_FEET, IMPERIAL_METER ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/105", "ground_truth": "            toMI();\r\n        case NAUTICAL_IMPERIAL ->\r\n            toNauticalMiles();\r\n    };\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\Distance.java"}}
{"prompt": "\n public double toM_FT(UnitSystem unitSystem) {\r\n    return switch(unitSystem) {\r\n        case METRIC, IMPERIAL_METER ->\r", "choices": [{"text": "//            this.value * 3.2808399;\r\n            this.value * 3.2808399;\r\n        case IMPERIAL_FOOT -> this.value;\r\n        default -> throw new IllegalArgumentException(\"Invalid unit system\");\r\n    };\r\n }\r\n\r\n public double toM_IN(UnitSystem unitSystem) {\r\n    return switch(unitSystem) {\r\n        case METRIC, IMPERIAL_METER ->\r\n//            this.value * 39.3700787;\r\n            this.value * 39.370078"}], "metadata": {"task_id": "OpenTracks/106", "ground_truth": "            toM();\r\n        case NAUTICAL_IMPERIAL, IMPERIAL_FEET ->\r\n            toFT();\r\n    };\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\Distance.java"}}
{"prompt": "\n public Builder setDecimalCount(int decimalCount) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/108", "ground_truth": "    this.decimalCount = decimalCount;\r\n    return this;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\DistanceFormatter.java"}}
{"prompt": "\n public Builder setUnit(@Nullable UnitSystem unitSystem) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/109", "ground_truth": "    this.unitSystem = unitSystem;\r\n    return this;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\DistanceFormatter.java"}}
{"prompt": "\n public Builder setThreshold(double threshold) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/110", "ground_truth": "    this.threshold = threshold;\r\n    return this;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\DistanceFormatter.java"}}
{"prompt": "\n public Location getLocation() {\r\n    Location location = new Location(\"\");\r\n    location.setTime(time.toEpochMilli());\r\n    if (hasLocation()) {\r\n        location.setLatitude(latitude);\r\n        location.setLongitude(longitude);\r\n    }\r\n    if (hasBearing()) {\r\n        location.setBearing(bearing);\r\n    }\r\n    if (hasAccuracy()) {\r\n        location.setAccuracy((float) accuracy.toM());\r\n    }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/112", "ground_truth": "    if (hasAltitude()) {\r\n        location.setAltitude(altitude.toM());\r\n    }\r\n    return location;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\Marker.java"}}
{"prompt": "\n public static Speed of(Distance distance, Duration duration) {\r\n    if (duration.isZero()) {\r\n        return zero();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/113", "ground_truth": "    }\r\n    return new Speed(distance.toM() / (duration.toMillis() / (double) Duration.ofSeconds(1).toMillis()));\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\Speed.java"}}
{"prompt": "\n public static Speed max(Speed speed1, Speed speed2) {\r\n    if (speed1.greaterThan(speed2)) {\r\n        return speed1;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/114", "ground_truth": "    }\r\n    return speed2;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\Speed.java"}}
{"prompt": "\n public double to(UnitSystem unitSystem) {\r\n    return switch(unitSystem) {\r\n        case METRIC ->\r\n            toKMH();\r\n        case IMPERIAL_FEET, IMPERIAL_METER ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/116", "ground_truth": "            toMPH();\r\n        case NAUTICAL_IMPERIAL ->\r\n            toKnots();\r\n    };\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\Speed.java"}}
{"prompt": "\n public Builder setDecimalCount(int decimalCount) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/118", "ground_truth": "    this.decimalCount = decimalCount;\r\n    return this;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\SpeedFormatter.java"}}
{"prompt": "\n public Builder setUnit(@NonNull UnitSystem unitSystem) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/119", "ground_truth": "    this.unitSystem = unitSystem;\r\n    return this;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\SpeedFormatter.java"}}
{"prompt": "\n public Builder setReportSpeedOrPace(boolean reportSpeedOrPace) {\r", "choices": [{"text": "-    this.reportSpeedOrPace = reportSpeedOrPace;\r\n+    this.reportSpeedOrPace = reportSpeedOrPace; \r\n+    return this;\r\n+  }\r\n+\r\n+  /**\r\n+   * Sets the value of the {@code reportSpeedOrPace} field.\r\n+   *\r\n+   * @param reportSpeedOrPace the value to set\r\n+   * @return this builder\r\n+   */\r\n+  public Builder setReportSpeedOrPace(boolean reportSpeedOrP"}], "metadata": {"task_id": "OpenTracks/120", "ground_truth": "    this.reportSpeedOrPace = reportSpeedOrPace;\r\n    return this;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\SpeedFormatter.java"}}
{"prompt": "\n public static Type getById(int id) {\r\n    for (Type e : values()) {\r", "choices": [{"text": "if (e.getId() == id) {\r\nreturn e;\r\n}\r\n}\r\nreturn null;\r\n}\r\n}\r\n}\n"}], "metadata": {"task_id": "OpenTracks/122", "ground_truth": "        if (e.type_db == id)\r\n            return e;\r\n    }\r\n    throw new RuntimeException(\"unknown id: \" + id);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java"}}
{"prompt": "\n public TrackPoint setType(@NonNull Type type) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/123", "ground_truth": "    this.type = type;\r\n    return this;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java"}}
{"prompt": "\n public TrackPoint setLatitude(double latitude) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/124", "ground_truth": "    this.latitude = latitude;\r\n    return this;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java"}}
{"prompt": "\n public TrackPoint setLongitude(double longitude) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/125", "ground_truth": "    this.longitude = longitude;\r\n    return this;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java"}}
{"prompt": "\n public TrackPoint setAltitudeGain(Float altitudeGain_m) {\r", "choices": [{"text": "-    this.altitudeGain = altitudeGain_m;\r\n+    this.altitudeGain = altitudeGain_m.floatValue();\r\n     return this;\r\n   }\r\n \r\n   public Float getAltitudeGain() {\r\n     return altitudeGain;\r\n   }\r\n \r\n   public TrackPoint setAltitudeGain(Double altitudeGain_m) {\r\n-    this.altitudeGain = altitudeGain_m.floatValue();\r\n+    this.altitudeGain = altitudeGain_m.floatValue();\r\n     return this;\r\n   }\r\n \r\n   public TrackPoint setAltitudeGain(String alt"}], "metadata": {"task_id": "OpenTracks/126", "ground_truth": "    this.altitudeGain_m = altitudeGain_m;\r\n    return this;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java"}}
{"prompt": "\n public TrackPoint setAltitudeLoss(Float altitudeLoss_m) {\r", "choices": [{"text": "-    this.altitudeLoss = altitudeLoss_m;\r\n+    this.altitudeLoss = altitudeLoss_m!= null? altitudeLoss_m : 0;\r\n     return this;\r\n   }\r\n \r\n   public Float getAltitudeLoss() {\r\n     return altitudeLoss;\r\n   }\r\n \r\n   public TrackPoint setAltitudeGain(Float altitudeGain_m) {\r\n-    this.altitudeGain = altitudeGain_m;\r\n+    this.altitudeGain = altitudeGain_m!= null? altitudeGain_m : 0;\r\n     return this;\r\n  "}], "metadata": {"task_id": "OpenTracks/127", "ground_truth": "    this.altitudeLoss_m = altitudeLoss_m;\r\n    return this;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java"}}
{"prompt": "\n @VisibleForTesting\r\npublic TrackPoint setAltitude(double altitude_m) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/128", "ground_truth": "    this.altitude = Altitude.WGS84.of(altitude_m);\r\n    return this;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java"}}
{"prompt": "\n public TrackPoint setAltitude(Altitude altitude) {\r", "choices": [{"text": "-    this.altitude = altitude;\r\n+    this.altitude = altitude.getValue();\r\n     return this;\r\n   }\r\n \r\n   public TrackPoint setAltitude(double altitude) {\r\n-    this.altitude = new Altitude(altitude);\r\n+    this.altitude = new Altitude(altitude).getValue();\r\n     return this;\r\n   }\r\n \r\n   public TrackPoint setAltitude(String altitude) {\r\n-    this.altitude = new Altitude(altitude);\r\n+    this.altitude = new Altitude(altitude).getValue();\r\n     return this;\r\n  "}], "metadata": {"task_id": "OpenTracks/129", "ground_truth": "    this.altitude = altitude;\r\n    return this;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java"}}
{"prompt": "\n public TrackPoint setSpeed(Speed speed) {\r", "choices": [{"text": "-    this.speed = speed;\r\n+    this.speed = speed.getValue();\r\n     return this;\r\n   }\r\n \r\n   public TrackPoint setElevation(Elevation elevation) {\r\n-    this.elevation = elevation;\r\n+    this.elevation = elevation.getValue();\r\n     return this;\r\n   }\r\n \r\n   public TrackPoint setDistance(Distance distance) {\r\n-    this.distance = distance;\r\n+    this.distance = distance.getValue();\r\n     return this;\r\n   }\r\n \r\n   public TrackPoint setCourse(Course course) {\r\n-    this.course = course"}], "metadata": {"task_id": "OpenTracks/130", "ground_truth": "    this.speed = speed;\r\n    return this;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java"}}
{"prompt": "\n public TrackPoint setBearing(Float bearing) {\r", "choices": [{"text": "-    this.bearing = bearing;\r\n+    this.bearing = bearing == null? null : bearing.floatValue();\r\n     return this;\r\n   }\r\n \r\n   public Float getBearing() {\r\n     return bearing;\r\n   }\r\n \r\n   public TrackPoint setElevation(Float elevation) {\r\n-    this.elevation = elevation;\r\n+    this.elevation = elevation == null? null : elevation.floatValue();\r\n     return this;\r\n   }\r\n \r\n   public Float getElevation() {\r\n     return elevation;\r\n   }\r\n \r\n   public TrackPoint setTime(Date time) {"}], "metadata": {"task_id": "OpenTracks/131", "ground_truth": "    this.bearing = bearing;\r\n    return this;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java"}}
{"prompt": "\n public TrackPoint setHorizontalAccuracy(Distance horizontalAccuracy) {\r", "choices": [{"text": "-    this.horizontalAccuracy = horizontalAccuracy;\r\n+    this.horizontalAccuracy = horizontalAccuracy.getValue();\r\n     return this;\r\n   }\r\n \r\n   public TrackPoint setVerticalAccuracy(Distance verticalAccuracy) {\r\n-    this.verticalAccuracy = verticalAccuracy;\r\n+    this.verticalAccuracy = verticalAccuracy.getValue();\r\n     return this;\r\n   }\r\n \r\n   public TrackPoint setTimestamp(DateTime timestamp) {\r\n-    this.timestamp = timestamp;\r\n+    this.timestamp = timestamp.getValue();\r\n     return this;\r\n   }\r\n \r\n   public TrackPoint setTrack(Track track)"}], "metadata": {"task_id": "OpenTracks/132", "ground_truth": "    this.horizontalAccuracy = horizontalAccuracy;\r\n    return this;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java"}}
{"prompt": "\n public TrackPoint setVerticalAccuracy(Distance horizontalAccuracy) {\r", "choices": [{"text": "-    this.verticalAccuracy = horizontalAccuracy;\r\n+    this.verticalAccuracy = horizontalAccuracy.doubleValue();\r\n     return this;\r\n   }\r\n \r\n   public TrackPoint setElevation(Distance elevation) {\r\n-    this.elevation = elevation;\r\n+    this.elevation = elevation.doubleValue();\r\n     return this;\r\n   }\r\n \r\n   public TrackPoint setTime(Instant time) {\r\n-    this.time = time;\r\n+    this.time = time.toEpochMilli();\r\n     return this;\r\n   }\r\n \r\n   public TrackPoint setTrack(Track track) {\r\n-"}], "metadata": {"task_id": "OpenTracks/133", "ground_truth": "    this.verticalAccuracy = horizontalAccuracy;\r\n    return this;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java"}}
{"prompt": "\n @NonNull\r\npublic Distance distanceToPrevious(@NonNull TrackPoint previous) {\r\n    if (hasSensorDistance()) {\r\n        return getSensorDistance();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/134", "ground_truth": "    }\r\n    return distanceToPreviousFromLocation(previous);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java"}}
{"prompt": "\n @NonNull\r\npublic Distance distanceToPreviousFromLocation(@NonNull TrackPoint previous) {\r\n    if (!hasLocation() || hasLocation() != previous.hasLocation()) {\r\n        throw new RuntimeException(\"Cannot compute distance.\");\r", "choices": [{"text": "\n @NonNull\r\npublic Distance distanceToPreviousFromLocation(@NonNull TrackPoint previous) {\r\n    if (!hasLocation() || hasLocation()!= previous.hasLocation()) {\r\n        throw new RuntimeException(\"Cannot compute distance.\");\r\n}\r\nreturn new Distance(previous.getLatitude(), previous.getLongitude(), getLatitude(), getLongitude());\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/135", "ground_truth": "    }\r\n    return Distance.of(getLocation().distanceTo(previous.getLocation()));\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java"}}
{"prompt": "\n public TrackPoint setSensorDistance(Distance distance_m) {\r", "choices": [{"text": "-    this.sensorDistance = distance_m;\r\n+    this.sensorDistance = distance_m.getMeters();\r\n     return this;\r\n }\r\n \r\n public TrackPoint setSensorDistance(double distance_m) {\r\n-    this.sensorDistance = new Distance(distance_m);\r\n+    this.sensorDistance = new Distance(distance_m, Distance.Units.METERS);\r\n     return this;\r\n }\r\n \r\n public TrackPoint setSensorDistance(double distance_m, Distance.Units units) {\r\n-    this.sensorDistance = new Distance(distance"}], "metadata": {"task_id": "OpenTracks/136", "ground_truth": "    this.sensorDistance = distance_m;\r\n    return this;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java"}}
{"prompt": "\n public TrackPoint setHeartRate(HeartRate heartRate) {\r", "choices": [{"text": "-    this.heartRate = heartRate;\r\n+    this.heartRate = heartRate.getValue();\r\n     return this;\r\n   }\r\n \r\n   public TrackPoint setAltitude(Altitude altitude) {\r\n-    this.altitude = altitude;\r\n+    this.altitude = altitude.getValue();\r\n     return this;\r\n   }\r\n \r\n   public TrackPoint setDistance(Distance distance) {\r\n-    this.distance = distance;\r\n+    this.distance = distance.getValue();\r\n     return this;\r\n   }\r\n \r\n   public TrackPoint setCadence(Cadence cad"}], "metadata": {"task_id": "OpenTracks/138", "ground_truth": "    this.heartRate = heartRate;\r\n    return this;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java"}}
{"prompt": "\n public TrackPoint setCadence(Cadence cadence) {\r", "choices": [{"text": "-    this.cadence = cadence;\r\n+    this.cadence = cadence.getValue();\r\n     return this;\r\n   }\r\n \r\n   public TrackPoint setAltitude(Altitude altitude) {\r\n-    this.altitude = altitude;\r\n+    this.altitude = altitude.getValue();\r\n     return this;\r\n   }\r\n \r\n   public TrackPoint setDistance(Distance distance) {\r\n-    this.distance = distance;\r\n+    this.distance = distance.getValue();\r\n     return this;\r\n   }\r\n \r\n   public TrackPoint setHeartRate(HeartRate heart"}], "metadata": {"task_id": "OpenTracks/139", "ground_truth": "    this.cadence = cadence;\r\n    return this;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java"}}
{"prompt": "\n public TrackPoint setPower(Power power) {\r", "choices": [{"text": "-    this.power = power;\r\n+    this.power = power == null? null : power.clone();\r\n     return this;\r\n   }\r\n \r\n   public TrackPoint setSpeed(Speed speed) {\r\n-    this.speed = speed;\r\n+    this.speed = speed == null? null : speed.clone();\r\n     return this;\r\n   }\r\n \r\n   public TrackPoint setCadence(Cadence cadence) {\r\n-    this.cadence = cadence;\r\n+    this.cadence = cadence == null? null : cadence.clone();\r\n    "}], "metadata": {"task_id": "OpenTracks/140", "ground_truth": "    this.power = power;\r\n    return this;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\models\\TrackPoint.java"}}
{"prompt": "\n @Nullable\r\n@Override\r\npublic String getType(@NonNull Uri uri) {\r\n    String mime = getTypeMime(uri);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/143", "ground_truth": "    if (mime != null) {\r\n        return mime;\r\n    }\r\n    return super.getType(uri);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\ShareContentProvider.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Track\nimport androidx.annotation.NonNull\nimport android.util.Log\npublic void loadTrack(@NonNull final Track.Id trackId) {\r\n    handler.post(() -> {\r\n        if (trackId.equals(selectedTrackId)) {\r\n            Log.i(TAG, \"Not reloading track \" + trackId.id());\r\n            return;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/144", "ground_truth": "        }\r\n        selectedTrackId = trackId;\r\n        loadDataForAll();\r\n    });\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\TrackDataHub.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Track\n/**\r\n * Registers a {@link Listener}.\r\n *\r\n * @param trackDataListener the track data listener\r\n */\r\npublic void registerTrackDataListener(final Listener trackDataListener) {\r\n    handler.post(() -> {\r\n        listeners.add(trackDataListener);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/145", "ground_truth": "        if (isStarted()) {\r\n            loadDataForListener(trackDataListener);\r\n        }\r\n    });\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\TrackDataHub.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Track\n/**\r\n * Resets the track points sampling states.\r\n */\r\nprivate void resetSamplingState() {\r\n    numLoadedPoints = 0;\r\n    firstSeenTrackPointId = null;\r", "choices": [{"text": "}\r\n/**\r\n * Returns the track point with the given id.\r\n *\r\n * @param id the id of the track point\r\n * @return the track point with the given id\r\n */\r\nprivate TrackPoint getTrackPoint(long id) {\r\n    return trackPoints.get(id);\r\n}\r\n/**\r\n * Returns the track point with the given id.\r\n *\r\n * @param id the id of the track point\r\n * @return the track point with the given id\r\n */\r\nprivate TrackPoint getTrackPoint(int id) {\r\n    return trackPoints.get(id"}], "metadata": {"task_id": "OpenTracks/149", "ground_truth": "    lastSeenTrackPointId = null;\r\n    trackStatisticsUpdater = new TrackStatisticsUpdater();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\TrackDataHub.java"}}
{"prompt": "\n @Override\r\npublic boolean hasNext() {\r\n    if (cursor == null) {\r\n        return false;\r", "choices": [{"text": "}\r\nreturn true;\r\n}\r\n\r\n@Override\r\npublic T next() {\r\n    if (cursor == null) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    T result = cursor.getValue();\r\n    cursor = cursor.getNext();\r\n    return result;\r\n}\r\n\r\n@Override\r\npublic void remove() {\r\n    throw new UnsupportedOperationException();\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/150", "ground_truth": "    }\r\n    return !cursor.isLast() && !cursor.isAfterLast();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\TrackPointIterator.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Track\nimport java.util.NoSuchElementException\nimport androidx.annotation.NonNull\n@Override\r\n@NonNull\r\npublic TrackPoint next() {\r\n    if (cursor == null || !cursor.moveToNext()) {\r\n        throw new NoSuchElementException();\r", "choices": [{"text": "\n import de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Track\nimport java.util.NoSuchElementException\nimport androidx.annotation.NonNull\n@Override\r\n@NonNull\r\npublic TrackPoint next() {\r\n    if (cursor == null ||!cursor.moveToNext()) {\r\n        throw new NoSuchElementException();\r\n}\r\nreturn new TrackPoint(cursor);\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}"}], "metadata": {"task_id": "OpenTracks/151", "ground_truth": "    }\r\n    return ContentProviderUtils.fillTrackPoint(cursor, indexes);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\TrackPointIterator.java"}}
{"prompt": "\n @Override\r\npublic void close() {\r\n    if (cursor != null) {\r\n        cursor.close();\r", "choices": [{"text": "\n @Override\r\npublic void close() {\r\n    if (cursor!= null) {\r\n        cursor.close();\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/152", "ground_truth": "        cursor = null;\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\TrackPointIterator.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Track\nimport java.time.Instant\npublic TrackSelection addDateRange(Instant from, Instant to) {\r\n    this.from = from;\r", "choices": [{"text": "this.to = to;\r\nreturn this;\r\n}\n"}], "metadata": {"task_id": "OpenTracks/153", "ground_truth": "    this.to = to;\r\n    return this;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\TrackSelection.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Track\npublic TrackSelection addTrackId(Track.Id trackId) {\r\n    if (!this.trackIds.contains(trackId)) {\r\n        this.trackIds.add(trackId);\r", "choices": [{"text": "}\r\nreturn this;\r\n}\n"}], "metadata": {"task_id": "OpenTracks/154", "ground_truth": "    }\r\n    return this;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\TrackSelection.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Track\npublic TrackSelection addActivityType(String activityType) {\r\n    if (!this.categories.contains(activityType)) {\r\n        this.categories.add(activityType);\r", "choices": [{"text": "}\r\nreturn this;\r\n}\n"}], "metadata": {"task_id": "OpenTracks/155", "ground_truth": "    }\r\n    return this;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\TrackSelection.java"}}
{"prompt": "\n import java.util.UUID\nimport java.nio.ByteBuffer\npublic static UUID fromBytes(byte[] bytes) {\r\n    ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\r\n    long mostSignificant = byteBuffer.getLong();\r", "choices": [{"text": "long leastSignificant = byteBuffer.getLong();\r\nreturn new UUID(mostSignificant, leastSignificant);\r\n}\n"}], "metadata": {"task_id": "OpenTracks/156", "ground_truth": "    long lestSignificant = byteBuffer.getLong();\r\n    return new UUID(mostSignificant, lestSignificant);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\UUIDUtils.java"}}
{"prompt": "\n import java.util.UUID\nimport java.nio.ByteBuffer\nimport androidx.annotation.NonNull\npublic static byte[] toBytes(@NonNull UUID uuid) {\r\n    ByteBuffer byteBuffer = ByteBuffer.allocate(16);\r\n    byteBuffer.putLong(uuid.getMostSignificantBits());\r", "choices": [{"text": "byteBuffer.putLong(uuid.getLeastSignificantBits());\r\nreturn byteBuffer.array();\r\n}\n"}], "metadata": {"task_id": "OpenTracks/157", "ground_truth": "    byteBuffer.putLong(uuid.getLeastSignificantBits());\r\n    return byteBuffer.array();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\data\\UUIDUtils.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.ActivityType\nimport android.content.Context\nprivate static int getPosition(Context context, ActivityType activityType) {\r\n    if (activityType == null) {\r\n        return -1;\r", "choices": [{"text": "}\r\n    return context.getResources().getIdentifier(activityType.name().toLowerCase(Locale.getDefault()), \"string\", context.getPackageName());\r\n}\n"}], "metadata": {"task_id": "OpenTracks/160", "ground_truth": "    }\r\n    return activityTypes.indexOf(activityType);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\ChooseActivityTypeDialogFragment.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.os.Bundle\nimport android.app.Dialog\n@NonNull\r\n@Override\r\npublic Dialog onCreateDialog(Bundle savedInstanceState) {\r\n    Dialog dialog = super.onCreateDialog(savedInstanceState);\r", "choices": [{"text": "dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\nreturn dialog;\r\n}\r\n}\r\n<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.java\npackage com.example.myapplication;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\npublic class MainActivity extends AppCompatActivity {\n    EditText et1"}], "metadata": {"task_id": "OpenTracks/161", "ground_truth": "    dialog.setTitle(R.string.track_edit_activity_type_hint);\r\n    return dialog;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\ChooseActivityTypeDialogFragment.java"}}
{"prompt": "\n import android.view.View\n@Override\r\npublic void onDestroyView() {\r", "choices": [{"text": "super.onDestroyView();\r\nif (mWebView!= null) {\r\nmWebView.loadDataWithBaseURL(null, \"\", \"text/html\", \"utf-8\", null);\r\nmWebView.clearHistory();\r\nmWebView.clearView();\r\nmWebView.removeAllViews();\r\nmWebView.destroy();\r\nmWebView = null;\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/163", "ground_truth": "    super.onDestroyView();\r\n    viewBinding = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\ChooseActivityTypeDialogFragment.java"}}
{"prompt": "\n import android.widget.AdapterView\nimport android.view.View\n@Override\r\npublic void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/164", "ground_truth": "    chooseActivityTypeCaller.onChooseActivityTypeDone(activityTypes.get(position));\r\n    dismiss();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\ChooseActivityTypeDialogFragment.java"}}
{"prompt": "\n public void setSelected(int position) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\n super.setSelected(position);\r\n }\r\n }\r\n\n"}], "metadata": {"task_id": "OpenTracks/165", "ground_truth": "    selected = position;\r\n    notifyDataSetChanged();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\ChooseActivityTypeImageAdapter.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\n@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r", "choices": [{"text": "View rootView = inflater.inflate(R.layout.fragment_main, container, false);\r\nreturn rootView;\r\n}\r\n}\r\n<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.content.Intent\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.Toast\n\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState"}], "metadata": {"task_id": "OpenTracks/168", "ground_truth": "    viewBinding = StatisticsRecordedBinding.inflate(inflater, container, false);\r\n    return viewBinding.getRoot();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordedFragment.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/169", "ground_truth": "    PreferencesUtils.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n    loadStatistics();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordedFragment.java"}}
{"prompt": "\n @Override\r\npublic void onPause() {\r", "choices": [{"text": "super.onPause();\r\nif (mAdView!= null) {\r\nmAdView.pause();\r\n}\r\n}\r\n\r\n@Override\r\npublic void onResume() {\r\nsuper.onResume();\r\nif (mAdView!= null) {\r\nmAdView.resume();\r\n}\r\n}\r\n\r\n@Override\r\npublic void onDestroy() {\r\nsuper.onDestroy();\r\nif (mAdView!= null) {\r\nmAdView.destroy();\r\n}\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/170", "ground_truth": "    super.onPause();\r\n    PreferencesUtils.unregisterOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordedFragment.java"}}
{"prompt": "\n import android.view.View\n@Override\r\npublic void onDestroyView() {\r", "choices": [{"text": "super.onDestroyView();\r\nif (mWebView!= null) {\r\nmWebView.loadDataWithBaseURL(null, \"\", \"text/html\", \"utf-8\", null);\r\nmWebView.clearHistory();\r\nmWebView.clearView();\r\nmWebView.removeAllViews();\r\nmWebView.destroy();\r\nmWebView = null;\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/171", "ground_truth": "    super.onDestroyView();\r\n    viewBinding = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordedFragment.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\n@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r", "choices": [{"text": "View rootView = inflater.inflate(R.layout.fragment_main, container, false);\r\nreturn rootView;\r\n}\r\n}\r\n<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.content.Intent\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.Toast\n\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState"}], "metadata": {"task_id": "OpenTracks/174", "ground_truth": "    viewBinding = StatisticsRecordingBinding.inflate(inflater, container, false);\r\n    return viewBinding.getRoot();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordingFragment.java"}}
{"prompt": "\n @Override\r\npublic void onPause() {\r", "choices": [{"text": "super.onPause();\r\nif (mAdView!= null) {\r\nmAdView.pause();\r\n}\r\n}\r\n\r\n@Override\r\npublic void onResume() {\r\nsuper.onResume();\r\nif (mAdView!= null) {\r\nmAdView.resume();\r\n}\r\n}\r\n\r\n@Override\r\npublic void onDestroy() {\r\nsuper.onDestroy();\r\nif (mAdView!= null) {\r\nmAdView.destroy();\r\n}\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/176", "ground_truth": "    super.onPause();\r\n    PreferencesUtils.unregisterOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordingFragment.java"}}
{"prompt": "\n @Override\r\npublic void onStop() {\r", "choices": [{"text": "super.onStop();\r\nif (mGoogleApiClient!= null && mGoogleApiClient.isConnected()) {\r\nmGoogleApiClient.disconnect();\r\n}\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/177", "ground_truth": "    super.onStop();\r\n    trackRecordingServiceConnection.unbind(getContext());\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordingFragment.java"}}
{"prompt": "\n import android.view.View\n@Override\r\npublic void onDestroyView() {\r\n    super.onDestroyView();\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/178", "ground_truth": "    viewHolders.clear();\r\n    viewBinding = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordingFragment.java"}}
{"prompt": "\n @Override\r\npublic void onDestroy() {\r", "choices": [{"text": "super.onDestroy();\r\nif (mLocationManager!= null) {\r\nmLocationManager.removeUpdates(this);\r\n}\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/179", "ground_truth": "    super.onDestroy();\r\n    trackRecordingServiceConnection = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordingFragment.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\nprivate void updateDataOnUI() {\r\n    if (isResumed()) {\r", "choices": [{"text": "//        if (mMap!= null) {\r\n//            mMap.clear();\r\n//        }\r\n        if (mMap!= null) {\r\n            mMap.clear();\r\n            mMap.addMarker(new MarkerOptions().position(new LatLng(48.137154, 11.575481)).title(\"<NAME>\"));\r\n            mMap.addMarker(new MarkerOptions().position(new LatLng(48.137154, 11.575481)).title(\"<NAME>\"));\r\n            mMap."}], "metadata": {"task_id": "OpenTracks/181", "ground_truth": "        viewHolders.forEach(i -> i.onChanged(unitSystem, recordingData));\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\fragments\\StatisticsRecordingFragment.java"}}
{"prompt": "\n import android.view.View\n@Override\r\nprotected View getRootView() {\r", "choices": [{"text": "return inflater.inflate(R.layout.activity_main, null);\r\n}\r\n@Override\r\nprotected void initView() {\r\n}\r\n@Override\r\nprotected void initData() {\r\n}\r\n@Override\r\nprotected void initListener() {\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/183", "ground_truth": "    helpBinding = HelpBinding.inflate(getLayoutInflater());\r\n    return helpBinding.getRoot();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\HelpActivity.java"}}
{"prompt": "\n import android.view.View\n@Override\r\nprotected View getRootView() {\r", "choices": [{"text": "return inflater.inflate(R.layout.activity_main, null);\r\n}\r\n@Override\r\nprotected void initView() {\r\n}\r\n@Override\r\nprotected void initData() {\r\n}\r\n@Override\r\nprotected void initListener() {\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/184", "ground_truth": "    viewBinding = IntroductionBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\introduction\\IntroductionActivity.java"}}
{"prompt": "\n @Override\r\nprotected void onDestroy() {\r", "choices": [{"text": "super.onDestroy();\r\nif (mLocationManager!= null) {\r\nmLocationManager.removeUpdates(this);\r\n}\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/185", "ground_truth": "    super.onDestroy();\r\n    viewBinding = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\introduction\\IntroductionActivity.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\n@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r", "choices": [{"text": "View rootView = inflater.inflate(R.layout.fragment_main, container, false);\r\nreturn rootView;\r\n}\r\n}\r\n<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.content.Intent\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.Toast\n\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState"}], "metadata": {"task_id": "OpenTracks/187", "ground_truth": "    viewBinding = OsmDashboardBinding.inflate(inflater, container, false);\r\n    return viewBinding.getRoot();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\introduction\\OSMDashboardFragment.java"}}
{"prompt": "\n @Override\r\npublic void onDestroy() {\r", "choices": [{"text": "super.onDestroy();\r\nif (mLocationManager!= null) {\r\nmLocationManager.removeUpdates(this);\r\n}\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/188", "ground_truth": "    super.onDestroy();\r\n    viewBinding = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\introduction\\OSMDashboardFragment.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\n@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r", "choices": [{"text": "View rootView = inflater.inflate(R.layout.fragment_main, container, false);\r\nreturn rootView;\r\n}\r\n}\r\n<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.content.Intent\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.Toast\n\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState"}], "metadata": {"task_id": "OpenTracks/189", "ground_truth": "    viewBinding = WelcomeBinding.inflate(inflater, container, false);\r\n    return viewBinding.getRoot();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\introduction\\WelcomeFragment.java"}}
{"prompt": "\n @Override\r\npublic void onDestroy() {\r", "choices": [{"text": "super.onDestroy();\r\nif (mLocationManager!= null) {\r\nmLocationManager.removeUpdates(this);\r\n}\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/190", "ground_truth": "    super.onDestroy();\r\n    viewBinding = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\introduction\\WelcomeFragment.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.os.Bundle\n@Override\r\npublic void onSaveInstanceState(@NonNull Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r", "choices": [{"text": "}\r\n@Override\r\npublic void onRestoreInstanceState(@NonNull Bundle savedInstanceState) {\r\n    super.onRestoreInstanceState(savedInstanceState);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/193", "ground_truth": "    outState.putString(EXTRA_TITLE, title);\r\n    outState.putStringArrayList(EXTRA_ERROR_LIST, errorList);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\ErrorListDialog.java"}}
{"prompt": "\n public void close() {\r", "choices": [{"text": "//     try {\r\n//         if (this.socket!= null) {\r\n//             this.socket.close();\r\n//         }\r\n//     } catch (IOException e) {\r\n//         e.printStackTrace();\r\n//     }\r\n// }\r\n}\r\n<file_sep>/src/main/java/com/example/demo/controller/UserController.java\npackage com.example.demo.controller;\r\n\r\nimport com.example.demo.entity.User;\r\nimport com.example.demo.service.UserService;\r\nimport org.springframework.beans"}], "metadata": {"task_id": "OpenTracks/196", "ground_truth": "    printWriter.flush();\r\n    printWriter = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\CSVTrackExporter.java"}}
{"prompt": "\n @Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r", "choices": [{"text": "}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/199", "ground_truth": "    conflictsQueue.clear();\r\n    exportTasks.clear();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\ExportActivity.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nprivate void nextExport(@Nullable ExportTask exportTask) {\r\n    exportTasks.remove(exportTask);\r\n    setProgress();\r\n    if (exportTasks.isEmpty()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/204", "ground_truth": "        onExportEnded();\r\n        return;\r\n    }\r\n    export(exportTasks.get(0));\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\ExportActivity.java"}}
{"prompt": "\n @Override\r\npublic void onExportSuccess(ExportTask exportTask) {\r\n    if (exportFileExists(exportTask)) {\r\n        trackExportOverwrittenCount++;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/205", "ground_truth": "    } else {\r\n        trackExportSuccessCount++;\r\n    }\r\n    nextExport(exportTask);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\ExportActivity.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\n/**\r\n * Overwrite the export file and set the autoConflict if user set the \"do it for all\" switch button.\r\n */\r\npublic void overwrite() {\r\n    export(exportTask, ConflictResolutionStrategy.CONFLICT_OVERWRITE);\r\n    if (viewBinding.exportProgressApplyToAll.isChecked()) {\r", "choices": [{"text": "//        export(exportTask, ConflictResolutionStrategy.CONFLICT_OVERWRITE);\r\n        export(exportTask, ConflictResolutionStrategy.CONFLICT_AUTO_RESOLVE);\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/208", "ground_truth": "        autoConflict = ConflictResolutionStrategy.CONFLICT_OVERWRITE;\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\ExportActivity.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\n/**\r\n * Skip the export file and set the autoConflict if user set the \"do it for all\" switch button.\r\n */\r\npublic void skip() {\r\n    export(exportTask, ConflictResolutionStrategy.CONFLICT_SKIP);\r\n    if (viewBinding.exportProgressApplyToAll.isChecked()) {\r", "choices": [{"text": "//        export(exportTask, ConflictResolutionStrategy.CONFLICT_AUTO);\r\n        export(exportTask, ConflictResolutionStrategy.CONFLICT_AUTO_OVERWRITE);\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/209", "ground_truth": "        autoConflict = ConflictResolutionStrategy.CONFLICT_SKIP;\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\ExportActivity.java"}}
{"prompt": "\n import android.os.Parcel\n@Override\r\npublic void writeToParcel(Parcel dest, int flags) {\r\n    dest.writeString(filename);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/213", "ground_truth": "    dest.writeString(trackFileFormat.name());\r\n    dest.writeTypedList(trackIds);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\ExportTask.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.data.models.Marker\nimport java.util.stream.Stream\nimport java.util.List\nimport java.io.OutputStream\nimport androidx.annotation.NonNull\n@Override\r\npublic boolean writeTrack(List<Track> tracks, @NonNull OutputStream outputStream) {\r\n    try {\r\n        prepare(outputStream);\r\n        writeHeader();\r\n        for (Track track : tracks) {\r\n            writeMarkers(track);\r\n        }\r\n        for (Track track : tracks) {\r\n            writeTrackPoints(track);\r\n        }\r\n        writeFooter();\r\n        close();\r\n        return true;\r", "choices": [{"text": "} catch (IOException e) {\r\n    e.printStackTrace();\r\n    return false;\r\n}\r\n}\r\nprivate void writeTrackPoints(Track track) throws IOException {\r\n    for (TrackPoint trackPoint : track.getTrackPoints()) {\r\n        writeTrackPoint(trackPoint);\r\n    }\r\n}\r\nprivate void writeTrackPoint(TrackPoint trackPoint) throws IOException {\r\n    writeTrackPoint(trackPoint.getLatitude(), trackPoint.getLongitude(), trackPoint.getElevation(), trackPoint.getTime());\r\n}\r\nprivate void writeTrackPoint(double latitude, double longitude, double elevation"}], "metadata": {"task_id": "OpenTracks/214", "ground_truth": "    } catch (InterruptedException e) {\r\n        Log.e(TAG, \"Thread interrupted\", e);\r\n        return false;\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\GPXTrackExporter.java"}}
{"prompt": "\n public void close() {\r", "choices": [{"text": "//     try {\r\n//         if (this.socket!= null) {\r\n//             this.socket.close();\r\n//         }\r\n//     } catch (IOException e) {\r\n//         e.printStackTrace();\r\n//     }\r\n// }\r\n}\r\n<file_sep>/src/main/java/com/example/demo/controller/UserController.java\npackage com.example.demo.controller;\r\n\r\nimport com.example.demo.entity.User;\r\nimport com.example.demo.service.UserService;\r\nimport org.springframework.beans"}], "metadata": {"task_id": "OpenTracks/215", "ground_truth": "    printWriter.flush();\r\n    printWriter = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\GPXTrackExporter.java"}}
{"prompt": "\nprivate static final String TAG = KMLTrackExporter.class.getSimpleName();\nprivate static final String SCHEMA_ID = \"schema\";\npublic static final String MARKER_STYLE = \"waypoint\";\n @VisibleForTesting\r\nvoid close() {\r", "choices": [{"text": "if (mOutputStream!= null) {\r\ntry {\r\nmOutputStream.close();\r\n} catch (IOException e) {\r\nLog.e(TAG, \"Error closing output stream\", e);\r\n}\r\n}\r\n}\n"}], "metadata": {"task_id": "OpenTracks/216", "ground_truth": "    printWriter.flush();\r\n    printWriter = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\KMLTrackExporter.java"}}
{"prompt": "\n private void writeFooter() {\r", "choices": [{"text": "// \tif (this.footer!= null) {\r\n// \t\tthis.footer.write(this.out);\r\n// \t}\r\n }\r\n\r\n private void writeHeader() {\r\n// \tif (this.header!= null) {\r\n// \t\tthis.header.write(this.out);\r\n// \t}\r\n }\r\n\r\n private void writePage(Page page) {\r\n// \tif (this.page!= null) {\r\n// \t\tthis.page.write(this.out);\r\n// \t}\r\n }\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/217", "ground_truth": "    printWriter.println(\"</Document>\");\r\n    printWriter.println(\"</kml>\");\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\KMLTrackExporter.java"}}
{"prompt": "\npublic static final String EXTENDED_DATA_TYPE_TRACKPOINT = \"trackpoint_type\";\nprivate static final String SCHEMA_ID = \"schema\";\npublic static final String EXTENDED_DATA_TYPE_SPEED = \"speed\";\n private void writeEndTrack() {\r", "choices": [{"text": "if (track!= null) {\r\ntrack.close();\r\ntrack = null;\r\n}\r\n}\r\nprivate void writeStartTrack() {\r\nif (track == null) {\r\ntrack = new Track();\r\n}\r\n}\r\nprivate void writeStartTrackSegment() {\r\nif (trackSegment == null) {\r\ntrackSegment = new TrackSegment();\r\n}\r\n}\r\nprivate void writeEndTrackSegment() {\r\nif (trackSegment!= null) {\r\ntrack.addTrackSegment(trackSegment);\r\ntrackSegment ="}], "metadata": {"task_id": "OpenTracks/221", "ground_truth": "    printWriter.println(\"</MultiTrack>\");\r\n    printWriter.println(\"</Placemark>\");\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\KMLTrackExporter.java"}}
{"prompt": "\n @VisibleForTesting\r\nvoid writeOpenSegment() {\r\n    printWriter.println(\"<Track>\");\r\n    trackpointTypeList.clear();\r\n    speedList.clear();\r\n    distanceList.clear();\r\n    powerList.clear();\r\n    cadenceList.clear();\r\n    heartRateList.clear();\r", "choices": [{"text": "}\r\n\r\n@VisibleForTesting\r\nvoid writeCloseSegment() {\r\n    printWriter.println(\"</Track>\");\r\n}\r\n\r\n@VisibleForTesting\r\nvoid writeOpenTrackpoint() {\r\n    printWriter.println(\"<Trackpoint>\");\r\n}\r\n\r\n@VisibleForTesting\r\nvoid writeCloseTrackpoint() {\r\n    printWriter.println(\"</Trackpoint>\");\r\n}\r\n\r\n@VisibleForTesting\r\nvoid writeOpenTrackpointExtension() {\r\n    printWriter.println(\"<Extensions>\");\r\n}\r\n\r\n@VisibleForTesting\r\nvoid writeCloseTrackpointExtension() {\r\n    printWriter.println(\"</Extensions>\");\r"}], "metadata": {"task_id": "OpenTracks/222", "ground_truth": "    altitudeGainList.clear();\r\n    altitudeLossList.clear();\r\n    accuracyHorizontal.clear();\r\n    accuracyVertical.clear();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\KMLTrackExporter.java"}}
{"prompt": "\n /**\r\n * Gets the heading to a location.\r\n *\r\n * @param trackId  the track id containing the location\r\n * @param location the location\r\n */\r\nprivate float getHeading(Track.Id trackId, Location location) {\r\n    TrackPoint.Id trackPointId = contentProviderUtils.getTrackPointId(trackId, location);\r\n    if (trackPointId == null) {\r\n        return location.getBearing();\r\n    }\r\n    TrackPoint viewLocation = contentProviderUtils.getLastValidTrackPoint(trackId);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/225", "ground_truth": "    if (viewLocation != null) {\r\n        return viewLocation.bearingTo(location);\r\n    }\r\n    return location.getBearing();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\KMLTrackExporter.java"}}
{"prompt": "\n private static String getCoordinates(Location location, String separator) {\r\n    String result = location.getLongitude() + separator + location.getLatitude();\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/226", "ground_truth": "    if (location.hasAltitude()) {\r\n        result += separator + location.getAltitude();\r\n    }\r\n    return result;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\KMLTrackExporter.java"}}
{"prompt": "\n /**\r\n * Writes a placemarker style.\r\n */\r\nprivate void writePlacemarkerStyle() {\r\n    printWriter.println(\"<Style id=\\\"\" + KMLTrackExporter.MARKER_STYLE + \"\\\"><IconStyle>\");\r", "choices": [{"text": "//    printWriter.println(\"<Icon><href>http://maps.google.com/mapfiles/kml/paddle/grn-blank.png</href></Icon>\");\r\n    printWriter.println(\"<Icon><href>\" + KMLTrackExporter.MARKER_ICON + \"</href></Icon>\");\r\n    printWriter.println(\"<scale>1.0</scale>\");\r\n    printWriter.println(\"</IconStyle></Style>\");\r\n}\r\n\r\n/**\r\n * Writes a placemarker style.\r\n */\r\nprivate void writePlacemarkerStyle(String iconUrl) {\r\n    printWriter.println"}], "metadata": {"task_id": "OpenTracks/230", "ground_truth": "    printWriter.println(\"<Icon />\");\r\n    printWriter.println(\"</IconStyle></Style>\");\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\exporter\\KMLTrackExporter.java"}}
{"prompt": "\n import androidx.documentfile.provider.DocumentFile\nimport android.content.Intent\n/**\r\n * @return null if directory needs to be selected.\r\n */\r\nprotected DocumentFile configureDirectoryChooserIntent(Intent intent) {\r", "choices": [{"text": "//    intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true)\r\n//    intent.putExtra(Intent.EXTRA_LOCAL_ONLY, true)\r\n//    intent.putExtra(Intent.EXTRA_MIME_TYPES, arrayOf(\"image/*\"))\r\n//    intent.putExtra(Intent.EXTRA_TITLE, \"Select a directory\")\r\n//    intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true)\r\n//    intent.putExtra(Intent.EXTRA_LOCAL_ONLY, true)\r\n//    intent.putExtra(Intent.EXTRA_MIME_TYPES, arrayOf"}], "metadata": {"task_id": "OpenTracks/235", "ground_truth": "    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\r\n    return null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\DirectoryChooserActivity.java"}}
{"prompt": "\n import de.dennisguse.opentracks.util.IntentUtils\nimport android.net.Uri\nimport android.content.Intent\nimport android.app.Activity\n@Override\r\nprotected Intent createNextActivityIntent(Uri directoryUri) {\r\n    Intent intent = IntentUtils.newIntent(this, ImportActivity.class);\r", "choices": [{"text": "intent.putExtra(ImportActivity.EXTRA_DIRECTORY_URI, directoryUri);\r\nreturn intent;\r\n}\r\n@Override\r\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\nsuper.onActivityResult(requestCode, resultCode, data);\r\nif (resultCode == Activity.RESULT_OK) {\r\nif (requestCode == REQUEST_CODE_IMPORT) {\r\nif (data!= null) {\r\nUri uri = data.getData();\r\nif (uri!= null) {\r\nIntent intent = new Intent(Intent."}], "metadata": {"task_id": "OpenTracks/236", "ground_truth": "    intent.putExtra(ImportActivity.EXTRA_DIRECTORY_URI_KEY, directoryUri);\r\n    return intent;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\DirectoryChooserActivity.java"}}
{"prompt": "\n @Override\r\npublic void startElement(String uri, String localName, String tag, Attributes attributes) {\r\n    switch(tag) {\r\n        case TAG_MARKER:\r\n            onMarkerStart(attributes);\r\n            break;\r\n        case TAG_TRACK:\r\n            trackImporter.newTrack();\r\n            break;\r\n        case TAG_TRACK_SEGMENT:\r\n            //Nothing to do here.\r\n            break;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/243", "ground_truth": "        case TAG_TRACK_POINT:\r\n            onTrackPointStart(attributes);\r\n            break;\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\GpxTrackImporter.java"}}
{"prompt": "\n private void onTrackPointStart(Attributes attributes) {\r\n    latitude = attributes.getValue(ATTRIBUTE_LAT);\r\n    longitude = attributes.getValue(ATTRIBUTE_LON);\r\n    altitude = null;\r\n    time = null;\r\n    speed = null;\r\n    gain = null;\r\n    loss = null;\r\n    sensorDistance = null;\r\n    accuracyHorizontal = null;\r", "choices": [{"text": "}\r\n\n private void onTrackPointEnd(Attributes attributes) {\r\n    if (latitude!= null && longitude!= null) {\r\n      TrackPoint point = new TrackPoint(latitude, longitude, altitude, time, speed, gain, loss, sensorDistance, accuracyHorizontal);\r\n      track.add(point);\r\n    }\r\n    latitude = null;\r\n    longitude = null;\r\n    altitude = null;\r\n    time = null;\r\n    speed = null;\r\n    gain = null;\r\n    loss = null;\r\n    sensorDistance = null;\r\n    accuracyHorizontal = null;\r\n}\r\n\n private void onTrackPoint(Attributes attributes)"}], "metadata": {"task_id": "OpenTracks/245", "ground_truth": "    accuracyVertical = null;\r\n    power = null;\r\n    heartrate = null;\r\n    cadence = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\GpxTrackImporter.java"}}
{"prompt": "\n private void onMarkerStart(Attributes attributes) {\r\n    name = null;\r\n    description = null;\r\n    photoUrl = null;\r\n    latitude = attributes.getValue(ATTRIBUTE_LAT);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/246", "ground_truth": "    longitude = attributes.getValue(ATTRIBUTE_LON);\r\n    altitude = null;\r\n    time = null;\r\n    markerType = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\GpxTrackImporter.java"}}
{"prompt": "\n private void onFileEnd() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\n }\r\n\r\n @Override\r\n public void onFileProgress(long bytesWritten, long totalBytes) {\r\n// TODO Auto-generated method stub\r\n }\r\n\r\n @Override\r\n public void onFileStart(String filename) {\r\n// TODO Auto-generated method stub\r\n }\r\n\r\n @Override\r\n public void onFileUpdate(String filename) {\r\n// TODO Auto-generated method stub\r\n }\r\n\r\n @Override\r\n public void onProgress(long bytesWritten, long totalBytes) {\r\n// TODO Auto-generated method stub\r\n }\r\n\r\n @Override\r\n public void onStop()"}], "metadata": {"task_id": "OpenTracks/247", "ground_truth": "    trackImporter.addMarkers(markers);\r\n    trackImporter.finish();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\GpxTrackImporter.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\nimport android.os.ResultReceiver\nimport android.net.Uri\nimport android.content.Intent\nimport android.content.Context\nimport android.app.job.JobService\npublic static void enqueue(Context context, ImportServiceResultReceiver receiver, Uri uri) {\r\n    Intent intent = new Intent(context, JobService.class);\r\n    intent.putExtra(EXTRA_RECEIVER, receiver);\r", "choices": [{"text": "}\r\npublic static void enqueue(Context context, ImportServiceResultReceiver receiver, Uri uri, String name) {\r\n    Intent intent = new Intent(context, JobService.class);\r\n    intent.putExtra(EXTRA_RECEIVER, receiver);\r\n    intent.putExtra(EXTRA_NAME, name);\r\n}\r\npublic static void enqueue(Context context, ImportServiceResultReceiver receiver, Uri uri, String name, String description) {\r\n    Intent intent = new Intent(context, JobService.class);\r\n    intent.putExtra(EXTRA_RECEIVER, receiver);\r\n    intent.putExtra(EXTRA_NAME, name);"}], "metadata": {"task_id": "OpenTracks/251", "ground_truth": "    intent.putExtra(EXTRA_URI, uri);\r\n    enqueueWork(context, ImportService.class, JOB_ID, intent);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\ImportService.java"}}
{"prompt": "\n import java.util.List\nimport androidx.lifecycle.LiveData\nimport androidx.documentfile.provider.DocumentFile\nLiveData<Summary> getImportData(List<DocumentFile> documentFiles) {\r\n    if (importData == null) {\r", "choices": [{"text": "importData = MutableLiveData<Summary>()\r\n}\r\nreturn importData\r\n}\n"}], "metadata": {"task_id": "OpenTracks/254", "ground_truth": "        importData = new MutableLiveData<>();\r\n        loadData(documentFiles);\r\n    }\r\n    return importData;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\ImportViewModel.java"}}
{"prompt": "\n private void onMarkerStart() {\r\n    // Reset all Placemark variables\r\n    name = null;\r\n    description = null;\r\n    activityTypeLocalized = null;\r\n    photoUrl = null;\r", "choices": [{"text": "}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/257", "ground_truth": "    latitude = null;\r\n    longitude = null;\r\n    altitude = null;\r\n    markerType = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\KmlTrackImporter.java"}}
{"prompt": "\n private void onMarkerLocationEnd() {\r\n    if (content != null) {\r\n        String[] parts = content.trim().split(\",\");\r\n        if (parts.length != 2 && parts.length != 3) {\r\n            return;\r\n        }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/258", "ground_truth": "        longitude = parts[0];\r\n        latitude = parts[1];\r\n        altitude = parts.length == 3 ? parts[2] : null;\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\KmlTrackImporter.java"}}
{"prompt": "\n private void onTrackSegmentStart() {\r\n    locationList.clear();\r\n    whenList.clear();\r\n    trackpointTypeList.clear();\r\n    sensorSpeedList.clear();\r\n    sensorDistanceList.clear();\r\n    sensorHeartRateList.clear();\r\n    sensorCadenceList.clear();\r\n    sensorPowerList.clear();\r", "choices": [{"text": "}\r\n\r\nprivate void onTrackSegmentEnd() {\r\n    if (locationList.size() > 0) {\r\n        TrackSegment segment = new TrackSegment();\r\n        segment.setTrackPoints(locationList);\r\n        segment.setTrackPointTypes(trackpointTypeList);\r\n        segment.setWhenList(whenList);\r\n        segment.setSensorSpeedList(sensorSpeedList);\r\n        segment.setSensorDistanceList(sensorDistanceList);\r\n        segment.setSensorHeartRateList(sensorHeartRateList);\r\n        segment.setSensorCadenceList(sensorCadenceList);\r\n        segment.setSensorPowerList(sensorPower"}], "metadata": {"task_id": "OpenTracks/259", "ground_truth": "    altitudeGainList.clear();\r\n    altitudeLossList.clear();\r\n    accuracyHorizontal.clear();\r\n    accuracyVertical.clear();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\KmlTrackImporter.java"}}
{"prompt": "\n private void onFileEnd() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\n }\r\n\r\n @Override\r\n public void onFileProgress(long bytesWritten, long totalBytes) {\r\n// TODO Auto-generated method stub\r\n }\r\n\r\n @Override\r\n public void onFileStart(String filename) {\r\n// TODO Auto-generated method stub\r\n }\r\n\r\n @Override\r\n public void onFileUpdate(String filename) {\r\n// TODO Auto-generated method stub\r\n }\r\n\r\n @Override\r\n public void onProgress(long bytesWritten, long totalBytes) {\r\n// TODO Auto-generated method stub\r\n }\r\n\r\n @Override\r\n public void onStop()"}], "metadata": {"task_id": "OpenTracks/261", "ground_truth": "    trackImporter.addMarkers(markers);\r\n    trackImporter.finish();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\KmlTrackImporter.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Track\nimport java.util.List\nimport java.util.ArrayList\nimport java.io.IOException\nimport java.io.File\nimport androidx.annotation.NonNull\nimport android.net.Uri\n@NonNull\r\npublic List<Track.Id> importFile(Uri fileUri) throws IOException {\r\n    List<Track.Id> trackIds = findAndParseKmlFile(fileUri);\r\n    List<Track.Id> trackIdsWithImages = new ArrayList<>();\r\n    for (Track.Id trackId : trackIds) {\r\n        if (copyKmzImages(fileUri, trackId)) {\r\n            trackIdsWithImages.add(trackId);\r\n            deleteOrphanImages(trackId);\r\n        } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/262", "ground_truth": "            return new ArrayList<>();\r\n        }\r\n    }\r\n    return trackIdsWithImages;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\KmzTrackImporter.java"}}
{"prompt": "\n import de.dennisguse.opentracks.util.FileUtils\nimport de.dennisguse.opentracks.R\nimport java.io.File\n/**\r\n * Returns true if fileName ends with some of the KMZ_IMAGES_EXT suffixes.\r\n * Otherwise returns false.\r\n */\r\nprivate boolean hasImageExtension(String fileName) {\r\n    if (fileName == null) {\r\n        return false;\r\n    }\r\n    String fileExt = FileUtils.getExtension(fileName.toLowerCase());\r", "choices": [{"text": "//    return fileExt.equals(KMZ_IMAGES_EXT_JPG) || fileExt.equals(KMZ_IMAGES_EXT_PNG) || fileExt.equals(KMZ_IMAGES_EXT_GIF);\r\n    return fileExt.equals(KMZ_IMAGES_EXT_JPG) || fileExt.equals(KMZ_IMAGES_EXT_PNG);\r\n}\r\n/**\r\n * Returns true if fileName ends with some of the KMZ_IMAGES_EXT suffixes.\r\n * Otherwise returns false.\r\n */\r\nprivate boolean hasImageExtension("}], "metadata": {"task_id": "OpenTracks/263", "ground_truth": "    if (fileExt == null) {\r\n        return false;\r\n    }\r\n    return KMZ_IMAGES_EXT.contains(fileExt);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\KmzTrackImporter.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Track\nvoid newTrack() {\r\n    if (track != null) {\r\n        finishTrack();\r", "choices": [{"text": "\n import de.dennisguse.opentracks.data.models.Track\nvoid newTrack() {\r\n    if (track!= null) {\r\n        finishTrack();\r\n}\r\ntrack = new Track();\r\ntrack.setStartTime(new Date());\r\ntrack.setTrackType(TrackType.WALKING);\r\ntrack.setTrackName(\"Walking\");\r\ntrack.setTrackDescription(\"Walking\");\r\ntrack.setTrackDistance(0);\r\ntrack.setTrackDuration(0);\r\ntrack.setTrackElevation(0);\r\ntrack.setTrackPoints(new ArrayList<TrackPoint>());\r\ntrack.setTrackPoints(new ArrayList<TrackPoint>());\r\ntrack.setTrackPoints(new ArrayList<TrackPoint>());"}], "metadata": {"task_id": "OpenTracks/265", "ground_truth": "    }\r\n    track = null;\r\n    trackPoints.clear();\r\n    markers.clear();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\TrackImporter.java"}}
{"prompt": "\n void finish() {\r\n    if (track != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/266", "ground_truth": "        finishTrack();\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\TrackImporter.java"}}
{"prompt": "\n import de.dennisguse.opentracks.ui.markers.MarkerUtils\nimport de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.data.models.Marker\nimport java.io.File\nimport androidx.annotation.NonNull\nimport android.net.Uri\n/**\r\n * Gets the photo url for a file.\r\n *\r\n * @param externalPhotoUrl the file name\r\n */\r\nprivate String getInternalPhotoUrl(@NonNull Track.Id trackId, @NonNull String externalPhotoUrl) {\r\n    String importFileName = KmzTrackImporter.importNameForFilename(externalPhotoUrl);\r\n    File file = MarkerUtils.buildInternalPhotoFile(context, trackId, Uri.parse(importFileName));\r\n    if (file != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/267", "ground_truth": "        Uri photoUri = FileUtils.getUriForFile(context, file);\r\n        return \"\" + photoUri;\r\n    }\r\n    return null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\TrackImporter.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Track\nimport java.util.List\nimport java.io.InputStream\nimport java.io.IOException\nimport androidx.annotation.NonNull\nimport android.net.Uri\nimport android.content.Context\n@NonNull\r\npublic List<Track.Id> importFile(Context context, Uri uri) throws ImportParserException, ImportAlreadyExistsException, IOException {\r\n    try (InputStream inputStream = context.getContentResolver().openInputStream(uri)) {\r", "choices": [{"text": "return importFile(inputStream);\r\n    }\r\n}\r\npublic List<Track.Id> importFile(InputStream inputStream) throws ImportParserException, ImportAlreadyExistsException, IOException {\r\n    return importFile(new InputStreamReader(inputStream));\r\n}\r\npublic List<Track.Id> importFile(Reader reader) throws ImportParserException, ImportAlreadyExistsException, IOException {\r\n    return importFile(new ImportParser(reader));\r\n}\r\npublic List<Track.Id> importFile(ImportParser parser) throws ImportParserException, ImportAlreadyExistsException, IOException {\r\n    List<Track.Id> ids = new"}], "metadata": {"task_id": "OpenTracks/268", "ground_truth": "        return importFile(inputStream);\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\io\\file\\importer\\XMLImporter.java"}}
{"prompt": "\n import de.dennisguse.opentracks.settings.PreferencesUtils\nimport de.dennisguse.opentracks.services.TrackRecordingService\nimport de.dennisguse.opentracks.data.models.Track\nimport android.os.Bundle\nprotected void execute(TrackRecordingService service) {\r\n    Track.Id trackId = service.startNewTrack();\r\n    if (trackId != null) {\r\n        Bundle bundle = getIntent().getExtras();\r\n        if (bundle != null) {\r\n            updateTrackMetadata(trackId, bundle);\r\n            if (PreferencesUtils.isPublicAPIDashboardEnabled()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/274", "ground_truth": "                startDashboardAPI(trackId, bundle);\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\publicapi\\StartRecording.java"}}
{"prompt": "\n import de.dennisguse.opentracks.services.TrackRecordingService\nimport de.dennisguse.opentracks.services.RecordingData\nimport de.dennisguse.opentracks.data.models.Track\nprotected void execute(TrackRecordingService service) {\r\n    RecordingData recordingData = service.getRecordingDataObservable().getValue();\r\n    Track.Id trackId = null;\r\n    if (recordingData != null && recordingData.track() != null) {\r\n        trackId = recordingData.track().getId();\r\n    }\r", "choices": [{"text": "\n import de.dennisguse.opentracks.services.TrackRecordingService\nimport de.dennisguse.opentracks.services.RecordingData\nimport de.dennisguse.opentracks.data.models.Track\nprotected void execute(TrackRecordingService service) {\r\n    RecordingData recordingData = service.getRecordingDataObservable().getValue();\r\n    Track.Id trackId = null;\r\n    if (recordingData!= null && recordingData.track()!= null) {\r\n        trackId = recordingData.track().getId();\r\n    }\r\n}\n"}], "metadata": {"task_id": "OpenTracks/277", "ground_truth": "    service.endCurrentTrack();\r\n    if (trackId != null) {\r\n        ExportUtils.postWorkoutExport(this, trackId);\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\publicapi\\StopRecording.java"}}
{"prompt": "\n import android.bluetooth.BluetoothDevice\nprivate synchronized boolean isSameBluetoothDevice(String address) {\r\n    if (bluetoothGatt == null) {\r\n        return false;\r", "choices": [{"text": "}\r\nBluetoothDevice device = bluetoothGatt.getDevice();\r\nif (device == null) {\r\n    return false;\r\n}\r\nreturn device.getAddress().equals(address);\r\n}\n"}], "metadata": {"task_id": "OpenTracks/279", "ground_truth": "    }\r\n    return address.equals(bluetoothGatt.getDevice().getAddress());\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\BluetoothConnectionManager.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.AtmosphericPressure\nimport java.util.UUID\nimport android.bluetooth.BluetoothGattCharacteristic\n@Override\r\npublic void handlePayload(SensorManager.SensorDataChangedObserver observer, ServiceMeasurementUUID serviceMeasurementUUID, String sensorName, String address, BluetoothGattCharacteristic characteristic) {\r\n    AtmosphericPressure value = parseEnvironmentalSensing(characteristic);\r\n    if (value == null)\r", "choices": [{"text": "       return;\r\n    observer.onAtmosphericPressureChanged(sensorName, address, value);\r\n}\r\nprivate AtmosphericPressure parseEnvironmentalSensing(BluetoothGattCharacteristic characteristic) {\r\n    AtmosphericPressure atmosphericPressure = new AtmosphericPressure();\r    atmosphericPressure.setTimestamp(new Date(characteristic.getTimestamp()));\r    atmosphericPressure.setPressure(new Float(characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT16, 0)));\r    return atmosphericPressure;\r}\r}\r<file_sep>"}], "metadata": {"task_id": "OpenTracks/280", "ground_truth": "        return;\r\n    observer.onChange(new Raw<>(value));\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\BluetoothHandlerBarometricPressure.java"}}
{"prompt": "\n @Override\r\npublic void handlePayload(SensorManager.SensorDataChangedObserver observer, ServiceMeasurementUUID serviceMeasurementUUID, String sensorName, String address, BluetoothGattCharacteristic characteristic) {\r\n    Pair<WheelData, BluetoothHandlerCyclingCadence.CrankData> data = parseCyclingCrankAndWheel(address, sensorName, characteristic);\r\n    if (data.first != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/282", "ground_truth": "        observer.onChange(new Raw<>(data.first));\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\BluetoothHandlerCyclingDistanceSpeed.java"}}
{"prompt": "\n @Override\r\npublic void handlePayload(SensorManager.SensorDataChangedObserver observer, @NonNull ServiceMeasurementUUID serviceMeasurementUUID, String sensorName, String address, BluetoothGattCharacteristic characteristic) {\r\n    Data cyclingPower = parseCyclingPower(characteristic);\r\n    if (cyclingPower != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/283", "ground_truth": "        observer.onChange(new Raw<>(cyclingPower));\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\BluetoothHandlerManagerCyclingPower.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.HeartRate\nimport java.util.UUID\nimport androidx.annotation.NonNull\nimport android.bluetooth.BluetoothGattCharacteristic\n@Override\r\npublic void handlePayload(SensorManager.SensorDataChangedObserver observer, @NonNull ServiceMeasurementUUID serviceMeasurementUUID, String sensorName, String address, BluetoothGattCharacteristic characteristic) {\r\n    HeartRate heartRate = parseHeartRate(characteristic);\r\n    if (heartRate != null) {\r", "choices": [{"text": "\n import de.dennisguse.opentracks.data.models.HeartRate\nimport java.util.UUID\nimport androidx.annotation.NonNull\nimport android.bluetooth.BluetoothGattCharacteristic\n@Override\r\npublic void handlePayload(SensorManager.SensorDataChangedObserver observer, @NonNull ServiceMeasurementUUID serviceMeasurementUUID, String sensorName, String address, BluetoothGattCharacteristic characteristic) {\r\n    HeartRate heartRate = parseHeartRate(characteristic);\r\n    if (heartRate!= null) {\r\nobserver.onHeartRateChanged(heartRate);\r\n    }\r\n}\n"}], "metadata": {"task_id": "OpenTracks/284", "ground_truth": "        observer.onChange(new Raw<>(heartRate));\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\BluetoothHandlerManagerHeartRate.java"}}
{"prompt": "\n @Override\r\npublic void handlePayload(SensorManager.SensorDataChangedObserver observer, @NonNull ServiceMeasurementUUID serviceMeasurementUUID, String sensorName, String address, BluetoothGattCharacteristic characteristic) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/285", "ground_truth": "    Data data = parseRunningSpeedAndCadence(sensorName, characteristic);\r\n    observer.onChange(new Raw<>(data));\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\BluetoothHandlerRunningSpeedAndCadence.java"}}
{"prompt": "\n import android.os.Handler\nimport android.content.Context\n@Override\r\npublic void start(Context context, Handler handler) {\r\n    started = true;\r", "choices": [{"text": "}\r\n@Override\r\npublic void stop(Context context, Handler handler) {\r\n    started = false;\r\n}\r\n@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n    started = false;\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/286", "ground_truth": "    // Triggers connection startup\r\n    onSharedPreferenceChanged(null, null);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\BluetoothRemoteSensorManager.java"}}
{"prompt": "\n import android.util.Log\nimport android.content.Context\nimport android.bluetooth.BluetoothManager\nimport android.bluetooth.BluetoothAdapter\npublic static BluetoothAdapter getAdapter(Context context) {\r\n    BluetoothManager bluetoothManager = (BluetoothManager) context.getSystemService(Context.BLUETOOTH_SERVICE);\r\n    if (bluetoothManager == null) {\r\n        Log.i(TAG, \"BluetoothManager not available.\");\r", "choices": [{"text": "}\r\n    return bluetoothManager.getAdapter();\r\n}\n"}], "metadata": {"task_id": "OpenTracks/288", "ground_truth": "        return null;\r\n    } else {\r\n        return bluetoothManager.getAdapter();\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\BluetoothUtils.java"}}
{"prompt": "\n import android.os.Handler\nimport android.content.Context\npublic void start(Context context, Handler handler) {\r\n    this.context = context;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/292", "ground_truth": "    this.handler = handler;\r\n    PreferencesUtils.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\GainManager.java"}}
{"prompt": "\n private void onDisconnect() {\r\n    if (driver == null)\r\n        return;\r", "choices": [{"text": "//    driver.disconnect();\r\n//    driver = null;\r\n//    if (mHandler!= null) {\r\n//        mHandler.removeCallbacks(mRunnable);\r\n//        mHandler = null;\r\n//    }\r\n//    if (mRunnable!= null) {\r\n//        mRunnable = null;\r\n//    }\r\n//    if (mHandler!= null) {\r\n//        mHandler.removeCallbacks(mRunnable);\r\n//        mHandler = null;\r\n//    }\r\n//    if (mRunnable!="}], "metadata": {"task_id": "OpenTracks/294", "ground_truth": "    driver.disconnect();\r\n    listener.onDisconnect(new AggregatorBarometer(\"GainManager\", null));\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\GainManager.java"}}
{"prompt": "\n public final void add(Raw<Input> current) {\r", "choices": [{"text": "-  if (current.is(Input.class)) {\r\n-    add((Input) current.get());\r\n-  } else {\r\n-    throw new IllegalArgumentException(\"Expected Input, got \" + current.getClass());\r\n-  }\r\n+  add(current.get());\r\n }\r\n \r\n public final void add(Input input) {\r\n"}], "metadata": {"task_id": "OpenTracks/296", "ground_truth": "    computeValue(current);\r\n    previous = current;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\sensorData\\Aggregator.java"}}
{"prompt": "\n public Output getValue() {\r\n    if (!hasValue()) {\r\n        return null;\r\n    }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/297", "ground_truth": "    if (isRecent()) {\r\n        return value;\r\n    }\r\n    return getNoneValue();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\sensorData\\Aggregator.java"}}
{"prompt": "\n /**\r\n * Is the data recent considering the current time.\r\n */\r\nprivate boolean isRecent() {\r\n    if (previous == null) {\r\n        return false;\r", "choices": [{"text": "}\r\nlong now = System.currentTimeMillis();\r\nlong diff = now - previous.getTime();\r\nreturn diff < 10000;\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/298", "ground_truth": "    }\r\n    return Instant.now().isBefore(previous.time().plus(BluetoothRemoteSensorManager.MAX_SENSOR_DATE_SET_AGE));\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\sensorData\\Aggregator.java"}}
{"prompt": "\n @Override\r\npublic void reset() {\r\n    if (value != null) {\r", "choices": [{"text": "\n @Override\r\npublic void reset() {\r\n    if (value!= null) {\r\nvalue.reset();\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/299", "ground_truth": "        value = new Data(value.distance, Distance.of(0), value.speed);\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\sensorData\\AggregatorCyclingDistanceSpeed.java"}}
{"prompt": "\n @Override\r\npublic void computeValue(Raw<BluetoothHandlerRunningSpeedAndCadence.Data> current) {\r\n    if (previous != null) {\r\n        Distance distance = null;\r\n        if (previous.value().totalDistance() != null && current.value().totalDistance() != null) {\r\n            distance = current.value().totalDistance().minus(previous.value().totalDistance());\r\n            if (value != null) {\r\n                distance = distance.plus(value.distance);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/301", "ground_truth": "            }\r\n        }\r\n        value = new Data(current.value().speed(), current.value().cadence(), distance);\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\sensorData\\AggregatorRunning.java"}}
{"prompt": "\n @Override\r\npublic void reset() {\r\n    if (value != null) {\r", "choices": [{"text": "\n @Override\r\npublic void reset() {\r\n    if (value!= null) {\r\nvalue.reset();\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/302", "ground_truth": "        value = new Data(value.speed, value.cadence, Distance.of(0));\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\sensorData\\AggregatorRunning.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.HeartRate\nimport android.util.Pair\npublic Pair<HeartRate, String> getHeartRate() {\r\n    if (heartRate != null) {\r\n        return new Pair<>(heartRate.getValue(), heartRate.getSensorNameOrAddress());\r", "choices": [{"text": "\n import de.dennisguse.opentracks.data.models.HeartRate\nimport android.util.Pair\npublic Pair<HeartRate, String> getHeartRate() {\r\n    if (heartRate!= null) {\r\n        return new Pair<>(heartRate.getValue(), heartRate.getSensorNameOrAddress());\r\n}\r\nreturn null;\r\n}\n"}], "metadata": {"task_id": "OpenTracks/304", "ground_truth": "    }\r\n    return null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\sensorData\\SensorDataSet.java"}}
{"prompt": " import de.dennisguse.opentracks.sensors.sensorData.Aggregator\nprivate final TrackPointCreator observer;\nprivate static final String TAG = SensorManager.class.getSimpleName();\n@Override\r\npublic void onConnect(Aggregator<?, ?> aggregator) {\r", "choices": [{"text": " import de.dennisguse.opentracks.sensors.sensorData.Aggregator\nprivate final TrackPointCreator observer;\nprivate static final String TAG = SensorManager.class.getSimpleName();\n@Override\r\npublic void onConnect(Aggregator<?,?> aggregator) {\r\nobserver = new TrackPointCreator(aggregator);\r\n}\n"}], "metadata": {"task_id": "OpenTracks/308", "ground_truth": "    sensorDataSet.add(aggregator);\r\n    observer.onChange(new SensorDataSet(sensorDataSet));\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\SensorManager.java"}}
{"prompt": "\n import de.dennisguse.opentracks.sensors.sensorData.Raw\n@Override\r\npublic void onChange(Raw<?> data) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/309", "ground_truth": "    sensorDataSet.update(data);\r\n    observer.onChange(new SensorDataSet(sensorDataSet));\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\SensorManager.java"}}
{"prompt": " import de.dennisguse.opentracks.sensors.sensorData.Aggregator\nprivate static final String TAG = SensorManager.class.getSimpleName();\nprivate final TrackPointCreator observer;\n@Override\r\npublic void onDisconnect(Aggregator<?, ?> aggregator) {\r", "choices": [{"text": " import de.dennisguse.opentracks.sensors.sensorData.Aggregator\nprivate static final String TAG = SensorManager.class.getSimpleName();\nprivate final TrackPointCreator observer;\n@Override\r\npublic void onDisconnect(Aggregator<?,?> aggregator) {\r\nif (aggregator == this.aggregator) {\r\nthis.aggregator = null;\r\n}\r\n}\n"}], "metadata": {"task_id": "OpenTracks/310", "ground_truth": "    sensorDataSet.add(aggregator);\r\n    observer.onChange(new SensorDataSet(sensorDataSet));\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\SensorManager.java"}}
{"prompt": " import de.dennisguse.opentracks.sensors.sensorData.Aggregator\nprivate static final String TAG = SensorManager.class.getSimpleName();\nprivate final TrackPointCreator observer;\n@Override\r\npublic void onRemove(Aggregator<?, ?> aggregator) {\r", "choices": [{"text": " import de.dennisguse.opentracks.sensors.sensorData.Aggregator\nprivate static final String TAG = SensorManager.class.getSimpleName();\nprivate final TrackPointCreator observer;\n@Override\r\npublic void onRemove(Aggregator<?,?> aggregator) {\r\naggregator.removeObserver(observer);\r\n}\n"}], "metadata": {"task_id": "OpenTracks/311", "ground_truth": "    sensorDataSet.remove(aggregator);\r\n    observer.onChange(new SensorDataSet(sensorDataSet));\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\SensorManager.java"}}
{"prompt": "\n import android.content.Context\npublic void stop(Context context) {\r\n    bluetoothSensorManager.stop(context);\r\n    bluetoothSensorManager = null;\r\n    altitudeSumManager.stop(context);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/312", "ground_truth": "    altitudeSumManager = null;\r\n    gpsManager.stop(context);\r\n    gpsManager = null;\r\n    sensorDataSet.clear();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\SensorManager.java"}}
{"prompt": "\n import de.dennisguse.opentracks.sensors.sensorData.SensorDataSet\nimport de.dennisguse.opentracks.data.models.TrackPoint\npublic SensorDataSet fill(TrackPoint trackPoint) {\r", "choices": [{"text": "//    SensorDataSet sensorDataSet = new SensorDataSet();\r\n//    sensorDataSet.setTrackPoint(trackPoint);\r\n//    sensorDataSet.setSensorData(new SensorData());\r\n//    return sensorDataSet;\r\n    return null;\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/313", "ground_truth": "    sensorDataSet.fillTrackPoint(trackPoint);\r\n    return new SensorDataSet(sensorDataSet);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\SensorManager.java"}}
{"prompt": "\n public void reset() {\r\n    if (bluetoothSensorManager == null || altitudeSumManager == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/314", "ground_truth": "        Log.d(TAG, \"No recording running and no reset necessary.\");\r\n        return;\r\n    }\r\n    sensorDataSet.reset();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\SensorManager.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport android.content.SharedPreferences\n@Override\r\npublic void onSharedPreferenceChanged(SharedPreferences sharedPreferences, @Nullable String key) {\r\n    if (gpsManager != null) {\r\n        gpsManager.onSharedPreferenceChanged(sharedPreferences, key);\r", "choices": [{"text": "\n import androidx.annotation.Nullable\nimport android.content.SharedPreferences\n@Override\r\npublic void onSharedPreferenceChanged(SharedPreferences sharedPreferences, @Nullable String key) {\r\n    if (gpsManager!= null) {\r\n        gpsManager.onSharedPreferenceChanged(sharedPreferences, key);\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/315", "ground_truth": "        bluetoothSensorManager.onSharedPreferenceChanged(sharedPreferences, key);\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\SensorManager.java"}}
{"prompt": "\n /**\r\n * Computes a - b for UINT with overflow (b < a).\r\n *\r\n * @return diff\r\n */\r\npublic static long diff(long a, long b, final long UINT_MAX) {\r\n    if (a < 0 || b < 0) {\r\n        throw new RuntimeException(\"a or b cannot be less than zero.\");\r\n    }\r\n    if (a > UINT_MAX || b > UINT_MAX) {\r\n        throw new RuntimeException(\"a or b are outside of the allowed range.\");\r\n    }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/316", "ground_truth": "    if (a >= b) {\r\n        return a - b;\r\n    }\r\n    return (UINT_MAX + 1 - b) + a;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\sensors\\UintUtils.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\nimport java.util.List\nimport android.media.AudioManager\n@Override\r\npublic void onStart(String utteranceId) {\r\n    int result = audioManager.requestAudioFocus(audioFocusChangeListener, AUDIO_STREAM, AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK);\r\n    if (result == AudioManager.AUDIOFOCUS_REQUEST_FAILED) {\r", "choices": [{"text": "//        Log.d(TAG, \"Audio focus request failed\");\r\n    } else {\r\n//        Log.d(TAG, \"Audio focus request succeeded\");\r\n    }\r\n}\r\n@Override\r\npublic void onStop(String utteranceId) {\r\n    audioManager.abandonAudioFocus(audioFocusChangeListener);\r\n}\r\nprivate AudioManager.OnAudioFocusChangeListener audioFocusChangeListener = new AudioManager.OnAudioFocusChangeListener() {\r\n    @Override\r\n    public void onAudioFocusChange(int focusChange) {\r\n        switch (focusChange) {\r\n            case AudioManager.AUDIOFOCUS"}], "metadata": {"task_id": "OpenTracks/318", "ground_truth": "        Log.w(TAG, \"Failed to request audio focus.\");\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\announcement\\TTSManager.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\nimport java.util.List\nimport android.media.AudioManager\n@Override\r\npublic void onDone(String utteranceId) {\r\n    int result = audioManager.abandonAudioFocus(audioFocusChangeListener);\r\n    if (result == AudioManager.AUDIOFOCUS_REQUEST_FAILED) {\r", "choices": [{"text": "//        Toast.makeText(this, \"Audio focus lost\", Toast.LENGTH_SHORT).show();\r\n    }\r\n}\n"}], "metadata": {"task_id": "OpenTracks/319", "ground_truth": "        Log.w(TAG, \"Failed to relinquish audio focus.\");\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\announcement\\TTSManager.java"}}
{"prompt": "\n public void stop() {\r\n    if (tts != null) {\r\n        tts.shutdown();\r\n        tts = null;\r\n    }\r", "choices": [{"text": "\n public void stop() {\r\n    if (tts!= null) {\r\n        tts.shutdown();\r\n        tts = null;\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/320", "ground_truth": "    if (ttsFallback != null) {\r\n        ttsFallback.release();\r\n        ttsFallback = null;\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\announcement\\TTSManager.java"}}
{"prompt": "\n import de.dennisguse.opentracks.stats.TrackStatistics\nimport de.dennisguse.opentracks.data.models.Track\nimport androidx.annotation.Nullable\npublic void start(@Nullable TrackStatistics trackStatistics) {\r\n    voiceAnnouncement = new TTSManager(context);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "OpenTracks/321", "ground_truth": "    voiceAnnouncement.start();\r\n    update(trackStatistics);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\announcement\\VoiceAnnouncementManager.java"}}
{"prompt": "\n import de.dennisguse.opentracks.stats.TrackStatistics\nimport de.dennisguse.opentracks.data.models.Track\nimport androidx.annotation.Nullable\nvoid update(@Nullable TrackStatistics trackStatistics) {\r\n    this.trackStatistics = trackStatistics;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/322", "ground_truth": "    updateNextDuration();\r\n    updateNextTaskDistance();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\announcement\\VoiceAnnouncementManager.java"}}
{"prompt": "\n import de.dennisguse.opentracks.settings.PreferencesUtils\nimport de.dennisguse.opentracks.R\nimport androidx.mediarouter.media.MediaRouter\nimport android.util.Log\nprivate boolean shouldNotAnnounce() {\r\n    if (voiceAnnouncement == null) {\r\n        Log.e(TAG, \"Cannot update when in status shutdown.\");\r\n        return true;\r\n    }\r\n    if (!PreferencesUtils.shouldVoiceAnnouncementOnDeviceSpeaker() && MediaRouter.getInstance(context).getSelectedRoute().isDeviceSpeaker()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/323", "ground_truth": "        Log.i(TAG, \"No voice announcement on device speaker.\");\r\n        return true;\r\n    }\r\n    return false;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\announcement\\VoiceAnnouncementManager.java"}}
{"prompt": "\n public void stop() {\r\n    if (voiceAnnouncement != null) {\r\n        voiceAnnouncement.stop();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/325", "ground_truth": "        voiceAnnouncement = null;\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\announcement\\VoiceAnnouncementManager.java"}}
{"prompt": "\n import java.time.Duration\npublic void setFrequency(Duration frequency) {\r", "choices": [{"text": "this.frequency = frequency;\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/326", "ground_truth": "    this.totalTimeFrequency = frequency;\r\n    update(this.trackStatistics);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\announcement\\VoiceAnnouncementManager.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Distance\npublic void setFrequency(Distance frequency) {\r", "choices": [{"text": "this.frequency = frequency;\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/327", "ground_truth": "    this.distanceFrequency = frequency;\r\n    update(this.trackStatistics);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\announcement\\VoiceAnnouncementManager.java"}}
{"prompt": "\n import androidx.core.location.LocationManagerCompat\nimport android.location.LocationManager\nimport android.location.Location\nimport android.content.Context\n@SuppressWarnings({ \"MissingPermission\" })\r\npublic void stop(Context context) {\r\n    if (isStarted()) {\r\n        LocationManagerCompat.removeUpdates(locationManager, this);\r\n    }\r\n    locationManager = null;\r\n    this.context = null;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/333", "ground_truth": "    handler = null;\r\n    gpsStatusManager.stop();\r\n    gpsStatusManager = null;\r\n    trackPointCreator = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\GPSManager.java"}}
{"prompt": "\n /**\r\n * The client that uses GpsStatus has to call this method to stop the Runnable if needed.\r\n */\r\npublic void stop() {\r\n    stopTimer();\r\n    client.onGpsStatusChanged(GpsStatusValue.GPS_NONE);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/334", "ground_truth": "    client = null;\r\n    handler = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\GpsStatusManager.java"}}
{"prompt": "\n import java.time.Duration\npublic void onMinSamplingIntervalChanged(Duration value) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/335", "ground_truth": "    //TODO Reschedule gpsStatusTimer?\r\n    signalLostThreshold = SIGNAL_LOST_THRESHOLD.plus(value);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\GpsStatusManager.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.TrackPoint\nimport androidx.annotation.NonNull\n/**\r\n * This method must be called from the client every time a new trackPoint is received.\r\n * Receive new trackPoint and calculate the new status if needed.\r\n * It look for GPS changes in lastLocation if it's not null. If it's null then look for in lastValidLocation if any.\r\n */\r\npublic void onNewTrackPoint(@NonNull final TrackPoint trackPoint) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/336", "ground_truth": "    lastTrackPoint = trackPoint;\r\n    determineGpsStatusOnTrackpoint(trackPoint);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\GpsStatusManager.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.TrackPoint\nimport java.time.Instant\nimport java.time.Duration\nvoid determineGpsStatusByTime(Instant now) {\r\n    if (lastTrackPoint == null) {\r\n        return;\r\n    }\r\n    if (signalLostThreshold.minus(Duration.between(lastTrackPoint.getTime(), now)).isNegative()) {\r\n        // Too much time without receiving signal -> signal lost.\r\n        if (gpsStatus != GpsStatusValue.GPS_SIGNAL_LOST) {\r\n            setGpsStatus(GpsStatusValue.GPS_SIGNAL_LOST);\r", "choices": [{"text": "\n import de.dennisguse.opentracks.data.models.TrackPoint\nimport java.time.Instant\nimport java.time.Duration\nvoid determineGpsStatusByTime(Instant now) {\r\n    if (lastTrackPoint == null) {\r\n        return;\r\n    }\r\n    if (signalLostThreshold.minus(Duration.between(lastTrackPoint.getTime(), now)).isNegative()) {\r\n        // Too much time without receiving signal -> signal lost.\r\n        if (gpsStatus!= GpsStatusValue.GPS_SIGNAL_LOST) {\r\n            setGpsStatus(GpsStatusValue.GPS_SIGNAL_LOST);\r\n//            log.info(\"GPS signal lost\");\r\n        }\r\n    } else {\r\n        // Signal is still received.\r\n        if (gpsStatus!= GpsStatusValue.GPS_SIGNAL_RECEIVED) {\r\n            setGpsStatus(GpsStatusValue.GPS_SIGNAL_RECEIVED);\r\n//            log.info(\"GPS signal received\");\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "OpenTracks/337", "ground_truth": "        }\r\n        return;\r\n    }\r\n    scheduleTimer();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\GpsStatusManager.java"}}
{"prompt": "\n import android.location.LocationManager\nimport android.content.Context\n/**\r\n * This method must be called from the client every time the GPS sensor is enabled.\r\n * Anyway, it checks that GPS is enabled because the client assumes that if it's on then GPS is enabled but user can disable GPS by hand.\r\n */\r\npublic void onGpsEnabled() {\r\n    if (gpsStatus == GpsStatusValue.GPS_ENABLED) {\r\n        return;\r\n    }\r\n    LocationManager locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);\r\n    if (locationManager != null && locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {\r\n        setGpsStatus(GpsStatusValue.GPS_ENABLED);\r", "choices": [{"text": "\n import android.location.LocationManager\nimport android.content.Context\n/**\r\n * This method must be called from the client every time the GPS sensor is enabled.\r\n * Anyway, it checks that GPS is enabled because the client assumes that if it's on then GPS is enabled but user can disable GPS by hand.\r\n */\r\npublic void onGpsEnabled() {\r\n    if (gpsStatus == GpsStatusValue.GPS_ENABLED) {\r\n        return;\r\n    }\r\n    LocationManager locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);\r\n    if (locationManager!= null && locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {\r\n        setGpsStatus(GpsStatusValue.GPS_ENABLED);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/338", "ground_truth": "        scheduleTimer();\r\n    } else {\r\n        onGpsDisabled();\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\GpsStatusManager.java"}}
{"prompt": "\n /**\r\n * This method must be called from service every time the GPS sensor is disabled.\r\n */\r\npublic void onGpsDisabled() {\r\n    if (gpsStatus == GpsStatusValue.GPS_DISABLED) {\r\n        return;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/339", "ground_truth": "    }\r\n    setGpsStatus(GpsStatusValue.GPS_DISABLED);\r\n    lastTrackPoint = null;\r\n    stopTimer();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\GpsStatusManager.java"}}
{"prompt": "\nprivate GpsStatusValue gpsStatus = GpsStatusValue.GPS_NONE;\nprivate Distance horizontalAccuracyThreshold;\nprivate final Context context;\n private void setGpsStatus(GpsStatusValue current) {\r\n    gpsStatus = current;\r\n    if (client != null) {\r", "choices": [{"text": "\nprivate GpsStatusValue gpsStatus = GpsStatusValue.GPS_NONE;\nprivate Distance horizontalAccuracyThreshold;\nprivate final Context context;\n private void setGpsStatus(GpsStatusValue current) {\r\n    gpsStatus = current;\r\n    if (client!= null) {\r\nclient.setGpsStatus(gpsStatus);\r\n    }\r\n}\n"}], "metadata": {"task_id": "OpenTracks/340", "ground_truth": "        client.onGpsStatusChanged(current);\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\GpsStatusManager.java"}}
{"prompt": "\nprivate GpsStatusListener client;\nprivate final Context context;\nprivate Handler handler;\n private void scheduleTimer() {\r", "choices": [{"text": "handler = new Handler();\r\nhandler.postDelayed(new Runnable() {\r\n@Override\r\npublic void run() {\r\n//do something\r\nhandler.postDelayed(this, 1000);\r\n}\r\n}, 1000);\r\n}\r\nprivate void unscheduleTimer() {\r\nhandler.removeCallbacks(null);\r\n}\r\npublic void onLocationChanged(Location location) {\r\n// TODO Auto-generated method stub\r\nif (location!= null) {\r\n// do something with the location\r\n}\r\n}"}], "metadata": {"task_id": "OpenTracks/341", "ground_truth": "    handler.removeCallbacks(gpsStatusTimer);\r\n    handler.postDelayed(gpsStatusTimer, signalLostThreshold.toMillis());\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\GpsStatusManager.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.os.Handler\nimport android.content.Context\npublic synchronized void start(@NonNull Context context, @NonNull Handler handler) {\r", "choices": [{"text": ""}], "metadata": {"task_id": "OpenTracks/343", "ground_truth": "    this.context = context;\r\n    sensorManager.start(context, handler);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\TrackPointCreator.java"}}
{"prompt": "\nprivate static final String TAG = TrackPointCreator.class.getSimpleName();\nprivate final SensorManager sensorManager;\nprivate final Callback service;\n public void stop() {\r", "choices": [{"text": "sensorManager.unregisterListener(this);\r\n}\n"}], "metadata": {"task_id": "OpenTracks/345", "ground_truth": "    sensorManager.stop(context);\r\n    this.context = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\TrackPointCreator.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.TrackPoint\npublic synchronized TrackPoint createSegmentEnd() {\r\n    TrackPoint segmentEnd = TrackPoint.createSegmentEndWithTime(createNow());\r\n    addSensorData(segmentEnd);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "OpenTracks/347", "ground_truth": "    reset();\r\n    return segmentEnd;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\TrackPointCreator.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.TrackPoint\npublic synchronized TrackPoint createIdle() {\r\n    TrackPoint idle = new TrackPoint(TrackPoint.Type.IDLE, createNow());\r\n    addSensorData(idle);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "OpenTracks/348", "ground_truth": "    reset();\r\n    return idle;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\handlers\\TrackPointCreator.java"}}
{"prompt": "\n public String getTrackCategory() {\r\n    if (track == null) {\r\n        return \"\";\r", "choices": [{"text": "}\r\nreturn track.getCategory();\r\n}\r\n public String getTrackName() {\r\n    if (track == null) {\r\n        return \"\";\r\n}\r\nreturn track.getName();\r\n}\r\n public String getTrackArtist() {\r\n    if (track == null) {\r\n        return \"\";\r\n}\r\nreturn track.getArtist();\r\n}\r\n public String getTrackAlbum() {\r\n    if (track == null) {\r\n        return \"\";\r\n}\r\nreturn track.getAlbum();\r\n}\r\n public String getTrackYear() {\r\n    if (track == null) {\r\n       "}], "metadata": {"task_id": "OpenTracks/349", "ground_truth": "    }\r\n    return track.getActivityTypeLocalized();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\RecordingData.java"}}
{"prompt": "\n @NonNull\r\npublic TrackStatistics getTrackStatistics() {\r\n    if (track == null) {\r\n        return new TrackStatistics();\r", "choices": [{"text": "}\r\nreturn track.getStatistics();\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/350", "ground_truth": "    }\r\n    return track.getTrackStatistics();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\RecordingData.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Track\nvoid endCurrentTrack() {\r\n    TrackPoint segmentEnd = trackPointCreator.createSegmentEnd();\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "OpenTracks/355", "ground_truth": "    insertTrackPoint(segmentEnd, true);\r\n    trackId = null;\r\n    trackStatisticsUpdater = null;\r\n    reset();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingManager.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\nimport androidx.annotation.VisibleForTesting\nimport android.util.Log\n@VisibleForTesting(otherwise = VisibleForTesting.PACKAGE_PRIVATE)\r\npublic void onIdle() {\r\n    Log.d(TAG, \"Becoming idle\");\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/356", "ground_truth": "    onNewTrackPoint(trackPointCreator.createIdle());\r\n    idleObserver.onIdle();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingManager.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Track\nimport android.util.Log\npublic void resumeTrack(Track.Id trackId) {\r\n    if (!trackRecordingManager.resumeExistingTrack(trackId)) {\r\n        Log.w(TAG, \"Cannot resume a non-existing track.\");\r\n        return;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/361", "ground_truth": "    }\r\n    Log.i(TAG, \"resumeTrack\");\r\n    updateRecordingStatus(RecordingStatus.record(trackId));\r\n    startRecording();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingService.java"}}
{"prompt": "\n private void startRecording() {\r\n    // Update instance variables\r\n    handler.postDelayed(updateRecordingData, RECORDING_DATA_UPDATE_INTERVAL.toMillis());\r", "choices": [{"text": "}\r\n\r\nprivate void stopRecording() {\r\n    // Update instance variables\r\n    handler.removeCallbacks(updateRecordingData);\r\n}\r\n\r\nprivate void startPlayback() {\r\n    // Update instance variables\r\n    handler.postDelayed(updatePlaybackData, PLAYBACK_DATA_UPDATE_INTERVAL.toMillis());\r\n}\r\n\r\nprivate void stopPlayback() {\r\n    // Update instance variables\r\n    handler.removeCallbacks(updatePlaybackData);\r\n}\r\n\r\nprivate void startPlayback(int position) {\r\n    // Update instance variables\r\n    handler.postDelayed(updatePlaybackData, PLAYBACK_DATA_UPDATE_INTERVAL"}], "metadata": {"task_id": "OpenTracks/362", "ground_truth": "    startSensors();\r\n    voiceAnnouncementManager.start(trackRecordingManager.getTrackStatistics());\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingService.java"}}
{"prompt": "\n public void tryStartSensors() {\r\n    if (isSensorStarted())\r\n        return;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/363", "ground_truth": "    Log.i(TAG, \"tryStartSensors\");\r\n    startSensors();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingService.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Marker\npublic Marker.Id insertMarker(String name, String category, String description, String photoUrl) {\r\n    if (!isRecording()) {\r\n        return null;\r", "choices": [{"text": "}\r\nMarker.Id markerId = new Marker.Id(mMarkerIdCounter++);\r\nMarker marker = new Marker(markerId, name, category, description, photoUrl);\r\nmMarkers.put(markerId, marker);\r\nreturn markerId;\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/367", "ground_truth": "    }\r\n    return trackRecordingManager.insertMarker(name, category, description, photoUrl);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingService.java"}}
{"prompt": "\n import android.util.Log\nprivate void updateRecordingStatus(RecordingStatus status) {\r\n    Log.i(TAG, \"new status \" + recordingStatus + \" -> \" + status);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/369", "ground_truth": "    recordingStatus = status;\r\n    recordingStatusObservable.postValue(recordingStatus);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingService.java"}}
{"prompt": "\n import android.content.ComponentName\n@Override\r\npublic void onServiceDisconnected(ComponentName className) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/372", "ground_truth": "    Log.i(TAG, \"Disconnected from the service.\");\r\n    setTrackRecordingService(null);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingServiceConnection.java"}}
{"prompt": "\n import android.content.Context\npublic void unbindAndStop(Context context) {\r", "choices": [{"text": "// 1. \u89e3\u9664\u7ed1\u5b9a\r\nunbindService(mConnection);\r\n// 2. \u505c\u6b62\u670d\u52a1\r\ncontext.stopService(new Intent(context, MyService.class));\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/375", "ground_truth": "    unbind(context);\r\n    stopService(context);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingServiceConnection.java"}}
{"prompt": "\n private void setTrackRecordingService(TrackRecordingService value) {\r\n    trackRecordingService = value;\r\n    if (value != null) {\r", "choices": [{"text": "\n private void setTrackRecordingService(TrackRecordingService value) {\r\n    trackRecordingService = value;\r\n    if (value!= null) {\r\n//      value.setTrackRecordingService(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return the trackRecordingService\r\n   */\r\n  public TrackRecordingService getTrackRecordingService() {\r\n    return trackRecordingService;\r\n  }\r\n\r\n  /**\r\n   * @param value the trackRecordingService to set\r\n   */\r\n  public void setTrackRecordingService(TrackRecordingService value) {\r\n    TrackRecordingService oldValue = trackRecordingService;\r\n    trackRecordingService = value;\r\n    firePropertyChange(\"trackRecordingService\", oldValue, value);\r\n  }\r\n\r\n  /**\r\n   * @return the trackRecordingService\r\n   */\r\n  public TrackRecordingService getTrackRecording"}], "metadata": {"task_id": "OpenTracks/376", "ground_truth": "        callback.onConnected(value, this);\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingServiceConnection.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.util.Log\nimport android.content.Context\npublic void stopRecording(@NonNull Context context) {\r\n    if (trackRecordingService == null) {\r\n        Log.e(TAG, \"TrackRecordingService not connected.\");\r", "choices": [{"text": "} else {\r\n        trackRecordingService.stopRecording();\r\n    }\r\n}\n"}], "metadata": {"task_id": "OpenTracks/377", "ground_truth": "    } else {\r\n        trackRecordingService.endCurrentTrack();\r\n    }\r\n    unbindAndStop(context);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingServiceConnection.java"}}
{"prompt": "\n void updateContent(String content) {\r", "choices": [{"text": "-    this.content = content;\r\n+    this.content = content; \r\n+    this.content = content; \r\n+    this.content = content; \r\n+    this.content = content; \r\n+    this.content = content; \r\n+    this.content = content; \r\n+    this.content = content; \r\n+    this.content = content; \r\n+    this.content = content; \r\n+    this.content = content; \r\n+    this.content = content; \r\n+    this.content = content"}], "metadata": {"task_id": "OpenTracks/379", "ground_truth": "    notificationBuilder.setSubText(content);\r\n    updateNotification();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingServiceNotificationManager.java"}}
{"prompt": "\n import de.dennisguse.opentracks.settings.PreferencesUtils\nimport de.dennisguse.opentracks.R\nimport android.content.SharedPreferences\n@Override\r\npublic void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n    if (PreferencesUtils.isKey(R.string.stats_units_key, key)) {\r", "choices": [{"text": "//        updateStatsUnits();\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/380", "ground_truth": "        setUnitSystem(PreferencesUtils.getUnitSystem());\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\services\\TrackRecordingServiceNotificationManager.java"}}
{"prompt": " import de.dennisguse.opentracks.R\nprivate AutoCompleteTextView textView;\nprivate ImageView iconView;\n@Override\r\npublic int getDialogLayoutResource() {\r", "choices": [{"text": "return R.layout.dialog_search;\r\n}\r\n@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\nsuper.onCreate(savedInstanceState);\r\nsetContentView(getDialogLayoutResource());\r\ntextView = (AutoCompleteTextView) findViewById(R.id.search_text);\r\niconView = (ImageView) findViewById(R.id.search_icon);\r\n}\r\n@Override\r\npublic void onActivityCreated(Bundle savedInstanceState) {\r\nsuper.onActivityCreated(savedInstanceState);\r\ngetDialog().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT"}], "metadata": {"task_id": "OpenTracks/381", "ground_truth": "    // TODO PreferenceActivityTypeBinding\r\n    return R.layout.preference_activity_type;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\ActivityTypePreference.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.ActivityType\npublic void updateUI(ActivityType activityType) {\r\n    updateIcon(activityType);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/385", "ground_truth": "    textView.setText(getActivity().getString(activityType.getLocalizedStringId()));\r\n    textView.clearFocus();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\ActivityTypePreference.java"}}
{"prompt": "\n /**\r\n * @return Data changed?\r\n */\r\npublic boolean add(String address, String name) {\r\n    Device device = new Device(address, name);\r\n    if (!devices.contains(device)) {\r\n        devices.add(device);\r\n        return true;\r\n    } else {\r\n        for (Device currentDevice : devices) {\r\n            if (currentDevice.address.equals(address)) {\r\n                currentDevice.name = name;\r\n                return true;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/388", "ground_truth": "            }\r\n        }\r\n    }\r\n    return false;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\bluetooth\\BluetoothLeAdapter.java"}}
{"prompt": "\n public void addAll(List<BluetoothDevice> bluetoothDevices) {\r\n    boolean dataSetChanged = bluetoothDevices.stream().anyMatch(bluetoothDevice -> add(bluetoothDevice.getAddress(), bluetoothDevice.getName()));\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/389", "ground_truth": "    if (dataSetChanged)\r\n        notifyDataSetChanged();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\bluetooth\\BluetoothLeAdapter.java"}}
{"prompt": "\n import android.text.TextUtils\nprivate void setValue(String value) {\r\n    final boolean changed = !TextUtils.equals(this.value, value);\r\n    if (changed || !valueSet) {\r\n        this.value = value;\r\n        valueSet = true;\r\n        persistString(value);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/392", "ground_truth": "        if (changed) {\r\n            notifyChanged();\r\n        }\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\bluetooth\\BluetoothLeSensorPreference.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\nimport android.bluetooth.le.ScanResult\n@Override\r\npublic void onScanResult(int callbackType, ScanResult result) {\r", "choices": [{"text": "super.onScanResult(callbackType, result);\r\nif (result.getDevice().getName()!= null) {\r\nif (result.getDevice().getName().equals(\"MyDevice\")) {\r\n// do something\r\n}\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/393", "ground_truth": "    Log.d(TAG, \"Found device \" + result.getDevice().getName() + \" \" + result);\r\n    onBatchScanResults(List.of(result));\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\bluetooth\\BluetoothLeSensorPreference.java"}}
{"prompt": "\n import android.util.Log\n@Override\r\npublic void onScanFailed(int errorCode) {\r\n    super.onScanFailed(errorCode);\r\n    Log.e(TAG, \"Bluetooth scan failed with errorCode \" + errorCode);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/394", "ground_truth": "    Toast.makeText(getContext(), R.string.sensor_could_not_scan, Toast.LENGTH_LONG).show();\r\n    dismiss();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\bluetooth\\BluetoothLeSensorPreference.java"}}
{"prompt": "\n import java.util.List\nimport androidx.preference.PreferenceDialogFragmentCompat\nimport androidx.appcompat.app.AlertDialog\nimport android.content.DialogInterface\n//Behave like ListPreferenceDialogFragmentCompat, but uses a custom listAdapter.\r\n@Override\r\nprotected void onPrepareDialogBuilder(AlertDialog.Builder builder) {\r\n    super.onPrepareDialogBuilder(builder);\r\n    builder.setSingleChoiceItems(listAdapter, selectedEntryIndex, (dialog, which) -> {\r\n        selectedEntryIndex = which;\r\n        BluetoothLeSensorPreferenceDialog.this.onClick(dialog, DialogInterface.BUTTON_POSITIVE);\r", "choices": [{"text": "});\r\n}\n"}], "metadata": {"task_id": "OpenTracks/396", "ground_truth": "        dialog.dismiss();\r\n    });\r\n    builder.setIcon(bluetoothIcon);\r\n    builder.setPositiveButton(null, null);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\bluetooth\\BluetoothLeSensorPreference.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\n@Override\r\npublic void onDialogClosed(boolean positiveResult) {\r\n    if (scanner != null) {\r\n        scanner.stopScan(scanCallback);\r\n    }\r\n    if (positiveResult && selectedEntryIndex >= 0) {\r\n        String value = listAdapter.get(selectedEntryIndex).getAddress();\r\n        BluetoothLeSensorPreference preference = (BluetoothLeSensorPreference) getPreference();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/397", "ground_truth": "        if (preference.callChangeListener(value)) {\r\n            preference.setValue(value);\r\n        }\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\bluetooth\\BluetoothLeSensorPreference.java"}}
{"prompt": "\n @Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r", "choices": [{"text": "}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/398", "ground_truth": "    bluetoothIcon = null;\r\n    scanner = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\bluetooth\\BluetoothLeSensorPreference.java"}}
{"prompt": "\n @Override\r\npublic void onResume() {\r\n    super.onResume();\r", "choices": [{"text": "}\r\n\r\n@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n}\r\n\r\n@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/400", "ground_truth": "    PreferencesUtils.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n    updateUnits();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\DefaultsSettingsFragment.java"}}
{"prompt": "\n @Override\r\npublic void onPause() {\r", "choices": [{"text": "super.onPause();\r\nif (mAdView!= null) {\r\nmAdView.pause();\r\n}\r\n}\r\n\r\n@Override\r\npublic void onResume() {\r\nsuper.onResume();\r\nif (mAdView!= null) {\r\nmAdView.resume();\r\n}\r\n}\r\n\r\n@Override\r\npublic void onDestroy() {\r\nsuper.onDestroy();\r\nif (mAdView!= null) {\r\nmAdView.destroy();\r\n}\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/401", "ground_truth": "    super.onPause();\r\n    PreferencesUtils.unregisterOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\DefaultsSettingsFragment.java"}}
{"prompt": "\n\n @Override\r\npublic void onChooseActivityTypeDone(ActivityType activityType) {\r\n    if (activityPreferenceDialog != null) {\r", "choices": [{"text": "\n\n @Override\r\npublic void onChooseActivityTypeDone(ActivityType activityType) {\r\n    if (activityPreferenceDialog!= null) {\r\nactivityPreferenceDialog.dismiss();\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/402", "ground_truth": "        activityPreferenceDialog.updateUI(activityType);\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\DefaultsSettingsFragment.java"}}
{"prompt": "\n @Override\r\npublic void onStart() {\r", "choices": [{"text": "super.onStart();\r\nmGoogleApiClient.connect();\r\n}\r\n\r\n@Override\r\npublic void onStop() {\r\nsuper.onStop();\r\nif (mGoogleApiClient.isConnected()) {\r\nmGoogleApiClient.disconnect();\r\n}\r\n}\r\n\r\n@Override\r\npublic void onConnected(Bundle connectionHint) {\r\nmLocationRequest = LocationRequest.create();\r\nmLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);\r\nmLocationRequest.setInterval(1000);\r\nmLocationRequest.set"}], "metadata": {"task_id": "OpenTracks/403", "ground_truth": "    super.onStart();\r\n    ((SettingsActivity) getActivity()).getSupportActionBar().setTitle(R.string.settings_gps_title);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\GpsSettingsFragment.java"}}
{"prompt": "\n import androidx.preference.Preference\nimport androidx.annotation.NonNull\n/**\r\n * Triggers a redraw of the summary of a preference if it was set programmatically.\r\n * Need to trigger androidx.preference.preferences.notifyChanged() to trigger a redraw, but method is protected.\r\n * This workaround also works when this preference has not changed, but it's entries (see R.string.stats_rate_key).\r\n * TODO\r\n */\r\npublic static void invalidatePreference(@NonNull Preference preference) {\r\n    boolean isEnabled = preference.isEnabled();\r", "choices": [{"text": "//    preference.setEnabled(false);\r\n    preference.setEnabled(isEnabled);\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/404", "ground_truth": "    preference.setVisible(!isEnabled);\r\n    preference.setVisible(isEnabled);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\HackUtils.java"}}
{"prompt": "\n import de.dennisguse.opentracks.io.file.TrackFileFormat\nimport de.dennisguse.opentracks.R\nimport androidx.preference.Preference\nimport android.os.Bundle\n@Override\r\npublic void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\r\n    addPreferencesFromResource(R.xml.settings_import_export);\r\n    setExportTrackFileFormatOptions();\r", "choices": [{"text": "}\r\nprivate void setExportTrackFileFormatOptions() {\r\n    final Preference exportTrackFileFormatPreference = findPreference(getString(R.string.settings_export_track_file_format_key));\r\n    exportTrackFileFormatPreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {\r\n        @Override\r\n        public boolean onPreferenceChange(Preference preference, Object newValue) {\r\n            final String newFormat = (String) newValue;\r\n            final TrackFileFormat newFormatEnum = TrackFileFormat.valueOf(newFormat);\r\n            final TrackFileFormat oldFormatEnum = TrackFileFormat.valueOf(exportTrackFileFormat"}], "metadata": {"task_id": "OpenTracks/405", "ground_truth": "    setExportDirectorySummary();\r\n    setFilenameTemplate();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\ImportExportSettingsFragment.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\nvoid check() {\r\n    int lastVersion = PreferencesUtils.getInt(R.string.prefs_last_version_key, 0);\r\n    if (version > lastVersion) {\r", "choices": [{"text": "//        PreferencesUtils.putInt(R.string.prefs_last_version_key, version);\r\n//        PreferencesUtils.putInt(R.string.prefs_last_version_key, version);\r\n//        PreferencesUtils.putInt(R.string.prefs_last_version_key, version);\r\n//        PreferencesUtils.putInt(R.string.prefs_last_version_key, version);\r\n//        PreferencesUtils.putInt(R.string.prefs_last_version_key, version);\r\n//        PreferencesUtils.putInt"}], "metadata": {"task_id": "OpenTracks/409", "ground_truth": "        onUpgrade();\r\n    } else if (version < lastVersion) {\r\n        onDowngrade();\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesOpenHelper.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\nprivate void upgradeFrom0to1() {\r\n    String preferenceValue = PreferencesUtils.getString(R.string.stats_custom_layouts_key, \"\");\r\n    if (preferenceValue.isEmpty()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/411", "ground_truth": "        PreferencesUtils.setString(R.string.stats_custom_layouts_key, PreferencesUtils.buildDefaultLayout());\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesOpenHelper.java"}}
{"prompt": "\n public static boolean isKey(int[] keyIds, String key) {\r\n    for (int keyId : keyIds) {\r\n        if (isKey(keyId, key)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/414", "ground_truth": "            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java"}}
{"prompt": "\n static int getInt(int keyId, int defaultValue) {\r\n    try {\r\n        return sharedPreferences.getInt(getKey(keyId), defaultValue);\r\n    } catch (ClassCastException e) {\r\n        //Ignore\r\n    }\r\n    //NOTE: We assume that the data was stored as String due to use of ListPreference.\r\n    try {\r\n        String stringValue = sharedPreferences.getString(getKey(keyId), null);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/415", "ground_truth": "        return Integer.parseInt(stringValue);\r\n    } catch (NumberFormatException e) {\r\n        return defaultValue;\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java"}}
{"prompt": "\n private static float getFloat(int keyId, float defaultValue) {\r\n    try {\r\n        return sharedPreferences.getFloat(getKey(keyId), defaultValue);\r\n    } catch (ClassCastException e) {\r\n        //Ignore\r\n    }\r\n    //NOTE: We assume that the data was stored as String due to use of ListPreference.\r\n    try {\r\n        String stringValue = sharedPreferences.getString(getKey(keyId), null);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/416", "ground_truth": "        return Float.parseFloat(stringValue);\r\n    } catch (NumberFormatException e) {\r\n        return defaultValue;\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java"}}
{"prompt": "\n @VisibleForTesting\r\npublic static void setString(int keyId, String value) {\r\n    Editor editor = sharedPreferences.edit();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/417", "ground_truth": "    editor.putString(getKey(keyId), value);\r\n    editor.apply();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java"}}
{"prompt": "\n @VisibleForTesting\r\npublic static void setBoolean(int keyId, Boolean value) {\r\n    Editor editor = sharedPreferences.edit();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/418", "ground_truth": "    editor.putBoolean(getKey(keyId), value);\r\n    editor.apply();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java"}}
{"prompt": "\n static void setInt(int keyId, int value) {\r\n    Editor editor = sharedPreferences.edit();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/419", "ground_truth": "    editor.putInt(getKey(keyId), value);\r\n    editor.apply();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java"}}
{"prompt": "\n //TODO Check if actually needed or can be superseeded by a flexible default in getUnit()\r\npublic static void applyDefaultUnit() {\r\n    if (getString(R.string.stats_units_key, \"\").equals(\"\")) {\r\n        if (!Locale.US.equals(Locale.getDefault())) {\r\n            setUnit(UnitSystem.METRIC);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/421", "ground_truth": "        } else {\r\n            setUnit(UnitSystem.IMPERIAL_FEET);\r\n        }\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java"}}
{"prompt": "\n public static Duration getVoiceAnnouncementFrequency() {\r\n    final int DEFAULT = Integer.parseInt(resources.getString(R.string.voice_announcement_frequency_default));\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/431", "ground_truth": "    int value = getInt(R.string.voice_announcement_frequency_key, DEFAULT);\r\n    return Duration.ofSeconds(value);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java"}}
{"prompt": "\n public static Duration getIdleDurationTimeout() {\r\n    final int DEFAULT = Integer.parseInt(resources.getString(R.string.idle_duration_default));\r", "choices": [{"text": "-   final int MAX = Integer.parseInt(resources.getString(R.string.idle_duration_max));\r\n-   final int MIN = Integer.parseInt(resources.getString(R.string.idle_duration_min));\r\n+   final int MAX = Integer.parseInt(resources.getString(R.string.idle_duration_max_timeout));\r\n+   final int MIN = Integer.parseInt(resources.getString(R.string.idle_duration_min_timeout));\r\n    final int DEFAULT_TIMEOUT = Integer.parseInt(resources.getString(R.string.idle_"}], "metadata": {"task_id": "OpenTracks/437", "ground_truth": "    int value = getInt(R.string.idle_duration_key, DEFAULT);\r\n    return Duration.ofSeconds(value);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java"}}
{"prompt": "\n public static TrackFilenameGenerator getTrackFileformatGenerator() {\r\n    String DEFAULT = resources.getString(R.string.export_filename_format_default);\r\n    TrackFilenameGenerator generator = new TrackFilenameGenerator(getString(R.string.export_filename_format_key, DEFAULT));\r\n    if (generator.isValid()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/439", "ground_truth": "        return generator;\r\n    } else {\r\n        return new TrackFilenameGenerator(DEFAULT);\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java"}}
{"prompt": "\n /**\r\n * @return {@link androidx.appcompat.app.AppCompatDelegate}.MODE_*\r\n */\r\npublic static int getDefaultNightMode() {\r\n    final String defaultValue = getKey(R.string.night_mode_default);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/442", "ground_truth": "    final String value = getString(R.string.night_mode_key, defaultValue);\r\n    return Integer.parseInt(value);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\PreferencesUtils.java"}}
{"prompt": "\n @Override\r\npublic void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\r", "choices": [{"text": "setPreferencesFromResource(R.xml.preferences, rootKey);\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/453", "ground_truth": "    addPreferencesFromResource(R.xml.settings_sensors);\r\n    setWheelCircumferenceInputFilter();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SensorsSettingsFragment.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.os.Bundle\n@Override\r\nprotected void onSaveInstanceState(@NonNull Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r\n    if (fragment != null && fragment.isAdded()) {\r", "choices": [{"text": "\n import androidx.annotation.NonNull\nimport android.os.Bundle\n@Override\r\nprotected void onSaveInstanceState(@NonNull Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r\n    if (fragment!= null && fragment.isAdded()) {\r\nfragment.onSaveInstanceState(outState);\r\n    }\r\n}\r\n@Override\r\nprotected void onRestoreInstanceState(@NonNull Bundle savedInstanceState) {\r\n    super.onRestoreInstanceState(savedInstanceState);\r\n    if (fragment!= null && fragment.isAdded()) {\r\nfragment.onRestoreInstanceState(savedInstanceState);\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/456", "ground_truth": "        getSupportFragmentManager().putFragment(outState, FRAGMENT_KEY, fragment);\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsActivity.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\nimport android.view.View\n@Override\r\nprotected View getRootView() {\r", "choices": [{"text": "return getLayoutInflater().inflate(R.layout.activity_main, null);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/457", "ground_truth": "    viewBinding = SettingsBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsActivity.java"}}
{"prompt": "\n @Override\r\npublic int getSpanSize(int position) {\r\n    if (adapterFieldsVisible.isItemWide(position)) {\r\n        return numColumns;\r", "choices": [{"text": "} else {\r\n        return 1;\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/460", "ground_truth": "    }\r\n    return 1;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsCustomLayoutEditActivity.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.annotation.NonNull\nimport android.view.View\n@Override\r\npublic boolean onMove(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder, @NonNull RecyclerView.ViewHolder target) {\r\n    int fromPosition = viewHolder.getAdapterPosition();\r\n    int toPosition = target.getAdapterPosition();\r", "choices": [{"text": "//    if (fromPosition < toPosition) {\r\n//        for (int i = fromPosition; i < toPosition; i++) {\r\n//            Collections.swap(mItems, i, i + 1);\r\n//        }\r\n//    } else {\r\n//        for (int i = fromPosition; i > toPosition; i--) {\r\n//            Collections.swap(mItems, i, i - 1);\r\n//        }\r\n//    }\r\n//    notifyItemMoved(fromPosition, toPosition);\r\n    return true;"}], "metadata": {"task_id": "OpenTracks/461", "ground_truth": "    recordingLayoutFieldsVisible = adapterFieldsVisible.move(fromPosition, toPosition);\r\n    return true;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsCustomLayoutEditActivity.java"}}
{"prompt": "\n @Override\r\nprotected void onDestroy() {\r", "choices": [{"text": "super.onDestroy();\r\nif (mLocationManager!= null) {\r\nmLocationManager.removeUpdates(this);\r\n}\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/463", "ground_truth": "    super.onDestroy();\r\n    recordingLayoutFieldsVisible = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsCustomLayoutEditActivity.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\nimport android.view.View\n@Override\r\nprotected View getRootView() {\r", "choices": [{"text": "return getLayoutInflater().inflate(R.layout.activity_main, null);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/464", "ground_truth": "    viewBinding = ActivitySettingsCustomLayoutBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsCustomLayoutEditActivity.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\n@Override\r\nprotected void onResume() {\r", "choices": [{"text": "super.onResume();\r\n// Register the listener with the Location Manager to receive location updates\r\nmLocationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, this);\r\n}\r\n@Override\r\nprotected void onPause() {\r\nsuper.onPause();\r\n// Unregister the listener with the Location Manager to stop receiving location updates\r\nmLocationManager.removeUpdates(this);\r\n}\r\n@Override\r\npublic void onLocationChanged(Location location) {\r\n// Called when a new location is found by the network location provider"}], "metadata": {"task_id": "OpenTracks/466", "ground_truth": "    super.onResume();\r\n    adapter.reloadLayouts();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsCustomLayoutListActivity.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\nimport android.view.View\n@Override\r\nprotected View getRootView() {\r\n    PreferencesUtils.getCustomLayout();\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "OpenTracks/467", "ground_truth": "    viewBinding = ActivitySettingsCustomLayoutListBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsCustomLayoutListActivity.java"}}
{"prompt": "\n import android.view.Menu\n@Override\r\npublic boolean onCreateOptionsMenu(Menu menu) {\r", "choices": [{"text": "// Inflate the menu; this adds items to the action bar if it is present.\r\ngetMenuInflater().inflate(R.menu.main, menu);\r\nreturn true;\r\n}\r\n}\r\n<file_sep>/README.md\n# Android-App-Development\nAndroid App Development\n<|endoftext|>"}], "metadata": {"task_id": "OpenTracks/468", "ground_truth": "    getMenuInflater().inflate(R.menu.custom_layout_edit, menu);\r\n    return super.onCreateOptionsMenu(menu);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsCustomLayoutListActivity.java"}}
{"prompt": "\n import de.dennisguse.opentracks.ui.customRecordingLayout.RecordingLayout\nimport de.dennisguse.opentracks.R\nimport androidx.annotation.NonNull\nimport android.content.Intent\n@Override\r\npublic void onSettingsCustomLayoutProfileClicked(@NonNull RecordingLayout recordingLayout) {\r\n    Intent intent = new Intent(this, SettingsCustomLayoutEditActivity.class);\r", "choices": [{"text": "intent.putExtra(SettingsCustomLayoutEditActivity.EXTRA_PROFILE_ID, recordingLayout.getProfileId());\r\nstartActivity(intent);\r\n}\r\n<file_sep>/app/src/main/java/de/dennisguse/opentracks/services/LocationService.java\n// isComment\npackage de.dennisguse.opentracks.services;\n\nimport android.app.Notification;\nimport android.app.NotificationChannel;\nimport android.app.NotificationManager;\nimport android.app.PendingIntent;\nimport android.app.Service;\nimport android."}], "metadata": {"task_id": "OpenTracks/470", "ground_truth": "    intent.putExtra(SettingsCustomLayoutEditActivity.EXTRA_LAYOUT, recordingLayout);\r\n    startActivity(intent);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\SettingsCustomLayoutListActivity.java"}}
{"prompt": "\n\n @Override\r\npublic void onStart() {\r", "choices": [{"text": "super.onStart();\r\nmGoogleApiClient.connect();\r\n}\r\n\r\n@Override\r\npublic void onStop() {\r\nsuper.onStop();\r\nif (mGoogleApiClient.isConnected()) {\r\nmGoogleApiClient.disconnect();\r\n}\r\n}\r\n\r\n@Override\r\npublic void onConnected(Bundle connectionHint) {\r\nmLocationRequest = LocationRequest.create();\r\nmLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);\r\nmLocationRequest.setInterval(1000);\r\nmLocationRequest.set"}], "metadata": {"task_id": "OpenTracks/472", "ground_truth": "    super.onStart();\r\n    ((SettingsActivity) getActivity()).getSupportActionBar().setTitle(R.string.settings_ui_title);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\UserInterfaceSettingsFragment.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\n@Override\r\npublic void onResume() {\r", "choices": [{"text": "super.onResume();\r\n// Get the location manager\r\nLocationManager locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);\r\n// Define a listener that responds to location updates\r\nLocationListener locationListener = new LocationListener() {\r\npublic void onLocationChanged(Location location) {\r\n// Called when a new location is found by the network location provider.\r\nmakeUseOfNewLocation(location);\r\n}\r\npublic void onStatusChanged(String provider, int status, Bundle extras) {}\r\npublic void onProviderEnabled(String provider)"}], "metadata": {"task_id": "OpenTracks/473", "ground_truth": "    super.onResume();\r\n    PreferencesUtils.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\UserInterfaceSettingsFragment.java"}}
{"prompt": "\n @Override\r\npublic void onPause() {\r", "choices": [{"text": "super.onPause();\r\nif (mAdView!= null) {\r\nmAdView.pause();\r\n}\r\n}\r\n\r\n@Override\r\npublic void onResume() {\r\nsuper.onResume();\r\nif (mAdView!= null) {\r\nmAdView.resume();\r\n}\r\n}\r\n\r\n@Override\r\npublic void onDestroy() {\r\nsuper.onDestroy();\r\nif (mAdView!= null) {\r\nmAdView.destroy();\r\n}\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/474", "ground_truth": "    super.onPause();\r\n    PreferencesUtils.unregisterOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\settings\\UserInterfaceSettingsFragment.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Distance\nimport androidx.annotation.VisibleForTesting\n/**\r\n * Writes distance.\r\n *\r\n * @param distance  distance in meters\r\n * @param builder   StringBuilder to append distance\r\n * @param resId     resource id of distance string\r\n * @param lineBreak line break string\r\n */\r\n@VisibleForTesting\r\nvoid writeDistance(Distance distance, StringBuilder builder, int resId, String lineBreak) {\r\n    double distanceInKm = distance.toKM();\r\n    double distanceInMi = distance.toMI();\r", "choices": [{"text": "//    double distanceInMi = distance.toMI();\r\n    if (distanceInKm > 1000) {\r\n        builder.append(String.format(Locale.getDefault(), resId, distanceInKm));\r\n    } else if (distanceInMi > 1000) {\r\n        builder.append(String.format(Locale.getDefault(), resId, distanceInMi));\r\n    } else {\r\n        builder.append(String.format(Locale.getDefault(), resId, distance.toM()));\r\n    }\r\n    builder.append(lineBreak);\r\n}\r\n\r\n/**\r\n * Writes time"}], "metadata": {"task_id": "OpenTracks/477", "ground_truth": "    builder.append(context.getString(resId, distanceInKm, distanceInMi));\r\n    builder.append(lineBreak);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\share\\DescriptionGenerator.java"}}
{"prompt": "\n import java.time.Duration\nimport androidx.annotation.VisibleForTesting\n/**\r\n * Writes time.\r\n *\r\n * @param time      time in milliseconds.\r\n * @param builder   StringBuilder to append time\r\n * @param resId     resource id of time string\r\n * @param lineBreak line break string\r\n */\r\n@VisibleForTesting\r\nvoid writeTime(Duration time, StringBuilder builder, int resId, String lineBreak) {\r", "choices": [{"text": "//    if (time.isNegative()) {\r\n//        builder.append(lineBreak);\r\n//        builder.append(getString(resId, time.toMillis()));\r\n//    } else {\r\n//        builder.append(getString(resId, time.toMillis()));\r\n//    }\r\n}\r\n\r\n/**\r\n * Writes time.\r\n *\r\n * @param time      time in milliseconds.\r\n * @param builder   StringBuilder to append time\r\n * @param resId     resource id of time string\r\n * @param lineBreak line break string\r\n */\r\n"}], "metadata": {"task_id": "OpenTracks/478", "ground_truth": "    builder.append(context.getString(resId, StringUtils.formatElapsedTime(time)));\r\n    builder.append(lineBreak);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\share\\DescriptionGenerator.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Speed\nimport androidx.annotation.VisibleForTesting\n/**\r\n * Writes speed.\r\n *\r\n * @param speed     speed in meters per second\r\n * @param builder   StringBuilder to append speed\r\n * @param resId     resource id of speed string\r\n * @param lineBreak line break string\r\n */\r\n@VisibleForTesting\r\nvoid writeSpeed(Speed speed, StringBuilder builder, int resId, String lineBreak) {\r", "choices": [{"text": "builder.append(speed.toString(resId));\r\nbuilder.append(lineBreak);\r\n}\r\n/**\r\n * Writes speed.\r\n *\r\n * @param speed     speed in meters per second\r\n * @param builder   StringBuilder to append speed\r\n * @param resId     resource id of speed string\r\n * @param lineBreak line break string\r\n */\r\n@VisibleForTesting\r\nvoid writeSpeed(Speed speed, StringBuilder builder, int resId, String lineBreak, boolean isMetric) {\r\nbuilder.append(speed.toString(resId, isMetric));\r\nbuilder."}], "metadata": {"task_id": "OpenTracks/479", "ground_truth": "    builder.append(context.getString(resId, speed.toKMH(), speed.toMPH()));\r\n    builder.append(lineBreak);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\share\\DescriptionGenerator.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Distance\nimport androidx.annotation.VisibleForTesting\n/**\r\n * @param altitude_m altitude_m in meters\r\n * @param builder    StringBuilder to append\r\n * @param resId      resource id of altitude string\r\n * @param lineBreak  line break string\r\n */\r\n@VisibleForTesting\r\nvoid writeAltitude(double altitude_m, StringBuilder builder, int resId, String lineBreak) {\r\n    long altitudeInM = Math.round(altitude_m);\r\n    long altitudeInFt = Math.round(Distance.of(altitude_m).toFT());\r", "choices": [{"text": "//    builder.append(lineBreak);\r\n    builder.append(resId);\r\n    builder.append(lineBreak);\r\n    builder.append(altitudeInM);\r\n    builder.append(\" m\");\r\n    builder.append(lineBreak);\r\n    builder.append(altitudeInFt);\r\n    builder.append(\" ft\");\r\n}\r\n\r\n/**\r\n * @param speed_m_s speed_m_s in meters per second\r\n * @param builder   StringBuilder to append\r\n * @param resId     resource id of speed string\r\n * @param lineBreak line break string\r\n */\r\n@VisibleForTesting\r"}], "metadata": {"task_id": "OpenTracks/480", "ground_truth": "    builder.append(context.getString(resId, altitudeInM, altitudeInFt));\r\n    builder.append(lineBreak);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\share\\DescriptionGenerator.java"}}
{"prompt": "\n import android.view.View\n@Override\r\nprotected View getRootView() {\r", "choices": [{"text": "return inflater.inflate(R.layout.activity_main, null);\r\n}\r\n@Override\r\nprotected void initView() {\r\n}\r\n@Override\r\nprotected void initData() {\r\n}\r\n@Override\r\nprotected void initListener() {\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/482", "ground_truth": "    viewBinding = ActivityShowErrorBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ShowErrorActivity.java"}}
{"prompt": "\n import java.nio.charset.StandardCharsets\nimport java.net.URLEncoder\nimport java.io.UnsupportedEncodingException\nimport android.view.View\nimport android.net.Uri\nprivate void reportBug() {\r\n    Uri uriUrl;\r\n    try {\r\n        uriUrl = Uri.parse(String.format(getString(R.string.report_issue_link), URLEncoder.encode(viewBinding.textViewError.getText().toString(), StandardCharsets.UTF_8.toString())));\r\n    } catch (final UnsupportedEncodingException ignored) {\r\n        // can't happen as UTF-8 is always available\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/483", "ground_truth": "        return;\r\n    }\r\n    Intent intent = new Intent(Intent.ACTION_VIEW, uriUrl);\r\n    startActivity(intent);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ShowErrorActivity.java"}}
{"prompt": "\n import android.view.Menu\n@Override\r\npublic boolean onCreateOptionsMenu(final Menu menu) {\r", "choices": [{"text": "menu.add(0, 1, 0, \"Add\");\r\nmenu.add(0, 2, 0, \"Delete\");\r\nmenu.add(0, 3, 0, \"Edit\");\r\nmenu.add(0, 4, 0, \"View\");\r\nreturn true;\r\n}\r\n@Override\r\npublic boolean onOptionsItemSelected(final MenuItem item) {\r\nswitch (item.getItemId()) {\r\ncase 1:\r\nIntent intent = new Intent(this, Add.class);\r\nstartActivity(intent);"}], "metadata": {"task_id": "OpenTracks/484", "ground_truth": "    getMenuInflater().inflate(R.menu.show_error, menu);\r\n    return super.onCreateOptionsMenu(menu);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ShowErrorActivity.java"}}
{"prompt": "\n import android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onOptionsItemSelected(final MenuItem item) {\r\n    if (item.getItemId() == R.id.error_share) {\r\n        onClickedShare();\r\n        return true;\r\n    } else if (item.getItemId() == R.id.error_report) {\r", "choices": [{"text": "//        onClickedReport();\r\n        return true;\r\n    } else if (item.getItemId() == R.id.error_close) {\r\n        onClickedClose();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/485", "ground_truth": "        reportBug();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ShowErrorActivity.java"}}
{"prompt": "\n /**\r\n * Resets this object to it's initial state where the min and max are unknown.\r\n */\r\npublic void reset() {\r", "choices": [{"text": "min = null;\r\nmax = null;\r\n}\r\n/**\r\n * Returns the minimum value of the range.\r\n * @return the minimum value of the range.\r\n */\r\npublic Number getMin() {\r\nreturn min;\r\n}\r\n/**\r\n * Returns the maximum value of the range.\r\n * @return the maximum value of the range.\r\n */\r\npublic Number getMax() {\r\nreturn max;\r\n}\r\n/**\r\n * Returns the range of the values.\r\n * @return the range of the values.\r\n */\r\npublic Number getRange()"}], "metadata": {"task_id": "OpenTracks/488", "ground_truth": "    min = Double.POSITIVE_INFINITY;\r\n    max = Double.NEGATIVE_INFINITY;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\ExtremityMonitor.java"}}
{"prompt": "\n /**\r\n * Updates the min and the max with a new value.\r\n *\r\n * @param value the new value\r\n * @return true if an extremity was found\r\n */\r\npublic boolean update(double value) {\r\n    boolean changed = false;\r\n    if (value < min) {\r\n        min = value;\r\n        changed = true;\r\n    }\r\n    if (value > max) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/489", "ground_truth": "        max = value;\r\n        changed = true;\r\n    }\r\n    return changed;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\ExtremityMonitor.java"}}
{"prompt": "\n /**\r\n * Sets the minimum and maximum values.\r\n *\r\n * @param min the minimum value\r\n * @param max the maximum value\r\n */\r\npublic void set(double min, double max) {\r", "choices": [{"text": "this.min = min;\r\nthis.max = max;\r\n}\r\n/**\r\n * Sets the minimum and maximum values.\r\n *\r\n * @param min the minimum value\r\n * @param max the maximum value\r\n */\r\npublic void set(int min, int max) {\r\nthis.min = min;\r\nthis.max = max;\r\n}\r\n/**\r\n * Sets the minimum and maximum values.\r\n *\r\n * @param min the minimum value\r\n * @param max the maximum value\r\n */\r\npublic void set(long min, long max) {\r"}], "metadata": {"task_id": "OpenTracks/490", "ground_truth": "    this.min = min;\r\n    this.max = max;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\ExtremityMonitor.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Distance\nimport java.time.Duration\npublic void reset() {\r\n    startTime = null;\r\n    stopTime = null;\r\n    setTotalDistance(Distance.of(0));\r\n    setTotalTime(Duration.ofSeconds(0));\r\n    setMovingTime(Duration.ofSeconds(0));\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "OpenTracks/491", "ground_truth": "    setMaxSpeed(Speed.zero());\r\n    setTotalAltitudeGain(null);\r\n    setTotalAltitudeLoss(null);\r\n    isIdle = false;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatistics.java"}}
{"prompt": "\n import java.time.Instant\npublic void reset(Instant startTime) {\r", "choices": [{"text": "//    this.startTime = startTime;\r\n//    this.endTime = startTime;\r\n//    this.totalTime = Duration.ZERO;\r\n//    this.totalTime = Duration.ZERO;\r\n//    this.totalTime = Duration.ZERO;\r\n//    this.totalTime = Duration.ZERO;\r\n//    this.totalTime = Duration.ZERO;\r\n//    this.totalTime = Duration.ZERO;\r\n//    this.totalTime = Duration.ZERO;\r\n//    this.totalTime = Duration.ZERO;\r\n//    this"}], "metadata": {"task_id": "OpenTracks/492", "ground_truth": "    reset();\r\n    setStartTime(startTime);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatistics.java"}}
{"prompt": " import java.time.Instant\nprivate Distance totalDistance;\nprivate Float totalAltitudeGain_m = null;\nprivate Float totalAltitudeLoss_m = null;\n/**\r\n * Should only be called on start.\r\n */\r\npublic void setStartTime(Instant startTime) {\r", "choices": [{"text": "this.startTime = startTime;\r\n}\r\n/**\r\n * Should only be called on stop.\r\n */\r\npublic void setStopTime(Instant stopTime) {\r\nthis.stopTime = stopTime;\r\n}\r\n/**\r\n * Should only be called on start.\r\n */\r\npublic void setStartLocation(Location startLocation) {\r\nthis.startLocation = startLocation;\r\n}\r\n/**\r\n * Should only be called on stop.\r\n */\r\npublic void setStopLocation(Location stopLocation) {\r\nthis.stopLocation = stopLocation;\r"}], "metadata": {"task_id": "OpenTracks/493", "ground_truth": "    this.startTime = startTime;\r\n    setStopTime(startTime);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatistics.java"}}
{"prompt": "\n import java.time.Duration\nimport androidx.annotation.VisibleForTesting\n@VisibleForTesting(otherwise = VisibleForTesting.PACKAGE_PRIVATE)\r\npublic void addMovingTime(Duration time) {\r\n    if (time.isNegative()) {\r\n        throw new RuntimeException(\"Moving time cannot be negative\");\r", "choices": [{"text": "}\r\nif (time.isZero()) {\r\n    return;\r\n}\r\nif (time.isLongerThan(Duration.ofSeconds(Long.MAX_VALUE))) {\r\n    throw new RuntimeException(\"Moving time cannot be longer than 24.85 days\");\r\n}\r\nmovingTime += time.toMillis();\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/495", "ground_truth": "    }\r\n    movingTime = movingTime.plus(time);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatistics.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Speed\n/**\r\n * Gets the average speed.\r\n * This calculation only takes into account the displacement until the last point that was accounted for in statistics.\r\n */\r\npublic Speed getAverageSpeed() {\r\n    if (totalTime.isZero()) {\r\n        return Speed.of(0);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/496", "ground_truth": "    }\r\n    return Speed.of(totalDistance.toM() / totalTime.getSeconds());\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatistics.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Altitude\npublic void updateAltitudeExtremities(Altitude altitude) {\r\n    if (altitude != null) {\r", "choices": [{"text": "\n import de.dennisguse.opentracks.data.models.Altitude\npublic void updateAltitudeExtremities(Altitude altitude) {\r\n    if (altitude!= null) {\r\n//        if (altitude.getAltitude() > maxAltitude) {\r\n//            maxAltitude = altitude.getAltitude();\r\n//            maxAltitudeTime = altitude.getTime();\r\n//        }\r\n//        if (altitude.getAltitude() < minAltitude) {\r\n//            minAltitude = altitude.getAltitude();\r\n//            minAltitudeTime = altitude.getTime();\r\n//        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "OpenTracks/497", "ground_truth": "        altitudeExtremities.update(altitude.toM());\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatistics.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.HeartRate\npublic void setAverageHeartRate(HeartRate heartRate) {\r\n    if (heartRate != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/498", "ground_truth": "        avgHeartRate = heartRate;\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatistics.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Altitude\nimport androidx.annotation.VisibleForTesting\n@VisibleForTesting(otherwise = VisibleForTesting.PACKAGE_PRIVATE)\r\npublic void addTotalAltitudeGain(float gain_m) {\r\n    if (totalAltitudeGain_m == null) {\r\n        totalAltitudeGain_m = 0f;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/499", "ground_truth": "    }\r\n    totalAltitudeGain_m += gain_m;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatistics.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Altitude\nimport androidx.annotation.VisibleForTesting\n@VisibleForTesting(otherwise = VisibleForTesting.PACKAGE_PRIVATE)\r\npublic void addTotalAltitudeLoss(float loss_m) {\r\n    if (totalAltitudeLoss_m == null) {\r\n        totalAltitudeLoss_m = 0f;\r", "choices": [{"text": "}\r\n    totalAltitudeLoss_m += loss_m;\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/500", "ground_truth": "    }\r\n    totalAltitudeLoss_m += loss_m;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatistics.java"}}
{"prompt": "\n public TrackStatistics getTrackStatistics() {\r\n    // Take a snapshot - we don't want anyone messing with our trackStatistics\r\n    TrackStatistics stats = new TrackStatistics(trackStatistics);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/502", "ground_truth": "    stats.merge(currentSegment);\r\n    return stats;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatisticsUpdater.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.TrackPoint\nprivate void reset(TrackPoint trackPoint) {\r\n    if (currentSegment.isInitialized()) {\r\n        trackStatistics.merge(currentSegment);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/503", "ground_truth": "    }\r\n    currentSegment.reset(trackPoint.getTime());\r\n    lastTrackPoint = null;\r\n    resetAverageHeartRate();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatisticsUpdater.java"}}
{"prompt": " import de.dennisguse.opentracks.data.models.HeartRate\nprivate Duration totalHeartRateDuration = Duration.ZERO;\nprivate float averageHeartRateBPM;\nprivate final TrackStatistics trackStatistics;\nprivate void resetAverageHeartRate() {\r", "choices": [{"text": "averageHeartRateBPM = 0;\r\n}\n"}], "metadata": {"task_id": "OpenTracks/504", "ground_truth": "    averageHeartRateBPM = 0.0f;\r\n    totalHeartRateDuration = Duration.ZERO;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatisticsUpdater.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.TrackPoint\nimport de.dennisguse.opentracks.data.models.Speed\nimport androidx.annotation.NonNull\n/**\r\n * Updates a speed reading while assuming the user is moving.\r\n */\r\nprivate void updateSpeed(@NonNull TrackPoint trackPoint) {\r\n    Speed currentSpeed = trackPoint.getSpeed();\r\n    if (currentSpeed.greaterThan(currentSegment.getMaxSpeed())) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/505", "ground_truth": "        currentSegment.setMaxSpeed(currentSpeed);\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\stats\\TrackStatisticsUpdater.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.os.Bundle\n@Override\r\npublic void onSaveInstanceState(@NonNull Bundle outState) {\r", "choices": [{"text": "super.onSaveInstanceState(outState);\r\noutState.putInt(\"key\", 10);\r\n}\r\n@Override\r\npublic void onRestoreInstanceState(@NonNull Bundle savedInstanceState) {\r\nsuper.onRestoreInstanceState(savedInstanceState);\r\nint value = savedInstanceState.getInt(\"key\");\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/506", "ground_truth": "    super.onSaveInstanceState(outState);\r\n    outState.putSerializable(ICON_VALUE_KEY, activityType);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackEditActivity.java"}}
{"prompt": "\n import android.view.View\n@Override\r\nprotected View getRootView() {\r", "choices": [{"text": "return inflater.inflate(R.layout.activity_main, null);\r\n}\r\n@Override\r\nprotected void initView() {\r\n}\r\n@Override\r\nprotected void initData() {\r\n}\r\n@Override\r\nprotected void initListener() {\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/507", "ground_truth": "    viewBinding = TrackEditBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackEditActivity.java"}}
{"prompt": "\n @Override\r\npublic void onDestroy() {\r", "choices": [{"text": "super.onDestroy();\r\nif (mLocationManager!= null) {\r\nmLocationManager.removeUpdates(this);\r\n}\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/511", "ground_truth": "    viewBinding.trackListFabAction.setVisibility(View.VISIBLE);\r\n    viewBinding.bottomAppBar.performShow(true);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java"}}
{"prompt": "\n @Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n    // Update UI\r", "choices": [{"text": "}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/513", "ground_truth": "    this.invalidateOptionsMenu();\r\n    loadData();\r\n    // Float button\r\n    setFloatButton();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java"}}
{"prompt": "\n @Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    viewBinding = null;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/515", "ground_truth": "    recordingStatusConnection = null;\r\n    adapter = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java"}}
{"prompt": "\n @Override\r\nprotected View getRootView() {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false);\r\n}\r\n\r\n@Override\r\nprotected void initView() {\r\nmRecyclerView = (RecyclerView) findViewById(R.id.recyclerView);\r\nmRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));\r\nmRecyclerView.setAdapter(new MyAdapter());\r\n}\r\n\r\n@Override\r\nprotected void initData() {\r\n}\r\n\r\nprivate class MyAdapter extends RecyclerView.Adapter<MyAdapter.MyViewHolder> {\r\n\r\n@Override\r\npublic MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType"}], "metadata": {"task_id": "OpenTracks/516", "ground_truth": "    viewBinding = TrackListBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java"}}
{"prompt": "\n @Override\r\npublic boolean onCreateOptionsMenu(Menu menu) {\r\n    getMenuInflater().inflate(R.menu.track_list, menu);\r\n    searchMenuItem = menu.findItem(R.id.track_list_search);\r", "choices": [{"text": "}\r\n\r\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n    switch (item.getItemId()) {\r\n        case R.id.track_list_search:\r\n            searchMenuItem.expandActionView();\r\n            return true;\r\n        default:\r\n            return super.onOptionsItemSelected(item);\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/517", "ground_truth": "    ActivityUtils.configureSearchWidget(this, searchMenuItem);\r\n    return super.onCreateOptionsMenu(menu);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java"}}
{"prompt": "\n @Override\r\npublic boolean onKeyUp(int keyCode, KeyEvent event) {\r\n    if (keyCode == KeyEvent.KEYCODE_SEARCH && searchMenuItem != null) {\r\n        return true;\r", "choices": [{"text": "\n @Override\r\npublic boolean onKeyUp(int keyCode, KeyEvent event) {\r\n    if (keyCode == KeyEvent.KEYCODE_SEARCH && searchMenuItem!= null) {\r\n        return true;\r\n}\r\nreturn super.onKeyUp(keyCode, event);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/519", "ground_truth": "    }\r\n    return super.onKeyUp(keyCode, event);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java"}}
{"prompt": "\n @Override\r\npublic void onBackPressed() {\r\n    SearchView searchView = (SearchView) searchMenuItem.getActionView();\r\n    if (!searchView.isIconified()) {\r\n        searchView.setIconified(true);\r\n    }\r\n    if (searchQuery != null) {\r\n        searchQuery = null;\r", "choices": [{"text": "\n @Override\r\npublic void onBackPressed() {\r\n    SearchView searchView = (SearchView) searchMenuItem.getActionView();\r\n    if (!searchView.isIconified()) {\r\n        searchView.setIconified(true);\r\n    }\r\n    if (searchQuery!= null) {\r\n        searchQuery = null;\r\n}\r\nsuper.onBackPressed();\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/520", "ground_truth": "        loadData();\r\n        return;\r\n    }\r\n    super.onBackPressed();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java"}}
{"prompt": "\n @Override\r\nprotected void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    if (Intent.ACTION_SEARCH.equals(intent.getAction())) {\r", "choices": [{"text": "//        String query = intent.getStringExtra(SearchManager.QUERY);\r\n//        doSearch(query);\r\n    }\r\n}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/521", "ground_truth": "        searchQuery = intent.getStringExtra(SearchManager.QUERY);\r\n    } else {\r\n        searchQuery = null;\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java"}}
{"prompt": "\n public void onGpsStatusChanged(GpsStatusValue newStatus) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\n super.onGpsStatusChanged(newStatus);\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }\r\n }"}], "metadata": {"task_id": "OpenTracks/523", "ground_truth": "    gpsStatusValue = newStatus;\r\n    updateGpsMenuItem(true, recordingStatus.isRecording());\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java"}}
{"prompt": "\n private void onRecordingStatusChanged(RecordingStatus status) {\r\n    recordingStatus = status;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/525", "ground_truth": "    setFloatButton();\r\n    adapter.updateRecordingStatus(recordingStatus);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackListActivity.java"}}
{"prompt": "\n @Override\r\nprotected void onStart() {\r", "choices": [{"text": "super.onStart();\r\nmGoogleApiClient.connect();\r\n}\r\n\r\n@Override\r\nprotected void onStop() {\r\nsuper.onStop();\r\nif (mGoogleApiClient.isConnected()) {\r\nmGoogleApiClient.disconnect();\r\n}\r\n}\r\n\r\n@Override\r\npublic void onConnected(Bundle connectionHint) {\r\nmLocationRequest = LocationRequest.create();\r\nmLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);\r\nmLocationRequest.setInterval(1000);\r\nmLocationRequest.set"}], "metadata": {"task_id": "OpenTracks/526", "ground_truth": "    super.onStart();\r\n    trackDataHub.start();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordedActivity.java"}}
{"prompt": "\n @Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n    // Update UI\r\n    this.invalidateOptionsMenu();\r", "choices": [{"text": "}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/527", "ground_truth": "    if (trackId != null) {\r\n        trackDataHub.loadTrack(trackId);\r\n    }\r\n    trackRecordingServiceConnection.bind(this);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordedActivity.java"}}
{"prompt": "\n @Override\r\nprotected void onStop() {\r\n    super.onStop();\r", "choices": [{"text": "}\r\n\r\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/528", "ground_truth": "    trackRecordingServiceConnection.unbind(this);\r\n    trackDataHub.stop();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordedActivity.java"}}
{"prompt": "\n @Override\r\nprotected View getRootView() {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false);\r\n}\r\n\r\n@Override\r\nprotected void initView() {\r\nmRecyclerView = (RecyclerView) findViewById(R.id.recyclerView);\r\nmRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));\r\nmRecyclerView.setAdapter(new MyAdapter());\r\n}\r\n\r\n@Override\r\nprotected void initData() {\r\n}\r\n\r\nprivate class MyAdapter extends RecyclerView.Adapter<MyAdapter.MyViewHolder> {\r\n\r\n@Override\r\npublic MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType"}], "metadata": {"task_id": "OpenTracks/530", "ground_truth": "    viewBinding = TrackRecordedBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordedActivity.java"}}
{"prompt": "\nprivate TrackDataHub trackDataHub;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\nprivate TrackRecordedBinding viewBinding;\n @Override\r\npublic void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r", "choices": [{"text": "}\r\n\n@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    setContentView(R.layout.activity_track_recorded);\r\n    viewBinding = DataBindingUtil.setContentView(this, R.layout.activity_track_recorded);\r\n    trackDataHub = new TrackDataHub(this);\r\n    trackDataHub.setTrackRecordedListener(this);\r\n    trackDataHub.setTrackRecordingListener(this);\r\n    trackDataHub.setTrackRecordingStatus(TrackRecordingService.STATUS_DEFAULT);\r\n    trackDataHub.setTrackRecordingStatus(TrackRecording"}], "metadata": {"task_id": "OpenTracks/531", "ground_truth": "    setIntent(intent);\r\n    handleIntent(intent);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordedActivity.java"}}
{"prompt": "\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\n @Override\r\npublic boolean onCreateOptionsMenu(Menu menu) {\r", "choices": [{"text": "// Inflate the menu; this adds items to the action bar if it is present.\r\ngetMenuInflater().inflate(R.menu.main, menu);\r\nreturn true;\r\n}\r\n\n @Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n// Handle action bar item clicks here. The action bar will\r\n// automatically handle clicks on the Home/Up button, so long\r\n// as you specify a parent activity in AndroidManifest.xml.\r\nint id = item.getItemId();\r\nif (id == R.id.action_settings) {"}], "metadata": {"task_id": "OpenTracks/532", "ground_truth": "    getMenuInflater().inflate(R.menu.track_detail, menu);\r\n    return super.onCreateOptionsMenu(menu);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordedActivity.java"}}
{"prompt": "\n public void startPostponedEnterTransitionWith(View viewIcon) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/537", "ground_truth": "    ViewCompat.setTransitionName(viewIcon, TrackRecordedActivity.VIEW_TRACK_ICON);\r\n    startPostponedEnterTransition();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordedActivity.java"}}
{"prompt": "\n @Override\r\npublic void onAttachedToWindow() {\r\n    setLockscreenPolicy();\r\n    setScreenOnPolicy();\r", "choices": [{"text": "}\r\n\r\n@Override\r\npublic void onDetachedFromWindow() {\r\n    setLockscreenPolicy();\r\n    setScreenOnPolicy();\r\n}\r\n\r\nprivate void setLockscreenPolicy() {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n        WindowManager.LayoutParams attrs = getWindow().getAttributes();\r\n        attrs.layoutInDisplayCutoutMode = WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES;\r\n        getWindow().setAttributes(attrs);\r\n    }\r\n}\r\n\r\nprivate void setScreenOnPolicy() {"}], "metadata": {"task_id": "OpenTracks/538", "ground_truth": "    setFullscreenPolicy();\r\n    super.onAttachedToWindow();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordingActivity.java"}}
{"prompt": "\n @Override\r\nprotected void onStart() {\r\n    super.onStart();\r\n    PreferencesUtils.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r", "choices": [{"text": "}\r\n\r\n@Override\r\nprotected void onStop() {\r\n    super.onStop();\r\n    PreferencesUtils.unregisterOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/541", "ground_truth": "    trackRecordingServiceConnection.bind(this);\r\n    trackDataHub.start();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordingActivity.java"}}
{"prompt": "\npublic static final String EXTRA_TRACK_ID = \"track_id\";\nprivate TrackDataHub trackDataHub;\nprivate TrackRecordingBinding viewBinding;\n @Override\r\nprotected void onStop() {\r\n    super.onStop();\r\n    PreferencesUtils.unregisterOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r", "choices": [{"text": "}\r\n\n @Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n    PreferencesUtils.registerOnSharedPreferenceChangeListener(sharedPreferenceChangeListener);\r\n}\r\n\n @Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    trackDataHub = TrackDataHub.getInstance();\r\n    viewBinding = DataBindingUtil.setContentView(this, R.layout.activity_track_recording);\r\n    viewBinding.setTrackDataHub(trackDataHub);\r\n    viewBinding.setLifecycleOwner(this);\r\n    viewBinding.setTrackRecording(this);\r\n    viewBinding"}], "metadata": {"task_id": "OpenTracks/544", "ground_truth": "    trackRecordingServiceConnection.unbind(this);\r\n    trackDataHub.stop();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordingActivity.java"}}
{"prompt": "\n @Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r", "choices": [{"text": "}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/545", "ground_truth": "    viewBinding = null;\r\n    trackRecordingServiceConnection = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordingActivity.java"}}
{"prompt": "\n @Override\r\nprotected View getRootView() {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false);\r\n}\r\n\r\n@Override\r\nprotected void initView() {\r\nmRecyclerView = (RecyclerView) findViewById(R.id.recyclerView);\r\nmRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));\r\nmRecyclerView.setAdapter(new MyAdapter());\r\n}\r\n\r\n@Override\r\nprotected void initData() {\r\n}\r\n\r\nprivate class MyAdapter extends RecyclerView.Adapter<MyAdapter.MyViewHolder> {\r\n\r\n@Override\r\npublic MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType"}], "metadata": {"task_id": "OpenTracks/546", "ground_truth": "    viewBinding = TrackRecordingBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordingActivity.java"}}
{"prompt": "\nprivate static final String CURRENT_TAB_TAG_KEY = \"current_tab_tag_key\";\nprivate TrackRecordingServiceConnection trackRecordingServiceConnection;\nprivate RecordingStatus recordingStatus = TrackRecordingService.STATUS_DEFAULT;\n @Override\r\npublic boolean onCreateOptionsMenu(Menu menu) {\r", "choices": [{"text": "// Inflate the menu; this adds items to the action bar if it is present.\r\ngetMenuInflater().inflate(R.menu.main, menu);\r\nreturn true;\r\n}\r\n\n @Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\n// Handle action bar item clicks here. The action bar will\r\n// automatically handle clicks on the Home/Up button, so long\r\n// as you specify a parent activity in AndroidManifest.xml.\r\nint id = item.getItemId();\r\nif (id == R.id.action_settings) {"}], "metadata": {"task_id": "OpenTracks/547", "ground_truth": "    getMenuInflater().inflate(R.menu.track_record, menu);\r\n    return super.onCreateOptionsMenu(menu);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackRecordingActivity.java"}}
{"prompt": "\n @Override\r\npublic void onBackPressed() {\r\n    if (isDiscarding) {\r", "choices": [{"text": "//        Toast.makeText(this, \"Discarding\", Toast.LENGTH_SHORT).show();\r\n        return;\r\n    }\r\n    super.onBackPressed();\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/552", "ground_truth": "        return;\r\n    }\r\n    super.onBackPressed();\r\n    resumeTrackAndFinish();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackStoppedActivity.java"}}
{"prompt": "\n import android.view.View\n@Override\r\nprotected View getRootView() {\r", "choices": [{"text": "return inflater.inflate(R.layout.activity_main, null);\r\n}\r\n@Override\r\nprotected void initView() {\r\n}\r\n@Override\r\nprotected void initData() {\r\n}\r\n@Override\r\nprotected void initListener() {\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/553", "ground_truth": "    viewBinding = TrackStoppedBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\TrackStoppedActivity.java"}}
{"prompt": "\n import de.dennisguse.opentracks.stats.TrackStatistics\nimport de.dennisguse.opentracks.data.models.Track\nvoid add(TrackStatistics statistics) {\r", "choices": [{"text": "-    if (statistics.getTrack() == null) {\r\n-        return\r\n-    }\r\n-    if (statistics.getTrack().getTrackType() == TrackType.ON_FOOT) {\r\n-        return\r\n-    }\r\n-    if (statistics.getTrack().getTrackType() == TrackType.UNKNOWN) {\r\n-        return\r\n-    }\r\n-    if (statistics.getTrack().getTrackType() == TrackType.RUNNING) {\r\n-        return\r\n-    }\r\n-    if"}], "metadata": {"task_id": "OpenTracks/558", "ground_truth": "    trackStatistics.merge(statistics);\r\n    countTracks++;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\AggregatedStatistics.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.os.Bundle\n@Override\r\npublic void onSaveInstanceState(@NonNull Bundle outState) {\r", "choices": [{"text": "super.onSaveInstanceState(outState);\r\noutState.putInt(\"key\", 10);\r\n}\r\n@Override\r\npublic void onRestoreInstanceState(@NonNull Bundle savedInstanceState) {\r\nsuper.onRestoreInstanceState(savedInstanceState);\r\nint value = savedInstanceState.getInt(\"key\");\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/560", "ground_truth": "    super.onSaveInstanceState(outState);\r\n    outState.putBoolean(STATE_ARE_FILTERS_APPLIED, areFiltersApplied);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\AggregatedStatisticsActivity.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\nimport android.view.View\n@Override\r\nprotected View getRootView() {\r", "choices": [{"text": "return getLayoutInflater().inflate(R.layout.activity_main, null);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/561", "ground_truth": "    viewBinding = AggregatedStatsBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\AggregatedStatisticsActivity.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.ActivityType\nimport de.dennisguse.opentracks.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.annotation.NonNull\n@Override\r\npublic void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\r\n    ViewHolder viewHolder = (ViewHolder) holder;\r\n    AggregatedStatistics.AggregatedStatistic aggregatedStatistic = aggregatedStatistics.getItem(position);\r\n    String type = aggregatedStatistic.getActivityTypeLocalized();\r\n    if (ActivityType.findByLocalizedString(context, type).isShowSpeedPreferred()) {\r", "choices": [{"text": "//        viewHolder.speed.setText(String.format(context.getString(R.string.speed_kmh), aggregatedStatistic.getSpeed()));\r\n        viewHolder.speed.setText(String.format(context.getString(R.string.speed_kmh), aggregatedStatistic.getSpeed()));\r\n    } else {\r\n        viewHolder.speed.setText(String.format(context.getString(R.string.speed_mph), aggregatedStatistic.getSpeed()));\r\n    }\r\n    viewHolder.distance.setText(String.format(context.getString(R.string.distance_km), aggregatedStatistic.getDistance()));\r\n    viewHolder"}], "metadata": {"task_id": "OpenTracks/565", "ground_truth": "        viewHolder.setSpeed(aggregatedStatistic);\r\n    } else {\r\n        viewHolder.setPace(aggregatedStatistic);\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\AggregatedStatisticsAdapter.java"}}
{"prompt": "\n @Override\r\npublic int getItemCount() {\r\n    if (aggregatedStatistics == null) {\r\n        return 0;\r", "choices": [{"text": "}\r\nreturn aggregatedStatistics.size();\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/566", "ground_truth": "    }\r\n    return aggregatedStatistics.getCount();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\AggregatedStatisticsAdapter.java"}}
{"prompt": "\n public void swapData(AggregatedStatistics aggregatedStatistics) {\r", "choices": [{"text": "-    this.aggregatedStatistics = aggregatedStatistics;\r\n+    this.aggregatedStatistics = aggregatedStatistics; // TODO: check if this is the right way to do it.\r\n   }\r\n \r\n   public void setAggregatedStatistics(AggregatedStatistics aggregatedStatistics) {\r\n-    this.aggregatedStatistics = aggregatedStatistics;\r\n+    this.aggregatedStatistics = aggregatedStatistics; // TODO: check if this is the right way to do it.\r\n   }\r\n \r\n   public AggregatedStatistics getAggregatedStatistics() {\r\n-    return aggregatedStatistics;\r\n+    return aggregatedStatistics; //"}], "metadata": {"task_id": "OpenTracks/567", "ground_truth": "    this.aggregatedStatistics = aggregatedStatistics;\r\n    this.notifyDataSetChanged();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\AggregatedStatisticsAdapter.java"}}
{"prompt": "\n import android.os.Parcel\n@Override\r\npublic void writeToParcel(Parcel dest, int flags) {\r\n    dest.writeString(id);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/577", "ground_truth": "    dest.writeString(value);\r\n    dest.writeByte((byte) (isChecked ? 1 : 0));\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\aggregatedStatistics\\FilterDialogFragment.java"}}
{"prompt": "\n private static boolean isInt(String value) {\r\n    if (value == null || value.isEmpty()) {\r\n        return false;\r\n    }\r\n    try {\r\n        Integer.parseInt(value);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/580", "ground_truth": "    } catch (NumberFormatException nfe) {\r\n        return false;\r\n    }\r\n    return true;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\CsvLayoutUtils.java"}}
{"prompt": "\n import android.os.Parcel\n@Override\r\npublic void writeToParcel(Parcel parcel, int i) {\r\n    parcel.writeString(key);\r\n    parcel.writeByte((byte) (isVisible ? 1 : 0));\r", "choices": [{"text": "\n import android.os.Parcel\n@Override\r\npublic void writeToParcel(Parcel parcel, int i) {\r\n    parcel.writeString(key);\r\n    parcel.writeByte((byte) (isVisible? 1 : 0));\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/581", "ground_truth": "    parcel.writeByte((byte) (isPrimary ? 1 : 0));\r\n    parcel.writeByte((byte) (isWide ? 1 : 0));\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\DataField.java"}}
{"prompt": "\n import java.util.List\npublic void replaceAllFields(List<DataField> newFields) {\r", "choices": [{"text": "//    for (DataField field : newFields) {\r\n//      if (field.getName().equals(\"name\")) {\r\n//        field.setValue(\"<NAME>\");\r\n//      }\r\n//    }\r\n    newFields.replaceAll(field -> {\r\n      if (field.getName().equals(\"name\")) {\r\n        field.setValue(\"<NAME>\");\r\n      }\r\n      return field;\r\n    });\r\n  }\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/583", "ground_truth": "    dataFields.clear();\r\n    addFields(newFields);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\RecordingLayout.java"}}
{"prompt": "\n public void moveField(int from, int to) {\r", "choices": [{"text": "//    if (from == to) {\r\n//      return;\r\n//    }\r\n//    if (from < 0 || from > 7 || to < 0 || to > 7) {\r\n//      throw new IllegalArgumentException(\"Invalid field index\");\r\n//    }\r\n//    if (from == 0 && to == 7) {\r\n//      return;\r\n//    }\r\n//    if (from == 7 && to == 0) {\r\n//      return;\r\n//    }\r\n//    if (from"}], "metadata": {"task_id": "OpenTracks/585", "ground_truth": "    DataField dataFieldToMove = dataFields.remove(from);\r\n    dataFields.add(to, dataFieldToMove);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\RecordingLayout.java"}}
{"prompt": "\n import android.os.Parcel\n@Override\r\npublic void writeToParcel(Parcel parcel, int i) {\r\n    parcel.writeString(name);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/587", "ground_truth": "    parcel.writeInt(columnsPerRow);\r\n    parcel.writeList(dataFields);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\RecordingLayout.java"}}
{"prompt": "\n @Override\r\npublic int getItemCount() {\r\n    if (recordingLayout == null) {\r", "choices": [{"text": "return 0;\r\n    }\r\n    return recordingLayout.getRecordings().size();\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/591", "ground_truth": "        return 0;\r\n    } else {\r\n        return recordingLayout.getFields().size();\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\SettingsCustomLayoutEditAdapter.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\npublic void swapValues(RecordingLayout data) {\r\n    this.recordingLayout = data;\r\n    if (this.recordingLayout != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/592", "ground_truth": "        this.notifyDataSetChanged();\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\SettingsCustomLayoutEditAdapter.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\npublic RecordingLayout move(int fromPosition, int toPosition) {\r\n    recordingLayout.moveField(fromPosition, toPosition);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/593", "ground_truth": "    notifyItemMoved(fromPosition, toPosition);\r\n    return recordingLayout;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\SettingsCustomLayoutEditAdapter.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\nimport java.util.List\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.annotation.NonNull\nimport android.view.View\n@Override\r\npublic void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\r\n    SettingsCustomLayoutListAdapter.ViewHolder viewHolder = (SettingsCustomLayoutListAdapter.ViewHolder) holder;\r\n    RecordingLayout recordingLayout = recordingLayoutList.get(position);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "OpenTracks/596", "ground_truth": "    viewHolder.itemView.setTag(recordingLayout.getName());\r\n    viewHolder.title.setText(recordingLayout.getName());\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\SettingsCustomLayoutListAdapter.java"}}
{"prompt": "\n import java.util.List\n@Override\r\npublic int getItemCount() {\r\n    if (recordingLayoutList == null) {\r\n        return 0;\r", "choices": [{"text": "}\r\nreturn recordingLayoutList.size();\r\n}\r\n@Override\r\npublic void onBindViewHolder(RecordingLayoutViewHolder holder, int position) {\r\n    holder.bind(recordingLayoutList.get(position));\r\n}\r\n@Override\r\npublic RecordingLayoutViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\r\n    View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.recording_layout, parent, false);\r\n    return new RecordingLayoutViewHolder(view);\r\n}\r\n}\r\nclass RecordingLayoutViewHolder extends RecyclerView.ViewHolder {\r"}], "metadata": {"task_id": "OpenTracks/597", "ground_truth": "    }\r\n    return recordingLayoutList.size();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\SettingsCustomLayoutListAdapter.java"}}
{"prompt": "\n public void reloadLayouts() {\r", "choices": [{"text": "//     if (this.layoutManager!= null) {\r\n//       this.layoutManager.reloadLayouts();\r\n//     }\r\n//   }\r\n// \r\n//   public void setLayoutManager(LayoutManager layoutManager) {\r\n//     this.layoutManager = layoutManager;\r\n//   }\r\n// \r\n//   public void setLayoutStyle(int layoutStyle) {\r\n//     this.layoutStyle = layoutStyle;\r\n//   }\r\n// \r\n//   public void setLayoutStyle(String layoutStyle) {\r\n//     this."}], "metadata": {"task_id": "OpenTracks/598", "ground_truth": "    recordingLayoutList = PreferencesUtils.getAllCustomLayouts();\r\n    notifyDataSetChanged();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\SettingsCustomLayoutListAdapter.java"}}
{"prompt": "\n import java.util.List\npublic void removeLayout(int position) {\r\n    recordingLayoutList.remove(position);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "OpenTracks/599", "ground_truth": "    PreferencesUtils.updateCustomLayouts(recordingLayoutList);\r\n    notifyDataSetChanged();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\SettingsCustomLayoutListAdapter.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\nimport java.util.List\npublic void restoreItem(RecordingLayout recordingLayout, int position) {\r\n    recordingLayoutList.add(position, recordingLayout);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "OpenTracks/600", "ground_truth": "    PreferencesUtils.updateCustomLayouts(recordingLayoutList);\r\n    notifyDataSetChanged();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\customRecordingLayout\\SettingsCustomLayoutListAdapter.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.os.Bundle\n@Override\r\npublic void onSaveInstanceState(@NonNull Bundle outState) {\r", "choices": [{"text": "super.onSaveInstanceState(outState);\r\noutState.putInt(\"key\", 10);\r\n}\r\n@Override\r\npublic void onRestoreInstanceState(@NonNull Bundle savedInstanceState) {\r\nsuper.onRestoreInstanceState(savedInstanceState);\r\nint value = savedInstanceState.getInt(\"key\");\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/604", "ground_truth": "    super.onSaveInstanceState(outState);\r\n    outState.putSerializable(SELECTED_INTERVAL_KEY, selectedInterval);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalsFragment.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\n@Override\r\npublic View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r", "choices": [{"text": "View rootView = inflater.inflate(R.layout.fragment_main, container, false);\r\nreturn rootView;\r\n}\r\n}\r\n<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.content.Intent\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.Toast\n\nclass MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState"}], "metadata": {"task_id": "OpenTracks/605", "ground_truth": "    viewBinding = IntervalListViewBinding.inflate(inflater, container, false);\r\n    return viewBinding.getRoot();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalsFragment.java"}}
{"prompt": "\n import android.view.View\n@Override\r\npublic void onDestroyView() {\r", "choices": [{"text": "super.onDestroyView();\r\nif (mWebView!= null) {\r\nmWebView.loadDataWithBaseURL(null, \"\", \"text/html\", \"utf-8\", null);\r\nmWebView.clearHistory();\r\nmWebView.clearView();\r\nmWebView.removeAllViews();\r\nmWebView.destroy();\r\nmWebView = null;\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/609", "ground_truth": "    super.onDestroyView();\r\n    viewBinding = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalsFragment.java"}}
{"prompt": "\n @Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r", "choices": [{"text": "}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/610", "ground_truth": "    adapter = null;\r\n    viewModel = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalsFragment.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Distance\nimport java.util.List\n/**\r\n * Return the last completed interval.\r\n * An interval is complete if its distance is equal to distanceInterval_m.\r\n *\r\n * @return the interval object or null if any interval is completed.\r\n */\r\npublic Interval getLastInterval() {\r\n    if (intervalList.size() == 1 && intervalList.get(0).getDistance().lessThan(distanceInterval)) {\r\n        return null;\r\n    }\r\n    for (int i = intervalList.size() - 1; i >= 0; i--) {\r\n        if (intervalList.get(i).getDistance().greaterOrEqualThan(distanceInterval)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/614", "ground_truth": "            return this.intervalList.get(i);\r\n        }\r\n    }\r\n    return null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalStatistics.java"}}
{"prompt": "\n import java.util.List\n@Override\r\npublic int getItemCount() {\r\n    if (intervalList == null) {\r\n        return 0;\r", "choices": [{"text": "}\r\nreturn intervalList.size();\r\n}\r\n@Override\r\npublic void onBindViewHolder(final IntervalViewHolder holder, final int position) {\r\n    final Interval interval = intervalList.get(position);\r\n    holder.intervalName.setText(interval.getName());\r\n    holder.intervalDescription.setText(interval.getDescription());\r\n    holder.intervalStart.setText(interval.getStart());\r\n    holder.intervalEnd.setText(interval.getEnd());\r\n    holder.intervalDuration.setText(interval.getDuration());\r\n    holder.intervalLocation.setText(interval.getLocation());\r\n    holder.intervalType.setText("}], "metadata": {"task_id": "OpenTracks/616", "ground_truth": "    }\r\n    return intervalList.size();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalStatisticsAdapter.java"}}
{"prompt": "\n import de.dennisguse.opentracks.settings.UnitSystem\nimport java.util.List\npublic List<IntervalStatistics.Interval> swapData(List<IntervalStatistics.Interval> data, UnitSystem unitSystem, boolean isReportSpeed) {\r\n    this.unitSystem = unitSystem;\r\n    this.isReportSpeed = isReportSpeed;\r\n    intervalList = data;\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "OpenTracks/617", "ground_truth": "    if (data != null) {\r\n        this.notifyDataSetChanged();\r\n    }\r\n    return data;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalStatisticsAdapter.java"}}
{"prompt": "\n import android.database.ContentObserver\n@Override\r\nprotected void onCleared() {\r\n    super.onCleared();\r\n    if (trackPointsTableObserver != null) {\r\n        contentResolver.unregisterContentObserver(trackPointsTableObserver);\r\n        trackPointsTableObserver = null;\r\n    }\r\n    if (handlerThread != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/618", "ground_truth": "        handlerThread.getLooper().quit();\r\n        handlerThread = null;\r\n    }\r\n    handler = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalStatisticsModel.java"}}
{"prompt": "\n public void onPause() {\r\n    if (trackPointsTableObserver != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/620", "ground_truth": "        contentResolver.unregisterContentObserver(trackPointsTableObserver);\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\intervals\\IntervalStatisticsModel.java"}}
{"prompt": "\n @Override\r\nprotected View getRootView() {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false);\r\n}\r\n\r\n@Override\r\nprotected void initView() {\r\nmRecyclerView = (RecyclerView) findViewById(R.id.recyclerView);\r\nmRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));\r\nmRecyclerView.setAdapter(new MyAdapter());\r\n}\r\n\r\n@Override\r\nprotected void initData() {\r\n}\r\n\r\nprivate class MyAdapter extends RecyclerView.Adapter<MyAdapter.MyViewHolder> {\r\n\r\n@Override\r\npublic MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType"}], "metadata": {"task_id": "OpenTracks/625", "ground_truth": "    viewBinding = MarkerDetailActivityBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerDetailActivity.java"}}
{"prompt": "\n @Override\r\npublic void onPause() {\r", "choices": [{"text": "super.onPause();\r\nif (mAdView!= null) {\r\nmAdView.pause();\r\n}\r\n}\r\n\r\n@Override\r\npublic void onResume() {\r\nsuper.onResume();\r\nif (mAdView!= null) {\r\nmAdView.resume();\r\n}\r\n}\r\n\r\n@Override\r\npublic void onDestroy() {\r\nsuper.onDestroy();\r\nif (mAdView!= null) {\r\nmAdView.destroy();\r\n}\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/630", "ground_truth": "    super.onPause();\r\n    handler.removeCallbacks(hideText);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerDetailFragment.java"}}
{"prompt": "\n import android.view.View\n@Override\r\npublic void onDestroyView() {\r", "choices": [{"text": "super.onDestroyView();\r\nif (mWebView!= null) {\r\nmWebView.loadDataWithBaseURL(null, \"\", \"text/html\", \"utf-8\", null);\r\nmWebView.clearHistory();\r\nmWebView.clearView();\r\nmWebView.removeAllViews();\r\nmWebView.destroy();\r\nmWebView = null;\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/631", "ground_truth": "    super.onDestroyView();\r\n    viewBinding = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerDetailFragment.java"}}
{"prompt": "\n @Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r", "choices": [{"text": "}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/632", "ground_truth": "    markerId = null;\r\n    marker = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerDetailFragment.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\nimport android.view.View\nimport android.view.Menu\n@Override\r\npublic void setMenuVisibility(boolean menuVisible) {\r\n    super.setMenuVisibility(menuVisible);\r\n    // View pager caches the neighboring fragments in the resumed state.\r\n    // If becoming visible from the resumed state, update the UI to display the text above the image.\r\n    if (isResumed()) {\r\n        if (menuVisible) {\r\n            updateUi();\r", "choices": [{"text": "       }\r\n    }\r\n}\r\n@Override\r\npublic void setUserVisibleHint(boolean isVisibleToUser) {\r\n    super.setUserVisibleHint(isVisibleToUser);\r\n    // View pager caches the neighboring fragments in the resumed state.\r\n    // If becoming visible from the resumed state, update the UI to display the text above the image.\r\n    if (isVisibleToUser) {\r\n        if (menuVisible) {\r\n            updateUi();\r        }\r\n    }\r\n}\r\n@Override\r\npublic void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\r\n    inflater.inflate(R."}], "metadata": {"task_id": "OpenTracks/633", "ground_truth": "        } else {\r\n            handler.removeCallbacks(hideText);\r\n        }\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerDetailFragment.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Marker\nimport de.dennisguse.opentracks.R\nimport androidx.annotation.NonNull\nimport android.view.MenuItem\nimport android.view.MenuInflater\nimport android.view.Menu\n@Override\r\npublic void onCreateOptionsMenu(@NonNull Menu menu, MenuInflater inflater) {\r\n    inflater.inflate(R.menu.marker_detail, menu);\r\n    shareMarkerImageMenuItem = menu.findItem(R.id.marker_detail_share);\r", "choices": [{"text": "}\r\n@Override\r\npublic boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n    if (item.getItemId() == R.id.marker_detail_share) {\r\n        shareMarkerImage();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\r\nprivate void shareMarkerImage() {\r\n    if (marker == null) {\r\n        return;\r\n    }\r\n    Intent shareIntent = new Intent(Intent.ACTION_SEND);\r\n    shareIntent.setType(\"image/*\");\r\n    shareIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse(marker.getThumbnail"}], "metadata": {"task_id": "OpenTracks/634", "ground_truth": "    updateMarker(false);\r\n    updateMenuItems();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerDetailFragment.java"}}
{"prompt": " import android.view.MenuItem\nimport android.view.Menu\nprivate Marker.Id markerId;\nprivate Marker marker;\nprivate static final String KEY_MARKER_ID = \"markerId\";\nprivate void updateMenuItems() {\r", "choices": [{"text": "if (marker!= null) {\r\nmenu.findItem(R.id.action_delete).setVisible(true);\r\n} else {\r\nmenu.findItem(R.id.action_delete).setVisible(false);\r\n}\r\n}\r\n@Override\r\npublic boolean onOptionsItemSelected(MenuItem item) {\r\nswitch (item.getItemId()) {\r\ncase R.id.action_delete:\r\nif (marker!= null) {\r\nmarker.remove();\r\nmarker = null;\r\nupdateMenuItems();\r\n}\r\nreturn true"}], "metadata": {"task_id": "OpenTracks/635", "ground_truth": "    if (shareMarkerImageMenuItem != null)\r\n        shareMarkerImageMenuItem.setVisible(marker.hasPhoto());\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerDetailFragment.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Marker\nprivate void updateMarker(boolean refresh) {\r\n    if (refresh || marker == null) {\r\n        marker = contentProviderUtils.getMarker(markerId);\r\n        if (marker == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/636", "ground_truth": "            Log.d(TAG, \"marker is null\");\r\n            getParentFragmentManager().popBackStack();\r\n        }\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerDetailFragment.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\nimport android.view.View\n@Override\r\nprotected View getRootView() {\r", "choices": [{"text": "return getLayoutInflater().inflate(R.layout.activity_main, null);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/638", "ground_truth": "    viewBinding = MarkerEditBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerEditActivity.java"}}
{"prompt": "\n import de.dennisguse.opentracks.services.TrackRecordingService\nimport de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.data.models.Marker\nimport de.dennisguse.opentracks.R\nimport android.widget.Toast\nprivate Marker.Id createNewMarker(TrackRecordingService trackRecordingService) {\r\n    try {\r\n        Marker.Id marker = trackRecordingService.insertMarker(\"\", \"\", \"\", null);\r\n        if (marker == null) {\r\n            Toast.makeText(this, R.string.marker_add_error, Toast.LENGTH_LONG).show();\r\n            return null;\r\n        }\r\n        return marker;\r", "choices": [{"text": "} catch (e: Exception) {\r\n    Toast.makeText(this, R.string.marker_add_error, Toast.LENGTH_LONG).show();\r\n    return null;\r\n}\r\n}\n"}], "metadata": {"task_id": "OpenTracks/639", "ground_truth": "    } catch (IllegalStateException e) {\r\n        Log.e(TAG, \"Unable to add marker.\", e);\r\n        return null;\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerEditActivity.java"}}
{"prompt": "\n @Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    trackId = null;\r", "choices": [{"text": "}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/640", "ground_truth": "    viewBinding = null;\r\n    viewModel = null;\r\n    takePictureFromGallery = null;\r\n    takePictureFromCamera = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerEditActivity.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Marker\nimport de.dennisguse.opentracks.R\nimport androidx.annotation.NonNull\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n    if (item.getItemId() == R.id.marker_edit_insert_photo) {\r\n        createMarkerWithPicture();\r\n        return true;\r\n    }\r\n    if (item.getItemId() == R.id.marker_edit_insert_gallery_img) {\r", "choices": [{"text": "//        createMarkerWithGalleryImage();\r\n        return true;\r\n    }\r\n    if (item.getItemId() == R.id.marker_edit_insert_video) {\r\n//        createMarkerWithVideo();\r\n        return true;\r\n    }\r\n    if (item.getItemId() == R.id.marker_edit_insert_audio) {\r\n//        createMarkerWithAudio();\r\n        return true;\r\n    }\r\n    if (item.getItemId() == R.id.marker_edit_insert_location) {\r\n//        createMarkerWithLocation();\r\n        return true;\r\n    }\r\n    if"}], "metadata": {"task_id": "OpenTracks/643", "ground_truth": "        createMarkerWithGalleryImage();\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerEditActivity.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Marker\nimport de.dennisguse.opentracks.data.ContentProviderUtils\nimport de.dennisguse.opentracks.R\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.LiveData\nimport androidx.annotation.NonNull\nimport android.net.Uri\nimport android.app.Application\npublic LiveData<Marker> getMarkerData(@NonNull Marker.Id markerId) {\r\n    if (markerData == null) {\r\n        markerData = new MutableLiveData<>();\r\n        Marker marker = new ContentProviderUtils(getApplication()).getMarker(markerId);\r\n        if (marker.hasPhoto()) {\r\n            photoOriginalUri = marker.getPhotoURI();\r", "choices": [{"text": "//            photoUri = Uri.parse(ContentResolver.SCHEME_CONTENT + \"://\" + photoOriginalUri.getAuthority() + \"/\" + photoOriginalUri.getPath());\r\n        }\r\n        markerData.setValue(marker);\r\n    }\r\n    return markerData;\r\n}\n"}], "metadata": {"task_id": "OpenTracks/648", "ground_truth": "        }\r\n        markerData.postValue(marker);\r\n    }\r\n    return markerData;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerEditViewModel.java"}}
{"prompt": " import de.dennisguse.opentracks.data.models.Marker\nprivate static final String TAG = MarkerEditViewModel.class.getSimpleName();\nprivate MutableLiveData<Marker> markerData;\nprivate Uri photoOriginalUri;\nprivate void deletePhoto(Marker marker) {\r\n    if (marker.hasPhoto()) {\r", "choices": [{"text": "//        File file = new File(marker.getPhotoPath());\r\n//        if (file.exists()) {\r\n//            file.delete();\r\n//        }\r\n        marker.setPhotoPath(null);\r\n        marker.setPhotoUri(null);\r\n        marker.setPhotoThumbnailUri(null);\r\n        marker.setPhotoThumbnailPath(null);\r\n        marker.setPhotoThumbnailSize(0);\r\n        marker.setPhotoSize(0);\r\n        marker.setPhotoMimeType(null);\r\n        marker.setPhotoTaken(false);\r\n        marker.setPhotoTakenTime(null);\r\n        marker.set"}], "metadata": {"task_id": "OpenTracks/651", "ground_truth": "        deletePhoto(marker.getPhotoURI());\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerEditViewModel.java"}}
{"prompt": "\n @Override\r\nprotected void onStart() {\r", "choices": [{"text": "super.onStart();\r\nmGoogleApiClient.connect();\r\n}\r\n\r\n@Override\r\nprotected void onStop() {\r\nsuper.onStop();\r\nif (mGoogleApiClient.isConnected()) {\r\nmGoogleApiClient.disconnect();\r\n}\r\n}\r\n\r\n@Override\r\npublic void onConnected(Bundle connectionHint) {\r\nmLocationRequest = LocationRequest.create();\r\nmLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);\r\nmLocationRequest.setInterval(1000);\r\nmLocationRequest.set"}], "metadata": {"task_id": "OpenTracks/655", "ground_truth": "    super.onStart();\r\n    trackRecordingServiceConnection.bind(this);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListActivity.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\n@Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n    trackRecordingServiceConnection.bind(this);\r", "choices": [{"text": "}\r\n\r\n@Override\r\nprotected void onPause() {\r\n    super.onPause();\r\n    trackRecordingServiceConnection.unbind(this);\r\n}\r\n\r\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    trackRecordingServiceConnection.unbind(this);\r\n}\r\n\r\n@Override\r\npublic void onServiceConnected(ComponentName name, IBinder service) {\r\n    trackRecordingService = ((TrackRecordingService.LocalBinder) service).getService();\r\n    trackRecordingService.setListener(this);\r\n}\r\n\r\n@Override\r\npublic void onServiceDisconnected(Component"}], "metadata": {"task_id": "OpenTracks/656", "ground_truth": "    this.invalidateOptionsMenu();\r\n    loadData();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListActivity.java"}}
{"prompt": "\n @Override\r\nprotected void onStop() {\r", "choices": [{"text": "super.onStop();\r\nif (mGoogleApiClient!= null && mGoogleApiClient.isConnected()) {\r\nmGoogleApiClient.disconnect();\r\n}\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/657", "ground_truth": "    super.onStop();\r\n    trackRecordingServiceConnection.unbind(this);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListActivity.java"}}
{"prompt": "\n @Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n    viewBinding = null;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/658", "ground_truth": "    adapter = null;\r\n    contentProviderUtils = null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListActivity.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\nimport android.view.View\n@Override\r\nprotected View getRootView() {\r", "choices": [{"text": "return getLayoutInflater().inflate(R.layout.activity_main, null);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/659", "ground_truth": "    viewBinding = MarkerListBinding.inflate(getLayoutInflater());\r\n    return viewBinding.getRoot();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListActivity.java"}}
{"prompt": "\n import de.dennisguse.opentracks.util.IntentUtils\nimport de.dennisguse.opentracks.data.models.Marker\nimport de.dennisguse.opentracks.R\nimport androidx.annotation.NonNull\nimport android.view.MenuItem\nimport android.view.Menu\nimport android.content.Intent\n@Override\r\npublic boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n    if (trackId != null && item.getItemId() == R.id.marker_list_insert_marker) {\r\n        Intent intent = IntentUtils.newIntent(this, MarkerEditActivity.class).putExtra(MarkerEditActivity.EXTRA_TRACK_ID, trackId);\r", "choices": [{"text": "\n import de.dennisguse.opentracks.util.IntentUtils\nimport de.dennisguse.opentracks.data.models.Marker\nimport de.dennisguse.opentracks.R\nimport androidx.annotation.NonNull\nimport android.view.MenuItem\nimport android.view.Menu\nimport android.content.Intent\n@Override\r\npublic boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n    if (trackId!= null && item.getItemId() == R.id.marker_list_insert_marker) {\r\n        Intent intent = IntentUtils.newIntent(this, MarkerEditActivity.class).putExtra(MarkerEditActivity.EXTRA_TRACK_ID, trackId);\r\nstartActivity(intent);\r\nreturn true;\r\n}\r\nreturn super.onOptionsItemSelected(item);\r\n}\r\n@Override\r\npublic boolean onCreateOptionsMenu(Menu menu) {\r\n    getMenuInflater().inflate(R.menu.marker_list, menu);\r\nreturn true;\r\n}\r\n}\r\n<file_sep>/app/src/main/java/de/dennisguse/opentracks/data/models/Track.java\n/*\n * Copyright 2014 <NAME>\n *\n * Licensed under the Apache License, Version 2.0 ("}], "metadata": {"task_id": "OpenTracks/662", "ground_truth": "        startActivity(intent);\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListActivity.java"}}
{"prompt": "\n import androidx.appcompat.widget.SearchView\nimport android.view.View\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic void onBackPressed() {\r\n    SearchView searchView = (SearchView) searchMenuItem.getActionView();\r\n    if (!searchView.isIconified()) {\r\n        searchView.setIconified(true);\r\n    }\r\n    if (searchQuery != null) {\r\n        searchQuery = null;\r", "choices": [{"text": "\n import androidx.appcompat.widget.SearchView\nimport android.view.View\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic void onBackPressed() {\r\n    SearchView searchView = (SearchView) searchMenuItem.getActionView();\r\n    if (!searchView.isIconified()) {\r\n        searchView.setIconified(true);\r\n    }\r\n    if (searchQuery!= null) {\r\n        searchQuery = null;\r\n}\r\nsuper.onBackPressed();\r\n}\n"}], "metadata": {"task_id": "OpenTracks/663", "ground_truth": "        loadData();\r\n        return;\r\n    }\r\n    super.onBackPressed();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListActivity.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\nimport android.content.Intent\n@Override\r\nprotected void onNewIntent(Intent intent) {\r\n    super.onNewIntent(intent);\r\n    if (Intent.ACTION_SEARCH.equals(intent.getAction())) {\r", "choices": [{"text": "String query = intent.getStringExtra(SearchManager.QUERY);\r\n//use the query to search your data somehow\r\n}\r\n}\n"}], "metadata": {"task_id": "OpenTracks/664", "ground_truth": "        searchQuery = intent.getStringExtra(SearchManager.QUERY);\r\n    } else {\r\n        searchQuery = null;\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListActivity.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.annotation.NonNull\nimport android.view.View\n@Override\r\npublic void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "OpenTracks/666", "ground_truth": "    ViewHolder viewHolder = (ViewHolder) holder;\r\n    viewHolder.bind(markers.get(position));\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListAdapter.java"}}
{"prompt": "\n @Override\r\npublic int getItemCount() {\r\n    if (markers == null) {\r\n        return 0;\r", "choices": [{"text": "}\r\nreturn markers.size();\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/667", "ground_truth": "    }\r\n    return markers.size();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListAdapter.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Marker\nimport java.util.List\npublic void swapData(List<Marker> markers) {\r", "choices": [{"text": "//    this.markers = markers;\r\n//    notifyDataSetChanged();\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/668", "ground_truth": "    this.markers = markers;\r\n    this.notifyDataSetChanged();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListAdapter.java"}}
{"prompt": "\n import androidx.appcompat.view.ActionMode\nimport android.view.Menu\n@Override\r\npublic boolean onCreateActionMode(ActionMode actionMode, Menu menu) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nreturn super.onCreateActionMode(actionMode, menu);\r\n}\r\n@Override\r\npublic boolean onPrepareActionMode(ActionMode actionMode, Menu menu) {\r\n// TODO Auto-generated method stub\r\nreturn super.onPrepareActionMode(actionMode, menu);\r\n}\r\n@Override\r\npublic boolean onActionItemClicked(ActionMode actionMode, MenuItem menuItem) {\r\n// TODO Auto-generated method stub\r\nreturn super.onActionItemClicked(actionMode, menuItem);\r\n}\r\n@"}], "metadata": {"task_id": "OpenTracks/669", "ground_truth": "    actionMode.getMenuInflater().inflate(R.menu.list_context_menu, menu);\r\n    return true;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListAdapter.java"}}
{"prompt": "\n import androidx.appcompat.view.ActionMode\nimport android.view.Menu\n@Override\r\npublic boolean onPrepareActionMode(ActionMode actionMode, Menu menu) {\r\n    selectionMode = true;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/670", "ground_truth": "    actionModeCallback.onPrepare(menu, null, getCheckedIds(), true);\r\n    return true;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListAdapter.java"}}
{"prompt": "\n import androidx.appcompat.view.ActionMode\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onActionItemClicked(ActionMode actionMode, MenuItem menuItem) {\r\n    if (actionModeCallback.onClick(menuItem.getItemId(), null, getCheckedIds())) {\r\n        actionMode.finish();\r", "choices": [{"text": "}\r\nreturn true;\r\n}\r\n@Override\r\npublic boolean onCreateActionMode(ActionMode actionMode, Menu menu) {\r\n    actionModeCallback.onCreateActionMode(actionMode, menu);\r\n    return true;\r\n}\r\n@Override\r\npublic void onDestroyActionMode(ActionMode actionMode) {\r\n    actionModeCallback.onDestroyActionMode(actionMode);\r\n}\r\n@Override\r\npublic boolean onPrepareActionMode(ActionMode actionMode, Menu menu) {\r\n    return actionModeCallback.onPrepareActionMode(actionMode, menu);\r\n}"}], "metadata": {"task_id": "OpenTracks/671", "ground_truth": "    }\r\n    return true;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListAdapter.java"}}
{"prompt": "\n import androidx.appcompat.view.ActionMode\n@Override\r\npublic void onDestroyActionMode(ActionMode actionMode) {\r\n    selectionMode = false;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/672", "ground_truth": "    setAllSelected(false);\r\n    actionModeCallback.onDestroy();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListAdapter.java"}}
{"prompt": "\n import java.util.List\nimport java.util.ArrayList\nprivate long[] getCheckedIds() {\r\n    List<Long> ids = new ArrayList<>();\r\n    for (int i = 0; i < selection.size(); i++) {\r\n        if (selection.valueAt(i)) {\r", "choices": [{"text": "ids.add(selection.keyAt(i));\r\n        }\r\n    }\r\n    return ids.toArray(new Long[ids.size()]);\r\n}\n"}], "metadata": {"task_id": "OpenTracks/674", "ground_truth": "            ids.add((long) selection.keyAt(i));\r\n        }\r\n    }\r\n    return ids.stream().mapToLong(i -> i).toArray();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListAdapter.java"}}
{"prompt": "\n public void setSelected(boolean isSelected) {\r", "choices": [{"text": "//     this.isSelected = isSelected;\r\n// }\r\n public boolean isSelected() {\r\n     return isSelected;\r\n }\r\n public void setSelectedItem(boolean isSelectedItem) {\r\n     this.isSelectedItem = isSelectedItem;\r\n }\r\n public boolean isSelectedItem() {\r\n     return isSelectedItem;\r\n }\r\n public void setItem(String item) {\r\n     this.item = item;\r\n }\r\n public String getItem() {\r\n     return item;\r\n }\r\n public void setItemColor(Color itemColor) {\r\n     this.itemColor = itemColor;\r\n }\r\n public Color getItemColor() {\r\n     return item"}], "metadata": {"task_id": "OpenTracks/675", "ground_truth": "    selection.put((int) getId(), isSelected);\r\n    view.setActivated(isSelected);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListAdapter.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Marker\nimport java.util.List\nimport androidx.appcompat.view.ActionMode\nimport android.view.View\n@Override\r\npublic boolean onLongClick(View view) {\r\n    setSelected(!view.isActivated());\r\n    if (!selectionMode) {\r\n        actionMode = context.startSupportActionMode(MarkerListAdapter.this);\r", "choices": [{"text": "//        actionMode.setTitle(R.string.selected_markers);\r\n        actionMode.setSubtitle(String.valueOf(selectedMarkers.size()));\r\n        actionMode.setCustomView(R.layout.action_mode_title);\r\n        actionMode.invalidate();\r\n    }\r\n    return true;\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/677", "ground_truth": "    } else {\r\n        actionMode.invalidate();\r\n    }\r\n    return true;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerListAdapter.java"}}
{"prompt": "\n import de.dennisguse.opentracks.util.FileUtils\nimport de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.R\nimport java.io.File\nimport android.util.Log\nimport android.net.Uri\nimport android.content.Context\n/**\r\n * Checks that there is a file inside track photo directory whose name is the same that uri file.\r\n * If there is a file inside photo directory whose name is the same that uri then returns File. Otherwise returns null.\r\n *\r\n * @param context the Context.\r\n * @param trackId the id of the Track.\r\n * @param uri     the uri to check.\r\n * @return File object or null.\r\n */\r\npublic static File getPhotoFileIfExists(Context context, Track.Id trackId, Uri uri) {\r\n    if (uri == null) {\r\n        Log.w(TAG, \"URI object is null.\");\r\n        return null;\r\n    }\r\n    String filename = uri.getLastPathSegment();\r\n    if (filename == null) {\r\n        Log.w(TAG, \"External photo contains no filename.\");\r\n        return null;\r\n    }\r\n    File dir = FileUtils.getPhotoDir(context, trackId);\r\n    File file = new File(dir, filename);\r", "choices": [{"text": "//    Log.d(TAG, \"getPhotoFileIfExists: \" + file.getAbsolutePath());\r\n    if (file.exists()) {\r\n        return file;\r\n    }\r\n    return null;\r\n}\n<file_sep>/app/src/main/java/de/dennisguse/opentracks/util/TrackUtils.java\n// Copyright 2016 <NAME>\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//"}], "metadata": {"task_id": "OpenTracks/679", "ground_truth": "    if (!file.exists()) {\r\n        return null;\r\n    }\r\n    return file;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerUtils.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Track\nimport de.dennisguse.opentracks.R\nimport java.io.File\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.util.Log\nimport android.net.Uri\nimport android.content.Context\n@Nullable\r\npublic static File buildInternalPhotoFile(Context context, Track.Id trackId, @NonNull Uri fileNameUri) {\r\n    if (fileNameUri == null) {\r\n        Log.w(TAG, \"URI object is null.\");\r\n        return null;\r\n    }\r\n    String filename = fileNameUri.getLastPathSegment();\r\n    if (filename == null) {\r\n        Log.w(TAG, \"External photo contains no filename.\");\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/680", "ground_truth": "        return null;\r\n    }\r\n    File dir = FileUtils.getPhotoDir(context, trackId);\r\n    return new File(dir, filename);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\markers\\MarkerUtils.java"}}
{"prompt": "\n import de.dennisguse.opentracks.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.annotation.NonNull\nimport android.view.View\n@Override\r\npublic void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\r\n    ViewHolder viewHolder = (ViewHolder) holder;\r", "choices": [{"text": "}\r\n@NonNull\r\n@Override\r\npublic RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n    View view = mInflater.inflate(R.layout.item_list_item, parent, false);\r\n    return new ViewHolder(view);\r\n}\r\npublic class ViewHolder extends RecyclerView.ViewHolder {\r\npublic final View mView;\r\npublic final TextView mIdView;\r\npublic final TextView mContentView;\r\npublic ItemListItem(View view) {\r\nthis.mView = view;\r\nthis.mIdView = (TextView) view."}], "metadata": {"task_id": "OpenTracks/682", "ground_truth": "    cursor.moveToPosition(position);\r\n    viewHolder.bind(cursor);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\TrackListAdapter.java"}}
{"prompt": "\n @Override\r\npublic int getItemCount() {\r\n    if (cursor == null) {\r\n        return 0;\r", "choices": [{"text": "}\r\nreturn cursor.getCount();\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "OpenTracks/683", "ground_truth": "    }\r\n    return cursor.getCount();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\TrackListAdapter.java"}}
{"prompt": " import android.database.Cursor\nprivate boolean selectionMode = false;\nprivate Track.Id trackId;\nprivate UnitSystem unitSystem;\npublic void swapData(Cursor cursor) {\r", "choices": [{"text": "if (cursor!= null) {\r\nif (cursor.moveToFirst()) {\r\ndo {\r\nTrack track = new Track();\r\ntrack.setId(cursor.getLong(0));\r\ntrack.setName(cursor.getString(1));\r\ntrack.setDistance(cursor.getFloat(2));\r\ntrack.setDuration(cursor.getLong(3));\r\ntrack.setStartTime(cursor.getLong(4));\r\ntrack.setEndTime(cursor.getLong(5));\r\ntrack.setAverageSpeed(cursor.getFloat(6));\r\ntrack.setAverage"}], "metadata": {"task_id": "OpenTracks/684", "ground_truth": "    this.cursor = cursor;\r\n    this.notifyDataSetChanged();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\TrackListAdapter.java"}}
{"prompt": "\n import androidx.appcompat.view.ActionMode\nimport android.view.Menu\n@Override\r\npublic boolean onCreateActionMode(ActionMode mode, Menu menu) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nreturn super.onCreateActionMode(mode, menu);\r\n}\r\n@Override\r\npublic boolean onPrepareActionMode(ActionMode mode, Menu menu) {\r\n// TODO Auto-generated method stub\r\nreturn super.onPrepareActionMode(mode, menu);\r\n}\r\n@Override\r\npublic boolean onActionItemClicked(ActionMode mode, MenuItem item) {\r\n// TODO Auto-generated method stub\r\nreturn super.onActionItemClicked(mode, item);\r\n}\r\n@Override\r\npublic void onDestroy"}], "metadata": {"task_id": "OpenTracks/685", "ground_truth": "    mode.getMenuInflater().inflate(R.menu.list_context_menu, menu);\r\n    return true;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\TrackListAdapter.java"}}
{"prompt": "\n import androidx.appcompat.view.ActionMode\nimport android.view.Menu\n@Override\r\npublic boolean onPrepareActionMode(ActionMode mode, Menu menu) {\r\n    selectionMode = true;\r", "choices": [{"text": "}\r\n@Override\r\npublic boolean onActionItemClicked(ActionMode mode, MenuItem item) {\r\n    switch (item.getItemId()) {\r\n        case R.id.action_delete:\r\n            // Delete selected items\r\n            mode.finish();\r\n            return true;\r\n        default:\r\n            return false;\r\n    }\r\n}\r\n@Override\r\npublic void onDestroyActionMode(ActionMode mode) {\r\n    selectionMode = false;\r\n    adapter.clearSelection();\r\n    adapter.notifyDataSetChanged();\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/686", "ground_truth": "    actionModeCallback.onPrepare(menu, null, getCheckedIds(), true);\r\n    return true;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\TrackListAdapter.java"}}
{"prompt": "\n import androidx.appcompat.view.ActionMode\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onActionItemClicked(ActionMode mode, MenuItem item) {\r\n    if (actionModeCallback.onClick(item.getItemId(), null, getCheckedIds())) {\r\n        mode.finish();\r", "choices": [{"text": "}\r\nreturn true;\r\n}\r\n@Override\r\npublic boolean onCreateActionMode(ActionMode mode, Menu menu) {\r\n    actionModeCallback.onCreateActionMode(mode, menu);\r\n    return true;\r\n}\r\n@Override\r\npublic void onDestroyActionMode(ActionMode mode) {\r\n    actionModeCallback.onDestroyActionMode(mode);\r\n}\r\n@Override\r\npublic boolean onPrepareActionMode(ActionMode mode, Menu menu) {\r\n    return actionModeCallback.onPrepareActionMode(mode, menu);\r\n}\r\n@Override\r\n"}], "metadata": {"task_id": "OpenTracks/687", "ground_truth": "    }\r\n    return true;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\TrackListAdapter.java"}}
{"prompt": "\n import androidx.appcompat.view.ActionMode\n@Override\r\npublic void onDestroyActionMode(ActionMode mode) {\r\n    selectionMode = false;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "OpenTracks/688", "ground_truth": "    setAllSelected(false);\r\n    actionModeCallback.onDestroy();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\TrackListAdapter.java"}}
{"prompt": "\n import java.util.List\nimport java.util.ArrayList\nprivate long[] getCheckedIds() {\r\n    List<Long> ids = new ArrayList<>();\r\n    for (int i = 0; i < selection.size(); i++) {\r\n        if (selection.valueAt(i)) {\r", "choices": [{"text": "ids.add(selection.keyAt(i));\r\n        }\r\n    }\r\n    return ids.toArray(new Long[ids.size()]);\r\n}\n"}], "metadata": {"task_id": "OpenTracks/689", "ground_truth": "            ids.add((long) selection.keyAt(i));\r\n        }\r\n    }\r\n    return ids.stream().mapToLong(i -> i).toArray();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\TrackListAdapter.java"}}
{"prompt": "\n public void setSelected(boolean isSelected) {\r", "choices": [{"text": "//     this.isSelected = isSelected;\r\n// }\r\n public boolean isSelected() {\r\n     return isSelected;\r\n }\r\n public void setSelectedItem(boolean isSelectedItem) {\r\n     this.isSelectedItem = isSelectedItem;\r\n }\r\n public boolean isSelectedItem() {\r\n     return isSelectedItem;\r\n }\r\n public void setItem(String item) {\r\n     this.item = item;\r\n }\r\n public String getItem() {\r\n     return item;\r\n }\r\n public void setItemColor(Color itemColor) {\r\n     this.itemColor = itemColor;\r\n }\r\n public Color getItemColor() {\r\n     return item"}], "metadata": {"task_id": "OpenTracks/690", "ground_truth": "    selection.put((int) getId(), isSelected);\r\n    view.setActivated(isSelected);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\TrackListAdapter.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Track\nimport java.util.List\nimport androidx.appcompat.view.ActionMode\nimport android.view.View\n@Override\r\npublic boolean onLongClick(View v) {\r\n    setSelected(!view.isActivated());\r\n    if (!selectionMode) {\r\n        actionMode = context.startSupportActionMode(TrackListAdapter.this);\r", "choices": [{"text": "}\r\n    return true;\r\n}\r\n}\r\n<file_sep>/app/src/main/java/de/dennisguse/opentracks/data/models/Track.java\n/*\n * Copyright 2012 <NAME>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law"}], "metadata": {"task_id": "OpenTracks/691", "ground_truth": "    } else {\r\n        actionMode.invalidate();\r\n    }\r\n    return true;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\TrackListAdapter.java"}}
{"prompt": "\n import android.widget.Filter\nimport android.widget.ArrayAdapter\nprotected void publishResults(CharSequence constraint, FilterResults results) {\r\n    if (ArrayAdapterFilterDisabled.this.getCount() > 0) {\r", "choices": [{"text": "//        ArrayAdapterFilterDisabled.this.notifyDataSetChanged();\r\n    }\r\n}\n"}], "metadata": {"task_id": "OpenTracks/693", "ground_truth": "        notifyDataSetChanged();\r\n    } else {\r\n        notifyDataSetInvalidated();\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ArrayAdapterFilterDisabled.java"}}
{"prompt": "\n public void shutdown() {\r", "choices": [{"text": "//     if (this.executor!= null) {\r\n//       this.executor.shutdown();\r\n//     }\r\n//   }\r\n// \r\n//   public void shutdownNow() {\r\n//     if (this.executor!= null) {\r\n//       this.executor.shutdownNow();\r\n//     }\r\n//   }\r\n// \r\n//   public boolean isShutdown() {\r\n//     if (this.executor!= null) {\r\n//       return this.executor.isShutdown();\r\n//     }\r\n//     return true"}], "metadata": {"task_id": "OpenTracks/694", "ground_truth": "    enqueueObjects.clear();\r\n    executorService.shutdown();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ExecutorListViewService.java"}}
{"prompt": "\n import java.util.concurrent.Future\nimport java.util.concurrent.ExecutionException\n/**\r\n * Execute the runnable for the object.\r\n *\r\n * @param object   the Object.\r\n * @param runnable the Runnable.\r\n */\r\npublic void execute(T object, Runnable runnable) {\r\n    if (!preExecute(object)) {\r\n        return;\r\n    }\r\n    new Thread(() -> {\r\n        Future<?> future = executorService.submit(runnable);\r\n        try {\r\n            future.get();\r\n        } catch (ExecutionException | InterruptedException e) {\r", "choices": [{"text": "//            e.printStackTrace();\r\n        } finally {\r\n            postExecute(object);\r\n        }\r\n    }).start();\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/695", "ground_truth": "            e.printStackTrace();\r\n        }\r\n        postExecute(object);\r\n    }).start();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ExecutorListViewService.java"}}
{"prompt": "\n /**\r\n * Before execution it must checks if the object is already enqueued.\r\n *\r\n * @param object the object to check.\r\n * @return       true if it can be executed or false otherwise.\r\n */\r\nprivate boolean preExecute(T object) {\r\n    synchronized (enqueueObjects) {\r\n        if (!enqueueObjects.contains(object)) {\r\n            enqueueObjects.add(object);\r\n            return true;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/696", "ground_truth": "        } else {\r\n            return false;\r\n        }\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ExecutorListViewService.java"}}
{"prompt": "\n /**\r\n * After execution remove the object from the queue.\r\n *\r\n * @param object the object to be removed from the queue.\r\n */\r\nprivate void postExecute(T object) {\r\n    synchronized (enqueueObjects) {\r", "choices": [{"text": "//        if (object!= null) {\r\n//            enqueueObjects.remove(object);\r\n//        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/697", "ground_truth": "        enqueueObjects.remove(object);\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ExecutorListViewService.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Distance\n/**\r\n * Gets a string for share owner, total time, and total distance.\r\n *\r\n * @param totalTime     the total time. Can be null\r\n * @param totalDistance the total distance. Can be null\r\n */\r\nprivate static String getTimeDistance(String totalTime, String totalDistance) {\r\n    StringBuilder builder = new StringBuilder();\r\n    if (totalTime != null && totalTime.length() != 0) {\r\n        if (builder.length() != 0) {\r\n            builder.append(\" \u2027 \");\r\n        }\r\n        builder.append(totalTime);\r\n    }\r\n    if (totalDistance != null && totalDistance.length() != 0) {\r\n        if (builder.length() != 0) {\r\n            builder.append(\" \");\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/698", "ground_truth": "        }\r\n        builder.append(\"(\").append(totalDistance).append(\")\");\r\n    }\r\n    return builder.toString();\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ListItemUtils.java"}}
{"prompt": "\n import android.content.Context\n/**\r\n * Convert display density to physical pixel.\r\n */\r\npublic static int dpToPx(Context context, int dp) {\r", "choices": [{"text": "return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, context.getResources().getDisplayMetrics());\r\n}\r\n/**\r\n * Convert physical pixel to display density.\r\n */\r\npublic static int pxToDp(Context context, int px) {\r\nreturn (int) (px / context.getResources().getDisplayMetrics().density);\r\n}\r\n/**\r\n * Convert display density to scaled pixel.\r\n */\r\npublic static int dpToSp(Context context, int dp) {\r\nreturn (int) TypedValue.applyDimension(TypedValue."}], "metadata": {"task_id": "OpenTracks/701", "ground_truth": "    float density = context.getResources().getDisplayMetrics().density;\r\n    return Math.round(dp * density);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ResourceUtils.java"}}
{"prompt": "\n import android.widget.AbsListView\nimport android.view.View\n@Override\r\npublic void onScrollStateChanged(AbsListView view, int scrollState) {\r\n    if (scrollState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE || scrollState == AbsListView.OnScrollListener.SCROLL_STATE_FLING || scrollState == AbsListView.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL) {\r\n        if (from >= 0 && to >= 0) {\r\n            for (int i = from; i < to; i++) {\r\n                View viewChild = view.getChildAt(i - from);\r", "choices": [{"text": "//                if (viewChild!= null) {\r\n//                    viewChild.setBackgroundColor(Color.parseColor(\"#00000000\"));\r\n//                }\r\n            }\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "OpenTracks/702", "ground_truth": "                visibleViewsListener.onViewVisible(viewChild, i);\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ScrollVisibleViews.java"}}
{"prompt": "\n import android.widget.AbsListView\nimport android.view.View\n@Override\r\npublic void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {\r", "choices": [{"text": "}\r\n@Override\r\npublic void onScrollStateChanged(AbsListView view, int scrollState) {\r\n}\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/703", "ground_truth": "    from = firstVisibleItem;\r\n    to = firstVisibleItem + visibleItemCount;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ScrollVisibleViews.java"}}
{"prompt": "\n import android.content.res.TypedArray\nimport android.content.Context\npublic static int getFontSizeSmallInPx(Context context) {\r\n    TypedArray typedArray = context.obtainStyledAttributes(com.google.android.material.R.style.TextAppearance_MaterialComponents_Body2, new int[] { android.R.attr.textSize });\r\n    int fontSize = typedArray.getDimensionPixelSize(0, 12);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "OpenTracks/707", "ground_truth": "    typedArray.recycle();\r\n    return fontSize;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ThemeUtils.java"}}
{"prompt": "\n import android.content.res.TypedArray\nimport android.content.Context\npublic static int getFontSizeMediumInPx(Context context) {\r\n    TypedArray typedArray = context.obtainStyledAttributes(com.google.android.material.R.style.TextAppearance_MaterialComponents_Body1, new int[] { android.R.attr.textSize });\r\n    int fontSize = typedArray.getDimensionPixelSize(0, 15);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "OpenTracks/708", "ground_truth": "    typedArray.recycle();\r\n    return fontSize;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\ui\\util\\ThemeUtils.java"}}
{"prompt": "\n public static EGM2008Correction createCorrection(Context context, Location location) throws IOException {\r\n    Indices indices = getIndices(location);\r\n    try (DataInputStream dataInputStream = new DataInputStream(context.getResources().openRawResource(EGM2008_5_DATA))) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/711", "ground_truth": "        return new EGM2008Correction(indices, dataInputStream);\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\EGM2008Utils.java"}}
{"prompt": "\n @VisibleForTesting\r\nstatic int getUndulationRaw(DataInputStream dataInputStream, Indices indices) throws IOException {\r\n    dataInputStream.reset();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/712", "ground_truth": "    int absoluteIndex = indices.getAbsoluteIndex();\r\n    return getUndulationRaw(dataInputStream, absoluteIndex);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\EGM2008Utils.java"}}
{"prompt": "\n import de.dennisguse.opentracks.settings.SettingsActivity\nimport de.dennisguse.opentracks.io.file.exporter.ExportTask\nimport android.content.Intent\n@Override\r\npublic void onExportError(ExportTask unused, String errorMessage) {\r\n    Intent intent = new Intent(context, SettingsActivity.class);\r\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\r", "choices": [{"text": "context.startActivity(intent);\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/715", "ground_truth": "    intent.putExtra(SettingsActivity.EXTRAS_EXPORT_ERROR_MESSAGE, errorMessage);\r\n    context.startActivity(intent);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\ExportUtils.java"}}
{"prompt": "\n import de.dennisguse.opentracks.io.file.TrackFileFormat\nimport de.dennisguse.opentracks.data.models.Track\nimport androidx.documentfile.provider.DocumentFile\nimport android.net.Uri\nimport android.content.Context\nprivate static Uri getExportDocumentFileUri(Context context, String exportFileName, TrackFileFormat trackFileFormat, DocumentFile directory) {\r\n    Uri exportDocumentFileUri = findFile(context, directory.getUri(), exportFileName);\r\n    if (exportDocumentFileUri == null) {\r\n        final DocumentFile file = directory.createFile(trackFileFormat.getMimeType(), exportFileName);\r\n        if (file != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/717", "ground_truth": "            exportDocumentFileUri = file.getUri();\r\n        }\r\n    }\r\n    return exportDocumentFileUri;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\ExportUtils.java"}}
{"prompt": "\n import de.dennisguse.opentracks.data.models.Track\nimport java.io.File\nimport android.content.Context\npublic static File getPhotoDir(Context context, Track.Id trackId) {\r\n    File photoDirectory = new File(getPhotoDir(context), \"\" + trackId.id());\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "OpenTracks/718", "ground_truth": "    photoDirectory.mkdirs();\r\n    return photoDirectory;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\FileUtils.java"}}
{"prompt": "\n /**\r\n * Gets the extension from a file name.\r\n *\r\n * @param fileName the file name\r\n * @return null if there is no extension or fileName is null.\r\n */\r\npublic static String getExtension(String fileName) {\r\n    if (fileName == null) {\r\n        return null;\r\n    }\r\n    int index = fileName.lastIndexOf('.');\r", "choices": [{"text": "if (index == -1) {\r\n        return null;\r\n    }\r\n    return fileName.substring(index + 1);\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/720", "ground_truth": "    if (index == -1) {\r\n        return null;\r\n    }\r\n    return fileName.substring(index + 1);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\FileUtils.java"}}
{"prompt": "\n import java.nio.channels.FileChannel\nimport java.io.FileOutputStream\nimport java.io.FileInputStream\nimport java.io.FileDescriptor\nimport java.io.File\n/**\r\n * Copy a File (src) to a File (dst).\r\n *\r\n * @param src source file.\r\n * @param dst destination file.\r\n */\r\npublic static void copy(FileDescriptor src, File dst) {\r\n    try (FileChannel in = new FileInputStream(src).getChannel();\r\n        FileChannel out = new FileOutputStream(dst).getChannel()) {\r\n        in.transferTo(0, in.size(), out);\r", "choices": [{"text": "}\r\n}\n"}], "metadata": {"task_id": "OpenTracks/723", "ground_truth": "    } catch (Exception e) {\r\n        // post to log\r\n        Log.e(TAG, e.getMessage());\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\FileUtils.java"}}
{"prompt": "\n import java.io.File\n/**\r\n * Delete the directory recursively.\r\n *\r\n * @param file the directory\r\n */\r\npublic static void deleteDirectoryRecurse(File file) {\r\n    if (file != null && file.exists() && file.isDirectory()) {\r\n        for (File child : file.listFiles()) {\r\n            deleteDirectoryRecurse(child);\r\n        }\r", "choices": [{"text": "\n import java.io.File\n/**\r\n * Delete the directory recursively.\r\n *\r\n * @param file the directory\r\n */\r\npublic static void deleteDirectoryRecurse(File file) {\r\n    if (file!= null && file.exists() && file.isDirectory()) {\r\n        for (File child : file.listFiles()) {\r\n            deleteDirectoryRecurse(child);\r\n        }\r\n//        file.delete();\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/724", "ground_truth": "        file.delete();\r\n    } else if (file != null && file.isFile()) {\r\n        file.delete();\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\FileUtils.java"}}
{"prompt": "\n import java.util.List\nimport java.util.ArrayList\nimport java.io.File\nimport androidx.documentfile.provider.DocumentFile\npublic static ArrayList<DocumentFile> getFiles(DocumentFile file) {\r\n    ArrayList<DocumentFile> files = new ArrayList<>();\r\n    if (!file.isDirectory()) {\r\n        files.add(file);\r\n        return files;\r\n    }\r\n    for (DocumentFile candidate : file.listFiles()) {\r\n        if (!candidate.isDirectory()) {\r\n            files.add(candidate);\r\n        } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/725", "ground_truth": "            files.addAll(getFiles(candidate));\r\n        }\r\n    }\r\n    return files;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\FileUtils.java"}}
{"prompt": "\n import androidx.documentfile.provider.DocumentFile\nimport android.net.Uri\nimport android.content.Context\npublic static DocumentFile toDocumentFile(Context context, Uri directoryUri) {\r\n    if (directoryUri == null) {\r\n        return null;\r\n    }\r\n    try {\r\n        return DocumentFile.fromTreeUri(context.getApplicationContext(), directoryUri);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/730", "ground_truth": "    } catch (Exception e) {\r\n        Log.w(TAG, \"Could not decode directory: \" + e.getMessage());\r\n    }\r\n    return null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\IntentUtils.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport androidx.activity.result.ActivityResultCaller\nimport android.content.Context\npublic void requestPermissionsIfNeeded(Context context, ActivityResultCaller caller, @Nullable Runnable onGranted, @Nullable RejectedCallback onRejected) {\r\n    if (!hasPermission(context)) {\r", "choices": [{"text": "//        if (onGranted!= null) {\r\n//            onGranted.run();\r\n//        }\r\n        if (onRejected!= null) {\r\n            onRejected.run();\r\n        }\r\n    } else {\r\n        if (onGranted!= null) {\r\n            onGranted.run();\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/731", "ground_truth": "        requestPermission(caller, onGranted, onRejected);\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\PermissionRequester.java"}}
{"prompt": "\n public static String formatDateTimeWithOffsetIfDifferent(OffsetDateTime odt) {\r\n    if (!odt.getOffset().equals(OffsetDateTime.now().getOffset())) {\r\n        return odt.toZonedDateTime().format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL));\r", "choices": [{"text": "}\r\nreturn odt.format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL));\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/732", "ground_truth": "    }\r\n    return odt.toZonedDateTime().format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM));\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\StringUtils.java"}}
{"prompt": "\n /**\r\n * Formats the elapsed time in the form \"H:MM:SS\".\r\n */\r\npublic static String formatElapsedTimeWithHour(@NonNull Duration time) {\r", "choices": [{"text": ""}], "metadata": {"task_id": "OpenTracks/733", "ground_truth": "    String value = formatElapsedTime(time);\r\n    return TextUtils.split(value, \":\").length == 2 ? \"0:\" + value : value;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\StringUtils.java"}}
{"prompt": "\n /**\r\n * Gets a string for category.\r\n *\r\n * @param category the category\r\n */\r\npublic static String getCategory(String category) {\r\n    if (category == null || category.length() == 0) {\r\n        return null;\r", "choices": [{"text": "}\r\nreturn category;\r\n}\r\n/**\r\n * Gets a string for category.\r\n *\r\n * @param category the category\r\n */\r\npublic static String getCategory(Category category) {\r\n    if (category == null) {\r\n        return null;\r\n}\r\nreturn category.toString();\r\n}\r\n/**\r\n * Gets a string for category.\r\n *\r\n * @param category the category\r\n */\r\npublic static String getCategory(int category) {\r\n    if (category == 0) {\r\n        return null;\r\n}\r\nreturn String.valueOf(category);"}], "metadata": {"task_id": "OpenTracks/738", "ground_truth": "    }\r\n    return \"[\" + category + \"]\";\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\StringUtils.java"}}
{"prompt": "\n /**\r\n * Gets the time, in milliseconds, from an XML date time string (ISO8601) as defined at <a href=\"http://www.w3.org/TR/xmlschema-2/#dateTime\">...</a>\r\n * Let's be lenient: if timezone information is not provided, UTC will be used.\r\n *\r\n * @param xmlDateTime the XML date time string\r\n */\r\npublic static OffsetDateTime parseTime(String xmlDateTime) {\r\n    try {\r\n        TemporalAccessor t = DateTimeFormatter.ISO_DATE_TIME.parseBest(xmlDateTime, ZonedDateTime::from, LocalDateTime::from);\r\n        if (t instanceof LocalDateTime localDateTime) {\r\n            Log.w(TAG, \"Date does not contain timezone information: using UTC.\");\r\n            t = localDateTime.atZone(ZoneOffset.UTC);\r\n        }\r\n        return OffsetDateTime.from(t);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "OpenTracks/740", "ground_truth": "    } catch (Exception e) {\r\n        Log.e(TAG, \"Invalid XML dateTime value\");\r\n        throw e;\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\StringUtils.java"}}
{"prompt": "\n import de.dennisguse.opentracks.BuildConfig\nimport android.content.pm.PackageManager\nimport android.content.pm.PackageInfo\nimport android.content.Context\n/**\r\n * Get the app version from the manifest.\r\n *\r\n * @return the version, or an empty string in case of failure.\r\n */\r\npublic static String getAppVersionName(Context context) {\r\n    try {\r\n        PackageInfo pi = context.getPackageManager().getPackageInfo(BuildConfig.APPLICATION_ID, PackageManager.GET_META_DATA);\r\n        return pi.versionName + \"/\" + BuildConfig.VERSION_NAME_FULL;\r", "choices": [{"text": "} catch (PackageManager.NameNotFoundException e) {\r\n        return \"\";\r\n}\r\n}\n"}], "metadata": {"task_id": "OpenTracks/743", "ground_truth": "    } catch (NameNotFoundException e) {\r\n        Log.w(TAG, \"Failed to get version info.\", e);\r\n        return \"\";\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\SystemUtils.java"}}
{"prompt": "\n import de.dennisguse.opentracks.BuildConfig\nimport androidx.core.content.pm.PackageInfoCompat\nimport android.content.pm.PackageManager\nimport android.content.pm.PackageInfo\nimport android.content.Context\npublic static Long getAppVersionCode(Context context) {\r\n    try {\r\n        PackageInfo pi = context.getPackageManager().getPackageInfo(BuildConfig.APPLICATION_ID, PackageManager.GET_META_DATA);\r\n        return PackageInfoCompat.getLongVersionCode(pi);\r", "choices": [{"text": "} catch (PackageManager.NameNotFoundException e) {\r\n        return null;\r\n}\r\n}\n"}], "metadata": {"task_id": "OpenTracks/744", "ground_truth": "    } catch (NameNotFoundException e) {\r\n        Log.w(TAG, \"Failed to get version info.\", e);\r\n        return -1L;\r\n    }\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\SystemUtils.java"}}
{"prompt": "\n import android.os.PowerManager.WakeLock\n/**\r\n * Releases the wake lock if it is held.\r\n *\r\n * @return null\r\n */\r\npublic static WakeLock releaseWakeLock(WakeLock wakeLock) {\r\n    if (wakeLock != null && wakeLock.isHeld()) {\r\n        wakeLock.release();\r", "choices": [{"text": "\n import android.os.PowerManager.WakeLock\n/**\r\n * Releases the wake lock if it is held.\r\n *\r\n * @return null\r\n */\r\npublic static WakeLock releaseWakeLock(WakeLock wakeLock) {\r\n    if (wakeLock!= null && wakeLock.isHeld()) {\r\n        wakeLock.release();\r\n}\r\nreturn null;\r\n}\r\n}\r\n<file_sep>/app/src/main/java/com/example/android/sunshine/app/MainActivity.java\npackage com.example.android.sunshine.app;\n\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.preference.PreferenceManager;\nimport android.support.v7.app.ActionBarActivity;\nimport android.util.Log;\nimport android.view.Menu;\nimport android"}], "metadata": {"task_id": "OpenTracks/745", "ground_truth": "    }\r\n    return null;\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\util\\SystemUtils.java"}}
{"prompt": "\n import android.view.LayoutInflater\nimport android.content.Context\npublic void initialize(Context context, LayoutInflater inflater) {\r", "choices": [{"text": "//...\r\n}\r\n"}], "metadata": {"task_id": "OpenTracks/761", "ground_truth": "    this.context = context;\r\n    this.binding = createViewBinding(inflater);\r\n}", "fpath": "OpenTracks\\src\\main\\java\\de\\dennisguse\\opentracks\\viewmodels\\StatisticViewHolder.java"}}
{"prompt": "\n import com.habitrpg.common.habitica.models.HabitResponse\nimport com.habitrpg.android.habitica.R\nprivate fun <T> processResponse(habitResponse: HabitResponse<T>): T? {\r\n        habitResponse.notifications?.let {\r\n            notificationsManager.setNotifications(it)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/0", "ground_truth": "        }\r\n        return habitResponse.data\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.models.HabitResponse\nimport com.habitrpg.android.habitica.R\nprivate suspend fun <T> process(apiCall: suspend () -> HabitResponse<T>): T? {\r\n        try {\r\n            return processResponse(apiCall())\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1", "ground_truth": "        } catch (throwable: Throwable) {\r\n            accept(throwable)\r\n        }\r\n        return null\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt"}}
{"prompt": " import com.habitrpg.common.habitica.api.Server\nvar languageCode String?\nvar lastAPICallURL String?\nvar retrofitAdapter Retrofit\noverride fun updateServerUrl(newAddress: String?) {\r\n        if (newAddress != null) {\r\n            hostConfig.address = newAddress\r", "choices": [{"text": " import com.habitrpg.common.habitica.api.Server\nvar languageCode String?\nvar lastAPICallURL String?\nvar retrofitAdapter Retrofit\noverride fun updateServerUrl(newAddress: String?) {\r\n        if (newAddress!= null) {\r\n            hostConfig.address = newAddress\r\n}\r\n}\n"}], "metadata": {"task_id": "habitica-android/2", "ground_truth": "            buildRetrofit()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.models.auth.UserAuthResponse\nimport com.habitrpg.common.habitica.models.auth.UserAuth\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.R\noverride suspend fun connectUser(username: String, password: String): UserAuthResponse? {\r\n        val auth = UserAuth()\r\n        auth.username = username\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/4", "ground_truth": "        auth.password = password\r\n        return process { this.apiService.connectLocal(auth) }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride suspend fun retrieveUser(withTasks: Boolean): User? {\r\n        val user = process { apiService.getUser() }\r\n        val tasks = getTasks()\r", "choices": [{"text": "//        if (withTasks) {\r\n//            user.tasks = tasks\r\n//        }\r\n        return user\r\n    }\n"}], "metadata": {"task_id": "habitica-android/7", "ground_truth": "        user?.tasks = tasks\r\n        return user\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt"}}
{"prompt": "\n override fun updateAuthenticationCredentials(userID: String?, apiToken: String?) {\r\n        this.hostConfig.userID = userID ?: \"\"\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/11", "ground_truth": "        this.hostConfig.apiKey = apiToken ?: \"\"\r\n        Analytics.setUserID(hostConfig.userID)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt"}}
{"prompt": "\nvar apiService ApiService\nvar erroredRequestCount\nvar retrofitAdapter Retrofit\n override suspend fun purchaseItem(type: String, itemKey: String, purchaseQuantity: Int): Void? {\r\n        return process {\r\n            apiService.purchaseItem(\r\n                type,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/12", "ground_truth": "                itemKey,\r\n                mapOf(Pair(\"quantity\", purchaseQuantity))\r\n            )\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt"}}
{"prompt": "\n import java.util.Date\nimport okhttp3.Request\nimport com.habitrpg.common.habitica.models.PurchaseValidationRequest\nimport com.habitrpg.android.habitica.R\noverride suspend fun validateSubscription(request: PurchaseValidationRequest): Any? {\r\n        return if (lastSubscribeCall == null || Date().time - lastSubscribeCall.time > 60000) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/13", "ground_truth": "            process { apiService.validateSubscription(request) }\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt"}}
{"prompt": "\n import com.habitrpg.shared.habitica.models.responses.FeedResponse\nimport com.habitrpg.android.habitica.R\noverride suspend fun feedPet(petKey: String, foodKey: String): FeedResponse? {\r\n        val response = apiService.feedPet(petKey, foodKey)\r", "choices": [{"text": "//        if (response.isSuccessful) {\r\n//            return response.body()\r\n//        } else {\r\n//            return null\r\n//        }\r\n        return response.body()\r\n    }\n"}], "metadata": {"task_id": "habitica-android/14", "ground_truth": "        response.data?.message = response.message\r\n        return process { response }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.User\noverride suspend fun changeClass(className: String?): User? {\r\n        return process {\r\n            if (className != null) {\r\n                apiService.changeClass(className)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/15", "ground_truth": "            } else {\r\n                apiService.changeClass()\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt"}}
{"prompt": "\n import java.util.Date\nimport okhttp3.Request\nimport com.habitrpg.common.habitica.models.PurchaseValidationResult\nimport com.habitrpg.common.habitica.models.PurchaseValidationRequest\nimport com.habitrpg.android.habitica.R\noverride suspend fun validatePurchase(request: PurchaseValidationRequest): PurchaseValidationResult? {\r\n        // make sure a purchase attempt doesn't happen\r\n        return if (lastPurchaseValidation == null || Date().time - lastPurchaseValidation.time > 5000) {\r", "choices": [{"text": "//            val result = purchaseValidationService.validatePurchase(request)\r\n//            lastPurchaseValidation = Date()\r\n//            result\r\n        } else {\r\n            PurchaseValidationResult(false, \"Purchase validation is disabled for this build\")\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/16", "ground_truth": "            return process { apiService.validatePurchase(request) }\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt"}}
{"prompt": "\n override suspend fun resetAccount(password: String): Void? {\r\n        val updateObject = HashMap<String, String>()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/18", "ground_truth": "        updateObject[\"password\"] = password\r\n        return process { apiService.resetAccount(updateObject) }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt"}}
{"prompt": "\n override suspend fun deleteAccount(password: String): Void? {\r\n        val updateObject = HashMap<String, String>()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/19", "ground_truth": "        updateObject[\"password\"] = password\r\n        return process { apiService.deleteAccount(updateObject) }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\noverride suspend fun sendPasswordResetEmail(email: String): Void? {\r\n        val data = HashMap<String, String>()\r", "choices": [{"text": "data[\"email\"] = email\r\nval result = post(data, \"users/resetPassword\")\r\nreturn Void()\r\n}\n"}], "metadata": {"task_id": "habitica-android/20", "ground_truth": "        data[\"email\"] = email\r\n        return process { apiService.sendPasswordResetEmail(data) }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt"}}
{"prompt": "\n override suspend fun updateLoginName(newLoginName: String, password: String): Void? {\r\n        val updateObject = HashMap<String, String>()\r\n        updateObject[\"username\"] = newLoginName\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/21", "ground_truth": "        updateObject[\"password\"] = password\r\n        return process { apiService.updateLoginName(updateObject) }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.User\noverride suspend fun updateUsername(newLoginName: String): Void? {\r\n        val updateObject = HashMap<String, String>()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/22", "ground_truth": "        updateObject[\"username\"] = newLoginName\r\n        return process { apiService.updateLoginName(updateObject) }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt"}}
{"prompt": "\n import com.habitrpg.shared.habitica.models.responses.VerifyUsernameResponse\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.R\noverride suspend fun verifyUsername(username: String): VerifyUsernameResponse? {\r\n        val updateObject = HashMap<String, String>()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/23", "ground_truth": "        updateObject[\"username\"] = username\r\n        return process { this.apiService.verifyUsername(updateObject) }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.User\noverride suspend fun transferGems(giftedID: String, amount: Int): Void? {\r\n        return process {\r\n            apiService.transferGems(\r\n                mapOf(\r\n                    Pair(\"toUserId\", giftedID),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/26", "ground_truth": "                    Pair(\"gemAmount\", amount)\r\n                )\r\n            )\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ApiClientImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.Challenge\noverride suspend fun retrieveChallenge(challengeID: String): Challenge? {\r\n        val challenge = apiClient.getChallenge(challengeID) ?: return null\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/28", "ground_truth": "        localRepository.save(challenge)\r\n        return challenge\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ChallengeRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.TaskList\nimport com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.models.social.Challenge\noverride suspend fun retrieveChallengeTasks(challengeID: String): TaskList? {\r\n        val tasks = apiClient.getChallengeTasks(challengeID)\r\n        if (tasks != null) {\r\n            val taskList = tasks.tasks.values.toList()\r\n            taskList.forEach {\r\n                it.ownerID = challengeID\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.models.tasks.TaskList\nimport com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.models.social.Challenge\noverride suspend fun retrieveChallengeTasks(challengeID: String): TaskList? {\r\n        val tasks = apiClient.getChallengeTasks(challengeID)\r\n        if (tasks!= null) {\r\n            val taskList = tasks.tasks.values.toList()\r\n            taskList.forEach {\r\n                it.ownerID = challengeID\r\n//                it.ownerType = \"challenge\"\r\n            }\r\n            return TaskList(taskList)\r\n        }\r\n        return null\r\n    }\n\noverride suspend fun retrieveChallenge(challengeID: String): Challenge? {\r\n        val challenge = apiClient.getChallenge(challengeID)\r\n        if (challenge!= null) {\r\n            return Challenge(challenge)\r\n        }\r\n        return null\r\n    }\n"}], "metadata": {"task_id": "habitica-android/29", "ground_truth": "            }\r\n            localRepository.save(taskList)\r\n        }\r\n        return tasks\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ChallengeRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.TaskList\nimport com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.models.social.Challenge\nprivate suspend fun addChallengeTasks(challenge: Challenge, addedTaskList: List<Task>) {\r\n        when {\r\n            addedTaskList.count() == 1 -> apiClient.createChallengeTask(challenge.id ?: \"\", addedTaskList[0])\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.models.tasks.TaskList\nimport com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.models.social.Challenge\nprivate suspend fun addChallengeTasks(challenge: Challenge, addedTaskList: List<Task>) {\r\n        when {\r\n            addedTaskList.count() == 1 -> apiClient.createChallengeTask(challenge.id?: \"\", addedTaskList[0])\r\n//            addedTaskList.count() > 1 -> apiClient.createChallengeTasks(challenge.id?: \"\", addedTaskList)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/30", "ground_truth": "            addedTaskList.count() > 1 -> apiClient.createChallengeTasks(challenge.id ?: \"\", addedTaskList)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ChallengeRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.models.social.Challenge\nimport com.habitrpg.android.habitica.models.LeaveChallengeBody\noverride suspend fun leaveChallenge(challenge: Challenge, keepTasks: String): Void? {\r\n        apiClient.leaveChallenge(challenge.id ?: \"\", LeaveChallengeBody(keepTasks))\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.models.social.Challenge\nimport com.habitrpg.android.habitica.models.LeaveChallengeBody\noverride suspend fun leaveChallenge(challenge: Challenge, keepTasks: String): Void? {\r\n        apiClient.leaveChallenge(challenge.id?: \"\", LeaveChallengeBody(keepTasks))\r\n}\n"}], "metadata": {"task_id": "habitica-android/33", "ground_truth": "        localRepository.setParticipating(currentUserID, challenge.id ?: \"\", false)\r\n        return null\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ChallengeRepositoryImpl.kt"}}
{"prompt": "\n import java.util.Date\nimport io.realm.RealmList\nimport com.habitrpg.android.habitica.models.ContentResult\noverride suspend fun retrieveContent(forced: Boolean): ContentResult? {\r\n        val now = Date().time\r\n        if (forced || now - this.lastContentSync > 300000) {\r\n            val content = apiClient.getContent() ?: return null\r\n            lastContentSync = now\r\n            content.special = RealmList()\r\n            content.special.add(mysteryItem)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/35", "ground_truth": "            localRepository.saveContent(content)\r\n            return content\r\n        }\r\n        return null\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\ContentRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.shops.ShopItem\nimport com.habitrpg.android.habitica.models.shops.Shop\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride suspend fun retrieveInAppRewards(): List<ShopItem>? {\r\n        val rewards = apiClient.retrieveInAppRewards()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/36", "ground_truth": "        if (rewards != null) {\r\n            localRepository.saveInAppRewards(rewards)\r\n        }\r\n        return rewards\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\InventoryRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.shared.habitica.models.responses.FeedResponse\nimport com.habitrpg.android.habitica.models.inventory.Pet\nimport com.habitrpg.android.habitica.models.inventory.Food\noverride suspend fun feedPet(pet: Pet, food: Food): FeedResponse? {\r\n        val feedResponse = apiClient.feedPet(pet.key, food.key) ?: return null\r", "choices": [{"text": "\n import com.habitrpg.shared.habitica.models.responses.FeedResponse\nimport com.habitrpg.android.habitica.models.inventory.Pet\nimport com.habitrpg.android.habitica.models.inventory.Food\noverride suspend fun feedPet(pet: Pet, food: Food): FeedResponse? {\r\n        val feedResponse = apiClient.feedPet(pet.key, food.key)?: return null\r\n//        val pet = petRepository.getPet(pet.key)?: return null\r\n//        pet.hunger = pet.hunger - food.hunger\r\n//        petRepository.updatePet(pet)\r\n        return feedResponse\r\n    }\n"}], "metadata": {"task_id": "habitica-android/41", "ground_truth": "        localRepository.feedPet(food.key, pet.key, feedResponse.value ?: 0, currentUserID)\r\n        return feedResponse\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\InventoryRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.user.Items\nimport com.habitrpg.android.habitica.models.inventory.Pet\nimport com.habitrpg.android.habitica.models.inventory.Item\nimport com.habitrpg.android.habitica.models.inventory.HatchingPotion\nimport com.habitrpg.android.habitica.models.inventory.Egg\noverride suspend fun hatchPet(egg: Egg, hatchingPotion: HatchingPotion, successFunction: () -> Unit): Items? {\r\n        if (appConfigManager.enableLocalChanges()) {\r\n            localRepository.hatchPet(egg.key, hatchingPotion.key, currentUserID)\r\n            successFunction()\r\n        }\r\n        val items = apiClient.hatchPet(egg.key, hatchingPotion.key) ?: return null\r\n        localRepository.save(items, currentUserID)\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.user.Items\nimport com.habitrpg.android.habitica.models.inventory.Pet\nimport com.habitrpg.android.habitica.models.inventory.Item\nimport com.habitrpg.android.habitica.models.inventory.HatchingPotion\nimport com.habitrpg.android.habitica.models.inventory.Egg\noverride suspend fun hatchPet(egg: Egg, hatchingPotion: HatchingPotion, successFunction: () -> Unit): Items? {\r\n        if (appConfigManager.enableLocalChanges()) {\r\n            localRepository.hatchPet(egg.key, hatchingPotion.key, currentUserID)\r\n            successFunction()\r\n        }\r\n        val items = apiClient.hatchPet(egg.key, hatchingPotion.key)?: return null\r\n        localRepository.save(items, currentUserID)\r\n//        if (items.pet!= null) {\r\n//            localRepository.save(items.pet, currentUserID)\r\n//        }\r\n        return items\r\n    }\n<file_sep>/app/src/main/java/com/habitrpg/android/habitica/models/user/User.kt\npackage com.habitrpg.android.habitica.models.user\n\nimport com.google.gson.annotations.SerializedName\nimport com.habitrpg.android.habitica.models.inventory.Pet\nimport com.habitrpg.android.habitica.models."}], "metadata": {"task_id": "habitica-android/42", "ground_truth": "        if (!appConfigManager.enableLocalChanges()) {\r\n            successFunction()\r\n        }\r\n        return items\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\InventoryRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.inventory.QuestContent\nimport com.habitrpg.android.habitica.models.inventory.Quest\noverride suspend fun inviteToQuest(quest: QuestContent): Quest? {\r\n        val newQuest = apiClient.inviteToQuest(\"party\", quest.key)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/43", "ground_truth": "        localRepository.changeOwnedCount(\"quests\", quest.key, currentUserID, -1)\r\n        return newQuest\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\InventoryRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.shops.ShopItem\nimport com.habitrpg.android.habitica.models.shops.Shop\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride suspend fun togglePinnedItem(item: ShopItem): List<ShopItem>? {\r\n        if (item.isValid) {\r\n            apiClient.togglePinnedItem(item.pinType ?: \"\", item.path ?: \"\")\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/45", "ground_truth": "        }\r\n        return retrieveInAppRewards()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\InventoryRepositoryImpl.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.first\nimport com.habitrpg.android.habitica.models.social.Group\noverride suspend fun transferGroupOwnership(groupID: String, userID: String): Group? {\r\n        val group = localRepository.getGroup(groupID).first()?.let { localRepository.getUnmanagedCopy(it) }\r", "choices": [{"text": "//        val group = localRepository.getGroup(groupID).first()\r\n        val user = localRepository.getUser(userID).first()\r\n        if (group == null || user == null) {\r\n            return null\r\n        }\r\n        val newGroup = group.copy(owner = user)\r\n        localRepository.updateGroup(newGroup)\r\n        return newGroup\r\n    }\n"}], "metadata": {"task_id": "habitica-android/47", "ground_truth": "        group?.leaderID = userID\r\n        return group?.let { apiClient.updateGroup(groupID, it) }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.members.Member\noverride suspend fun removeMemberFromGroup(groupID: String, userID: String): List<Member>? {\r", "choices": [{"text": "return null\r\n}\n"}], "metadata": {"task_id": "habitica-android/48", "ground_truth": "        apiClient.removeMemberFromGroup(groupID, userID)\r\n        return retrievePartyMembers(groupID, true)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.social.ChatMessage\noverride suspend fun retrieveGroupChat(groupId: String): List<ChatMessage>? {\r\n        val messages = apiClient.listGroupChat(groupId)\r", "choices": [{"text": "//        val messages = apiClient.listGroupChat(groupId)\r\n        return messages.map {\r\n            ChatMessage(\r\n                it.id,\r\n                it.text,\r\n                it.timestamp,\r\n                it.user.id,\r\n                it.user.name,\r\n                it.user.avatar,\r\n                it.user.username,\r\n                it.user.isFriend,\r\n                it.user.isFollowing,\r\n                it.user.isBlocked,\r\n                it.user.isMuted,\r\n                it.user.isBanned,\r\n                it.user.isDeleted,\r\n                it.user.isAnonymous,\r\n                it."}], "metadata": {"task_id": "habitica-android/49", "ground_truth": "        messages?.forEach { it.groupId = groupId }\r\n        return messages\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.social.ChatMessage\nimport com.habitrpg.android.habitica.models.responses.PostChatMessageResult\noverride suspend fun postGroupChat(groupId: String, messageObject: HashMap<String, String>): PostChatMessageResult? {\r\n        val result = apiClient.postGroupChat(groupId, messageObject)\r", "choices": [{"text": "//        val result = apiClient.postGroupChat(groupId, messageObject)\r\n        return result\r\n    }\n"}], "metadata": {"task_id": "habitica-android/52", "ground_truth": "        result?.message?.groupId = groupId\r\n        return result\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.social.ChatMessage\nimport com.habitrpg.android.habitica.models.responses.PostChatMessageResult\noverride suspend fun postGroupChat(groupId: String, message: String): PostChatMessageResult? {\r\n        val messageObject = HashMap<String, String>()\r", "choices": [{"text": "messageObject[\"message\"] = message\r\nval result = post(\r\n        \"groups/$groupId/chat\",\r\n        messageObject\r\n)\r\nreturn result.body()\r\n}\n"}], "metadata": {"task_id": "habitica-android/53", "ground_truth": "        messageObject[\"message\"] = message\r\n        return postGroupChat(groupId, messageObject)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.Group\noverride suspend fun retrieveGroup(id: String): Group? {\r\n        val group = apiClient.getGroup(id)\r\n        group?.let { localRepository.saveGroup(it) }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/54", "ground_truth": "        retrieveGroupChat(id)\r\n        return group\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.emptyFlow\nimport kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.social.Group\noverride fun getGroup(id: String?): Flow<Group?> {\r\n        if (id?.isNotBlank() != true) {\r\n            return emptyFlow()\r", "choices": [{"text": "\n import kotlinx.coroutines.flow.emptyFlow\nimport kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.social.Group\noverride fun getGroup(id: String?): Flow<Group?> {\r\n        if (id?.isNotBlank()!= true) {\r\n            return emptyFlow()\r\n}\r\n        return repository.getGroup(id)\r\n    }\n"}], "metadata": {"task_id": "habitica-android/55", "ground_truth": "        }\r\n        return localRepository.getGroup(id)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.InboxConversation\noverride suspend fun retrieveInboxConversations(): List<InboxConversation>? {\r\n        val conversations = apiClient.retrieveInboxConversations() ?: return null\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/61", "ground_truth": "        localRepository.saveInboxConversations(currentUserID, conversations)\r\n        return conversations\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.ChatMessage\noverride suspend fun postPrivateMessage(recipientId: String, messageObject: HashMap<String, String>): List<ChatMessage>? {\r", "choices": [{"text": "return null\r\n}\r\noverride suspend fun getPrivateMessages(recipientId: String): List<ChatMessage>? {\r\nreturn null\r\n}\r\noverride suspend fun getPrivateMessage(recipientId: String, messageId: String): ChatMessage? {\r\nreturn null\r\n}\r\noverride suspend fun deletePrivateMessage(recipientId: String, messageId: String): Boolean {\r\nreturn false\r\n}\r\noverride suspend fun getPrivateMessageCount(recipientId: String): Int {\r\nreturn 0\r\n}\r\noverride suspend fun getPrivateMessageCount(): Int {\r\nreturn"}], "metadata": {"task_id": "habitica-android/62", "ground_truth": "        apiClient.postPrivateMessage(messageObject)\r\n        return retrieveInboxMessages(recipientId, 0)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.ChatMessage\noverride suspend fun postPrivateMessage(recipientId: String, message: String): List<ChatMessage>? {\r\n        val messageObject = HashMap<String, String>()\r\n        messageObject[\"message\"] = message\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/63", "ground_truth": "        messageObject[\"toUserId\"] = recipientId\r\n        return postPrivateMessage(recipientId, messageObject)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.members.Member\noverride suspend fun retrievePartyMembers(id: String, includeAllPublicFields: Boolean): List<Member>? {\r\n        val members = apiClient.getGroupMembers(id, includeAllPublicFields)\r", "choices": [{"text": "//        val members = apiClient.getGroupMembers(id, includeAllPublicFields)\r\n        return members.map { Member(it) }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/64", "ground_truth": "        members?.let { localRepository.savePartyMembers(id, it) }\r\n        return members\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt"}}
{"prompt": "\n import java.util.UUID\nimport com.habitrpg.android.habitica.models.members.Member\noverride suspend fun retrieveMember(userId: String?, fromHall: Boolean): Member? {\r\n        return if (userId == null) {\r\n            null\r\n        } else {\r\n            if (fromHall) {\r\n                apiClient.getHallMember(userId)\r\n            } else {\r\n                try {\r\n                    val uuid = UUID.fromString(userId).toString()\r\n                    apiClient.getMember(uuid)\r\n                } catch (_: IllegalArgumentException) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/65", "ground_truth": "                    apiClient.getMemberWithUsername(userId)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.inventory.Quest\noverride suspend fun acceptQuest(user: User?, partyId: String): Void? {\r\n        apiClient.acceptQuest(partyId)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/67", "ground_truth": "        user?.let {\r\n            localRepository.updateRSVPNeeded(it, false)\r\n        }\r\n        return null\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.inventory.Quest\noverride suspend fun rejectQuest(user: User?, partyId: String): Void? {\r\n        apiClient.rejectQuest(partyId)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/68", "ground_truth": "        user?.let {\r\n            localRepository.updateRSVPNeeded(it, false)\r\n        }\r\n        return null\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.inventory.Quest\noverride suspend fun cancelQuest(partyId: String): Void? {\r\n        apiClient.cancelQuest(partyId)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "habitica-android/69", "ground_truth": "        localRepository.removeQuest(partyId)\r\n        return null\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.inventory.Quest\noverride suspend fun abortQuest(partyId: String): Quest? {\r\n        val quest = apiClient.abortQuest(partyId)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/70", "ground_truth": "        localRepository.removeQuest(partyId)\r\n        return quest\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.Group\noverride suspend fun rejectGroupInvite(groupId: String): Void? {\r\n        apiClient.rejectGroupInvite(groupId)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/71", "ground_truth": "        localRepository.rejectGroupInvitation(currentUserID, groupId)\r\n        return null\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.inventory.Quest\noverride suspend fun forceStartQuest(party: Group): Quest? {\r\n        val quest = apiClient.forceStartQuest(party.id, localRepository.getUnmanagedCopy(party))\r", "choices": [{"text": "//        localRepository.save(quest)\r\n        return quest\r\n    }\n"}], "metadata": {"task_id": "habitica-android/72", "ground_truth": "        localRepository.setQuestActivity(party, true)\r\n        return quest\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.members.Member\nimport com.habitrpg.android.habitica.models.Achievement\noverride suspend fun getMemberAchievements(userId: String?): List<Achievement>? {\r\n        return if (userId == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/73", "ground_truth": "            null\r\n        } else {\r\n            apiClient.getMemberAchievements(userId)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\SocialRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.Tag\noverride suspend fun createTag(tag: Tag): Tag? {\r\n        val savedTag = apiClient.createTag(tag) ?: return null\r\n        savedTag.userId = currentUserID\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/74", "ground_truth": "        localRepository.save(savedTag)\r\n        return savedTag\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TagRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.Tag\noverride suspend fun updateTag(tag: Tag): Tag? {\r\n        val savedTag = apiClient.updateTag(tag.id, tag) ?: return null\r\n        savedTag.userId = currentUserID\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/75", "ground_truth": "        localRepository.save(savedTag)\r\n        return savedTag\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TagRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.Tag\noverride suspend fun deleteTag(id: String): Void? {\r\n        apiClient.deleteTag(id)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/76", "ground_truth": "        localRepository.deleteTag(id)\r\n        return null\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TagRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.Tag\noverride suspend fun createTags(tags: Collection<Tag>): List<Tag> {\r\n        return tags.mapNotNull {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/77", "ground_truth": "            createTag(it)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TagRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.Tag\noverride suspend fun updateTags(tags: Collection<Tag>): List<Tag> {\r\n        return tags.mapNotNull {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/78", "ground_truth": "            updateTag(it)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TagRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.Tag\noverride suspend fun deleteTags(tagIds: Collection<String>): List<Void> {\r\n        return tagIds.mapNotNull {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/79", "ground_truth": "            deleteTag(it)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TagRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.shared.habitica.models.tasks.TasksOrder\nimport com.habitrpg.android.habitica.models.tasks.TaskList\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride suspend fun retrieveTasks(userId: String, tasksOrder: TasksOrder): TaskList? {\r\n        val tasks = apiClient.getTasks() ?: return null\r", "choices": [{"text": "\n import com.habitrpg.shared.habitica.models.tasks.TasksOrder\nimport com.habitrpg.android.habitica.models.tasks.TaskList\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride suspend fun retrieveTasks(userId: String, tasksOrder: TasksOrder): TaskList? {\r\n        val tasks = apiClient.getTasks()?: return null\r\n//        val tasks = apiClient.getTasks(userId)?: return null\r\n        val taskList = TaskList()\r\n        taskList.tasks = tasks.map {\r\n            val task = Task()\r\n            task.id = it.id\r\n            task.name = it.name\r\n            task.description = it.description\r\n            task.type = it.type\r\n            task.priority = it.priority\r\n            task.points = it.points\r\n            task.due = it.due\r\n            task.completed = it.completed\r\n            task.completedOn = it.completedOn\r\n            task.created = it.created\r\n            task.updated = it"}], "metadata": {"task_id": "habitica-android/80", "ground_truth": "        this.localRepository.saveTasks(userId, tasksOrder, tasks)\r\n        return tasks\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TaskRepositoryImpl.kt"}}
{"prompt": "\n import java.util.Locale\nimport java.util.Date\nimport java.text.SimpleDateFormat\nimport com.habitrpg.shared.habitica.models.tasks.TasksOrder\nimport com.habitrpg.android.habitica.models.tasks.TaskList\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride suspend fun retrieveTasks(userId: String, tasksOrder: TasksOrder, dueDate: Date): TaskList? {\r\n        val formatter = SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZZZZZ\", Locale.US)\r\n        val taskList = this.apiClient.getTasks(\"dailys\", formatter.format(dueDate)) ?: return null\r", "choices": [{"text": "\n import java.util.Locale\nimport java.util.Date\nimport java.text.SimpleDateFormat\nimport com.habitrpg.shared.habitica.models.tasks.TasksOrder\nimport com.habitrpg.android.habitica.models.tasks.TaskList\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride suspend fun retrieveTasks(userId: String, tasksOrder: TasksOrder, dueDate: Date): TaskList? {\r\n        val formatter = SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZZZZZ\", Locale.US)\r\n        val taskList = this.apiClient.getTasks(\"dailys\", formatter.format(dueDate))?: return null\r\n//        val taskList = this.apiClient.getTasks(\"dailys\", formatter.format(dueDate))?: return null\r\n        val tasks = taskList.tasks.map {\r\n            Task(\r\n                it.id,\r\n                it.name,\r\n                it.description,\r\n                it.type,\r\n                it.priority,\r\n                it.due,\r\n                it.points,\r\n                it.notes,\r\n                it.completed,\r\n                it.completedDate,\r\n                it.created,\r\n                it.modified,\r\n                it.tags,\r\n                it.checklist,\r\n                it.checklistItems,\r\n                it.checklistItemsCompleted,\r\n                it"}], "metadata": {"task_id": "habitica-android/82", "ground_truth": "        this.localRepository.saveTasks(userId, tasksOrder, taskList)\r\n        return taskList\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TaskRepositoryImpl.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.firstOrNull\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride suspend fun markTaskNeedsWork(task: Task, userID: String) {\r\n        val savedTask = apiClient.markTaskNeedsWork(task.id ?: \"\", userID)\r\n        if (savedTask != null) {\r\n            savedTask.id = task.id\r\n            savedTask.position = task.position\r\n            savedTask.group?.assignedUsersDetail?.firstOrNull { it.assignedUserID == userID }?.let {\r\n                it.completed = false\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/83", "ground_truth": "                it.completedDate = null\r\n            }\r\n            localRepository.save(savedTask)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TaskRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.models.tasks.ChecklistItem\noverride suspend fun scoreChecklistItem(taskId: String, itemId: String): Task? {\r\n        val task = apiClient.scoreChecklistItem(taskId, itemId)\r\n        val updatedItem: ChecklistItem? = task?.checklist?.lastOrNull { itemId == it.id }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/85", "ground_truth": "        if (updatedItem != null) {\r\n            localRepository.save(updatedItem)\r\n        }\r\n        return task\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TaskRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.Task\noverride suspend fun deleteTask(taskId: String): Void? {\r\n        apiClient.deleteTask(taskId) ?: return null\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.models.tasks.Task\noverride suspend fun deleteTask(taskId: String): Void? {\r\n        apiClient.deleteTask(taskId)?: return null\r\n}\n"}], "metadata": {"task_id": "habitica-android/86", "ground_truth": "        localRepository.deleteTask(taskId)\r\n        return null\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TaskRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.shared.habitica.models.tasks.TaskType\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride suspend fun updateTaskPosition(taskType: TaskType, taskID: String, newPosition: Int): List<String>? {\r\n        val positions = apiClient.postTaskNewPosition(taskID, newPosition) ?: return null\r", "choices": [{"text": "\n import com.habitrpg.shared.habitica.models.tasks.TaskType\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride suspend fun updateTaskPosition(taskType: TaskType, taskID: String, newPosition: Int): List<String>? {\r\n        val positions = apiClient.postTaskNewPosition(taskID, newPosition)?: return null\r\n//        val tasks = apiClient.getTasks(taskType)?: return null\r\n        return positions.map { it.id }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/87", "ground_truth": "        localRepository.updateTaskPositions(positions)\r\n        return positions\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TaskRepositoryImpl.kt"}}
{"prompt": "\n import kotlinx.coroutines.MainScope\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride fun updateTaskInBackground(task: Task, assignChanges: Map<String, MutableList<String>>) {\r\n        MainScope().launchCatching {\r\n            val updatedTask = updateTask(task) ?: return@launchCatching\r", "choices": [{"text": "\n import kotlinx.coroutines.MainScope\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride fun updateTaskInBackground(task: Task, assignChanges: Map<String, MutableList<String>>) {\r\n        MainScope().launchCatching {\r\n            val updatedTask = updateTask(task)?: return@launchCatching\r\n//            val updatedTask = task.copy(\r\n//                assignChanges = assignChanges\r\n//            )\r\n            val updatedTask = updatedTask.copy(\r\n                assignChanges = assignChanges\r\n            )\r\n            updateTask(updatedTask)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/88", "ground_truth": "            handleAssignmentChanges(updatedTask, assignChanges)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TaskRepositoryImpl.kt"}}
{"prompt": "\n import kotlinx.coroutines.MainScope\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride fun createTaskInBackground(task: Task, assignChanges: Map<String, MutableList<String>>) {\r\n        MainScope().launchCatching {\r\n            val createdTask = createTask(task) ?: return@launchCatching\r", "choices": [{"text": "\n import kotlinx.coroutines.MainScope\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride fun createTaskInBackground(task: Task, assignChanges: Map<String, MutableList<String>>) {\r\n        MainScope().launchCatching {\r\n            val createdTask = createTask(task)?: return@launchCatching\r\n//            val task = getTask(createdTask.id)?: return@launchCatching\r\n            val task = createdTask\r\n            val changes = mutableMapOf<String, MutableList<String>>()\r\n            changes[\"_id\"] = mutableListOf(task.id)\r\n            changes[\"name\"] = mutableListOf(task.name)\r\n            changes[\"description\"] = mutableListOf(task.description)\r\n            changes[\"type\"] = mutableListOf(task.type)\r\n            changes[\"points\"] = mutableListOf(task.points)\r\n            changes[\"priority\"] = mutableListOf(task.priority)\r\n            changes[\"due\"] = mutableListOf"}], "metadata": {"task_id": "habitica-android/89", "ground_truth": "            handleAssignmentChanges(createdTask, assignChanges)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TaskRepositoryImpl.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.firstOrNull\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride suspend fun syncErroredTasks(): List<Task>? {\r\n        val tasks = localRepository.getErroredTasks(currentUserID ?: \"\").firstOrNull()\r\n        return tasks?.map { localRepository.getUnmanagedCopy(it) }?.mapNotNull {\r\n            if (it.isCreating) {\r\n                createTask(it, true)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/91", "ground_truth": "            } else {\r\n                updateTask(it, true)\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\TaskRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.user.Stats\noverride suspend fun syncUserStats(): User? {\r\n        val user = apiClient.syncUserStats()\r", "choices": [{"text": "//        val user = User(\r\n//            \"5e884890e4b023271c8b4567\",\r\n//            \"<EMAIL>\",\r\n//            \"<NAME>\",\r\n//            \"https://habitrpg.com/static/images/avatars/default-avatar.png\",\r\n//            \"https://habitrpg.com/static/images/avatars/default-avatar.png\",\r\n//            \"https://habitrpg.com/static/images/avatars/default-avatar.png\",\r"}], "metadata": {"task_id": "habitica-android/92", "ground_truth": "        if (user != null) {\r\n            localRepository.saveUser(user)\r\n        }\r\n        return user\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\UserRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.User\nprivate suspend fun updateUser(userID: String, updateData: Map<String, Any?>): User? {\r\n        val networkUser = apiClient.updateUser(updateData) ?: return null\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.models.user.User\nprivate suspend fun updateUser(userID: String, updateData: Map<String, Any?>): User? {\r\n        val networkUser = apiClient.updateUser(updateData)?: return null\r\n"}], "metadata": {"task_id": "habitica-android/93", "ground_truth": "        val oldUser = localRepository.getUser(userID).firstOrNull()\r\n        return mergeUser(oldUser, networkUser)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\UserRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.User\noverride suspend fun changeClass(selectedClass: String?): User? {\r", "choices": [{"text": "return null\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/96", "ground_truth": "        apiClient.changeClass(selectedClass)\r\n        return retrieveUser(false, forced = true)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\UserRepositoryImpl.kt"}}
{"prompt": " import com.habitrpg.common.habitica.models.Notification\nvar lastReadNotification String?\nvar lastSync Date?\noverride suspend fun readNotification(id: String): List<Any>? {\r\n        if (lastReadNotification == id) return null\r", "choices": [{"text": "lastReadNotification = id\r\n        return listOf(Notification(id, \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\","}], "metadata": {"task_id": "habitica-android/98", "ground_truth": "        lastReadNotification = id\r\n        return apiClient.readNotification(id)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\UserRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.User\noverride suspend fun changeCustomDayStart(dayStartTime: Int): User? {\r\n        val updateObject = HashMap<String, Any>()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/99", "ground_truth": "        updateObject[\"dayStart\"] = dayStartTime\r\n        return apiClient.changeCustomDayStart(updateObject)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\UserRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.User\noverride suspend fun updateLanguage(languageCode: String): User? {\r\n        val user = updateUser(\"preferences.language\", languageCode)\r", "choices": [{"text": ""}], "metadata": {"task_id": "habitica-android/100", "ground_truth": "        apiClient.languageCode = languageCode\r\n        return user\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\UserRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.User\noverride suspend fun resetAccount(password: String): User? {\r", "choices": [{"text": ""}], "metadata": {"task_id": "habitica-android/101", "ground_truth": "        apiClient.resetAccount(password)\r\n        return retrieveUser(withTasks = true, forced = true)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\UserRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.Achievement\noverride suspend fun retrieveAchievements(): List<Achievement>? {\r\n        val achievements = apiClient.getMemberAchievements(currentUserID) ?: return null\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.Achievement\noverride suspend fun retrieveAchievements(): List<Achievement>? {\r\n        val achievements = apiClient.getMemberAchievements(currentUserID)?: return null\r\nreturn achievements.achievements\r\n}\n"}], "metadata": {"task_id": "habitica-android/102", "ground_truth": "        localRepository.save(achievements)\r\n        return achievements\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\UserRepositoryImpl.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.TeamPlan\noverride suspend fun retrieveTeamPlans(): List<TeamPlan>? {\r\n        val teams = apiClient.getTeamPlans() ?: return null\r\n        teams.forEach { it.userID = currentUserID }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/103", "ground_truth": "        localRepository.save(teams)\r\n        return teams\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\UserRepositoryImpl.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.TeamPlan\noverride fun getTeamPlan(teamID: String): Flow<Group?> {\r\n        return localRepository.getTeamPlan(teamID)\r\n            .map {\r", "choices": [{"text": "\n import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.TeamPlan\noverride fun getTeamPlan(teamID: String): Flow<Group?> {\r\n        return localRepository.getTeamPlan(teamID)\r\n           .map {\r\n//                if (it!= null) {\r\n//                    it.copy(\r\n//                        teamPlan = it.teamPlan.map { teamPlan ->\r\n//                            teamPlan.copy(\r\n//                                team = teamPlan.team.map { team ->\r\n//                                    team.copy(\r\n//                                        teamPlan = team.teamPlan.map { teamPlan ->\r\n//                                            teamPlan.copy(\r\n//                                                team = teamPlan.team.map { team ->\r\n//                                                    team.copy(\r\n//                                                        teamPlan = team.teamPlan."}], "metadata": {"task_id": "habitica-android/104", "ground_truth": "                it ?: retrieveTeamPlan(teamID)\r\n            }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\implementation\\UserRepositoryImpl.kt"}}
{"prompt": "\n import io.realm.Realm\noverride fun executeTransaction(transaction: (Realm) -> Unit) {\r\n        pendingSaves.add(transaction)\r\n        if (isSaving.compareAndSet(false, true)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/106", "ground_truth": "            process()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmBaseLocalRepository.kt"}}
{"prompt": "\n import io.realm.RealmObject\nimport io.realm.Realm\nimport com.habitrpg.android.habitica.models.BaseObject\noverride fun <T : BaseObject> getUnmanagedCopy(managedObject: T): T {\r\n        return if (managedObject is RealmObject && managedObject.isManaged && managedObject.isValid) {\r", "choices": [{"text": "//            managedObject.copyToRealmOrUpdate()\r\n            managedObject.copyToRealmOrUpdate()\r\n        } else {\r\n            managedObject\r\n        }\r\n    }\n}\n"}], "metadata": {"task_id": "habitica-android/107", "ground_truth": "            realm.copyFromRealm(managedObject)\r\n        } else {\r\n            managedObject\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmBaseLocalRepository.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.BaseObject\noverride fun <T : BaseObject> getUnmanagedCopy(list: List<T>): List<T> {\r", "choices": [{"text": "return list.map { it.copy(isManaged = false) }\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/108", "ground_truth": "        if (isClosed) { return emptyList() }\r\n        return realm.copyFromRealm(list)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmBaseLocalRepository.kt"}}
{"prompt": "\n import io.realm.RealmModel\nimport io.realm.Realm\nprivate fun <T : RealmModel> copy(realm: Realm, obj: T) {\r\n        try {\r\n            realm.insertOrUpdate(obj)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/109", "ground_truth": "        } catch (_: java.lang.IllegalArgumentException) {\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmBaseLocalRepository.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.BaseObject\noverride fun <T : BaseObject> save(obj: T) {\r\n        pendingSaves.add(obj)\r\n        if (isSaving.compareAndSet(false, true)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/110", "ground_truth": "            process()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmBaseLocalRepository.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.BaseObject\noverride fun <T : BaseObject> save(objects: List<T>) {\r\n        pendingSaves.add(objects)\r\n        if (isSaving.compareAndSet(false, true)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/111", "ground_truth": "            process()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmBaseLocalRepository.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.ChallengeMembership\nimport com.habitrpg.android.habitica.models.social.Challenge\noverride fun getChallengeMembership(userId: String, id: String) = realm.where(ChallengeMembership::class.java)\r\n        .equalTo(\"userID\", userId)\r\n        .equalTo(\"challengeID\", id)\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.models.social.ChallengeMembership\nimport com.habitrpg.android.habitica.models.social.Challenge\noverride fun getChallengeMembership(userId: String, id: String) = realm.where(ChallengeMembership::class.java)\r\n       .equalTo(\"userID\", userId)\r\n       .equalTo(\"challengeID\", id)\r\n"}], "metadata": {"task_id": "habitica-android/117", "ground_truth": "        .findAll()\r\n        .toFlow()\r\n        .filter { it.isLoaded }\r\n        .map { it.first() }\r\n        .filterNotNull()", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmChallengeLocalRepository.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.ChallengeMembership\nimport com.habitrpg.android.habitica.models.social.Challenge\noverride fun getChallengeMemberships(userId: String) = realm.where(ChallengeMembership::class.java)\r\n        .equalTo(\"userID\", userId)\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.models.social.ChallengeMembership\nimport com.habitrpg.android.habitica.models.social.Challenge\noverride fun getChallengeMemberships(userId: String) = realm.where(ChallengeMembership::class.java)\r\n       .equalTo(\"userID\", userId)\r\n"}], "metadata": {"task_id": "habitica-android/118", "ground_truth": "        .findAll()\r\n        .toFlow()\r\n        .filter { it.isLoaded }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmChallengeLocalRepository.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.inventory.Equipment\noverride fun getArmoireRemainingCount(): Flow<Int> {\r\n        return realm.where(Equipment::class.java)\r\n            .equalTo(\"klass\", \"armoire\")\r\n            .beginGroup()\r\n            .equalTo(\"released\", true)\r\n            .or()\r\n            .isNull(\"released\")\r\n            .endGroup()\r\n            .beginGroup()\r\n            .equalTo(\"owned\", false)\r\n            .or()\r\n            .isNull(\"owned\")\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/127", "ground_truth": "            .endGroup()\r\n            .findAll()\r\n            .toFlow()\r\n            .map { it.count() }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.inventory.Equipment\noverride fun getOwnedEquipment(type: String): Flow<out List<Equipment>> {\r\n        return realm.where(Equipment::class.java)\r\n            .equalTo(\"type\", type)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/128", "ground_truth": "            .equalTo(\"owned\", true)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.inventory.Equipment\noverride fun getOwnedEquipment(): Flow<out List<Equipment>> {\r\n        return realm.where(Equipment::class.java)\r", "choices": [{"text": ".findAll()\r\n.asFlow()\r\n.map { it.toList() }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/129", "ground_truth": "            .equalTo(\"owned\", true)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.inventory.Equipment\noverride fun getEquipmentType(type: String, set: String): Flow<out List<Equipment>> {\r\n        return realm.where(Equipment::class.java)\r\n            .equalTo(\"type\", type)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/130", "ground_truth": "            .equalTo(\"gearSet\", set)\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.user.Items\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride fun getItems(itemClass: Class<out Item>): Flow<List<Item>> {\r", "choices": [{"text": "return flow {\r\nval items = Items.get(itemClass)\r\nemit(items)\r\n}\r\n}\n"}], "metadata": {"task_id": "habitica-android/131", "ground_truth": "        return realm.where(itemClass).findAll().toFlow()\r\n            .filter { it.isLoaded }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.user.Items\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride fun getItems(itemClass: Class<out Item>, keys: Array<String>): Flow<List<Item>> {\r", "choices": [{"text": "return flow {\r\nemit(Items.values().toList())\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/132", "ground_truth": "        return realm.where(itemClass).`in`(\"key\", keys).findAll().toFlow()\r\n            .filter { it.isLoaded }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.firstOrNull\nimport com.habitrpg.android.habitica.models.user.OwnedItem\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride suspend fun changeOwnedCount(\r\n        type: String,\r\n        key: String,\r\n        userID: String,\r\n        amountToAdd: Int\r\n    ) {\r\n        val item = getOwnedItem(userID, type, key, true).firstOrNull()\r\n        if (item != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/138", "ground_truth": "            changeOwnedCount(item, amountToAdd)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.OwnedItem\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride fun changeOwnedCount(item: OwnedItem, amountToAdd: Int?) {\r\n        val liveItem = getLiveObject(item) ?: return\r\n        amountToAdd?.let { amount ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/139", "ground_truth": "            executeTransaction { liveItem.numberOwned = liveItem.numberOwned + amount }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.shops.ShopItem\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride fun getInAppRewards(): Flow<List<ShopItem>> {\r\n        return realm.where(ShopItem::class.java)\r\n            .findAll()\r", "choices": [{"text": "\n import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.shops.ShopItem\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride fun getInAppRewards(): Flow<List<ShopItem>> {\r\n        return realm.where(ShopItem::class.java)\r\n           .findAll()\r\n}\n"}], "metadata": {"task_id": "habitica-android/140", "ground_truth": "            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt"}}
{"prompt": "\n import io.realm.Realm\nimport com.habitrpg.android.habitica.models.user.Items\nimport com.habitrpg.android.habitica.models.shops.ShopItem\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride fun saveInAppRewards(onlineItems: List<ShopItem>) {\r\n        val localItems = realm.where(ShopItem::class.java).findAll().createSnapshot()\r\n        executeTransaction {\r\n            for (localItem in localItems) {\r\n                if (!onlineItems.contains(localItem)) {\r\n                    localItem.deleteFromRealm()\r", "choices": [{"text": "//                    localItem.delete()\r\n                }\r\n            }\r\n            for (onlineItem in onlineItems) {\r\n                if (!localItems.contains(onlineItem)) {\r\n                    realm.copyToRealmOrUpdate(onlineItem)\r\n                }\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/142", "ground_truth": "                }\r\n            }\r\n            realm.insertOrUpdate(onlineItems)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.user.Items\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride fun save(items: Items, userID: String) {\r\n        val user = realm.where(User::class.java).equalTo(\"id\", userID).findFirst() ?: return\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.user.Items\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride fun save(items: Items, userID: String) {\r\n        val user = realm.where(User::class.java).equalTo(\"id\", userID).findFirst()?: return\r\n//        val user = realm.where(User::class.java).equalTo(\"id\", userID).findFirst()?: return\r\n        val realmItems = realm.where(Item::class.java).equalTo(\"id\", items.id).findFirst()?: return\r\n        realmItems.name = items.name\r\n        realmItems.description = items.description\r\n        realmItems.image = items.image\r\n        realmItems.type = items.type\r\n        realmItems.rarity = items.rarity\r\n        realmItems.level = items.level\r\n        realmItems.xp = items.xp\r\n        realmItems.max = items.max\r\n       "}], "metadata": {"task_id": "habitica-android/144", "ground_truth": "        items.setItemTypes()\r\n        executeTransaction {\r\n            user.items = items\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.inventory.Item\noverride fun soldItem(userID: String, updatedUser: User): User {\r\n        val user = realm.where(User::class.java)\r\n            .equalTo(\"id\", userID)\r\n            .findFirst() ?: return updatedUser\r\n        executeTransaction {\r\n            val items = updatedUser.items\r\n            if (items != null) {\r\n                user.items = items\r\n            }\r\n            val stats = updatedUser.stats\r\n            if (stats != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/146", "ground_truth": "                user.stats = stats\r\n            }\r\n        }\r\n        return user\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmInventoryLocalRepository.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.social.GroupMembership\nimport com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.members.Member\noverride fun getGroupMemberships(userId: String): Flow<List<GroupMembership>> = realm.where(GroupMembership::class.java)\r\n        .equalTo(\"userID\", userId)\r", "choices": [{"text": "\n import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.social.GroupMembership\nimport com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.members.Member\noverride fun getGroupMemberships(userId: String): Flow<List<GroupMembership>> = realm.where(GroupMembership::class.java)\r\n       .equalTo(\"userID\", userId)\r\n.findAllAsync()\r\n       .asFlow()\r\n       .map { it.toList() }\n"}], "metadata": {"task_id": "habitica-android/148", "ground_truth": "        .findAll()\r\n        .toFlow()\r\n        .filter { it.isLoaded }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmSocialLocalRepository.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.GroupMembership\nimport com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.members.Member\noverride fun updateMembership(userId: String, id: String, isMember: Boolean) {\r\n        if (isMember) {\r\n            save(GroupMembership(userId, id))\r\n        } else {\r\n            val membership = realm.where(GroupMembership::class.java).equalTo(\"userID\", userId).equalTo(\"groupID\", id).findFirst()\r\n            if (membership != null) {\r\n                executeTransaction {\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.models.social.GroupMembership\nimport com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.members.Member\noverride fun updateMembership(userId: String, id: String, isMember: Boolean) {\r\n        if (isMember) {\r\n            save(GroupMembership(userId, id))\r\n        } else {\r\n            val membership = realm.where(GroupMembership::class.java).equalTo(\"userID\", userId).equalTo(\"groupID\", id).findFirst()\r\n            if (membership!= null) {\r\n                executeTransaction {\r\nrealm.where(GroupMembership::class.java).equalTo(\"userID\", userId).equalTo(\"groupID\", id).findFirst()?.deleteFromRealm()\r\n                }\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/149", "ground_truth": "                    membership.deleteFromRealm()\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmSocialLocalRepository.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.inventory.Quest\noverride fun saveGroup(group: Group) {\r\n        save(group)\r\n        if (group.quest == null) {\r\n            val existingQuest = realm.where(Quest::class.java).equalTo(\"id\", group.id).findFirst()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/150", "ground_truth": "            executeTransaction {\r\n                existingQuest?.deleteFromRealm()\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmSocialLocalRepository.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.members.Member\noverride fun getPartyMembers(partyId: String) = realm.where(Member::class.java)\r", "choices": [{"text": ".equalTo(\"partyId\", partyId)\r\n.findAll()\n"}], "metadata": {"task_id": "habitica-android/155", "ground_truth": "        .equalTo(\"party.id\", partyId)\r\n        .findAll()\r\n        .toFlow()", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmSocialLocalRepository.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.social.Group\noverride fun rejectGroupInvitation(userID: String, groupID: String) {\r\n        val user = realm.where(User::class.java).equalTo(\"id\", userID).findFirst()\r\n        executeTransaction {\r", "choices": [{"text": "//            user?.groups?.remove(groupID)\r\n            user?.groups?.remove(realm.where(Group::class.java).equalTo(\"id\", groupID).findFirst())\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/157", "ground_truth": "            user?.invitations?.removeInvitation(groupID)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmSocialLocalRepository.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.inventory.Quest\noverride fun removeQuest(partyId: String) {\r\n        val party = realm.where(Group::class.java).equalTo(\"id\", partyId).findFirst()\r\n        if (party != null) {\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.inventory.Quest\noverride fun removeQuest(partyId: String) {\r\n        val party = realm.where(Group::class.java).equalTo(\"id\", partyId).findFirst()\r\n        if (party!= null) {\r\n//            party.removeQuest(realm)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/158", "ground_truth": "            executeTransaction { party.quest = null }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmSocialLocalRepository.kt"}}
{"prompt": "\n import io.realm.Sort\nimport com.habitrpg.android.habitica.models.social.InboxConversation\noverride fun getInboxConversation(userId: String) = realm.where(InboxConversation::class.java)\r\n        .equalTo(\"userID\", userId)\r\n        .sort(\"timestamp\", Sort.DESCENDING)\r", "choices": [{"text": "\n import io.realm.Sort\nimport com.habitrpg.android.habitica.models.social.InboxConversation\noverride fun getInboxConversation(userId: String) = realm.where(InboxConversation::class.java)\r\n       .equalTo(\"userID\", userId)\r\n       .sort(\"timestamp\", Sort.DESCENDING)\r\n"}], "metadata": {"task_id": "habitica-android/162", "ground_truth": "        .findAll()\r\n        .toFlow()\r\n        .filter { it.isLoaded }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmSocialLocalRepository.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.emptyFlow\nimport kotlinx.coroutines.flow.Flow\nimport com.habitrpg.shared.habitica.models.tasks.TaskType\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride fun getTasks(taskType: TaskType, userID: String, includedGroupIDs: Array<String>): Flow<List<Task>> {\r\n        if (realm.isClosed) return emptyFlow()\r\n        return findTasks(taskType, userID)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/164", "ground_truth": "            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.Task\noverride fun saveCompletedTodos(userId: String, tasks: MutableCollection<Task>) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "habitica-android/167", "ground_truth": "        removeCompletedTodos(userId, tasks)\r\n        executeTransaction { realm1 -> realm1.insertOrUpdate(tasks) }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.filter\nimport com.habitrpg.android.habitica.models.tasks.ChecklistItem\nprivate fun removeOldChecklists(onlineItems: List<ChecklistItem>) {\r\n        val localItems = realm.where(ChecklistItem::class.java).findAll().createSnapshot()\r\n        val itemsToDelete = localItems.filterNot { onlineItems.contains(it) }\r\n        realm.executeTransaction {\r", "choices": [{"text": "           itemsToDelete.deleteAllFromRealm()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/168", "ground_truth": "            for (item in itemsToDelete) {\r\n                item.deleteFromRealm()\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.filter\nimport com.habitrpg.android.habitica.models.tasks.RemindersItem\nprivate fun removeOldReminders(onlineReminders: List<RemindersItem>) {\r\n        val localReminders = realm.where(RemindersItem::class.java).findAll().createSnapshot()\r\n        val itemsToDelete = localReminders.filterNot { onlineReminders.contains(it) }\r\n        realm.executeTransaction {\r", "choices": [{"text": "           itemsToDelete.forEach { it.deleteFromRealm() }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/169", "ground_truth": "            for (item in itemsToDelete) {\r\n                item.deleteFromRealm()\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.Task\nprivate fun sortTasks(taskMap: MutableMap<String, Task>, taskOrder: List<String>): List<Task> {\r\n        val taskList = ArrayList<Task>()\r\n        var position = 0\r\n        for (taskId in taskOrder) {\r\n            val task = taskMap[taskId]\r\n            if (task != null) {\r\n                task.position = position\r\n                taskList.add(task)\r\n                position++\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/170", "ground_truth": "                taskMap.remove(taskId)\r\n            }\r\n        }\r\n        return taskList\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.filter\nimport com.habitrpg.shared.habitica.models.tasks.TaskType\nimport com.habitrpg.android.habitica.models.tasks.TaskList\nimport com.habitrpg.android.habitica.models.tasks.Task\nprivate fun removeCompletedTodos(userID: String, onlineTaskList: MutableCollection<Task>) {\r\n        val localTasks = realm.where(Task::class.java)\r\n            .equalTo(\"ownerID\", userID)\r\n            .equalTo(\"typeValue\", TaskType.TODO.value)\r\n            .equalTo(\"completed\", true)\r\n            .findAll()\r\n            .createSnapshot()\r\n        val tasksToDelete = localTasks.filterNot { onlineTaskList.contains(it) }\r\n        executeTransaction {\r", "choices": [{"text": "\n import kotlinx.coroutines.flow.filter\nimport com.habitrpg.shared.habitica.models.tasks.TaskType\nimport com.habitrpg.android.habitica.models.tasks.TaskList\nimport com.habitrpg.android.habitica.models.tasks.Task\nprivate fun removeCompletedTodos(userID: String, onlineTaskList: MutableCollection<Task>) {\r\n        val localTasks = realm.where(Task::class.java)\r\n           .equalTo(\"ownerID\", userID)\r\n           .equalTo(\"typeValue\", TaskType.TODO.value)\r\n           .equalTo(\"completed\", true)\r\n           .findAll()\r\n           .createSnapshot()\r\n        val tasksToDelete = localTasks.filterNot { onlineTaskList.contains(it) }\r\n        executeTransaction {\r\n//            realm.where(Task::class.java)\r\n//               .equalTo(\"ownerID\", userID)\r\n//               .equalTo(\"typeValue\", TaskType.TODO.value)\r\n//               .equalTo(\"completed\", true)\r\n//               .findAll()\r\n//               .deleteAllFromRealm()\r\n            realm.copyToRealmOrUpdate(tasksToDelete)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/171", "ground_truth": "            for (localTask in tasksToDelete) {\r\n                localTask.deleteFromRealm()\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.Task\noverride fun deleteTask(taskID: String) {\r\n        val task = realm.where(Task::class.java).equalTo(\"id\", taskID).findFirst()\r\n        executeTransaction {\r", "choices": [{"text": "task?.deleteFromRealm()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/172", "ground_truth": "            if (task?.isManaged == true) {\r\n                task.deleteFromRealm()\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.Flow\nimport io.realm.Realm\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride fun getTaskCopy(taskId: String): Flow<Task> {\r\n        return getTask(taskId)\r\n            .map { task ->\r\n                return@map if (task.isManaged && task.isValid) {\r\n                    realm.copyFromRealm(task)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/174", "ground_truth": "                } else {\r\n                    task\r\n                }\r\n            }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride fun getErroredTasks(userID: String): Flow<List<Task>> {\r\n        return realm.where(Task::class.java)\r\n            .equalTo(\"ownerID\", userID)\r\n            .equalTo(\"hasErrored\", true)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/180", "ground_truth": "            .sort(\"position\")\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmTaskLocalRepository.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.Achievement\noverride fun getAchievements(): Flow<List<Achievement>> {\r\n        return realm.where(Achievement::class.java)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/185", "ground_truth": "            .sort(\"index\")\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmUserLocalRepository.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.filter\nimport com.habitrpg.android.habitica.models.Tag\nprivate fun removeOldTags(userId: String, onlineTags: List<Tag>) {\r\n        val tags = realm.where(Tag::class.java).equalTo(\"userId\", userId).findAll().createSnapshot()\r\n        val tagsToDelete = tags.filterNot { onlineTags.contains(it) }\r\n        executeTransaction {\r", "choices": [{"text": "//            realm.executeTransaction {\r\n                tagsToDelete.forEach { it.deleteFromRealm() }\r\n//            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/188", "ground_truth": "            for (tag in tagsToDelete) {\r\n                tag.deleteFromRealm()\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmUserLocalRepository.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.ChatMessage\noverride fun saveMessages(messages: List<ChatMessage>) {\r\n        executeTransaction {\r", "choices": [{"text": "//            val chatMessages = messages.map { it.toChatMessageEntity() }\r\n//            chatMessages.forEach { chatMessageEntity ->\r\n//                chatMessageEntity.id = chatMessageEntity.id?: chatMessageEntity.chatId.hashCode().toLong()\r\n//                chatMessageEntity.chatId = chatMessageEntity.chatId.hashCode().toLong()\r\n//                chatMessageEntity.chat = chatMessageEntity.chatId\r\n//                chatMessageEntity.chat = chatMessageEntity.chatId\r\n//                chatMessageEntity.chat = chatMessageEntity."}], "metadata": {"task_id": "habitica-android/189", "ground_truth": "            it.insertOrUpdate(messages)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmUserLocalRepository.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.Flow\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.Skill\noverride fun getSkills(user: User): Flow<List<Skill>> {\r\n        val habitClass =\r\n            if (user.preferences?.disableClasses == true) \"none\" else user.stats?.habitClass\r\n        return realm.where(Skill::class.java)\r\n            .equalTo(\"habitClass\", habitClass)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/192", "ground_truth": "            .sort(\"lvl\")\r\n            .findAll()\r\n            .toFlow()\r\n            .filter { it.isLoaded }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\data\\local\\implementation\\RealmUserLocalRepository.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.inventory.Animal\nimport com.habitrpg.android.habitica.R\nimport android.content.Context\nfun getTranslatedAnimalType(c: Context?, type: String?): String? {\r\n    if (c == null) {\r\n        return type\r\n    }\r\n\r\n    return when (type) {\r\n        \"drop\" -> c.getString(R.string.standard)\r\n        \"quest\" -> c.getString(R.string.quest)\r\n        \"wacky\" -> c.getString(R.string.wacky)\r\n        \"special\" -> c.getString(R.string.special)\r\n        \"premium\" -> c.getString(R.string.magic_potion)\r", "choices": [{"text": "//        \"premium\" -> c.getString(R.string.premium)\r\n        else -> type\r\n    }\r\n}\n<file_sep>/app/src/main/java/com/habitrpg/android/habitica/models/inventory/Inventory.kt\npackage com.habitrpg.android.habitica.models.inventory\n\nimport com.google.gson.annotations.SerializedName\n\ndata class Inventory(\n    @SerializedName(\"animals\")\n    val animals: List<Animal>?,\n    @SerializedName(\"items\")\n    val items: List<Item>?,\n    @SerializedName(\"quests\")"}], "metadata": {"task_id": "habitica-android/194", "ground_truth": "        else -> {\r\n            type\r\n        }\r\n    }\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\extensions\\AnimalExtensions.kt"}}
{"prompt": "\n import java.util.Locale\nimport java.util.Date\nimport java.text.SimpleDateFormat\nimport java.text.DateFormat\nfun Date.formatForLocale(): String {\r\n    val locale = Locale.getDefault()\r\n    val dateFormatter: DateFormat = if (locale == Locale.US || locale == Locale.ENGLISH) {\r\n        SimpleDateFormat(\"M/d/yy\", locale)\r\n    } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/197", "ground_truth": "        SimpleDateFormat.getDateInstance(DateFormat.LONG, locale)\r\n    }\r\n\r\n    return dateFormatter.format(this)\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\extensions\\DateExtensions.kt"}}
{"prompt": "\n import com.google.gson.JsonObject\nfun JsonObject?.getAsString(key: String): String {\r\n    if (this?.get(key)?.isJsonPrimitive == true) {\r\n        return this.get(key)?.asString ?: \"\"\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/198", "ground_truth": "    }\r\n    return \"\"\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\extensions\\JsonObjectExtensions.kt"}}
{"prompt": "\n import android.os.Build\nfun withImmutableFlag(flags: Int): Int {\r\n    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r", "choices": [{"text": "//        flags and (Build.FINGERPRINT.contains(\"samsung\") or Build.FINGERPRINT.contains(\"xiaomi\"))\r\n        flags and (Build.FINGERPRINT.contains(\"samsung\") or Build.FINGERPRINT.contains(\"xiaomi\"))\r\n    } else {\r\n        flags\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/199", "ground_truth": "        flags + PendingIntent.FLAG_IMMUTABLE\r\n    } else {\r\n        flags\r\n    }\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\extensions\\PendingIntentExtensions.kt"}}
{"prompt": "\n import android.os.Build\nfun withMutableFlag(flags: Int): Int {\r\n    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {\r", "choices": [{"text": "//        flags and (flags - 1) or 1\r\n        flags and (flags - 1) or 1\r\n    } else {\r\n        flags\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/200", "ground_truth": "        flags + PendingIntent.FLAG_MUTABLE\r\n    } else {\r\n        flags\r\n    }\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\extensions\\PendingIntentExtensions.kt"}}
{"prompt": "\n import java.util.Date\nimport java.time.format.DateTimeFormatterBuilder\nimport java.time.format.DateTimeFormatter\nfun formatter(): DateTimeFormatter =\r\n    DateTimeFormatterBuilder().append(DateTimeFormatter.ISO_LOCAL_DATE)\r\n        .appendPattern(\"['T'][' ']\")\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/204", "ground_truth": "        .append(DateTimeFormatter.ISO_LOCAL_TIME)\r\n        .appendPattern(\"[XX]\")\r\n        .toFormatter()", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\extensions\\ZonedDateExtensions.kt"}}
{"prompt": "\n import java.util.Date\nimport java.time.ZonedDateTime\nimport java.time.DayOfWeek\nimport com.habitrpg.android.habitica.models.tasks.Days\nfun ZonedDateTime.matchesRepeatDays(repeatDays: Days?): Boolean {\r\n    repeatDays ?: return true // If no repeatDays specified, assume it matches\r\n\r\n    return when (this.dayOfWeek) {\r\n        DayOfWeek.MONDAY -> repeatDays.m\r\n        DayOfWeek.TUESDAY -> repeatDays.t\r\n        DayOfWeek.WEDNESDAY -> repeatDays.w\r\n        DayOfWeek.THURSDAY -> repeatDays.th\r\n        DayOfWeek.FRIDAY -> repeatDays.f\r", "choices": [{"text": "\n import java.util.Date\nimport java.time.ZonedDateTime\nimport java.time.DayOfWeek\nimport com.habitrpg.android.habitica.models.tasks.Days\nfun ZonedDateTime.matchesRepeatDays(repeatDays: Days?): Boolean {\r\n    repeatDays?: return true // If no repeatDays specified, assume it matches\r\n\r\n    return when (this.dayOfWeek) {\r\n        DayOfWeek.MONDAY -> repeatDays.m\r\n        DayOfWeek.TUESDAY -> repeatDays.t\r\n        DayOfWeek.WEDNESDAY -> repeatDays.w\r\n        DayOfWeek.THURSDAY -> repeatDays.th\r\n        DayOfWeek.FRIDAY -> repeatDays.f\r\n//        DayOfWeek.SATURDAY -> repeatDays.s\r\n//        DayOfWeek.SUNDAY -> repeatDays.su\r\n        else -> false\r\n    }\r\n}\n"}], "metadata": {"task_id": "habitica-android/205", "ground_truth": "        DayOfWeek.SATURDAY -> repeatDays.s\r\n        DayOfWeek.SUNDAY -> repeatDays.su\r\n        else -> false\r\n    }\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\extensions\\ZonedDateExtensions.kt"}}
{"prompt": "\n import androidx.lifecycle.LifecycleOwner\noverride fun onResume(owner : LifecycleOwner) {\r", "choices": [{"text": "//    owner.lifecycle.addObserver(this)\r\n}\r\noverride fun onPause(owner : LifecycleOwner) {\r\n//    owner.lifecycle.removeObserver(this)\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/206", "ground_truth": "        super.onResume(owner)\r\n        lastResumeTime = Date().time\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\HabiticaBaseApplication.kt"}}
{"prompt": "\n import androidx.lifecycle.LifecycleOwner\noverride fun onPause(owner : LifecycleOwner) {\r\n        super.onPause(owner)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/207", "ground_truth": "        val duration = Date().time - lastResumeTime\r\n        addDurationToDay(duration / 1000)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\HabiticaBaseApplication.kt"}}
{"prompt": "\n import io.realm.Realm\noverride fun deleteDatabase(name: String): Boolean {\r\n        val realm = Realm.getDefaultInstance()\r\n        realm.executeTransaction { realm1 ->\r", "choices": [{"text": "realm1.deleteAll()\r\n        }\r\n        realm.close()\r\n        return super.deleteDatabase(name)\r\n    }\n"}], "metadata": {"task_id": "habitica-android/208", "ground_truth": "            realm1.deleteAll()\r\n            realm1.close()\r\n        }\r\n        return true\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\HabiticaBaseApplication.kt"}}
{"prompt": "\n import android.app.Activity\noverride fun onActivityPaused(activity: Activity) {\r\n        if (currentActivity?.get() == activity) {\r", "choices": [{"text": "//            currentActivity?.set(null)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/211", "ground_truth": "            currentActivity = null\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\HabiticaBaseApplication.kt"}}
{"prompt": "\n import java.security.MessageDigest\nfun String.md5(): String? {\r\n    return try {\r\n        val md = MessageDigest.getInstance(\"MD5\")\r\n        val array = md.digest(this.toByteArray())\r\n        val sb = StringBuffer()\r\n        for (i in array.indices) {\r\n            sb.append(Integer.toHexString(array[i].toInt() and 0xFF or 0x100).substring(1, 3))\r\n        }\r\n        sb.toString()\r\n    } catch (e: java.security.NoSuchAlgorithmException) {\r", "choices": [{"text": "//        e.printStackTrace()\r\n        null\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/213", "ground_truth": "        null\r\n    } catch (ex: UnsupportedEncodingException) {\r\n        null\r\n    }\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\AdHandler.kt"}}
{"prompt": "\n import android.content.Context\nfun whenAdsInitialized(context: Context, onComplete: () -> Unit) {\r\n            when (currentAdStatus) {\r\n                AdStatus.READY -> {\r\n                    onComplete()\r\n                }\r\n                AdStatus.DISABLED -> {\r\n                    return\r\n                }\r\n                AdStatus.UNINITIALIZED -> {\r\n                    initialize(context) {\r\n                        onComplete()\r\n                    }\r\n                }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/215", "ground_truth": "                AdStatus.INITIALIZING -> {\r\n                    return\r\n                }\r\n            }\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\AdHandler.kt"}}
{"prompt": "\n fun show() {\r\n        when (currentAdStatus) {\r\n            AdStatus.READY -> {\r\n                showRewardedAd()\r\n            }\r\n            AdStatus.DISABLED -> {\r\n                rewardAction(false)\r\n                return\r\n            }\r\n            AdStatus.UNINITIALIZED -> {\r\n                initialize(activity) {\r\n                    showRewardedAd()\r\n                }\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/217", "ground_truth": "            AdStatus.INITIALIZING -> {\r\n                return\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\AdHandler.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport com.amplitude.android.Configuration\nimport com.amplitude.android.Amplitude\nimport android.content.Context\nfun initialize(context: Context) {\r\n        amplitude = Amplitude(\r\n            Configuration(\r\n                context.getString(R.string.amplitude_app_id),\r", "choices": [{"text": "//                context.getString(R.string.amplitude_api_key),\r\n                context.getString(R.string.amplitude_api_key)\r\n            )\r\n        )\r\n    }\n"}], "metadata": {"task_id": "habitica-android/220", "ground_truth": "                context\r\n            )\r\n        )\r\n        firebase = FirebaseAnalytics.getInstance(context)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\Analytics.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport com.habitrpg.android.habitica.BuildConfig\nimport com.amplitude.android.events.Identify\nimport android.content.SharedPreferences\nfun identify(sharedPrefs: SharedPreferences) {\r\n        val identify = Identify()\r\n            .setOnce(\"androidStore\", BuildConfig.STORE)\r\n        sharedPrefs.getString(\"launch_screen\", \"\")?.let {\r\n            identify.set(\"launch_screen\", it)\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.R\nimport com.habitrpg.android.habitica.BuildConfig\nimport com.amplitude.android.events.Identify\nimport android.content.SharedPreferences\nfun identify(sharedPrefs: SharedPreferences) {\r\n        val identify = Identify()\r\n           .setOnce(\"androidStore\", BuildConfig.STORE)\r\n        sharedPrefs.getString(\"launch_screen\", \"\")?.let {\r\n            identify.set(\"launch_screen\", it)\r        }\r\n        sharedPrefs.getString(\"launch_screen_version\", \"\")?.let {\r\n            identify.set(\"launch_screen_version\", it)\r        }\r\n        sharedPrefs.getString(\"launch_screen_version_code\", \"\")?.let {\r\n            identify.set(\"launch_screen_version_code\", it)\r        }\r\n        sharedPrefs.getString(\"launch_screen_version_name\", \"\")?.let {\r\n            identify.set(\"launch_screen_version_name\", it)\r        }\r\n        sharedPrefs.getString(\"launch_screen_build_type\", \"\")?.let {\r\n            identify.set"}], "metadata": {"task_id": "habitica-android/221", "ground_truth": "        }\r\n        if (this::amplitude.isInitialized) {\r\n            amplitude.identify(identify)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\Analytics.kt"}}
{"prompt": "\n import java.util.Date\nfun handle(name: String?, endDate: Date?) {\r\n            if (endDate != null) {\r\n                this.eventEnd = endDate\r", "choices": [{"text": "\n import java.util.Date\nfun handle(name: String?, endDate: Date?) {\r\n            if (endDate!= null) {\r\n                this.eventEnd = endDate\r\n}\r\n}\n"}], "metadata": {"task_id": "habitica-android/228", "ground_truth": "            }\r\n            when (name) {\r\n                \"invert\" -> invertFools()\r\n            }\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\AprilFoolsHandler.kt"}}
{"prompt": "\n import java.util.Date\nprivate fun invertFools() {\r\n            /*AvatarView.postProcessors[AvatarView.LayerType.PET] = {\r\n                if (Date().after(eventEnd)) {\r\n                    null\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/229", "ground_truth": "                } else {\r\n                    InvertPostProcessor()\r\n                }\r\n            }*/\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\AprilFoolsHandler.kt"}}
{"prompt": "\n private fun handleChatMessage(type: String?, groupID: String?) {\r\n            when (type) {\r\n                \"party\" -> openPartyScreen()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/233", "ground_truth": "                \"guild\" -> openGuildDetailScreen(groupID)\r\n            }\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\NotificationOpenHandler.kt"}}
{"prompt": "\n import android.content.Intent\noverride fun configureMainIntent(intent: Intent) {\r\n        super.configureMainIntent(intent)\r", "choices": [{"text": "intent.putExtra(\"key\", \"value\")\r\n}\n"}], "metadata": {"task_id": "habitica-android/235", "ground_truth": "        intent.putExtra(\"type\", data?.get(\"type\"))\r\n        intent.putExtra(\"groupID\", data?.get(\"groupID\"))\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\notifications\\ChatMentionNotification.kt"}}
{"prompt": "\n import java.util.Locale\nimport java.util.Date\nimport java.text.SimpleDateFormat\nimport com.habitrpg.common.habitica.helpers.EmojiParser\nimport androidx.core.app.Person\nimport androidx.core.app.NotificationCompat\nimport android.os.Build\nimport android.app.Notification\nprivate fun makeMessageFromData(data: Map<String, String>): NotificationCompat.MessagingStyle.Message {\r\n        val sender = Person.Builder().setName(data[\"senderName\"]).build()\r\n        val dateFormat = SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", Locale.US)\r\n        val timestamp = data[\"timestamp\"]?.let { dateFormat.parse(it) } ?: Date()\r\n        val messageText = EmojiParser.parseEmojis(data[\"message\"]?.trim { it <= ' ' })\r\n        return NotificationCompat.MessagingStyle.Message(\r", "choices": [{"text": "\n import java.util.Locale\nimport java.util.Date\nimport java.text.SimpleDateFormat\nimport com.habitrpg.common.habitica.helpers.EmojiParser\nimport androidx.core.app.Person\nimport androidx.core.app.NotificationCompat\nimport android.os.Build\nimport android.app.Notification\nprivate fun makeMessageFromData(data: Map<String, String>): NotificationCompat.MessagingStyle.Message {\r\n        val sender = Person.Builder().setName(data[\"senderName\"]).build()\r\n        val dateFormat = SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", Locale.US)\r\n        val timestamp = data[\"timestamp\"]?.let { dateFormat.parse(it) }?: Date()\r\n        val messageText = EmojiParser.parseEmojis(data[\"message\"]?.trim { it <='' })\r\n        return NotificationCompat.MessagingStyle.Message(\r\n                                                 messageText,\r\n                                                 timestamp,\r\n                                                 sender)\r\n    }\n\n"}], "metadata": {"task_id": "habitica-android/236", "ground_truth": "            messageText,\r\n            timestamp.time,\r\n            sender\r\n        )\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\notifications\\GroupActivityNotification.kt"}}
{"prompt": "\n import android.content.Intent\noverride fun configureMainIntent(intent: Intent) {\r\n        super.configureMainIntent(intent)\r", "choices": [{"text": "intent.putExtra(\"key\", \"value\")\r\n}\n"}], "metadata": {"task_id": "habitica-android/237", "ground_truth": "        intent.putExtra(\"type\", data?.get(\"type\"))\r\n        intent.putExtra(\"groupID\", data?.get(\"groupID\"))\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\notifications\\GroupActivityNotification.kt"}}
{"prompt": "\n import android.content.Intent\noverride fun configureMainIntent(intent: Intent) {\r", "choices": [{"text": "intent.putExtra(\"key\", \"value\")\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/238", "ground_truth": "        super.configureMainIntent(intent)\r\n        intent.putExtra(\"groupID\", data?.get(\"groupID\"))\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\notifications\\GuildInviteLocalNotification.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport androidx.core.app.NotificationCompat\nimport android.media.RingtoneManager\nopen fun configureNotificationBuilder(data: MutableMap<String, String>): NotificationCompat.Builder {\r\n        val path = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION)\r\n        return notificationBuilder\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/240", "ground_truth": "            .setSound(path)\r\n            .setColor(ContextCompat.getColor(context, R.color.brand_300))\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\notifications\\HabiticaLocalNotification.kt"}}
{"prompt": "\nval QUEST_BEGUN_PUSH_NOTIFICATION_KEY\nval GIFT_ONE_GET_ONE_PUSH_NOTIFICATION_KEY\nval CHANGE_USERNAME_PUSH_NOTIFICATION_KEY\n suspend fun removePushDeviceUsingStoredToken() {\r\n        if (this.refreshedToken.isEmpty() || !userHasPushDevice()) {\r\n            return\r", "choices": [{"text": "\nval QUEST_BEGUN_PUSH_NOTIFICATION_KEY\nval GIFT_ONE_GET_ONE_PUSH_NOTIFICATION_KEY\nval CHANGE_USERNAME_PUSH_NOTIFICATION_KEY\n suspend fun removePushDeviceUsingStoredToken() {\r\n        if (this.refreshedToken.isEmpty() ||!userHasPushDevice()) {\r\n            return\r\r\n        }\r\n        val request = RemovePushDeviceRequest(this.refreshedToken)\r\n        val response = this.api.removePushDevice(request)\r\n        if (response.isSuccessful) {\r\n            this.refreshedToken = \"\"\r\n            this.pushDeviceToken = \"\"\r\n            this.pushDeviceTokenExpiry = 0\r\n            this.pushDeviceTokenCreated = 0\r\n            this.pushDeviceTokenCreated = 0\r\n            this.pushDeviceTokenCreated = 0\r\n            this.pushDeviceTokenCreated = 0\r\n            this.pushDeviceTokenCreated = 0\r\n            this.pushDeviceTokenCreated = 0\r\n            this"}], "metadata": {"task_id": "habitica-android/245", "ground_truth": "        }\r\n        apiClient.deletePushDevice(refreshedToken)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\notifications\\PushNotificationManager.kt"}}
{"prompt": "\n private fun userHasPushDevice(): Boolean {\r\n        for (pushDevice in this.user?.pushDevices ?: emptyList()) {\r\n            if (pushDevice.regId == this.refreshedToken) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/246", "ground_truth": "                return true\r\n            }\r\n        }\r\n        return this.user?.pushDevices == null\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\notifications\\PushNotificationManager.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.models.Notification\noverride fun setNotifications(current: List<Notification>) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "habitica-android/248", "ground_truth": "        notificationsFlow.value = current\r\n        this.handlePopupNotifications(current)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\NotificationsManager.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.CoroutineScope\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.R\nprivate fun retryListening() {\r\n        listeningRetryCount += 1\r\n        CoroutineScope(Dispatchers.IO).launchCatching {\r", "choices": [{"text": "//            if (listeningRetryCount > 10) {\r\n//                return@launchCatching\r\n//            }\r\n            try {\r\n                val result = HabiticaApi.instance.listen()\r\n                if (result.isSuccessful) {\r\n                    listeningRetryCount = 0\r\n                    return@launchCatching\r\n                }\r\n            } catch (e: Exception) {\r\n                e.printStackTrace()\r\n            }\r\n            delay(1000)\r\n            retryListening()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/250", "ground_truth": "            // try again after 30 seconds\r\n            delay(30.seconds)\r\n            startListening()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\PurchaseHandler.kt"}}
{"prompt": "\n import com.android.billingclient.api.QueryProductDetailsParams.Product\nimport com.android.billingclient.api.ProductDetails\nprivate suspend fun getSKU(type: String, identifier: String): ProductDetails? {\r", "choices": [{"text": "val params = QueryProductDetailsParams.newBuilder()\r\n.setProductType(type)\r\n.setProductIds(listOf(identifier))\r\n.build()\r\nreturn billingClient.queryProductDetails(params).await().products.firstOrNull()\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/251", "ground_truth": "        val inventory = loadInventory(type, listOf(identifier))\r\n        return inventory?.firstOrNull()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\PurchaseHandler.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.MainScope\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.android.billingclient.api.Purchase\nprivate fun processedPurchase(purchase: Purchase) {\r\n        MainScope().launch(ExceptionHandler.coroutine()) {\r", "choices": [{"text": "//            val purchase = purchase.originalJson.toObject(Purchase::class.java)\r\n            val purchase = purchase.originalJson.toObject(Purchase::class.java)\r\n            val purchaseToken = purchase.purchaseToken\r\n            val productId = purchase.productId\r\n            val purchaseState = purchase.purchaseState\r\n            val purchaseTime = purchase.purchaseTime\r\n            val purchaseToken = purchase.purchaseToken\r\n            val purchaseToken = purchase.purchaseToken\r\n            val purchaseToken = purchase.purchaseToken\r\n            val purchaseToken = purchase.purchaseToken\r\n            val purchaseToken = purchase.purchaseToken\r\n            val purchaseToken = purchase.purchaseToken\r\n            val purchaseToken"}], "metadata": {"task_id": "habitica-android/253", "ground_truth": "            userViewModel.userRepository.retrieveUser(false, true)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\PurchaseHandler.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.User\nsuspend fun cancelSubscription(): User? {\r\n        if (alreadyTriedCancellation) return null\r\n        alreadyTriedCancellation = true\r", "choices": [{"text": ""}], "metadata": {"task_id": "habitica-android/254", "ground_truth": "        apiClient.cancelSubscription()\r\n        return userViewModel.userRepository.retrieveUser(false, true)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\PurchaseHandler.kt"}}
{"prompt": "\n fun addGift(sku: String, userID: String, username: String) {\r", "choices": [{"text": "//     val gift = Gift(sku, userID, username)\r\n//     giftRepository.addGift(gift)\r\n// }\r\n//\r\n// fun getGift(sku: String): Gift? {\r\n//     return giftRepository.getGift(sku)\r\n// }\r\n//\r\n// fun getGift(userID: String): List<Gift> {\r\n//     return giftRepository.getGift(userID)\r\n// }\r\n//\r\n// fun getGift(username: String): List<Gift> {\r\n//     return giftRepository"}], "metadata": {"task_id": "habitica-android/256", "ground_truth": "            pendingGifts[sku] = Triple(Date(), userID, username)\r\n            savePendingGifts()\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\PurchaseHandler.kt"}}
{"prompt": "\n import java.util.Date\nprivate fun removeGift(sku: String?): Triple<Date, String, String>? {\r\n            val gift = pendingGifts.remove(sku)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/257", "ground_truth": "            savePendingGifts()\r\n            return gift\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\PurchaseHandler.kt"}}
{"prompt": "\n import androidx.core.content.edit\nprivate fun incrementReviewRequestCount() {\r\n        val currentCount = sharedPref.getInt(REVIEW_REQUEST_COUNT_KEY, 0)\r\n        sharedPref.edit {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/260", "ground_truth": "            putInt(REVIEW_REQUEST_COUNT_KEY, currentCount + 1)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\ReviewManager.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.CoroutineScope\nimport com.habitrpg.android.habitica.models.tasks.Task\nfun removeAlarmsForTask(task: Task) {\r\n        CoroutineScope(Dispatchers.IO).launch {\r\n            task.reminders?.let { reminders ->\r\n                // Remove not only the immediate reminder, but also the next however many (upcomingReminderOccurrencesToSchedule) reminders\r\n                reminders.forEachIndexed { index, reminder ->\r", "choices": [{"text": "//                    if (index < 2) {\r\n                        val alarmManager = getApplication<Application>().getSystemService(Context.ALARM_SERVICE) as AlarmManager\r\n                        val intent = Intent(getApplication(), ReminderBroadcastReceiver::class.java)\r\n                        intent.putExtra(ReminderBroadcastReceiver.EXTRA_TASK_ID, task.id)\r\n                        intent.putExtra(ReminderBroadcastReceiver.EXTRA_REMINDER_ID, reminder.id)\r\n                        val pendingIntent = PendingIntent.getBroadcast(getApplication(), reminder.id, intent, PendingIntent.FLAG_UPDATE_CURRENT)\r\n                        alarmManager.cancel(pendingIntent)\r"}], "metadata": {"task_id": "habitica-android/261", "ground_truth": "                    removeAlarmForRemindersItem(reminder, index)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\TaskAlarmManager.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.firstOrNull\nimport kotlinx.coroutines.flow.first\nimport com.habitrpg.android.habitica.models.tasks.Task\nsuspend fun scheduleAllSavedAlarms(preventDailyReminder: Boolean) {\r\n        val tasks = taskRepository.getTaskCopies().firstOrNull()\r\n        tasks?.forEach { this.setAlarmsForTask(it) }\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/263", "ground_truth": "\r\n        if (!preventDailyReminder) {\r\n            scheduleDailyReminder(context)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\TaskAlarmManager.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nprivate fun joinToCount(dayStrings: List<String>?) =\r\n        if (dayStrings?.size == 2) {\r\n            context.getString(R.string.x_and_y, dayStrings[0], dayStrings[1])\r", "choices": [{"text": "} else {\r\n            context.getString(R.string.x_days, dayStrings?.size)\r\n}\n"}], "metadata": {"task_id": "habitica-android/265", "ground_truth": "        } else {\r\n            dayStrings?.joinToString(\", \") ?: \"\"\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\TaskDescriptionBuilder.kt"}}
{"prompt": "\n import java.util.Locale\nimport com.habitrpg.android.habitica.R\nimport android.os.Build\nimport android.icu.text.MessageFormat\nprivate fun withOrdinal(day: Int): String {\r\n        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n            val formatter = MessageFormat(\"{0,ordinal}\", Locale.getDefault())\r", "choices": [{"text": "           formatter.format(arrayOf(day))\r\n        } else {\r\n            day.toString()\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "habitica-android/266", "ground_truth": "            formatter.format(arrayOf(day))\r\n        } else {\r\n            day.toString()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\helpers\\TaskDescriptionBuilder.kt"}}
{"prompt": "\n import com.habitrpg.shared.habitica.models.responses.TaskScoringResult\nimport com.habitrpg.android.habitica.models.tasks.Task\noverride suspend fun run(requestValues: RequestValues): TaskScoringResult? {\r\n        val response = taskRepository.taskChecked(requestValues.user, requestValues.task, false, false, requestValues.notifyFunc)\r", "choices": [{"text": "//        val response = taskRepository.taskChecked(requestValues.user, requestValues.task, false, false, requestValues.notifyFunc)\r\n        return TaskScoringResult(response.data.task, response.data.score, response.data.score.toString())\r\n    }\r\n}<file_sep>/app/src/main/java/com/habitrpg/android/habitica/ui/tasks/TaskDetailFragment.kt\npackage com.habitrpg.android.habitica.ui.tasks\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android"}], "metadata": {"task_id": "habitica-android/268", "ground_truth": "        soundManager.loadAndPlayAudio(SoundManager.SoundReward)\r\n        return response\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\interactors\\BuyRewardUseCase.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nsuspend fun callInteractor(requestValues: Q): T {\r\n        return withContext(Dispatchers.Main) {\r", "choices": [{"text": "//            val response = interactor.execute(requestValues)\r\n//            return@withContext response\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/277", "ground_truth": "            run(requestValues)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\interactors\\UseCase.kt"}}
{"prompt": "\n override fun equals(other: Any?): Boolean {\r\n        if (other is CustomizationFilter) {\r\n            return onlyPurchased == other.onlyPurchased && ascending == other.ascending && months.size == other.months.size && months.containsAll(other.months)\r", "choices": [{"text": "}\r\n        return false\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/278", "ground_truth": "        }\r\n        return super.equals(other)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\CustomizationFilter.kt"}}
{"prompt": "\nval isFiltering Boolean\n override fun hashCode(): Int {\r\n        var result = onlyPurchased.hashCode()\r\n        result = 31 * result + ascending.hashCode()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/279", "ground_truth": "        result = 31 * result + months.hashCode()\r\n        return result\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\CustomizationFilter.kt"}}
{"prompt": "\n fun isSetDeal(): Boolean {\r\n        var total = 0\r\n        for (customization in customizations) {\r\n            if (!ownedCustomizations.contains(customization)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/280", "ground_truth": "                customization.price?.let { total += it }\r\n            }\r\n        }\r\n        return total >= price\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\inventory\\CustomizationSet.kt"}}
{"prompt": "\n import io.realm.RealmList\nfun addRageStrike(rageStrike: QuestRageStrike) {\r\n        if (rageStrikes == null) {\r\n            rageStrikes = RealmList()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/281", "ground_truth": "        }\r\n        rageStrikes?.add(rageStrike)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\inventory\\Quest.kt"}}
{"prompt": "\n fun getCollectWithKey(key: String?): QuestCollect? {\r\n        for (collect in this.collect ?: emptyList<QuestCollect>()) {\r\n            if (collect.key == key) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/282", "ground_truth": "                return collect\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\inventory\\QuestContent.kt"}}
{"prompt": "\nvar isCanBuy Boolean\nvar notes String\nvar category String?\n fun hasGifImage(): Boolean {\r", "choices": [{"text": "return gifImage!= null\r\n}\r\nfun hasImage(): Boolean {\r\nreturn image!= null\r\n}\r\nfun hasVideo(): Boolean {\r\nreturn video!= null\r\n}\r\nfun hasAudio(): Boolean {\r\nreturn audio!= null\r\n}\r\nfun hasText(): Boolean {\r\nreturn text!= null\r\n}\r\nfun hasGif(): Boolean {\r\nreturn gif!= null\r\n}\r\nfun hasVideoUrl(): Boolean {\r\nreturn videoUrl!= null\r\n}\r\nfun hasAudioUrl(): Boolean {\r\nreturn audioUrl!="}], "metadata": {"task_id": "habitica-android/283", "ground_truth": "        val gifImageKeys = listOf(\"lostMasterclasser4\")\r\n        return gifImageKeys.contains(key)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\inventory\\QuestContent.kt"}}
{"prompt": "\n fun removeInvitation(groupID: String) {\r\n        if (party?.id == groupID) {\r\n            party = null\r\n        }\r\n\r\n        guilds?.removeAll {\r\n            it.id == groupID\r\n        }\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "habitica-android/285", "ground_truth": "\r\n        parties?.removeAll {\r\n            it.id == groupID\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\invitations\\Invitations.kt"}}
{"prompt": "\n import android.graphics.drawable.Drawable\nimport android.content.Context\noverride fun promoBackgroundDrawable(context: Context): Drawable {\r", "choices": [{"text": "return context.getDrawable(R.drawable.promo_background)!!\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/286", "ground_truth": "        return ContextCompat.getDrawable(context, R.drawable.layout_rounded_bg_gray_10)\r\n            ?: ShapeDrawable()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\promotions\\FallExtraGemsHabiticaPromotion.kt"}}
{"prompt": "\n import android.graphics.drawable.Drawable\nimport android.content.Context\noverride fun buttonDrawable(context: Context): Drawable {\r", "choices": [{"text": "return context.getDrawable(R.drawable.ic_launcher_background)\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/287", "ground_truth": "        return ContextCompat.getDrawable(context, R.drawable.fall_promo_button_bg)\r\n            ?: ShapeDrawable()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\promotions\\FallExtraGemsHabiticaPromotion.kt"}}
{"prompt": "\n import android.graphics.drawable.Drawable\nimport android.content.Context\noverride fun promoBackgroundDrawable(context: Context): Drawable {\r", "choices": [{"text": "return context.getDrawable(R.drawable.promo_background)!!\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/288", "ground_truth": "        return ContextCompat.getDrawable(context, R.drawable.g1g1_promo_background)\r\n            ?: ShapeDrawable()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\promotions\\GiftOneGetOneHabiticaPromotion.kt"}}
{"prompt": "\n import android.graphics.drawable.Drawable\nimport android.content.Context\noverride fun buttonDrawable(context: Context): Drawable {\r", "choices": [{"text": "return context.getDrawable(R.drawable.ic_launcher_background)\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/289", "ground_truth": "        return ContextCompat.getDrawable(context, R.drawable.layout_rounded_bg_content)\r\n            ?: ShapeDrawable()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\promotions\\GiftOneGetOneHabiticaPromotion.kt"}}
{"prompt": "\n import android.graphics.drawable.Drawable\nimport android.content.Context\noverride fun promoBackgroundDrawable(context: Context): Drawable {\r", "choices": [{"text": "return context.getDrawable(R.drawable.promo_background)!!\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/291", "ground_truth": "        return ContextCompat.getDrawable(context, R.drawable.layout_rounded_bg_gray_10)\r\n            ?: ShapeDrawable()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\promotions\\SpookyExtraGemsHabiticaPromotion.kt"}}
{"prompt": "\n import android.graphics.drawable.Drawable\nimport android.content.Context\noverride fun buttonDrawable(context: Context): Drawable {\r", "choices": [{"text": "return context.getDrawable(R.drawable.ic_launcher_background)\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/292", "ground_truth": "        return ContextCompat.getDrawable(context, R.drawable.spooky_promo_button_bg)\r\n            ?: ShapeDrawable()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\promotions\\SpookyExtraGemsHabiticaPromotion.kt"}}
{"prompt": "\n import android.graphics.drawable.Drawable\nimport android.content.Context\noverride fun promoBackgroundDrawable(context: Context): Drawable {\r", "choices": [{"text": "return context.getDrawable(R.drawable.promo_background)!!\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/293", "ground_truth": "        return ContextCompat.getDrawable(context, R.drawable.g1g1_promo_background)\r\n            ?: ShapeDrawable()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\promotions\\Survey2021Promotion.kt"}}
{"prompt": "\n import android.graphics.drawable.Drawable\nimport android.content.Context\noverride fun buttonDrawable(context: Context): Drawable {\r", "choices": [{"text": "return context.getDrawable(R.drawable.ic_launcher_background)\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/294", "ground_truth": "        return ContextCompat.getDrawable(context, R.drawable.layout_rounded_bg_content)\r\n            ?: ShapeDrawable()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\promotions\\Survey2021Promotion.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.User\nfun canAfford(user: User?, quantity: Int): Boolean = when (currency) {\r\n        \"gold\" -> (value * quantity) <= (user?.stats?.gp ?: 0.0)\r\n        \"gems\" -> (value * quantity) <= (user?.gemCount ?: 0)\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.models.user.User\nfun canAfford(user: User?, quantity: Int): Boolean = when (currency) {\r\n        \"gold\" -> (value * quantity) <= (user?.stats?.gp?: 0.0)\r\n        \"gems\" -> (value * quantity) <= (user?.gemCount?: 0)\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/304", "ground_truth": "        \"hourglasses\" -> (value * quantity) <= (user?.hourglassCount ?: 0)\r\n        else -> true\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\shops\\ShopItem.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.content.Context\nfun readableUnlockCondition(context: Context): String = when (this.condition) {\r\n        \"party invite\" -> context.getString(R.string.party_invite)\r\n        \"login reward\" -> if (incentiveThreshold != null) context.getString(R.string.login_incentive_count, incentiveThreshold) else context.getString(R.string.login_incentive)\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.R\nimport android.content.Context\nfun readableUnlockCondition(context: Context): String = when (this.condition) {\r\n        \"party invite\" -> context.getString(R.string.party_invite)\r\n        \"login reward\" -> if (incentiveThreshold!= null) context.getString(R.string.login_incentive_count, incentiveThreshold) else context.getString(R.string.login_incentive)\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/308", "ground_truth": "        \"create account\" -> context.getString(R.string.create_account)\r\n        else -> \"\"\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\shops\\ShopItemUnlockCondition.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.content.Context\nfun shortReadableUnlockCondition(context: Context): String = when (this.condition) {\r\n        \"party invite\" -> context.getString(R.string.party_invite_short)\r\n        \"login reward\" -> if (incentiveThreshold != null) context.getString(R.string.login_incentive_short_count, incentiveThreshold) else context.getString(R.string.login_incentive_short)\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.R\nimport android.content.Context\nfun shortReadableUnlockCondition(context: Context): String = when (this.condition) {\r\n        \"party invite\" -> context.getString(R.string.party_invite_short)\r\n        \"login reward\" -> if (incentiveThreshold!= null) context.getString(R.string.login_incentive_short_count, incentiveThreshold) else context.getString(R.string.login_incentive_short)\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/309", "ground_truth": "        \"create account\" -> context.getString(R.string.create_account_short)\r\n        else -> \"\"\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\shops\\ShopItemUnlockCondition.kt"}}
{"prompt": "\nvar id String?\nvar description String?\nvar name String?\n override fun equals(other: Any?): Boolean {\r\n        return if (other?.javaClass == Challenge::class.java && this.id != null) {\r", "choices": [{"text": "\nvar id String?\nvar description String?\nvar name String?\n override fun equals(other: Any?): Boolean {\r\n        return if (other?.javaClass == Challenge::class.java && this.id!= null) {\r\nthis.id == (other as Challenge).id\r\n        } else {\r\n            false\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "habitica-android/310", "ground_truth": "            this.id == (other as Challenge).id\r\n        } else {\r\n            super.equals(other)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\social\\Challenge.kt"}}
{"prompt": "\nvar id String\nvar description String?\nvar summary String?\n override fun equals(other: Any?): Boolean {\r\n        if (this === other) {\r", "choices": [{"text": "           return true\r        }\r\n        if (other!is Issue) {\r            return false\r        }\n        val that = other as Issue\n        return id == that.id && description == that.description && summary == that.summary\r    }\r    override fun hashCode(): Int {\r        var result = id.hashCode()\r        result = 31 * result + (description?.hashCode()?: 0)\r        result = 31 * result + (summary?.hashCode()?: 0)\r        return result\r    }\r}\r<file_sep>/src/main/kotlin/com/github/"}], "metadata": {"task_id": "habitica-android/311", "ground_truth": "            return true\r\n        }\r\n        val group = other as? Group\r\n        return id == group?.id\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\social\\Group.kt"}}
{"prompt": "\nvar balance Double\nval hasActiveQuest Boolean\nval primaryIdentifier String?\n fun hasTaskEditPrivileges(userID: String): Boolean {\r\n        if (isLeader(userID)) {\r\n            return true\r", "choices": [{"text": "}\r\n        if (isModerator(userID)) {\r\n            return true\r\n}\r\n        if (isAdministrator(userID)) {\r\n            return true\r\n}\r\n        return false\r\n    }\n"}], "metadata": {"task_id": "habitica-android/312", "ground_truth": "        }\r\n        return isManager(userID)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\social\\Group.kt"}}
{"prompt": "\nvar id String\nvar name String\nvar group String?\n override fun equals(other: Any?): Boolean {\r\n        if (other is Tag) {\r\n            return this.id == other.id\r", "choices": [{"text": "}\r\n        return false\r\n    }\r\n}\n"}], "metadata": {"task_id": "habitica-android/313", "ground_truth": "        }\r\n        return super.equals(other)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\Tag.kt"}}
{"prompt": "\n import android.os.Parcel\noverride fun writeToParcel(dest: Parcel, flags: Int) {\r\n        dest.writeString(id)\r\n        dest.writeString(text)\r", "choices": [{"text": "}\r\noverride fun describeContents(): Int {\r\n        return 0\r\n}\r\ncompanion object CREATOR : Parcelable.Creator<Message> {\r\n        override fun createFromParcel(parcel: Parcel): Message {\r\n        return Message(parcel)\r\n        }\r\n        override fun newArray(size: Int): Array<Message?> {\r\n        return arrayOfNulls(size)\r\n        }\r\n}\r\n}\n"}], "metadata": {"task_id": "habitica-android/314", "ground_truth": "        dest.writeByte(if (completed) 1.toByte() else 0.toByte())\r\n        dest.writeInt(position)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\ChecklistItem.kt"}}
{"prompt": "\nvar id String?\nvar position Int\nvar completed Boolean\n override fun equals(other: Any?): Boolean {\r\n        return if (other is ChecklistItem) {\r", "choices": [{"text": "id == other.id && position == other.position && completed == other.completed\r\n        } else {\r\n            false\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "habitica-android/315", "ground_truth": "            this.id == other.id\r\n        } else {\r\n            super.equals(other)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\ChecklistItem.kt"}}
{"prompt": "\n import android.os.Parcel\noverride fun writeToParcel(dest: Parcel, flags: Int) {\r\n        dest.writeString(id)\r", "choices": [{"text": "}\r\noverride fun describeContents(): Int {\r\n        return 0\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/318", "ground_truth": "        dest.writeString(startDate)\r\n        dest.writeString(time)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\RemindersItem.kt"}}
{"prompt": "\nvar id String?\nvar type String?\nvar time String?\n override fun equals(other: Any?): Boolean {\r\n        return if (other is RemindersItem) {\r", "choices": [{"text": "id == other.id && type == other.type && time == other.time\r\n        } else {\r\n            false\r\n        }\r\n    }\r\noverride fun hashCode(): Int {\r\n        return Objects.hash(id, type, time)\r\n    }\r\n}<file_sep>/app/src/main/java/com/example/reminder/ui/main/MainViewModel.kt\npackage com.example.reminder.ui.main\n\nimport android.app.Application\nimport androidx.lifecycle.AndroidViewModel\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport com.example.reminder.data"}], "metadata": {"task_id": "habitica-android/319", "ground_truth": "            this.id == other.id\r\n        } else {\r\n            super.equals(other)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\RemindersItem.kt"}}
{"prompt": "\n fun completeForUser(userID: String?, completed: Boolean) {\r\n        if (isGroupTask && group?.assignedUsersDetail?.isNotEmpty() == true) {\r\n            group?.assignedUsersDetail?.firstOrNull { it.assignedUserID == userID }?.completed = completed\r\n            if (group?.assignedUsersDetail?.none { it.completed != completed } == true) {\r\n                this.completed = completed\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/321", "ground_truth": "            }\r\n        } else {\r\n            this.completed = completed\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\Task.kt"}}
{"prompt": "\nvar combinedID String?\nvar text String\nvar down Boolean?\n fun parseMarkdown() {\r", "choices": [{"text": "//    val text = \"Hello, **world**!\"\r\n//    val parser = Parser()\r\n//    val document = parser.parse(text)\r\n//    val html = HtmlRenderer().render(document)\r\n//    println(html)\r\n//    val document = parser.parse(text)\r\n//    val html = HtmlRenderer().render(document)\r\n//    println(html)\r\n//    val document = parser.parse(text)\r\n//    val html = HtmlRenderer().render(document)\r\n//    println(html)\r"}], "metadata": {"task_id": "habitica-android/325", "ground_truth": "        parsedText = MarkdownParser.parseMarkdown(text)\r\n        parsedNotes = MarkdownParser.parseMarkdown(notes)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\Task.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.helpers.MarkdownParser\nfun markdownText(callback: (CharSequence) -> Unit): CharSequence {\r\n        if (this.parsedText != null) {\r\n            return this.parsedText ?: \"\"\r\n        }\r\n\r\n        MarkdownParser.parseMarkdownAsync(this.text) { parsedText ->\r\n            this.parsedText = parsedText\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/326", "ground_truth": "            callback(parsedText)\r\n        }\r\n\r\n        return this.text\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\Task.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.helpers.MarkdownParser\nfun markdownNotes(callback: (CharSequence) -> Unit): CharSequence? {\r\n        if (parsedNotes != null) {\r\n            return parsedNotes\r\n        }\r\n\r\n        if (notes?.isNotEmpty() == true) {\r\n            MarkdownParser.parseMarkdownAsync(notes) { parsedText ->\r\n                parsedNotes = parsedText\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/327", "ground_truth": "                callback(parsedText)\r\n            }\r\n        }\r\n        return notes\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\Task.kt"}}
{"prompt": "\n override fun equals(other: Any?): Boolean {\r\n        if (other == null) {\r\n            return false\r\n        }\r\n        return if (Task::class.java.isAssignableFrom(other.javaClass)) {\r\n            val otherTask = other as? Task\r\n            if (this.isValid && otherTask?.isValid == true) {\r\n                this.id == otherTask.id\r\n            } else {\r\n                false\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/328", "ground_truth": "            }\r\n        } else {\r\n            super.equals(other)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\tasks\\Task.kt"}}
{"prompt": "\nvar id String\nvar summary String\nvar leaderID String?\n override fun equals(other: Any?): Boolean {\r\n        if (other is TeamPlan) {\r\n            return this.id == other.id\r", "choices": [{"text": "}\r\n        return false\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/331", "ground_truth": "        }\r\n        return super.equals(other)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\TeamPlan.kt"}}
{"prompt": "\n fun findFirstSocialEmail(): String? {\r\n        for (auth in listOf(googleAuthentication, appleAuthentication, facebookAuthentication)) {\r\n            if (auth?.emails?.isNotEmpty() == true) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/332", "ground_truth": "                return auth.emails.first()\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\user\\Authentication.kt"}}
{"prompt": "\n fun merge(stats: Training?) {\r\n        if (stats == null) {\r\n            return\r\n        }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/334", "ground_truth": "        con = stats.con\r\n        str = stats.str\r\n        per = stats.per\r\n        _int = stats._int\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\models\\user\\Training.kt"}}
{"prompt": "\n import java.security.KeyStore\nimport dagger.hilt.android.qualifiers.ApplicationContext\nimport dagger.Provides\nimport com.habitrpg.common.habitica.helpers.KeyHelper\nimport android.content.SharedPreferences\nimport android.content.Context\n @Provides\r\n    fun provideKeyHelper(\r\n        @ApplicationContext context: Context,\r\n        sharedPreferences: SharedPreferences,\r\n        keyStore: KeyStore?\r\n    ): KeyHelper? {\r\n        return if (keyStore == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/338", "ground_truth": "            null\r\n        } else {\r\n            getInstance(context, sharedPreferences, keyStore)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\modules\\AppModule.kt"}}
{"prompt": "\n import dagger.hilt.android.qualifiers.ApplicationContext\nimport dagger.Provides\nimport com.habitrpg.android.habitica.data.local.ContentLocalRepository\nimport com.habitrpg.android.habitica.data.implementation.ContentRepositoryImpl\nimport com.habitrpg.android.habitica.data.ContentRepository\nimport com.habitrpg.android.habitica.data.ApiClient\nimport android.content.Context\n @Provides\r\n    fun providesContentRepository(\r\n        contentLocalRepository: ContentLocalRepository,\r\n        apiClient: ApiClient,\r\n        @ApplicationContext context: Context,\r\n        authenticationHandler: AuthenticationHandler\r\n    ): ContentRepository {\r\n        return ContentRepositoryImpl(\r\n            contentLocalRepository,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/340", "ground_truth": "            apiClient,\r\n            context,\r\n            authenticationHandler\r\n        )\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\modules\\RepositoryModule.kt"}}
{"prompt": "\n import dagger.Provides\nimport com.habitrpg.android.habitica.helpers.AppConfigManager\nimport com.habitrpg.android.habitica.data.local.TaskLocalRepository\nimport com.habitrpg.android.habitica.data.implementation.TaskRepositoryImpl\nimport com.habitrpg.android.habitica.data.TaskRepository\nimport com.habitrpg.android.habitica.data.ApiClient\n @Provides\r\n    fun providesTaskRepository(\r\n        localRepository: TaskLocalRepository,\r\n        apiClient: ApiClient,\r\n        authenticationHandler: AuthenticationHandler,\r\n        appConfigManager: AppConfigManager,\r\n    ): TaskRepository {\r\n        return TaskRepositoryImpl(\r\n            localRepository,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/341", "ground_truth": "            apiClient,\r\n            authenticationHandler,\r\n            appConfigManager\r\n        )\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\modules\\UserRepositoryModule.kt"}}
{"prompt": "\n import dagger.Provides\nimport com.habitrpg.android.habitica.helpers.AppConfigManager\nimport com.habitrpg.android.habitica.data.local.UserLocalRepository\nimport com.habitrpg.android.habitica.data.implementation.UserRepositoryImpl\nimport com.habitrpg.android.habitica.data.UserRepository\nimport com.habitrpg.android.habitica.data.TaskRepository\nimport com.habitrpg.android.habitica.data.ApiClient\n @Provides\r\n    fun providesUserRepository(\r\n        localRepository: UserLocalRepository,\r\n        apiClient: ApiClient,\r\n        authenticationHandler: AuthenticationHandler,\r\n        taskRepository: TaskRepository,\r\n        appConfigManager: AppConfigManager,\r\n    ): UserRepository {\r\n        return UserRepositoryImpl(\r\n            localRepository,\r\n            apiClient,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/342", "ground_truth": "            authenticationHandler,\r\n            taskRepository,\r\n            appConfigManager,\r\n        )\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\modules\\UserRepositoryModule.kt"}}
{"prompt": "\n override fun onSetInitialValue(defaultValue: Any?) {\r\n        timeval = null\r\n        timeval = if (defaultValue == null) {\r\n            getPersistedString(\"19:00\")\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/343", "ground_truth": "        } else {\r\n            getPersistedString(defaultValue.toString())\r\n        }\r\n        summary = timeval ?: \"\"\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\prefs\\TimePreference.kt"}}
{"prompt": "\n import com.google.android.gms.wearable.MessageEvent\nimport android.content.Intent\nprivate fun openActivity(event: MessageEvent, activityClass: Class<*>) {\r\n        val intent = Intent(this, activityClass)\r\n        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK\r", "choices": [{"text": "//        intent.putExtra(EXTRA_MESSAGE, event.path)\r\n        startActivity(intent)\r\n    }\n"}], "metadata": {"task_id": "habitica-android/345", "ground_truth": "        startActivity(intent)\r\n        messageClient.sendMessage(event.sourceNodeId, \"/action_completed\", null)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\receivers\\DeviceCommunicationService.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.content.Intent\nimport android.content.Context\noverride fun onReceive(context: Context, intent: Intent) {\r\n        this.intent = intent\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "habitica-android/348", "ground_truth": "        this.context = context\r\n        handleLocalNotificationAction(intent.action)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\receivers\\LocalNotificationActionReceiver.kt"}}
{"prompt": "\n import android.widget.Toast\nimport android.text.Spannable\nprivate fun showToast(text: Spannable) {\r", "choices": [{"text": "Toast.makeText(this, text, Toast.LENGTH_SHORT).show()\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/349", "ground_truth": "        val toast = Toast.makeText(context, text, Toast.LENGTH_LONG)\r\n        toast.show()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\receivers\\LocalNotificationActionReceiver.kt"}}
{"prompt": "\n private fun getMessageText(key: String?): String? {\r\n        return intent?.let {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/350", "ground_truth": "            RemoteInput.getResultsFromIntent(it)?.getCharSequence(key)?.toString()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\receivers\\LocalNotificationActionReceiver.kt"}}
{"prompt": "\n import com.habitrpg.shared.habitica.models.tasks.TaskType\nimport androidx.preference.PreferenceManager\nimport androidx.core.content.edit\nprivate fun storeSelectedTaskType(selectedTaskType: TaskType) {\r\n        PreferenceManager.getDefaultSharedPreferences(this).edit {\r", "choices": [{"text": "//            putString(SELECTED_TASK_TYPE, selectedTaskType.name)\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "habitica-android/354", "ground_truth": "            putString(\"add_task_widget_$widgetId\", selectedTaskType.value)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\AddTaskWidgetActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r", "choices": [{"text": "return layoutInflater.inflate(layoutResId!!, null)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/355", "ground_truth": "        binding = ActivityAdventureGuideBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\AdventureGuideActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport androidx.core.app.NavUtils\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return if (item.itemId == android.R.id.home) {\r\n            NavUtils.navigateUpFromSameTask(this)\r", "choices": [{"text": "true\r\n        } else {\r\n            super.onOptionsItemSelected(item)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/356", "ground_truth": "            true\r\n        } else {\r\n            super.onOptionsItemSelected(item)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\AdventureGuideActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r", "choices": [{"text": "return layoutInflater.inflate(layoutResId!!, null)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/357", "ground_truth": "        binding = ActivityArmoireBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ArmoireActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\noverride fun onResume() {\r\n        super.onResume()\r", "choices": [{"text": "}\r\noverride fun onPause() {\r\n        super.onPause()\r\n}\r\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n}\r\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\n        super.onRestoreInstanceState(savedInstanceState)\r\n}\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n}\r"}], "metadata": {"task_id": "habitica-android/358", "ground_truth": "        lifecycleScope.launchCatching {\r\n            delay(500L)\r\n            startAnimation(true)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ArmoireActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.ui.views.dialogs.HabiticaBottomSheetDialog\nimport com.habitrpg.android.habitica.R\nprivate fun showDropRateDialog() {\r\n        val dialog = HabiticaBottomSheetDialog(this)\r", "choices": [{"text": "dialog.show()\r\n}\n"}], "metadata": {"task_id": "habitica-android/360", "ground_truth": "        dialog.setContentView(R.layout.armoire_drop_rate_dialog)\r\n        dialog.show()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ArmoireActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\noverride fun onResume() {\r\n        super.onResume()\r", "choices": [{"text": "}\r\noverride fun onPause() {\r\n        super.onPause()\r\n}\r\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n}\r\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\n        super.onRestoreInstanceState(savedInstanceState)\r\n}\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n}\r"}], "metadata": {"task_id": "habitica-android/362", "ground_truth": "        isActivityVisible = true\r\n        loadTheme(PreferenceManager.getDefaultSharedPreferences(this))\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\BaseActivity.kt"}}
{"prompt": "\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nmMapView.onPause()\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nmMapView.onResume()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nmMapView.onDestroy()\r\n}\r\noverride fun onLowMemory() {\r\nsuper.onLowMemory()\r\nmMapView.onLowMemory()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/363", "ground_truth": "        isActivityVisible = false\r\n        super.onPause()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\BaseActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            android.R.id.home -> {\r\n                onBackPressed()\r", "choices": [{"text": "return true\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.menu_main, menu)\r\n        return true\r\n    }\n"}], "metadata": {"task_id": "habitica-android/364", "ground_truth": "                return true\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\BaseActivity.kt"}}
{"prompt": "\n import android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        val ret = super.onCreateOptionsMenu(menu)\r", "choices": [{"text": "menu.add(0, 1, 0, \"Menu Item 1\")\r\nmenu.add(0, 2, 0, \"Menu Item 2\")\r\nmenu.add(0, 3, 0, \"Menu Item 3\")\r\nmenu.add(0, 4, 0, \"Menu Item 4\")\r\nmenu.add(0, 5, 0, \"Menu Item 5\")\r\nmenu.add(0, 6, 0, \"Menu Item 6\")\r\nmenu.add(0, "}], "metadata": {"task_id": "habitica-android/365", "ground_truth": "        toolbar?.let { ToolbarColorHelper.colorizeToolbar(it, this) }\r\n        return ret\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\BaseActivity.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/366", "ground_truth": "        destroyed = true\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\BaseActivity.kt"}}
{"prompt": "\nvar isActivityVisible\nvar forcedTheme String?\nvar destroyed Boolean\n fun reload() {\r\n        finish()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/369", "ground_truth": "        overridePendingTransition(R.anim.activity_fade_in, R.anim.activity_fade_out)\r\n        startActivity(intent)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\BaseActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport androidx.compose.ui.unit.sp\nprivate suspend fun purchaseWithGems() {\r\n        inventoryRepository.purchaseItem(\"pets\", \"Gryphatrice-Jubilant\", 1)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/370", "ground_truth": "        userRepository.retrieveUser(false, true)\r\n        isPurchasing.value = false\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\BirthdayActivity.kt"}}
{"prompt": "\n import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.tooling.preview.Devices\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material.rememberScaffoldState\nimport androidx.compose.material.ScaffoldState\nimport androidx.compose.material.Scaffold\nimport android.content.res.Configuration.UI_MODE_NIGHT_YES\n\r\n@Preview(device = Devices.PIXEL_4)\r\n@Preview(device = Devices.PIXEL_4, uiMode = UI_MODE_NIGHT_YES)\r\n@Composable\r\nprivate fun Preview() {\r\n    val scaffoldState = rememberScaffoldState()\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "habitica-android/371", "ground_truth": "    BirthdayActivityView(scaffoldState, true, false, false, \"\", Date(), Date(), {\r\n    }, {}) {}\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\BirthdayActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r", "choices": [{"text": "return layoutInflater.inflate(layoutResId!!, null)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/372", "ground_truth": "        binding = ActivityCreateChallengeBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ChallengeFormActivity.kt"}}
{"prompt": "\n import android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        val inflater = menuInflater\r", "choices": [{"text": "inflater.inflate(R.menu.menu_main, menu)\r\nreturn true\r\n}\n"}], "metadata": {"task_id": "habitica-android/373", "ground_truth": "        inflater.inflate(R.menu.menu_create_challenge, menu)\r\n        return super.onCreateOptionsMenu(menu)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ChallengeFormActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\npublic override fun onDestroy() {\r\n        socialRepository.close()\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "habitica-android/374", "ground_truth": "        challengeRepository.close()\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ChallengeFormActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.Challenge\nprivate fun onAddGem() {\r\n        var stringValue = binding.createChallengePrize.text.toString()\r\n        if (stringValue.isEmpty()) {\r\n            stringValue = \"0\"\r\n        }\r\n        var currentVal = Integer.parseInt(stringValue)\r\n        currentVal++\r", "choices": [{"text": "binding.createChallengePrize.setText(currentVal.toString())\r\n    }\n"}], "metadata": {"task_id": "habitica-android/375", "ground_truth": "\r\n        binding.createChallengePrize.setText(currentVal.toString())\r\n\r\n        checkPrizeAndMinimumForTavern()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ChallengeFormActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.Challenge\nimport com.habitrpg.android.habitica.R\nprivate fun onRemoveGem() {\r\n        var stringValue = binding.createChallengePrize.text.toString()\r\n        if (stringValue.isEmpty()) {\r\n            stringValue = \"0\"\r\n        }\r\n        var currentVal = Integer.parseInt(stringValue)\r\n        currentVal--\r", "choices": [{"text": "}\n\n"}], "metadata": {"task_id": "habitica-android/376", "ground_truth": "\r\n        binding.createChallengePrize.setText(currentVal.toString())\r\n\r\n        checkPrizeAndMinimumForTavern()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ChallengeFormActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.Group\nimport android.widget.TextView\nimport android.view.ViewGroup\nimport android.view.View\noverride fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n            val checkedTextView = super.getView(position, convertView, parent) as? TextView\r", "choices": [{"text": "//            checkedTextView?.setCompoundDrawablesWithIntrinsicBounds(0, 0, R.drawable.ic_check_box_black_24dp, 0)\r\n            return checkedTextView!!\r\n        }\n"}], "metadata": {"task_id": "habitica-android/379", "ground_truth": "            checkedTextView?.text = getItem(position)?.name\r\n            return checkedTextView ?: View(context)\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ChallengeFormActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.Group\nimport androidx.appcompat.widget.AppCompatCheckedTextView\nimport android.widget.TextView\nimport android.view.ViewGroup\nimport android.view.View\noverride fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n            val checkedTextView =\r\n                super.getDropDownView(position, convertView, parent) as? AppCompatCheckedTextView\r", "choices": [{"text": "checkedTextView?.text = getItem(position)?.name\r\n            return checkedTextView!!\r\n        }\n"}], "metadata": {"task_id": "habitica-android/380", "ground_truth": "            checkedTextView?.text = getItem(position)?.name\r\n            return checkedTextView ?: View(context)\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ChallengeFormActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.Task\nprivate fun createTask(taskName: String): Task {\r\n            val t = Task()\r\n\r", "choices": [{"text": "t.name = taskName\r\n\r\nreturn t\r\n        }\n"}], "metadata": {"task_id": "habitica-android/381", "ground_truth": "            t.id = \"addtask\"\r\n            t.text = taskName\r\n\r\n            return t\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ChallengeFormActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r", "choices": [{"text": "return layoutInflater.inflate(layoutResId!!, null)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/382", "ground_truth": "        binding = ActivityClassSelectionBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ClassSelectionActivity.kt"}}
{"prompt": "\n import android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r", "choices": [{"text": "menuInflater.inflate(R.menu.menu_main, menu)\r\nreturn true\r\n}\r\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\nwhen (item.itemId) {\r\nR.id.action_settings -> return true\r\nelse -> return super.onOptionsItemSelected(item)\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/383", "ground_truth": "        menuInflater.inflate(R.menu.class_selection, menu)\r\n        return true\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ClassSelectionActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.opt_out -> optOutSelected()\r", "choices": [{"text": "//            R.id.opt_in -> optInSelected()\r\n            else -> return super.onOptionsItemSelected(item)\r\n        }\r\n        return true\r\n    }\n"}], "metadata": {"task_id": "habitica-android/384", "ground_truth": "        }\r\n        return super.onOptionsItemSelected(item)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ClassSelectionActivity.kt"}}
{"prompt": "\nvar isClassSelected Boolean\nvar currentClass String?\nvar className String?\n private fun dismiss() {\r\n        if (shouldFinish == true) {\r\n            progressDialog?.dismiss()\r", "choices": [{"text": "//            finish()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/387", "ground_truth": "            finish()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ClassSelectionActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r", "choices": [{"text": "return layoutInflater.inflate(layoutResId!!, null)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/389", "ground_truth": "        binding = ActivityDeathBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\DeathActivity.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.helpers.Animations\nimport android.view.View\nprivate fun startAnimating() {\r\n        binding.ghostView.startAnimation(Animations.bobbingAnimation())\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/390", "ground_truth": "        binding.heartView.post {\r\n            makeCoins(305)\r\n            makeCoins(160)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\DeathActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r", "choices": [{"text": "return layoutInflater.inflate(layoutResId!!, null)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/391", "ground_truth": "        binding = ActivityFixcharacterBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FixCharacterValuesActivity.kt"}}
{"prompt": "\n import android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r", "choices": [{"text": "menuInflater.inflate(R.menu.menu_main, menu)\r\nreturn true\r\n}\r\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\nwhen (item.itemId) {\r\nR.id.action_settings -> return true\r\nelse -> return super.onOptionsItemSelected(item)\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/392", "ground_truth": "        menuInflater.inflate(R.menu.menu_save, menu)\r\n        return super.onCreateOptionsMenu(menu)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FixCharacterValuesActivity.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.extensions.setTintWith\nimport com.habitrpg.android.habitica.R\nimport androidx.core.content.ContextCompat\nimport android.view.View\nimport android.graphics.PorterDuff\nprivate fun setIconBackground(view: View, color: Int) {\r\n        val backgroundDrawable = ContextCompat.getDrawable(this, R.drawable.layout_rounded_bg)\r\n        backgroundDrawable?.setTintWith(color, PorterDuff.Mode.MULTIPLY)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/393", "ground_truth": "        backgroundDrawable?.alpha = 50\r\n        view.background = backgroundDrawable\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FixCharacterValuesActivity.kt"}}
{"prompt": "\n import android.widget.EditText\nprivate fun EditText.getDoubleValue(): Double {\r\n        val stringValue = this.text.toString()\r\n        return try {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/394", "ground_truth": "            stringValue.toDouble()\r\n        } catch (_: NumberFormatException) {\r\n            0.0\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FixCharacterValuesActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.members.Member\nimport com.habitrpg.android.habitica.R\nimport android.view.View\nprivate suspend fun refresh(fromHall: Boolean) {\r\n        val member = socialRepository.retrieveMember(userID, fromHall)\r\n        if (member != null && !fromHall) {\r\n            updateView(member)\r\n            this.member.value = member\r\n            if (isMyProfile() && member.loginIncentives > 10) {\r\n                reviewManager.requestReview(this@FullProfileActivity, member.loginIncentives)\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.models.members.Member\nimport com.habitrpg.android.habitica.R\nimport android.view.View\nprivate suspend fun refresh(fromHall: Boolean) {\r\n        val member = socialRepository.retrieveMember(userID, fromHall)\r\n        if (member!= null &&!fromHall) {\r\n            updateView(member)\r\n            this.member.value = member\r\n            if (isMyProfile() && member.loginIncentives > 10) {\r\n                reviewManager.requestReview(this@FullProfileActivity, member.loginIncentives)\r\n//                reviewManager.requestReview(this@FullProfileActivity, 10)\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/395", "ground_truth": "            }\r\n        } else if (member != null) {\r\n            updateAccountStatus(member)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FullProfileActivity.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/396", "ground_truth": "        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FullProfileActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.ui.views.dialogs.HabiticaAlertDialog\nimport com.habitrpg.android.habitica.R\nprivate fun showBlockDialog() {\r\n        val dialog = HabiticaAlertDialog(this)\r\n        dialog.setTitle(getString(R.string.block_user_title, userDisplayName))\r\n        dialog.setMessage(R.string.block_user_description)\r\n        dialog.addButton(R.string.block, isPrimary = true, isDestructive = true) { _, _ ->\r", "choices": [{"text": "//            blockUser()\r\n        }\r\n        dialog.show()\r\n    }\n"}], "metadata": {"task_id": "habitica-android/398", "ground_truth": "            useBlock()\r\n        }\r\n        dialog.addCancelButton()\r\n        dialog.show()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FullProfileActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.Achievement\nprivate fun fillAchievements(\r\n        labelID: Int,\r\n        achievements: List<Achievement>,\r\n        targetList: MutableList<Any>\r\n    ) {\r\n        // Order by ID first\r\n        val achievementList = ArrayList(achievements)\r\n        achievementList.sortWith { achievement, t1 ->\r\n            achievement.index.toDouble().compareTo(t1.index.toDouble())\r", "choices": [{"text": "//            achievement.index.compareTo(t1.index)\r\n        }\r\n        for (achievement in achievementList) {\r\n            val achievementItem = AchievementItem(achievement)\r\n            achievementItem.labelID = labelID\r\n            targetList.add(achievementItem)\r\n        }\r\n    }\r\n}<file_sep>/app/src/main/java/com/habitrpg/android/habitica/ui/adapters/AchievementItem.kt\npackage com.habitrpg.android.habitica.ui.adapters\n\nimport android.content.Context\nimport android.view"}], "metadata": {"task_id": "habitica-android/401", "ground_truth": "        }\r\n\r\n        targetList.add(getString(labelID))\r\n        targetList.addAll(achievementList)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FullProfileActivity.kt"}}
{"prompt": "\n import kotlin.math.floor\nprivate fun getFloorValueString(`val`: Float, roundDown: Boolean): String {\r\n        return if (roundDown) {\r\n            floor(`val`.toDouble()).toString()\r\n        } else {\r\n            if (`val`.toDouble() == 0.0) {\r\n                \"0\"\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/402", "ground_truth": "            } else {\r\n                `val`.toString()\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FullProfileActivity.kt"}}
{"prompt": "\n private fun getFloorValue(value: Float, roundDown: Boolean): Float {\r\n        return if (roundDown) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/403", "ground_truth": "            floor(value.toDouble()).toFloat()\r\n        } else {\r\n            value\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FullProfileActivity.kt"}}
{"prompt": "\n import kotlin.math.min\nimport com.habitrpg.android.habitica.models.members.Member\nimport com.habitrpg.android.habitica.R\nprivate fun addLevelAttributes(user: Member) {\r\n        val byLevelStat = min((user.stats?.lvl ?: 0) / 2.0f, 50f)\r\n        addAttributeRow(\r\n            getString(R.string.profile_level),\r\n            byLevelStat,\r\n            byLevelStat,\r\n            byLevelStat,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/404", "ground_truth": "            byLevelStat,\r\n            roundDown = true,\r\n            isSummary = false\r\n        )\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FullProfileActivity.kt"}}
{"prompt": "\n override fun onSupportNavigateUp(): Boolean {\r", "choices": [{"text": "//    val navController = findNavController(R.id.nav_host_fragment)\r\n//    return navController.navigateUp(appBarConfiguration) || super.onSupportNavigateUp()\r\n    return super.onSupportNavigateUp()\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/407", "ground_truth": "        finish()\r\n        return true\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FullProfileActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r", "choices": [{"text": "return layoutInflater.inflate(layoutResId!!, null)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/408", "ground_truth": "        binding = ActivityFullProfileBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\FullProfileActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r", "choices": [{"text": "return layoutInflater.inflate(layoutResId!!, null)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/411", "ground_truth": "        binding = ActivityGiftGemsBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GiftGemsActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r", "choices": [{"text": "return layoutInflater.inflate(layoutResId!!, null)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/413", "ground_truth": "        binding = ActivityGiftSubscriptionBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GiftSubscriptionActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r", "choices": [{"text": "return layoutInflater.inflate(layoutResId!!, null)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/419", "ground_truth": "        binding = ActivityGroupFormBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GroupFormActivity.kt"}}
{"prompt": "\n override fun onSupportNavigateUp(): Boolean {\r\n        finish()\r", "choices": [{"text": "return true\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/421", "ground_truth": "        dismissKeyboard()\r\n        return true\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GroupFormActivity.kt"}}
{"prompt": "\n import android.annotation.SuppressLint\n @SuppressLint(\"MissingSuperCall\")\r\n    override fun onBackPressed() {\r", "choices": [{"text": ""}], "metadata": {"task_id": "habitica-android/422", "ground_truth": "        finish()\r\n        dismissKeyboard()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GroupFormActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r", "choices": [{"text": "return layoutInflater.inflate(layoutResId!!, null)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/423", "ground_truth": "        binding = ActivityPartyInviteBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GroupInviteActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setupToolbar(findViewById(R.id.toolbar))\r\n        binding.viewPager.currentItem = 0\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/424", "ground_truth": "\r\n        supportActionBar?.title = null\r\n\r\n        setViewPagerAdapter()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GroupInviteActivity.kt"}}
{"prompt": "\n import android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r", "choices": [{"text": "menuInflater.inflate(R.menu.menu_main, menu)\r\nreturn true\r\n}\r\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\nwhen (item.itemId) {\r\nR.id.action_settings -> return true\r\nelse -> return super.onOptionsItemSelected(item)\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/425", "ground_truth": "        menuInflater.inflate(R.menu.menu_party_invite, menu)\r\n        return super.onCreateOptionsMenu(menu)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GroupInviteActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.ui.helpers.dismissKeyboard\nimport com.habitrpg.android.habitica.R\nimport android.view.MenuItem\nimport android.view.Menu\nimport android.content.Intent\nimport android.app.Activity\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return when (item.itemId) {\r\n            R.id.action_send_invites -> {\r\n                setResult(Activity.RESULT_OK, createResultIntent())\r\n                dismissKeyboard()\r\n                true\r\n            }\r\n            android.R.id.home -> {\r\n                onBackPressed()\r", "choices": [{"text": "//                setResult(Activity.RESULT_CANCELED)\r\n                true\r\n            }\r\n            else -> super.onOptionsItemSelected(item)\r\n        }\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        menuInflater.inflate(R.menu.menu_invite, menu)\r\n        return true\r\n    }\r\n\r\n    private fun createResultIntent(): Intent {\r\n        val intent = Intent()\r\n        intent.putExtra(EXTRA_INVITE_EMAILS, inviteEmails)\r\n        return intent\r\n    }\r\n\r\n    companion object {\r\n        const val EXTRA_INVITE_EMAILS = \"EXTRA_INVITE_EMAILS\""}], "metadata": {"task_id": "habitica-android/426", "ground_truth": "                true\r\n            }\r\n            else -> super.onOptionsItemSelected(item)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GroupInviteActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.content.Intent\nprivate fun createResultIntent(): Intent {\r\n        val intent = Intent()\r", "choices": [{"text": "intent.putExtra(RESULT_KEY, \"result\")\r\n        return intent\r\n    }\n"}], "metadata": {"task_id": "habitica-android/427", "ground_truth": "        if (fragments.size == 0) return intent\r\n        return intent\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GroupInviteActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return if (item.itemId == android.R.id.home) {\r\n            onBackPressed()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/428", "ground_truth": "            true\r\n        } else {\r\n            super.onOptionsItemSelected(item)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\GuidelinesActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r", "choices": [{"text": "return layoutInflater.inflate(layoutResId!!, null)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/429", "ground_truth": "        binding = WidgetConfigureHabitButtonBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\HabitButtonWidgetActivity.kt"}}
{"prompt": "\n import androidx.preference.PreferenceManager\nimport androidx.core.content.edit\nprivate fun storeSelectedTaskId(selectedTaskId: String?) {\r\n        PreferenceManager.getDefaultSharedPreferences(this).edit {\r", "choices": [{"text": "putInt(\"selectedTaskId\", selectedTaskId.toString().toInt())\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/431", "ground_truth": "            putString(\"habit_button_widget_$widgetId\", selectedTaskId)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\HabitButtonWidgetActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r", "choices": [{"text": "return layoutInflater.inflate(layoutResId!!, null)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/432", "ground_truth": "        binding = ActivityIntroBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\IntroActivity.kt"}}
{"prompt": "\n import androidx.fragment.app.FragmentManager\nimport androidx.fragment.app.Fragment\nprivate fun setupIntro() {\r\n        binding.viewPager.adapter = PagerAdapter(supportFragmentManager)\r", "choices": [{"text": "}\r\n\r\nprivate fun setupViewPager(viewPager: ViewPager) {\r\n        val adapter = ViewPagerAdapter(supportFragmentManager)\r\n        adapter.addFragment(IntroFragment.newInstance(R.layout.fragment_intro_1), \"Intro 1\")\r\n        adapter.addFragment(IntroFragment.newInstance(R.layout.fragment_intro_2), \"Intro 2\")\r\n        adapter.addFragment(IntroFragment.newInstance(R.layout.fragment_intro_3), \"Intro 3\")\r\n        adapter.addFragment(IntroFragment.newInstance(R.layout.fragment_intro_4), \"Intro"}], "metadata": {"task_id": "habitica-android/433", "ground_truth": "\r\n        binding.viewPager.addOnPageChangeListener(this)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\IntroActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.content.Intent\nprivate fun finishIntro() {\r\n        val intent = Intent(this, LoginActivity::class.java)\r\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_CLEAR_TASK or Intent.FLAG_ACTIVITY_NEW_TASK)\r", "choices": [{"text": "//        intent.putExtra(\"finishIntro\", true)\r\n        startActivity(intent)\r\n        finish()\r\n    }\n"}], "metadata": {"task_id": "habitica-android/434", "ground_truth": "\r\n        this.startActivity(intent)\r\n        overridePendingTransition(0, R.anim.activity_fade_out)\r\n        finish()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\IntroActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.ui.fragments.setup.IntroFragment\nimport androidx.fragment.app.Fragment\noverride fun getItem(position: Int): Fragment {\r\n            val fragment = IntroFragment()\r", "choices": [{"text": "return fragment\r\n        }\n"}], "metadata": {"task_id": "habitica-android/436", "ground_truth": "            configureFragment(fragment, position)\r\n            return fragment\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\IntroActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r", "choices": [{"text": "return layoutInflater.inflate(layoutResId!!, null)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/438", "ground_truth": "        binding = ActivityLoginBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt"}}
{"prompt": "\n import android.content.SharedPreferences\noverride fun loadTheme(sharedPreferences: SharedPreferences, forced: Boolean) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "habitica-android/439", "ground_truth": "        super.loadTheme(sharedPreferences, forced)\r\n        window.updateStatusBarColor(R.color.black_20_alpha, false)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt"}}
{"prompt": "\n override fun onBackPressed() {\r\n        if (isShowingForm) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/440", "ground_truth": "            hideForm()\r\n        } else {\r\n            super.onBackPressed()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.content.Intent\nimport android.app.Activity\nprivate fun startMainActivity() {\r\n        val intent = Intent(this@LoginActivity, MainActivity::class.java)\r\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)\r", "choices": [{"text": "}\r\n\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_login)\r\n        val loginButton = findViewById<View>(R.id.login_button) as Button\r\n        loginButton.setOnClickListener {\r\n            val intent = Intent(this@LoginActivity, MainActivity::class.java)\r\n            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)\r\n            startActivity(intent)\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "habitica-android/441", "ground_truth": "        startActivity(intent)\r\n        finish()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.content.Intent\nimport android.app.Activity\nprivate fun startSetupActivity() {\r\n        val intent = Intent(this@LoginActivity, SetupActivity::class.java)\r\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)\r", "choices": [{"text": "}\r\n\n\n"}], "metadata": {"task_id": "habitica-android/442", "ground_truth": "        startActivity(intent)\r\n        finish()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt"}}
{"prompt": " import com.habitrpg.android.habitica.R\nvar binding ActivityLoginBinding\nvar viewModel AuthenticationViewModel\nvar apiClient ApiClient\nprivate fun toggleRegistering() {\r", "choices": [{"text": "binding.registerButton.isEnabled =!binding.registerButton.isEnabled\r\nbinding.registerButton.text = if (binding.registerButton.text == getString(R.string.register)) getString(R.string.registering) else getString(R.string.register)\r\n}\r\nprivate fun toggleLoggingIn() {\r\nbinding.loginButton.isEnabled =!binding.loginButton.isEnabled\r\nbinding.loginButton.text = if (binding.loginButton.text == getString(R.string.login)) getString(R.string.logging_in) else getString(R."}], "metadata": {"task_id": "habitica-android/443", "ground_truth": "        this.isRegistering = (!this.isRegistering)\r\n        this.setRegistering()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.action_toggleRegistering -> toggleRegistering()\r", "choices": [{"text": "//            R.id.action_toggleNotifications -> toggleNotifications()\r\n            R.id.action_toggleNotifications -> toggleNotifications()\r\n            R.id.action_toggleNotifications -> toggleNotifications()\r\n            R.id.action_toggleNotifications -> toggleNotifications()\r\n            R.id.action_toggleNotifications -> toggleNotifications()\r\n            R.id.action_toggleNotifications -> toggleNotifications()\r\n            R.id.action_toggleNotifications -> toggleNotifications()\r\n            R.id.action_toggleNotifications -> toggleNotifications()\r\n            R.id.action_toggleNotifications -> toggleNotifications()\r\n            R.id.action_toggleNotifications"}], "metadata": {"task_id": "habitica-android/444", "ground_truth": "        }\r\n        return super.onOptionsItemSelected(item)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt"}}
{"prompt": "\n import android.view.View\nprivate fun hideProgress() {\r\n        runOnUiThread {\r\n            binding.googleLoginProgress.visibility = View.GONE\r", "choices": [{"text": "}\r\n}\r\nprivate fun showProgress() {\r\n        runOnUiThread {\r\n            binding.googleLoginProgress.visibility = View.VISIBLE\r\n}\r\n}\r\nprivate fun signIn() {\r\n        val signInIntent = mGoogleSignInClient.signInIntent\r\n        startActivityForResult(signInIntent, RC_SIGN_IN)\r\n}\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (requestCode == RC_SIGN_IN) {\r\n            val task ="}], "metadata": {"task_id": "habitica-android/445", "ground_truth": "            binding.PBAsyncTask.visibility = View.GONE\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nprivate fun newGameButtonClicked() {\r\n        isRegistering = true\r", "choices": [{"text": "}\r\nprivate fun newGameButtonClicked() {\r\n        isRegistering = true\r\n}\r\nprivate fun newGameButtonClicked() {\r\n        isRegistering = true\r\n}\r\nprivate fun newGameButtonClicked() {\r\n        isRegistering = true\r\n}\r\nprivate fun newGameButtonClicked() {\r\n        isRegistering = true\r\n}\r\nprivate fun newGameButtonClicked() {\r\n        isRegistering = true\r\n}\r\nprivate fun newGameButtonClicked() {\r\n        isRegistering = true\r\n}\r\nprivate fun newGameButtonClicked() {\r\n        is"}], "metadata": {"task_id": "habitica-android/447", "ground_truth": "        showForm()\r\n        setRegistering()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nprivate fun showLoginButtonClicked() {\r\n        isRegistering = false\r", "choices": [{"text": "}\r\nprivate fun showRegisterButtonClicked() {\r\n        isRegistering = true\r\n}\r\nprivate fun loginButtonClicked() {\r\n        if (isRegistering) {\r\n            showRegisterButtonClicked()\r\n        } else {\r\n            showLoginButtonClicked()\r\n        }\r\n}\r\nprivate fun registerButtonClicked() {\r\n        if (!isRegistering) {\r\n            showRegisterButtonClicked()\r\n        } else {\r\n            showLoginButtonClicked()\r\n        }\r\n}\r\nprivate fun loginButtonClicked() {\r\n        if (isRegistering) {\r\n            showRegisterButtonClicked()\r\n        } else {\r\n            showLoginButton"}], "metadata": {"task_id": "habitica-android/448", "ground_truth": "        showForm()\r\n        setRegistering()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt"}}
{"prompt": "\nval loginClick\nvar isRegistering Boolean\nvar binding ActivityLoginBinding\n private fun backButtonClicked() {\r\n        if (isShowingForm) {\r", "choices": [{"text": "//            binding.loginButton.visibility = View.VISIBLE\r\n            binding.registerButton.visibility = View.VISIBLE\r\n            binding.loginButton.visibility = View.GONE\r\n            binding.loginForm.visibility = View.GONE\r\n            binding.registerForm.visibility = View.VISIBLE\r\n            isShowingForm = false\r\n        } else {\r\n            finish()\r\n        }\r\n    }\r\n\r\n    private fun registerButtonClicked() {\r\n        if (isRegistering) {\r\n            binding.registerButton.text = getString(R.string.register)\r\n            binding.registerButton.isEnabled = true\r\n            isRegistering = false\r\n        } else {\r\n            binding."}], "metadata": {"task_id": "habitica-android/449", "ground_truth": "            hideForm()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.ui.views.dialogs.HabiticaAlertDialog\nimport com.habitrpg.android.habitica.R\nprivate fun showPasswordEmailConfirmation() {\r\n        val alert = HabiticaAlertDialog(this)\r\n        alert.setMessage(R.string.forgot_password_confirmation)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/450", "ground_truth": "        alert.addOkButton()\r\n        alert.show()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt"}}
{"prompt": "\nvar binding ActivityLoginBinding\nvar sharedPrefs SharedPreferences\nvar isShowingForm Boolean\n override fun finish() {\r", "choices": [{"text": "super.finish()\r\noverridePendingTransition(R.anim.slide_in_left, R.anim.slide_out_right)\r\n}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nbinding = ActivityLoginBinding.inflate(layoutInflater)\r\nsharedPrefs = getSharedPreferences(\"sharedPrefs\", Context.MODE_PRIVATE)\r\nisShowingForm = sharedPrefs.getBoolean(\"isShowingForm\", false)\r\nif (isShowingForm) {\r\nbinding.loginForm.visibility = View.VISIBLE\r\nbinding.loginForm."}], "metadata": {"task_id": "habitica-android/451", "ground_truth": "        dismissKeyboard()\r\n        super.finish()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\LoginActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r", "choices": [{"text": "return layoutInflater.inflate(layoutResId!!, null)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/452", "ground_truth": "        binding = ActivityMainBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt"}}
{"prompt": "\n import androidx.navigation.NavDestination\nimport android.os.Bundle\nprivate fun updateToolbarTitle(destination: NavDestination, arguments: Bundle?) {\r\n        viewModel.getToolbarTitle(destination.id, destination.label, arguments?.getString(\"type\")) {\r\n            title = it\r", "choices": [{"text": "}\r\n}\n"}], "metadata": {"task_id": "habitica-android/453", "ground_truth": "        }\r\n        drawerFragment?.setSelection(destination.id, null, false)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.extensions.hideKeyboard\noverride fun onSupportNavigateUp(): Boolean {\r\n        hideKeyboard()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/454", "ground_truth": "        onBackPressed()\r\n        return true\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.extensions.dpToPx\nimport androidx.core.view.setPadding\nimport androidx.compose.ui.unit.dp\nimport android.view.View\nprivate fun setupBottomnavigationLayoutListener() {\r\n        binding.content.bottomNavigation.viewTreeObserver.addOnGlobalLayoutListener {\r\n            if (binding.content.bottomNavigation.visibility == View.VISIBLE) {\r\n                snackbarContainer.setPadding(\r\n                    0,\r\n                    0,\r\n                    0,\r\n                    binding.content.bottomNavigation.barHeight + 12.dpToPx(this)\r\n                )\r", "choices": [{"text": "//                snackbarContainer.setPadding(\r\n//                    0,\r\n//                    0,\r\n//                    0,\r\n//                    binding.content.bottomNavigation.barHeight + 12.dpToPx(this)\r\n//                )\r\n            }\r\n        }\r\n    }\n<file_sep>/app/src/main/java/com/habitrpg/android/ui/habits/HabitListFragment.kt\npackage com.habitrpg.android.ui.habits\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view."}], "metadata": {"task_id": "habitica-android/456", "ground_truth": "            } else {\r\n                snackbarContainer.setPadding(0, 0, 0, 0)\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt"}}
{"prompt": "\n import android.content.res.Configuration\noverride fun onConfigurationChanged(newConfig: Configuration) {\r", "choices": [{"text": "super.onConfigurationChanged(newConfig)\r\nif (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n//landscape\r\n} else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {\r\n//portrait\r\n}\r\n}\n"}], "metadata": {"task_id": "habitica-android/458", "ground_truth": "        super.onConfigurationChanged(newConfig)\r\n        drawerToggle?.onConfigurationChanged(newConfig)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.helpers.MainNavigationController\nimport com.habitrpg.android.habitica.R\nimport androidx.drawerlayout.widget.DrawerLayout\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return if (binding.root.parent is DrawerLayout && drawerToggle?.onOptionsItemSelected(item) == true) {\r\n            true\r\n        } else if (item.itemId == android.R.id.home) {\r\n            if (showBackButton != true) {\r\n                drawerFragment?.toggleDrawer()\r\n            } else {\r\n                MainNavigationController.navigateBack()\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/459", "ground_truth": "            true\r\n        } else {\r\n            super.onOptionsItemSelected(item)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt"}}
{"prompt": "\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nmMapView.onPause()\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nmMapView.onResume()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nmMapView.onDestroy()\r\n}\r\noverride fun onLowMemory() {\r\nsuper.onLowMemory()\r\nmMapView.onLowMemory()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/461", "ground_truth": "        updateWidgets()\r\n        super.onPause()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt"}}
{"prompt": "\n import android.content.Intent\noverride fun startActivity(intent: Intent?) {\r", "choices": [{"text": "super.startActivity(intent)\r\noverridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left)\r\n}\r\noverride fun finish() {\r\nsuper.finish()\r\noverridePendingTransition(R.anim.slide_in_left, R.anim.slide_out_right)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/462", "ground_truth": "        resumeFromActivity = true\r\n        super.startActivity(intent)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt"}}
{"prompt": "\n import android.os.Bundle\nimport android.content.Intent\noverride fun startActivity(intent: Intent?, options: Bundle?) {\r", "choices": [{"text": "super.startActivity(intent, options)\r\noverridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/463", "ground_truth": "        resumeFromActivity = true\r\n        super.startActivity(intent, options)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.widget.TodoListWidgetProvider\nimport com.habitrpg.android.habitica.widget.AvatarStatsWidgetProvider\nprivate fun updateWidgets() {\r\n        updateWidget(AvatarStatsWidgetProvider::class.java)\r\n        updateWidget(TodoListWidgetProvider::class.java)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/464", "ground_truth": "        updateWidget(DailiesWidgetProvider::class.java)\r\n        updateWidget(HabitButtonWidgetProvider::class.java)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt"}}
{"prompt": "\n override fun onBackPressed() {\r\n        if (drawerFragment?.isDrawerOpen == true) {\r\n            drawerFragment?.closeDrawer()\r\n        } else {\r\n            try {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/466", "ground_truth": "                super.onBackPressed()\r\n            } catch (ignored: Exception) {\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\npublic override fun onDestroy() {\r\n        userRepository.close()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/467", "ground_truth": "        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt"}}
{"prompt": "\n import android.view.KeyEvent\noverride fun onKeyUp(keyCode: Int, event: KeyEvent): Boolean {\r\n        if (keyCode == KeyEvent.KEYCODE_MENU) {\r\n            drawerFragment?.openDrawer()\r", "choices": [{"text": "return true\r\n        }\r\n        return super.onKeyUp(keyCode, event)\r\n    }\n"}], "metadata": {"task_id": "habitica-android/469", "ground_truth": "            return true\r\n        }\r\n\r\n        return super.onKeyUp(keyCode, event)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MainActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r", "choices": [{"text": "return layoutInflater.inflate(layoutResId!!, null)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/474", "ground_truth": "        binding = ActivityMaintenanceBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MaintenanceActivity.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\noverride fun onResume() {\r\n        super.onResume()\r\n        if (!isDeprecationNotice) {\r\n            lifecycleScope.launchCatching {\r\n                val maintenanceResponse = maintenanceService.getMaintenanceStatus()\r\n                if (maintenanceResponse?.activeMaintenance == false) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/475", "ground_truth": "                    finish()\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\MaintenanceActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r", "choices": [{"text": "return layoutInflater.inflate(layoutResId!!, null)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/477", "ground_truth": "        binding = ActivityNotificationsBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\NotificationsActivity.kt"}}
{"prompt": "\n override fun onSupportNavigateUp(): Boolean {\r\n        if (supportFragmentManager.backStackEntryCount > 0) {\r", "choices": [{"text": "//            supportFragmentManager.popBackStack()\r\n            return true\r\n        }\r\n        return super.onSupportNavigateUp()\r\n    }\r\n"}], "metadata": {"task_id": "habitica-android/478", "ground_truth": "            onBackPressed()\r\n            return true\r\n        }\r\n        return super.onSupportNavigateUp()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\NotificationsActivity.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.models.notifications.UnallocatedPointsData\nimport com.habitrpg.common.habitica.models.Notification\nimport com.habitrpg.common.habitica.extensions.fromHtml\nimport com.habitrpg.android.habitica.R\nimport android.view.View\nprivate fun createUnallocatedStatsNotification(notification: Notification): View? {\r\n        val level = userLvl ?: return null\r\n        return if (level >= 10) {\r\n            val data = notification.data as? UnallocatedPointsData\r\n\r\n            createDismissableNotificationItem(\r\n                notification,\r\n                fromHtml(getString(R.string.unallocated_stats_points, data?.points.toString())),\r\n                R.drawable.notification_stat_sparkles\r", "choices": [{"text": "\n import com.habitrpg.common.habitica.models.notifications.UnallocatedPointsData\nimport com.habitrpg.common.habitica.models.Notification\nimport com.habitrpg.common.habitica.extensions.fromHtml\nimport com.habitrpg.android.habitica.R\nimport android.view.View\nprivate fun createUnallocatedStatsNotification(notification: Notification): View? {\r\n        val level = userLvl?: return null\r\n        return if (level >= 10) {\r\n            val data = notification.data as? UnallocatedPointsData\r\n\r\n            createDismissableNotificationItem(\r\n                notification,\r\n                fromHtml(getString(R.string.unallocated_stats_points, data?.points.toString())),\r\n                R.drawable.notification_stat_sparkles\r\n//                R.drawable.notification_stat_sparkles\r\n            )\r\n        } else null\r\n    }\n"}], "metadata": {"task_id": "habitica-android/485", "ground_truth": "            )\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\NotificationsActivity.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.models.notifications.GroupTaskNeedsWorkData\nimport com.habitrpg.common.habitica.models.Notification\nimport android.view.View\nprivate fun createGroupTaskNeedsWorkNotification(notification: Notification): View? {\r\n        val data = notification.data as? GroupTaskNeedsWorkData\r\n        val message = convertGroupMessageHtml(data?.message ?: \"\")\r\n\r\n        return createDismissableNotificationItem(\r\n            notification,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/487", "ground_truth": "            fromHtml(message),\r\n            null,\r\n            textColor = R.color.yellow_5\r\n        )\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\NotificationsActivity.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.models.notifications.GroupTaskApprovedData\nimport com.habitrpg.common.habitica.models.Notification\nimport android.view.View\nprivate fun createGroupTaskApprovedNotification(notification: Notification): View? {\r\n        val data = notification.data as? GroupTaskApprovedData\r\n        val message = convertGroupMessageHtml(data?.message ?: \"\")\r\n\r\n        return createDismissableNotificationItem(\r\n            notification,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/488", "ground_truth": "            fromHtml(message),\r\n            null,\r\n            textColor = R.color.green_10\r\n        )\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\NotificationsActivity.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.models.notifications.GroupTaskRequiresApprovalData\nimport com.habitrpg.common.habitica.models.Notification\nimport com.habitrpg.common.habitica.extensions.fromHtml\nimport com.habitrpg.android.habitica.R\nimport android.view.View\nprivate fun createGroupTaskNeedsApprovalNotification(notification: Notification): View? {\r\n        val data = notification.data as? GroupTaskRequiresApprovalData\r\n        val message = convertGroupMessageHtml(data?.message ?: \"\")\r\n\r\n        val item = createActionableNotificationItem(\r\n            notification,\r\n            fromHtml(message)\r", "choices": [{"text": "\n import com.habitrpg.common.habitica.models.notifications.GroupTaskRequiresApprovalData\nimport com.habitrpg.common.habitica.models.Notification\nimport com.habitrpg.common.habitica.extensions.fromHtml\nimport com.habitrpg.android.habitica.R\nimport android.view.View\nprivate fun createGroupTaskNeedsApprovalNotification(notification: Notification): View? {\r\n        val data = notification.data as? GroupTaskRequiresApprovalData\r\n        val message = convertGroupMessageHtml(data?.message?: \"\")\r\n\r\n        val item = createActionableNotificationItem(\r\n            notification,\r\n            fromHtml(message)\r\n//            fromHtml(data?.message?: \"\")\r\n        )\r\n        item.icon = R.drawable.ic_group_task_notification\r\n        return item\r\n    }\n\nprivate fun convertGroupMessageHtml(message: String): String {\r\n        return message.replace(\"<br>\", \"\\n\")\r\n    }\n<file_sep>/app/src/main/java/com/habitrpg/android/habitica/ui/fragments/HabiticaFragment.kt\npackage com.habitrpg.android.habitica.ui.fragments\n\nimport android.content.Context\nimport android.os.Bundle\nimport android"}], "metadata": {"task_id": "habitica-android/489", "ground_truth": "        )\r\n        // Hide for now\r\n        item?.visibility = View.GONE\r\n        return item\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\NotificationsActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nprivate fun convertGroupMessageHtml(message: String): String {\r\n        // Using positive lookbehind to make sure \"span\" is preceded by \"<\" or \"</\"\r\n        val pattern = \"(?<=</?)span\".toRegex()\r", "choices": [{"text": "//        val pattern = \"(?<=</?)span\".toRegex()\r\n        val matcher = pattern.find(message)\r\n        if (matcher!= null) {\r\n            val start = matcher.start()\r\n            val end = matcher.end()\r\n            val newMessage = message.substring(0, start) + message.substring(end)\r\n            return convertGroupMessageHtml(newMessage)\r\n        }\r\n        return message\r\n    }\n"}], "metadata": {"task_id": "habitica-android/490", "ground_truth": "\r\n        return message.replace(pattern, \"strong\")\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\NotificationsActivity.kt"}}
{"prompt": "\n override fun onSupportNavigateUp(): Boolean {\r\n        if (supportFragmentManager.backStackEntryCount > 0) {\r", "choices": [{"text": "//            supportFragmentManager.popBackStack()\r\n            return true\r\n        }\r\n        return super.onSupportNavigateUp()\r\n    }\r\n"}], "metadata": {"task_id": "habitica-android/492", "ground_truth": "            onBackPressed()\r\n            return true\r\n        }\r\n        return super.onSupportNavigateUp()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\PrefsActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r", "choices": [{"text": "return layoutInflater.inflate(layoutResId!!, null)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/494", "ground_truth": "        binding = ActivityReportMessageBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ReportMessageActivity.kt"}}
{"prompt": "\n override fun onBackPressed() {\r", "choices": [{"text": "//        super.onBackPressed()\r\n }\r\n}<file_sep>/app/src/main/java/com/example/myapplication/ui/main/MainViewModel.kt\npackage com.example.myapplication.ui.main\r\n\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.ViewModel\r\nimport com.example.myapplication.data.model.User\r\nimport com.example.myapplication.data.repository.UserRepository\r\nimport com.example.myapplication.utils.Resource\r\nimport dagger.hilt.android"}], "metadata": {"task_id": "habitica-android/495", "ground_truth": "        super.onBackPressed()\r\n        finish()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ReportMessageActivity.kt"}}
{"prompt": "\nvar binding ActivityReportMessageBinding\nvar isReporting Boolean\nvar groupID String?\n override fun finish() {\r", "choices": [{"text": "super.finish()\r\noverridePendingTransition(R.anim.slide_in_left, R.anim.slide_out_right)\r\n}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nbinding = ActivityReportMessageBinding.inflate(layoutInflater)\r\nsetContentView(binding.root)\r\nisReporting = false\r\ngroupID = intent.getStringExtra(\"groupID\")\r\nbinding.btnReport.setOnClickListener {\r\nif (isReporting) {\r\nToast.makeText(this, \"You are already reporting this message\","}], "metadata": {"task_id": "habitica-android/497", "ground_truth": "        dismissKeyboard()\r\n        super.finish()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\ReportMessageActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r", "choices": [{"text": "return layoutInflater.inflate(layoutResId!!, null)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/499", "ground_truth": "        binding = ActivitySetupBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\SetupActivity.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/500", "ground_truth": "        userRepository.close()\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\SetupActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.content.Intent\nprivate fun startMainActivity() {\r\n        val intent = Intent(this@SetupActivity, MainActivity::class.java)\r\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)\r", "choices": [{"text": "}\r\n\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_setup)\r\n        val button = findViewById<Button>(R.id.button)\r\n        button.setOnClickListener {\r\n            startMainActivity()\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "habitica-android/503", "ground_truth": "        startActivity(intent)\r\n        finish()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\SetupActivity.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nprivate fun confirmNames(displayName: String, username: String) {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.updateUser(\"profile.name\", displayName)\r", "choices": [{"text": "//            userRepository.updateUser(\"profile.username\", username)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/504", "ground_truth": "            userRepository.updateLoginName(username)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\SetupActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r", "choices": [{"text": "return layoutInflater.inflate(layoutResId!!, null)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/505", "ground_truth": "        binding = ActivitySkillMembersBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\SkillMemberActivity.kt"}}
{"prompt": "\n import android.os.Bundle\npublic override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/506", "ground_truth": "        setupToolbar(findViewById(R.id.toolbar))\r\n        loadMemberList()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\SkillMemberActivity.kt"}}
{"prompt": "\n import android.os.Bundle\npublic override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/507", "ground_truth": "        setupToolbar(findViewById(R.id.toolbar))\r\n        loadTaskLists()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\SkillTasksActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r", "choices": [{"text": "return layoutInflater.inflate(layoutResId!!, null)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/508", "ground_truth": "        binding = ActivitySkillTasksBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\SkillTasksActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.Task\nimport android.content.Intent\nfun taskSelected(task: Task) {\r\n        val resultIntent = Intent()\r\n        resultIntent.putExtra(\"taskID\", task.id)\r", "choices": [{"text": "//        resultIntent.putExtra(\"taskName\", task.name)\r\n//        resultIntent.putExtra(\"taskDescription\", task.description)\r\n//        resultIntent.putExtra(\"taskPoints\", task.points)\r\n//        resultIntent.putExtra(\"taskCompleted\", task.completed)\r\n//        resultIntent.putExtra(\"taskDueDate\", task.dueDate)\r\n//        resultIntent.putExtra(\"taskDueTime\", task.dueTime)\r\n//        resultIntent.putExtra(\"taskDueTime\", task.dueTime)\r\n//        resultIntent.putExtra(\"taskDue"}], "metadata": {"task_id": "habitica-android/509", "ground_truth": "        setResult(Activity.RESULT_OK, resultIntent)\r\n        finish()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\SkillTasksActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return if (item.itemId == android.R.id.home) {\r\n            onBackPressed()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/510", "ground_truth": "            true\r\n        } else {\r\n            super.onOptionsItemSelected(item)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\SkillTasksActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getContentView(layoutResId: Int?): View {\r", "choices": [{"text": "return layoutInflater.inflate(layoutResId!!, null)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/511", "ground_truth": "        binding = ActivityTaskFormBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\TaskFormActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}<issue_comment>username_1: @username_0 I'm not sure what you're asking.  You're not using the `onResume` method of the `Activity` class.  You're using the `onResume` method of the `Fragment` class.  You should be using the `onResume` method of the `Activity` class.<issue_comment>username_0: @username_1  I am using the onResume method of the Activity class.<issue_comment>username"}], "metadata": {"task_id": "habitica-android/512", "ground_truth": "        checkIfShowNotifLayout()\r\n        super.onResume()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\TaskFormActivity.kt"}}
{"prompt": "\nvar task Task?\nval PARCELABLE_TASK\nvar taskCompletedMap\n override fun onStart() {\r\n        super.onStart()\r\n        if (isCreating) {\r", "choices": [{"text": "//            task = intent.getParcelableExtra(PARCELABLE_TASK)\r\n            task = intent.getParcelableExtra(PARCELABLE_TASK)\r\n            if (task!= null) {\r\n                taskCompletedMap = task!!.taskCompletedMap\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/514", "ground_truth": "            binding.textEditText.requestFocus()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\TaskFormActivity.kt"}}
{"prompt": "\nvar canSave Boolean\nvar task Task?\nvar taskRepository TaskRepository\n private fun checkCanSave() {\r", "choices": [{"text": "canSave = task?.title?.isNotBlank() == true && task?.description?.isNotBlank() == true\r\n}\n"}], "metadata": {"task_id": "habitica-android/516", "ground_truth": "        val newCanSave = binding.textEditText.text?.isNotBlank() == true\r\n        canSave = newCanSave\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\TaskFormActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.Tag\nimport androidx.core.view.forEachIndexed\nimport android.widget.CheckBox\nprivate fun setAllTagSelections() {\r\n        if (hasPreselectedTags) {\r\n            tags.forEachIndexed { index, tag ->\r\n                val view = binding.tagsWrapper.getChildAt(index) as? CheckBox\r\n                view?.isChecked = task?.tags?.find { it.id == tag.id } != null\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.models.Tag\nimport androidx.core.view.forEachIndexed\nimport android.widget.CheckBox\nprivate fun setAllTagSelections() {\r\n        if (hasPreselectedTags) {\r\n            tags.forEachIndexed { index, tag ->\r\n                val view = binding.tagsWrapper.getChildAt(index) as? CheckBox\r\n                view?.isChecked = task?.tags?.find { it.id == tag.id }!= null\r\n//                view?.isChecked = task?.tags?.find { it.id == tag.id }!= null\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/517", "ground_truth": "            }\r\n        } else {\r\n            hasPreselectedTags = true\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\TaskFormActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.models.social.Challenge\nprivate fun disableEditingForUneditableFieldsInChallengeTask() {\r\n        binding.textEditText.isEnabled = false\r\n        binding.taskDifficultyButtons.isEnabled = false\r", "choices": [{"text": "}\r\nprivate fun enableEditingForEditableFieldsInChallengeTask() {\r\n        binding.textEditText.isEnabled = true\r\n        binding.taskDifficultyButtons.isEnabled = true\r\n}\r\nprivate fun disableEditingForUneditableFieldsInChallengeTask() {\r\n        binding.textEditText.isEnabled = false\r\n        binding.taskDifficultyButtons.isEnabled = false\r\n}\r\nprivate fun enableEditingForEditableFieldsInChallengeTask() {\r\n        binding.textEditText.isEnabled = true\r\n        binding.taskDifficultyButtons.isEnabled = true\r\n}\r\nprivate fun disableEditingForUneditableFieldsInChallengeTask() {\r\n        binding"}], "metadata": {"task_id": "habitica-android/518", "ground_truth": "        binding.taskSchedulingControls.isEnabled = false\r\n        binding.habitScoringButtons.isEnabled = false\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\TaskFormActivity.kt"}}
{"prompt": "\nval PARCELABLE_TASK\nvar taskCompletedMap\nvar task Task?\n override fun finish() {\r", "choices": [{"text": "super.finish()\r\noverride fun onBackPressed() {\r\nsuper.onBackPressed()\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval task = Task()\r\ntask.taskName = \"Task 1\"\r\ntask.taskDescription = \"Task 1 Description\"\r\ntask.taskStatus = \"Task 1 Status\"\r\ntask.taskPriority = \"Task 1 Priority\"\r\ntask.taskDate = \"Task 1 Date\"\r\ntask"}], "metadata": {"task_id": "habitica-android/519", "ground_truth": "        dismissKeyboard()\r\n        super.finish()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\TaskFormActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.ui.views.tasks.AssignSheet\nimport com.habitrpg.android.habitica.ui.views.showAsBottomSheet\nimport com.habitrpg.android.habitica.models.members.Member\nprivate fun showAssignDialog() {\r\n        showAsBottomSheet { onClose ->\r\n            AssignSheet(\r\n                groupMembers,\r\n                assignedIDs,\r\n                {\r\n                    if (assignedIDs.contains(it)) {\r\n                        assignedIDs.remove(it)\r\n                    } else {\r\n                        assignedIDs.add(it)\r\n                    }\r", "choices": [{"text": "//                    onClose()\r\n                },\r\n                onClose\r\n            )\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/520", "ground_truth": "                },\r\n                onClose\r\n            )\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\TaskFormActivity.kt"}}
{"prompt": "\nvar taskCompletedMap\nval PARCELABLE_TASK\nval TASK_ID_KEY\n private fun String.toIntCatchOverflow(): Int? {\r\n    return try {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/521", "ground_truth": "        toInt()\r\n    } catch (e: NumberFormatException) {\r\n        0\r\n    }\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\TaskFormActivity.kt"}}
{"prompt": "\n import androidx.activity.compose.setContent\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContent {\r", "choices": [{"text": "//            val navController = rememberNavController()\r\n//            val navGraph = remember(navController) {\r\n//                NavGraph(\r\n//                    startDestination = Screen.Home.route,\r\n//                    routes = listOf(\r\n//                        Screen.Home.route to {\r\n//                            HomeScreen(navController)\r\n//                        },\r\n//                        Screen.Settings.route to {\r\n//                            SettingsScreen()\r\n//                        },\r\n//                        Screen.About.route to {\r\n//                            AboutScreen()\r\n//                        }\r\n//"}], "metadata": {"task_id": "habitica-android/522", "ground_truth": "            HabiticaTheme {\r\n                TaskSummaryView(viewModel = viewModel)\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\TaskSummaryActivity.kt"}}
{"prompt": "\n import androidx.compose.ui.unit.sp\nimport androidx.compose.ui.text.withStyle\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.buildAnnotatedString\nimport androidx.compose.ui.text.SpanStyle\nimport androidx.compose.ui.text.AnnotatedString\nimport androidx.compose.runtime.Composable\nprivate fun String.makeBoldComposable(): AnnotatedString {\r\n    return buildAnnotatedString {\r\n        var isBold = false\r\n        for (segment in split(\"**\")) {\r\n            withStyle(style = SpanStyle(fontWeight = if (isBold) FontWeight.SemiBold else FontWeight.Normal)) {\r\n                append(segment)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/523", "ground_truth": "            }\r\n            isBold = !isBold\r\n        }\r\n    }\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\activities\\TaskSummaryActivity.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.QuestAchievement\nimport com.habitrpg.android.habitica.models.Achievement\nimport android.view.View\noverride fun getItemViewType(position: Int): Int {\r\n        if (entries.size <= position) return 0\r\n        val entry = entries[position]\r\n        return if (entry is Pair<*, *>) {\r\n            0\r\n        } else if (entry is QuestAchievement) {\r\n            3\r\n        } else if (entry is String) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/525", "ground_truth": "            4\r\n        } else {\r\n            if (useGridLayout) 1 else 2\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\AchievementsAdapter.kt"}}
{"prompt": "\n import android.view.View\noverride fun onClick(v: View?) {\r\n            achievement?.let {\r", "choices": [{"text": "//                val intent = Intent(this, AchievementActivity::class.java)\r\n//                intent.putExtra(\"achievement\", it)\r\n//                startActivity(intent)\r\n                val intent = Intent(this, AchievementActivity::class.java)\r\n                intent.putExtra(\"achievement\", it)\r\n                startActivity(intent)\r\n            }\r\n        }\n"}], "metadata": {"task_id": "habitica-android/527", "ground_truth": "                AchievementDetailDialog(it, itemView.context).show()\r\n            }\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\AchievementsAdapter.kt"}}
{"prompt": "\n override fun areContentsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {\r\n        val oldItem = oldList[oldItemPosition]\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/529", "ground_truth": "        val newItem = newList[newItemPosition]\r\n        return oldItem == newItem\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\BaseRecyclerViewAdapter.kt"}}
{"prompt": "\n open fun getItem(position: Int): T? {\r\n        return if (position >= 0 && data.size > position) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/530", "ground_truth": "            data[position]\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\BaseRecyclerViewAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.inventory.CustomizationSet\nimport android.view.View\noverride fun getItemViewType(position: Int): Int {\r\n        if (equipmentList.size <= position) return 0\r\n        return if (this.equipmentList[position].javaClass == CustomizationSet::class.java) {\r", "choices": [{"text": "//            if (this.equipmentList[position] is CustomizationSet) {\r\n                return 1\r\n            } else {\r\n                return 0\r\n            }\r\n        } else {\r\n            return 0\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/532", "ground_truth": "            0\r\n        } else {\r\n            1\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\CustomizationEquipmentRecyclerViewAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.inventory.Equipment\nfun setEquipment(newEquipmentList: List<Equipment>) {\r\n        this.equipmentList = newEquipmentList.toMutableList()\r\n        val emptyEquipment = Equipment()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/533", "ground_truth": "        equipmentList.add(0, emptyEquipment)\r\n        this.notifyDataSetChanged()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\CustomizationEquipmentRecyclerViewAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.inventory.CustomizationSet\nimport com.habitrpg.android.habitica.models.inventory.Customization\nimport android.view.View\noverride fun getItemViewType(position: Int): Int {\r\n        if (customizationList.size <= position) return 0\r\n        return if (this.customizationList[position] is CustomizationSet &&\r\n            (position == (customizationList.size - 1) || (position < customizationList.size && customizationList[position + 1] is CustomizationSet))\r\n        ) {\r\n            1\r\n        } else if (this.customizationList[position] is CustomizationSet) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/534", "ground_truth": "            0\r\n        } else {\r\n            2\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\CustomizationRecyclerViewAdapter.kt"}}
{"prompt": "\nvar pinnedItemKeys List<String>\nvar customizationList MutableList<Any>\nvar customization Customization?\n fun setPinnedItemKeys(pinnedItemKeys: List<String>) {\r", "choices": [{"text": "this.pinnedItemKeys = pinnedItemKeys\r\n}\r\nfun setCustomization(customization: Customization) {\r\nthis.customization = customization\r\n}\r\nfun setCustomizationList(customizationList: MutableList<Any>) {\r\nthis.customizationList = customizationList\r\n}\r\n}\r\nclass Customization {\r\nvar customizationType: String? = null\r\nvar customizationId: String? = null\r\nvar customizationName: String? = null\r\nvar customizationDescription: String? = null\r\nvar customizationUrl: String? = null"}], "metadata": {"task_id": "habitica-android/535", "ground_truth": "        this.pinnedItemKeys = pinnedItemKeys\r\n        if (customizationList.size > 0) this.notifyDataSetChanged()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\CustomizationRecyclerViewAdapter.kt"}}
{"prompt": " import com.habitrpg.android.habitica.models.inventory.Item\nimport android.view.View\nvar itemType\nvar itemText\nvar onSellItem\noverride fun getItemViewType(position: Int): Int {\r\n        return if (position < data.size) {\r", "choices": [{"text": "//            if (data[position].type == \"item\") {\r\n//                return 1\r\n//            } else {\r\n//                return 0\r\n//            }\r\n            return 0\r\n        } else {\r\n            return 0\r\n        }\r\n    }\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n        return if (viewType == 0) {\r\n            val view = LayoutInflater.from(parent.context).inflate(R.layout.item_list_item, parent, false)\r\n            ItemViewHolder(view)\r\n        } else {\r\n            val view"}], "metadata": {"task_id": "habitica-android/542", "ground_truth": "            0\r\n        } else {\r\n            -1\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\ItemRecyclerAdapter.kt"}}
{"prompt": " import com.habitrpg.android.habitica.models.inventory.Pet\nvar existingPets List<Pet>?\nvar ownedPets Map<String, OwnedPet>?\nvar itemType\nfun setExistingPets(pets: List<Pet>) {\r", "choices": [{"text": "existingPets = pets\r\n}\nfun setOwnedPets(pets: Map<String, OwnedPet>) {\r\nownedPets = pets\r\n}\nfun getOwnedPets(): Map<String, OwnedPet>? {\r\nreturn ownedPets\r\n}\nfun getExistingPets(): List<Pet>? {\r\nreturn existingPets\r\n}\nfun getPet(id: String): Pet? {\r\nreturn existingPets?.find { it.id == id }\r\n}\nfun getOwnedPet(id: String): Owned"}], "metadata": {"task_id": "habitica-android/543", "ground_truth": "        existingPets = pets\r\n        notifyDataSetChanged()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\ItemRecyclerAdapter.kt"}}
{"prompt": " import com.habitrpg.android.habitica.models.user.OwnedPet\nimport com.habitrpg.android.habitica.models.inventory.Pet\nvar ownedPets Map<String, OwnedPet>?\nvar existingPets List<Pet>?\nvar itemType\nfun setOwnedPets(ownedPets: Map<String, OwnedPet>) {\r", "choices": [{"text": "this.ownedPets = ownedPets\r\n}\r\nfun setExistingPets(existingPets: List<Pet>) {\r\nthis.existingPets = existingPets\r\n}\r\nfun getOwnedPets(): Map<String, OwnedPet>? {\r\nreturn ownedPets\r\n}\r\nfun getExistingPets(): List<Pet>? {\r\nreturn existingPets\r\n}\r\nfun getPet(petId: String): Pet? {\r\nreturn existingPets?.find { it.id == petId }\r\n}\r\nfun"}], "metadata": {"task_id": "habitica-android/544", "ground_truth": "        this.ownedPets = ownedPets\r\n        notifyDataSetChanged()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\ItemRecyclerAdapter.kt"}}
{"prompt": "\n fun setItemList(itemList: List<Any>) {\r", "choices": [{"text": "this.itemList = itemList\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/545", "ground_truth": "        this.itemList = itemList\r\n        this.notifyDataSetChanged()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\MountDetailRecyclerAdapter.kt"}}
{"prompt": "\n import android.view.ViewGroup\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): androidx.recyclerview.widget.RecyclerView.ViewHolder =\r\n        when (viewType) {\r", "choices": [{"text": "//            R.layout.item_list_item -> ItemViewHolder(\r\n//                LayoutInflater.from(parent.context).inflate(\r\n//                    R.layout.item_list_item,\r\n//                    parent,\r\n//                    false\r\n//                )\r\n//            )\r\n            R.layout.item_list_item -> ItemViewHolder(\r\n                LayoutInflater.from(parent.context).inflate(\r\n                    R.layout.item_list_item,\r\n                    parent,\r\n                    false\r\n                )\r\n            )\r\n            else -> throw IllegalArgumentException(\"Unknown view type\")\r\n        }\r\n"}], "metadata": {"task_id": "habitica-android/546", "ground_truth": "            1 -> SectionViewHolder(parent)\r\n            else -> MountViewHolder(parent, onEquip)\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\MountDetailRecyclerAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.OwnedMount\nimport com.habitrpg.android.habitica.models.inventory.Mount\nfun setOwnedMounts(ownedMounts: Map<String, OwnedMount>) {\r", "choices": [{"text": "}\r\n\r\nfun setOwnedMount(ownedMount: OwnedMount) {\r\n}\r\n\r\nfun getOwnedMounts(): Map<String, OwnedMount> {\r\n}\r\n\r\nfun getOwnedMount(id: String): OwnedMount? {\r\n}\r\n\r\nfun getOwnedMounts(ids: List<String>): List<OwnedMount> {\r\n}\r\n\r\nfun getOwnedMounts(ids: List<String>, callback: (List<OwnedMount>) -> Unit) {\r\n}\r\n\r\nfun getOwnedMount(id: String, callback: (OwnedMount?)"}], "metadata": {"task_id": "habitica-android/548", "ground_truth": "        this.ownedMounts = ownedMounts\r\n        notifyDataSetChanged()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\MountDetailRecyclerAdapter.kt"}}
{"prompt": "\n fun setItemList(itemList: List<Any>) {\r", "choices": [{"text": "this.itemList = itemList\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/549", "ground_truth": "        this.itemList = itemList\r\n        this.notifyDataSetChanged()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\PetDetailRecyclerAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.inventory.Pet\nimport com.habitrpg.android.habitica.models.inventory.Mount\nimport com.habitrpg.android.habitica.R\nprivate fun canRaiseToMount(pet: Pet): Boolean {\r\n        if (pet.type == \"special\") return false\r\n        for (mount in existingMounts ?: emptyList()) {\r\n            if (mount.key == pet.key) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/550", "ground_truth": "                return !(ownedMounts?.get(mount.key)?.owned ?: false)\r\n            }\r\n        }\r\n        return false\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\PetDetailRecyclerAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.inventory.StableSection\nimport com.habitrpg.android.habitica.models.inventory.Pet\nimport android.view.View\noverride fun getItemViewType(position: Int): Int {\r\n        if (itemList.size <= position) return 3\r\n        return if (itemList[position] is StableSection) {\r\n            1\r\n        } else {\r\n            val pet = itemList[position] as Pet\r\n            if ((\r\n                ownedPets?.get(pet.key)?.trained\r\n                    ?: 0\r\n                ) <= 0 && eggCount(pet) > 0 && potionCount(pet) > 0\r\n            ) {\r\n                2\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/552", "ground_truth": "            } else {\r\n                3\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\PetDetailRecyclerAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.OwnedMount\nimport com.habitrpg.android.habitica.models.inventory.Mount\nfun setOwnedMounts(ownedMounts: Map<String, OwnedMount>) {\r", "choices": [{"text": "}\r\n\r\nfun setOwnedMount(ownedMount: OwnedMount) {\r\n}\r\n\r\nfun getOwnedMounts(): Map<String, OwnedMount> {\r\n}\r\n\r\nfun getOwnedMount(id: String): OwnedMount? {\r\n}\r\n\r\nfun getOwnedMounts(ids: List<String>): List<OwnedMount> {\r\n}\r\n\r\nfun getOwnedMounts(ids: List<String>, callback: (List<OwnedMount>) -> Unit) {\r\n}\r\n\r\nfun getOwnedMount(id: String, callback: (OwnedMount?)"}], "metadata": {"task_id": "habitica-android/553", "ground_truth": "        this.ownedMounts = ownedMounts\r\n        notifyDataSetChanged()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\PetDetailRecyclerAdapter.kt"}}
{"prompt": " import com.habitrpg.android.habitica.models.user.OwnedPet\nimport com.habitrpg.android.habitica.models.inventory.Pet\nvar ownedPets Map<String, OwnedPet>?\nvar ownedMounts Map<String, OwnedMount>?\nvar ownedItems Map<String, OwnedItem>?\nfun setOwnedPets(ownedPets: Map<String, OwnedPet>) {\r", "choices": [{"text": "   this.ownedPets = ownedPets\r}\nfun setOwnedMounts(ownedMounts: Map<String, OwnedMount>) {\r    this.ownedMounts = ownedMounts\r}\nfun setOwnedItems(ownedItems: Map<String, OwnedItem>) {\r    this.ownedItems = ownedItems\r}\nfun getOwnedPets(): Map<String, OwnedPet>? {\r    return ownedPets\r}\nfun getOwnedMounts(): Map<String, OwnedMount>? {\r    return ownedMounts\r}\nfun getOwnedItems():"}], "metadata": {"task_id": "habitica-android/554", "ground_truth": "        this.ownedPets = ownedPets\r\n        notifyDataSetChanged()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\PetDetailRecyclerAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.shops.Shop\nimport android.view.View\noverride fun getItemViewType(position: Int): Int = when (getItem(position)) {\r\n        is Shop -> 0\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/556", "ground_truth": "        is ShopCategory -> 1\r\n        is Pair<*, *> -> 3\r\n        is ShopItem -> 4\r\n        else -> 2\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\ShopRecyclerAdapter.kt"}}
{"prompt": "\n override fun getItemCount(): Int {\r\n        val size = items.size + getGearItemCount()\r\n        return if (size == 1) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/557", "ground_truth": "            2\r\n        } else {\r\n            size\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\ShopRecyclerAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.shops.ShopCategory\nimport com.habitrpg.android.habitica.models.shops.Shop\nprivate fun getGearItemCount(): Int {\r\n        return if (selectedGearCategory == \"\") {\r\n            0\r\n        } else {\r\n            val selectedCategory: ShopCategory? = getSelectedShopCategory()\r\n            if (selectedCategory != null) {\r\n                if (selectedCategory.items.size == 0) {\r\n                    2\r\n                } else {\r\n                    selectedCategory.items.size + 1\r\n                }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/558", "ground_truth": "            } else {\r\n                0\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\ShopRecyclerAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.OwnedItem\nfun setOwnedItems(ownedItems: Map<String, OwnedItem>) {\r\n        this.ownedItems = ownedItems\r\n        if (items.size > 0) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/559", "ground_truth": "            this.notifyDataSetChanged()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\ShopRecyclerAdapter.kt"}}
{"prompt": "\n fun setPinnedItemKeys(pinnedItemKeys: List<String>) {\r\n        this.pinnedItemKeys = pinnedItemKeys\r\n        if (items.size > 0) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/560", "ground_truth": "            this.notifyDataSetChanged()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\ShopRecyclerAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.inventory.Pet\nimport com.habitrpg.android.habitica.models.inventory.Mount\nimport com.habitrpg.android.habitica.R\nprivate fun canRaiseToMount(pet: Pet): Boolean {\r\n        if (pet.type == \"special\") return false\r\n        for (mount in existingMounts ?: emptyList()) {\r\n            if (mount.key == pet.key) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/562", "ground_truth": "                return !(ownedMounts?.get(mount.key)?.owned ?: false)\r\n            }\r\n        }\r\n        return false\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\StableRecyclerAdapter.kt"}}
{"prompt": " import com.habitrpg.android.habitica.models.user.OwnedPet\nimport com.habitrpg.android.habitica.models.inventory.Pet\nvar ownedPets Map<String, OwnedPet>?\nvar currentPet String?\nvar animalIngredientsRetriever\nfun setOwnedPets(ownedPets: Map<String, OwnedPet>) {\r", "choices": [{"text": "this.ownedPets = ownedPets\r\n}\nfun setAnimalIngredientsRetriever(animalIngredientsRetriever: AnimalIngredientsRetriever) {\r\nthis.animalIngredientsRetriever = animalIngredientsRetriever\r\n}\nfun getOwnedPets(): Map<String, OwnedPet>? {\r\nreturn ownedPets\r\n}\nfun getCurrentPet(): String? {\r\nreturn currentPet\r\n}\nfun setCurrentPet(currentPet: String) {\r\nthis.currentPet = currentPet\r\n}\nfun getAnimalIngredientsRetriever(): AnimalIngredientsRetriever {\r\nreturn"}], "metadata": {"task_id": "habitica-android/563", "ground_truth": "        this.ownedPets = ownedPets\r\n        notifyDataSetChanged()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\StableRecyclerAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.OwnedMount\nimport com.habitrpg.android.habitica.models.inventory.Mount\nfun setOwnedMounts(ownedMounts: Map<String, OwnedMount>) {\r", "choices": [{"text": "}\r\n\r\nfun setOwnedMount(ownedMount: OwnedMount) {\r\n}\r\n\r\nfun getOwnedMounts(): Map<String, OwnedMount> {\r\n}\r\n\r\nfun getOwnedMount(id: String): OwnedMount? {\r\n}\r\n\r\nfun getOwnedMounts(ids: List<String>): List<OwnedMount> {\r\n}\r\n\r\nfun getOwnedMounts(ids: List<String>, callback: (List<OwnedMount>) -> Unit) {\r\n}\r\n\r\nfun getOwnedMount(id: String, callback: (OwnedMount?)"}], "metadata": {"task_id": "habitica-android/564", "ground_truth": "        this.ownedMounts = ownedMounts\r\n        notifyDataSetChanged()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\StableRecyclerAdapter.kt"}}
{"prompt": " import com.habitrpg.android.habitica.models.inventory.Mount\nvar existingMounts List<Mount>?\nvar ownedMounts Map<String, OwnedMount>?\nvar currentMount String?\nfun setExistingMounts(existingMounts: List<Mount>) {\r", "choices": [{"text": "this.existingMounts = existingMounts\r\n}\nfun setOwnedMounts(ownedMounts: Map<String, OwnedMount>) {\r\nthis.ownedMounts = ownedMounts\r\n}\nfun setCurrentMount(currentMount: String) {\r\nthis.currentMount = currentMount\r\n}\nfun getExistingMounts(): List<Mount>? {\r\nreturn existingMounts\r\n}\nfun getOwnedMounts(): Map<String, OwnedMount>? {\r\nreturn ownedMounts\r\n}\nfun getCurrentMount(): String? {\r\nreturn current"}], "metadata": {"task_id": "habitica-android/566", "ground_truth": "        this.existingMounts = existingMounts\r\n        notifyDataSetChanged()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\StableRecyclerAdapter.kt"}}
{"prompt": "\n fun setItemList(itemList: List<Any>) {\r", "choices": [{"text": "this.itemList = itemList\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/567", "ground_truth": "        this.itemList = itemList\r\n        notifyDataSetChanged()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\StableRecyclerAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.inventory.Egg\nfun setEggs(eggs: Map<String, Egg>) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "habitica-android/568", "ground_truth": "        this.eggs = eggs\r\n        notifyDataSetChanged()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\inventory\\StableRecyclerAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.ui.menu.HabiticaDrawerItem\nfun updateItem(item: HabiticaDrawerItem) {\r\n        val position = getItemPosition(item.identifier)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/570", "ground_truth": "        items[position] = item\r\n        notifyDataSetChanged()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\NavigationDrawerAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.ui.menu.HabiticaDrawerItem\nfun updateItems(newItems: List<HabiticaDrawerItem>) {\r\n        items.clear()\r", "choices": [{"text": "//        items.add(HabiticaDrawerItem(R.string.menu_item_habitica_settings, R.drawable.ic_settings_black_24dp))\r\n        items.addAll(newItems)\r\n        adapter.notifyDataSetChanged()\r\n    }\n"}], "metadata": {"task_id": "habitica-android/571", "ground_truth": "        items.addAll(newItems)\r\n        notifyDataSetChanged()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\NavigationDrawerAdapter.kt"}}
{"prompt": "\n import android.view.View\noverride fun getItemViewType(position: Int): Int {\r\n        return if (getItem(position).isHeader) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/572", "ground_truth": "            1\r\n        } else {\r\n            getItem(position).itemViewType ?: 0\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\NavigationDrawerAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.SetupCustomization\nfun setCustomizationList(newCustomizationList: List<SetupCustomization>) {\r", "choices": [{"text": "//    val newCustomizationList = listOf(\r\n//        SetupCustomization(\r\n//            \"1\",\r\n//            \"1\",\r\n//            \"1\",\r\n//            \"1\",\r\n//            \"1\",\r\n//            \"1\",\r\n//            \"1\",\r\n//            \"1\",\r\n//            \"1\",\r\n//            \"1\",\r\n//            \"1\",\r\n//            \"1\",\r\n//            \"1\",\r\n//            \"1\",\r\n//            \"1\",\r\n//           "}], "metadata": {"task_id": "habitica-android/574", "ground_truth": "        this.customizationList = newCustomizationList\r\n        this.notifyDataSetChanged()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\setup\\CustomizationSetupAdapter.kt"}}
{"prompt": "\n import android.view.View\noverride fun onClick(v: View) {\r\n            val position = this.bindingAdapterPosition\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/576", "ground_truth": "            checkedList[position] = !checkedList[position]\r\n            notifyItemChanged(position)\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\setup\\TaskSetupAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.extensions.inflate\nimport com.habitrpg.android.habitica.R\nimport android.view.ViewGroup\nimport android.view.View\noverride fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n        val view = parent.inflate(R.layout.spinner_item, false) ?: View(context)\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.extensions.inflate\nimport com.habitrpg.android.habitica.R\nimport android.view.ViewGroup\nimport android.view.View\noverride fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n        val view = parent.inflate(R.layout.spinner_item, false)?: View(context)\r\n//        val textView = view.findViewById<TextView>(R.id.text)\r\n//        textView.text = getItem(position)\r\n        return view\r\n    }\n"}], "metadata": {"task_id": "habitica-android/577", "ground_truth": "        (view as? TextView)?.text = getItem(position)\r\n        return view\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\SimpleSpinnerAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.extensions.inflate\nimport com.habitrpg.android.habitica.R\nimport android.view.ViewGroup\nimport android.view.View\noverride fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n        val view = convertView ?: parent.inflate(android.R.layout.simple_spinner_item, false)\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.extensions.inflate\nimport com.habitrpg.android.habitica.R\nimport android.view.ViewGroup\nimport android.view.View\noverride fun getView(position: Int, convertView: View?, parent: ViewGroup): View {\r\n        val view = convertView?: parent.inflate(android.R.layout.simple_spinner_item, false)\r\n//        val textView = view.findViewById<TextView>(android.R.id.text1)\r\n//        textView.text = getItem(position)\r\n        return view\r\n    }\n"}], "metadata": {"task_id": "habitica-android/578", "ground_truth": "        (view as? TextView)?.text = getItem(position)\r\n        return view\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\SimpleSpinnerAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.Skill\nfun setSkillList(skillList: List<Skill>) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "habitica-android/579", "ground_truth": "        this.skillList = skillList\r\n        this.notifyDataSetChanged()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\SkillsRecyclerViewAdapter.kt"}}
{"prompt": "\n import android.view.View\noverride fun onClick(v: View) {\r\n            if ((skill?.lvl ?: 0) <= level) {\r", "choices": [{"text": "\n import android.view.View\noverride fun onClick(v: View) {\r\n            if ((skill?.lvl?: 0) <= level) {\r\n//                skill?.lvl = skill?.lvl?: 0 + 1\r\n                skill?.lvl = level\r\n                skill?.save()\r\n                skill?.refresh()\r\n                skill?.refresh()\r\n                skill?.refresh()\r\n                skill?.refresh()\r\n                skill?.refresh()\r\n                skill?.refresh()\r\n                skill?.refresh()\r\n                skill?.refresh()\r\n                skill?.refresh()\r\n                skill?.refresh()\r\n                skill?.refresh()\r\n                skill?.refresh()\r\n                skill?.refresh()\r\n                skill?.refresh()\r\n                skill?.refresh()\r\n                skill?.refresh()\r\n                skill?.refresh()\r\n                skill?.refresh()\r\n                skill?.refresh()\r\n                skill?.refresh()\r\n               "}], "metadata": {"task_id": "habitica-android/580", "ground_truth": "                skill?.let { onUseSkill?.invoke(it) }\r\n            }\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\SkillsRecyclerViewAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.Task\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): TaskViewHolder {\r\n        val view = LayoutInflater.from(parent.context)\r", "choices": [{"text": ".inflate(R.layout.task_list_item, parent, false)\r\n        return TaskViewHolder(view)\r\n    }\n"}], "metadata": {"task_id": "habitica-android/582", "ground_truth": "            .inflate(R.layout.skill_task_item_card, parent, false)\r\n        return TaskViewHolder(view)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\SkillTasksRecyclerViewAdapter.kt"}}
{"prompt": "\n import android.view.View\noverride fun onClick(v: View) {\r\n            if (v == itemView) {\r", "choices": [{"text": "//                val intent = Intent(context, DetailActivity::class.java)\r\n//                intent.putExtra(\"id\", id)\r\n//                context.startActivity(intent)\r\n            }\r\n        }\r\n    }\r\n}<file_sep>/app/src/main/java/com/example/myapplication/ui/home/HomeFragment.kt\npackage com.example.myapplication.ui.home\r\n\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport"}], "metadata": {"task_id": "habitica-android/583", "ground_truth": "                task?.let {\r\n                    onTaskSelection?.invoke(it)\r\n                }\r\n            }\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\SkillTasksRecyclerViewAdapter.kt"}}
{"prompt": "\n fun setItemList(itemList: List<Any>) {\r", "choices": [{"text": "this.itemList = itemList\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/584", "ground_truth": "        this.itemList = itemList\r\n        this.notifyDataSetChanged()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\AchievementProfileAdapter.kt"}}
{"prompt": " import android.view.View\nvar itemType String?\nvar itemList List<Any>\nvar activity MainActivity?\noverride fun getItemViewType(position: Int): Int {\r\n        if (itemList.size <= position) return 0\r\n        return if (this.itemList[position].javaClass == String::class.java) {\r", "choices": [{"text": "//            return 0\r\n            R.layout.item_text\r\n        } else {\r\n            R.layout.item_image\r\n        }\r\n    }\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n        if (viewType == R.layout.item_text) {\r\n            return TextViewHolder(LayoutInflater.from(parent.context).inflate(viewType, parent, false))\r\n        } else {\r\n            return ImageViewHolder(LayoutInflater.from(parent.context).inflate(viewType, parent, false))\r\n        }\r\n    }\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder"}], "metadata": {"task_id": "habitica-android/587", "ground_truth": "            0\r\n        } else {\r\n            1\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\AchievementProfileAdapter.kt"}}
{"prompt": "\n import android.view.View\noverride fun onClick(view: View) {\r\n            achievement?.let {\r", "choices": [{"text": "//                val intent = Intent(this, AchievementDetailActivity::class.java)\r\n//                intent.putExtra(AchievementDetailActivity.EXTRA_ACHIEVEMENT, it)\r\n//                startActivity(intent)\r\n            }\r\n        }\n"}], "metadata": {"task_id": "habitica-android/588", "ground_truth": "                AchievementDetailDialog(it, itemView.context).show()\r\n            }\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\AchievementProfileAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.Task\nfun addTaskUnder(taskToAdd: Task, taskAbove: Task?): Int {\r\n        val position = content?.indexOfFirst { t -> t.id == taskAbove?.id } ?: 0\r\n\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.models.tasks.Task\nfun addTaskUnder(taskToAdd: Task, taskAbove: Task?): Int {\r\n        val position = content?.indexOfFirst { t -> t.id == taskAbove?.id }?: 0\r\n\r\n//        if (position == -1) {\r\n//            throw IllegalArgumentException(\"Task above not found\")\r\n//        }\r\n\r\n        return content?.add(position + 1, taskToAdd)?: 0\r\n    }\n"}], "metadata": {"task_id": "habitica-android/592", "ground_truth": "        content?.add(position + 1, taskToAdd)\r\n        filter()\r\n\r\n        return position\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\challenges\\ChallengeTasksRecyclerViewAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.Task\nfun replaceTask(task: Task): Boolean {\r\n        var i = 0\r\n        while (i < (this.content?.size ?: 0)) {\r\n            if (content?.get(i)?.id == task.id) {\r\n                break\r\n            }\r\n            ++i\r\n        }\r\n        if (i < (content?.size ?: 0)) {\r\n            content?.set(i, task)\r\n\r\n            filter()\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.models.tasks.Task\nfun replaceTask(task: Task): Boolean {\r\n        var i = 0\r\n        while (i < (this.content?.size?: 0)) {\r\n            if (content?.get(i)?.id == task.id) {\r\n                break\r\n            }\r\n            ++i\r\n        }\r\n        if (i < (content?.size?: 0)) {\r\n            content?.set(i, task)\r\n\r\n            filter()\r\n//            notifyDataSetChanged()\r\n            return true\r\n        }\r\n        return false\r\n    }\n"}], "metadata": {"task_id": "habitica-android/593", "ground_truth": "            return true\r\n        }\r\n\r\n        return false\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\challenges\\ChallengeTasksRecyclerViewAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.Task\noverride fun bind(\r\n            data: Task,\r\n            position: Int,\r\n            displayMode: String\r\n        ) {\r", "choices": [{"text": "//            val task = data.task\r\n//            val taskName = task.name\r\n//            val taskDescription = task.description\r\n//            val taskPoints = task.points\r\n//            val taskType = task.type\r\n//            val taskStatus = task.status\r\n//            val taskDueDate = task.dueDate\r\n//            val taskDueTime = task.dueTime\r\n//            val taskDueTimeString = task.dueTimeString\r\n//            val taskDueDateString = task.dueDateString\r\n//            val taskDueDateLong ="}], "metadata": {"task_id": "habitica-android/594", "ground_truth": "            this.newTask = data\r\n            addBtn.text = data.text\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\challenges\\ChallengeTasksRecyclerViewAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.Challenge\nimport android.view.View\noverride fun onBindViewHolder(holder: ChallengeViewHolder, position: Int) {\r\n        data[position].let { challenge ->\r\n            holder.bind(challenge, challengeMemberships?.first { challenge.id == it.challengeID } != null)\r\n            holder.itemView.setOnClickListener {\r\n                if (challenge.isManaged && challenge.isValid) {\r\n                    challenge.id?.let {\r\n                        onOpenChallengeFragment?.invoke(it)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/595", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\ChallengesListViewAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.Challenge\nfun updateUnfilteredData(data: List<Challenge>?) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "habitica-android/596", "ground_truth": "        this.data = data ?: emptyList()\r\n        unfilteredData = data\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\ChallengesListViewAdapter.kt"}}
{"prompt": "\n import android.view.View\noverride fun getItemViewType(position: Int): Int {\r", "choices": [{"text": "return if (position == 0) {\r\nTYPE_HEADER\r\n} else {\r\nTYPE_ITEM\r\n}\r\n}\r\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\nreturn if (viewType == TYPE_HEADER) {\r\nval view = LayoutInflater.from(parent.context).inflate(R.layout.header_layout, parent, false)\r\nHeaderViewHolder(view)\r\n} else {\r\nval view = LayoutInflater.from(parent.context).inflate(R.layout.item_layout, parent,"}], "metadata": {"task_id": "habitica-android/599", "ground_truth": "        if (data.size <= position) return 0\r\n        return if (data[position].isSystemMessage) 0 else 1\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\ChatRecyclerViewAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.ChatMessage\nprivate fun expandMessage(message: ChatMessage, position: Int?) {\r\n        expandedMessageId = if (expandedMessageId == message.id) {\r\n            null\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/600", "ground_truth": "        } else {\r\n            message.id\r\n        }\r\n        notifyItemChanged(position ?: data.indexOf(message))\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\ChatRecyclerViewAdapter.kt"}}
{"prompt": "\n private fun expandMessage(id: String, position: Int) {\r\n        if (isPositionIntroMessage(position)) {\r\n            return\r\n        }\r\n        expandedMessageId = if (expandedMessageId == id) {\r\n            null\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/603", "ground_truth": "        } else {\r\n            id\r\n        }\r\n        notifyItemChanged(position)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\InboxAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.ui.viewHolders.GroupMemberViewHolder\nimport com.habitrpg.android.habitica.models.members.Member\noverride fun onBindViewHolder(holder: GroupMemberViewHolder, position: Int) {\r\n        holder.bind(data[position], leaderID, null)\r\n        holder.onClickEvent = {\r", "choices": [{"text": "//            val intent = Intent(context, GroupMemberActivity::class.java)\r\n//            intent.putExtra(\"member\", data[position])\r\n//            context.startActivity(intent)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/604", "ground_truth": "            onUserClicked?.invoke(data[position].id)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\social\\PartyMemberRecyclerViewAdapter.kt"}}
{"prompt": "\n import android.view.View\noverride fun onBindViewHolder(holder: VH, position: Int) {\r\n        val item = filteredContent?.get(position)\r\n        if (item != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/605", "ground_truth": "            holder.bind(item, position, \"normal\")\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\BaseTasksRecyclerViewAdapter.kt"}}
{"prompt": "\n override fun getItemId(position: Int): Long {\r", "choices": [{"text": "return position.toLong()\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r"}], "metadata": {"task_id": "habitica-android/606", "ground_truth": "        val task = filteredContent?.get(position)\r\n        return task?.id?.hashCode()?.toLong() ?: 0\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\BaseTasksRecyclerViewAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.Task\nprivate fun updateTask(task: Task) {\r\n        if (taskType != task.type) {\r\n            return\r\n        }\r\n        var i = 0\r\n        while (i < (this.content?.size ?: 0)) {\r\n            if (content?.get(i)?.id == task.id) {\r\n                break\r\n            }\r\n            ++i\r\n        }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/607", "ground_truth": "        if (i < (content?.size ?: 0)) {\r\n            content?.set(i, task)\r\n        }\r\n        filter()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\BaseTasksRecyclerViewAdapter.kt"}}
{"prompt": "\n fun filter() {\r\n        if (this.viewModel.filterCount(taskType) == 0) {\r\n            filteredContent = content\r\n        } else {\r\n            filteredContent = ArrayList()\r\n            content?.let {\r\n                filteredContent?.addAll(this.viewModel.filter(it))\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/608", "ground_truth": "            }\r\n        }\r\n\r\n        this.notifyDataSetChanged()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\BaseTasksRecyclerViewAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.Task\nfun setTasks(tasks: List<Task>) {\r\n        this.content = ArrayList()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/609", "ground_truth": "        this.content?.addAll(tasks)\r\n        filter()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\BaseTasksRecyclerViewAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.Task\noverride fun updateUnfilteredData(data: List<Task>?) {\r\n        unfilteredData = data\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/610", "ground_truth": "        this.data = data ?: emptyList()\r\n        filter()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\RealmBaseTasksRecyclerViewAdapter.kt"}}
{"prompt": "\n import android.view.View\noverride fun getItemViewType(position: Int): Int {\r", "choices": [{"text": "return if (position == 0) {\r\nTYPE_HEADER\r\n} else {\r\nTYPE_ITEM\r\n}\r\n}\r\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\nreturn if (viewType == TYPE_HEADER) {\r\nval view = LayoutInflater.from(parent.context).inflate(R.layout.header_layout, parent, false)\r\nHeaderViewHolder(view)\r\n} else {\r\nval view = LayoutInflater.from(parent.context).inflate(R.layout.item_layout, parent,"}], "metadata": {"task_id": "habitica-android/613", "ground_truth": "        if (showAdventureGuide && position == 0) return 1\r\n        return super.getItemViewType(position)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\RealmBaseTasksRecyclerViewAdapter.kt"}}
{"prompt": "\n import io.realm.OrderedRealmCollection\nimport com.habitrpg.android.habitica.R\nfinal override fun filter() {\r\n        val unfilteredData = this.unfilteredData ?: return\r\n\r\n        if (unfilteredData is OrderedRealmCollection) {\r\n            val query = viewModel.createQuery(unfilteredData)\r\n            if (query != null) {\r\n                data = query.findAll()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/614", "ground_truth": "            }\r\n        } else {\r\n            data = unfilteredData\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\RealmBaseTasksRecyclerViewAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getItemViewType(position: Int): Int {\r\n        return if ((customRewards != null && position < customRewardCount) || (customRewardCount == 0 && inAppRewardCount == 0)) {\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun getItemViewType(position: Int): Int {\r\n        return if ((customRewards!= null && position < customRewardCount) || (customRewardCount == 0 && inAppRewardCount == 0)) {\r\n//            if (position < customRewardCount) {\r\n            TYPE_CUSTOM_REWARD\r\n//            } else {\r\n//                TYPE_IN_APP_REWARD\r\n//            }\r\n        } else {\r\n            TYPE_IN_APP_REWARD\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/616", "ground_truth": "            VIEWTYPE_CUSTOM_REWARD\r\n        } else {\r\n            VIEWTYPE_IN_APP_REWARD\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\RewardsRecyclerViewAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.Task\nfun updateData(tasks: List<Task>?) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "habitica-android/618", "ground_truth": "        this.customRewards = tasks\r\n        notifyDataSetChanged()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\RewardsRecyclerViewAdapter.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.models.shops.ShopItem\nimport com.habitrpg.android.habitica.R\nfun updateItemRewards(items: List<ShopItem>) {\r\n        if (items.isNotEmpty()) {\r\n            if (Task::class.java.isAssignableFrom(items.first().javaClass)) {\r\n                // this catches a weird bug where the observable gets a list of tasks for no apparent reason.\r\n                return\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/619", "ground_truth": "            }\r\n        }\r\n        this.inAppRewards = items\r\n        notifyDataSetChanged()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\adapter\\tasks\\RewardsRecyclerViewAdapter.kt"}}
{"prompt": " import android.content.Intent\nvar binding FragmentAboutBinding?\nval versionName String\nval termsLink\nprivate fun openGooglePlay() {\r\n        val intent = Intent(Intent.ACTION_VIEW)\r", "choices": [{"text": "intent.data = Uri.parse(\"market://details?id=$packageName\")\r\nstartActivity(intent)\r\n}\n"}], "metadata": {"task_id": "habitica-android/620", "ground_truth": "        intent.data = \"market://details?id=com.habitrpg.android.habitica\".toUri()\r\n        startActivity(intent)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\AboutFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\n"}], "metadata": {"task_id": "habitica-android/621", "ground_truth": "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\AboutFragment.kt"}}
{"prompt": " import androidx.core.net.toUri\nvar binding FragmentAboutBinding?\nval versionName String\nvar versionNumberTappedCount\nprivate fun openBrowserLink(url: String) {\r\n        val uriUrl = url.toUri()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/622", "ground_truth": "        val launchBrowser = Intent(Intent.ACTION_VIEW, uriUrl)\r\n        startActivity(launchBrowser)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\AboutFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.ui.adapter.AchievementsAdapter\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        hidesToolbar = true\r\n        adapter = AchievementsAdapter()\r", "choices": [{"text": "//        adapter.setHasStableIds(true)\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }\r\n}<file_sep>/app/src/main/java/com/habitrpg/android/habitica/ui/adapter/AchievementsAdapter.kt\npackage com.habitrpg.android.habitica.ui.adapter\n\nimport android.content.Context\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.ImageView\nimport android.widget.TextView\nimport androidx.recyclerview.widget."}], "metadata": {"task_id": "habitica-android/623", "ground_truth": "        onRefresh()\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\AchievementsFragment.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r", "choices": [{"text": "super.onSaveInstanceState(outState)\r\noutState.putInt(\"key\", 1)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\nsuper.onRestoreInstanceState(savedInstanceState)\r\nval value = savedInstanceState.getInt(\"key\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/625", "ground_truth": "        outState.putBoolean(\"useGridLayout\", useGridLayout)\r\n        super.onSaveInstanceState(outState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\AchievementsFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\noverride fun onRefresh() {\r\n        lifecycleScope.launchCatching {\r", "choices": [{"text": "//            val result = withContext(Dispatchers.IO) {\r\n//                try {\r\n//                    val response = api.getHabiticaUser()\r\n//                    if (response.isSuccessful) {\r\n//                        response.body()\r\n//                    } else {\r\n//                        null\r\n//                    }\r\n//                } catch (e: Exception) {\r\n//                    null\r\n//                }\r\n//            }\r\n//            if (result!= null) {\r\n//                val user = result.user\r\n//                val user ="}], "metadata": {"task_id": "habitica-android/627", "ground_truth": "            userRepository.retrieveAchievements()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\AchievementsFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.helpers.Analytics\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        Analytics.sendNavigationEvent(this.javaClass.simpleName)\r\n\r", "choices": [{"text": "//        val view = inflater.inflate(R.layout.fragment_habit_list, container, false)\r\n//        val recyclerView = view.findViewById<RecyclerView>(R.id.habit_list)\r\n//        recyclerView.layoutManager = LinearLayoutManager(context)\r\n//        recyclerView.adapter = HabitListAdapter(context!!)\r\n//        return view\r\n    }\r\n}<file_sep>/app/src/main/java/com/habitrpg/android/habitica/helpers/Analytics.kt\npackage com.habitrpg.android.habitica.helpers\n"}], "metadata": {"task_id": "habitica-android/628", "ground_truth": "        binding = createBinding(inflater, container)\r\n        return binding?.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseDialogFragment.kt"}}
{"prompt": "\n override fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nmMapView.onResume()\r\n}\r\noverride fun onPause() {\r\nsuper.onPause()\r\nmMapView.onPause()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nmMapView.onDestroy()\r\n}\r\noverride fun onLowMemory() {\r\nsuper.onLowMemory()\r\nmMapView.onLowMemory()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/629", "ground_truth": "        super.onResume()\r\n        showTutorialIfNeeded()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseDialogFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/630", "ground_truth": "        binding = null\r\n        super.onDestroyView()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseDialogFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r\n        try {\r\n            tutorialRepository.close()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/631", "ground_truth": "        } catch (exception: UninitializedPropertyAccessException) { /* no-on */ }\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseDialogFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\n"}], "metadata": {"task_id": "habitica-android/632", "ground_truth": "        binding = createBinding(inflater, container)\r\n        return binding?.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseFragment.kt"}}
{"prompt": "\n override fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nmMapView.onResume()\r\n}\r\noverride fun onPause() {\r\nsuper.onPause()\r\nmMapView.onPause()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nmMapView.onDestroy()\r\n}\r\noverride fun onLowMemory() {\r\nsuper.onLowMemory()\r\nmMapView.onLowMemory()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/633", "ground_truth": "        super.onResume()\r\n        showTutorialIfNeeded()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/634", "ground_truth": "        binding = null\r\n        super.onDestroyView()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r\n        try {\r\n            tutorialRepository.close()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/635", "ground_truth": "        } catch (exception: UninitializedPropertyAccessException) { /* no-on */ }\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/636", "ground_truth": "        super.onDestroyView()\r\n        binding = null\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseMainFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/640", "ground_truth": "        userRepository.close()\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseMainFragment.kt"}}
{"prompt": "\nvar hidesToolbar Boolean\nval mainActivity\nval collapsingToolbar\n private fun disableToolbarScrolling() {\r", "choices": [{"text": "mainActivity.window.setFlags(WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS, WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS)\r\ncollapsingToolbar.setExpandedTitleTextAppearance(R.style.ExpandedAppBar)\r\ncollapsingToolbar.setCollapsedTitleTextAppearance(R.style.CollapsedAppBar)\r\ncollapsingToolbar.title = \"\"\r\ncollapsingToolbar.setExpandedTitleColor(Color.TRANSPARENT)\r\ncollapsingToolbar.setCollapsedTitleTextColor(Color.TRANSPARENT)\r\ncollapsingToolbar.setContentScri"}], "metadata": {"task_id": "habitica-android/641", "ground_truth": "        val params = collapsingToolbar?.layoutParams as? AppBarLayout.LayoutParams\r\n        params?.scrollFlags = 0\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseMainFragment.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.extensions.getThemeColor\nimport com.habitrpg.android.habitica.R\nimport android.view.MenuItem\nimport android.view.Menu\nprotected fun tintMenuIcon(item: MenuItem?) {\r\n        context?.getThemeColor(R.attr.headerTextColor)?.let {\r\n            item?.icon?.setTint(it)\r", "choices": [{"text": "}\r\n    }\n"}], "metadata": {"task_id": "habitica-android/643", "ground_truth": "            item?.icon?.setTintMode(PorterDuff.Mode.MULTIPLY)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\BaseMainFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/644", "ground_truth": "        customizationRepository.close()\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\customization\\AvatarCustomizationFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.MenuItem\nimport android.view.Menu\n @Suppress(\"ReturnCount\")\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.action_filter -> {\r\n                showFilterDialog()\r\n                return true\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/646", "ground_truth": "            }\r\n        }\r\n\r\n        return super.onOptionsItemSelected(item)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\customization\\AvatarCustomizationFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\noverride fun onRefresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.retrieveUser(true, true)\r", "choices": [{"text": "//            userRepository.retrieveUser(true, true)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/649", "ground_truth": "            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\customization\\AvatarCustomizationFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nprivate fun setGridSpanCount(width: Int) {\r\n        val itemWidth = context?.resources?.getDimension(R.dimen.customization_width) ?: 0F\r\n        var spanCount = (width / itemWidth).toInt()\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.R\nprivate fun setGridSpanCount(width: Int) {\r\n        val itemWidth = context?.resources?.getDimension(R.dimen.customization_width)?: 0F\r\n        var spanCount = (width / itemWidth).toInt()\r\n}\n"}], "metadata": {"task_id": "habitica-android/651", "ground_truth": "        if (spanCount == 0) {\r\n            spanCount = 1\r\n        }\r\n        layoutManager.spanCount = spanCount\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\customization\\AvatarEquipmentFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.User\nfun updateUser(user: User?) {\r\n        this.updateActiveCustomization(user)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/652", "ground_truth": "        this.adapter.gemBalance = user?.gemCount ?: 0\r\n        adapter.notifyDataSetChanged()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\customization\\AvatarEquipmentFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\noverride fun onRefresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.retrieveUser(true, true)\r", "choices": [{"text": "//            userRepository.retrieveUser(true, true)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/653", "ground_truth": "            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\customization\\AvatarEquipmentFragment.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.helpers.MainNavigationController\nprivate fun displayCustomizationFragment(type: String, category: String?) {\r\n        MainNavigationController.navigate(\r\n            AvatarOverviewFragmentDirections.openAvatarDetail(\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/654", "ground_truth": "                type,\r\n                category ?: \"\"\r\n            )\r\n        )\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\customization\\AvatarOverviewFragment.kt"}}
{"prompt": "\n import android.view.MenuInflater\nimport android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {\r", "choices": [{"text": "inflater.inflate(R.menu.menu_main, menu)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/655", "ground_truth": "        super.onCreateOptionsMenu(menu, inflater)\r\n        inflater.inflate(R.menu.menu_share_avatar, menu)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\customization\\AvatarOverviewFragment.kt"}}
{"prompt": "\n import android.widget.AdapterView\nimport android.view.View\noverride fun onItemSelected(parent: AdapterView<*>, view: View?, position: Int, id: Long) {\r\n        val newSize: String = if (position == 0) \"slim\" else \"broad\"\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/656", "ground_truth": "\r\n        lifecycleScope.launchCatching {\r\n            userRepository.updateUser(\"preferences.size\", newSize)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\customization\\AvatarOverviewFragment.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval intent = Intent(this, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\nval button = findViewById<Button>(R.id.button)"}], "metadata": {"task_id": "habitica-android/657", "ground_truth": "        showCustomization = false\r\n        super.onCreate(savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\customization\\EquipmentOverviewFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/658", "ground_truth": "        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\equipment\\EquipmentDetailFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\noverride fun onRefresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.retrieveUser(true, true)\r", "choices": [{"text": "//            userRepository.retrieveUser(true, true)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/659", "ground_truth": "            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\equipment\\EquipmentDetailFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/660", "ground_truth": "        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemDialogFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.inventory.Pet\nimport com.habitrpg.android.habitica.models.inventory.Food\nimport com.habitrpg.android.habitica.interactors.FeedPetUseCase\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nprivate fun feedPet(food: Food) {\r\n        val pet = feedingPet ?: return\r\n        val activity = activity ?: return\r\n        activity.lifecycleScope.launchCatching {\r\n            val result = feedPetUseCase.callInteractor(\r\n                FeedPetUseCase.RequestValues(\r\n                    pet,\r\n                    food,\r\n                    activity\r", "choices": [{"text": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.inventory.Pet\nimport com.habitrpg.android.habitica.models.inventory.Food\nimport com.habitrpg.android.habitica.interactors.FeedPetUseCase\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nprivate fun feedPet(food: Food) {\r\n        val pet = feedingPet?: return\r\n        val activity = activity?: return\r\n        activity.lifecycleScope.launchCatching {\r\n            val result = feedPetUseCase.callInteractor(\r\n                FeedPetUseCase.RequestValues(\r\n                    pet,\r\n                    food,\r\n                    activity\r\n)\r\n            )\r\n            if (result.isSuccess) {\r\n                val pet = result.getOrNull()\r\n                if (pet!= null) {\r\n                    feedingPet = pet\r\n                    pet.feeding = true\r\n                    pet.feedingTime = System.currentTimeMillis()\r\n                    pet.feedingFood = food\r\n                    pet.feedingFood?.let {\r\n                        pet.feedingFood?.quantity = pet.feedingFood?.quantity?.minus(1)\r\n                    }\r\n                    pet.feedingFood?.let {\r\n                        pet.feedingFood?.quantity = pet.feedingFood?.quantity?.minus(1)\r\n                    }\r\n                    pet"}], "metadata": {"task_id": "habitica-android/662", "ground_truth": "                )\r\n            )\r\n            onFeedResult?.invoke(result)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemDialogFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.ViewGroup\nimport android.view.View\noverride fun onResume() {\r\n        if ((this.isHatching || this.isFeeding) && dialog?.window != null) {\r\n            val params = dialog?.window?.attributes\r\n            params?.width = ViewGroup.LayoutParams.MATCH_PARENT\r\n            params?.verticalMargin = 60f\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.R\nimport android.view.ViewGroup\nimport android.view.View\noverride fun onResume() {\r\n        if ((this.isHatching || this.isFeeding) && dialog?.window!= null) {\r\n            val params = dialog?.window?.attributes\r\n            params?.width = ViewGroup.LayoutParams.MATCH_PARENT\r\n            params?.verticalMargin = 60f\r\n//            params?.height = ViewGroup.LayoutParams.WRAP_CONTENT\r\n            dialog?.window?.attributes = params\r\n        }\r\n        super.onResume()\r\n    }\n"}], "metadata": {"task_id": "habitica-android/663", "ground_truth": "            dialog?.window?.attributes = params\r\n        }\r\n\r\n        super.onResume()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemDialogFragment.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r", "choices": [{"text": "super.onSaveInstanceState(outState)\r\noutState.putInt(\"key\", 1)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\nsuper.onRestoreInstanceState(savedInstanceState)\r\nval value = savedInstanceState.getInt(\"key\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/664", "ground_truth": "        super.onSaveInstanceState(outState)\r\n        outState.putString(ITEM_TYPE_KEY, this.itemType)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemDialogFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.inventory.Pet\nimport com.habitrpg.android.habitica.models.inventory.HatchingPotion\nimport com.habitrpg.android.habitica.models.inventory.Egg\nimport com.habitrpg.android.habitica.interactors.HatchPetUseCase\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nprivate fun hatchPet(potion: HatchingPotion, egg: Egg) {\r\n        dismiss()\r\n        val activity = activity ?: return\r\n        activity.lifecycleScope.launchCatching {\r\n            hatchPetUseCase.callInteractor(\r\n                HatchPetUseCase.RequestValues(\r\n                    potion,\r\n                    egg,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/665", "ground_truth": "                    activity\r\n                )\r\n            )\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemDialogFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/666", "ground_truth": "        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemRecyclerFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.ui.activities.BaseActivity\nimport com.habitrpg.android.habitica.models.inventory.HatchingPotion\nimport com.habitrpg.android.habitica.models.inventory.Egg\nimport com.habitrpg.android.habitica.interactors.HatchPetUseCase\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nimport android.app.Activity\nprivate fun hatchPet(potion: HatchingPotion, egg: Egg) {\r\n        (activity as? BaseActivity)?.let {\r\n            lifecycleScope.launchCatching {\r\n                hatchPetUseCase.callInteractor(\r\n                    HatchPetUseCase.RequestValues(\r\n                        potion,\r\n                        egg,\r\n                        it\r", "choices": [{"text": "//                        it.getHabiticaService()\r\n                    )\r\n                )\r\n            }\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "habitica-android/670", "ground_truth": "                    )\r\n                )\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemRecyclerFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.inventory.SpecialItem\nimport com.habitrpg.android.habitica.models.inventory.Item\nprivate fun onSpecialItemSelected(specialItem: SpecialItem) {\r\n        selectedSpecialItem = specialItem\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/671", "ground_truth": "        val intent = Intent(activity, SkillMemberActivity::class.java)\r\n        memberSelectionResult.launch(intent)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemRecyclerFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.ui.views.HabiticaSnackbar\nimport com.habitrpg.android.habitica.ui.activities.MainActivity\nimport com.habitrpg.android.habitica.models.inventory.SpecialItem\nimport com.habitrpg.android.habitica.models.inventory.Item\nimport com.habitrpg.android.habitica.R\nimport android.app.Activity\nprivate fun displaySpecialItemResult(specialItem: SpecialItem?) {\r\n        if (!isAdded) return\r\n\r\n        val activity = activity as? MainActivity\r\n        activity?.let {\r\n            HabiticaSnackbar.showSnackbar(\r\n                it.snackbarContainer,\r\n                context?.getString(R.string.used_skill_without_mana, specialItem?.text),\r\n                HabiticaSnackbar.SnackbarDisplayType.BLUE\r", "choices": [{"text": ")\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/673", "ground_truth": "            )\r\n        }\r\n\r\n        loadItems()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemRecyclerFragment.kt"}}
{"prompt": "\n import com.google.android.material.tabs.TabLayout\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.usesTabLayout = true\r", "choices": [{"text": "//        return super.onCreateView(inflater, container, savedInstanceState)\r\n        return inflater.inflate(R.layout.fragment_home, container, false)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        val tabLayout = view.findViewById<TabLayout>(R.id.tab_layout)\r\n        tabLayout.addTab(tabLayout.newTab().setText(\"Home\"))\r\n        tabLayout.addTab(tabLayout.newTab().setText(\"Profile\"))\r\n        tabLayout.addTab(tabLayout.new"}], "metadata": {"task_id": "habitica-android/674", "ground_truth": "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemsFragment.kt"}}
{"prompt": "\n import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        binding?.viewPager?.currentItem = 0\r\n        setViewPagerAdapter()\r\n\r\n        arguments?.let {\r\n            val args = ItemsFragmentArgs.fromBundle(it)\r\n            binding?.viewPager?.currentItem = when (args.itemType) {\r\n                \"hatchingPotions\" -> 1\r\n                \"food\" -> 2\r\n                \"quests\" -> 3\r", "choices": [{"text": "//                \"other\" -> 4\r\n                else -> 0\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/675", "ground_truth": "                \"special\" -> 4\r\n                else -> 0\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\items\\ItemsFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\n"}], "metadata": {"task_id": "habitica-android/677", "ground_truth": "        shopIdentifier = Shop.MARKET\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\shops\\MarketFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\n"}], "metadata": {"task_id": "habitica-android/678", "ground_truth": "        shopIdentifier = Shop.QUEST_SHOP\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\shops\\QuestShopFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\n"}], "metadata": {"task_id": "habitica-android/680", "ground_truth": "        shopIdentifier = Shop.SEASONAL_SHOP\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\shops\\SeasonalShopFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.Group\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_group_list, container, false)\r\n}\r\n}<file_sep>/app/src/main/java/com/habitrpg/android/habitica/models/social/Group.kt\npackage com.habitrpg.android.habitica.models.social\n\nimport com.google.gson.annotations.SerializedName\n\ndata class Group(\n    @SerializedName(\"id\")\n    val id: String,\n    @SerializedName(\"name\")\n    val name: String,\n    @SerializedName(\"description\")\n    val description: String,\n    @SerializedName(\""}], "metadata": {"task_id": "habitica-android/681", "ground_truth": "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\shops\\ShopFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun onDestroyView() {\r\n        inventoryRepository.close()\r\n        socialRepository.close()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/682", "ground_truth": "        toolbarAccessoryContainer?.removeView(currencyView)\r\n        super.onDestroyView()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\shops\\ShopFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\noverride fun onResume() {\r\n        super.onResume()\r\n        if (shop == null) {\r", "choices": [{"text": "//            shop = Shop(this)\r\n            shop = Shop(this)\r\n            shop!!.load()\r\n        }\r\n        if (shop!!.isLoaded()) {\r\n            shop!!.load()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/684", "ground_truth": "            loadShopInventory()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\shops\\ShopFragment.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r", "choices": [{"text": "super.onSaveInstanceState(outState)\r\noutState.putInt(\"key\", 1)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\nsuper.onRestoreInstanceState(savedInstanceState)\r\nval value = savedInstanceState.getInt(\"key\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/685", "ground_truth": "        super.onSaveInstanceState(outState)\r\n        outState.putString(SHOP_IDENTIFIER_KEY, this.shopIdentifier)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\shops\\ShopFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun initializeCurrencyViews() {\r\n        currencyView.setContent {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/689", "ground_truth": "            hourglasses.value?.let { CurrencyText(currency = \"hourglasses\", value = it) }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\shops\\TimeTravelersShopFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\n"}], "metadata": {"task_id": "habitica-android/690", "ground_truth": "        this.usesTabLayout = false\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\MountDetailRecyclerFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/691", "ground_truth": "        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\MountDetailRecyclerFragment.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r", "choices": [{"text": "super.onSaveInstanceState(outState)\r\noutState.putInt(\"key\", 1)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\nsuper.onRestoreInstanceState(savedInstanceState)\r\nval value = savedInstanceState.getInt(\"key\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/692", "ground_truth": "        super.onSaveInstanceState(outState)\r\n        outState.putString(ANIMAL_TYPE_KEY, this.animalType)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\MountDetailRecyclerFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\noverride fun onRefresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.retrieveUser(false, true)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/694", "ground_truth": "            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\MountDetailRecyclerFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/696", "ground_truth": "        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\PetDetailRecyclerFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}<issue_comment>username_1: @username_0 I'm not sure what you're asking.  You're not using the `onResume` method of the `Activity` class.  You're using the `onResume` method of the `Fragment` class.  You should be using the `onResume` method of the `Activity` class.<issue_comment>username_0: @username_1  I am using the onResume method of the Activity class.<issue_comment>username"}], "metadata": {"task_id": "habitica-android/697", "ground_truth": "        super.onResume()\r\n        mainActivity?.title = animalType\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\PetDetailRecyclerFragment.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r", "choices": [{"text": "super.onSaveInstanceState(outState)\r\noutState.putInt(\"key\", 1)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\nsuper.onRestoreInstanceState(savedInstanceState)\r\nval value = savedInstanceState.getInt(\"key\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/698", "ground_truth": "        super.onSaveInstanceState(outState)\r\n        outState.putString(ANIMAL_TYPE_KEY, this.animalType)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\PetDetailRecyclerFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nprivate fun setGridSpanCount(width: Int) {\r\n        var spanCount = 0\r\n        if (context != null && context?.resources != null) {\r\n            val animalWidth = R.dimen.pet_width\r\n            val itemWidth: Float = context?.resources?.getDimension(animalWidth) ?: 0.toFloat()\r\n\r\n            spanCount = (width / itemWidth).toInt()\r\n        }\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.R\nprivate fun setGridSpanCount(width: Int) {\r\n        var spanCount = 0\r\n        if (context!= null && context?.resources!= null) {\r\n            val animalWidth = R.dimen.pet_width\r\n            val itemWidth: Float = context?.resources?.getDimension(animalWidth)?: 0.toFloat()\r\n\r\n            spanCount = (width / itemWidth).toInt()\r\n        }\r\n}\n"}], "metadata": {"task_id": "habitica-android/699", "ground_truth": "        if (spanCount == 0) {\r\n            spanCount = 1\r\n        }\r\n        layoutManager?.spanCount = spanCount\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\PetDetailRecyclerFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\noverride fun onRefresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.retrieveUser(false, true)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/700", "ground_truth": "            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\PetDetailRecyclerFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.usesTabLayout = true\r", "choices": [{"text": "//        this.tabLayoutId = R.id.tabLayout\r\n//        this.tabLayoutTitle = R.string.tab_title\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/701", "ground_truth": "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\StableFragment.kt"}}
{"prompt": "\n import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        binding?.viewPager?.currentItem = 0\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/702", "ground_truth": "\r\n        setViewPagerAdapter()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\StableFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/704", "ground_truth": "        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\StableRecyclerFragment.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r", "choices": [{"text": "super.onSaveInstanceState(outState)\r\noutState.putInt(\"key\", 1)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\nsuper.onRestoreInstanceState(savedInstanceState)\r\nval value = savedInstanceState.getInt(\"key\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/705", "ground_truth": "        super.onSaveInstanceState(outState)\r\n        outState.putString(ITEM_TYPE_KEY, viewModel.itemType)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\StableRecyclerFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nprivate fun setGridSpanCount(width: Int) {\r\n        var spanCount = 0\r\n        if (context != null && context?.resources != null) {\r\n            val animalWidth = if (viewModel.itemType == \"pets\") R.dimen.pet_width else R.dimen.mount_width\r\n            val itemWidth: Float = context?.resources?.getDimension(animalWidth) ?: 0.toFloat()\r\n\r\n            spanCount = (width / itemWidth).toInt()\r\n        }\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.R\nprivate fun setGridSpanCount(width: Int) {\r\n        var spanCount = 0\r\n        if (context!= null && context?.resources!= null) {\r\n            val animalWidth = if (viewModel.itemType == \"pets\") R.dimen.pet_width else R.dimen.mount_width\r\n            val itemWidth: Float = context?.resources?.getDimension(animalWidth)?: 0.toFloat()\r\n\r\n            spanCount = (width / itemWidth).toInt()\r\n        }\r\n}\n"}], "metadata": {"task_id": "habitica-android/706", "ground_truth": "        if (spanCount == 0) {\r\n            spanCount = 1\r\n        }\r\n        layoutManager?.spanCount = spanCount\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\StableRecyclerFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\noverride fun onRefresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.retrieveUser(true, true)\r", "choices": [{"text": "//            userRepository.retrieveUser(true, true)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/707", "ground_truth": "            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\inventory\\stable\\StableRecyclerFragment.kt"}}
{"prompt": "\n import kotlin.time.Duration\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.Dispatchers\nimport androidx.lifecycle.lifecycleScope\nprivate fun createUpdatingJob(\r\n        key: String,\r\n        endingCondition: () -> Boolean,\r\n        delayFunc: () -> Duration,\r\n        function: () -> Unit\r\n    ) {\r\n        function()\r\n        if (updatingJobs[key]?.isActive == true) {\r\n            updatingJobs[key]?.cancel()\r\n        }\r\n        updatingJobs[key] = lifecycleScope.launch(Dispatchers.Main) {\r\n            while (endingCondition()) {\r", "choices": [{"text": "//                delay(delayFunc())\r\n                delay(1000)\r\n                function()\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/708", "ground_truth": "                function()\r\n                delay(delayFunc())\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\NavigationDrawerFragment.kt"}}
{"prompt": "\n import androidx.drawerlayout.widget.DrawerLayout\nimport android.view.View\nfun toggleDrawer() {\r\n        val containerView = fragmentContainerView\r\n        if (containerView != null && containerView.parent is DrawerLayout) {\r\n            if (drawerLayout?.isDrawerOpen(containerView) == true) {\r\n                drawerLayout?.closeDrawer(containerView)\r\n            } else {\r\n                drawerLayout?.openDrawer(containerView)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/713", "ground_truth": "            }\r\n        } else {\r\n            containerView?.isVisible = containerView?.isVisible != true\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\NavigationDrawerFragment.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r", "choices": [{"text": "super.onSaveInstanceState(outState)\r\noutState.putInt(\"key\", 1)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\nsuper.onRestoreInstanceState(savedInstanceState)\r\nval value = savedInstanceState.getInt(\"key\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/715", "ground_truth": "        super.onSaveInstanceState(outState)\r\n        outState.putInt(STATE_SELECTED_POSITION, mCurrentSelectedPosition)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\NavigationDrawerFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\n"}], "metadata": {"task_id": "habitica-android/719", "ground_truth": "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\NewsFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\noverride fun onResume() {\r\n        super.onResume()\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r", "choices": [{"text": "//            val user = Habitica.user()\r\n//            val user = Habitica.user()\r\n//            val user = Habitica.user()\r\n//            val user = Habitica.user()\r\n//            val user = Habitica.user()\r\n//            val user = Habitica.user()\r\n//            val user = Habitica.user()\r\n//            val user = Habitica.user()\r\n//            val user = Habitica.user()\r\n//            val user = Habitica.user"}], "metadata": {"task_id": "habitica-android/721", "ground_truth": "            userRepository.updateUser(\"flags.newStuff\", false)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\NewsFragment.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/722", "ground_truth": "        findPreference<Preference>(\"confirm_username\")?.isVisible =\r\n            user?.flags?.verifiedUsername == false\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\AccountPreferenceFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}<issue_comment>username_1: @username_0 I'm not sure what you're asking.  You're not using the `onResume` method of the `Activity` class.  You're using the `onResume` method of the `Fragment` class.  You should be using the `onResume` method of the `Activity` class.<issue_comment>username_0: @username_1  I am using the onResume method of the Activity class.<issue_comment>username"}], "metadata": {"task_id": "habitica-android/723", "ground_truth": "        super.onResume()\r\n        preferenceManager.sharedPreferences?.registerOnSharedPreferenceChangeListener(this)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\AccountPreferenceFragment.kt"}}
{"prompt": "\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nmMapView.onPause()\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nmMapView.onResume()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nmMapView.onDestroy()\r\n}\r\noverride fun onLowMemory() {\r\nsuper.onLowMemory()\r\nmMapView.onLowMemory()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/724", "ground_truth": "        preferenceManager.sharedPreferences?.unregisterOnSharedPreferenceChangeListener(this)\r\n        super.onPause()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\AccountPreferenceFragment.kt"}}
{"prompt": "\n import androidx.preference.Preference\nimport androidx.preference.EditTextPreference\nprivate fun configurePreference(preference: Preference?, value: String?) {\r\n        (preference as? EditTextPreference)?.let {\r\n            it.text = value\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/725", "ground_truth": "        }\r\n        preference?.summary = value\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\AccountPreferenceFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.ui.views.SnackbarActivity\nimport com.habitrpg.android.habitica.R\nimport android.app.Activity\nprivate fun displayAuthenticationSuccess(network: String) {\r\n        (activity as? SnackbarActivity)?.showSnackbar(\r\n            content = context?.getString(R.string.added_social_auth, network),\r", "choices": [{"text": "//            content = \"Added $network\",\r\n            duration = Snackbar.LENGTH_SHORT\r\n        )\r\n    }\n\n"}], "metadata": {"task_id": "habitica-android/726", "ground_truth": "            displayType = HabiticaSnackbar.SnackbarDisplayType.SUCCESS\r\n        )\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\AccountPreferenceFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.ui.views.SnackbarActivity\nimport com.habitrpg.android.habitica.R\nimport android.app.Activity\nprivate fun displayDisconnectSuccess(network: String) {\r\n        (activity as? SnackbarActivity)?.showSnackbar(\r\n            content = context?.getString(R.string.removed_social_auth, network),\r", "choices": [{"text": "//            content = context?.getString(R.string.removed_social_auth, network),\r\n            duration = Snackbar.LENGTH_SHORT\r\n        )\r\n    }\n\n"}], "metadata": {"task_id": "habitica-android/727", "ground_truth": "            displayType = HabiticaSnackbar.SnackbarDisplayType.SUCCESS\r\n        )\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\AccountPreferenceFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.user.User\nimport androidx.lifecycle.lifecycleScope\nprivate fun updateUser(path: String, value: String?, title: String) {\r\n        showSingleEntryDialog(value, title) {\r\n            if (value != it) {\r\n                lifecycleScope.launchCatching {\r", "choices": [{"text": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.user.User\nimport androidx.lifecycle.lifecycleScope\nprivate fun updateUser(path: String, value: String?, title: String) {\r\n        showSingleEntryDialog(value, title) {\r\n            if (value!= it) {\r\n                lifecycleScope.launchCatching {\r\n//                    val user = User.getCurrentUser()\r\n//                    user.update(path, value)\r\n//                    user.save()\r\n                }\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/728", "ground_truth": "                    userRepository.updateUser(path, it ?: \"\")\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\AccountPreferenceFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nprivate fun showLoginNameDialog() {\r\n        showSingleEntryDialog(user?.username, getString(R.string.username), {\r\n            it?.contains(\" \") == false && it.length > 1 && it.length < 20 && !it.contains(regex)\r\n        }) {\r\n            lifecycleScope.launchCatching {\r\n                val user = userRepository.updateLoginName(it ?: \"\")\r\n                if (user == null || user.username != it) {\r", "choices": [{"text": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nprivate fun showLoginNameDialog() {\r\n        showSingleEntryDialog(user?.username, getString(R.string.username), {\r\n            it?.contains(\" \") == false && it.length > 1 && it.length < 20 &&!it.contains(regex)\r\n        }) {\r\n            lifecycleScope.launchCatching {\r\n                val user = userRepository.updateLoginName(it?: \"\")\r\n                if (user == null || user.username!= it) {\r\n//                    showToast(R.string.username_taken)\r\n                    showToast(R.string.username_taken)\r\n                } else {\r\n                    userRepository.updateLoginName(it)\r\n                    showToast(R.string.username_updated)\r\n                }\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/729", "ground_truth": "                    userRepository.retrieveUser(false, forced = true)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\AccountPreferenceFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.R\nprivate fun showAccountResetConfirmation(user: User?) {\r\n        val habiticaAccountDialog = context?.let { HabiticaAccountDialog(it) }\r\n        habiticaAccountDialog?.accountAction = \"reset_account\"\r\n        habiticaAccountDialog?.accountUpdateConfirmed = this\r\n        habiticaAccountDialog?.user = user\r\n        habiticaAccountDialog?.show(parentFragmentManager, \"account\")\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/730", "ground_truth": "\r\n        if (habiticaAccountDialog != null) {\r\n            accountDialog = habiticaAccountDialog\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\AccountPreferenceFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/733", "ground_truth": "        userRepository.close()\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\BasePreferencesFragment.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {\r", "choices": [{"text": "//    setPreferencesFromResource(R.xml.preferences, rootKey)\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/734", "ground_truth": "        setPreferencesFromResource(R.xml.preferences_fragment, rootKey)\r\n        setupPreferences()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\BasePreferencesFragment.kt"}}
{"prompt": "\n override fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nmMapView.onResume()\r\n}\r\noverride fun onPause() {\r\nsuper.onPause()\r\nmMapView.onPause()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nmMapView.onDestroy()\r\n}\r\noverride fun onLowMemory() {\r\nsuper.onLowMemory()\r\nmMapView.onLowMemory()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/735", "ground_truth": "        super.onResume()\r\n        preferenceScreen.sharedPreferences?.registerOnSharedPreferenceChangeListener(this)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\EmailNotificationsPreferencesFragment.kt"}}
{"prompt": "\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nmMapView.onPause()\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nmMapView.onResume()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nmMapView.onDestroy()\r\n}\r\noverride fun onLowMemory() {\r\nsuper.onLowMemory()\r\nmMapView.onLowMemory()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/736", "ground_truth": "        super.onPause()\r\n        preferenceScreen.sharedPreferences?.unregisterOnSharedPreferenceChangeListener(this)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\EmailNotificationsPreferencesFragment.kt"}}
{"prompt": "\n private fun updatePreference(key: String, isChecked: Boolean?) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/737", "ground_truth": "        val preference = (findPreference(key) as? CheckBoxPreference)\r\n        preference?.isChecked = isChecked == true\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\EmailNotificationsPreferencesFragment.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval intent = Intent(this, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\nval button = findViewById<Button>(R.id.button)"}], "metadata": {"task_id": "habitica-android/738", "ground_truth": "        super.onCreate(savedInstanceState)\r\n        setStyle(STYLE_NO_TITLE, R.style.HabiticaAlertDialogTheme)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\HabiticaAccountDialog.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/739", "ground_truth": "        _binding = DialogHabiticaAccountBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\HabiticaAccountDialog.kt"}}
{"prompt": "\n import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        listView.itemAnimator = null\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/742", "ground_truth": "\r\n        lifecycleScope.launchCatching {\r\n            userRepository.retrieveTeamPlans()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\PreferencesFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}<issue_comment>username_1: @username_0 I'm not sure what you're asking.  You're not using the `onResume` method of the `Activity` class.  You're using the `onResume` method of the `Fragment` class.  You should be using the `onResume` method of the `Activity` class.<issue_comment>username_0: @username_1  I am using the onResume method of the Activity class.<issue_comment>username"}], "metadata": {"task_id": "habitica-android/743", "ground_truth": "        super.onResume()\r\n        preferenceManager.sharedPreferences?.registerOnSharedPreferenceChangeListener(this)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\PreferencesFragment.kt"}}
{"prompt": "\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nmMapView.onPause()\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nmMapView.onResume()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nmMapView.onDestroy()\r\n}\r\noverride fun onLowMemory() {\r\nsuper.onLowMemory()\r\nmMapView.onLowMemory()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/744", "ground_truth": "        preferenceManager.sharedPreferences?.unregisterOnSharedPreferenceChangeListener(this)\r\n        super.onPause()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\PreferencesFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.ui.views.dialogs.HabiticaAlertDialog\nimport com.habitrpg.android.habitica.R\nimport com.habitrpg.android.habitica.HabiticaBaseApplication\nprivate fun logout() {\r\n        context?.let { context ->\r\n            val dialog = HabiticaAlertDialog(context)\r\n            dialog.setTitle(R.string.are_you_sure)\r\n            dialog.addButton(R.string.logout, true) { _, _ ->\r\n                HabiticaBaseApplication.logout(context)\r\n                activity?.finish()\r", "choices": [{"text": "//                val intent = Intent(context, LoginActivity::class.java)\r\n//                intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\r\n//                context.startActivity(intent)\r\n            }\r\n            dialog.show()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/746", "ground_truth": "            }\r\n            dialog.addCancelButton()\r\n            dialog.show()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\PreferencesFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.prefs.TimePreference\nimport androidx.preference.Preference\noverride fun onDisplayPreferenceDialog(preference: Preference) {\r\n        if (preference is TimePreference) {\r\n            if (parentFragmentManager.findFragmentByTag(TimePreferenceDialogFragment.TAG) == null) {\r\n                TimePreferenceDialogFragment.newInstance(this, preference.getKey())\r\n                    .show(parentFragmentManager, TimePreferenceDialogFragment.TAG)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/747", "ground_truth": "            }\r\n        } else {\r\n            super.onDisplayPreferenceDialog(preference)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\PreferencesFragment.kt"}}
{"prompt": "\n override fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nmMapView.onResume()\r\n}\r\noverride fun onPause() {\r\nsuper.onPause()\r\nmMapView.onPause()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nmMapView.onDestroy()\r\n}\r\noverride fun onLowMemory() {\r\nsuper.onLowMemory()\r\nmMapView.onLowMemory()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/748", "ground_truth": "        super.onResume()\r\n        preferenceScreen.sharedPreferences?.registerOnSharedPreferenceChangeListener(this)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\PushNotificationsPreferencesFragment.kt"}}
{"prompt": "\n override fun onPause() {\r", "choices": [{"text": "super.onPause()\r\nmMapView.onPause()\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nmMapView.onResume()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nmMapView.onDestroy()\r\n}\r\noverride fun onLowMemory() {\r\nsuper.onLowMemory()\r\nmMapView.onLowMemory()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/749", "ground_truth": "        super.onPause()\r\n        preferenceScreen.sharedPreferences?.unregisterOnSharedPreferenceChangeListener(this)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\PushNotificationsPreferencesFragment.kt"}}
{"prompt": "\n private fun updatePreference(key: String, isChecked: Boolean?) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/750", "ground_truth": "        val preference = (findPreference(key) as? CheckBoxPreference)\r\n        preference?.isChecked = isChecked == true\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\PushNotificationsPreferencesFragment.kt"}}
{"prompt": "\n import android.widget.TimePicker\nimport android.view.View\nimport android.content.Context\noverride fun onCreateDialogView(context: Context): View {\r\n        picker = TimePicker(context)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/751", "ground_truth": "        picker.setIs24HourView(android.text.format.DateFormat.is24HourFormat(context))\r\n        return picker\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\TimePreferenceDialogFragment.kt"}}
{"prompt": "\n override fun onDialogClosed(positiveResult: Boolean) {\r\n        if (positiveResult) {\r\n            val preference = timePreference\r\n            val time = newTimeValue\r\n\r\n            preference.summary = time\r\n\r", "choices": [{"text": "//            val calendar = Calendar.getInstance()\r\n//            calendar.timeInMillis = time\r\n//            val hour = calendar.get(Calendar.HOUR_OF_DAY)\r\n//            val minute = calendar.get(Calendar.MINUTE)\r\n//            val amPm = calendar.get(Calendar.AM_PM)\r\n//            val timeString = String.format(\"%02d:%02d %s\", hour, minute, if (amPm == Calendar.AM) \"AM\" else \"PM\")\r\n//            preference.summary = timeString\r\n        }\r\n   "}], "metadata": {"task_id": "habitica-android/752", "ground_truth": "            if (preference.callChangeListener(time)) {\r\n                preference.text = time\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\preferences\\TimePreferenceDialogFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\n"}], "metadata": {"task_id": "habitica-android/754", "ground_truth": "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\PromoInfoFragment.kt"}}
{"prompt": "\n import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r", "choices": [{"text": "}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n}\r\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\noverride fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)\r\n}\r\noverride fun onViewStateRestored(savedInstanceState: Bundle?) {\r\n        super.onViewStateRestored(savedInstanceState)\r\n}\r\noverride fun onStart() {\r\n        super"}], "metadata": {"task_id": "habitica-android/755", "ground_truth": "        val promo = configManager.activePromo()\r\n        promo?.configureInfoFragment(this)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\PromoInfoFragment.kt"}}
{"prompt": "\n override fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nmMapView.onResume()\r\n}\r\noverride fun onPause() {\r\nsuper.onPause()\r\nmMapView.onPause()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nmMapView.onDestroy()\r\n}\r\noverride fun onLowMemory() {\r\nsuper.onLowMemory()\r\nmMapView.onLowMemory()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/756", "ground_truth": "        super.onResume()\r\n        mainActivity?.title = \"\"\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\PromoInfoFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\n"}], "metadata": {"task_id": "habitica-android/757", "ground_truth": "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\PromoWebFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\nprivate fun setGemsForGoldEventSubscriptionViews() {\r\n        binding.subscribeBenefits.text = getString(R.string.subscribe_gems_for_gold_incentive_text)\r", "choices": [{"text": "}\r\nprivate fun setGemsForGoldEventSubscriptionViews() {\r\n        binding.subscribeBenefits.text = getString(R.string.subscribe_gems_for_gold_incentive_text)\r\n}\r\nprivate fun setGemsForGoldEventSubscriptionViews() {\r\n        binding.subscribeBenefits.text = getString(R.string.subscribe_gems_for_gold_incentive_text)\r\n}\r\nprivate fun setGemsForGoldEventSubscriptionViews() {\r\n        binding.subscribeBenefits.text = getString(R.string.subscribe_gems_for"}], "metadata": {"task_id": "habitica-android/761", "ground_truth": "        binding.subscriberBenefits.hideGemsForGoldBenefit()\r\n        binding.subscription3month.visibility = View.GONE\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\EventOutcomeSubscriptionBottomSheetFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.CoroutineScope\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nprivate fun loadInventory() {\r\n        CoroutineScope(Dispatchers.IO).launch(ExceptionHandler.coroutine()) {\r\n            val skus = purchaseHandler.getAllGemSKUs()\r\n            withContext(Dispatchers.Main) {\r\n                for (sku in skus) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/764", "ground_truth": "                    updateButtonLabel(sku)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\GemsPurchaseFragment.kt"}}
{"prompt": "\n import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r", "choices": [{"text": "}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n}\r\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\noverride fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)\r\n}\r\noverride fun onViewStateRestored(savedInstanceState: Bundle?) {\r\n        super.onViewStateRestored(savedInstanceState)\r\n}\r\noverride fun onStart() {\r\n        super"}], "metadata": {"task_id": "habitica-android/767", "ground_truth": "        binding?.giftButton?.setOnClickListener { sendGift() }\r\n        updateMemberViews()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\GiftBalanceGemsFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.members.Member\nimport com.android.billingclient.api.ProductDetails\nprivate fun purchaseGems(sku: ProductDetails) {\r\n        giftedMember?.id?.let {\r", "choices": [{"text": "//            val member = Member(it)\r\n//            member.gems += sku.priceAmountMicros.toInt()\r\n//            member.save()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/769", "ground_truth": "            activity?.let { it1 -> purchaseHandler?.purchase(it1, sku, it, giftedMember?.username) }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\GiftPurchaseGemsFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/770", "ground_truth": "        _binding = FragmentBottomsheetSubscriptionBinding.inflate(layoutInflater)\r\n        return binding.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionBottomSheetFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\noverride fun onResume() {\r\n        super.onResume()\r\n        lifecycleScope.launchCatching {\r", "choices": [{"text": "//            val result = withContext(Dispatchers.IO) {\r\n//                try {\r\n//                    val response = api.getHabiticaUser()\r\n//                    if (response.isSuccessful) {\r\n//                        response.body()\r\n//                    } else {\r\n//                        null\r\n//                    }\r\n//                } catch (e: Exception) {\r\n//                    null\r\n//                }\r\n//            }\r\n//            if (result!= null) {\r\n//                val user = result.user\r\n//                val userViewModel"}], "metadata": {"task_id": "habitica-android/772", "ground_truth": "            purchaseHandler.queryPurchases()\r\n        }\r\n        refresh()\r\n        loadInventory()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionBottomSheetFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport androidx.lifecycle.lifecycleScope\nprivate fun refresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r", "choices": [{"text": "//            val response = api.refresh()\r\n//            if (response.isSuccessful) {\r\n//                val refresh = response.body()\r\n//                if (refresh!= null) {\r\n//                    val refreshToken = refresh.refreshToken\r\n//                    val accessToken = refresh.accessToken\r\n//                    val expiresIn = refresh.expiresIn\r\n//                    val refreshTokenExpiresIn = refresh.refreshTokenExpiresIn\r\n//                    val refreshTokenExpiresAt = refresh.refreshTokenExpiresAt\r\n//                    val accessTokenExpiresIn = refresh.accessTokenExpiresIn\r\n//                   "}], "metadata": {"task_id": "habitica-android/773", "ground_truth": "            userRepository.retrieveUser(false, true)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionBottomSheetFragment.kt"}}
{"prompt": "\n import com.android.billingclient.api.ProductDetails\nimport android.view.View\nprivate fun updateButtonLabel(sku: ProductDetails, price: String) {\r\n        val matchingView = buttonForSku(sku)\r\n        if (matchingView != null) {\r\n            matchingView.setPriceText(price)\r\n            matchingView.sku = sku.productId\r", "choices": [{"text": "\n import com.android.billingclient.api.ProductDetails\nimport android.view.View\nprivate fun updateButtonLabel(sku: ProductDetails, price: String) {\r\n        val matchingView = buttonForSku(sku)\r\n        if (matchingView!= null) {\r\n            matchingView.setPriceText(price)\r\n            matchingView.sku = sku.productId\r\n}\r\n}\r\nprivate fun buttonForSku(sku: ProductDetails): Button? {\r\n        return when (sku.productId) {\r\n            \"android.test.purchased\" -> button1\r\n            \"android.test.canceled\" -> button2\r\n            \"android.test.refunded\" -> button3\r\n            \"android.test.item_unavailable\" -> button4\r\n            \"android.test.item_unavailable\" -> button5\r\n            \"android.test.item_unavailable\" -> button6\r\n            \"android.test.item_unavailable\" -> button7\r\n            \"android.test."}], "metadata": {"task_id": "habitica-android/774", "ground_truth": "            matchingView.setOnPurchaseClickListener {\r\n                selectSubscription(sku)\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionBottomSheetFragment.kt"}}
{"prompt": "\nvar selectedSubscriptionSku ProductDetails?\nvar purchaseHandler PurchaseHandler\nvar hasLoadedSubscriptionOptions Boolean\n private fun purchaseSubscription() {\r\n        selectedSubscriptionSku?.let { sku ->\r\n            activity?.let {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/777", "ground_truth": "                purchaseHandler.purchase(it, sku)\r\n                dismiss()\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionBottomSheetFragment.kt"}}
{"prompt": " import com.habitrpg.android.habitica.models.user.User\nvar user User?\nvar userRepository UserRepository\nvar _binding FragmentBottomsheetSubscriptionBinding?\nfun setUser(newUser: User) {\r\n        user = newUser\r", "choices": [{"text": "}\nfun getUser(): User? {\r\n        return user\r\n}\nfun setUserRepository(newUserRepository: UserRepository) {\r\n        userRepository = newUserRepository\r\n}\nfun getUserRepository(): UserRepository {\r\n        return userRepository\r\n}\nfun getBinding(): FragmentBottomsheetSubscriptionBinding {\r\n        return _binding!!\r\n}\nfun setBinding(newBinding: FragmentBottomsheetSubscriptionBinding) {\r\n        _binding = newBinding\r\n}\nfun getViewLifecycleOwner(): LifecycleOwner {\r\n        return viewLifecycleOwner\r\n}\nfun getLifecycle(): Lifecycle {\r\n        return lifecycle\r\n}\nfun get"}], "metadata": {"task_id": "habitica-android/778", "ground_truth": "        this.updateSubscriptionInfo()\r\n        checkIfNeedsCancellation()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionBottomSheetFragment.kt"}}
{"prompt": "\n import android.view.View\nprivate fun updateSubscriptionInfo() {\r\n        if (hasLoadedSubscriptionOptions) {\r\n            binding.subscriptionOptions.visibility = View.VISIBLE\r\n            binding.loadingIndicator.visibility = View.GONE\r", "choices": [{"text": "} else {\r\n            binding.subscriptionOptions.visibility = View.GONE\r\n            binding.loadingIndicator.visibility = View.VISIBLE\r\n}\r\n    }\n"}], "metadata": {"task_id": "habitica-android/779", "ground_truth": "        }\r\n        if (user != null) {\r\n            binding.loadingIndicator.visibility = View.GONE\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionBottomSheetFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\noverride fun onResume() {\r\n        super.onResume()\r\n        lifecycleScope.launchCatching {\r", "choices": [{"text": "//            val result = withContext(Dispatchers.IO) {\r\n//                try {\r\n//                    val response = api.getHabiticaUser()\r\n//                    if (response.isSuccessful) {\r\n//                        response.body()\r\n//                    } else {\r\n//                        null\r\n//                    }\r\n//                } catch (e: Exception) {\r\n//                    null\r\n//                }\r\n//            }\r\n//            if (result!= null) {\r\n//                val user = result.user\r\n//                val userViewModel"}], "metadata": {"task_id": "habitica-android/780", "ground_truth": "            purchaseHandler.queryPurchases()\r\n        }\r\n        refresh()\r\n        loadInventory()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nprivate fun refresh() {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.retrieveUser(withTasks = false, forced = true)\r", "choices": [{"text": "//            userRepository.retrieveUser(withTasks = true, forced = true)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/781", "ground_truth": "            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionFragment.kt"}}
{"prompt": "\n import com.android.billingclient.api.ProductDetails\nimport android.view.View\nprivate fun updateButtonLabel(sku: ProductDetails, price: String) {\r\n        val matchingView = buttonForSku(sku)\r\n        if (matchingView != null) {\r\n            matchingView.setPriceText(price)\r\n            matchingView.sku = sku.productId\r", "choices": [{"text": "\n import com.android.billingclient.api.ProductDetails\nimport android.view.View\nprivate fun updateButtonLabel(sku: ProductDetails, price: String) {\r\n        val matchingView = buttonForSku(sku)\r\n        if (matchingView!= null) {\r\n            matchingView.setPriceText(price)\r\n            matchingView.sku = sku.productId\r\n}\r\n}\r\nprivate fun buttonForSku(sku: ProductDetails): Button? {\r\n        return when (sku.productId) {\r\n            \"android.test.purchased\" -> button1\r\n            \"android.test.canceled\" -> button2\r\n            \"android.test.refunded\" -> button3\r\n            \"android.test.item_unavailable\" -> button4\r\n            \"android.test.item_unavailable\" -> button5\r\n            \"android.test.item_unavailable\" -> button6\r\n            \"android.test.item_unavailable\" -> button7\r\n            \"android.test."}], "metadata": {"task_id": "habitica-android/782", "ground_truth": "            matchingView.setOnPurchaseClickListener {\r\n                selectSubscription(sku)\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionFragment.kt"}}
{"prompt": "\nvar selectedSubscriptionSku ProductDetails?\nvar purchaseHandler PurchaseHandler\nvar hasLoadedSubscriptionOptions Boolean\n private fun purchaseSubscription() {\r\n        selectedSubscriptionSku?.let { sku ->\r", "choices": [{"text": "//            purchaseHandler.purchase(sku.sku)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/785", "ground_truth": "            activity?.let {\r\n                purchaseHandler.purchase(it, sku)\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionFragment.kt"}}
{"prompt": " import com.habitrpg.android.habitica.models.user.User\nvar user User?\nvar userRepository UserRepository\nvar binding FragmentSubscriptionBinding?\nfun setUser(newUser: User) {\r\n        user = newUser\r", "choices": [{"text": "}\nfun getUser(): User? {\r\n        return user\r\n}\nfun setUserRepository(newUserRepository: UserRepository) {\r\n        userRepository = newUserRepository\r\n}\nfun getUserRepository(): UserRepository {\r\n        return userRepository\r\n}\nfun setBinding(newBinding: FragmentSubscriptionBinding) {\r\n        binding = newBinding\r\n}\nfun getBinding(): FragmentSubscriptionBinding? {\r\n        return binding\r\n}\nfun setViewModel(newViewModel: SubscriptionViewModel) {\r\n        viewModel = newViewModel\r\n}\nfun getViewModel(): SubscriptionViewModel {\r\n        return viewModel\r\n}\nfun setActivity(new"}], "metadata": {"task_id": "habitica-android/786", "ground_truth": "        this.updateSubscriptionInfo()\r\n        checkIfNeedsCancellation()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\purchases\\SubscriptionFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\n"}], "metadata": {"task_id": "habitica-android/788", "ground_truth": "        binding = FragmentReportMessageBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\ReportBottomSheetFragment.kt"}}
{"prompt": "\n private fun updateAvatar() {\r\n        user?.let {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/793", "ground_truth": "            binding?.avatarView?.setAvatar(it)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\setup\\AvatarSetupFragment.kt"}}
{"prompt": "\n import android.graphics.drawable.Drawable\nfun setImage(image: Drawable?) {\r\n        this.image = image\r\n        if (image != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/795", "ground_truth": "            binding?.imageView?.setImageDrawable(image)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\setup\\IntroFragment.kt"}}
{"prompt": "\n import android.graphics.drawable.Drawable\nfun setTitleImage(image: Drawable?) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "habitica-android/796", "ground_truth": "        this.titleImage = image\r\n        binding?.titleImageView?.setImageDrawable(image)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\setup\\IntroFragment.kt"}}
{"prompt": "\nvar title String?\nvar titleImage Drawable?\nvar subtitle String?\n fun setSubtitle(text: String?) {\r", "choices": [{"text": "subtitle = text\r\n}\n"}], "metadata": {"task_id": "habitica-android/797", "ground_truth": "        this.subtitle = text\r\n        binding?.subtitleTextView?.text = text\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\setup\\IntroFragment.kt"}}
{"prompt": "\nvar title String?\nvar titleImage Drawable?\nvar subtitle String?\n fun setTitle(text: String?) {\r", "choices": [{"text": "this.title = text\r\n}\r\nfun setTitleImage(image: Drawable?) {\r\nthis.titleImage = image\r\n}\r\nfun setSubtitle(text: String?) {\r\nthis.subtitle = text\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/798", "ground_truth": "        this.title = text\r\n        binding?.titleTextView?.text = text\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\setup\\IntroFragment.kt"}}
{"prompt": "\nvar description String?\nvar subtitle String?\nvar title String?\n fun setDescription(text: String?) {\r", "choices": [{"text": "this.description = text\r\n}\r\nfun setSubtitle(text: String?) {\r\nthis.subtitle = text\r\n}\r\nfun setTitle(text: String?) {\r\nthis.title = text\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/799", "ground_truth": "        this.description = text\r\n        binding?.descriptionTextView?.text = text\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\setup\\IntroFragment.kt"}}
{"prompt": "\n fun setBackgroundColor(color: Int) {\r", "choices": [{"text": "//     this.setBackgroundColor(color)\r\n// }\r\n//\r\n// fun setBackgroundColor(color: String) {\r\n//     this.setBackgroundColor(Color.parseColor(color))\r\n// }\r\n//\r\n// fun setBackgroundColor(color: Color) {\r\n//     this.setBackgroundColor(color.argb)\r\n// }\r\n//\r\n// fun setBackgroundColor(color: IntArray) {\r\n//     this.setBackgroundColor(Color.argb(color[0], color[1], color[2], color[3]))"}], "metadata": {"task_id": "habitica-android/800", "ground_truth": "        this.backgroundColor = color\r\n        binding?.containerView?.setBackgroundColor(color)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\setup\\IntroFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\noverride fun onResume() {\r\n        super.onResume()\r\n        if (context != null) {\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.R\noverride fun onResume() {\r\n        super.onResume()\r\n        if (context!= null) {\r\n//            val intent = Intent(context, MainActivity::class.java)\r\n//            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK\r\n//            context!!.startActivity(intent)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/801", "ground_truth": "            binding?.speechBubble?.animateText(context?.getString(R.string.task_setup_description) ?: \"\")\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\setup\\TaskSetupFragment.kt"}}
{"prompt": " import com.habitrpg.android.habitica.models.user.User\nimport android.view.View\nvar user User?\nvar adapter TaskSetupAdapter\nvar binding FragmentSetupTasksBinding?\nfun setUser(user: User?) {\r\n        this.user = user\r\n        if (binding?.avatarView != null) {\r", "choices": [{"text": " import com.habitrpg.android.habitica.models.user.User\nimport android.view.View\nvar user User?\nvar adapter TaskSetupAdapter\nvar binding FragmentSetupTasksBinding?\nfun setUser(user: User?) {\r\n        this.user = user\r\n        if (binding?.avatarView!= null) {\r\nbinding?.avatarView?.setImageURI(Uri.parse(user?.avatar))\r\n        }\r\n        if (binding?.usernameView!= null) {\r\nbinding?.usernameView?.text = user?.username\r\n        }\r\n        if (binding?.emailView!= null) {\r\nbinding?.emailView?.text = user?.email\r\n        }\r\n        if (binding?.bioView!= null) {\r\nbinding?.bioView?.text = user?.bio\r\n        }\r\n        if (binding?.locationView!= null) {\r\nbinding?.locationView?.text = user?.location\r\n        }\r\n        if (binding?.websiteView!= null"}], "metadata": {"task_id": "habitica-android/802", "ground_truth": "            updateAvatar()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\setup\\TaskSetupFragment.kt"}}
{"prompt": "\n private fun updateAvatar() {\r\n        user?.let {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/803", "ground_truth": "            binding?.avatarView?.setAvatar(it)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\setup\\TaskSetupFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.extensions.inflate\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_habit_detail, container, false)\r\n}\n"}], "metadata": {"task_id": "habitica-android/807", "ground_truth": "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengeDetailFragment.kt"}}
{"prompt": "\n private fun allClicked() {\r", "choices": [{"text": "//    val intent = Intent(this, MainActivity::class.java)\r\n//    startActivity(intent)\r\n//    finish()\r\n    val intent = Intent(this, MainActivity::class.java)\r\n    startActivity(intent)\r\n    finish()\r\n}\r\n}<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\n"}], "metadata": {"task_id": "habitica-android/816", "ground_truth": "        this.adapter?.checkedEntries?.clear()\r\n        adapter?.checkedEntries?.addAll(filterGroups)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengeFilterDialogHolder.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/817", "ground_truth": "        challengeRepository.close()\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengeListFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\noverride fun onRefresh() {\r\n        nextPageToLoad = 0\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "habitica-android/819", "ground_truth": "        loadedAllData = false\r\n        retrieveChallengesPage(true)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengeListFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.social.Challenge\ninternal fun showFilterDialog() {\r\n        activity?.let {\r\n            ChallengeFilterDialogHolder.showDialog(\r\n                it,\r\n                filterGroups ?: emptyList(),\r\n                filterOptions\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.models.social.Group\nimport com.habitrpg.android.habitica.models.social.Challenge\ninternal fun showFilterDialog() {\r\n        activity?.let {\r\n            ChallengeFilterDialogHolder.showDialog(\r\n                it,\r\n                filterGroups?: emptyList(),\r\n                filterOptions\r\n//                filterOptions.map { it.name }\r\n            )\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/820", "ground_truth": "            ) {\r\n                changeFilter(it)\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengeListFragment.kt"}}
{"prompt": " import com.habitrpg.android.habitica.models.social.Challenge\nvar viewUserChallengesOnly Boolean\nvar userViewModel MainUserViewModel\nvar challengeRepository ChallengeRepository\nprivate fun changeFilter(challengeFilterOptions: ChallengeFilterOptions) {\r", "choices": [{"text": "when (challengeFilterOptions) {\r\nChallengeFilterOptions.ALL -> {\r\nviewUserChallengesOnly = false\r\n}\r\nChallengeFilterOptions.MY_CHALLENGES -> {\r\nviewUserChallengesOnly = true\r\n}\r\n}\r\n}\r\nprivate fun getChallenges(challengeFilterOptions: ChallengeFilterOptions) {\r\nchangeFilter(challengeFilterOptions)\r\nchallengeRepository.getChallenges(viewUserChallengesOnly)\r\n.observe(this, Observer { challenges ->\r\nchallenges?.let {\r\nchallengesAdapter.setChallenges("}], "metadata": {"task_id": "habitica-android/821", "ground_truth": "        filterOptions = challengeFilterOptions\r\n        challengeAdapter?.filter(challengeFilterOptions)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengeListFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.usesTabLayout = true\r", "choices": [{"text": "//        this.tabLayoutId = R.id.tabLayout\r\n//        this.tabLayoutTitle = R.string.tab_title\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/822", "ground_truth": "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengesOverviewFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}<issue_comment>username_1: @username_0 I'm not sure what you're asking.  You're not using the `onResume` method of the `Activity` class.  You're using the `onResume` method of the `Fragment` class.  You should be using the `onResume` method of the `Activity` class.<issue_comment>username_0: @username_1  I am using the onResume method of the Activity class.<issue_comment>username"}], "metadata": {"task_id": "habitica-android/824", "ground_truth": "        super.onResume()\r\n        getActiveFragment()?.retrieveChallengesPage()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengesOverviewFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/825", "ground_truth": "        challengeRepository.close()\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengesOverviewFragment.kt"}}
{"prompt": "\n import androidx.fragment.app.Fragment\nprivate fun getActiveFragment(): ChallengeListFragment? {\r\n        return if (binding?.viewPager?.currentItem == 0) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/826", "ground_truth": "            userChallengesFragment\r\n        } else {\r\n            availableChallengesFragment\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\challenges\\ChallengesOverviewFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}<issue_comment>username_1: @username_0 I'm not sure what you're asking.  You're not using the `onResume` method of the `Activity` class.  You're using the `onResume` method of the `Fragment` class.  You should be using the `onResume` method of the `Activity` class.<issue_comment>username_0: @username_1  I am using the onResume method of the Activity class.<issue_comment>username"}], "metadata": {"task_id": "habitica-android/827", "ground_truth": "        super.onResume()\r\n        setNavigatedToFragment()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\ChatFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nprivate fun refresh() {\r\n        viewModel.retrieveGroupChat {\r\n            if (isScrolledToBottom || isFirstRefresh) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/829", "ground_truth": "                binding?.recyclerView?.scrollToPosition(0)\r\n            }\r\n            isFirstRefresh = false\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\ChatFragment.kt"}}
{"prompt": "\nvar navigatedOnceToFragment\nvar binding FragmentChatBinding?\nval viewModel GroupViewModel\n fun setNavigatedToFragment() {\r", "choices": [{"text": "if (navigatedOnceToFragment) {\r\nreturn\r\n}\r\nnavigatedOnceToFragment = true\r\n}\r\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\nbinding = DataBindingUtil.inflate(inflater, R.layout.fragment_chat, container, false)\r\nbinding?.lifecycleOwner = this\r\nbinding?.viewModel = viewModel\r\nreturn binding?.root\r\n}\r\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\nsuper.onViewCreated(view, savedInstanceState"}], "metadata": {"task_id": "habitica-android/830", "ground_truth": "        navigatedOnceToFragment = true\r\n        markMessagesAsSeen()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\ChatFragment.kt"}}
{"prompt": "\n private fun markMessagesAsSeen() {\r\n        if (navigatedOnceToFragment) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/831", "ground_truth": "            viewModel.markMessagesSeen()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\ChatFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.ui.views.dialogs.HabiticaAlertDialog\nimport com.habitrpg.android.habitica.models.social.ChatMessage\nimport com.habitrpg.android.habitica.R\nprivate fun showDeleteConfirmationDialog(chatMessage: ChatMessage) {\r\n        val context = context\r\n        if (context != null) {\r\n            val dialog = HabiticaAlertDialog(context)\r\n            dialog.setTitle(R.string.confirm_delete_tag_title)\r\n            dialog.setMessage(R.string.confirm_delete_tag_message)\r\n            dialog.addButton(R.string.yes, true, true) { _, _ ->\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.ui.views.dialogs.HabiticaAlertDialog\nimport com.habitrpg.android.habitica.models.social.ChatMessage\nimport com.habitrpg.android.habitica.R\nprivate fun showDeleteConfirmationDialog(chatMessage: ChatMessage) {\r\n        val context = context\r\n        if (context!= null) {\r\n            val dialog = HabiticaAlertDialog(context)\r\n            dialog.setTitle(R.string.confirm_delete_tag_title)\r\n            dialog.setMessage(R.string.confirm_delete_tag_message)\r\n            dialog.addButton(R.string.yes, true, true) { _, _ ->\r\n//                val tag = chatMessage.tag\r\n//                val habit = chatMessage.habit\r\n//                val user = chatMessage.user\r\n//                val chat = chatMessage.chat\r\n//                val chatMessage = chatMessage.chatMessage\r\n//                val chatMessage = chatMessage.chatMessage\r\n//                val chatMessage = chatMessage.chatMessage\r\n//                val chatMessage = chatMessage.chatMessage\r\n//                val chatMessage = chatMessage.chatMessage\r\n//                val chatMessage = chatMessage.chatMessage\r\n//                val chatMessage"}], "metadata": {"task_id": "habitica-android/832", "ground_truth": "                viewModel.deleteMessage(chatMessage)\r\n            }\r\n            dialog.show()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\ChatFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.ChatMessage\nimport android.view.View\nprivate fun setChatMessages(chatMessages: List<ChatMessage>) {\r\n        chatAdapter?.data = chatMessages\r\n        binding?.chatBarView?.chatMessages = chatMessages\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/833", "ground_truth": "\r\n        viewModel.gotNewMessages = true\r\n\r\n        markMessagesAsSeen()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\ChatFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.ChatMessage\nprivate fun sendChatMessage(chatText: String) {\r\n        viewModel.postGroupChat(\r\n            chatText,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/834", "ground_truth": "            { binding?.recyclerView?.scrollToPosition(0) }\r\n        ) { binding?.chatBarView?.message = chatText }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\ChatFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.Group\nprivate fun refresh() {\r\n        viewModel.retrieveGroup {\r", "choices": [{"text": "//            val group = it.data\r\n//            val group = it.data\r\n//            val group = it.data\r\n//            val group = it.data\r\n//            val group = it.data\r\n//            val group = it.data\r\n//            val group = it.data\r\n//            val group = it.data\r\n//            val group = it.data\r\n//            val group = it.data\r\n//            val group = it.data\r\n//            val group = it.data\r\n//            val group = it."}], "metadata": {"task_id": "habitica-android/837", "ground_truth": "            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\guilds\\GuildDetailFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.Group\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.usesTabLayout = true\r", "choices": [{"text": "//        this.tabLayout = R.id.tabLayout\r\n//        this.tabLayoutTitle = R.string.tab_title_groups\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        this.tabLayout = R.id.tabLayout\r\n        this.tabLayoutTitle = R.string.tab_title_groups\r\n        this.tabLayoutTitle = R.string.tab_title_groups\r\n        this.tabLayoutTitle = R"}], "metadata": {"task_id": "habitica-android/840", "ground_truth": "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\guilds\\GuildFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\n"}], "metadata": {"task_id": "habitica-android/844", "ground_truth": "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxMessageListFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\noverride fun onResume() {\r\n        if (viewModel.recipientID?.isNotBlank() != true && viewModel.recipientUsername?.isNotBlank() != true) {\r\n            parentFragmentManager.popBackStack()\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.R\noverride fun onResume() {\r\n        if (viewModel.recipientID?.isNotBlank()!= true && viewModel.recipientUsername?.isNotBlank()!= true) {\r\n            parentFragmentManager.popBackStack()\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/845", "ground_truth": "        }\r\n        super.onResume()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxMessageListFragment.kt"}}
{"prompt": " import android.content.Context\nvar binding FragmentInboxMessageListBinding?\nval viewModel InboxViewModel\nvar chatAdapter InboxAdapter?\noverride fun onAttach(context: Context) {\r\n        view?.invalidate()\r\n        view?.forceLayout()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/846", "ground_truth": "\r\n        super.onAttach(context)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxMessageListFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/847", "ground_truth": "        socialRepository.close()\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxMessageListFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.open_profile -> {\r\n                openProfile()\r", "choices": [{"text": "//                return true\r\n            }\r\n            R.id.open_settings -> {\r\n                openSettings()\r\n//                return true\r\n            }\r\n            R.id.open_about -> {\r\n                openAbout()\r\n//                return true\r\n            }\r\n            R.id.open_help -> {\r\n                openHelp()\r\n//                return true\r\n            }\r\n            R.id.open_logout -> {\r\n                logout()\r\n//                return true\r\n            }\r\n            else -> return super.onOptionsItemSelected(item)\r\n        }\r\n    }\r\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate"}], "metadata": {"task_id": "habitica-android/849", "ground_truth": "                return true\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxMessageListFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        binding?.inboxRefreshLayout?.setOnRefreshListener(this)\r\n\r\n        userViewModel.user.observe(viewLifecycleOwner) {\r\n            binding?.optOutView?.visibility = if (it?.inbox?.optOut == true) View.VISIBLE else View.GONE\r", "choices": [{"text": "//            binding?.optOutView?.visibility = if (it?.inbox?.optOut == true) View.VISIBLE else View.GONE\r\n            binding?.inboxRefreshLayout?.isRefreshing = false\r\n        }\r\n\r\n        userViewModel.inbox.observe(viewLifecycleOwner) {\r\n            binding?.inboxRefreshLayout?.isRefreshing = false\r\n            binding?.inboxList?.adapter = InboxAdapter(it)\r\n        }\r\n\r\n        binding?.inboxRefreshLayout?.isRefreshing = true\r\n        userViewModel.refreshInbox()\r\n    }\n}\n"}], "metadata": {"task_id": "habitica-android/852", "ground_truth": "        }\r\n\r\n        loadMessages()\r\n        retrieveMessages()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxOverviewFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/854", "ground_truth": "        socialRepository.close()\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxOverviewFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.MenuInflater\nimport android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {\r\n        this.mainActivity?.menuInflater?.inflate(R.menu.inbox, menu)\r\n        val item = menu.findItem(R.id.send_message)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/855", "ground_truth": "        tintMenuIcon(item)\r\n        super.onCreateOptionsMenu(menu, inflater)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxOverviewFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.send_message -> {\r\n                openNewMessageDialog()\r", "choices": [{"text": "//                return true\r\n            }\r\n            else -> return super.onOptionsItemSelected(item)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/856", "ground_truth": "                return true\r\n            }\r\n        }\r\n        return super.onOptionsItemSelected(item)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxOverviewFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.social.InboxConversation\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nprivate fun retrieveMessages() {\r\n        lifecycleScope.launchCatching {\r\n            socialRepository.retrieveInboxConversations()\r", "choices": [{"text": "}\r\n}\n"}], "metadata": {"task_id": "habitica-android/857", "ground_truth": "            binding?.inboxRefreshLayout?.isRefreshing = false\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxOverviewFragment.kt"}}
{"prompt": " import com.habitrpg.android.habitica.R\nvar binding FragmentInboxBinding?\nvar userViewModel MainUserViewModel\nvar socialRepository SocialRepository\noverride fun onRefresh() {\r", "choices": [{"text": "}\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\nbinding = DataBindingUtil.inflate(inflater, R.layout.fragment_inbox, container, false)\r\nreturn binding!!.root\r\n}\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\nsuper.onViewCreated(view, savedInstanceState)\r\nuserViewModel = ViewModelProviders.of(activity!!).get(MainUserViewModel::class.java)\r\nsocialRepository = SocialRepository(userViewModel)\r\nbinding!!.userViewModel = user"}], "metadata": {"task_id": "habitica-android/858", "ground_truth": "        binding?.inboxRefreshLayout?.isRefreshing = true\r\n        retrieveMessages()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\InboxOverviewFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\n"}], "metadata": {"task_id": "habitica-android/860", "ground_truth": "        hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\NoPartyFragmentFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/862", "ground_truth": "        socialRepository.close()\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\NoPartyFragmentFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/863", "ground_truth": "        inventoryRepository.close()\r\n        super.onDestroyView()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartyDetailFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.Group\nprivate fun refreshParty() {\r\n        viewModel.retrieveGroup {\r", "choices": [{"text": "//            if (it.isSuccessful) {\r\n//                val group = it.body()\r\n//                if (group!= null) {\r\n//                    party = group\r\n//                    party.members.forEach { member ->\r\n//                        if (member.id == user.id) {\r\n//                            party.isMember = true\r\n//                        }\r\n//                    }\r\n//                    party.members.forEach { member ->\r\n//                        if (member.id == user.id) {\r\n//                            party.isMember = true\r\n//                       "}], "metadata": {"task_id": "habitica-android/864", "ground_truth": "            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartyDetailFragment.kt"}}
{"prompt": "\nval viewModel PartyViewModel\nvar binding FragmentPartyDetailBinding?\nvar inventoryRepository InventoryRepository\n private fun onQuestAccept() {\r", "choices": [{"text": "//    viewModel.acceptQuest(quest)\r\n//    viewModel.questAccepted.observe(viewLifecycleOwner, Observer {\r\n//      if (it) {\r\n//        findNavController().navigate(R.id.action_partyDetailFragment_to_partyQuestFragment)\r\n//      }\r\n//    })\r\n  }\r\nprivate fun onQuestDecline() {\r\n//    viewModel.declineQuest(quest)\r\n//    viewModel.questDeclined.observe(viewLifecycleOwner, Observer {\r\n//      if (it) {\r\n//        find"}], "metadata": {"task_id": "habitica-android/866", "ground_truth": "        HapticFeedbackManager.tap(requireView())\r\n        viewModel.acceptQuest()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartyDetailFragment.kt"}}
{"prompt": " import com.habitrpg.android.habitica.R\nvar challengeRepository ChallengeRepository\nvar binding FragmentPartyDetailBinding?\nval viewModel PartyViewModel\nprivate fun onQuestReject() {\r", "choices": [{"text": "}\nprivate fun onQuestAccept() {\r\n}\nprivate fun onQuestCancel() {\r\n}\nprivate fun onQuestComplete() {\r\n}\nprivate fun onQuestDelete() {\r\n}\nprivate fun onQuestEdit() {\r\n}\nprivate fun onQuestShare() {\r\n}\nprivate fun onQuestShare() {\r\n}\nprivate fun onQuestShare() {\r\n}\nprivate fun onQuestShare() {\r\n}\nprivate fun onQuestShare() {\r\n}\nprivate fun onQuestShare() {\r\n}\nprivate fun onQuest"}], "metadata": {"task_id": "habitica-android/867", "ground_truth": "        HapticFeedbackManager.tap(requireView())\r\n        viewModel.rejectQuest()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartyDetailFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.ui.views.dialogs.HabiticaBottomSheetDialog\nprivate fun showQuestMechanicsDialog() {\r\n        val dialog = HabiticaBottomSheetDialog(requireContext())\r", "choices": [{"text": "dialog.show()\r\n}\n"}], "metadata": {"task_id": "habitica-android/868", "ground_truth": "        dialog.setContentView(R.layout.quest_mechanics_dialog)\r\n        dialog.show()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartyDetailFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.Group\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.usesTabLayout = true\r", "choices": [{"text": "//        this.tabLayout = R.id.tabLayout\r\n//        this.tabLayoutTitle = R.string.tab_title_groups\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        this.tabLayout = R.id.tabLayout\r\n        this.tabLayoutTitle = R.string.tab_title_groups\r\n        this.tabLayoutTitle = R.string.tab_title_groups\r\n        this.tabLayoutTitle = R"}], "metadata": {"task_id": "habitica-android/869", "ground_truth": "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartyFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.Group\nimport android.view.View\nprivate fun updateGroupUI(group: Group?) {\r\n        viewPagerAdapter?.notifyDataSetChanged()\r\n\r\n        if (group == null) {\r\n            tabLayout?.visibility = View.GONE\r\n            return\r\n        } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/871", "ground_truth": "            tabLayout?.visibility = View.VISIBLE\r\n        }\r\n\r\n        this.mainActivity?.invalidateOptionsMenu()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartyFragment.kt"}}
{"prompt": "\n import java.util.UUID\nfun uUIDFromStringOrNull(name: String): UUID? {\r\n    return try {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/873", "ground_truth": "        UUID.fromString(name)\r\n    } catch (_: IllegalArgumentException) {\r\n        null\r\n    }\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartyInviteFragment.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.theme.HabiticaTheme\nimport com.habitrpg.common.habitica.helpers.MainNavigationController\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view = super.onCreateView(inflater, container, savedInstanceState)\r\n        binding?.composeView?.setContent {\r\n            HabiticaTheme {\r\n                PartyInviteView(viewModel) {\r\n                    MainNavigationController.navigateBack()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/874", "ground_truth": "                }\r\n            }\r\n        }\r\n        return view\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartyInviteFragment.kt"}}
{"prompt": "\n import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r", "choices": [{"text": "}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n\r\n}\r\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        return inflater.inflate(R.layout.activity_main, container, false)\r\n}\r\noverride fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)\r\n\r\n}\r\noverride fun onViewStateRestored(savedInstanceState: Bundle?) {\r\n        super.onViewStateRestored(savedInstanceState)\r\n\r"}], "metadata": {"task_id": "habitica-android/876", "ground_truth": "        setViewPagerAdapter()\r\n        binding?.viewPager?.currentItem = 0\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartyInvitePagerFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.members.Member\nimport com.habitrpg.android.habitica.models.invitations.InviteResponse\nimport com.habitrpg.android.habitica.R\nimport androidx.compose.ui.unit.sp\nsuspend fun inviteUser(member: Member): InviteResponse? {\r\n        return socialRepository.inviteToGroup(\r\n            \"party\",\r", "choices": [{"text": "//            \"party\",\r\n            member.username\r\n        )\r\n    }\n"}], "metadata": {"task_id": "habitica-android/877", "ground_truth": "            mapOf(\r\n                \"uuids\" to listOf(member.id)\r\n            )\r\n        )?.firstOrNull()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartySeekingFragment.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.theme.HabiticaTheme\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val view = super.onCreateView(inflater, container, savedInstanceState)\r\n        binding?.composeView?.setContent {\r\n            HabiticaTheme {\r", "choices": [{"text": "//                HabiticaTheme {\r\n//                    HabiticaTheme {\r\n//                        HabiticaTheme {\r\n//                            HabiticaTheme {\r\n//                                HabiticaTheme {\r\n//                                    HabiticaTheme {\r\n//                                        HabiticaTheme {\r\n//                                            HabiticaTheme {\r\n//                                                HabiticaTheme {\r\n//                                                    HabiticaTheme {\r\n//                                                        HabiticaTheme {\r\n//                                                            HabiticaTheme {\r\n//                                                                HabiticaTheme {\r\n//                                                                    HabiticaTheme {\r\n//"}], "metadata": {"task_id": "habitica-android/878", "ground_truth": "                PartySeekingView(viewModel)\r\n            }\r\n        }\r\n        return view\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartySeekingFragment.kt"}}
{"prompt": "\nvar binding FragmentComposeBinding?\nval isRefreshing\nval inviteStates\n override fun onStart() {\r", "choices": [{"text": "super.onStart()\r\nbinding?.refreshLayout?.setOnRefreshListener {\r\n//refresh data\r\n}\r\n}\r\noverride fun onDestroyView() {\r\nsuper.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/879", "ground_truth": "        super.onStart()\r\n        Analytics.sendEvent(\"View Find Members\", EventCategory.NAVIGATION, HitType.EVENT)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartySeekingFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.members.Member\nimport com.habitrpg.android.habitica.R\nimport androidx.paging.PagingState\noverride fun getRefreshKey(state: PagingState<Int, Member>): Int? {\r\n        return state.anchorPosition?.let { anchorPosition ->\r\n            state.closestPageToPosition(anchorPosition)?.prevKey?.plus(1)\r", "choices": [{"text": "//               ?: state.closestPageToPosition(anchorPosition)?.nextKey?.minus(1)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/880", "ground_truth": "                ?: state.closestPageToPosition(anchorPosition)?.nextKey?.minus(1)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartySeekingFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.members.Member\nimport com.habitrpg.android.habitica.R\nimport androidx.compose.ui.unit.sp\noverride suspend fun load(params: LoadParams<Int>): LoadResult<Int, Member> {\r\n        return try {\r\n            val page = params.key ?: 0\r\n            val response = repository.retrievePartySeekingUsers(page)\r\n\r\n            LoadResult.Page(\r\n                data = response ?: emptyList(),\r\n                prevKey = if (page == 0) null else page.minus(1),\r\n                nextKey = if ((response?.size ?: 0) < 30) null else page.plus(1)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/881", "ground_truth": "            )\r\n        } catch (e: Exception) {\r\n            LoadResult.Error(e)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\party\\PartySeekingFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.Group\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_group_list, container, false)\r\n}\r\n}<file_sep>/app/src/main/java/com/habitrpg/android/habitica/models/social/Group.kt\npackage com.habitrpg.android.habitica.models.social\n\nimport com.google.gson.annotations.SerializedName\n\ndata class Group(\n    @SerializedName(\"id\")\n    val id: String,\n    @SerializedName(\"name\")\n    val name: String,\n    @SerializedName(\"description\")\n    val description: String,\n    @SerializedName(\""}], "metadata": {"task_id": "habitica-android/882", "ground_truth": "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\QuestDetailFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun onDestroyView() {\r\n        socialRepository.close()\r\n        userRepository.close()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/883", "ground_truth": "        inventoryRepository.close()\r\n        super.onDestroyView()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\social\\QuestDetailFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        tutorialStepIdentifier = \"stats\"\r\n        tutorialTexts = listOf(getString(R.string.tutorial_stats))\r", "choices": [{"text": "//        tutorialImages = listOf(R.drawable.tutorial_stats)\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }\r\n}<file_sep>/app/src/main/java/com/habitrpg/android/habitica/tutorial/TutorialFragment1.kt\npackage com.habitrpg.android.habitica.tutorial\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport com.habitrpg.android.habitica.R\nimport android.view.View."}], "metadata": {"task_id": "habitica-android/884", "ground_truth": "        this.hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\StatsFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/885", "ground_truth": "        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\StatsFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.ui.views.stats.BulkAllocateStatsDialog\nimport com.habitrpg.android.habitica.models.user.Stats\nimport com.habitrpg.android.habitica.R\nprivate fun showBulkAllocateDialog() {\r\n        context?.let { context ->\r\n            val dialog = BulkAllocateStatsDialog(context, userRepository)\r", "choices": [{"text": "//            dialog.show()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/886", "ground_truth": "            dialog.show()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\StatsFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.ui.views.dialogs.HabiticaAlertDialog\nprivate fun showHelpAlert(resourceId: Int) {\r\n        val alert = context?.let { HabiticaAlertDialog(it) }\r\n        alert?.setMessage(resourceId)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "habitica-android/888", "ground_truth": "        alert?.addOkButton()\r\n        alert?.show()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\StatsFragment.kt"}}
{"prompt": "\n import com.habitrpg.shared.habitica.models.tasks.Attribute\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport androidx.lifecycle.lifecycleScope\nprivate fun allocatePoint(stat: Attribute) {\r\n        lifecycleScope.launchCatching {\r", "choices": [{"text": "//            val result = HabiticaApi.instance.allocatePoint(stat)\r\n//            if (result.isSuccess) {\r\n//                _points.value = result.data.points\r\n//            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/889", "ground_truth": "            userRepository.allocatePoint(stat)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\StatsFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        hidesToolbar = true\r", "choices": [{"text": "//        hidesBottomNavigation = true\r\n        return inflater.inflate(R.layout.fragment_home, container, false)\r\n    }\r\n}<file_sep>/app/src/main/java/com/example/myapplication/ui/home/HomeFragment.kt\npackage com.example.myapplication.ui.home\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.TextView\nimport androidx.fragment.app.Fragment\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModel"}], "metadata": {"task_id": "habitica-android/890", "ground_truth": "        showsBackButton = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\support\\BugFixFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        hidesToolbar = true\r", "choices": [{"text": "//        hidesBottomNavigation = true\r\n        return inflater.inflate(R.layout.fragment_home, container, false)\r\n    }\r\n}<file_sep>/app/src/main/java/com/example/myapplication/ui/home/HomeFragment.kt\npackage com.example.myapplication.ui.home\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.TextView\nimport androidx.fragment.app.Fragment\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModel"}], "metadata": {"task_id": "habitica-android/891", "ground_truth": "        showsBackButton = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\support\\FAQDetailFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        hidesToolbar = true\r", "choices": [{"text": "//        hidesBottomNavigation = true\r\n        return inflater.inflate(R.layout.fragment_home, container, false)\r\n    }\r\n}<file_sep>/app/src/main/java/com/example/myapplication/ui/home/HomeFragment.kt\npackage com.example.myapplication.ui.home\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.TextView\nimport androidx.fragment.app.Fragment\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModel"}], "metadata": {"task_id": "habitica-android/892", "ground_truth": "        showsBackButton = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\support\\FAQOverviewFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/893", "ground_truth": "        faqRepository.close()\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\support\\FAQOverviewFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\n"}], "metadata": {"task_id": "habitica-android/894", "ground_truth": "        hidesToolbar = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\support\\SupportMainFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/895", "ground_truth": "        faqRepository.close()\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\support\\SupportMainFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        lifecycleScope.launchCatching {\r\n            inventoryRepository.retrieveInAppRewards()\r", "choices": [{"text": "//            inventoryRepository.retrieveInAppRewards()\r\n        }\r\n        return inflater.inflate(R.layout.fragment_inventory, container, false)\r\n    }\r\n}<file_sep>/app/src/main/java/com/habitrpg/android/habitica/ui/habit/HabitViewModel.kt\npackage com.habitrpg.android.habitica.ui.habit\n\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.habitrpg.common.habitica.Habit"}], "metadata": {"task_id": "habitica-android/896", "ground_truth": "        }\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\RewardsRecyclerviewFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/897", "ground_truth": "        inventoryRepository.close()\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\RewardsRecyclerviewFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.models.tasks.ChecklistItem\nimport androidx.lifecycle.lifecycleScope\nprivate fun scoreChecklistItem(task: Task, item: ChecklistItem) {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r", "choices": [{"text": "//            val score = task.scoreChecklistItem(item)\r\n//            task.score = score\r\n//            task.save()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/900", "ground_truth": "            taskRepository.scoreChecklistItem(task.id ?: \"\", item.id ?: \"\")\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TaskRecyclerViewFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/903", "ground_truth": "        super.onDestroyView()\r\n        itemTouchCallback = null\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TaskRecyclerViewFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/904", "ground_truth": "        userRepository.close()\r\n        super.onDestroy()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TaskRecyclerViewFragment.kt"}}
{"prompt": "\n import com.habitrpg.shared.habitica.models.responses.TaskDirection\nimport com.habitrpg.android.habitica.models.tasks.Task\nprivate fun scoreTask(task: Task, direction: TaskDirection) {\r\n        viewModel.scoreTask(task, direction) { result, value ->\r", "choices": [{"text": "//            if (result) {\r\n//                viewModel.getTasks()\r\n//            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/905", "ground_truth": "            handleTaskResult(result, value)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TaskRecyclerViewFragment.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r", "choices": [{"text": "super.onSaveInstanceState(outState)\r\noutState.putInt(\"key\", 1)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\nsuper.onRestoreInstanceState(savedInstanceState)\r\nval value = savedInstanceState.getInt(\"key\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/906", "ground_truth": "        super.onSaveInstanceState(outState)\r\n        outState.putString(CLASS_TYPE_KEY, this.taskType.value)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TaskRecyclerViewFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\noverride fun onRefresh() {\r\n        binding?.refreshLayout?.isRefreshing = true\r\n        viewModel.refreshData {\r", "choices": [{"text": "//            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/907", "ground_truth": "            binding?.refreshLayout?.isRefreshing = false\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TaskRecyclerViewFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\noverride fun onResume() {\r\n        super.onResume()\r", "choices": [{"text": "}\r\noverride fun onPause() {\r\n        super.onPause()\r\n}\r\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n}\r\noverride fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\n        super.onRestoreInstanceState(savedInstanceState)\r\n}\r\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n}\r"}], "metadata": {"task_id": "habitica-android/908", "ground_truth": "        context?.let { recyclerAdapter?.taskDisplayMode = configManager.taskDisplayMode(it) }\r\n        setInnerAdapter()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TaskRecyclerViewFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.usesTabLayout = false\r", "choices": [{"text": "//        this.usesTabLayout = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/910", "ground_truth": "        this.usesBottomNavigation = true\r\n        return super.onCreateView(inflater, container, savedInstanceState)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TasksFragment.kt"}}
{"prompt": "\nval displayedClassName String?\nvar binding FragmentViewpagerBinding?\nvar refreshItem MenuItem?\n override fun onPause() {\r\n        if (bottomNavigation?.listener == this) {\r\n            bottomNavigation?.listener = null\r", "choices": [{"text": "}\r\n        super.onPause()\r\n    }\n"}], "metadata": {"task_id": "habitica-android/911", "ground_truth": "        }\r\n        super.onPause()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TasksFragment.kt"}}
{"prompt": "\n override fun onQueryTextChange(newText: String?): Boolean {\r", "choices": [{"text": "//        Log.d(\"onQueryTextChange\", newText)\r\n//        if (newText!= null) {\r\n//            if (newText.length > 0) {\r\n//                val query = newText.toLowerCase()\r\n//                val filtered = mutableListOf<String>()\r\n//                for (item in items) {\r\n//                    if (item.toLowerCase().contains(query)) {\r\n//                        filtered.add(item)\r\n//                    }\r\n//                }\r\n//                adapter.setItems(filtered)\r\n//            }"}], "metadata": {"task_id": "habitica-android/912", "ground_truth": "        viewModel.searchQuery = newText\r\n        return true\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TasksFragment.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        return when (item.itemId) {\r\n            R.id.action_filter -> {\r\n                showFilterDialog()\r\n                true\r\n            }\r\n            R.id.action_reload -> {\r\n                refreshItem = item\r\n                viewModel.refreshData { }\r", "choices": [{"text": "//                true\r\n            }\r\n            else -> super.onOptionsItemSelected(item)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/913", "ground_truth": "                true\r\n            }\r\n            else -> super.onOptionsItemSelected(item)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TasksFragment.kt"}}
{"prompt": "\n import com.habitrpg.shared.habitica.models.tasks.TaskType\nimport androidx.fragment.app.Fragment\nprivate fun indexForTaskType(taskType: TaskType?): Int {\r\n        if (taskType != null) {\r\n            for (index in 0 until (viewFragmentsDictionary?.size ?: 0)) {\r\n                val fragment = viewFragmentsDictionary?.get(index)\r\n                if (fragment != null && taskType == fragment.className) {\r\n                    return index\r", "choices": [{"text": "\n import com.habitrpg.shared.habitica.models.tasks.TaskType\nimport androidx.fragment.app.Fragment\nprivate fun indexForTaskType(taskType: TaskType?): Int {\r\n        if (taskType!= null) {\r\n            for (index in 0 until (viewFragmentsDictionary?.size?: 0)) {\r\n                val fragment = viewFragmentsDictionary?.get(index)\r\n                if (fragment!= null && taskType == fragment.className) {\r\n                    return index\r                }\r\n            }\r\n        }\r\n        return 0\r\n    }\n"}], "metadata": {"task_id": "habitica-android/915", "ground_truth": "                }\r\n            }\r\n        }\r\n        return -1\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\fragments\\tasks\\TasksFragment.kt"}}
{"prompt": "\n override fun findTokenStart(text: CharSequence, cursor: Int): Int {\r\n        var i = cursor\r\n\r\n        while (i > 0 && text[i - 1] != ' ' && !tokens.contains(text[i-1])) {\r\n            i--\r\n        }\r\n\r\n        return if (i < 1 || !tokens.contains(text[i-1])) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/918", "ground_truth": "            cursor\r\n        } else {\r\n            i - 1\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\AutocompleteTokenizer.kt"}}
{"prompt": "\n override fun findTokenEnd(text: CharSequence, cursor: Int): Int {\r\n        var i = cursor\r\n        val len = text.length\r\n\r\n        while (i < len) {\r\n            if (text[i] == ' ') {\r\n                return i\r\n            } else {\r\n                i++\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/919", "ground_truth": "            }\r\n        }\r\n\r\n        return len\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\AutocompleteTokenizer.kt"}}
{"prompt": "\n import android.view.inputmethod.InputMethodManager\nimport android.app.Activity\nfun dismissKeyboard(act: Activity?) {\r\n            if (act != null && act.currentFocus != null) {\r\n                val inputMethodManager = act.getSystemService(Activity.INPUT_METHOD_SERVICE) as? InputMethodManager\r", "choices": [{"text": "\n import android.view.inputmethod.InputMethodManager\nimport android.app.Activity\nfun dismissKeyboard(act: Activity?) {\r\n            if (act!= null && act.currentFocus!= null) {\r\n                val inputMethodManager = act.getSystemService(Activity.INPUT_METHOD_SERVICE) as? InputMethodManager\r\ninputMethodManager?.hideSoftInputFromWindow(act.currentFocus.windowToken, 0)\r\n            }\r\n        }<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.content.Intent\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.Toast\nimport com.example.myapplication.databinding.ActivityMainBinding\nimport com.google.firebase."}], "metadata": {"task_id": "habitica-android/920", "ground_truth": "                inputMethodManager?.hideSoftInputFromWindow(act.currentFocus?.windowToken, 0)\r\n            }\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\KeyboardUtil.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nimport android.graphics.Rect\noverride fun getItemOffsets(\r\n        outRect: Rect,\r\n        view: View,\r\n        parent: RecyclerView,\r\n        state: RecyclerView.State\r\n    ) {\r\n        val position = parent.getChildAdapterPosition(view)\r\n        val viewType: Int? = parent.adapter?.getItemViewType(position)\r\n        if (noMarginViewTypes.contains(viewType)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/921", "ground_truth": "            outRect.setEmpty()\r\n        } else {\r\n            outRect.set(margin, margin, margin, margin)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\MarginDecoration.kt"}}
{"prompt": "\n private fun updateAdapter(newAdapter: Adapter<*>?) {\r\n        if (adapter != newAdapter) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/922", "ground_truth": "            super.setAdapter(newAdapter)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\RecyclerViewEmptySupport.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.helpers.RecyclerViewState\nimport androidx.recyclerview.widget.RecyclerView\ninternal fun updateState(isInitial: Boolean = false) {\r\n        state = if (actualAdapter != null && !isInitial) {\r\n            val emptyViewVisible = actualAdapter?.itemCount == 0\r\n            if (emptyViewVisible) {\r\n                RecyclerViewState.EMPTY\r\n            } else {\r\n                RecyclerViewState.DISPLAYING_DATA\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/923", "ground_truth": "            }\r\n        } else {\r\n            RecyclerViewState.LOADING\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\RecyclerViewEmptySupport.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\noverride fun animateRemove(holder: RecyclerView.ViewHolder): Boolean {\r\n        resetAnimation(holder)\r", "choices": [{"text": "}\r\noverride fun animateAdd(holder: RecyclerView.ViewHolder): Boolean {\r\n        resetAnimation(holder)\r\n}\r\noverride fun animateMove(from: RecyclerView.ViewHolder, to: RecyclerView.ViewHolder): Boolean {\r\n        resetAnimation(from)\r\n}\r\noverride fun animateChange(\r\n        oldHolder: RecyclerView.ViewHolder,\r\n        newHolder: RecyclerView.ViewHolder,\r\n        from: Int,\r\n        to: Int,\r\n        x: Int,\r\n        y: Int\r\n): Boolean {\r\n        resetAnimation(oldHolder)\r\n}\r\noverride fun onAnimation(viewHolder: RecyclerView.ViewHolder) {"}], "metadata": {"task_id": "habitica-android/926", "ground_truth": "        pendingRemovals.add(holder)\r\n        return true\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\SafeDefaultItemAnimator.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\noverride fun animateAdd(holder: RecyclerView.ViewHolder): Boolean {\r\n        resetAnimation(holder)\r\n        holder.itemView.alpha = 0f\r", "choices": [{"text": "//        holder.itemView.translationY = holder.itemView.height.toFloat()\r\n        holder.itemView.animate()\r\n           .alpha(1f)\r\n           .translationY(0f)\r\n           .setDuration(300)\r\n           .setInterpolator(AccelerateInterpolator())\r\n           .start()\r\n        return true\r\n    }\noverride fun animateRemove(holder: RecyclerView.ViewHolder): Boolean {\r\n        resetAnimation(holder)\r\n        holder.itemView.alpha = 1f\r\n        holder.itemView.animate()\r\n           .alpha(0f)\r\n           .translationY(holder.itemView.height."}], "metadata": {"task_id": "habitica-android/927", "ground_truth": "        pendingAdditions.add(holder)\r\n        return true\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\SafeDefaultItemAnimator.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\nprivate fun endChangeAnimation(infoList: MutableList<ChangeInfo>, item: RecyclerView.ViewHolder) {\r\n        for (i in infoList.indices.reversed()) {\r\n            val changeInfo = infoList[i]\r\n            if (endChangeAnimationIfNecessary(changeInfo, item)) {\r\n                if (changeInfo.oldHolder == null && changeInfo.newHolder == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/928", "ground_truth": "                    infoList.remove(changeInfo)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\SafeDefaultItemAnimator.kt"}}
{"prompt": "\n private fun dispatchFinishedWhenDone() {\r\n        if (!isRunning) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/932", "ground_truth": "            dispatchAnimationsFinished()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\SafeDefaultItemAnimator.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\nprivate fun cancelAll(viewHolders: List<RecyclerView.ViewHolder>) {\r\n        for (i in viewHolders.indices.reversed()) {\r", "choices": [{"text": "viewHolders[i].itemView.cancel()\r\n        }\r\n}\n"}], "metadata": {"task_id": "habitica-android/933", "ground_truth": "            viewHolders[i].itemView.animate().cancel()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\SafeDefaultItemAnimator.kt"}}
{"prompt": "\n import androidx.appcompat.view.menu.ActionMenuItemView\nimport android.view.View\nimport android.graphics.PorterDuffColorFilter\nimport android.graphics.PorterDuff\nprivate fun colorizeChild(\r\n        innerView: View,\r\n        toolbarIconsColor: Int,\r\n        colorFilter: PorterDuffColorFilter\r\n    ) {\r\n        if (innerView is ActionMenuItemView) {\r\n            innerView.setTextColor(toolbarIconsColor)\r\n            for (k in innerView.compoundDrawables.indices) {\r\n                innerView.post {\r\n                    if (innerView.compoundDrawables[k] != null) {\r\n                        innerView.compoundDrawables[k].colorFilter = colorFilter\r", "choices": [{"text": "\n import androidx.appcompat.view.menu.ActionMenuItemView\nimport android.view.View\nimport android.graphics.PorterDuffColorFilter\nimport android.graphics.PorterDuff\nprivate fun colorizeChild(\r\n        innerView: View,\r\n        toolbarIconsColor: Int,\r\n        colorFilter: PorterDuffColorFilter\r\n    ) {\r\n        if (innerView is ActionMenuItemView) {\r\n            innerView.setTextColor(toolbarIconsColor)\r\n            for (k in innerView.compoundDrawables.indices) {\r\n                innerView.post {\r\n                    if (innerView.compoundDrawables[k]!= null) {\r\n                        innerView.compoundDrawables[k].colorFilter = colorFilter\r\n//                        innerView.compoundDrawables[k].colorFilter = PorterDuffColorFilter(toolbarIconsColor, PorterDuff.Mode.SRC_ATOP)\r\n                    }\r\n                }\r\n            }\r\n        } else if (innerView is ViewGroup) {\r\n            for (i in 0 until innerView.childCount) {\r\n                colorizeChild(innerView.getChildAt(i), toolbarIconsColor, colorFilter)\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/934", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\helpers\\ToolbarColorHelper.kt"}}
{"prompt": "\n import android.view.View\noverride fun setTitle(title: CharSequence?) {\r\n        binding.titleView.text = title\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/936", "ground_truth": "        binding.titleView.visibility = View.VISIBLE\r\n        binding.titleView.background = null\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\menu\\BottomSheetMenu.kt"}}
{"prompt": "\nvar binding\nvar runnable\n fun setImage(url: String) {\r", "choices": [{"text": "binding.imageView.load(url) {\r\nplaceholder(R.drawable.ic_launcher_background)\r\nerror(R.drawable.ic_launcher_background)\r\n}\r\n}\r\nfun setImage(url: String, callback: () -> Unit) {\r\nbinding.imageView.load(url) {\r\nplaceholder(R.drawable.ic_launcher_background)\r\nerror(R.drawable.ic_launcher_background)\r\ncallback()\r\n}\r\n}\r\nfun setImage(url: String, callback: () -> Unit) {\r"}], "metadata": {"task_id": "habitica-android/937", "ground_truth": "        binding.iconView.loadImage(url)\r\n        binding.iconView.visibility = View.VISIBLE\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\menu\\BottomSheetMenu.kt"}}
{"prompt": "\n fun addMenuItem(menuItem: BottomSheetMenuItem) {\r\n        val item = menuItem.inflate(this.context, layoutInflater, this.binding.menuItems)\r\n        item.setOnClickListener(this)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "habitica-android/938", "ground_truth": "        this.binding.menuItems.addView(item)\r\n        binding.root.requestLayout()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\menu\\BottomSheetMenu.kt"}}
{"prompt": "\n import android.view.View\noverride fun onClick(v: View) {\r\n        if (this.runnable != null) {\r\n            val index = this.binding.menuItems.indexOfChild(v)\r\n            if (index != -1) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/939", "ground_truth": "                runnable?.let { it(index) }\r\n                this.dismiss()\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\menu\\BottomSheetMenu.kt"}}
{"prompt": "\n fun setTutorialTexts(texts: List<String>) {\r\n        if (texts.size == 1) {\r\n            setTutorialText(texts.first())\r\n            return\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/944", "ground_truth": "        }\r\n        tutorialTexts = texts\r\n        currentTextIndex = -1\r\n        displayNextTutorialText()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\TutorialView.kt"}}
{"prompt": " import com.habitrpg.android.habitica.R\nvar tutorialTexts List<String>\nval binding\nvar currentTextIndex Int\nprivate fun completeButtonClicked() {\r\n        onReaction.onTutorialCompleted(step)\r\n        post {\r", "choices": [{"text": "//            onReaction.onTutorialCompleted(step)\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "habitica-android/945", "ground_truth": "            (parent as? ViewGroup)?.removeView(this)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\TutorialView.kt"}}
{"prompt": "\n import android.view.View\noverride fun onClick(view: View) {\r\n        val item = item\r\n        if (item != null && item.isValid) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/951", "ground_truth": "            onShowPurchaseDialog?.invoke(item, isPinned)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\ShopItemViewHolder.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.Task\nimport android.widget.TextView\nimport android.view.View\nprotected open fun configureSpecialTaskTextView(task: Task) {\r", "choices": [{"text": "}\r\nprotected open fun configureSpecialTaskView(task: Task) {\r\n}\r\nprotected open fun configureSpecialTaskView(task: Task, view: View) {\r\n}\r\nprotected open fun configureSpecialTaskView(task: Task, view: View, textView: TextView) {\r\n}\r\nprotected open fun configureSpecialTaskView(task: Task, view: View, textView: TextView, textView2: TextView) {\r\n}\r\nprotected open fun configureSpecialTaskView(task: Task, view: View, textView: TextView, textView2: TextView, textView3"}], "metadata": {"task_id": "habitica-android/953", "ground_truth": "        specialTaskTextView?.visibility = View.INVISIBLE\r\n        calendarIconView?.visibility = View.GONE\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\tasks\\BaseTaskViewHolder.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.Task\nopen fun setDisabled(openTaskDisabled: Boolean, taskActionsDisabled: Boolean) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "habitica-android/954", "ground_truth": "        this.openTaskDisabled = openTaskDisabled\r\n        this.taskActionsDisabled = taskActionsDisabled\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\tasks\\BaseTaskViewHolder.kt"}}
{"prompt": "\n override fun onLeftActionTouched() {\r\n        super.onLeftActionTouched()\r\n        if (task?.isValid == true && !isLocked) {\r", "choices": [{"text": "\n override fun onLeftActionTouched() {\r\n        super.onLeftActionTouched()\r\n        if (task?.isValid == true &&!isLocked) {\r\n//            if (task?.isCompleted == true) {\r\n//                task?.isCompleted = false\r\n//            } else {\r\n//                task?.isCompleted = true\r\n//            }\r\n            task?.isCompleted =!task?.isCompleted!!\r\n            task?.save()\r\n            updateTask()\r\n        }\r\n    }\r\n\r\n    override fun onRightActionTouched() {\r\n        super.onRightActionTouched()\r\n        if (task?.isValid == true &&!isLocked) {\r\n            task?.isCompleted = false\r\n            task?.save()\r\n            updateTask()\r\n        }\r\n    }\r\n\r\n    override fun onLong"}], "metadata": {"task_id": "habitica-android/956", "ground_truth": "            onCheckedChanged(!(task?.completed(userID) ?: false))\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\tasks\\ChecklistedViewHolder.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\noverride fun onRightActionTouched() {\r", "choices": [{"text": "// TODO: 2017-07-12 00:00:00\r\n}\r\noverride fun onLeftActionTouched() {\r\n// TODO: 2017-07-12 00:00:00\r\n}\r\noverride fun onActionTouched() {\r\n// TODO: 2017-07-12 00:00:00\r\n}\r\noverride fun onActionLongTouched() {\r\n// TODO: 2017-07"}], "metadata": {"task_id": "habitica-android/957", "ground_truth": "        super.onRightActionTouched()\r\n        onChecklistIndicatorClicked()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\tasks\\ChecklistedViewHolder.kt"}}
{"prompt": "\n override fun onLeftActionTouched() {\r\n        super.onLeftActionTouched()\r\n        if (!isLocked) {\r", "choices": [{"text": "//            if (isShow) {\r\n//                isShow = false\r\n//                mIv_lock.setImageResource(R.mipmap.ic_lock)\r\n//                mTv_lock.text = \"\u89e3\u9501\"\r\n//                mIv_lock.visibility = View.VISIBLE\r\n//                mTv_lock.visibility = View.VISIBLE\r\n//            } else {\r\n//                isShow = true\r\n//                mIv_lock.setImageResource(R.mipmap.ic_unlock)\r\n//                mTv_lock.text ="}], "metadata": {"task_id": "habitica-android/961", "ground_truth": "            onPlusButtonClicked()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\tasks\\HabitViewHolder.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\noverride fun onRightActionTouched() {\r\n        super.onRightActionTouched()\r\n        if (!isLocked) {\r", "choices": [{"text": "//            val intent = Intent(this, MainActivity::class.java)\r\n//            intent.putExtra(MainActivity.EXTRA_SHOW_LOCK_SCREEN, true)\r\n//            startActivity(intent)\r\n            finish()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/962", "ground_truth": "            onMinusButtonClicked()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\tasks\\HabitViewHolder.kt"}}
{"prompt": "\n import android.widget.Button\nprivate fun onPlusButtonClicked() {\r", "choices": [{"text": "//    val plusButton: Button = findViewById(R.id.plus_button)\r\n//    plusButton.setOnClickListener {\r\n//        // Do something in response to button click\r\n//    }\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/963", "ground_truth": "        if (task?.up != true) return\r\n        task?.let { scoreTaskFunc.invoke(it, TaskDirection.UP) }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\tasks\\HabitViewHolder.kt"}}
{"prompt": "\n import android.widget.Button\nprivate fun onMinusButtonClicked() {\r", "choices": [{"text": "//    val currentValue = currentValue.toInt()\r\n//    currentValue -= 1\r\n//    currentValueTextView.text = currentValue.toString()\r\n}\r\nprivate fun onPlusButtonClicked() {\r\n//    val currentValue = currentValue.toInt()\r\n//    currentValue += 1\r\n//    currentValueTextView.text = currentValue.toString()\r\n}\r\nprivate fun onResetButtonClicked() {\r\n//    currentValueTextView.text = \"0\"\r\n}\r\nprivate fun onEqualButtonClicked() {\r\n//"}], "metadata": {"task_id": "habitica-android/964", "ground_truth": "        if (task?.down != true) return\r\n        task?.let { scoreTaskFunc.invoke(it, TaskDirection.DOWN) }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\tasks\\HabitViewHolder.kt"}}
{"prompt": " import com.habitrpg.android.habitica.models.tasks.Task\nval btnMinus Button\nval btnMinusIconView ImageView\nval btnMinusWrapper FrameLayout\noverride fun setDisabled(openTaskDisabled: Boolean, taskActionsDisabled: Boolean) {\r\n        super.setDisabled(openTaskDisabled, taskActionsDisabled)\r\n\r", "choices": [{"text": "//        btnMinusWrapper.isEnabled =!openTaskDisabled &&!taskActionsDisabled\r\n        btnMinusWrapper.isEnabled =!openTaskDisabled\r\n        btnMinus.isEnabled =!openTaskDisabled &&!taskActionsDisabled\r\n        btnMinusIconView.isEnabled =!openTaskDisabled &&!taskActionsDisabled\r\n    }\n\n"}], "metadata": {"task_id": "habitica-android/965", "ground_truth": "        this.btnPlus.isEnabled = !taskActionsDisabled\r\n        this.btnMinus.isEnabled = !taskActionsDisabled\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewHolders\\tasks\\HabitViewHolder.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport com.google.android.gms.common.GoogleApiAvailability\nimport com.google.android.gms.common.ConnectionResult\nimport android.app.Activity\nprivate fun checkPlayServices(activity: Activity): Boolean {\r\n        val googleAPI = GoogleApiAvailability.getInstance()\r\n        val result = googleAPI.isGooglePlayServicesAvailable(activity)\r\n        if (result != ConnectionResult.SUCCESS) {\r\n            if (googleAPI.isUserResolvableError(result)) {\r\n                googleAPI.getErrorDialog(\r\n                    activity,\r\n                    result,\r\n                    PLAY_SERVICES_RESOLUTION_REQUEST\r\n                )?.show()\r\n            }\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.R\nimport com.google.android.gms.common.GoogleApiAvailability\nimport com.google.android.gms.common.ConnectionResult\nimport android.app.Activity\nprivate fun checkPlayServices(activity: Activity): Boolean {\r\n        val googleAPI = GoogleApiAvailability.getInstance()\r\n        val result = googleAPI.isGooglePlayServicesAvailable(activity)\r\n        if (result!= ConnectionResult.SUCCESS) {\r\n            if (googleAPI.isUserResolvableError(result)) {\r\n                googleAPI.getErrorDialog(\r\n                    activity,\r\n                    result,\r\n                    PLAY_SERVICES_RESOLUTION_REQUEST\r\n                )?.show()\r\n            }\r\n//            Toast.makeText(activity, \"This device is not supported\", Toast.LENGTH_LONG).show()\r\n            return false\r\n        }\r\n        return true\r\n    }\n"}], "metadata": {"task_id": "habitica-android/968", "ground_truth": "            return false\r\n        }\r\n\r\n        return true\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\AuthenticationViewModel.kt"}}
{"prompt": "\nval user LiveData<User?>\n override fun onCleared() {\r", "choices": [{"text": "super.onCleared()\r\nuser.removeObserver(observer)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/970", "ground_truth": "        userRepository.close()\r\n        super.onCleared()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\BaseViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.models.user.User\nimport androidx.lifecycle.viewModelScope\nfun updateUser(path: String, value: Any) {\r\n        viewModelScope.launch(ExceptionHandler.coroutine()) {\r", "choices": [{"text": "//            val user = User.get()\r\n//            user.update(path, value)\r\n//            user.save()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/971", "ground_truth": "            userRepository.updateUser(path, value)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\BaseViewModel.kt"}}
{"prompt": "\nval leaderFlow\nval leader\nval group\n override fun onCleared() {\r", "choices": [{"text": "super.onCleared()\r\nleaderFlow.cancel()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/972", "ground_truth": "        socialRepository.close()\r\n        super.onCleared()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\GroupViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.social.Group\nimport androidx.lifecycle.viewModelScope\nfun inviteToGroup(inviteData: HashMap<String, Any>) {\r\n        viewModelScope.launchCatching {\r", "choices": [{"text": "//            val result = HabiticaApi.instance.inviteToGroup(inviteData)\r\n//            if (result.isSuccessful) {\r\n//                result.body()?.let {\r\n//                    _inviteToGroup.postValue(it)\r\n//                }\r\n//            } else {\r\n//                _inviteToGroup.postValue(null)\r\n//            }\r\n        }\r\n    }\n\nfun getGroup(groupId: String): LiveData<Group?> {\r\n        val _getGroup = MutableLiveData<Group?>()\r\n        viewModelScope.launchCatching {\r\n"}], "metadata": {"task_id": "habitica-android/973", "ground_truth": "            socialRepository.inviteToGroup(group.value?.id ?: \"\", inviteData)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\GroupViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.social.Group\nimport androidx.lifecycle.viewModelScope\nfun joinGroup(id: String? = null, function: (() -> Unit)? = null) {\r\n        viewModelScope.launchCatching {\r\n            socialRepository.joinGroup(id ?: groupID)\r", "choices": [{"text": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.social.Group\nimport androidx.lifecycle.viewModelScope\nfun joinGroup(id: String? = null, function: (() -> Unit)? = null) {\r\n        viewModelScope.launchCatching {\r\n            socialRepository.joinGroup(id?: groupID)\r\n//            socialRepository.joinGroup(id?: groupID)\r\n            function?.invoke()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/974", "ground_truth": "            function?.invoke()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\GroupViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport androidx.lifecycle.viewModelScope\nfun markMessagesSeen() {\r\n        groupID?.let {\r\n            if (it.isNotEmpty() && gotNewMessages) {\r\n                viewModelScope.launchCatching {\r", "choices": [{"text": "//                    val result = repository.markMessagesSeen(it)\r\n//                    if (result.isSuccess) {\r\n//                        gotNewMessages = false\r\n//                    }\r\n                }\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/976", "ground_truth": "                    socialRepository.markMessagesSeen(it)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\GroupViewModel.kt"}}
{"prompt": " import com.habitrpg.android.habitica.models.members.Member\nval memberID String?\nval recipientID String?\nvar memberIDFlow\nfun setMemberID(memberID: String) {\r", "choices": [{"text": "memberIDFlow.value = memberID\r\n}\n"}], "metadata": {"task_id": "habitica-android/980", "ground_truth": "        if (memberID == memberIDState.value) return\r\n        memberIDFlow.value = memberID\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\InboxViewModel.kt"}}
{"prompt": "\nval recipientID String?\nvar memberIDFlow\nval memberID String?\n fun updateRecipientID(newID: String?) {\r", "choices": [{"text": "recipientID = newID\r\n}\r\nfun updateMemberID(newID: String?) {\r\nmemberID = newID\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/981", "ground_truth": "        recipientID = newID\r\n        latestSource.recipientID = newID\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\InboxViewModel.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.social.ChatMessage\nimport androidx.paging.DataSource\noverride fun create(): DataSource<Int, ChatMessage> {\r\n        latestSource = MessagesDataSource(socialRepository, recipientID, footer)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/982", "ground_truth": "        sourceLiveData.postValue(latestSource)\r\n        return latestSource\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\InboxViewModel.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.inventory.Equipment\nimport androidx.lifecycle.viewModelScope\nfun getGear(key: String, onSuccess: (Equipment) -> Unit) {\r\n        viewModelScope.launchCatching {\r", "choices": [{"text": "//            val response = api.getGear(key)\r\n//            if (response.isSuccessful) {\r\n//                val data = response.body()\r\n//                if (data!= null) {\r\n//                    onSuccess(data)\r\n//                }\r\n//            }\r\n        }\r\n    }<file_sep>package com.habitrpg.android.habitica.models.inventory\n\nimport com.google.gson.annotations.SerializedName\n\ndata class Equipment(\n    @SerializedName(\"name\")\n    val name: String,\n    @SerializedName(\"description\")\n    val description: String,"}], "metadata": {"task_id": "habitica-android/983", "ground_truth": "            inventoryRepository.getEquipment(key).collect {\r\n                onSuccess(it)\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\inventory\\equipment\\EquipmentOverviewViewModel.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\noverride fun onCleared() {\r\n        taskRepository.close()\r\n        inventoryRepository.close()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/984", "ground_truth": "        contentRepository.close()\r\n        super.onCleared()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\MainActivityViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.viewModelScope\nfun onCreate() {\r\n        try {\r\n            viewModelScope.launch(ExceptionHandler.coroutine()) {\r\n                taskAlarmManager.scheduleAllSavedAlarms(\r\n                    sharedPreferences.getBoolean(\r\n                        \"preventDailyReminder\",\r\n                        false\r\n                    )\r\n                )\r", "choices": [{"text": "//                taskAlarmManager.scheduleAllSavedAlarms(false)\r\n            }\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/985", "ground_truth": "            }\r\n        } catch (e: Exception) {\r\n            Analytics.logException(e)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\MainActivityViewModel.kt"}}
{"prompt": " import androidx.core.content.edit\nval isAuthenticated Boolean\nvar requestNotificationPermission\nval canShowTeamPlanHeader\nfun updateAllowPushNotifications(allowPushNotifications: Boolean) {\r\n        sharedPreferences.getBoolean(\"usePushNotifications\", true)\r\n        sharedPreferences.edit {\r", "choices": [{"text": "//            putBoolean(\"usePushNotifications\", allowPushNotifications)\r\n        }\r\n    }\nfun updateAllowPushNotifications(allowPushNotifications: Boolean) {\r\n        sharedPreferences.getBoolean(\"usePushNotifications\", true)\r\n        sharedPreferences.edit {\r\n//            putBoolean(\"usePushNotifications\", allowPushNotifications)\r\n        }\r\n    }\nfun updateAllowPushNotifications(allowPushNotifications: Boolean) {\r\n        sharedPreferences.getBoolean(\"usePushNotifications\", true)\r\n        sharedPreferences.edit {\r\n//            putBoolean(\"usePushNotifications\", allowPushNotifications)\r\n        }\r\n    }\nfun updateAllowPushNotifications(allow"}], "metadata": {"task_id": "habitica-android/987", "ground_truth": "            putBoolean(\"usePushNotifications\", allowPushNotifications)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\MainActivityViewModel.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.TutorialStep\nimport com.habitrpg.android.habitica.helpers.Analytics\nfun logTutorialStatus(step: TutorialStep, complete: Boolean) {\r\n        val additionalData = HashMap<String, Any>()\r\n        additionalData[\"eventLabel\"] = step.identifier + \"-android\"\r\n        additionalData[\"eventValue\"] = step.identifier ?: \"\"\r\n        additionalData[\"complete\"] = complete\r\n        Analytics.sendEvent(\r\n            \"tutorial\",\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/989", "ground_truth": "            EventCategory.BEHAVIOUR,\r\n            HitType.EVENT,\r\n            additionalData\r\n        )\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\MainActivityViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.shared.habitica.models.responses.MaintenanceResponse\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.viewModelScope\nfun ifNeedsMaintenance(onResult: ((MaintenanceResponse) -> Unit)) {\r\n        viewModelScope.launchCatching {\r\n            val maintenanceResponse = maintenanceService.getMaintenanceStatus()\r\n            if (maintenanceResponse?.activeMaintenance == null) {\r", "choices": [{"text": "//                maintenanceResponse?.activeMaintenance = true\r\n                onResult(maintenanceResponse)\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/990", "ground_truth": "                return@launchCatching\r\n            }\r\n            onResult(maintenanceResponse)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\MainActivityViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.MainScope\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.models.user.User\nfun updateUser(path: String, value: Any) {\r\n        MainScope().launch(ExceptionHandler.coroutine()) {\r", "choices": [{"text": "//            val user = User.get()\r\n//            user.update(path, value)\r\n//            user.save()\r\n        }\r\n    }<file_sep>/app/src/main/java/com/habitrpg/android/habitica/models/user/User.kt\npackage com.habitrpg.android.habitica.models.user\n\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.auth.FirebaseUser\nimport com.google.firebase.database.DataSnapshot\nimport com.google.firebase.database.DatabaseError\n"}], "metadata": {"task_id": "habitica-android/991", "ground_truth": "            userRepository.updateUser(path, value)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\MainUserViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.MainScope\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.models.user.User\nfun updateUser(data: Map<String, Any>) {\r\n        MainScope().launch(ExceptionHandler.coroutine()) {\r", "choices": [{"text": "//            val user = User.update(data)\r\n//            if (user!= null) {\r\n//                User.update(data)\r\n//            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/992", "ground_truth": "            userRepository.updateUser(data)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\MainUserViewModel.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.models.notifications.NewChatMessageData\nfun isPartyMessage(data: NewChatMessageData?): Boolean {\r\n        if (party?.isValid != true || data?.group?.id == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/996", "ground_truth": "            return false\r\n        }\r\n\r\n        return party?.id == data.group?.id\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\NotificationsViewModel.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.models.Notification\nimport com.habitrpg.android.habitica.models.user.User\nfun dismissNotification(notification: Notification) {\r\n        if (isCustomNotification(notification)) {\r\n            if (isCustomNewStuffNotification(notification)) {\r\n                updateUser(\"flags.newStuff\", false)\r\n                customNotifications.value =\r\n                    customNotifications.value.filterNot { it.id == notification.id }\r\n            }\r\n            return\r\n        }\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/997", "ground_truth": "\r\n        viewModelScope.launchCatching {\r\n            userRepository.readNotification(notification.id)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\NotificationsViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.map\nimport com.habitrpg.common.habitica.models.Notification\nfun markNotificationsAsSeen(notifications: List<Notification>) {\r\n        val unseenIds =\r\n            notifications.filter { !isCustomNotification(it) }.filter { it.seen == false }\r\n                .map { it.id }\r\n\r\n        if (unseenIds.isEmpty()) {\r\n            return\r\n        }\r\n\r\n        val notificationIds = HashMap<String, List<String>>()\r\n        notificationIds[\"notificationIds\"] = unseenIds\r", "choices": [{"text": "\n import kotlinx.coroutines.flow.map\nimport com.habitrpg.common.habitica.models.Notification\nfun markNotificationsAsSeen(notifications: List<Notification>) {\r\n        val unseenIds =\r\n            notifications.filter {!isCustomNotification(it) }.filter { it.seen == false }\r\n               .map { it.id }\r\n\r\n        if (unseenIds.isEmpty()) {\r\n            return\r\n        }\r\n\r\n        val notificationIds = HashMap<String, List<String>>()\r\n        notificationIds[\"notificationIds\"] = unseenIds\r\n}\n"}], "metadata": {"task_id": "habitica-android/998", "ground_truth": "\r\n        viewModelScope.launchCatching {\r\n            userRepository.seeNotifications(notificationIds)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\NotificationsViewModel.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.models.Notification\nprivate fun findNotification(id: String): Notification? {\r", "choices": [{"text": "return null\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/999", "ground_truth": "        return notificationsManager.getNotification(id)\r\n            ?: customNotifications.value.find { it.id == id }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\NotificationsViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport androidx.lifecycle.viewModelScope\nprivate fun acceptGroupInvitation(groupId: String?) {\r\n        groupId?.let {\r\n            viewModelScope.launch(ExceptionHandler.coroutine()) {\r", "choices": [{"text": "//                val response = api.acceptGroupInvitation(groupId)\r\n//                if (response.isSuccessful) {\r\n//                    _acceptGroupInvitation.postValue(response.body())\r\n//                } else {\r\n//                    _acceptGroupInvitation.postValue(null)\r\n//                }\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/1000", "ground_truth": "                socialRepository.joinGroup(it)\r\n                refreshUser()\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\NotificationsViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport androidx.lifecycle.viewModelScope\nfun rejectGroupInvite(groupId: String?) {\r\n        groupId?.let {\r\n            viewModelScope.launchCatching {\r", "choices": [{"text": "//                val result = api.rejectGroupInvite(groupId)\r\n//                if (result.isSuccess) {\r\n//                    _rejectGroupInvite.postValue(result.getOrNull())\r\n//                } else {\r\n//                    _rejectGroupInvite.postValue(result.exceptionOrNull())\r\n//                }\r\n            }\r\n        }\r\n    }\n<file_sep>/app/src/main/java/com/habitrpg/common/habitica/models/HabiticaUser.kt\npackage com.habitrpg.common.habitica.models\n\nimport com.google"}], "metadata": {"task_id": "habitica-android/1001", "ground_truth": "                socialRepository.rejectGroupInvite(it)\r\n                refreshUser()\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\NotificationsViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport androidx.lifecycle.viewModelScope\nprivate fun acceptQuestInvitation() {\r\n        party?.id?.let {\r\n            viewModelScope.launchCatching {\r", "choices": [{"text": "//                partyRepository.acceptQuestInvitation(it)\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/1002", "ground_truth": "                socialRepository.acceptQuest(null, it)\r\n                refreshUser()\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\NotificationsViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport androidx.lifecycle.viewModelScope\nprivate fun rejectQuestInvitation() {\r\n        party?.id?.let {\r\n            viewModelScope.launchCatching {\r", "choices": [{"text": "//                partyRepository.rejectQuestInvitation(it)\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/1003", "ground_truth": "                socialRepository.rejectQuest(null, it)\r\n                refreshUser()\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\NotificationsViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.models.user.User\nimport androidx.lifecycle.viewModelScope\nprivate fun refreshUser() {\r\n        viewModelScope.launch(ExceptionHandler.coroutine()) {\r", "choices": [{"text": "//            val user = userRepository.getUser()\r\n//            _user.value = user\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/1004", "ground_truth": "            refreshNotifications()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\NotificationsViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.distinctUntilChanged\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport androidx.lifecycle.viewModelScope\nfun loadPartyID() {\r\n        viewModelScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.getUser()\r\n                .map { it?.party?.id }\r\n                .distinctUntilChanged()\r\n                .filterNotNull()\r", "choices": [{"text": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.coroutines.flow.distinctUntilChanged\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport androidx.lifecycle.viewModelScope\nfun loadPartyID() {\r\n        viewModelScope.launch(ExceptionHandler.coroutine()) {\r\n            userRepository.getUser()\r\n               .map { it?.party?.id }\r\n               .distinctUntilChanged()\r\n               .filterNotNull()\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/1008", "ground_truth": "                .collect {\r\n                    setGroupID(it)\r\n                }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\PartyViewModel.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.Task\nfun filter(tasks: List<Task>): List<Task> {\r\n        if (tasks.isEmpty()) {\r\n            return tasks\r\n        }\r\n        val filtered = ArrayList<Task>()\r\n        var activeFilter: String? = null\r\n        if (activeFilters.size > 0) {\r\n            activeFilter = activeFilters[tasks[0].type]\r\n        }\r\n        for (task in tasks) {\r\n            if (isFiltered(task, activeFilter)) {\r\n                filtered.add(task)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1013", "ground_truth": "            }\r\n        }\r\n\r\n        return filtered\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\TasksViewModel.kt"}}
{"prompt": "\n import com.habitrpg.shared.habitica.models.tasks.TaskType\nimport com.habitrpg.android.habitica.models.tasks.Task\nfun getActiveFilter(type: TaskType?): String? {\r\n        return if (activeFilters.containsKey(type)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1014", "ground_truth": "            activeFilters[type]\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\TasksViewModel.kt"}}
{"prompt": " import com.habitrpg.android.habitica.models.tasks.Task\nvar teamPlans\nvar canSwitchOwners\nvar searchQuery String?\noverride fun canScoreTask(task: Task): Boolean {\r\n        if (!task.isGroupTask) {\r\n            return true\r", "choices": [{"text": "\n        }\r\n        return false\r\r\n    }\noverride fun canScoreTask(task: Task): Boolean {\r\n        if (!task.isGroupTask) {\r\n            return true\r\r\n        }\r\n        return false\r\r\n    }\noverride fun canScoreTask(task: Task): Boolean {\r\n        if (!task.isGroupTask) {\r\n            return true\r\r\n        }\r\n        return false\r\r\n    }\noverride fun canScoreTask(task: Task): Boolean {\r\n        if (!task.isGroupTask) {\r\n            return true\r\r\n        }\r\n        return false\r\r\n    }\n\r\noverride fun canScoreTask(task: Task): Boolean {\r\n        if (!task"}], "metadata": {"task_id": "habitica-android/1015", "ground_truth": "        }\r\n        return task.isAssignedToUser(userViewModel.userID) || task.group?.assignedUsers?.isEmpty() != false\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\viewmodels\\TasksViewModel.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.theme.HabiticaTheme\nimport com.habitrpg.android.habitica.ui.theme.colors\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.TeamPlan\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.tooling.preview.PreviewParameter\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.background\n\r\n@Composable\r\n@Preview\r\nprivate fun Preview(@PreviewParameter(UserProvider::class) data: Pair<User, TeamPlan>) {\r\n    HabiticaTheme {\r\n        AppHeaderView(\r\n            data.first,\r\n            teamPlan = data.second,\r\n            modifier = Modifier\r\n                .background(HabiticaTheme.colors.contentBackground)\r\n                .padding(8.dp),\r", "choices": [{"text": "\n import com.habitrpg.common.habitica.theme.HabiticaTheme\nimport com.habitrpg.android.habitica.ui.theme.colors\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.models.TeamPlan\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.tooling.preview.PreviewParameter\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.background\n\r\n@Composable\r\n@Preview\r\nprivate fun Preview(@PreviewParameter(UserProvider::class) data: Pair<User, TeamPlan>) {\r\n    HabiticaTheme {\r\n        AppHeaderView(\r\n            data.first,\r\n            teamPlan = data.second,\r\n            modifier = Modifier\r\n               .background(HabiticaTheme.colors.contentBackground)\r\n               .padding(8.dp),\r\n//            modifier = Modifier.padding(8.dp),\r\n            onBackClick = {},\r\n            onMenuClick = {},\r\n            onProfileClick = {},\r\n            onSettingsClick = {},\r\n            onSearchClick = {},\r\n            onHabiticaClick = {},\r\n            onHabiticaPlusClick = {},\r\n            onHabiticaPlusMenuClick = {},\r\n            onHabiticaPlusMenuSettingsClick = {},\r\n            onHabiticaPlusMenuProfileClick = {},\r\n            onHabiticaPlusMenuSearchClick = {},\r\n            onHabiticaPlusMenuHabiticaClick = {},\r\n            onHabiticaPlusMenuHabiticaPlusClick"}], "metadata": {"task_id": "habitica-android/1019", "ground_truth": "            onMemberRowClicked = { },\r\n            onClassSelectionClicked = { }\r\n        )\r\n    }\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\AppHeaderView.kt"}}
{"prompt": "\n import androidx.compose.runtime.Composable\nimport android.app.Activity\nfun Activity.showAsBottomSheet(content: @Composable (() -> Unit) -> Unit) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "habitica-android/1020", "ground_truth": "    val viewGroup = this.findViewById(android.R.id.content) as ViewGroup\r\n    addContentToView(viewGroup, content)\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\BottomSheetUtils.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.theme.HabiticaTheme\nimport androidx.compose.ui.platform.ComposeView\nimport androidx.compose.runtime.Composable\nimport android.view.ViewGroup\nprivate fun addContentToView(\r\n    viewGroup: ViewGroup,\r\n    content: @Composable (() -> Unit) -> Unit\r\n) {\r\n    viewGroup.addView(\r\n        ComposeView(viewGroup.context).apply {\r\n            setContent {\r\n                HabiticaTheme {\r\n                    BottomSheetWrapper(viewGroup, this, content)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1022", "ground_truth": "                }\r\n            }\r\n        }\r\n    )\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\BottomSheetUtils.kt"}}
{"prompt": "\n import androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun BuffIcon(buffed: Boolean?, modifier: Modifier = Modifier) {\r\n    if (buffed == true) {\r", "choices": [{"text": "//        Icon(\r\n//            painter = painterResource(id = R.drawable.ic_buff),\r\n//            contentDescription = \"Buffed\",\r\n//            modifier = modifier\r\n//        )\r\n        Icon(\r\n            painter = painterResource(id = R.drawable.ic_buff),\r\n            contentDescription = \"Buffed\",\r\n            modifier = modifier\r\n        )\r\n    } else {\r\n        Icon(\r\n            painter = painterResource(id = R.drawable.ic_buff_off),\r\n            contentDescription = \"Not Buffed\",\r\n            modifier = modifier\r\n        )\r\n    }\r\n}<file_sep>/"}], "metadata": {"task_id": "habitica-android/1023", "ground_truth": "        Image(HabiticaIconsHelper.imageOfBuffIcon().asImageBitmap(), null, modifier = modifier)\r\n    }\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\BuffIcon.kt"}}
{"prompt": "\n private fun updatePreferences() {\r\n        if (identifier == null) {\r\n            return\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1026", "ground_truth": "        }\r\n        preferences?.edit { putBoolean(identifier, isCollapsed) }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\CollapsibleSectionView.kt"}}
{"prompt": "\nvar preferences SharedPreferences?\nval infoIconView ImageView\nvar identifier String?\n override fun onLayout(changed: Boolean, l: Int, t: Int, r: Int, b: Int) {\r", "choices": [{"text": "super.onLayout(changed, l, t, r, b)\r\nif (changed) {\r\nval infoIconView = findViewById(R.id.info_icon) as ImageView\r\nval infoIconViewWidth = infoIconView.width\r\nval infoIconViewHeight = infoIconView.height\r\nval infoIconViewLeft = infoIconView.left\r\nval infoIconViewTop = infoIconView.top\r\nval infoIconViewRight = infoIconView.right\r\nval infoIconViewBottom = infoIconView.bottom\r\nval infoIconViewCenterX"}], "metadata": {"task_id": "habitica-android/1028", "ground_truth": "        setChildMargins()\r\n        super.onLayout(changed, l, t, r, b)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\CollapsibleSectionView.kt"}}
{"prompt": "\nvar animationDuration\nvar decimals\nvar drawable BitmapDrawable?\n private fun updateVisibility() {\r\n        visibility = if (hideWhenEmpty) {\r", "choices": [{"text": "if (value == 0f) {\r\nView.GONE\r\n} else {\r\nView.VISIBLE\r\n}\r\n} else {\r\nView.VISIBLE\r\n}\r\n    }\n"}], "metadata": {"task_id": "habitica-android/1032", "ground_truth": "            if (\"0\" == text) View.GONE else View.VISIBLE\r\n        } else {\r\n            View.VISIBLE\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\CurrencyView.kt"}}
{"prompt": "\n import android.util.TypedValue\nprivate fun setupViews() {\r\n        val margin = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 12f, context.resources.displayMetrics).toInt()\r\n        setupView(hourglassTextView, margin)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/1033", "ground_truth": "        setupView(goldTextView, margin)\r\n        setupView(gemTextView, margin)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\CurrencyViews.kt"}}
{"prompt": "\nvar eggView PixelArtView?\nvar hatchingPotionView PixelArtView?\n fun configure(egg: String, hatchingPotion: String) {\r", "choices": [{"text": "eggView = PixelArtView(egg)\r\nhatchingPotionView = PixelArtView(hatchingPotion)\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/1035", "ground_truth": "        eggView?.loadImage(\"Pet_Egg_$egg\")\r\n        hatchingPotionView?.loadImage(\"Pet_HatchingPotion_$hatchingPotion\")\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\FirstDropDialog.kt"}}
{"prompt": "\nvar isScrollingLayout Boolean\nvar additionalContentView View?\nval binding\n override fun dismiss() {\r", "choices": [{"text": "super.dismiss()\r\nisScrollingLayout = false\r\n}\r\noverride fun show() {\r\nsuper.show()\r\nisScrollingLayout = true\r\n}\r\noverride fun onLayout(changed: Boolean, left: Int, top: Int, right: Int, bottom: Int) {\r\nsuper.onLayout(changed, left, top, right, bottom)\r\nif (isScrollingLayout) {\r\nisScrollingLayout = false\r\nval scrollView = getChildAt(0) as? ScrollView\r\nscrollView?.post {\r\nscrollView.full"}], "metadata": {"task_id": "habitica-android/1044", "ground_truth": "        showNextInQueue(this)\r\n        super.dismiss()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\HabiticaAlertDialog.kt"}}
{"prompt": "\n import androidx.appcompat.app.AlertDialog\nprivate fun addToQueue(dialog: HabiticaAlertDialog) {\r\n            if (checkIfQueueAvailable()) {\r\n                dialog.show()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1046", "ground_truth": "            }\r\n            dialogQueue.add(dialog)\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\HabiticaAlertDialog.kt"}}
{"prompt": "\n import android.view.View\noverride fun setContentView(view: View) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "habitica-android/1048", "ground_truth": "        wrapperBinding.container.addView(view)\r\n        super.setContentView(wrapperBinding.root)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\HabiticaBottomSheetDialog.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\noverride fun setContentView(layoutResID: Int) {\r", "choices": [{"text": "super.setContentView(layoutResID)\r\nsetContentView(layoutResID, null)\r\n}\r\noverride fun setContentView(view: View?, params: ViewGroup.LayoutParams?) {\r\nsuper.setContentView(view, params)\r\nif (view!= null) {\r\nval contentView = view.findViewById<View>(android.R.id.content)\r\nif (contentView!= null) {\r\ncontentView.fitsSystemWindows = true\r\n}\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/1049", "ground_truth": "        layoutInflater.inflate(layoutResID, wrapperBinding.container)\r\n        super.setContentView(wrapperBinding.root)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\HabiticaBottomSheetDialog.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.inventory.Item\noverride fun show() {\r\n        super.show()\r\n        if (!hasAllItems) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1050", "ground_truth": "            Analytics.sendNavigationEvent(\"pet suggestion modal\")\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\PetSuggestHatchDialog.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.inventory.HatchingPotion\nimport com.habitrpg.android.habitica.models.inventory.Egg\nimport com.habitrpg.android.habitica.interactors.HatchPetUseCase\nimport com.habitrpg.android.habitica.R\nprivate fun hatchPet(potion: HatchingPotion, egg: Egg) {\r\n        longLivingScope.launchCatching {\r\n            hatchPetUseCase.callInteractor(\r\n                HatchPetUseCase.RequestValues(\r\n                    potion,\r\n                    egg,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1051", "ground_truth": "                    context\r\n                )\r\n            )\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\PetSuggestHatchDialog.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.inventory.Item\nimport com.habitrpg.android.habitica.models.inventory.Animal\nprivate fun getItemPrice(pet: Animal, item: Item?, hasUnlocked: Boolean): Int {\r\n        if (pet.type == \"drop\" || (pet.type == \"quest\" && hasUnlocked)) {\r\n            return item?.value ?: 0\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.models.inventory.Item\nimport com.habitrpg.android.habitica.models.inventory.Animal\nprivate fun getItemPrice(pet: Animal, item: Item?, hasUnlocked: Boolean): Int {\r\n        if (pet.type == \"drop\" || (pet.type == \"quest\" && hasUnlocked)) {\r\n            return item?.value?: 0\r\n}\r\n        return 0\r\n    }\n"}], "metadata": {"task_id": "habitica-android/1052", "ground_truth": "        }\r\n        return 0\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\PetSuggestHatchDialog.kt"}}
{"prompt": " import kotlinx.coroutines.launch\nimport kotlinx.coroutines.MainScope\nvar userRepository UserRepository\nvar quest QuestContent?\nvar isShowingDialog\noverride fun dismiss() {\r\n        MainScope().launch {\r", "choices": [{"text": "//            userRepository.updateUser(user)\r\n            super.dismiss()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/1053", "ground_truth": "            userRepository.syncUserStats()\r\n        }\r\n        isShowingDialog = false\r\n        super.dismiss()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\QuestCompletedDialog.kt"}}
{"prompt": " import com.habitrpg.android.habitica.R\nimport android.view.View\nimport android.view.Gravity\nvar binding DialogCompletedQuestContentBinding\nprivate fun setupView() {\r\n        orientation = VERTICAL\r\n        gravity = Gravity.CENTER\r", "choices": [{"text": "}\n\nprivate fun setupView() {\r\n        orientation = VERTICAL\r\n        gravity = Gravity.CENTER\r\n}\n\nprivate fun setupView() {\r\n        orientation = VERTICAL\r\n        gravity = Gravity.CENTER\r\n}\n\nprivate fun setupView() {\r\n        orientation = VERTICAL\r\n        gravity = Gravity.CENTER\r\n}\n\nprivate fun setupView() {\r\n        orientation = VERTICAL\r\n        gravity = Gravity.CENTER\r\n}\n\nprivate fun setupView() {\r\n        orientation = VERTICAL\r\n        gravity = Gravity.CENTER\r\n}\n\nprivate fun setupView"}], "metadata": {"task_id": "habitica-android/1055", "ground_truth": "\r\n        binding = DialogCompletedQuestContentBinding.inflate(context.layoutInflater, this)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\dialogs\\QuestCompletedDialogContent.kt"}}
{"prompt": "\n import android.view.View\nimport android.graphics.drawable.Drawable\nfun startDetectingOnPossibleDrag(view: View, position: Int) {\r\n            this.view = view\r\n            this.startVisibility = view.visibility\r\n            this.viewDrawable = getDragDrawable(view)\r\n            this.position = position\r\n            this.startTop = view.top\r\n            this.height = view.height\r\n            this.totalDragOffset = 0\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/1056", "ground_truth": "            this.targetTopOffset = 0\r\n            this.settleAnimation = null\r\n\r\n            this.detecting = true\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt"}}
{"prompt": "\n fun onDragStart() {\r", "choices": [{"text": "//     Log.d(\"Drag\", \"onDragStart\")\r\n//     val dragShadowBuilder = View.DragShadowBuilder(view)\r\n//     view.startDrag(null, dragShadowBuilder, view, 0)\r\n//     view.visibility = View.INVISIBLE\r\n// }\r\n\r\n fun onDragEnd() {\r\n//     Log.d(\"Drag\", \"onDragEnd\")\r\n//     view.visibility = View.VISIBLE\r\n// }\r\n\r\n fun onDragEnter() {\r\n//     Log.d(\"Drag\", \"onDragEnter\")\r\n"}], "metadata": {"task_id": "habitica-android/1057", "ground_truth": "            view?.visibility = View.INVISIBLE\r\n            this.dragging = true\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt"}}
{"prompt": "\nvar totalDragOffset Int\nval MAX_DRAG_SCROLL_SPEED\nvar targetTopOffset Int\n fun setTotalOffset(offset: Int) {\r", "choices": [{"text": "totalDragOffset = offset\r\n}\r\nfun setMaxDragScrollSpeed(speed: Int) {\r\nMAX_DRAG_SCROLL_SPEED = speed\r\n}\r\nfun setTargetTopOffset(offset: Int) {\r\ntargetTopOffset = offset\r\n}\r\nfun getTargetTopOffset(): Int {\r\nreturn targetTopOffset\r\n}\r\nfun getScrollSpeed(): Int {\r\nreturn MAX_DRAG_SCROLL_SPEED\r\n}\r\nfun getScrollOffset(): Int {\r\nreturn totalDragOffset\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/1058", "ground_truth": "            totalDragOffset = offset\r\n            updateTargetTop()\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt"}}
{"prompt": "\n import android.view.View\nfun removeViewDraggable(child: View) {\r\n        if (this === child.parent) {\r\n            draggableChildren.remove(indexOfChild(child))\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "habitica-android/1062", "ground_truth": "            draggableChildren.put(indexOfChild(child), DraggableChild())\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt"}}
{"prompt": " import android.view.View\nvar dragging Boolean\nval MAX_DRAG_SCROLL_SPEED\nval dragTopShadowDrawable Drawable?\noverride fun removeAllViews() {\r", "choices": [{"text": "super.removeAllViews()\r\ndragging = false\r\n}\r\noverride fun onInterceptTouchEvent(ev: MotionEvent): Boolean {\r\nif (dragging) {\r\nreturn true\r\n}\r\nval action = ev.action\r\nif (action == MotionEvent.ACTION_DOWN) {\r\nval x = ev.x\r\nval y = ev.y\r\nif (x < 0 || x > width || y < 0 || y > height) {\r\nreturn false\r\n}\r\ndragging = true\r\n}\r\nreturn super."}], "metadata": {"task_id": "habitica-android/1063", "ground_truth": "        super.removeAllViews()\r\n        draggableChildren.clear()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt"}}
{"prompt": "\nvar startVisibility Int\nvar totalDragOffset Int\nvar dragUpdater Runnable?\n private fun startDrag() {\r\n        // remove layout transition, it conflicts with drag animation\r\n        // we will restore it after drag animation end, see onDragStop()\r\n        layoutTransition = layoutTransition\r\n        if (layoutTransition != null) {\r\n            layoutTransition = null\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1065", "ground_truth": "        }\r\n\r\n        draggedItem.onDragStart()\r\n        requestDisallowInterceptTouchEvent(true)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt"}}
{"prompt": "\n private fun onTouchEnd() {\r", "choices": [{"text": "//    if (mIsTouched) {\r\n//      mIsTouched = false\r\n//      mIsTouched = false\r\n//      mIsTouched = false\r\n//      mIsTouched = false\r\n//      mIsTouched = false\r\n//      mIsTouched = false\r\n//      mIsTouched = false\r\n//      mIsTouched = false\r\n//      mIsTouched = false\r\n//      mIsTouched = false\r\n//      mIsTouched = false\r\n//      mIsTou"}], "metadata": {"task_id": "habitica-android/1068", "ground_truth": "        downY = -1\r\n        activePointerId = INVALID_POINTER_ID\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt"}}
{"prompt": "\n import android.view.View\nimport android.graphics.drawable.Drawable\nimport android.graphics.drawable.BitmapDrawable\nimport android.graphics.Bitmap\nprivate fun getDragDrawable(view: View): BitmapDrawable {\r\n        val top = view.top\r\n        val left = view.left\r\n\r\n        val bitmap = getBitmapFromView(view)\r\n\r\n        val drawable = BitmapDrawable(resources, bitmap)\r", "choices": [{"text": "//        drawable.setBounds(left, top, left + view.width, top + view.height)\r\n        return drawable\r\n    }\r\n\r\n    private fun getBitmapFromView(view: View): Bitmap {\r\n        val bitmap = Bitmap.createBitmap(view.width, view.height, Bitmap.Config.ARGB_8888)\r\n        val canvas = Canvas(bitmap)\r\n        view.draw(canvas)\r\n        return bitmap\r\n    }\n<file_sep>/app/src/main/java/com/example/draganddrop/MainActivity.kt\npackage com.example.draganddrop\n\nimport android.content."}], "metadata": {"task_id": "habitica-android/1070", "ground_truth": "\r\n        drawable.bounds = Rect(left, top, left + view.width, top + view.height)\r\n\r\n        return drawable\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport android.view.View\nimport android.graphics.Canvas\nimport android.graphics.Bitmap\nprivate fun getBitmapFromView(view: View): Bitmap {\r\n            val bitmap = Bitmap.createBitmap(view.width, view.height, Bitmap.Config.ARGB_8888)\r\n            val canvas = Canvas(bitmap)\r", "choices": [{"text": "// draw the view on the canvas\r\n            view.draw(canvas)\r\n            return bitmap\r\n        }\n"}], "metadata": {"task_id": "habitica-android/1072", "ground_truth": "            view.draw(canvas)\r\n            return bitmap\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\DragLinearLayout.kt"}}
{"prompt": "\n fun addEllipsesListener(listener: EllipsisListener?) {\r\n        if (listener == null) {\r\n            throw NullPointerException()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1073", "ground_truth": "        }\r\n        ellipsesListeners.add(listener)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\EllipsisTextView.kt"}}
{"prompt": "\n override fun layout(l: Int, t: Int, r: Int, b: Int) {\r\n        super.layout(l, t, r, b)\r\n\r\n        ellipses = false\r\n        val layout = layout\r\n        if (layout != null) {\r\n            val lines = layout.lineCount\r\n            if (lines >= maxLines) {\r\n                ellipses = true\r\n            }\r\n        }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1074", "ground_truth": "\r\n        for (listener in ellipsesListeners) {\r\n            listener.ellipsisStateChanged(ellipses)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\EllipsisTextView.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport androidx.preference.PreferenceViewHolder\nimport androidx.preference.Preference\nimport android.widget.TextView\noverride fun onBindViewHolder(holder: PreferenceViewHolder) {\r\n        super.onBindViewHolder(holder)\r\n        val textView = holder.itemView.findViewById<TextView>(R.id.extra_label)\r", "choices": [{"text": "//        val preference = holder.itemView.findViewById<Preference>(R.id.extra_label)\r\n        textView.text = preference.extraText\r\n}\n"}], "metadata": {"task_id": "habitica-android/1075", "ground_truth": "        textView?.text = extraText\r\n        extraTextColor?.let {\r\n            textView?.setTextColor(it)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\ExtraLabelPreference.kt"}}
{"prompt": "\n import androidx.compose.ui.layout.MeasurePolicy\nimport androidx.compose.ui.layout.Layout\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun FlowLayout(\r\n    modifier: Modifier = Modifier,\r\n    spacing: Int = 0,\r\n    content: @Composable () -> Unit\r\n) {\r\n    val measurePolicy = flowLayoutMeasurePolicy(spacing)\r\n    Layout(\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1076", "ground_truth": "        measurePolicy = measurePolicy,\r\n        content = content,\r\n        modifier = modifier\r\n    )\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\FlowLayout.kt"}}
{"prompt": "\n import android.graphics.Color\nprivate static float[] ColorToHSV(int originalColor) {\r\n    float[] hsv = new float[3];\r", "choices": [{"text": "//    Color.colorToHSV(originalColor, hsv);\r\n    return hsv;\r\n}\r\nprivate static int HSVToColor(float[] hsv) {\r\n    return Color.HSVToColor(hsv);\r\n}\r\nprivate static int HSVToColor(float[] hsv, int alpha) {\r\n    return Color.HSVToColor(alpha, hsv);\r\n}\r\nprivate static int HSVToColor(float h, float s, float v) {\r\n    return Color.HSVToColor(h, s, v);\r\n"}], "metadata": {"task_id": "habitica-android/1077", "ground_truth": "    RGBToHSV(red(originalColor), green(originalColor), blue(originalColor), hsv);\r\n    return hsv;\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIcons.java"}}
{"prompt": " import android.graphics.Paint\nprivate static final RectF bezierRect = new RectF();\nprivate static final RectF bezier2Rect = new RectF();\nstatic PorterDuffXfermode blendModeSourceIn = new PorterDuffXfermode(PorterDuff.Mode.SRC_IN);\nPaintCodeShadow get(int color) {\r\n    this.color = color;\r\n    this.dx = (float) 0.0;\r\n    this.dy = (float) 1.0;\r\n    if (this.radius != (float) 1.0) {\r", "choices": [{"text": " import android.graphics.Paint\nprivate static final RectF bezierRect = new RectF();\nprivate static final RectF bezier2Rect = new RectF();\nstatic PorterDuffXfermode blendModeSourceIn = new PorterDuffXfermode(PorterDuff.Mode.SRC_IN);\nPaintCodeShadow get(int color) {\r\n    this.color = color;\r\n    this.dx = (float) 0.0;\r\n    this.dy = (float) 1.0;\r\n    if (this.radius!= (float) 1.0) {\r\n//        this.radius = (float) 1.0;\r\n    }\r\n    this.paint.setAntiAlias(true);\r\n    this.paint.setColor(this.color);\r\n    this.paint.setShadowLayer(this.radius, this.dx, this.dy, this.color);\r\n    return this;\r\n}\n"}], "metadata": {"task_id": "habitica-android/1078", "ground_truth": "        this.blurMaskFilter = null;\r\n        this.radius = (float) 1.0;\r\n    }\r\n    return this;\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaIcons.java"}}
{"prompt": "\n import com.google.android.material.snackbar.Snackbar\nfun setTitle(title: CharSequence?): HabiticaSnackbar {\r\n        binding.snackbarTitle.text = title\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "habitica-android/1132", "ground_truth": "        binding.snackbarTitle.visibility = if (title != null) View.VISIBLE else View.GONE\r\n        return this\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt"}}
{"prompt": " import com.google.android.material.snackbar.Snackbar\nval binding SnackbarViewBinding\nval MIN_LEVEL_FOR_SKILLS\nfun setText(text: CharSequence?): HabiticaSnackbar {\r\n        binding.snackbarText.text = text\r", "choices": [{"text": "}\r\nfun setAction(text: CharSequence?, listener: View.OnClickListener?) {\r\n        binding.snackbarAction.text = text\r\n        binding.snackbarAction.setOnClickListener(listener)\r\n}\r\nfun setAction(text: Int, listener: View.OnClickListener?) {\r\n        setAction(context.getString(text), listener)\r\n}\r\nfun show() {\r\n        val snackbar = Snackbar.make(binding.root, binding.root, Snackbar.LENGTH_INDEFINITE)\r\n        snackbar.setAction(binding.snackbarAction) { binding.snackbarAction.perform"}], "metadata": {"task_id": "habitica-android/1133", "ground_truth": "        binding.snackbarText.visibility = if (text != null) View.VISIBLE else View.GONE\r\n        return this\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt"}}
{"prompt": "\n import com.google.android.material.snackbar.Snackbar\nfun setTitleColor(color: Int): HabiticaSnackbar {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1134", "ground_truth": "        binding.snackbarTitle.setTextColor(color)\r\n        return this\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt"}}
{"prompt": "\n import com.google.android.material.snackbar.Snackbar\nfun setTextColor(color: Int): HabiticaSnackbar {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1135", "ground_truth": "        binding.snackbarText.setTextColor(color)\r\n        return this\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt"}}
{"prompt": "\n import com.google.android.material.snackbar.Snackbar\nimport android.view.View\nimport android.graphics.drawable.Drawable\nfun setLeftIcon(image: Drawable?): HabiticaSnackbar {\r\n        binding.leftImageView.setImageDrawable(image)\r", "choices": [{"text": "return this\r\n    }\r\nfun setRightIcon(image: Drawable?): HabiticaSnackbar {\r\n        binding.rightImageView.setImageDrawable(image)\r\nreturn this\r\n    }\r\nfun setLeftIcon(image: Int): HabiticaSnackbar {\r\n        binding.leftImageView.setImageResource(image)\r\nreturn this\r\n    }\r\nfun setRightIcon(image: Int): HabiticaSnackbar {\r\n        binding.rightImageView.setImageResource(image)\r\nreturn this\r\n    }\r\nfun setLeftIcon(image: Bitmap?): HabiticaSnackbar {\r\n        binding.leftImageView.setImageBitmap"}], "metadata": {"task_id": "habitica-android/1137", "ground_truth": "        binding.leftImageView.visibility = if (image != null) View.VISIBLE else View.GONE\r\n        return this\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt"}}
{"prompt": " import com.google.android.material.snackbar.Snackbar\nimport androidx.annotation.ColorInt\nval binding SnackbarViewBinding\nval MIN_LEVEL_FOR_SKILLS\nfun setBackgroundColor(@ColorInt color: Int): HabiticaSnackbar {\r", "choices": [{"text": "val snackbar = Snackbar.make(view, message, Snackbar.LENGTH_LONG)\r\nsnackbar.view.setBackgroundColor(color)\r\nreturn snackbar\r\n}\r\nfun setActionTextColor(@ColorInt color: Int): HabiticaSnackbar {\r\nval snackbar = Snackbar.make(view, message, Snackbar.LENGTH_LONG)\r\nsnackbar.view.setBackgroundColor(color)\r\nreturn snackbar\r\n}\r\nfun setActionTextColor(color: ColorStateList): HabiticaSnackbar {\r\nval snackbar = Snackbar."}], "metadata": {"task_id": "habitica-android/1138", "ground_truth": "        view.setBackgroundColor(color)\r\n        return this\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport com.google.android.material.snackbar.Snackbar\nimport android.view.View\nfun setBackgroundResource(resourceId: Int): HabiticaSnackbar {\r\n        binding.snackbarView.setBackgroundResource(resourceId)\r", "choices": [{"text": "}\r\nfun setBackgroundColor(color: Int): HabiticaSnackbar {\r\n        binding.snackbarView.setBackgroundColor(color)\r\n}\r\nfun setTextColor(color: Int): HabiticaSnackbar {\r\n        binding.snackbarView.setTextColor(color)\r\n}\r\nfun setActionTextColor(color: Int): HabiticaSnackbar {\r\n        binding.snackbarView.setActionTextColor(color)\r\n}\r\nfun setAction(text: String, listener: View.OnClickListener): HabiticaSnackbar {\r\n        binding.snackbarView.setAction(text, listener)\r\n"}], "metadata": {"task_id": "habitica-android/1139", "ground_truth": "        view.setBackgroundColor(ContextCompat.getColor(context, R.color.transparent))\r\n        return this\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt"}}
{"prompt": "\n import com.google.android.material.snackbar.Snackbar\nimport android.view.View\nprivate fun setSpecialView(specialView: View?): HabiticaSnackbar {\r\n        if (specialView != null) {\r\n            binding.contentContainer.addView(specialView)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1140", "ground_truth": "        }\r\n        return this\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt"}}
{"prompt": "\n import com.google.android.material.snackbar.Snackbar\nimport android.view.ViewGroup\nimport android.view.View\nfun showSnackbar(\r\n            container: ViewGroup,\r\n            content: CharSequence?,\r\n            displayType: SnackbarDisplayType,\r\n            isCelebratory: Boolean = false,\r\n            isSubscriberBenefit: Boolean = false,\r\n            duration: Int = Snackbar.LENGTH_LONG\r\n        ) {\r\n            showSnackbar(\r\n                container,\r\n                null,\r\n                null,\r\n                content,\r\n                null,\r\n                null,\r\n                0,\r\n                null,\r\n                displayType,\r", "choices": [{"text": "//                isCelebratory,\r\n//                isSubscriberBenefit,\r\n                duration\r\n            )\r\n        }\r\n\r\nfun showSnackbar(\r\n            container: ViewGroup,\r\n            title: CharSequence?,\r\n            content: CharSequence?,\r\n            content2: CharSequence?,\r\n            content3: CharSequence?,\r\n            content4: CharSequence?,\r\n            content5: CharSequence?,\r\n            content6: CharSequence?,\r\n            displayType: SnackbarDisplayType,\r\n            isCelebratory: Boolean = false,\r\n            isSubscriberBenefit: Boolean = false,\r\n            duration: Int = Snackbar.LENGTH_LONG\r\n        ) {\r\n            val snackbar = Snackbar.make(container"}], "metadata": {"task_id": "habitica-android/1144", "ground_truth": "                isCelebratory,\r\n                isSubscriberBenefit,\r\n                duration\r\n            )\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt"}}
{"prompt": "\n import com.google.android.material.snackbar.Snackbar\nimport android.view.ViewGroup\nimport android.view.View\nimport android.graphics.drawable.Drawable\nfun showSnackbar(\r\n            container: ViewGroup,\r\n            leftImage: Drawable,\r\n            title: CharSequence?,\r\n            content: CharSequence?,\r\n            displayType: SnackbarDisplayType,\r\n            isCelebratory: Boolean = false,\r\n            isSubscriberBenefit: Boolean = false,\r\n            duration: Int = Snackbar.LENGTH_LONG\r\n        ) {\r\n            showSnackbar(\r\n                container,\r\n                leftImage,\r\n                title,\r\n                content,\r\n                null,\r\n                null,\r\n                0,\r\n                null,\r\n                displayType,\r", "choices": [{"text": "isCelebratory,\r\nisSubscriberBenefit,\r\n                duration\r\n            )\r\n        }\r\n\r\nfun showSnackbar(\r\n            container: ViewGroup,\r\n            leftImage: Drawable,\r\n            title: CharSequence?,\r\n            content: CharSequence?,\r\n            actionText: CharSequence?,\r\n            actionListener: View.OnClickListener?,\r\n            actionTextColor: Int,\r\n            actionIcon: Drawable?,\r\n            displayType: SnackbarDisplayType,\r\n            isCelebratory: Boolean = false,\r\n            isSubscriberBenefit: Boolean = false,\r\n            duration: Int = Snackbar.LENGTH_LONG\r\n        ) {\r\n            val snackbar = Snackbar.make(container, \"\","}], "metadata": {"task_id": "habitica-android/1145", "ground_truth": "                isCelebratory,\r\n                isSubscriberBenefit,\r\n                duration\r\n            )\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt"}}
{"prompt": "\n import com.google.android.material.snackbar.Snackbar\nimport android.view.ViewGroup\nimport android.view.View\nimport android.graphics.drawable.Drawable\nfun showSnackbar(\r\n            container: ViewGroup,\r\n            title: CharSequence?,\r\n            content: CharSequence?,\r\n            rightIcon: Drawable,\r\n            rightTextColor: Int?,\r\n            rightText: String,\r\n            displayType: SnackbarDisplayType,\r\n            isCelebratory: Boolean = false,\r\n            isSubscriberBenefit: Boolean = false,\r\n            duration: Int = Snackbar.LENGTH_LONG\r\n        ) {\r\n            showSnackbar(\r\n                container,\r\n                null,\r\n                title,\r\n                content,\r\n                null,\r\n                rightIcon,\r\n                rightTextColor,\r\n                rightText,\r\n                displayType,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1146", "ground_truth": "                isCelebratory,\r\n                isSubscriberBenefit,\r\n                duration\r\n            )\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt"}}
{"prompt": "\n import com.google.android.material.snackbar.Snackbar\nimport android.view.ViewGroup\nimport android.view.View\nfun showSnackbar(\r\n            container: ViewGroup,\r\n            title: CharSequence?,\r\n            content: CharSequence?,\r\n            specialView: View?,\r\n            displayType: SnackbarDisplayType,\r\n            isCelebratory: Boolean = false,\r\n            isSubscriberBenefit: Boolean = false,\r\n            duration: Int = Snackbar.LENGTH_LONG\r\n        ) {\r\n            showSnackbar(\r\n                container,\r\n                null,\r\n                title,\r\n                content,\r\n                specialView,\r\n                null,\r\n                0,\r\n                null,\r\n                displayType,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1147", "ground_truth": "                isCelebratory,\r\n                isSubscriberBenefit,\r\n                duration\r\n            )\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nimport com.google.android.material.snackbar.Snackbar\nimport android.view.View\nimport android.graphics.drawable.Drawable\nfun showSnackbar(\r\n        leftImage: Drawable? = null,\r\n        title: CharSequence? = null,\r\n        content: CharSequence? = null,\r\n        specialView: View? = null,\r\n        rightIcon: Drawable? = null,\r\n        rightTextColor: Int? = null,\r\n        rightText: String? = null,\r\n        displayType: HabiticaSnackbar.SnackbarDisplayType = HabiticaSnackbar.SnackbarDisplayType.NORMAL,\r\n        isCelebratory: Boolean = false\r\n    ) {\r\n        HabiticaSnackbar.showSnackbar(\r\n            snackbarContainer(),\r\n            leftImage,\r\n            title,\r\n            content,\r\n            specialView,\r\n            rightIcon,\r\n            rightTextColor,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1148", "ground_truth": "            rightText,\r\n            displayType,\r\n            isCelebratory\r\n        )\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\HabiticaSnackbar.kt"}}
{"prompt": "\n override fun onDetachedFromWindow() {\r", "choices": [{"text": "super.onDetachedFromWindow()\r\nif (mHandler!= null) {\r\nmHandler.removeCallbacksAndMessages(null)\r\nmHandler = null\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/1151", "ground_truth": "        purchaseHandler.stopListening()\r\n        super.onDetachedFromWindow()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\insufficientCurrency\\InsufficientGemsDialog.kt"}}
{"prompt": "\n import android.view.MotionEvent\noverride fun onInterceptTouchEvent(ev: MotionEvent): Boolean {\r\n        return if (!isScrollable) {\r", "choices": [{"text": "//            super.onInterceptTouchEvent(ev)\r\n            false\r\n        } else {\r\n            super.onInterceptTouchEvent(ev)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/1156", "ground_truth": "            false\r\n        } else {\r\n            super.onInterceptTouchEvent(ev)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\login\\LockableScrollView.kt"}}
{"prompt": "\nvar viewWidth Int\nvar params\nval viewHeight Int\n override fun onLayout(changed: Boolean, l: Int, t: Int, r: Int, b: Int) {\r", "choices": [{"text": "super.onLayout(changed, l, t, r, b)\r\nviewWidth = r - l\r\nviewHeight = b - t\r\n}\r\noverride fun onDraw(canvas: Canvas) {\r\nsuper.onDraw(canvas)\r\nval paint = Paint()\r\npaint.color = Color.RED\r\npaint.style = Paint.Style.FILL\r\ncanvas.drawRect(0f, 0f, viewWidth.toFloat(), viewHeight.toFloat(), paint)\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/1159", "ground_truth": "        super.onLayout(changed, l, t, r, b)\r\n        updateStarLayoutParams()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\login\\LoginBackgroundView.kt"}}
{"prompt": " import android.view.View\nvar viewWidth Int\nvar params\nval viewHeight Int\nprivate fun removeStarViews() {\r\n        if ((starViews?.size ?: 0) > 0) {\r\n            starViews?.forEach { this.removeView(it) }\r", "choices": [{"text": " import android.view.View\nvar viewWidth Int\nvar params\nval viewHeight Int\nprivate fun removeStarViews() {\r\n        if ((starViews?.size?: 0) > 0) {\r\n            starViews?.forEach { this.removeView(it) }\r\n}\r\n}\r\nprivate fun addStarViews() {\r\n        removeStarViews()\r\n        val starWidth = (viewWidth / 5).toFloat()\r\n        val starHeight = (viewHeight / 5).toFloat()\r\n        val starMargin = (viewWidth / 10).toFloat()\r\n        for (i in 0 until 5) {\r\n            val starView = ImageView(context)\r\n            starView.setImageResource(R.drawable.ic_star)\r\n            starView.layoutParams = ViewGroup.LayoutParams(starWidth, starHeight)\r\n            starView.scaleType = ImageView.ScaleType.FIT"}], "metadata": {"task_id": "habitica-android/1161", "ground_truth": "            starViews?.clear()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\login\\LoginBackgroundView.kt"}}
{"prompt": "\n import android.view.View\nprivate fun generateStar(size: Int) {\r\n        val starView = StarView(context)\r\n        starView.setStarSize(size)\r\n        if (random.nextInt(10) > 2) {\r\n            starView.setBlinkDurations(listOf(blinkDuration, blinkDuration, blinkDuration))\r\n        }\r\n        starViews?.add(starView)\r\n        if (viewWidth > 0 && viewHeight > 0) {\r", "choices": [{"text": "//            starView.setStarPosition(random.nextInt(viewWidth), random.nextInt(viewHeight))\r\n            starView.setStarPosition(random.nextInt(viewWidth), random.nextInt(viewHeight))\r\n        }\r\n        starView.setStarColor(Color.WHITE)\r\n        starView.setStarAlpha(0.5f)\r\n        starView.setStarDuration(starDuration)\r\n        starView.setStarBlinkDuration(blinkDuration)\r\n        starView.setStarBlinkCount(blinkCount)\r\n        starView.setStarBlinkInterval(blinkInterval)\r\n        starView.set"}], "metadata": {"task_id": "habitica-android/1162", "ground_truth": "            this.addView(starView, 0, starParams)\r\n        } else {\r\n            this.addView(starView, 0)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\login\\LoginBackgroundView.kt"}}
{"prompt": "\n fun setBlinkDurations(blinkDurations: List<Int>) {\r", "choices": [{"text": "blinkDurations.forEachIndexed { index, duration ->\r\nsetBlinkDuration(index, duration)\r\n}\r\n}\r\nfun setBlinkDuration(index: Int, duration: Int) {\r\nif (index < 0 || index >= blinkDurations.size) {\r\nthrow IllegalArgumentException(\"Index out of bounds\")\r\n}\r\nblinkDurations[index] = duration\r\n}\r\nfun getBlinkDuration(index: Int): Int {\r\nif (index < 0 || index >= blinkDurations.size) {\r\nthrow IllegalArgumentException(\"Index"}], "metadata": {"task_id": "habitica-android/1165", "ground_truth": "        this.blinkDurations = blinkDurations\r\n        runBlink()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\login\\StarView.kt"}}
{"prompt": "\n fun setTitleWidth(width: Int) {\r\n        val layoutParams = binding.titleView.layoutParams as? LayoutParams\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1166", "ground_truth": "        layoutParams?.width = width\r\n        binding.titleView.layoutParams = layoutParams\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\navigation\\BottomNavigationSubmenuItem.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.views.PixelArtView\nimport com.habitrpg.common.habitica.extensions.loadImage\nimport androidx.compose.ui.viewinterop.AndroidView\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun PixelArtView(\r\n    imageName: String?,\r\n    modifier: Modifier = Modifier,\r\n    imageFormat: String? = null\r\n) {\r\n    AndroidView(\r\n        modifier = modifier, // Occupy the max size in the Compose UI tree\r\n        factory = { context ->\r\n            PixelArtView(context)\r\n        },\r\n        update = { view ->\r\n            if (imageName != null) {\r\n                view.loadImage(imageName, imageFormat)\r\n            } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1169", "ground_truth": "                view.bitmap = null\r\n            }\r\n        }\r\n    )\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\PixelArtView.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.views.PixelArtView\nimport androidx.compose.ui.viewinterop.AndroidView\nimport androidx.compose.ui.graphics.ImageBitmap\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun PixelArtView(\r\n    bitmap: ImageBitmap,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    AndroidView(\r\n        modifier = modifier, // Occupy the max size in the Compose UI tree\r\n        factory = { context ->\r\n            PixelArtView(context)\r\n        },\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1170", "ground_truth": "        update = { view ->\r\n            view.bitmap = bitmap.asAndroidBitmap()\r\n        }\r\n    )\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\PixelArtView.kt"}}
{"prompt": "\n import java.util.Date\nimport com.habitrpg.android.habitica.R\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nprivate fun buildString(\r\n    value: Int,\r\n    endDate: Date,\r\n    formatString: Int\r\n): String {\r\n    return stringResource(\r\n        formatString,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1172", "ground_truth": "        endDate.getShortRemainingString()\r\n    ).uppercase()\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\promo\\BirthdayMenuView.kt"}}
{"prompt": "\n import android.widget.ImageView\nimport android.view.View\nimport android.graphics.drawable.Drawable\nprivate fun setImage(view: ImageView, drawable: Drawable?) {\r\n        if (drawable != null) {\r\n            view.setImageDrawable(drawable)\r", "choices": [{"text": "\n import android.widget.ImageView\nimport android.view.View\nimport android.graphics.drawable.Drawable\nprivate fun setImage(view: ImageView, drawable: Drawable?) {\r\n        if (drawable!= null) {\r\n            view.setImageDrawable(drawable)\r\n}\r\n}\n"}], "metadata": {"task_id": "habitica-android/1174", "ground_truth": "            view.visibility = View.VISIBLE\r\n        } else {\r\n            view.visibility = View.GONE\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\promo\\PromoMenuView.kt"}}
{"prompt": " import android.widget.TextView\nimport android.view.View\nvar canClose Boolean\nvar binding PromoMenuBinding\nprivate fun setText(view: TextView, text: String?) {\r\n        if (text != null) {\r\n            view.text = text\r", "choices": [{"text": " import android.widget.TextView\nimport android.view.View\nvar canClose Boolean\nvar binding PromoMenuBinding\nprivate fun setText(view: TextView, text: String?) {\r\n        if (text!= null) {\r\n            view.text = text\r\r\n        }\r\n    }\n\nfun show(activity: Activity, promo: Promo) {\r\n        val view = View.inflate(activity, R.layout.promo_menu, null)\r\n        binding = PromoMenuBinding.bind(view)\r\n        setText(binding.promoTitle, promo.title)\r\n        setText(binding.promoDescription, promo.description)\r\n        setText(binding.promoPrice, promo.price)\r\n        setText(binding.promoDiscount, promo.discount)\r\n        setText(binding.promoDiscountPrice, promo.discountPrice)\r\n        setText("}], "metadata": {"task_id": "habitica-android/1175", "ground_truth": "            view.visibility = View.VISIBLE\r\n        } else {\r\n            view.visibility = View.GONE\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\promo\\PromoMenuView.kt"}}
{"prompt": "\n private fun checkGearClass() {\r\n        if (shopItem.purchaseType == \"gems\") {\r", "choices": [{"text": "//            if (shopItem.purchaseType == \"gems\") {\r\n                if (shopItem.purchaseType == \"gems\") {\r\n                    if (shopItem.purchaseType == \"gems\") {\r\n                        if (shopItem.purchaseType == \"gems\") {\r\n                            if (shopItem.purchaseType == \"gems\") {\r\n                                if (shopItem.purchaseType == \"gems\") {\r\n                                    if (shopItem.purchaseType == \"gems\") {\r\n                                        if (shopItem.purchaseType == \"gems\") {\r\n                                            if (shopItem.purchaseType == \"gems\") {\r\n                                                if (shopItem.purchaseType =="}], "metadata": {"task_id": "habitica-android/1178", "ground_truth": "            return\r\n        }\r\n\r\n        setLimitedTextView()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\shops\\PurchaseDialog.kt"}}
{"prompt": " import com.habitrpg.android.habitica.R\nvar purchaseQuantity\nvar purchaseCardAction\nval buyLabel TextView\noverride fun dismiss() {\r\n        userRepository.close()\r\n        inventoryRepository.close()\r", "choices": [{"text": "}\noverride fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)\r\n        purchaseQuantity = arguments.getInt(ARG_PURCHASE_QUANTITY)\r\n        purchaseCardAction = arguments.getString(ARG_PURCHASE_CARD_ACTION)\r\n        buyLabel = view!!.findViewById(R.id.buy_label)\r\n        buyLabel.text = getString(R.string.buy_label, purchaseQuantity)\r\n        val buyButton = view!!.findViewById<Button>(R.id.buy_button)\r\n        buyButton.setOnClickListener {\r\n            val intent = Intent(Intent."}], "metadata": {"task_id": "habitica-android/1179", "ground_truth": "        limitedTextViewJob?.cancel()\r\n        super.dismiss()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\shops\\PurchaseDialog.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.ui.views.dialogs.HabiticaAlertDialog\nimport com.habitrpg.android.habitica.R\nprivate fun displayNoRemainingConfirmationDialog() {\r\n        val alert = HabiticaAlertDialog(context)\r\n        alert.setTitle(R.string.excess_items)\r\n        alert.setMessage(context.getString(R.string.excessItemsNoneLeft, item.text, purchaseQuantity, item.text))\r\n        alert.addButton(context.getString(R.string.purchaseX, purchaseQuantity),\r\n            isPrimary = true,\r\n            isDestructive = false\r\n        ) { _, _ ->\r", "choices": [{"text": "//            purchaseItem(item, purchaseQuantity)\r\n        }\r\n        alert.show()\r\n    }\n"}], "metadata": {"task_id": "habitica-android/1181", "ground_truth": "            buyItem(purchaseQuantity)\r\n        }\r\n        alert.addCancelButton()\r\n        alert.show()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\shops\\PurchaseDialog.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.shops.ShopItem\noverride fun setItem(item: ShopItem) {\r", "choices": [{"text": "//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as"}], "metadata": {"task_id": "habitica-android/1182", "ground_truth": "        binding.titleTextView.text = item.text\r\n        binding.notesTextView.text = item.notes\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\shops\\PurchaseDialogBackgroundContent.kt"}}
{"prompt": "\n import java.util.EnumMap\nimport com.habitrpg.shared.habitica.models.Avatar\nimport com.habitrpg.common.habitica.views.AvatarView\nimport com.habitrpg.android.habitica.models.shops.ShopItem\nfun setAvatarWithBackgroundPreview(avatar: Avatar, item: ShopItem) {\r\n        val layerMap = EnumMap<AvatarView.LayerType, String>(AvatarView.LayerType::class.java)\r\n        layerMap[AvatarView.LayerType.BACKGROUND] = item.imageName?.removePrefix(\"icon_\")\r", "choices": [{"text": "//        layerMap[AvatarView.LayerType.BACKGROUND] = \"icon_1\"\r\n        layerMap[AvatarView.LayerType.HEAD] = item.imageName?.removePrefix(\"icon_\")\r\n//        layerMap[AvatarView.LayerType.HEAD] = \"icon_1\"\r\n        layerMap[AvatarView.LayerType.EYES] = item.imageName?.removePrefix(\"icon_\")\r\n//        layerMap[AvatarView.LayerType.EYES] = \"icon_1\"\r\n        layerMap[AvatarView.LayerType.MOUTH] = item."}], "metadata": {"task_id": "habitica-android/1183", "ground_truth": "\r\n        binding.avatarView.setAvatar(avatar, layerMap)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\shops\\PurchaseDialogBackgroundContent.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.extensions.loadImage\nimport com.habitrpg.common.habitica.extensions.dpToPx\nimport com.habitrpg.android.habitica.models.shops.ShopItem\nopen fun setItem(item: ShopItem) {\r\n        if (item.path?.contains(\"timeTravelBackgrounds\") == true) {\r\n            imageView.loadImage(item.imageName?.replace(\"icon_\", \"\"))\r\n            val params = imageView.layoutParams\r\n            params.height = 147.dpToPx(context)\r\n            params.width = 140.dpToPx(context)\r\n            imageView.layoutParams = params\r", "choices": [{"text": "//            imageView.scaleType = ImageView.ScaleType.CENTER_CROP\r\n        } else {\r\n            imageView.loadImage(item.imageName)\r\n            val params = imageView.layoutParams\r\n            params.height = 147.dpToPx(context)\r\n            params.width = 140.dpToPx(context)\r\n            imageView.layoutParams = params\r\n        }\r\n    }<file_sep>/app/src/main/java/com/habitrpg/android/habitica/models/shops/ShopItem.kt\npackage com.habitrpg.android.habitica.models.shops"}], "metadata": {"task_id": "habitica-android/1184", "ground_truth": "        } else {\r\n            imageView.loadImage(item.imageName)\r\n        }\r\n        titleTextView.text = item.text\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\shops\\PurchaseDialogContent.kt"}}
{"prompt": " import com.habitrpg.android.habitica.models.shops.ShopItem\nval binding\nval imageView PixelArtView\nval titleTextView TextView\noverride fun setItem(item: ShopItem) {\r\n        super.setItem(item)\r\n        if (item.text?.isNotBlank() != true) {\r", "choices": [{"text": " import com.habitrpg.android.habitica.models.shops.ShopItem\nval binding\nval imageView PixelArtView\nval titleTextView TextView\noverride fun setItem(item: ShopItem) {\r\n        super.setItem(item)\r\n        if (item.text?.isNotBlank()!= true) {\r\nbinding.titleTextView.visibility = View.GONE\r\n        } else {\r\nbinding.titleTextView.visibility = View.VISIBLE\r\n        }\r\n        binding.titleTextView.text = item.text\r\n        binding.imageView.setImageResource(item.image)\r\n        binding.imageView.setOnClickListener {\r\n            if (item.action!= null) {\r\n                item.action.invoke()\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/1186", "ground_truth": "            titleTextView.text = buildCustomizationTitle(item)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\shops\\PurchaseDialogCustomizationContent.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.shops.ShopItem\noverride fun setItem(item: ShopItem) {\r", "choices": [{"text": "//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as"}], "metadata": {"task_id": "habitica-android/1187", "ground_truth": "        super.setItem(item)\r\n        binding.notesTextView.text = item.notes\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\shops\\PurchaseDialogGearContent.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.shops.ShopItem\noverride fun setItem(item: ShopItem) {\r", "choices": [{"text": "//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as ShopItem\n//    val item = item as"}], "metadata": {"task_id": "habitica-android/1189", "ground_truth": "        super.setItem(item)\r\n        binding.notesTextView.text = item.notes\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\shops\\PurchaseDialogGemsContent.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.shops.ShopItem\noverride fun setItem(item: ShopItem) {\r\n        super.setItem(item)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/1190", "ground_truth": "        binding.notesTextView.text = item.notes\r\n        binding.stepperView.iconDrawable = null\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\shops\\PurchaseDialogItemContent.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.inventory.Animal\nfun isAnimalFlying(animal: Animal): Boolean {\r\n    if (listOf(\r\n            \"FlyingPig\",\r\n            \"Bee\"\r\n        ).contains(animal.animal)\r\n    ) return true\r\n    return listOf(\r\n        \"Ghost\",\r\n        \"Cupid\",\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1196", "ground_truth": "        \"Fairy\",\r\n        \"SolarSystem\",\r\n        \"Vampire\"\r\n    ).contains(animal.color)\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\stable\\MountBottomSheet.kt"}}
{"prompt": " import com.habitrpg.android.habitica.models.inventory.Mount\nval hasLoadedImages Boolean\nval bodyView PixelArtView\nval headView PixelArtView\nfun setMount(key: String) {\r", "choices": [{"text": "}\r\nfun setMount(mount: Mount) {\r\n}\r\nfun setMount(mount: Mount?, key: String) {\r\n}\r\nfun setMount(mount: Mount?, key: String, force: Boolean) {\r\n}\r\nfun setMount(mount: Mount?, key: String, force: Boolean, forceLoad: Boolean) {\r\n}\r\nfun setMount(mount: Mount?, key: String, force: Boolean, forceLoad: Boolean, forceLoadImages: Boolean) {\r\n}\r\nfun setMount(mount: Mount?, key:"}], "metadata": {"task_id": "habitica-android/1197", "ground_truth": "        bodyView.loadImage(\"Mount_Body_$key\")\r\n        headView.loadImage(\"Mount_Head_$key\")\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\stable\\MountView.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.inventory.Mount\nimport androidx.compose.ui.viewinterop.AndroidView\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\n\r\n@Composable\r\nfun MountView(mountKey: String, modifier: Modifier = Modifier) {\r\n    AndroidView(\r\n        modifier = modifier,\r\n        factory = { context ->\r\n            MountView(context)\r\n        },\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1198", "ground_truth": "        update = { view ->\r\n            view.setMount(mountKey)\r\n        }\r\n    )\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\stable\\MountView.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.inventory.Pet\nfun isAnimalFlying(pet: Pet): Boolean {\r\n    if (listOf(\r\n            \"FlyingPig\",\r\n            \"Bee\"\r\n        ).contains(pet.animal)\r\n    ) return true\r\n    return listOf(\r\n        \"Ghost\",\r\n        \"Cupid\",\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1199", "ground_truth": "        \"Fairy\",\r\n        \"SolarSystem\",\r\n        \"Vampire\"\r\n    ).contains(pet.color)\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\stable\\PetBottomSheet.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.R\nimport androidx.lifecycle.lifecycleScope\nprivate fun saveChanges() {\r\n        getButton(BUTTON_POSITIVE).isEnabled = false\r\n        lifecycleScope.launchCatching {\r\n            userRepository.bulkAllocatePoints(\r\n                binding.strengthSliderView.currentValue,\r\n                binding.intelligenceSliderView.currentValue,\r\n                binding.constitutionSliderView.currentValue,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1200", "ground_truth": "                binding.perceptionSliderView.currentValue\r\n            )\r\n            dismiss()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\stats\\BulkAllocateStatsDialog.kt"}}
{"prompt": "\n private fun getSliderWithHigherValue(\r\n        firstSlider: StatsSliderView?,\r\n        secondSlider: StatsSliderView?\r\n    ): StatsSliderView? {\r\n        return if ((firstSlider?.currentValue ?: 0) > (secondSlider?.currentValue ?: 0)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1201", "ground_truth": "            firstSlider\r\n        } else {\r\n            secondSlider\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\stats\\BulkAllocateStatsDialog.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.ChecklistItem\nimport androidx.core.view.children\nimport android.view.View\nprivate fun shouldBecomeNewAddButton(view: ChecklistItemFormView): Boolean {\r\n        if (childCount > 2 && view.item.text?.isEmpty() != false && children.indexOf(view) == childCount - 2) {\r\n            val lastView = (getChildAt(childCount - 1) as? ChecklistItemFormView)\r\n            if (lastView != null && lastView.item.text?.isEmpty() != false) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1207", "ground_truth": "                return true\r\n            }\r\n        }\r\n        return false\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\form\\ChecklistContainer.kt"}}
{"prompt": "\n import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nprivate fun TaskFormSelectorPreview() {\r\n    val selected = remember { mutableStateOf(\"second\") }\r\n    TaskFormSelector(\r\n        selected.value,\r\n        listOf(\r\n            LabeledValue(\"First\", \"first\"),\r\n            LabeledValue(\"Second\", \"second\"),\r\n            LabeledValue(\"Third\", \"third\"),\r\n            LabeledValue(\"Fourth\", \"fourth\"),\r\n            LabeledValue(\"Fifth\", \"Fifth\"),\r\n            LabeledValue(\"Sixth\", \"sixth\")\r", "choices": [{"text": "       )\r\n    )\r\n}\r\n<file_sep>/app/src/main/java/com/example/taskmanager/ui/theme/Color.kt\npackage com.example.taskmanager.ui.theme\n\nimport androidx.compose.ui.graphics.Color\n\nval Purple200 = Color(0xFFBB86FC)\nval Purple500 = Color(0xFF6200EE)\nval Purple700 = Color(0xFF3700B3)\nval Teal200 = Color(0xFF03DAC5)\n"}], "metadata": {"task_id": "habitica-android/1210", "ground_truth": "        ),\r\n        { selected.value = it },\r\n        Modifier.width(300.dp)\r\n    )\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\form\\TaskFormSelector.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.R\nprivate fun isWeekdayActive(weekday: Int): Boolean {\r\n        return when (weekday) {\r\n            2 -> weeklyRepeat.m\r\n            3 -> weeklyRepeat.t\r\n            4 -> weeklyRepeat.w\r\n            5 -> weeklyRepeat.th\r\n            6 -> weeklyRepeat.f\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1214", "ground_truth": "            7 -> weeklyRepeat.s\r\n            1 -> weeklyRepeat.su\r\n            else -> false\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\form\\TaskSchedulingControls.kt"}}
{"prompt": " import com.habitrpg.android.habitica.models.Tag\nval createdTags\nval editedTags\nvar isEditingTags Boolean\nprivate fun setTags(tags: List<Tag>) {\r", "choices": [{"text": "if (isEditingTags) {\r\neditedTags = tags\r\n} else {\r\ncreatedTags = tags\r\n}\r\n}\n"}], "metadata": {"task_id": "habitica-android/1220", "ground_truth": "        this.tags = repository.getUnmanagedCopy(tags).toMutableList()\r\n        createTagViews()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\TaskFilterDialog.kt"}}
{"prompt": "\nvar tags\nval binding\nvar viewModel TasksViewModel\n private fun indexForId(tagId: String): Int {\r\n        for (index in tags.indices) {\r\n            if (tagId == tags[index].id) {\r", "choices": [{"text": "return index\r\n            }\r\n        }\r\n        return -1\r\n    }\n"}], "metadata": {"task_id": "habitica-android/1224", "ground_truth": "                return index\r\n            }\r\n        }\r\n        return -1\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\TaskFilterDialog.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.Tag\nprivate fun editButtonClicked() {\r\n        isEditingTags = !isEditingTags\r\n        if (isEditingTags) {\r", "choices": [{"text": "\n import com.habitrpg.android.habitica.models.Tag\nprivate fun editButtonClicked() {\r\n        isEditingTags =!isEditingTags\r\n        if (isEditingTags) {\r\n//            editButton.setImageResource(R.drawable.ic_done_black_24dp)\r\n            editButton.setImageResource(R.drawable.ic_done_black_24dp)\r\n            editButton.setColorFilter(ContextCompat.getColor(this, R.color.colorPrimary))\r\n            editButton.setBackgroundColor(ContextCompat.getColor(this, R.color.colorPrimary))\r\n            editButton.setTextColor(ContextCompat.getColor(this, R.color.colorPrimary))\r\n            editButton.text = getString(R.string.done)\r\n            editButton.setOnClickListener {\r\n                edit"}], "metadata": {"task_id": "habitica-android/1225", "ground_truth": "            startEditing()\r\n        } else {\r\n            stopEditing()\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\TaskFilterDialog.kt"}}
{"prompt": "\n import com.habitrpg.common.habitica.extensions.getThemeColor\nimport com.habitrpg.android.habitica.R\nimport android.graphics.Color\nprivate fun filtersChanged() {\r\n        binding.clearButton.isEnabled = viewModel.isFiltering(taskType)\r\n        binding.clearButton.setTextColor(\r\n            if (binding.clearButton.isEnabled) {\r\n                context.getThemeColor(R.attr.colorAccent)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1226", "ground_truth": "            } else {\r\n                ContextCompat.getColor(context, R.color.text_dimmed)\r\n            }\r\n        )\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\tasks\\TaskFilterDialog.kt"}}
{"prompt": "\nvar job Job?\nvar index Int\nvar visibleSpan Any?\n override fun onDetachedFromWindow() {\r", "choices": [{"text": "super.onDetachedFromWindow()\r\njob?.cancel()\r\njob = null\r\n}\r\noverride fun onAttachedToWindow() {\r\nsuper.onAttachedToWindow()\r\njob = Job()\r\nval scope = CoroutineScope(Dispatchers.Main + job!!)\r\nscope.launch {\r\nwhile (true) {\r\nval span = visibleSpan\r\nif (span!= null) {\r\nval spanIndex = span.index\r\nif (spanIndex!= index) {\r\nindex = spanIndex\r\nval span = visibleSpan\r\nif"}], "metadata": {"task_id": "habitica-android/1227", "ground_truth": "        job?.cancel()\r\n        super.onDetachedFromWindow()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\Typewriter.kt"}}
{"prompt": "\n override fun onAttachedToWindow() {\r", "choices": [{"text": "super.onAttachedToWindow()\r\nwindow.addFlags(WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS)\r\n}\r\noverride fun onDetachedFromWindow() {\r\nsuper.onDetachedFromWindow()\r\nwindow.clearFlags(WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS)\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/1230", "ground_truth": "        super.onAttachedToWindow()\r\n        displayedDialog = WeakReference(this)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\yesterdailies\\YesterdailyDialog.kt"}}
{"prompt": "\n override fun onDetachedFromWindow() {\r", "choices": [{"text": "super.onDetachedFromWindow()\r\nif (mHandler!= null) {\r\nmHandler.removeCallbacksAndMessages(null)\r\nmHandler = null\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/1231", "ground_truth": "        super.onDetachedFromWindow()\r\n        displayedDialog = null\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\yesterdailies\\YesterdailyDialog.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.habitrpg.common.habitica.helpers.ExceptionHandler\nimport com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.models.tasks.ChecklistItem\nimport androidx.lifecycle.lifecycleScope\nprivate fun scoreChecklistItem(\r\n        task: Task,\r\n        item: ChecklistItem\r\n    ) {\r\n        lifecycleScope.launch(ExceptionHandler.coroutine()) {\r", "choices": [{"text": "//            val score = task.scoreChecklistItem(item)\r\n//            task.score = score\r\n//            task.save()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "habitica-android/1233", "ground_truth": "            taskRepository.scoreChecklistItem(task.id ?: \"\", item.id ?: \"\")\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\yesterdailies\\YesterdailyDialog.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.Task\nimport com.habitrpg.android.habitica.data.UserRepository\nimport com.habitrpg.android.habitica.data.TaskRepository\nimport com.habitrpg.android.habitica.R\nimport android.app.Activity\nprivate fun showDialog(\r\n            activity: Activity,\r\n            userRepository: UserRepository,\r\n            taskRepository: TaskRepository,\r\n            tasks: List<Task>\r\n        ): YesterdailyDialog {\r\n            val dialog = YesterdailyDialog(activity, userRepository, taskRepository, tasks)\r\n            dialog.setCancelable(false)\r\n            dialog.setCanceledOnTouchOutside(false)\r", "choices": [{"text": "//            dialog.show()\r\n            return dialog\r\n        }\n"}], "metadata": {"task_id": "habitica-android/1234", "ground_truth": "            if (!activity.isFinishing) {\r\n                dialog.enqueue()\r\n            }\r\n            return dialog\r\n        }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\ui\\views\\yesterdailies\\YesterdailyDialog.kt"}}
{"prompt": "\n import java.io.IOException\nimport com.google.gson.stream.JsonWriter\n @Throws(IOException::class)\r\n    override fun write(out: JsonWriter, value: Boolean?) {\r\n        if (value == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1235", "ground_truth": "            out.nullValue()\r\n        } else {\r\n            out.value(value)\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\BooleanAsIntAdapter.kt"}}
{"prompt": "\n import java.lang.reflect.Type\nimport com.google.gson.JsonObject\nimport com.google.gson.JsonDeserializationContext\nprivate fun getTaskArrayAsString(\r\n        context: JsonDeserializationContext,\r\n        tasksOrderObj: JsonObject,\r\n        taskType: String\r\n    ): String {\r\n        if (tasksOrderObj.has(taskType)) {\r\n            val jsonElement = tasksOrderObj.get(taskType)\r\n\r\n            val taskArray = context.deserialize<Array<String>>(jsonElement, Array<String>::class.java)\r\n\r", "choices": [{"text": "             return taskArray.joinToString(separator = \",\")\r\n        }\r\n        return \"\"\r\n    }\n"}], "metadata": {"task_id": "habitica-android/1237", "ground_truth": "            return TextUtils.join(\",\", taskArray)\r\n        }\r\n\r\n        return \"\"\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\ChallengeDeserializer.kt"}}
{"prompt": "\n private fun getMonthName(month: Int): String {\r", "choices": [{"text": "return when (month) {\r\n1 -> \"January\"\r\n2 -> \"February\"\r\n3 -> \"March\"\r\n4 -> \"April\"\r\n5 -> \"May\"\r\n6 -> \"June\"\r\n7 -> \"July\"\r\n8 -> \"August\"\r\n9 -> \"September\"\r\n10 -> \"October\"\r\n11 -> \"November\"\r\n12 -> \"December\"\r\nelse -> \"Invalid month\"\r\n}\r\n}\r\n }\r\n}\r\n"}], "metadata": {"task_id": "habitica-android/1238", "ground_truth": "        calendar.set(Calendar.MONTH, month)\r\n        return formatter.format(calendar.time).uppercase()\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\CustomizationDeserializer.kt"}}
{"prompt": "\n import java.util.Locale\nimport java.util.Date\nimport java.text.SimpleDateFormat\nimport java.text.DateFormat\nprivate fun addFormat(s: String) {\r\n        val dateFormat = SimpleDateFormat(s, Locale.US)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "habitica-android/1239", "ground_truth": "        dateFormat.timeZone = TimeZone.getTimeZone(\"UTC\")\r\n        dateFormats.add(dateFormat)\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\DateDeserializer.kt"}}
{"prompt": "\n import java.util.Date\nimport java.lang.reflect.Type\nimport com.google.gson.JsonSerializationContext\nimport com.google.gson.JsonElement\noverride fun serialize(src: Date?, typeOfSrc: Type, context: JsonSerializationContext): JsonElement {\r\n        return if (src == null) {\r", "choices": [{"text": "JsonNull.INSTANCE\r\n} else {\r\nJsonPrimitive(src.time)\r\n}\r\n}\r\n}\n"}], "metadata": {"task_id": "habitica-android/1240", "ground_truth": "            JsonPrimitive(\"\")\r\n        } else {\r\n            JsonPrimitive(this.dateFormats[0].format(src))\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\DateDeserializer.kt"}}
{"prompt": "\n import java.lang.reflect.Type\nimport com.habitrpg.shared.habitica.models.responses.FeedResponse\nimport com.google.gson.JsonParseException\nimport com.google.gson.JsonElement\nimport com.google.gson.JsonDeserializationContext\n @Throws(JsonParseException::class)\r\n    override fun deserialize(json: JsonElement, typeOfT: Type, context: JsonDeserializationContext): FeedResponse {\r\n        val response = FeedResponse()\r", "choices": [{"text": "//        val jsonArray = json.asJsonArray\r\n//        for (i in 0 until jsonArray.size()) {\r\n//            val jsonElement = jsonArray.get(i)\r\n//            val feed = context.deserialize<Feed>(jsonElement, Feed::class.java)\r\n//            response.feed.add(feed)\r\n//        }\r\n        return response\r\n    }\r\n}\n"}], "metadata": {"task_id": "habitica-android/1241", "ground_truth": "        response.value = json.asInt\r\n        return response\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\FeedResponseDeserializer.kt"}}
{"prompt": "\n import java.lang.reflect.Type\nimport io.realm.RealmList\nimport com.habitrpg.android.habitica.models.user.OwnedItem\nimport com.google.gson.JsonElement\nimport com.google.gson.JsonDeserializationContext\noverride fun deserialize(\r\n        json: JsonElement?,\r\n        typeOfT: Type?,\r\n        context: JsonDeserializationContext?\r\n    ): List<OwnedItem> {\r\n        val ownedItems = RealmList<OwnedItem>()\r\n        val entrySet = json?.asJsonObject?.entrySet()\r\n        if (entrySet != null) {\r\n            for (entry in entrySet) {\r\n                if (entry.value.isJsonPrimitive) {\r\n                    val item = OwnedItem()\r\n                    item.key = entry.key\r\n                    item.numberOwned = entry.value.asInt\r\n                    ownedItems.add(item)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1243", "ground_truth": "                }\r\n            }\r\n        }\r\n        return ownedItems\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\OwnedItemListDeserializer.kt"}}
{"prompt": "\n import java.lang.reflect.Type\nimport io.realm.RealmList\nimport com.habitrpg.android.habitica.models.user.OwnedPet\nimport com.google.gson.JsonElement\nimport com.google.gson.JsonDeserializationContext\noverride fun deserialize(\r\n        json: JsonElement?,\r\n        typeOfT: Type?,\r\n        context: JsonDeserializationContext?\r\n    ): List<OwnedPet> {\r\n        val ownedItems = RealmList<OwnedPet>()\r\n        val entrySet = json?.asJsonObject?.entrySet()\r\n        if (entrySet != null) {\r\n            for (entry in entrySet) {\r\n                val item = OwnedPet()\r\n                item.key = entry.key\r\n                item.trained = entry.value.asInt\r", "choices": [{"text": "\n import java.lang.reflect.Type\nimport io.realm.RealmList\nimport com.habitrpg.android.habitica.models.user.OwnedPet\nimport com.google.gson.JsonElement\nimport com.google.gson.JsonDeserializationContext\noverride fun deserialize(\r\n        json: JsonElement?,\r\n        typeOfT: Type?,\r\n        context: JsonDeserializationContext?\r\n    ): List<OwnedPet> {\r\n        val ownedItems = RealmList<OwnedPet>()\r\n        val entrySet = json?.asJsonObject?.entrySet()\r\n        if (entrySet!= null) {\r\n            for (entry in entrySet) {\r\n                val item = OwnedPet()\r\n                item.key = entry.key\r\n                item.trained = entry.value.asInt\r\n//                item.owned = entry.value.asInt\r\n                ownedItems.add(item)\r\n            }\r\n        }\r\n        return ownedItems\r\n    }\r\n}<file_sep>/app/src/main/java/com/habitrpg/android/habitica/models/user/OwnedPet.kt\npackage com.habitrpg.android.habitica.models.user\n\nimport com.google.gson.annotations.SerializedName\nimport io.realm.RealmObject\nimport io.realm.annotations.PrimaryKey\nimport java.util.*\n\nopen class OwnedPet : RealmObject() {\n    @"}], "metadata": {"task_id": "habitica-android/1244", "ground_truth": "                ownedItems.add(item)\r\n            }\r\n        }\r\n        return ownedItems\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\OwnedPetListDeserializer.kt"}}
{"prompt": "\n import java.lang.reflect.Type\nimport io.realm.RealmList\nimport com.habitrpg.android.habitica.models.inventory.QuestCollect\nimport com.google.gson.JsonParseException\nimport com.google.gson.JsonElement\nimport com.google.gson.JsonDeserializationContext\n @Throws(JsonParseException::class)\r\n    override fun deserialize(json: JsonElement, typeOfT: Type, context: JsonDeserializationContext): RealmList<QuestCollect> {\r\n        val items = RealmList<QuestCollect>()\r\n\r\n        for ((key, value) in json.asJsonObject.entrySet()) {\r\n            val questCollect = QuestCollect()\r\n            questCollect.key = key\r\n            val jsonObject = value.asJsonObject\r\n            questCollect.count = jsonObject.get(\"count\").asInt\r\n            questCollect.text = jsonObject.get(\"text\").asString\r", "choices": [{"text": "//            questCollect.icon = jsonObject.get(\"icon\").asString\r\n            questCollect.icon = \"\"\r\n            questCollect.name = jsonObject.get(\"name\").asString\r\n            questCollect.type = jsonObject.get(\"type\").asString\r\n            questCollect.value = jsonObject.get(\"value\").asString\r\n            items.add(questCollect)\r\n        }\r\n\r\n        return items\r\n    }\r\n}\n<file_sep>/app/src/main/java/com/habitrpg/android/habitica/models/inventory/QuestCollect.kt\npackage com.habitrpg.android.habitica.models.inventory\n\nimport"}], "metadata": {"task_id": "habitica-android/1246", "ground_truth": "            items.add(questCollect)\r\n        }\r\n\r\n        return items\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\QuestCollectDeserializer.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.Tag\nprivate fun alreadyContainsTag(list: List<Tag>, idToCheck: String): Boolean {\r\n        for (t in list) {\r\n            if (t.id == idToCheck) {\r\n                return true\r", "choices": [{"text": "\n            }\r\n        }\r\n        return false\r\n    }\n"}], "metadata": {"task_id": "habitica-android/1247", "ground_truth": "            }\r\n        }\r\n\r\n        return false\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\TaskListDeserializer.kt"}}
{"prompt": "\n import com.google.gson.JsonArray\nprivate fun getIntListFromJsonArray(jsonArray: JsonArray): List<Int> {\r\n        val intList = ArrayList<Int>()\r\n\r\n        for (i in 0 until jsonArray.size()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1248", "ground_truth": "            intList.add(jsonArray.get(i).asInt)\r\n        }\r\n\r\n        return intList\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\TaskSerializer.kt"}}
{"prompt": "\n import com.google.gson.JsonObject\nimport com.google.gson.JsonElement\nprivate fun JsonObject.safeGet(key: String): JsonElement? {\r\n    if (has(\"streak\") && !get(key).isJsonNull) {\r\n        return get(key)\r", "choices": [{"text": "\n import com.google.gson.JsonObject\nimport com.google.gson.JsonElement\nprivate fun JsonObject.safeGet(key: String): JsonElement? {\r\n    if (has(\"streak\") &&!get(key).isJsonNull) {\r\n        return get(key)\r\n}\r\nreturn null\r\n}\n"}], "metadata": {"task_id": "habitica-android/1252", "ground_truth": "    }\r\n    return null\r\n}", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\TaskSerializer.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.Tag\nprivate fun alreadyContainsTag(list: List<Tag>, idToCheck: String): Boolean {\r\n        for (t in list) {\r\n            if (t.id == idToCheck) {\r\n                return true\r", "choices": [{"text": "\n            }\r\n        }\r\n        return false\r\n    }\n"}], "metadata": {"task_id": "habitica-android/1253", "ground_truth": "            }\r\n        }\r\n\r\n        return false\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\TaskTagDeserializer.kt"}}
{"prompt": "\n import java.lang.reflect.Type\nimport io.realm.RealmList\nimport com.habitrpg.android.habitica.models.TutorialStep\nimport com.google.gson.JsonParseException\nimport com.google.gson.JsonElement\nimport com.google.gson.JsonDeserializationContext\n @Throws(JsonParseException::class)\r\n    override fun deserialize(json: JsonElement, typeOfT: Type, context: JsonDeserializationContext): List<TutorialStep> {\r\n        val steps = RealmList<TutorialStep>()\r\n        for (group in listOf(\"common\", \"android\")) {\r\n            if (json.asJsonObject.has(group)) {\r\n                for (entry in json.asJsonObject.get(group).asJsonObject.entrySet()) {\r\n                    steps.add(parseStep(group, entry))\r\n                }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1254", "ground_truth": "            }\r\n        }\r\n\r\n        return steps\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\utils\\TutorialStepListDeserializer.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.MainScope\nimport com.habitrpg.common.habitica.views.AvatarView\nimport com.habitrpg.common.habitica.helpers.launchCatching\nimport com.habitrpg.android.habitica.models.user.User\nimport com.habitrpg.android.habitica.R\nimport android.view.View\nimport android.content.Context\noverride fun onEnabled(context: Context) {\r\n        super.onEnabled(context)\r\n        avatarView = AvatarView(\r\n            context.applicationContext,\r\n            showBackground = true,\r\n            showMount = true,\r\n            showPet = true\r\n        )\r\n\r\n        MainScope().launchCatching {\r\n            userRepository.getUser().collect {\r", "choices": [{"text": "//                avatarView.setMount(it.mount)\r\n//                avatarView.setPet(it.pet)\r\n                avatarView.setAvatar(it.avatar)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onDisabled() {\r\n        super.onDisabled()\r\n        avatarView.setMount(null)\r\n        avatarView.setPet(null)\r\n        avatarView.setAvatar(null)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        avatarView.layoutParams = ViewGroup.LayoutParams(\r\n            ViewGroup.LayoutParams"}], "metadata": {"task_id": "habitica-android/1257", "ground_truth": "                user = it\r\n                updateData()\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\widget\\AvatarStatsWidgetProvider.kt"}}
{"prompt": "\nvar userRepository UserRepository\nvar context Context?\n private fun getCellsForSize(size: Int): Int {\r\n        var n = 2\r", "choices": [{"text": "while (n < size) {\r\n            n *= 2\r\n        }\r\n        return n\r\n    }\n\n"}], "metadata": {"task_id": "habitica-android/1258", "ground_truth": "        while (70 * n - 30 < size) {\r\n            ++n\r\n        }\r\n        return n - 1\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\widget\\BaseWidgetProvider.kt"}}
{"prompt": "\n import android.widget.RemoteViews\nimport android.os.Bundle\nimport android.content.Context\nimport android.appwidget.AppWidgetManager\noverride fun onAppWidgetOptionsChanged(\r\n        context: Context,\r\n        appWidgetManager: AppWidgetManager,\r\n        appWidgetId: Int,\r\n        newOptions: Bundle\r\n    ) {\r\n        this.context = context\r\n        val options = appWidgetManager.getAppWidgetOptions(appWidgetId)\r\n\r\n        appWidgetManager.partiallyUpdateAppWidget(\r\n            appWidgetId,\r\n            sizeRemoteViews(context, options, appWidgetId)\r\n        )\r\n\r\n        super.onAppWidgetOptionsChanged(\r\n            context,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1259", "ground_truth": "            appWidgetManager,\r\n            appWidgetId,\r\n            newOptions\r\n        )\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\widget\\BaseWidgetProvider.kt"}}
{"prompt": "\n import com.habitrpg.android.habitica.models.tasks.Task\nprivate fun makeTaskMapping() {\r\n        this.taskMapping = HashMap()\r\n        for (widgetId in allWidgetIds!!) {\r\n            val taskId = getTaskId(widgetId)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1263", "ground_truth": "            if (taskId != \"\") {\r\n                this.taskMapping[taskId] = widgetId\r\n            }\r\n        }\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\widget\\HabitButtonWidgetService.kt"}}
{"prompt": "\n override fun onDataSetChanged() {\r\n        if (this.reloadData) {\r\n            this.loadData()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "habitica-android/1264", "ground_truth": "        }\r\n        this.reloadData = true\r\n    }", "fpath": "habitica-android\\Habitica\\src\\main\\java\\com\\habitrpg\\android\\habitica\\widget\\TaskListFactory.kt"}}
{"prompt": "\n import android.content.res.Resources\npublic static float dp2px(Resources resources, float dp) {\r", "choices": [{"text": "return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, resources.getDisplayMetrics());\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/0", "ground_truth": "    final float scale = resources.getDisplayMetrics().density;\r\n    return dp * scale + 0.5f;\r\n}", "fpath": "RedReader\\src\\main\\java\\com\\github\\lzyzsd\\circleprogress\\DonutProgress.java"}}
{"prompt": "\n public void setIndeterminate(boolean value) {\r", "choices": [{"text": "-    this.indeterminate = value;\r\n+    this.indeterminate = value; \r\n+    this.invalidate();\r\n   }\r\n \r\n   /**\r\n    * Returns the current value of the progress bar.\r\n    *\r\n    * @return the current value of the progress bar\r\n    */\r\n   public int getProgress() {\r\n     return progress;\r\n   }\r\n \r\n   /**\r\n    * Sets the current value of the progress bar.\r\n    *\r\n    * @param value the new value of the progress bar\r\n    */\r\n   public void setProgress(int value) {\r\n-    this.progress = value;\r\n+    this"}], "metadata": {"task_id": "RedReader/1", "ground_truth": "    indeterminate = value;\r\n    invalidate();\r\n}", "fpath": "RedReader\\src\\main\\java\\com\\github\\lzyzsd\\circleprogress\\DonutProgress.java"}}
{"prompt": "\n public void setProgress(float progress) {\r\n    if (Math.abs(progress - this.progress) > 0.0001) {\r\n        this.progress = progress;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/2", "ground_truth": "        invalidate();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\com\\github\\lzyzsd\\circleprogress\\DonutProgress.java"}}
{"prompt": "\n private int measure(int measureSpec) {\r\n    int result;\r\n    int mode = MeasureSpec.getMode(measureSpec);\r\n    int size = MeasureSpec.getSize(measureSpec);\r\n    if (mode == MeasureSpec.EXACTLY) {\r\n        result = size;\r\n    } else {\r\n        result = min_size;\r\n        if (mode == MeasureSpec.AT_MOST) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/3", "ground_truth": "            result = Math.min(result, size);\r\n        }\r\n    }\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\com\\github\\lzyzsd\\circleprogress\\DonutProgress.java"}}
{"prompt": "\n /**\r\n * Gets display duration for specified frame.\r\n *\r\n * @param n\r\n *          int index of frame\r\n * @return delay in milliseconds\r\n */\r\npublic int getDelay(int n) {\r\n    delay = -1;\r", "choices": [{"text": "}\r\n\r\n/**\r\n * Gets display duration for specified frame.\r\n *\r\n * @param n\r\n *          int index of frame\r\n * @return delay in milliseconds\r\n */\r\npublic int getDelay(int n) {\r\n    delay = -1;\r\n}\r\n\r\n/**\r\n * Gets display duration for specified frame.\r\n *\r\n * @param n\r\n *          int index of frame\r\n * @return delay in milliseconds\r\n */\r\npublic int getDelay(int n) {\r\n    delay = -1;\r\n}\r\n\r\n/**\r\n * Gets display duration for specified frame.\r\n *\r\n *"}], "metadata": {"task_id": "RedReader/4", "ground_truth": "    if ((n >= 0) && (n < frameCount)) {\r\n        delay = frames.elementAt(n).delay;\r\n    }\r\n    return delay;\r\n}", "fpath": "RedReader\\src\\main\\java\\jp\\tomorrowkey\\android\\gifplayer\\GifDecoder.java"}}
{"prompt": "\n import android.graphics.Bitmap\n/**\r\n * Gets the image contents of frame n.\r\n *\r\n * @return BufferedBitmap representation of frame, or null if n is invalid.\r\n */\r\npublic Bitmap getFrame(int n) {\r\n    if (frameCount <= 0)\r\n        return null;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/5", "ground_truth": "    n = n % frameCount;\r\n    return frames.elementAt(n).image;\r\n}", "fpath": "RedReader\\src\\main\\java\\jp\\tomorrowkey\\android\\gifplayer\\GifDecoder.java"}}
{"prompt": "\n import java.io.InputStream\n/**\r\n * Reads GIF image from stream\r\n *\r\n * @param is\r\n *          containing GIF file.\r\n * @return read status code (0 = no errors)\r\n */\r\npublic int read(InputStream is) {\r\n    init();\r\n    if (is != null) {\r\n        in = is;\r\n        readHeader();\r\n        if (!err()) {\r\n            readContents();\r\n            if (frameCount < 0) {\r\n                status = STATUS_FORMAT_ERROR;\r\n            }\r\n        }\r\n    } else {\r\n        status = STATUS_OPEN_ERROR;\r\n    }\r\n    try {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/6", "ground_truth": "        is.close();\r\n    } catch (Exception e) {\r\n    }\r\n    return status;\r\n}", "fpath": "RedReader\\src\\main\\java\\jp\\tomorrowkey\\android\\gifplayer\\GifDecoder.java"}}
{"prompt": "\n /**\r\n * Initializes or re-initializes reader\r\n */\r\nprotected void init() {\r\n    status = STATUS_OK;\r", "choices": [{"text": "}\r\n\r\n/**\r\n * Reads a single byte from the reader\r\n * @return byte read from the reader\r\n */\r\nprotected byte read() {\r\n    if (status!= STATUS_OK) {\r\n        return 0;\r\n    }\r\n    try {\r\n        return (byte) reader.read();\r\n    } catch (IOException e) {\r\n        status = STATUS_ERROR;\r\n        return 0;\r\n    }\r\n}\r\n\r\n/**\r\n * Reads a single byte from the reader\r\n * @param b byte to write to the reader\r\n */\r\nprotected void write(byte b) {\r\n    if (status!= STATUS_"}], "metadata": {"task_id": "RedReader/7", "ground_truth": "    frameCount = 0;\r\n    frames = new Vector<>();\r\n    gct = null;\r\n    lct = null;\r\n}", "fpath": "RedReader\\src\\main\\java\\jp\\tomorrowkey\\android\\gifplayer\\GifDecoder.java"}}
{"prompt": "\n /**\r\n * Reads a single byte from the input stream.\r\n */\r\nprotected int read() {\r\n    int curByte = 0;\r\n    try {\r\n        curByte = in.read();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/8", "ground_truth": "    } catch (Exception e) {\r\n        status = STATUS_FORMAT_ERROR;\r\n    }\r\n    return curByte;\r\n}", "fpath": "RedReader\\src\\main\\java\\jp\\tomorrowkey\\android\\gifplayer\\GifDecoder.java"}}
{"prompt": "\n /**\r\n * Reads Graphics Control Extension values\r\n */\r\nprotected void readGraphicControlExt() {\r\n    // block size\r\n    read();\r\n    // packed fields\r\n    int packed = read();\r\n    // disposal method\r\n    dispose = (packed & 0x1c) >> 2;\r\n    if (dispose == 0) {\r\n        // elect to keep old image if discretionary\r\n        dispose = 1;\r\n    }\r\n    transparency = (packed & 1) != 0;\r\n    // delay in milliseconds\r\n    delay = readShort() * 10;\r", "choices": [{"text": "\n /**\r\n * Reads Graphics Control Extension values\r\n */\r\nprotected void readGraphicControlExt() {\r\n    // block size\r\n    read();\r\n    // packed fields\r\n    int packed = read();\r\n    // disposal method\r\n    dispose = (packed & 0x1c) >> 2;\r\n    if (dispose == 0) {\r\n        // elect to keep old image if discretionary\r\n        dispose = 1;\r\n    }\r\n    transparency = (packed & 1)!= 0;\r\n    // delay in milliseconds\r\n    delay = readShort() * 10;\r\n}\r\n\r\n/**\r\n * Reads Image Descriptor values\r\n */\r\nprotected void readImageDescriptor() {\r\n    // block size\r\n    read();\r\n    // image position\r\n    x = readShort();\r\n    y = readShort();\r\n    // image size\r\n    width = readShort();\r\n    height = readShort();\r\n    // packed fields\r\n    int packed = read();\r\n    // local color table flag\r\n    localColorTable = (packed & 0x80)!= 0;\r\n    // interlace flag\r\n    interlace = (packed & 0x40)!= 0;\r\n    // sort flag\r\n    sort = (packed & "}], "metadata": {"task_id": "RedReader/9", "ground_truth": "    // transparent color index\r\n    transIndex = read();\r\n    // block terminator\r\n    read();\r\n}", "fpath": "RedReader\\src\\main\\java\\jp\\tomorrowkey\\android\\gifplayer\\GifDecoder.java"}}
{"prompt": "\n /**\r\n * Reads GIF file header information.\r\n */\r\nprotected void readHeader() {\r\n    String id = \"\";\r\n    for (int i = 0; i < 6; i++) {\r\n        id += (char) read();\r\n    }\r\n    if (!id.startsWith(\"GIF\")) {\r\n        status = STATUS_FORMAT_ERROR;\r\n        return;\r\n    }\r\n    readLSD();\r", "choices": [{"text": "}\r\n\r\n/**\r\n * Reads GIF Logical Screen Descriptor.\r\n */\r\nprotected void readLSD() {\r\n    int width = readShort();\r\n    int height = readShort();\r\n    int packed = read();\r\n    int bgIndex = (packed & 0x70) >> 4;\r\n    int colorResolution = (packed & 0x07) + 1;\r\n    int sort = (packed & 0x08) >> 3;\r\n    int globalColorTableFlag = (packed & 0x01) >> 0;\r\n    int bgColor = readColor(bgIndex);"}], "metadata": {"task_id": "RedReader/10", "ground_truth": "    if (gctFlag && !err()) {\r\n        gct = readColorTable(gctSize);\r\n        bgColor = gct[bgIndex];\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\jp\\tomorrowkey\\android\\gifplayer\\GifDecoder.java"}}
{"prompt": "\n /**\r\n * Reads Logical Screen Descriptor\r\n */\r\nprotected void readLSD() {\r\n    // logical screen size\r\n    width = readShort();\r\n    height = readShort();\r\n    // packed fields\r\n    int packed = read();\r\n    // 1 : global color table flag\r\n    gctFlag = (packed & 0x80) != 0;\r\n    // 2-4 : color resolution\r\n    // 5 : gct sort flag\r\n    // 6-8 : gct size\r\n    gctSize = 2 << (packed & 7);\r", "choices": [{"text": "\n /**\r\n * Reads Logical Screen Descriptor\r\n */\r\nprotected void readLSD() {\r\n    // logical screen size\r\n    width = readShort();\r\n    height = readShort();\r\n    // packed fields\r\n    int packed = read();\r\n    // 1 : global color table flag\r\n    gctFlag = (packed & 0x80)!= 0;\r\n    // 2-4 : color resolution\r\n    // 5 : gct sort flag\r\n    // 6-8 : gct size\r\n    gctSize = 2 << (packed & 7);\r\n}\r\n\r\n/**\r\n * Reads Image Descriptor\r\n */\r\nprotected void readID() {\r\n    // image position\r\n    x = readShort();\r\n    y = readShort();\r\n    // image size\r\n    width = readShort();\r\n    height = readShort();\r\n    // packed fields\r\n    int packed = read();\r\n    // 1 : local color table flag\r\n    lctFlag = (packed & 0x80)!= 0;\r\n    // 2-4 : local color table size\r\n    lctSize = 2 << (packed & 7);\r\n    // 5 : interlace flag\r\n    interlace = (packed"}], "metadata": {"task_id": "RedReader/11", "ground_truth": "    // background color index\r\n    bgIndex = read();\r\n    // pixel aspect ratio\r\n    pixelAspect = read();\r\n}", "fpath": "RedReader\\src\\main\\java\\jp\\tomorrowkey\\android\\gifplayer\\GifDecoder.java"}}
{"prompt": "\n /**\r\n * Reads next 16-bit value, LSB first\r\n */\r\nprotected int readShort() {\r", "choices": [{"text": "return (read() << 8) | read();\r\n}\r\n\r\n/**\r\n * Reads next 32-bit value, LSB first\r\n */\r\nprotected int readInt() {\r\nreturn (read() << 24) | (read() << 16) | (read() << 8) | read();\r\n}\r\n\r\n/**\r\n * Reads next 64-bit value, LSB first\r\n */\r\nprotected long readLong() {\r\nreturn ((long)read() << 56) | ((long)read() << 48) |"}], "metadata": {"task_id": "RedReader/13", "ground_truth": "    // read 16-bit value, LSB first\r\n    return read() | (read() << 8);\r\n}", "fpath": "RedReader\\src\\main\\java\\jp\\tomorrowkey\\android\\gifplayer\\GifDecoder.java"}}
{"prompt": "\n import android.graphics.Bitmap\n/**\r\n * Resets frame state for reading next image.\r\n */\r\nprotected void resetFrame() {\r\n    lastDispose = dispose;\r\n    lrx = ix;\r\n    lry = iy;\r\n    lrw = iw;\r\n    lrh = ih;\r\n    lastBitmap = image;\r\n    lastBgColor = bgColor;\r", "choices": [{"text": "}\r\n/**\r\n * Returns the current frame.\r\n *\r\n * @return the current frame\r\n */\r\nprotected Bitmap getFrame() {\r\n    if (image == null || image.isRecycled()) {\r\n        return null;\r\n    }\r\n    if (lastBitmap!= image || lastDispose!= dispose || lastBgColor!= bgColor) {\r\n        resetFrame();\r\n    }\r\n    return image;\r\n}\r\n/**\r\n * Returns the current frame.\r\n *\r\n * @return the current frame\r\n */\r\nprotected Bitmap getFrame(int x, int y, int w, int h) {\r\n   "}], "metadata": {"task_id": "RedReader/14", "ground_truth": "    dispose = 0;\r\n    transparency = false;\r\n    delay = 0;\r\n    lct = null;\r\n}", "fpath": "RedReader\\src\\main\\java\\jp\\tomorrowkey\\android\\gifplayer\\GifDecoder.java"}}
{"prompt": "\n /**\r\n * Skips variable length blocks up to and including next zero length block.\r\n */\r\nprotected void skip() {\r\n    do {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/15", "ground_truth": "        readBlock();\r\n    } while ((blockSize > 0) && !err());\r\n}", "fpath": "RedReader\\src\\main\\java\\jp\\tomorrowkey\\android\\gifplayer\\GifDecoder.java"}}
{"prompt": "\n import android.content.Context\npublic static synchronized RedditAccountManager getInstance(final Context context) {\r\n    if (singleton == null) {\r\n        singleton = new RedditAccountManager(context.getApplicationContext());\r", "choices": [{"text": "}\r\nreturn singleton;\r\n}\r\n"}], "metadata": {"task_id": "RedReader/17", "ground_truth": "    }\r\n    return singleton;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\account\\RedditAccountManager.java"}}
{"prompt": "\n import android.database.sqlite.SQLiteDatabase\n@Override\r\npublic void onCreate(final SQLiteDatabase db) {\r\n    final String queryString = String.format(\"CREATE TABLE %s (\" + \"%s TEXT NOT NULL PRIMARY KEY ON CONFLICT REPLACE,\" + \"%s TEXT,\" + \"%s INTEGER,\" + \"%s BOOLEAN NOT NULL,\" + \"%s TEXT)\", TABLE, FIELD_USERNAME, FIELD_REFRESH_TOKEN, FIELD_PRIORITY, FIELD_USES_NEW_CLIENT_ID, FIELD_CLIENT_ID);\r", "choices": [{"text": "db.execSQL(queryString);\r\n}\r\n"}], "metadata": {"task_id": "RedReader/18", "ground_truth": "    db.execSQL(queryString);\r\n    addAccount(getAnon(), db);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\account\\RedditAccountManager.java"}}
{"prompt": "\n import java.util.List\nimport java.util.ArrayList\nimport android.database.sqlite.SQLiteDatabase\npublic synchronized ArrayList<RedditAccount> getAccounts() {\r\n    if (accountsCache == null) {\r\n        final SQLiteDatabase db = getReadableDatabase();\r", "choices": [{"text": "try {\r\n            final Cursor cursor = db.query(TABLE_NAME, null, null, null, null, null, null);\r\n            accountsCache = new ArrayList<RedditAccount>();\r\n            while (cursor.moveToNext()) {\r\n                final RedditAccount account = new RedditAccount();\r\n                account.setUsername(cursor.getString(cursor.getColumnIndex(USERNAME)));\r\n                account.setPassword(cursor.getString(cursor.getColumnIndex(PASSWORD)));\r\n                account.setToken(cursor.getString(cursor.getColumnIndex(TOKEN)));\r\n                account.setTokenSecret(cursor.getString(cursor.getColumnIndex(TOKEN_SECRET)));\r\n               "}], "metadata": {"task_id": "RedReader/20", "ground_truth": "        reloadAccounts(db);\r\n        db.close();\r\n    }\r\n    return new ArrayList<>(accountsCache);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\account\\RedditAccountManager.java"}}
{"prompt": "\n import java.util.List\nimport java.util.ArrayList\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@Nullable\r\npublic RedditAccount getAccount(@NonNull final String username) {\r\n    if (\"\".equals(username)) {\r\n        return getAnon();\r\n    }\r\n    final ArrayList<RedditAccount> accounts = getAccounts();\r\n    RedditAccount selectedAccount = null;\r\n    for (final RedditAccount account : accounts) {\r\n        if (!account.isAnonymous() && account.username.equalsIgnoreCase(username)) {\r\n            selectedAccount = account;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/21", "ground_truth": "            break;\r\n        }\r\n    }\r\n    return selectedAccount;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\account\\RedditAccountManager.java"}}
{"prompt": "\n import android.database.sqlite.SQLiteDatabase\npublic synchronized RedditAccount getDefaultAccount() {\r\n    if (defaultAccountCache == null) {\r\n        final SQLiteDatabase db = getReadableDatabase();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/22", "ground_truth": "        reloadAccounts(db);\r\n        db.close();\r\n    }\r\n    return defaultAccountCache;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\account\\RedditAccountManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.RRError\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\n@Override\r\npublic void onFailure(@NonNull final RRError error) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/27", "ground_truth": "    Log.e(\"AlbumListingActivity\", \"Image info request also failed: \" + error);\r\n    revertToWeb();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\AlbumListingActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.image.ImageInfo\nimport android.util.Log\n@Override\r\npublic void onSuccess(final ImageInfo info) {\r\n    Log.i(\"AlbumListingActivity\", \"Link was actually an image.\");\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/28", "ground_truth": "    LinkHandler.onLinkClicked(AlbumListingActivity.this, info.urlOriginal);\r\n    finish();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\AlbumListingActivity.java"}}
{"prompt": "\n @Override\r\npublic void onNotAnImage() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/29", "ground_truth": "    Log.i(\"AlbumListingActivity\", \"Not an image either\");\r\n    revertToWeb();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\AlbumListingActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General\n@Override\r\npublic void onBackPressed() {\r\n    if (General.onBackPressed()) {\r", "choices": [{"text": "//        super.onBackPressed();\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/30", "ground_truth": "        super.onBackPressed();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\AlbumListingActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.LinkHandler\nimport org.quantumbadger.redreader.common.General\nimport org.quantumbadger.redreader.R\nprivate void revertToWeb() {\r\n    final Runnable r = () -> {\r\n        if (!mHaveReverted) {\r\n            mHaveReverted = true;\r\n            LinkHandler.onLinkClicked(this, mUrl, true);\r\n            finish();\r\n        }\r\n    };\r\n    if (General.isThisUIThread()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/31", "ground_truth": "        r.run();\r\n    } else {\r\n        AndroidCommon.UI_THREAD_HANDLER.post(r);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\AlbumListingActivity.java"}}
{"prompt": "\n @Override\r\npublic void setTitle(final CharSequence text) {\r", "choices": [{"text": "super.setTitle(text);\r\nif (mTitle!= null) {\r\nmTitle.setText(text);\r\n}\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "RedReader/32", "ground_truth": "    super.setTitle(text);\r\n    mActionbarTitleTextView.apply(titleView -> titleView.setText(text));\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\BaseActivity.java"}}
{"prompt": "\n public void closeAllExceptMain() {\r", "choices": [{"text": "//    for (int i = 0; i < this.getTabCount(); i++) {\r\n//      if (i!= 0) {\r\n//        this.removeTabAt(i);\r\n//      }\r\n//    }\r\n//    this.setSelectedIndex(0);\r\n//  }\r\n//\r\n//  public void closeAll() {\r\n//    for (int i = 0; i < this.getTabCount(); i++) {\r\n//      this.removeTabAt(i);\r\n//    }\r\n//"}], "metadata": {"task_id": "RedReader/33", "ground_truth": "    closingAll = true;\r\n    closeIfNecessary();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\BaseActivity.java"}}
{"prompt": "\n import androidx.appcompat.app.ActionBar\nimport androidx.annotation.NonNull\n// Avoids IDE warnings about null pointers\r\n@NonNull\r\npublic final ActionBar getSupportActionBarOrThrow() {\r\n    final ActionBar result = getSupportActionBar();\r", "choices": [{"text": "// Avoids IDE warnings about null pointers\r\n    if (result == null) {\r\n        throw new NullPointerException(\"SupportActionBar must not be null\");\r\n    }\r\n    return result;\r\n}\n"}], "metadata": {"task_id": "RedReader/34", "ground_truth": "    if (result == null) {\r\n        throw new RuntimeException(\"Action bar is null\");\r\n    }\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\BaseActivity.java"}}
{"prompt": "\n import androidx.appcompat.widget.Toolbar\nprotected boolean baseActivityAllowToolbarHideOnScroll() {\r", "choices": [{"text": "return true;\r\n}\n"}], "metadata": {"task_id": "RedReader/35", "ground_truth": "    // Disallow by default\r\n    return false;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\BaseActivity.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.view.View\npublic void setBaseActivityListing(@NonNull final View view) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/36", "ground_truth": "    mContentListing.removeAllViews();\r\n    mContentListing.addView(view);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\BaseActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\npublic void setBaseActivityListing(final int layoutRes) {\r", "choices": [{"text": "baseActivityListing = layoutRes;\r\n}\r\n"}], "metadata": {"task_id": "RedReader/37", "ground_truth": "    mContentListing.removeAllViews();\r\n    getLayoutInflater().inflate(layoutRes, mContentListing, true);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\BaseActivity.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.view.View\npublic void setBaseActivityOverlay(@NonNull final View view) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/38", "ground_truth": "    mContentOverlay.removeAllViews();\r\n    mContentOverlay.addView(view);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\BaseActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\n@Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n    setOrientationFromPrefs();\r", "choices": [{"text": "}\r\n\r\n@Override\r\nprotected void onPause() {\r\n    super.onPause();\r\n    saveOrientationToPrefs();\r\n}\r\n\r\nprivate void setOrientationFromPrefs() {\r\n    int orientation = getResources().getConfiguration().orientation;\r\n    if (orientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\r\n    } else {\r\n        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);\r\n    }\r\n}\r\n\r\nprivate void saveOrientationToPrefs() {\r\n    int orientation = getResources().getConfiguration().orientation"}], "metadata": {"task_id": "RedReader/39", "ground_truth": "    closeIfNecessary();\r\n    TorCommon.updateTorStatus();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\BaseActivity.java"}}
{"prompt": "\n @Override\r\nprotected void onDestroy() {\r", "choices": [{"text": "super.onDestroy();\r\nif (mLocationManager!= null) {\r\nmLocationManager.removeUpdates(this);\r\n}\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "RedReader/40", "ground_truth": "    super.onDestroy();\r\n    mSharedPreferences.unregisterOnSharedPreferenceChangeListener(this);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\BaseActivity.java"}}
{"prompt": "\n private void closeIfNecessary() {\r\n    if (closingAll) {\r\n        if (this instanceof MainActivity) {\r\n            closingAll = false;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/41", "ground_truth": "        } else {\r\n            finish();\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\BaseActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\nimport android.content.Intent\npublic final void startActivityForResultWithCallback(@NonNull final Intent intent, @NonNull final ActivityResultCallback callback) {\r\n    final int requestCode = mRequestIdGenerator.incrementAndGet();\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/42", "ground_truth": "    mActivityResultCallbacks.put(requestCode, callback);\r\n    startActivityForResult(intent, requestCode);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\BaseActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport androidx.annotation.Nullable\nimport android.content.Intent\n@Override\r\nprotected final void onActivityResult(final int requestCode, final int resultCode, @Nullable final Intent data) {\r\n    super.onActivityResult(requestCode, resultCode, data);\r\n    final ActivityResultCallback callback = mActivityResultCallbacks.remove(requestCode);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/43", "ground_truth": "    if (callback == null) {\r\n        return;\r\n    }\r\n    callback.onActivityResult(resultCode, data);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\BaseActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport android.util.Log\nimport android.content.Context\npublic static synchronized void handleGlobalError(final Context context, final Throwable t) {\r\n    if (t != null) {\r\n        Log.e(\"BugReportActivity\", \"Handling exception\", t);\r", "choices": [{"text": "\n import org.quantumbadger.redreader.R\nimport android.util.Log\nimport android.content.Context\npublic static synchronized void handleGlobalError(final Context context, final Throwable t) {\r\n    if (t!= null) {\r\n        Log.e(\"BugReportActivity\", \"Handling exception\", t);\r\n//        final Intent intent = new Intent(context, BugReportActivity.class);\r\n//        intent.putExtra(\"exception\", t);\r\n//        context.startActivity(intent);\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/45", "ground_truth": "    }\r\n    handleGlobalError(context, new RRError(null, null, true, t));\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\BugReportActivity.java"}}
{"prompt": "\n import java.util.LinkedList\nimport org.quantumbadger.redreader.common.RRError\nimport org.quantumbadger.redreader.R\nprivate static synchronized LinkedList<RRError> getErrors() {\r\n    final LinkedList<RRError> result = new LinkedList<>(errors);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/47", "ground_truth": "    errors.clear();\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\BugReportActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport android.view.MenuItem\n@Override\r\npublic boolean onOptionsItemSelected(final MenuItem item) {\r\n    switch(item.getItemId()) {\r\n        case android.R.id.home:\r\n            finish();\r", "choices": [{"text": "}\r\nreturn super.onOptionsItemSelected(item);\r\n}\r\n}\n"}], "metadata": {"task_id": "RedReader/48", "ground_truth": "            return true;\r\n        default:\r\n            return false;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\ChangelogActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General\nimport org.quantumbadger.redreader.common.AndroidCommon\nimport org.quantumbadger.redreader.R\n@Override\r\nprotected void onSuccess() {\r\n    AndroidCommon.UI_THREAD_HANDLER.post(() -> {\r\n        General.safeDismissDialog(progressDialog);\r\n        if (isSelfPost) {\r\n            General.quickToast(CommentEditActivity.this, R.string.post_edit_done);\r\n        } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/51", "ground_truth": "            General.quickToast(CommentEditActivity.this, R.string.comment_edit_done);\r\n        }\r\n        finish();\r\n    });\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\CommentEditActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.RRError\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\n@Override\r\nprotected void onFailure(@NonNull final RRError error) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/52", "ground_truth": "    General.showResultDialog(CommentEditActivity.this, error);\r\n    General.safeDismissDialog(progressDialog);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\CommentEditActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General\n@Override\r\npublic void onBackPressed() {\r\n    if (General.onBackPressed()) {\r", "choices": [{"text": "//        super.onBackPressed();\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/53", "ground_truth": "        super.onBackPressed();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\CommentEditActivity.java"}}
{"prompt": "\n import android.view.Menu\n@Override\r\npublic boolean onCreateOptionsMenu(final Menu menu) {\r\n    OptionsMenuUtility.prepare(this, menu, false, false, true, false, false, controller.isUserCommentListing(), false, controller.isSortable(), false, null, false, true, null, null);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "RedReader/54", "ground_truth": "    if (mFragment != null) {\r\n        mFragment.onCreateOptionsMenu(menu);\r\n    }\r\n    return true;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\CommentListingActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport android.os.Bundle\n@Override\r\nprotected void doRefresh(final RefreshableFragment which, final boolean force, final Bundle savedInstanceState) {\r\n    mFragment = controller.get(this, force, savedInstanceState);\r\n    mFragment.setBaseActivityContent(this);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "RedReader/55", "ground_truth": "    setTitle(controller.getCommentListingUrl().humanReadableName(this, false));\r\n    invalidateOptionsMenu();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\CommentListingActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\n@Override\r\npublic void onRefreshComments() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.onRefreshComments();\r\n}\r\n@Override\r\npublic void onRefresh() {\r\n// TODO Auto-generated method stub\r\nsuper.onRefresh();\r\n}\r\n@Override\r\npublic void onRefreshComments() {\r\n// TODO Auto-generated method stub\r\nsuper.onRefreshComments();\r\n}\r\n@Override\r\npublic void onRefresh() {\r\n// TODO Auto-generated method stub\r\nsuper.onRefresh();\r\n}\r\n@Override\r\npublic void onRefreshComments() {\r"}], "metadata": {"task_id": "RedReader/56", "ground_truth": "    controller.setSession(null);\r\n    requestRefresh(RefreshableFragment.COMMENTS, true);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\CommentListingActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.PostCommentSort\n@Override\r\npublic void onSortSelected(final PostCommentSort order) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\n}\r\n});\r\n"}], "metadata": {"task_id": "RedReader/58", "ground_truth": "    controller.setSort(order);\r\n    requestRefresh(RefreshableFragment.COMMENTS, false);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\CommentListingActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.UserCommentSort\n@Override\r\npublic void onSortSelected(final UserCommentSort order) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\n}\r\n});\r\n"}], "metadata": {"task_id": "RedReader/59", "ground_truth": "    controller.setSort(order);\r\n    requestRefresh(RefreshableFragment.COMMENTS, false);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\CommentListingActivity.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onOptionsItemSelected(@NonNull final MenuItem item) {\r\n    if (mFragment != null) {\r\n        if (mFragment.onOptionsItemSelected(item)) {\r", "choices": [{"text": "\n import androidx.annotation.NonNull\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onOptionsItemSelected(@NonNull final MenuItem item) {\r\n    if (mFragment!= null) {\r\n        if (mFragment.onOptionsItemSelected(item)) {\r\nreturn true;\r\n        }\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}\r\n@Override\r\npublic boolean onCreateOptionsMenu(final Menu menu) {\r\n    if (mFragment!= null) {\r\n        if (mFragment.onCreateOptionsMenu(menu, getMenuInflater())) {\r\nreturn true;\r\n        }\r\n    }\r\n    return super.onCreateOptionsMenu(menu);\r\n}\r\n"}], "metadata": {"task_id": "RedReader/61", "ground_truth": "            return true;\r\n        }\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\CommentListingActivity.java"}}
{"prompt": "\n import java.util.UUID\n@Override\r\npublic void onSessionSelected(final UUID session, final SessionChangeType type) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.onSessionSelected(session, type);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/62", "ground_truth": "    controller.setSession(session);\r\n    requestRefresh(RefreshableFragment.COMMENTS, false);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\CommentListingActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General\n@Override\r\npublic void onBackPressed() {\r\n    if (General.onBackPressed()) {\r", "choices": [{"text": "//        super.onBackPressed();\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/64", "ground_truth": "        super.onBackPressed();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\CommentListingActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.PostCommentSort\n@Override\r\npublic PostCommentSort getSuggestedCommentSort() {\r\n    if (mFragment == null || mFragment.getPost() == null) {\r\n        return null;\r", "choices": [{"text": "}\r\nreturn mFragment.getPost().getSuggestedCommentSort();\r\n}\r\n"}], "metadata": {"task_id": "RedReader/65", "ground_truth": "    }\r\n    return mFragment.getPost().src.getSuggestedCommentSort();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\CommentListingActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.RRError\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\n@Override\r\nprotected void onFailure(@NonNull final RRError error) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/69", "ground_truth": "    General.showResultDialog(CommentReplyActivity.this, error);\r\n    General.safeDismissDialog(progressDialog);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\CommentReplyActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General\n@Override\r\npublic void onBackPressed() {\r\n    if (General.onBackPressed()) {\r", "choices": [{"text": "//        super.onBackPressed();\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/71", "ground_truth": "        super.onBackPressed();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\CommentReplyActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General\nimport android.view.View\n@Override\r\npublic void onBackPressed() {\r\n    if (General.onBackPressed() && !webView.onBackButtonPressed()) {\r", "choices": [{"text": "\n import org.quantumbadger.redreader.common.General\nimport android.view.View\n@Override\r\npublic void onBackPressed() {\r\n    if (General.onBackPressed() &&!webView.onBackButtonPressed()) {\r\n//        super.onBackPressed();\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/72", "ground_truth": "        super.onBackPressed();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\HtmlViewActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.image.AlbumInfo\nimport org.quantumbadger.redreader.common.AndroidCommon\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\n@Override\r\npublic void onSuccess(@NonNull final AlbumInfo info) {\r\n    AndroidCommon.UI_THREAD_HANDLER.post(() -> {\r\n        mAlbumInfo = info;\r", "choices": [{"text": "//        mAlbumInfo.setAlbumName(mAlbumName);\r\n        mAlbumInfo.setAlbumId(mAlbumId);\r\n        mAlbumInfo.setAlbumCover(mAlbumCover);\r\n        mAlbumInfo.setAlbumCoverUrl(mAlbumCoverUrl);\r\n        mAlbumInfo.setAlbumCoverUrl(mAlbumCoverUrl);\r\n        mAlbumInfo.setAlbumCoverUrl(mAlbumCoverUrl);\r\n        mAlbumInfo.setAlbumCoverUrl(mAlbumCoverUrl);\r\n        mAlbumInfo.setAlbumCoverUrl(mAlbumCoverUrl);\r\n        mAlbumInfo.setAlbumCoverUrl(mAlbum"}], "metadata": {"task_id": "RedReader/73", "ground_truth": "        mAlbumImageIndex = intent.getIntExtra(\"albumImageIndex\", 0);\r\n    });\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\ImageViewActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.RRError\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\n@Override\r\npublic void onFailure(@NonNull final RRError error) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/74", "ground_truth": "    General.quickToast(ImageViewActivity.this, R.string.imageview_image_info_failed);\r\n    revertToWeb();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\ImageViewActivity.java"}}
{"prompt": "\n @Override\r\npublic boolean onTap() {\r\n    if (toolbarOverlay.isShown()) {\r", "choices": [{"text": "toolbarOverlay.hide();\r\n} else {\r\ntoolbarOverlay.show();\r\n}\r\nreturn true;\r\n}\r\n});\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "RedReader/77", "ground_truth": "        toolbarOverlay.hide();\r\n        return true;\r\n    }\r\n    return false;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\ImageViewActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General\n@Override\r\npublic void onBackPressed() {\r\n    if (General.onBackPressed()) {\r", "choices": [{"text": "//        super.onBackPressed();\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/79", "ground_truth": "        super.onBackPressed();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\ImageViewActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.LinkHandler\nimport org.quantumbadger.redreader.common.General\nimport org.quantumbadger.redreader.R\nimport android.util.Log\nimport android.net.Uri\nprivate void openInExternalBrowser() {\r\n    Log.i(TAG, \"Using external browser\");\r\n    final Runnable r = () -> {\r\n        LinkHandler.openWebBrowser(this, Uri.parse(mUrl), false);\r\n        finish();\r\n    };\r\n    if (General.isThisUIThread()) {\r", "choices": [{"text": "       r.run();\r\n    } else {\r        runOnUiThread(r);\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/81", "ground_truth": "        r.run();\r\n    } else {\r\n        AndroidCommon.UI_THREAD_HANDLER.post(r);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\ImageViewActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\n@Override\r\npublic void onPause() {\r\n    if (mIsPaused) {\r\n        throw new RuntimeException();\r\n    }\r\n    mIsPaused = true;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/82", "ground_truth": "    super.onPause();\r\n    if (surfaceView != null) {\r\n        surfaceView.onPause();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\ImageViewActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport android.view.View\n@Override\r\npublic void onResume() {\r\n    if (!mIsPaused) {\r\n        throw new RuntimeException();\r\n    }\r\n    mIsPaused = false;\r\n    super.onResume();\r\n    if (surfaceView != null) {\r\n        surfaceView.onResume();\r\n    }\r", "choices": [{"text": "\n import org.quantumbadger.redreader.R\nimport android.view.View\n@Override\r\npublic void onResume() {\r\n    if (!mIsPaused) {\r\n        throw new RuntimeException();\r\n    }\r\n    mIsPaused = false;\r\n    super.onResume();\r\n    if (surfaceView!= null) {\r\n        surfaceView.onResume();\r\n    }\r\n}\r\n@Override\r\npublic void onPause() {\r\n    mIsPaused = true;\r\n    super.onPause();\r\n    if (surfaceView!= null) {\r\n        surfaceView.onPause();\r\n    }\r\n}\r\n@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n    if (surfaceView!= null) {\r\n        surfaceView.onDestroy();\r\n    }\r\n}\r\n@Override\r\npublic void onSurfaceCreated(GL10 gl, EGLConfig config) {\r\n    // TODO Auto-generated method stub\r\n    super.onSurfaceCreated(gl, config"}], "metadata": {"task_id": "RedReader/83", "ground_truth": "    for (final Runnable runnable : mActionsOnResume) {\r\n        runnable.run();\r\n    }\r\n    mActionsOnResume.clear();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\ImageViewActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.cache.CacheRequest\nimport org.quantumbadger.redreader.R\n@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n    mIsDestroyed = true;\r\n    cancelCacheRequests();\r\n    if (gifThread != null) {\r\n        gifThread.stopPlaying();\r\n    }\r", "choices": [{"text": "\n import org.quantumbadger.redreader.cache.CacheRequest\nimport org.quantumbadger.redreader.R\n@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n    mIsDestroyed = true;\r\n    cancelCacheRequests();\r\n    if (gifThread!= null) {\r\n        gifThread.stopPlaying();\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/84", "ground_truth": "    if (mVideoPlayerWrapper != null) {\r\n        mVideoPlayerWrapper.release();\r\n        mVideoPlayerWrapper = null;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\ImageViewActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.cache.CacheRequest\nimport org.quantumbadger.redreader.R\nprivate void cancelCacheRequests() {\r\n    if (mImageOrVideoRequest != null) {\r\n        mImageOrVideoRequest.cancel();\r", "choices": [{"text": "\n import org.quantumbadger.redreader.cache.CacheRequest\nimport org.quantumbadger.redreader.R\nprivate void cancelCacheRequests() {\r\n    if (mImageOrVideoRequest!= null) {\r\n        mImageOrVideoRequest.cancel();\r\n}\r\n}\n"}], "metadata": {"task_id": "RedReader/85", "ground_truth": "    }\r\n    if (mAudioRequest != null) {\r\n        mAudioRequest.cancel();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\ImageViewActivity.java"}}
{"prompt": "\n @Override\r\npublic void onHorizontalSwipeEnd() {\r\n    mSwipeCancelled = false;\r\n    if (mSwipeOverlay != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/86", "ground_truth": "        mSwipeOverlay.onSwipeEnd();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\ImageViewActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General\nimport org.quantumbadger.redreader.R\nimport android.widget.ImageView\nimport android.view.View\n@Override\r\npublic void onImageViewDLMOutOfMemory() {\r\n    if (!mHaveReverted) {\r\n        General.quickToast(this, R.string.imageview_oom);\r", "choices": [{"text": "mHaveReverted = true;\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/87", "ground_truth": "        revertToWeb();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\ImageViewActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General\nimport org.quantumbadger.redreader.R\nimport android.widget.ImageView\nimport android.view.View\n@Override\r\npublic void onImageViewDLMException(final Throwable t) {\r\n    if (!mHaveReverted) {\r\n        General.quickToast(this, R.string.imageview_decode_failed);\r", "choices": [{"text": "mHaveReverted = true;\r\nmImageView.setImageResource(R.drawable.ic_launcher);\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/88", "ground_truth": "        revertToWeb();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\ImageViewActivity.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.widget.ImageView\nimport android.view.View\nimport android.content.res.Configuration\n@Override\r\npublic void onConfigurationChanged(@NonNull final Configuration newConfig) {\r\n    super.onConfigurationChanged(newConfig);\r\n    if (mImageViewDisplayerManager != null) {\r", "choices": [{"text": "\n import androidx.annotation.NonNull\nimport android.widget.ImageView\nimport android.view.View\nimport android.content.res.Configuration\n@Override\r\npublic void onConfigurationChanged(@NonNull final Configuration newConfig) {\r\n    super.onConfigurationChanged(newConfig);\r\n    if (mImageViewDisplayerManager!= null) {\r\nmImageViewDisplayerManager.onConfigurationChanged(newConfig);\r\n    }\r\n}\r\n@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n    if (mImageViewDisplayerManager!= null) {\r\nmImageViewDisplayerManager.onDestroy();\r\n    }\r\n}\r\n@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n    if (mImageViewDisplayerManager!= null) {\r\nmImageViewDisplayerManager.onPause();\r\n    }\r\n}\r\n@Override\r\npublic void onResume() {\r\n    super.onResume"}], "metadata": {"task_id": "RedReader/89", "ground_truth": "        mImageViewDisplayerManager.resetTouchState();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\ImageViewActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.views.liststatus.ErrorView\nimport org.quantumbadger.redreader.common.RRError\nimport org.quantumbadger.redreader.common.General\nimport org.quantumbadger.redreader.common.AndroidCommon\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\nimport android.widget.LinearLayout\nimport android.widget.ImageView\nimport android.view.View\n@Override\r\npublic void onFailure(@NonNull final RRError error) {\r\n    synchronized (resultLock) {\r\n        if (!failed.getAndSet(true)) {\r\n            AndroidCommon.UI_THREAD_HANDLER.post(() -> {\r\n                final LinearLayout layout = new LinearLayout(ImageViewActivity.this);\r\n                final ErrorView errorView = new ErrorView(ImageViewActivity.this, error);\r\n                layout.addView(errorView);\r\n                General.setLayoutMatchWidthWrapHeight(errorView);\r", "choices": [{"text": "//                layout.setBackgroundColor(Color.WHITE);\r\n                layout.setPadding(0, 0, 0, 0);\r\n                layout.setGravity(Gravity.CENTER);\r\n                layout.setOrientation(LinearLayout.VERTICAL);\r\n                layout.addView(errorView);\r\n                setContentView(layout);\r\n            });\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/90", "ground_truth": "                setMainView(layout);\r\n            });\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\ImageViewActivity.java"}}
{"prompt": "\n import java.util.UUID\nimport java.io.InputStream\nimport java.io.IOException\nimport org.quantumbadger.redreader.common.time.TimestampUTC\nimport org.quantumbadger.redreader.common.datastream.SeekableInputStream\nimport org.quantumbadger.redreader.common.GenericFactory\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.net.Uri\n@Override\r\npublic void onDataStreamAvailable(@NonNull final GenericFactory<SeekableInputStream, IOException> streamFactory, final TimestampUTC timestamp, @NonNull final UUID session, final boolean fromCache, @Nullable final String mimetype) {\r\n    synchronized (resultLock) {\r\n        if (audio.get() != null || audioUri == null) {\r\n            onImageStreamReady(!fromCache, streamFactory, audio.get(), mimetype, Uri.parse(uri.toString()));\r\n        } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/93", "ground_truth": "            video.set(streamFactory);\r\n            videoMimetype.set(mimetype);\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\ImageViewActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.views.liststatus.ErrorView\nimport org.quantumbadger.redreader.common.RRError\nimport org.quantumbadger.redreader.common.General\nimport org.quantumbadger.redreader.common.AndroidCommon\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.UiThread\nimport androidx.annotation.NonNull\nimport android.widget.LinearLayout\nimport android.widget.ImageView\nimport android.view.View\n@Override\r\npublic void onFailure(@NonNull final RRError error) {\r\n    synchronized (resultLock) {\r\n        if (!failed.getAndSet(true)) {\r\n            AndroidCommon.runOnUiThread(() -> {\r\n                final LinearLayout layout = new LinearLayout(ImageViewActivity.this);\r\n                final ErrorView errorView = new ErrorView(ImageViewActivity.this, error);\r\n                layout.addView(errorView);\r\n                General.setLayoutMatchWidthWrapHeight(errorView);\r", "choices": [{"text": "//                layout.setBackgroundColor(Color.WHITE);\r\n                setContentView(layout);\r\n            });\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/94", "ground_truth": "                setMainView(layout);\r\n            });\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\ImageViewActivity.java"}}
{"prompt": "\n import java.util.UUID\nimport java.io.InputStream\nimport java.io.IOException\nimport org.quantumbadger.redreader.common.time.TimestampUTC\nimport org.quantumbadger.redreader.common.datastream.SeekableInputStream\nimport org.quantumbadger.redreader.common.GenericFactory\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.net.Uri\n@Override\r\npublic void onDataStreamAvailable(@NonNull final GenericFactory<SeekableInputStream, IOException> streamFactory, final TimestampUTC timestamp, @NonNull final UUID session, final boolean fromCache, @Nullable final String mimetype) {\r\n    synchronized (resultLock) {\r\n        if (video.get() != null) {\r\n            onImageStreamReady(!fromCache, video.get(), streamFactory, videoMimetype.get(), Uri.parse(uri.toString()));\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/95", "ground_truth": "        } else {\r\n            audio.set(streamFactory);\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\ImageViewActivity.java"}}
{"prompt": "\n @Override\r\npublic void onOutOfMemory() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.onOutOfMemory();\r\nSystem.gc();\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/98", "ground_truth": "    General.quickToast(ImageViewActivity.this, R.string.imageview_oom);\r\n    revertToWeb();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\ImageViewActivity.java"}}
{"prompt": "\n @Override\r\npublic void onGifInvalid() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/99", "ground_truth": "    General.quickToast(ImageViewActivity.this, R.string.imageview_invalid_gif);\r\n    revertToWeb();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\ImageViewActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General\n@Override\r\npublic void onBackPressed() {\r\n    if (General.onBackPressed()) {\r", "choices": [{"text": "//        super.onBackPressed();\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/101", "ground_truth": "        super.onBackPressed();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\ImgurUploadActivity.java"}}
{"prompt": "\n public void cancel() {\r\n    if (request != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/103", "ground_truth": "        request.cancel();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\InboxListingActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General\n@Override\r\npublic void onBackPressed() {\r\n    if (General.onBackPressed()) {\r", "choices": [{"text": "//        super.onBackPressed();\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/105", "ground_truth": "        super.onBackPressed();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\InboxListingActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport android.view.Menu\n@Override\r\npublic boolean onCreateOptionsMenu(final Menu menu) {\r\n    if (inboxType == InboxType.SENT) {\r\n        return false;\r\n    }\r\n    menu.add(0, OPTIONS_MENU_MARK_ALL_AS_READ, 0, R.string.mark_all_as_read);\r\n    menu.add(0, OPTIONS_MENU_SHOW_UNREAD_ONLY, 1, R.string.inbox_unread_only);\r\n    menu.getItem(1).setCheckable(true);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "RedReader/106", "ground_truth": "    if (mOnlyShowUnread) {\r\n        menu.getItem(1).setChecked(true);\r\n    }\r\n    return super.onCreateOptionsMenu(menu);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\InboxListingActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.things.RedditSubreddit\nimport org.quantumbadger.redreader.reddit.api.RedditSubredditSubscriptionManager\nimport org.quantumbadger.redreader.account.RedditAccountManager\nimport org.quantumbadger.redreader.account.RedditAccount\nimport org.quantumbadger.redreader.R\nprivate void recreateSubscriptionListener() {\r\n    final RedditSubredditSubscriptionManager.ListenerContext oldContext = mSubredditSubscriptionListenerContext.getAndSet(RedditSubredditSubscriptionManager.getSingleton(this, RedditAccountManager.getInstance(this).getDefaultAccount()).addListener(this));\r\n    if (oldContext != null) {\r", "choices": [{"text": "\n import org.quantumbadger.redreader.reddit.things.RedditSubreddit\nimport org.quantumbadger.redreader.reddit.api.RedditSubredditSubscriptionManager\nimport org.quantumbadger.redreader.account.RedditAccountManager\nimport org.quantumbadger.redreader.account.RedditAccount\nimport org.quantumbadger.redreader.R\nprivate void recreateSubscriptionListener() {\r\n    final RedditSubredditSubscriptionManager.ListenerContext oldContext = mSubredditSubscriptionListenerContext.getAndSet(RedditSubredditSubscriptionManager.getSingleton(this, RedditAccountManager.getInstance(this).getDefaultAccount()).addListener(this));\r\n    if (oldContext!= null) {\r\n//        oldContext.remove();\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/107", "ground_truth": "        oldContext.removeListener();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\MainActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport androidx.annotation.Nullable\nimport android.widget.AdapterView\nimport android.view.View\n@Override\r\npublic void onItemSelected(@Nullable final AdapterView<?> adapterView, @Nullable final View view, final int i, final long l) {\r\n    final String typeName = typeReturnValues[destinationType.getSelectedItemPosition()];\r\n    if (\"subreddit\".equals(typeName)) {\r", "choices": [{"text": "//        final String subredditName = subredditName.getText().toString();\r\n//        if (subredditName.length() > 0) {\r\n//            final String subredditName = subredditName.getText().toString();\r\n//            final String subredditName = subredditName.getText().toString();\r\n//            final String subredditName = subredditName.getText().toString();\r\n//            final String subredditName = subredditName.getText().toString();\r\n//            final String subredditName = subredditName.getText().toString();\r\n//           "}], "metadata": {"task_id": "RedReader/109", "ground_truth": "        editText.setAdapter(autocompleteAdapter);\r\n    } else {\r\n        editText.setAdapter(null);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\MainActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.account.RedditAccount\nimport org.quantumbadger.redreader.R\n@Override\r\npublic void onRedditAccountChanged() {\r\n    recreateSubscriptionListener();\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/111", "ground_truth": "    postInvalidateOptionsMenu();\r\n    requestRefresh(RefreshableFragment.ALL, false);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\MainActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\n@Override\r\npublic void onRefreshComments() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.onRefreshComments();\r\n}\r\n@Override\r\npublic void onRefresh() {\r\n// TODO Auto-generated method stub\r\nsuper.onRefresh();\r\n}\r\n@Override\r\npublic void onRefreshComments() {\r\n// TODO Auto-generated method stub\r\nsuper.onRefreshComments();\r\n}\r\n@Override\r\npublic void onRefresh() {\r\n// TODO Auto-generated method stub\r\nsuper.onRefresh();\r\n}\r\n@Override\r\npublic void onRefreshComments() {\r"}], "metadata": {"task_id": "RedReader/113", "ground_truth": "    commentListingController.setSession(null);\r\n    requestRefresh(RefreshableFragment.COMMENTS, true);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\MainActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.PostCommentSort\n@Override\r\npublic void onSortSelected(final PostCommentSort order) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\n}\r\n});\r\n"}], "metadata": {"task_id": "RedReader/115", "ground_truth": "    commentListingController.setSort(order);\r\n    requestRefresh(RefreshableFragment.COMMENTS, false);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\MainActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.UserCommentSort\n@Override\r\npublic void onSortSelected(final UserCommentSort order) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\n}\r\n});\r\n"}], "metadata": {"task_id": "RedReader/116", "ground_truth": "    commentListingController.setSort(order);\r\n    requestRefresh(RefreshableFragment.COMMENTS, false);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\MainActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\n@Override\r\npublic void onRefreshPosts() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.onRefreshPosts();\r\n}\r\n@Override\r\npublic void onRefreshComments() {\r\n// TODO Auto-generated method stub\r\nsuper.onRefreshComments();\r\n}\r\n@Override\r\npublic void onRefreshLikes() {\r\n// TODO Auto-generated method stub\r\nsuper.onRefreshLikes();\r\n}\r\n@Override\r\npublic void onRefreshFollowers() {\r\n// TODO Auto-generated method stub\r\nsuper.onRefreshFollowers();\r\n}\r\n@Override\r\n"}], "metadata": {"task_id": "RedReader/118", "ground_truth": "    postListingController.setSession(null);\r\n    requestRefresh(RefreshableFragment.POSTS, true);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\MainActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.PostSort\n@Override\r\npublic void onSortSelected(final PostSort order) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\n}\r\n});\r\n"}], "metadata": {"task_id": "RedReader/121", "ground_truth": "    postListingController.setSort(order);\r\n    requestRefresh(RefreshableFragment.POSTS, false);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\MainActivity.java"}}
{"prompt": "\n @Override\r\npublic void onSubscribe() {\r\n    if (postListingFragment != null) {\r", "choices": [{"text": "\n @Override\r\npublic void onSubscribe() {\r\n    if (postListingFragment!= null) {\r\npostListingFragment.onSubscribe();\r\n    }\r\n}\r\n\r\n@Override\r\npublic void onUnsubscribe() {\r\n    if (postListingFragment!= null) {\r\npostListingFragment.onUnsubscribe();\r\n    }\r\n}\r\n\r\n@Override\r\npublic void onNext(PostListing postListing) {\r\n    if (postListingFragment!= null) {\r\npostListingFragment.onNext(postListing);\r\n    }\r\n}\r\n\r\n@Override\r\npublic void onError(Throwable e) {\r\n    if (postListingFragment!= null) {\r\npostListingFragment.onError(e);"}], "metadata": {"task_id": "RedReader/122", "ground_truth": "        postListingFragment.onSubscribe();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\MainActivity.java"}}
{"prompt": "\n @Override\r\npublic void onUnsubscribe() {\r\n    if (postListingFragment != null) {\r", "choices": [{"text": "\n @Override\r\npublic void onUnsubscribe() {\r\n    if (postListingFragment!= null) {\r\npostListingFragment.onUnsubscribe();\r\n    }\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/123", "ground_truth": "        postListingFragment.onUnsubscribe();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\MainActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport android.view.Menu\n@Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n    if (mainMenuFragment != null) {\r", "choices": [{"text": "\n import org.quantumbadger.redreader.R\nimport android.view.Menu\n@Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n    if (mainMenuFragment!= null) {\r\nmainMenuFragment.onResume();\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/128", "ground_truth": "        mainMenuFragment.onUpdateAnnouncement();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\MainActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onOptionsItemSelected(@NonNull final MenuItem item) {\r\n    if (commentListingFragment != null) {\r\n        if (commentListingFragment.onOptionsItemSelected(item)) {\r\n            return true;\r\n        }\r\n    }\r\n    switch(item.getItemId()) {\r\n        case android.R.id.home:\r\n            onBackPressed();\r", "choices": [{"text": "\n import org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onOptionsItemSelected(@NonNull final MenuItem item) {\r\n    if (commentListingFragment!= null) {\r\n        if (commentListingFragment.onOptionsItemSelected(item)) {\r\n            return true;\r\n        }\r\n    }\r\n    switch(item.getItemId()) {\r\n        case android.R.id.home:\r\n            onBackPressed();\r\nreturn true;\r\n        case R.id.action_refresh:\r\n            refresh();\r\nreturn true;\r\n        case R.id.action_settings:\r\n            startActivity(new Intent(this, SettingsActivity.class));\r\nreturn true;\r\n        case R.id.action_about:\r\n            startActivity(new Intent(this, AboutActivity.class));\r\nreturn true;\r\n        case R.id.action_search:\r\n            startActivity(new Intent(this, SearchActivity.class));\r\nreturn true;\r\n        case R.id.action_share:\r\n            share();\r\nreturn true;\r\n        case R."}], "metadata": {"task_id": "RedReader/129", "ground_truth": "            return true;\r\n        default:\r\n            return super.onOptionsItemSelected(item);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\MainActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\n@Override\r\npublic void onSessionRefreshSelected(final SessionChangeType type) {\r\n    switch(type) {\r\n        case POSTS:\r\n            onRefreshPosts();\r\n            break;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/131", "ground_truth": "        case COMMENTS:\r\n            onRefreshComments();\r\n            break;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\MainActivity.java"}}
{"prompt": "\n import java.util.UUID\nimport org.quantumbadger.redreader.common.time.TimestampUTC\n@Override\r\npublic void onSessionChanged(final UUID session, final SessionChangeType type, final TimestampUTC timestamp) {\r\n    switch(type) {\r\n        case POSTS:\r\n            if (postListingController != null) {\r\n                postListingController.setSession(session);\r\n            }\r\n            break;\r\n        case COMMENTS:\r\n            if (commentListingController != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/132", "ground_truth": "                commentListingController.setSession(session);\r\n            }\r\n            break;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\MainActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.PostSort\n@Override\r\npublic PostSort getPostSort() {\r\n    if (postListingController == null) {\r\n        return null;\r", "choices": [{"text": "}\r\nreturn postListingController.getPostSort();\r\n}\r\n"}], "metadata": {"task_id": "RedReader/133", "ground_truth": "    }\r\n    return postListingController.getSort();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\MainActivity.java"}}
{"prompt": "\n import android.view.Menu\n@Override\r\npublic OptionsMenuUtility.Sort getCommentSort() {\r\n    if (commentListingController == null) {\r\n        return null;\r", "choices": [{"text": "}\r\nreturn commentListingController.getCommentSort();\r\n}\r\n"}], "metadata": {"task_id": "RedReader/134", "ground_truth": "    }\r\n    return commentListingController.getSort();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\MainActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.PostCommentSort\n@Override\r\npublic PostCommentSort getSuggestedCommentSort() {\r\n    if (commentListingFragment == null || commentListingFragment.getPost() == null) {\r\n        return null;\r", "choices": [{"text": "}\r\nreturn commentListingFragment.getPost().getCommentSort();\r\n}\r\n"}], "metadata": {"task_id": "RedReader/135", "ground_truth": "    }\r\n    return commentListingFragment.getPost().src.getSuggestedCommentSort();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\MainActivity.java"}}
{"prompt": "\n import android.view.Menu\nimport android.os.Bundle\n// TODO save instance state\r\n// @Override\r\n// protected void onSaveInstanceState(final Bundle outState) {\r\n// \tsuper.onSaveInstanceState(outState);\r\n// }\r\n@Override\r\npublic boolean onCreateOptionsMenu(final Menu menu) {\r\n    OptionsMenuUtility.prepare(this, menu, false, false, true, false, false, false, false, false, false, null, false, false, null, null);\r", "choices": [{"text": "}\r\n@Override\r\npublic boolean onOptionsItemSelected(final MenuItem item) {\r\n    return OptionsMenuUtility.handle(this, item);\r\n}\r\n@Override\r\nprotected void onCreate(final Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    setContentView(R.layout.activity_main);\r\n}\r\n"}], "metadata": {"task_id": "RedReader/136", "ground_truth": "    if (mFragment != null) {\r\n        mFragment.onCreateOptionsMenu(menu);\r\n    }\r\n    return true;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\MoreCommentsListingActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.fragments.CommentListingFragment\nimport org.quantumbadger.redreader.R\nimport android.os.Bundle\n@Override\r\nprotected void doRefresh(final RefreshableFragment which, final boolean force, final Bundle savedInstanceState) {\r\n    mFragment = new CommentListingFragment(this, savedInstanceState, mUrls, null, mSearchString, force);\r", "choices": [{"text": "}\r\n@Override\r\nprotected void doRefresh(final RefreshableFragment which, final boolean force, final Bundle savedInstanceState) {\r\n    mFragment = new CommentListingFragment(this, savedInstanceState, mUrls, null, mSearchString, force);\r\n}\r\n@Override\r\nprotected void doRefresh(final RefreshableFragment which, final boolean force, final Bundle savedInstanceState) {\r\n    mFragment = new CommentListingFragment(this, savedInstanceState, mUrls, null, mSearchString, force);\r\n}\r\n@Override\r\nprotected void doRefresh(final RefreshableFragment which, final boolean force"}], "metadata": {"task_id": "RedReader/137", "ground_truth": "    mFragment.setBaseActivityContent(this);\r\n    setTitle(\"More Comments\");\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\MoreCommentsListingActivity.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onOptionsItemSelected(@NonNull final MenuItem item) {\r\n    if (mFragment != null && mFragment.onOptionsItemSelected(item)) {\r\n        return true;\r", "choices": [{"text": "\n import androidx.annotation.NonNull\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onOptionsItemSelected(@NonNull final MenuItem item) {\r\n    if (mFragment!= null && mFragment.onOptionsItemSelected(item)) {\r\n        return true;\r\n}\r\nreturn super.onOptionsItemSelected(item);\r\n}\r\n@Override\r\npublic boolean onCreateOptionsMenu(final Menu menu) {\r\n    getMenuInflater().inflate(R.menu.menu_main, menu);\r\n    return true;\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/139", "ground_truth": "    }\r\n    return super.onOptionsItemSelected(item);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\MoreCommentsListingActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General\n@Override\r\npublic void onBackPressed() {\r\n    if (General.onBackPressed()) {\r", "choices": [{"text": "//        super.onBackPressed();\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/140", "ground_truth": "        super.onBackPressed();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\MoreCommentsListingActivity.java"}}
{"prompt": "\n @Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r", "choices": [{"text": "}\r\n\r\n"}], "metadata": {"task_id": "RedReader/141", "ground_truth": "    final CookieManager cookieManager = CookieManager.getInstance();\r\n    cookieManager.removeAllCookie();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\OAuthLoginActivity.java"}}
{"prompt": "\n @Override\r\nprotected void onPause() {\r\n    super.onPause();\r", "choices": [{"text": "}\r\n\r\n@Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n}\r\n\r\n@Override\r\nprotected void onDestroy() {\r\n    super.onDestroy();\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "RedReader/143", "ground_truth": "    if (mWebView != null) {\r\n        mWebView.onPause();\r\n        mWebView.pauseTimers();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\OAuthLoginActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\n@Override\r\nprotected void onResume() {\r\n    super.onResume();\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/144", "ground_truth": "    if (mWebView != null) {\r\n        mWebView.resumeTimers();\r\n        mWebView.onResume();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\OAuthLoginActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport android.view.MenuItem\nimport android.view.Menu\npublic static int handleShowAsActionIfRoom(final int showAsAction) {\r\n    if (showAsAction == MenuItem.SHOW_AS_ACTION_IF_ROOM) {\r\n        return MenuItem.SHOW_AS_ACTION_ALWAYS;\r", "choices": [{"text": "}\r\nreturn showAsAction;\r\n}\n"}], "metadata": {"task_id": "RedReader/148", "ground_truth": "    }\r\n    return showAsAction;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\OptionsMenuUtility.java"}}
{"prompt": "\n import java.util.Map\n// Avoids IDE warnings about null pointers\r\npublic static int getOrThrow(final Map<AppbarItemsPref, Integer> appbarItemsPref, final AppbarItemsPref key) {\r\n    final Integer value = appbarItemsPref.get(key);\r", "choices": [{"text": "//    if (value == null) {\r\n//        throw new IllegalArgumentException(\"No value for key \" + key);\r\n//    }\r\n    return value;\r\n}\n"}], "metadata": {"task_id": "RedReader/149", "ground_truth": "    if (value == null) {\r\n        throw new RuntimeException(\"appbarItemsPref value is null\");\r\n    }\r\n    return value;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\OptionsMenuUtility.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.RRError\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\n@Override\r\nprotected void onFailure(@NonNull final RRError error) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/153", "ground_truth": "    General.showResultDialog(PMSendActivity.this, error);\r\n    General.safeDismissDialog(progressDialog);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\PMSendActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General\n@Override\r\npublic void onBackPressed() {\r\n    if (General.onBackPressed()) {\r", "choices": [{"text": "//        super.onBackPressed();\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/155", "ground_truth": "        super.onBackPressed();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\PMSendActivity.java"}}
{"prompt": "\n import java.util.UUID\nimport org.quantumbadger.redreader.reddit.PostSort\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\nimport android.os.Bundle\n@Override\r\nprotected void onSaveInstanceState(@NonNull final Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r\n    final UUID session = controller.getSession();\r\n    if (session != null) {\r\n        outState.putString(SAVEDSTATE_SESSION, session.toString());\r\n    }\r\n    final PostSort sort = controller.getSort();\r\n    if (sort != null) {\r\n        outState.putString(SAVEDSTATE_SORT, sort.name());\r", "choices": [{"text": "\n import java.util.UUID\nimport org.quantumbadger.redreader.reddit.PostSort\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\nimport android.os.Bundle\n@Override\r\nprotected void onSaveInstanceState(@NonNull final Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r\n    final UUID session = controller.getSession();\r\n    if (session!= null) {\r\n        outState.putString(SAVEDSTATE_SESSION, session.toString());\r\n    }\r\n    final PostSort sort = controller.getSort();\r\n    if (sort!= null) {\r\n        outState.putString(SAVEDSTATE_SORT, sort.name());\r\n}\r\n}\r\n@Override\r\nprotected void onRestoreInstanceState(@NonNull final Bundle savedInstanceState) {\r\n    super.onRestoreInstanceState(savedInstanceState);\r\n    final String session = savedInstanceState.getString(SAVEDSTATE_SESSION);\r\n    if (session!= null) {\r\n        controller.setSession(UUID.fromString(session));\r\n    }\r\n    final String sort = savedInstanceState.getString(SAVEDSTATE_SORT);\r\n    if (sort!= null) {\r\n        controller.setSort(PostSort.valueOf(sort));\r\n    }\r\n}\r\n}\r\n<file_sep>/app/src/main/java/org/quantumb"}], "metadata": {"task_id": "RedReader/156", "ground_truth": "    }\r\n    if (fragment != null) {\r\n        outState.putBundle(SAVEDSTATE_FRAGMENT, fragment.onSaveInstanceState());\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\PostListingActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.things.RedditSubreddit\nimport org.quantumbadger.redreader.reddit.api.RedditSubredditSubscriptionManager\nimport org.quantumbadger.redreader.account.RedditAccountManager\nimport org.quantumbadger.redreader.account.RedditAccount\nimport org.quantumbadger.redreader.R\nprivate void recreateSubscriptionListener() {\r\n    final RedditSubredditSubscriptionManager.ListenerContext oldContext = mSubredditSubscriptionListenerContext.getAndSet(RedditSubredditSubscriptionManager.getSingleton(this, RedditAccountManager.getInstance(this).getDefaultAccount()).addListener(this));\r\n    if (oldContext != null) {\r", "choices": [{"text": "\n import org.quantumbadger.redreader.reddit.things.RedditSubreddit\nimport org.quantumbadger.redreader.reddit.api.RedditSubredditSubscriptionManager\nimport org.quantumbadger.redreader.account.RedditAccountManager\nimport org.quantumbadger.redreader.account.RedditAccount\nimport org.quantumbadger.redreader.R\nprivate void recreateSubscriptionListener() {\r\n    final RedditSubredditSubscriptionManager.ListenerContext oldContext = mSubredditSubscriptionListenerContext.getAndSet(RedditSubredditSubscriptionManager.getSingleton(this, RedditAccountManager.getInstance(this).getDefaultAccount()).addListener(this));\r\n    if (oldContext!= null) {\r\n//        oldContext.remove();\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/158", "ground_truth": "        oldContext.removeListener();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\PostListingActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.account.RedditAccount\nimport org.quantumbadger.redreader.R\n@Override\r\npublic void onRedditAccountChanged() {\r\n    recreateSubscriptionListener();\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/159", "ground_truth": "    postInvalidateOptionsMenu();\r\n    requestRefresh(RefreshableFragment.ALL, false);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\PostListingActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\n@Override\r\npublic void onRefreshPosts() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.onRefreshPosts();\r\n}\r\n@Override\r\npublic void onRefreshComments() {\r\n// TODO Auto-generated method stub\r\nsuper.onRefreshComments();\r\n}\r\n@Override\r\npublic void onRefreshLikes() {\r\n// TODO Auto-generated method stub\r\nsuper.onRefreshLikes();\r\n}\r\n@Override\r\npublic void onRefreshFollowers() {\r\n// TODO Auto-generated method stub\r\nsuper.onRefreshFollowers();\r\n}\r\n@Override\r\n"}], "metadata": {"task_id": "RedReader/161", "ground_truth": "    controller.setSession(null);\r\n    requestRefresh(RefreshableFragment.POSTS, true);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\PostListingActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.PostSort\n@Override\r\npublic void onSortSelected(final PostSort order) {\r\n    controller.setSort(order);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/164", "ground_truth": "    requestRefresh(RefreshableFragment.POSTS, false);\r\n    invalidateOptionsMenu();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\PostListingActivity.java"}}
{"prompt": "\n import java.util.UUID\n@Override\r\npublic void onSessionSelected(final UUID session, final SessionChangeType type) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.onSessionSelected(session, type);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/168", "ground_truth": "    controller.setSession(session);\r\n    requestRefresh(RefreshableFragment.POSTS, false);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\PostListingActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General\n@Override\r\npublic void onBackPressed() {\r\n    if (General.onBackPressed()) {\r", "choices": [{"text": "//        super.onBackPressed();\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/170", "ground_truth": "        super.onBackPressed();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\PostSubmitActivity.java"}}
{"prompt": "\n import android.util.Log\n@Override\r\npublic void onNotLoggedIn() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nLog.d(\"onNotLoggedIn\", \"onNotLoggedIn\");\r\n}\r\n@Override\r\npublic void onLoggedIn() {\r\n// TODO Auto-generated method stub\r\nLog.d(\"onLoggedIn\", \"onLoggedIn\");\r\n}\r\n@Override\r\npublic void onLoginFailed() {\r\n// TODO Auto-generated method stub\r\nLog.d(\"onLoginFailed\", \"onLoginFailed\");\r\n}\r\n@Override\r\npublic void onLoginCancelled() {\r\n// TODO Auto-generated method stub\r\nLog"}], "metadata": {"task_id": "RedReader/171", "ground_truth": "    General.quickToast(this, R.string.error_toast_notloggedin);\r\n    finish();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\PostSubmitActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.LinkHandler\nimport androidx.annotation.Nullable\n@Override\r\npublic void onContentFragmentSubmissionSuccess(@Nullable final String redirectUrl) {\r\n    if (redirectUrl != null) {\r\n        LinkHandler.onLinkClicked(this, redirectUrl);\r", "choices": [{"text": "\n import org.quantumbadger.redreader.common.LinkHandler\nimport androidx.annotation.Nullable\n@Override\r\npublic void onContentFragmentSubmissionSuccess(@Nullable final String redirectUrl) {\r\n    if (redirectUrl!= null) {\r\n        LinkHandler.onLinkClicked(this, redirectUrl);\r\n}\r\n}\n"}], "metadata": {"task_id": "RedReader/172", "ground_truth": "    }\r\n    finish();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\PostSubmitActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.RRError\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\n@Override\r\npublic void onContentFragmentFlairRequestError(@NonNull final RRError error) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/175", "ground_truth": "    onBackPressed();\r\n    General.showResultDialog(this, error);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\PostSubmitActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport androidx.appcompat.app.AppCompatActivity\nimport android.content.Intent\n\t@JvmStatic\r\n\t\tfun launch(activity: AppCompatActivity, launchMainOnClose: Boolean) {\r\n\t\t\tval intent = Intent(activity, RedditTermsActivity::class.java)\r", "choices": [{"text": "intent.putExtra(RedditTermsActivity.EXTRA_LAUNCH_MAIN_ON_CLOSE, launchMainOnClose)\r\n\t\t\tactivity.startActivity(intent)\r\n\t\t}\r\n\t}\r\n}\r\n<file_sep>/app/src/main/java/org/quantumbadger/redreader/ui/RedditTermsActivity.kt\npackage org.quantumbadger.redreader.ui\n\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Button\nimport android.widget.TextView"}], "metadata": {"task_id": "RedReader/176", "ground_truth": "\t\t\tintent.putExtra(extraLaunchMain, launchMainOnClose)\r\n\t\t\tactivity.startActivity(intent)\r\n\t\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\RedditTermsActivity.kt"}}
{"prompt": "\n @Override\r\nprotected void onPause() {\r", "choices": [{"text": "super.onPause();\r\nif (mAdView!= null) {\r\nmAdView.pause();\r\n}\r\n}\r\n\r\n@Override\r\nprotected void onResume() {\r\nsuper.onResume();\r\nif (mAdView!= null) {\r\nmAdView.resume();\r\n}\r\n}\r\n\r\n@Override\r\nprotected void onDestroy() {\r\nif (mAdView!= null) {\r\nmAdView.destroy();\r\n}\r\nsuper.onDestroy();\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "RedReader/177", "ground_truth": "    super.onPause();\r\n    paused = true;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\RefreshableActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\n@Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n    paused = false;\r\n    if (!refreshOnResume.isEmpty()) {\r\n        for (final RefreshableFragment f : refreshOnResume) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/178", "ground_truth": "            doRefreshNow(f, false);\r\n        }\r\n        refreshOnResume.clear();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\RefreshableActivity.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.content.res.Configuration\n@Override\r\npublic void onConfigurationChanged(@NonNull final Configuration newConfig) {\r", "choices": [{"text": "super.onConfigurationChanged(newConfig);\r\nif (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n//landscape\r\n} else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {\r\n//portrait\r\n}\r\n}\n"}], "metadata": {"task_id": "RedReader/179", "ground_truth": "    invalidateOptionsMenu();\r\n    super.onConfigurationChanged(newConfig);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\RefreshableActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nprotected void doRefreshNow(final RefreshableFragment which, final boolean force) {\r\n    if (which == RefreshableFragment.RESTART) {\r", "choices": [{"text": "//        if (force) {\r\n//            // TODO: 2016-03-22 10:50:41 \u91cd\u542f\u65f6\uff0c\u5f3a\u5236\u5237\u65b0\r\n//            // \u91cd\u542f\u65f6\uff0c\u5f3a\u5236\u5237\u65b0\r\n//            // \u91cd\u542f\u65f6\uff0c\u5f3a\u5236\u5237\u65b0\r\n//            // \u91cd\u542f\u65f6\uff0c\u5f3a\u5236\u5237\u65b0\r\n//            // \u91cd\u542f\u65f6\uff0c\u5f3a\u5236\u5237\u65b0\r\n//            // \u91cd\u542f\u65f6\uff0c\u5f3a\u5236\u5237\u65b0\r\n//            // \u91cd\u542f\u65f6\uff0c\u5f3a\u5236\u5237\u65b0\r\n//            // \u91cd"}], "metadata": {"task_id": "RedReader/180", "ground_truth": "        General.recreateActivityNoAnimation(this);\r\n    } else {\r\n        doRefresh(which, force, null);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\RefreshableActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.views.SubredditSearchQuickLinks\nimport org.quantumbadger.redreader.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\nimport android.view.LayoutInflater\n@Override\r\npublic RecyclerView.ViewHolder onCreateViewHolder(final ViewGroup viewGroup) {\r\n    final SubredditSearchQuickLinks quickLinks = (SubredditSearchQuickLinks) LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.subreddit_search_quick_links, viewGroup, false);\r\n    quickLinks.bind(SubredditSearchActivity.this, queryEventListeners);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/182", "ground_truth": "    return new RecyclerView.ViewHolder(quickLinks) {\r\n    };\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\SubredditSearchActivity.java"}}
{"prompt": "\n @Override\r\npublic boolean onQueryTextSubmit(final String query) {\r\n    handleQueryChanged(query);\r\n    queryEventListeners.send(query);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/183", "ground_truth": "    searchView.clearFocus();\r\n    return true;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\SubredditSearchActivity.java"}}
{"prompt": "\n @Override\r\npublic boolean onQueryTextChange(final String newText) {\r\n    handleQueryChanged(newText);\r", "choices": [{"text": "return true;\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/184", "ground_truth": "    queryEventListeners.send(newText);\r\n    return true;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\SubredditSearchActivity.java"}}
{"prompt": "\n import java.util.ArrayList\nimport org.quantumbadger.redreader.reddit.SubredditDetails\nimport org.quantumbadger.redreader.reddit.RedditAPI\nimport org.quantumbadger.redreader.common.collections.CollectionStream\nimport org.quantumbadger.redreader.common.AndroidCommon\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\nimport android.util.Log\n@Override\r\nprotected void onSuccess(@NonNull final RedditAPI.SubredditListResponse value) {\r\n    Log.i(TAG, \"Search results received\");\r\n    final ArrayList<SubredditDetails> results = new CollectionStream<>(value.subreddits).map(SubredditDetails::newWithRuntimeException).collect(new ArrayList<>());\r\n    AndroidCommon.runOnUiThread(() -> {\r", "choices": [{"text": "//        mAdapter.setResults(results);\r\n        mAdapter.notifyDataSetChanged();\r\n    });\r\n}\r\n"}], "metadata": {"task_id": "RedReader/185", "ground_truth": "        mQueryResults.get().put(text, results);\r\n        mQueriesPending.get().remove(text);\r\n        updateList();\r\n    });\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\SubredditSearchActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General\nimport android.view.View\n@Override\r\npublic void onBackPressed() {\r\n    if (General.onBackPressed() && !webView.onBackButtonPressed()) {\r", "choices": [{"text": "\n import org.quantumbadger.redreader.common.General\nimport android.view.View\n@Override\r\npublic void onBackPressed() {\r\n    if (General.onBackPressed() &&!webView.onBackButtonPressed()) {\r\n//        super.onBackPressed();\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/189", "ground_truth": "        super.onBackPressed();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\activities\\WebViewActivity.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\nimport android.view.LayoutInflater\noverride fun onCreateHeaderItemViewHolder(parent: ViewGroup): RecyclerView.ViewHolder {\r\n\t\tval v = LayoutInflater.from(parent.context)\r", "choices": [{"text": ".inflate(R.layout.header_item, parent, false)\r\n\t\treturn HeaderItemViewHolder(v)\r\n\t}\noverride fun onBindHeaderItemViewHolder(holder: RecyclerView.ViewHolder, item: Any) {\r\n\t\tval headerItemViewHolder = holder as HeaderItemViewHolder\r\n\t\theaderItemViewHolder.bind(item as HeaderItem)\r\n\t}\noverride fun onCreateItemViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n\t\tval v = LayoutInflater.from(parent.context)\r\n.inflate(R.layout.item, parent, false)\r\n\t\treturn Item"}], "metadata": {"task_id": "RedReader/191", "ground_truth": "\t\t\t.inflate(R.layout.list_item_1_text, parent, false)\r\n\t\treturn VH1Text(v)\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\AccountListAdapter.kt"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\nimport android.view.LayoutInflater\noverride fun onCreateContentItemViewHolder(parent: ViewGroup): RecyclerView.ViewHolder {\r\n\t\tval v = LayoutInflater.from(parent.context)\r", "choices": [{"text": ".inflate(R.layout.item_content_article, parent, false)\r\n\t\treturn ArticleViewHolder(v)\r\n\t}\noverride fun onBindContentItemViewHolder(holder: RecyclerView.ViewHolder, item: Article) {\r\n\t\t(holder as ArticleViewHolder).bind(item)\r\n\t}\noverride fun onBindContentItemViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n\t\t(holder as ArticleViewHolder).bind(items[position])\r\n\t}\noverride fun onBindContentItemViewHolder(holder: RecyclerView.ViewHolder, item: Article, position: Int) {\r\n\t\t("}], "metadata": {"task_id": "RedReader/192", "ground_truth": "\t\t\t.inflate(R.layout.list_item_1_text, parent, false)\r\n\t\treturn VH1Text(v)\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\AccountListAdapter.kt"}}
{"prompt": "\nval accounts\nval rrIconAdd Drawable?\nval rrIconUser Drawable?\n private fun launchLogin() {\r", "choices": [{"text": "val intent = Intent(this, LoginActivity::class.java)\r\nstartActivity(intent)\r\nfinish()\r\n}\r\nprivate fun launchRegister() {\r\nval intent = Intent(this, RegisterActivity::class.java)\r\nstartActivity(intent)\r\nfinish()\r\n}\r\nprivate fun launchHome() {\r\nval intent = Intent(this, HomeActivity::class.java)\r\nstartActivity(intent)\r\nfinish()\r\n}\r\nprivate fun launchProfile() {\r\nval intent = Intent(this, ProfileActivity::class.java)\r\n"}], "metadata": {"task_id": "RedReader/194", "ground_truth": "\t\tval loginIntent = Intent(context, OAuthLoginActivity::class.java)\r\n\t\tfragment.startActivityForResult(loginIntent, 123)\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\AccountListAdapter.kt"}}
{"prompt": "\n import org.quantumbadger.redreader.common.RRError\nimport org.quantumbadger.redreader.common.General\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\nimport android.util.Log\n@Override\r\npublic void onFailure(@NonNull final RRError error) {\r\n    if (General.isSensitiveDebugLoggingEnabled()) {\r", "choices": [{"text": "Log.d(General.TAG, \"onFailure: \" + error.getMessage());\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/196", "ground_truth": "        Log.e(\"AlbumAdapter\", \"Failed to fetch thumbnail \" + imageInfo.urlBigSquare + \": \" + error, error.t);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\AlbumAdapter.java"}}
{"prompt": "\n import java.util.Collection\nimport org.quantumbadger.redreader.reddit.RedditCommentListItem\npublic void addComments(final Collection<RedditCommentListItem> comments) {\r\n    final Collection<GroupedRecyclerViewAdapter.Item<?>> filteredComments = filter(comments);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "RedReader/198", "ground_truth": "    addItems(filteredComments);\r\n    mCommentCount += filteredComments.size();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\FilteredCommentListingManager.java"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\nprivate void onBindViewHolderInner(final RecyclerView.ViewHolder viewHolder) {\r", "choices": [{"text": "//        if (viewHolder instanceof ViewHolder) {\r\n//            final ViewHolder holder = (ViewHolder) viewHolder;\r\n//            holder.itemView.setOnClickListener(new View.OnClickListener() {\r\n//                @Override\r\n//                public void onClick(View v) {\r\n//                    if (mOnItemClickListener!= null) {\r\n//                        mOnItemClickListener.onItemClick(holder.getAdapterPosition());\r\n//                    }\r\n//                }\r\n//            });\r\n//        }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/199", "ground_truth": "    //noinspection unchecked\r\n    onBindViewHolder((VH) viewHolder);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\GroupedRecyclerViewAdapter.java"}}
{"prompt": "\n import java.util.ArrayList\nprivate int getItemPositionInternal(final int groupId, final Item<?> item) {\r\n    final ArrayList<Item<?>> group = mItems[groupId];\r\n    for (int i = 0; i < group.size(); i++) {\r\n        if (group.get(i) == item) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/200", "ground_truth": "            return getItemPositionInternal(groupId, i);\r\n        }\r\n    }\r\n    throw new RuntimeException(\"Item not found\");\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\GroupedRecyclerViewAdapter.java"}}
{"prompt": "\n // \"positionInGroup\" should include both hidden and visible items\r\nprivate int getItemPositionInternal(final int group, final int positionInGroup) {\r\n    int result = 0;\r\n    for (int i = 0; i < group; i++) {\r\n        result += getGroupUnhiddenCount(i);\r\n    }\r\n    for (int i = 0; i < positionInGroup; i++) {\r\n        if (!mItems[group].get(i).mCurrentlyHidden) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/201", "ground_truth": "            result++;\r\n        }\r\n    }\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\GroupedRecyclerViewAdapter.java"}}
{"prompt": "\n @Override\r\npublic int getItemViewType(final int position) {\r\n    final Item<?> item = getItemInternal(position);\r\n    final Class<?> viewTypeClass = item.getViewType();\r\n    Integer typeId = mItemViewTypeMap.get(viewTypeClass);\r\n    if (typeId == null) {\r\n        typeId = mItemViewTypeMap.size();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/202", "ground_truth": "        mItemViewTypeMap.put(viewTypeClass, typeId);\r\n        mViewTypeItemMap.put(typeId, item);\r\n    }\r\n    return typeId;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\GroupedRecyclerViewAdapter.java"}}
{"prompt": "\n import java.util.ArrayList\nprivate int getGroupUnhiddenCount(final int groupId) {\r\n    final ArrayList<Item<?>> group = mItems[groupId];\r\n    int result = 0;\r\n    for (int i = 0; i < group.size(); i++) {\r\n        if (!group.get(i).mCurrentlyHidden) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/203", "ground_truth": "            result++;\r\n        }\r\n    }\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\GroupedRecyclerViewAdapter.java"}}
{"prompt": "\n @Override\r\npublic int getItemCount() {\r\n    int count = 0;\r", "choices": [{"text": "if (mData!= null) {\r\n    count = mData.size();\r\n}\r\nreturn count;\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "RedReader/204", "ground_truth": "    for (int i = 0; i < mItems.length; i++) {\r\n        count += getGroupUnhiddenCount(i);\r\n    }\r\n    return count;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\GroupedRecyclerViewAdapter.java"}}
{"prompt": "\n public void appendToGroup(final int group, final Item<?> item) {\r\n    final int position = getItemPositionInternal(group + 1, 0);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/205", "ground_truth": "    mItems[group].add(item);\r\n    if (!item.mCurrentlyHidden) {\r\n        notifyItemInserted(position);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\GroupedRecyclerViewAdapter.java"}}
{"prompt": "\n import java.util.ArrayList\npublic void removeAllFromGroup(final int groupId) {\r\n    final ArrayList<Item<?>> group = mItems[groupId];\r\n    for (int i = group.size() - 1; i >= 0; i--) {\r\n        final Item<?> item = group.get(i);\r\n        final int position = getItemPositionInternal(groupId, i);\r\n        group.remove(i);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/207", "ground_truth": "        if (!item.mCurrentlyHidden) {\r\n            notifyItemRemoved(position);\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\GroupedRecyclerViewAdapter.java"}}
{"prompt": "\n import java.util.ArrayList\npublic void removeFromGroup(final int groupId, final Item<?> item) {\r\n    final ArrayList<Item<?>> group = mItems[groupId];\r\n    for (int i = 0; i < group.size(); i++) {\r\n        if (group.get(i) == item) {\r\n            final int position = getItemPositionInternal(groupId, i);\r\n            group.remove(i);\r\n            if (!item.mCurrentlyHidden) {\r\n                notifyItemRemoved(position);\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/208", "ground_truth": "            return;\r\n        }\r\n    }\r\n    throw new RuntimeException(\"Item not found\");\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\GroupedRecyclerViewAdapter.java"}}
{"prompt": "\n public void notifyItemChanged(final int groupId, final Item<?> item) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/209", "ground_truth": "    final int position = getItemPositionInternal(groupId, item);\r\n    notifyItemChanged(position);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\GroupedRecyclerViewAdapter.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General\nimport androidx.recyclerview.widget.RecyclerView\nimport android.widget.FrameLayout\nimport android.view.ViewGroup\nimport android.view.View\n@Override\r\npublic RecyclerView.ViewHolder onCreateViewHolder(final ViewGroup viewGroup) {\r\n    General.setLayoutMatchWidthWrapHeight(viewGroup);\r\n    final FrameLayout frameLayout = new FrameLayout(viewGroup.getContext());\r", "choices": [{"text": "frameLayout.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));\r\n    return new RecyclerView.ViewHolder(frameLayout) {\r\n    };\r\n}\r\n@Override\r\npublic void onBindViewHolder(final RecyclerView.ViewHolder viewHolder, final int i) {\r\n    final FrameLayout frameLayout = (FrameLayout)viewHolder.itemView;\r\n}\r\n@Override\r\npublic int getItemCount() {\r\n    return 1;\r\n}\r\n}<file_sep>/app/src/main/java/org/quantumbadger/red"}], "metadata": {"task_id": "RedReader/210", "ground_truth": "    return new RecyclerView.ViewHolder(frameLayout) {\r\n    };\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\GroupedRecyclerViewItemFrameLayout.java"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\nimport android.widget.FrameLayout\nimport android.view.View\n@Override\r\npublic void onBindViewHolder(final RecyclerView.ViewHolder viewHolder) {\r\n    final FrameLayout view = (FrameLayout) viewHolder.itemView;\r\n    view.removeAllViews();\r\n    if (mParent != null && mChildView.getParent() == mParent) {\r\n        mParent.removeAllViews();\r", "choices": [{"text": "\n import androidx.recyclerview.widget.RecyclerView\nimport android.widget.FrameLayout\nimport android.view.View\n@Override\r\npublic void onBindViewHolder(final RecyclerView.ViewHolder viewHolder) {\r\n    final FrameLayout view = (FrameLayout) viewHolder.itemView;\r\n    view.removeAllViews();\r\n    if (mParent!= null && mChildView.getParent() == mParent) {\r\n        mParent.removeAllViews();\r\n}\r\nview.addView(mChildView);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/211", "ground_truth": "    }\r\n    mParent = view;\r\n    view.addView(mChildView);\r\n    General.setLayoutMatchWidthWrapHeight(mChildView);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\GroupedRecyclerViewItemFrameLayout.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.RRError\nimport androidx.annotation.NonNull\nimport android.widget.FrameLayout\npublic void bind(@NonNull final RRError error) {\r\n    final FrameLayout itemView = (FrameLayout) this.itemView;\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "RedReader/212", "ground_truth": "    itemView.removeAllViews();\r\n    itemView.addView(new ErrorView(mActivity, error));\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\GroupedRecyclerViewItemRRError.java"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\nimport android.view.View\n@Override\r\npublic RecyclerView.ViewHolder onCreateViewHolder(final ViewGroup viewGroup) {\r\n    final View view = mFactory.apply(viewGroup);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/213", "ground_truth": "    return new RecyclerView.ViewHolder(view) {\r\n    };\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\GroupedRecyclerViewItemView.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General\nprivate void hideMultiredditsHeader() {\r\n    General.checkThisIsUIThread();\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/217", "ground_truth": "    mMultiredditHeaderItem = null;\r\n    mAdapter.removeAllFromGroup(GROUP_MULTIREDDITS_HEADER);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\MainMenuListingManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.views.liststatus.ErrorView\nimport org.quantumbadger.redreader.common.AndroidCommon\nimport org.quantumbadger.redreader.R\nimport android.view.View\npublic void setMultiredditsError(final ErrorView errorView) {\r\n    AndroidCommon.UI_THREAD_HANDLER.post(() -> {\r\n        mAdapter.removeAllFromGroup(GROUP_MULTIREDDITS_ITEMS);\r", "choices": [{"text": "//        mAdapter.add(new ErrorItem(errorView));\r\n        mAdapter.notifyDataSetChanged();\r\n    });\r\n}\n"}], "metadata": {"task_id": "RedReader/218", "ground_truth": "        mAdapter.appendToGroup(GROUP_MULTIREDDITS_ITEMS, new GroupedRecyclerViewItemFrameLayout(errorView));\r\n    });\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\MainMenuListingManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.views.liststatus.ErrorView\nimport org.quantumbadger.redreader.common.AndroidCommon\nimport org.quantumbadger.redreader.R\nimport android.view.View\npublic void setSubredditsError(final ErrorView errorView) {\r\n    AndroidCommon.UI_THREAD_HANDLER.post(() -> {\r\n        mAdapter.removeAllFromGroup(GROUP_SUBREDDITS_ITEMS);\r", "choices": [{"text": "//        mAdapter.add(new ErrorItem(errorView));\r\n        mAdapter.add(new ErrorItem(errorView));\r\n        mAdapter.notifyDataSetChanged();\r\n    });\r\n}\n"}], "metadata": {"task_id": "RedReader/219", "ground_truth": "        mAdapter.appendToGroup(GROUP_SUBREDDITS_ITEMS, new GroupedRecyclerViewItemFrameLayout(errorView));\r\n    });\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\MainMenuListingManager.java"}}
{"prompt": "\n import android.widget.Filter\noverride fun getFilter() = object : Filter() {\r\n\r\n\t\toverride fun performFiltering(constraint: CharSequence?) = FilterResults().apply {\r\n\t\t\tvalues = ArrayList(allValues);\r\n\t\t\tcount = allValues.size\r\n\t\t}\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/223", "ground_truth": "\r\n\t\toverride fun publishResults(constraint: CharSequence?, results: FilterResults?) {\r\n\t\t\t// Nothing to do here\r\n\t\t}\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\NoFilterAdapter.kt"}}
{"prompt": "\n import java.util.Collection\nimport org.quantumbadger.redreader.reddit.RedditPostListItem\npublic void addPosts(final Collection<RedditPostListItem> posts) {\r", "choices": [{"text": "-    for (RedditPostListItem post : posts) {\r\n-        addPost(post);\r\n-    }\r\n+    posts.forEach(this::addPost);\r\n }\r\n \r\n public void addPost(final RedditPostListItem post) {\r\n     if (post == null) {\r\n         return;\r\n     }\r\n     if (post.isSelfPost()) {\r\n         return;\r\n     }\r\n     if (post.isDeleted()) {\r\n         return;\r\n     }\r\n     if (post.isArchived()) {\r\n         return;\r\n     }\r\n     if (post.isHidden()) {\r\n         return;\r\n    "}], "metadata": {"task_id": "RedReader/224", "ground_truth": "    addItems(Collections.unmodifiableCollection(posts));\r\n    mPostCount += posts.size();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\PostListingManager.java"}}
{"prompt": "\n import androidx.recyclerview.widget.LinearLayoutManager\npublic void setLayoutManager(final LinearLayoutManager layoutManager) {\r", "choices": [{"text": "this.layoutManager = layoutManager;\r\nthis.layoutManager.setOrientation(orientation);\r\nthis.layoutManager.setReverseLayout(reverseLayout);\r\nthis.layoutManager.setStackFromEnd(stackFromEnd);\r\nthis.layoutManager.setSmoothScrollbarEnabled(smoothScrollbarEnabled);\r\nthis.layoutManager.setMeasurementCacheEnabled(measurementCacheEnabled);\r\nthis.layoutManager.setRecycleChildrenOnDetach(recycleChildrenOnDetach);\r\nthis.layoutManager.setRecycleChildrenOnDetach(recycleChildrenOnDetach);\r\nthis.layoutManager."}], "metadata": {"task_id": "RedReader/225", "ground_truth": "    General.checkThisIsUIThread();\r\n    mLayoutManager = layoutManager;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\RedditListingManager.java"}}
{"prompt": "\n import android.view.View\n// Workaround for RecyclerView scrolling behaviour\r\nprivate void doWorkaround() {\r\n    if (!mWorkaroundDone && mLayoutManager != null) {\r\n        mLayoutManager.scrollToPositionWithOffset(0, 0);\r", "choices": [{"text": "\n import android.view.View\n// Workaround for RecyclerView scrolling behaviour\r\nprivate void doWorkaround() {\r\n    if (!mWorkaroundDone && mLayoutManager!= null) {\r\n        mLayoutManager.scrollToPositionWithOffset(0, 0);\r\n//        mLayoutManager.scrollToPosition(0);\r\n        mWorkaroundDone = true;\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/226", "ground_truth": "        mWorkaroundDone = true;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\RedditListingManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.views.RedditPostHeaderView\nimport org.quantumbadger.redreader.common.General\nimport android.view.View\npublic void addPostHeader(final RedditPostHeaderView view) {\r\n    General.checkThisIsUIThread();\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "RedReader/228", "ground_truth": "    mAdapter.appendToGroup(GROUP_HEADER, new GroupedRecyclerViewItemFrameLayout(view));\r\n    doWorkaround();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\RedditListingManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General\nimport android.view.View\npublic void addPostListingHeader(final View view) {\r\n    General.checkThisIsUIThread();\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "RedReader/229", "ground_truth": "    mAdapter.appendToGroup(GROUP_HEADER, new GroupedRecyclerViewItemFrameLayout(view));\r\n    doWorkaround();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\RedditListingManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General\nimport android.view.View\npublic void addPostSelfText(final View view) {\r\n    General.checkThisIsUIThread();\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "RedReader/230", "ground_truth": "    mAdapter.appendToGroup(GROUP_POST_SELFTEXT, new GroupedRecyclerViewItemFrameLayout(view));\r\n    doWorkaround();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\RedditListingManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General\nimport android.view.View\npublic void addNotification(final View view) {\r\n    General.checkThisIsUIThread();\r", "choices": [{"text": "//    final NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);\r\n//    final Notification notification = new Notification(R.drawable.ic_launcher, \"RedReader\", System.currentTimeMillis());\r\n//    final Intent notificationIntent = new Intent(this, MainActivity.class);\r\n//    notificationIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);\r\n//    final PendingIntent intent = PendingIntent.getActivity(this, 0, notificationIntent, 0);\r\n//    notification.set"}], "metadata": {"task_id": "RedReader/231", "ground_truth": "    mAdapter.appendToGroup(GROUP_NOTIFICATIONS, new GroupedRecyclerViewItemFrameLayout(view));\r\n    doWorkaround();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\RedditListingManager.java"}}
{"prompt": "\n import java.util.Collection\nimport org.quantumbadger.redreader.common.General\nimport android.view.View\npublic void addItems(final Collection<GroupedRecyclerViewAdapter.Item<?>> items) {\r\n    General.checkThisIsUIThread();\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/232", "ground_truth": "    mAdapter.appendToGroup(GROUP_ITEMS, items);\r\n    doWorkaround();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\RedditListingManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General\nimport android.view.View\npublic void addViewToItems(final View view) {\r\n    General.checkThisIsUIThread();\r", "choices": [{"text": "//    if (view.getParent()!= null) {\r\n//        ((ViewGroup) view.getParent()).removeView(view);\r\n//    }\r\n    items.addView(view);\r\n}\n"}], "metadata": {"task_id": "RedReader/233", "ground_truth": "    mAdapter.appendToGroup(GROUP_ITEMS, new GroupedRecyclerViewItemFrameLayout(view));\r\n    doWorkaround();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\RedditListingManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General\nimport android.view.View\npublic void addLoadMoreButton(final View view) {\r\n    General.checkThisIsUIThread();\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "RedReader/234", "ground_truth": "    mAdapter.appendToGroup(GROUP_LOAD_MORE_BUTTON, new GroupedRecyclerViewItemFrameLayout(view));\r\n    doWorkaround();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\RedditListingManager.java"}}
{"prompt": "\n public void removeLoadMoreButton() {\r", "choices": [{"text": "//        if (mLoadMoreButton!= null) {\r\n//            mLoadMoreButton.setVisibility(View.GONE);\r\n//        }\r\n//    }\r\n//\r\n//    public void setLoadMoreButton(String text) {\r\n//        if (mLoadMoreButton!= null) {\r\n//            mLoadMoreButton.setText(text);\r\n//        }\r\n//    }\r\n//\r\n//    public void setLoadMoreButton(int resId) {\r\n//        if (mLoadMoreButton!= null) {\r\n"}], "metadata": {"task_id": "RedReader/235", "ground_truth": "    General.checkThisIsUIThread();\r\n    mAdapter.removeAllFromGroup(GROUP_LOAD_MORE_BUTTON);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\RedditListingManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General\npublic void setLoadingVisible(final boolean visible) {\r\n    General.checkThisIsUIThread();\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/236", "ground_truth": "    mLoadingItem.setHidden(!visible);\r\n    mAdapter.updateHiddenStatus();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\RedditListingManager.java"}}
{"prompt": "\n import android.view.View\npublic GroupedRecyclerViewAdapter getAdapter() {\r", "choices": [{"text": "return adapter;\r\n}\r\npublic void setAdapter(GroupedRecyclerViewAdapter adapter) {\r\nthis.adapter = adapter;\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/237", "ground_truth": "    General.checkThisIsUIThread();\r\n    return mAdapter;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\RedditListingManager.java"}}
{"prompt": "\n public void updateHiddenStatus() {\r", "choices": [{"text": "//    if (this.isHidden()) {\r\n//      this.setHidden(false);\r\n//    }\r\n//    if (this.isHidden()) {\r\n//      this.setHidden(false);\r\n//    }\r\n//    if (this.isHidden()) {\r\n//      this.setHidden(false);\r\n//    }\r\n//    if (this.isHidden()) {\r\n//      this.setHidden(false);\r\n//    }\r\n//    if (this.isHidden()) {\r\n//      this"}], "metadata": {"task_id": "RedReader/238", "ground_truth": "    General.checkThisIsUIThread();\r\n    mAdapter.updateHiddenStatus();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\adapters\\RedditListingManager.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic static CacheCompressionType fromDatabaseId(final int databaseId) {\r\n    for (final CacheCompressionType type : values()) {\r\n        if (type.databaseId == databaseId) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/242", "ground_truth": "            return type;\r\n        }\r\n    }\r\n    throw new RuntimeException(\"Unknown compression type \" + databaseId);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheCompressionType.java"}}
{"prompt": "\n @Override\r\npublic boolean onCreate() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nreturn super.onCreate();\r\n}\r\n\r\n@Override\r\npublic void onDestroy() {\r\n// TODO Auto-generated method stub\r\nsuper.onDestroy();\r\n}\r\n\r\n@Override\r\npublic IBinder onBind(Intent intent) {\r\n// TODO Auto-generated method stub\r\nreturn null;\r\n}\r\n\r\n@Override\r\npublic int onStartCommand(Intent intent, int flags, int startId) {\r\n// TODO Auto-generated method stub\r\nreturn super.onStartCommand(intent, flags, startId);"}], "metadata": {"task_id": "RedReader/246", "ground_truth": "    mCacheManager = CacheManager.getInstance(getContext());\r\n    return true;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheContentProvider.java"}}
{"prompt": "\n import java.util.Locale\nimport java.util.List\nimport org.quantumbadger.redreader.common.Optional\nimport android.database.sqlite.SQLiteDatabase\nimport android.database.Cursor\nsynchronized Optional<CacheEntry> selectById(final long id) {\r\n    final SQLiteDatabase db = getReadableDatabase();\r\n    try (Cursor cursor = db.query(TABLE, CacheEntry.DB_FIELDS, String.format(Locale.US, \"%s=?\", FIELD_ID), new String[] { String.valueOf(id) }, null, null, FIELD_TIMESTAMP + \" DESC\")) {\r\n        final List<CacheEntry> entries = readEntriesFromCursor(cursor);\r\n        if (entries.isEmpty()) {\r\n            return Optional.empty();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/250", "ground_truth": "        } else {\r\n            return Optional.of(entries.get(0));\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheDbManager.java"}}
{"prompt": "\n import java.util.List\nimport java.util.ArrayList\nimport androidx.annotation.NonNull\nimport android.database.Cursor\n@NonNull\r\nprivate List<CacheEntry> readEntriesFromCursor(@NonNull final Cursor cursor) {\r\n    final ArrayList<CacheEntry> result = new ArrayList<>();\r", "choices": [{"text": "//    final int index = cursor.getColumnIndex(CacheEntry.COLUMN_NAME_KEY);\r\n    final int index = cursor.getColumnIndex(CacheEntry.COLUMN_NAME_VALUE);\r\n    while (cursor.moveToNext()) {\r\n        final CacheEntry entry = new CacheEntry();\r\n        entry.key = cursor.getString(index);\r\n        entry.value = cursor.getString(index);\r\n        result.add(entry);\r\n    }\r\n    return result;\r\n}\r\n"}], "metadata": {"task_id": "RedReader/251", "ground_truth": "    while (cursor.moveToNext()) {\r\n        result.add(new CacheEntry(cursor));\r\n    }\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheDbManager.java"}}
{"prompt": "\n import android.database.sqlite.SQLiteDatabase\nimport android.content.ContentValues\nsynchronized void setEntryDone(final long id) {\r\n    final SQLiteDatabase db = this.getWritableDatabase();\r\n    final ContentValues row = new ContentValues();\r", "choices": [{"text": "row.put(\"done\", 1);\r\ndb.update(\"todo\", row, \"id =?\", new String[] { String.valueOf(id) });\r\ndb.close();\r\n}\n"}], "metadata": {"task_id": "RedReader/252", "ground_truth": "    row.put(FIELD_STATUS, STATUS_DONE);\r\n    db.update(TABLE, row, FIELD_ID + \"=?\", new String[] { String.valueOf(id) });\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheDbManager.java"}}
{"prompt": "\n import java.util.HashMap\nimport android.database.sqlite.SQLiteDatabase\nimport android.database.Cursor\npublic synchronized HashMap<Long, Integer> getFilesToSize() {\r\n    final SQLiteDatabase db = this.getWritableDatabase();\r\n    final Cursor cursor = db.query(TABLE, new String[] { FIELD_ID, FIELD_TYPE }, null, null, null, null, null, null);\r\n    final HashMap<Long, Integer> filesToCheck = new HashMap<>(32);\r\n    while (cursor.moveToNext()) {\r\n        final long id = cursor.getLong(0);\r\n        final int type = cursor.getInt(1);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/255", "ground_truth": "        filesToCheck.put(id, type);\r\n    }\r\n    cursor.close();\r\n    return filesToCheck;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheDbManager.java"}}
{"prompt": "\n @Override\r\npublic void run() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\ntry {\r\nwhile(true) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(is"}], "metadata": {"task_id": "RedReader/260", "ground_truth": "    android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);\r\n    singleDownload.doDownload();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheDownloadThread.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.content.Context\npublic static synchronized CacheManager getInstance(@NonNull final Context context) {\r\n    if (singleton == null) {\r\n        singleton = new CacheManager(context.getApplicationContext());\r", "choices": [{"text": "}\r\nreturn singleton;\r\n}\r\n"}], "metadata": {"task_id": "RedReader/261", "ground_truth": "    }\r\n    return singleton;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheManager.java"}}
{"prompt": "\n import java.io.File\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@Nullable\r\nprivate Long isCacheFile(@NonNull final File file) {\r\n    final String name = file.getName();\r\n    if (!name.endsWith(ext)) {\r\n        return null;\r\n    }\r\n    final String[] nameSplit = name.split(\"\\\\.\");\r\n    if (nameSplit.length != 2) {\r\n        return null;\r\n    }\r\n    try {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/262", "ground_truth": "        return Long.parseLong(nameSplit[0]);\r\n    } catch (final Exception e) {\r\n        return null;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheManager.java"}}
{"prompt": "\n import java.util.List\nimport java.util.HashSet\nimport java.io.File\nprivate void getCacheFileList(final File dir, final HashSet<Long> currentFiles) {\r\n    final File[] list = dir.listFiles();\r\n    if (list == null) {\r\n        return;\r\n    }\r\n    for (final File file : list) {\r\n        if (file.isDirectory()) {\r\n            getCacheFileList(file, currentFiles);\r\n        } else {\r\n            final Long cacheFileId = isCacheFile(file);\r\n            if (cacheFileId != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/263", "ground_truth": "                currentFiles.add(cacheFileId);\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheManager.java"}}
{"prompt": "\n import java.io.File\nprivate static void pruneTemp(final File dir) {\r\n    final String[] list = dir.list();\r\n    if (list == null) {\r\n        return;\r\n    }\r\n    for (final String file : list) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/264", "ground_truth": "        if (file.endsWith(tempExt)) {\r\n            new File(dir, file).delete();\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheManager.java"}}
{"prompt": "\n import java.util.List\nimport java.util.ArrayList\nimport java.io.File\nimport androidx.annotation.NonNull\nimport android.os.Build\nimport android.content.Context\n@NonNull\r\npublic static ArrayList<File> getCacheDirs(final Context context) {\r\n    final ArrayList<File> dirs = new ArrayList<>();\r\n    dirs.add(context.getCacheDir());\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\r\n        for (final File dir : context.getExternalCacheDirs()) {\r\n            if (dir != null) {\r\n                dirs.add(dir);\r\n            }\r\n        }\r\n    } else {\r\n        final File extDir = context.getExternalCacheDir();\r\n        if (extDir != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/265", "ground_truth": "            dirs.add(extDir);\r\n        }\r\n    }\r\n    return dirs;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheManager.java"}}
{"prompt": "\n import java.util.List\nimport java.io.File\npublic void pruneTemp() {\r\n    final List<File> dirs = getCacheDirs(context);\r\n    for (final File dir : dirs) {\r", "choices": [{"text": "//        if (dir.isDirectory()) {\r\n            final File[] children = dir.listFiles();\r\n            if (children!= null) {\r\n                for (final File child : children) {\r\n                    if (child.isDirectory()) {\r\n                        deleteDir(child);\r\n                    }\r\n                }\r\n            }\r\n//        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/266", "ground_truth": "        pruneTemp(dir);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheManager.java"}}
{"prompt": "\n import java.io.IOException\nimport java.io.File\npublic File writeExternally() throws IOException {\r\n    mWriteExternally = true;\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "RedReader/267", "ground_truth": "    mOutStream.close();\r\n    return mTmpFile;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheManager.java"}}
{"prompt": "\n import java.io.File\nimport android.util.Log\npublic void onWriteCancelled() {\r\n    try {\r\n        mOutStream.close();\r\n        if (!mTmpFile.delete()) {\r\n            Log.e(TAG, \"Failed to delete temp cache file \" + mTmpFile.delete());\r", "choices": [{"text": "}\r\n    } catch (IOException e) {\r\n        Log.e(TAG, \"Failed to close temp cache file\", e);\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/268", "ground_truth": "        }\r\n    } catch (final Exception e) {\r\n        Log.e(TAG, \"Exception during cancel\", e);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheManager.java"}}
{"prompt": "\n import java.io.File\nimport androidx.annotation.Nullable\nimport android.net.Uri\n@Nullable\r\npublic Uri getUri() {\r\n    if (mCachedUri == null) {\r\n        mCachedUri = getCacheFileUri(mId);\r", "choices": [{"text": "}\r\nreturn mCachedUri;\r\n}\r\npublic void setUri(@Nullable Uri uri) {\r\n    mCachedUri = uri;\r\n}\r\npublic void setUri(String uri) {\r\n    mCachedUri = Uri.parse(uri);\r\n}\r\npublic void setUri(File file) {\r\n    mCachedUri = Uri.fromFile(file);\r\n}\r\npublic void setUri(Uri uri, String mimeType) {\r\n    mCachedUri = uri;\r\n    mMimeType = mimeType;\r\n}\r\npublic void setUri(String uri, String mimeType)"}], "metadata": {"task_id": "RedReader/270", "ground_truth": "    }\r\n    return mCachedUri;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.Optional\nimport androidx.annotation.NonNull\n@NonNull\r\npublic Optional<String> lookupMimetype() {\r\n    final Optional<CacheEntry> result = dbManager.selectById(mId);\r\n    if (result.isPresent()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/271", "ground_truth": "        return Optional.of(result.get().mimetype);\r\n    } else {\r\n        return Optional.empty();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheManager.java"}}
{"prompt": "\n import java.util.List\nimport java.io.File\nimport androidx.annotation.Nullable\n@Nullable\r\nprivate File getExistingCacheFile(final long id) {\r\n    final List<File> dirs = getCacheDirs(context);\r\n    // Try new format first\r\n    for (final File dir : dirs) {\r\n        final File f = new File(getSubdirForCacheFile(dir, id), id + ext);\r\n        if (f.exists()) {\r\n            return f;\r\n        }\r\n    }\r\n    for (final File dir : dirs) {\r\n        final File f = new File(dir, id + ext);\r\n        if (f.exists()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/272", "ground_truth": "            return f;\r\n        }\r\n    }\r\n    return null;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheManager.java"}}
{"prompt": "\n import java.io.File\nimport androidx.annotation.Nullable\nimport android.net.Uri\n@Nullable\r\nprivate Uri getCacheFileUri(final long id) {\r\n    final File cacheFile = getExistingCacheFile(id);\r", "choices": [{"text": "if (cacheFile!= null) {\r\n    return Uri.fromFile(cacheFile);\r\n}\r\nreturn null;\r\n}\r\nprivate File getExistingCacheFile(final long id) {\r\nfinal File cacheDir = getCacheDir();\r\nif (cacheDir == null) {\r\n    return null;\r\n}\r\nfinal File cacheFile = new File(cacheDir, String.valueOf(id));\r\nif (cacheFile.exists()) {\r\n    return cacheFile;\r\n}\r\nreturn null;\r\n}\r\nprivate File getCacheDir() {\r\nfinal File"}], "metadata": {"task_id": "RedReader/273", "ground_truth": "    if (cacheFile == null) {\r\n        return null;\r\n    }\r\n    return Uri.fromFile(cacheFile);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheManager.java"}}
{"prompt": "\n @Override\r\npublic void run() {\r\n    try {\r\n        CacheRequest request;\r\n        while ((request = requests.take()) != null) {\r\n            handleRequest(request);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/274", "ground_truth": "        }\r\n    } catch (final InterruptedException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheManager.java"}}
{"prompt": "\n import java.util.List\nprivate CacheEntry mostRecentFromList(final List<CacheEntry> list) {\r\n    CacheEntry entry = null;\r\n    for (final CacheEntry e : list) {\r\n        if (entry == null || entry.timestamp.isLessThan(e.timestamp)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/275", "ground_truth": "            entry = e;\r\n        }\r\n    }\r\n    return entry;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheManager.java"}}
{"prompt": "\npublic static final int DOWNLOAD_QUEUE_IMMEDIATE = 2;\npublic static final int DOWNLOAD_QUEUE_REDGIFS_API_V2 = 4;\npublic static final int DOWNLOAD_QUEUE_IMAGE_PRECACHE = 3;\n // Called by CacheDownload\r\nsynchronized boolean setDownload(final CacheDownload download) {\r\n    if (cancelled) {\r", "choices": [{"text": "//        Log.d(TAG, \"setDownload: cancelled\");\r\n        return false;\r\n    }\r\n    if (download == null) {\r\n//        Log.d(TAG, \"setDownload: download == null\");\r\n        return false;\r\n    }\r\n    if (download.isCancelled()) {\r\n//        Log.d(TAG, \"setDownload: download.isCancelled()\");\r\n        return false;\r\n    }\r\n    if (download.isFinished()) {\r\n//        Log.d(TAG, \"setDownload: download.isFinished()\");\r\n        return false;\r\n    }\r\n    if (download.isFailed"}], "metadata": {"task_id": "RedReader/277", "ground_truth": "        return false;\r\n    }\r\n    this.download = download;\r\n    return true;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheRequest.java"}}
{"prompt": "\n // Can be called to cancel the request\r\npublic synchronized void cancel() {\r\n    cancelled = true;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/278", "ground_truth": "    if (download != null) {\r\n        download.cancel();\r\n        download = null;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheRequest.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n// Callbacks\r\nprivate void onCallbackException(@NonNull final Throwable t) {\r", "choices": [{"text": "}\r\nprivate void onCallbackSuccess(@NonNull final String s) {\r\n}\r\n// Callbacks\r\nprivate void onCallbackException(@NonNull final Throwable t) {\r\n}\r\nprivate void onCallbackSuccess(@NonNull final String s) {\r\n}\r\n// Callbacks\r\nprivate void onCallbackException(@NonNull final Throwable t) {\r\n}\r\nprivate void onCallbackSuccess(@NonNull final String s) {\r\n}\r\n// Callbacks\r\nprivate void onCallbackException(@NonNull final Throwable t) {\r\n}\r\nprivate void onCallbackSuccess(@NonNull"}], "metadata": {"task_id": "RedReader/279", "ground_truth": "    Log.e(\"CacheRequest\", \"Exception thrown from callback\", t);\r\n    BugReportActivity.handleGlobalError(context, t);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheRequest.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.RRError\nimport androidx.annotation.NonNull\npublic void notifyFailure(@NonNull final RRError error) {\r\n    try {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/280", "ground_truth": "        mCallbacks.onFailure(error);\r\n    } catch (final Throwable t1) {\r\n        onCallbackException(t1);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheRequest.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.RRError\nimport androidx.annotation.NonNull\n@Override\r\npublic void onFailure(@NonNull final RRError error) {\r\n    if (!mNotifiedFailure.getAndSet(true)) {\r", "choices": [{"text": "//        Toast.makeText(this, error.getMessage(), Toast.LENGTH_LONG).show();\r\n        Log.e(TAG, error.getMessage());\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/283", "ground_truth": "        mListener.onFailure(error);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\CacheRequestJSONParser.java"}}
{"prompt": "\n import org.quantumbadger.redreader.cache.CacheEntry\n@Override\r\npublic boolean shouldDownloadIfCacheEntryFound(final CacheEntry entry) {\r", "choices": [{"text": "return true;\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/284", "ground_truth": "    // Should never get here\r\n    return true;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\downloadstrategy\\DownloadStrategyAlways.java"}}
{"prompt": "\n @Override\r\npublic boolean shouldDownloadIfNotCached() {\r", "choices": [{"text": "return true;\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r"}], "metadata": {"task_id": "RedReader/285", "ground_truth": "    // Should never get here\r\n    return true;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\downloadstrategy\\DownloadStrategyAlways.java"}}
{"prompt": "\n import java.io.IOException\n@Override\r\npublic void close() throws IOException {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.close();\r\n}\r\n}\r\n<file_sep>/src/com/test/Test.java\npackage com.test;\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.OutputStream;\r\nimport java.io.RandomAccessFile;\r\nimport java.util.Arrays;\r\n\r\npublic class Test {"}], "metadata": {"task_id": "RedReader/286", "ground_truth": "    super.close();\r\n    listener.onClose();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\NotifyOutputStream.java"}}
{"prompt": "\n private synchronized CacheDownload getNextRedditInQueue() {\r\n    while (redditDownloadsQueued.isEmpty()) {\r\n        try {\r\n            wait();\r\n        } catch (final InterruptedException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n    CacheDownload next = null;\r\n    for (final CacheDownload entry : redditDownloadsQueued) {\r\n        if (next == null || entry.getPriority().isHigherPriorityThan(next.getPriority())) {\r\n            next = entry;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/287", "ground_truth": "        }\r\n    }\r\n    redditDownloadsQueued.remove(next);\r\n    return next;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\PrioritisedDownloadQueue.java"}}
{"prompt": "\n @Override\r\npublic void run() {\r\n    while (true) {\r\n        synchronized (this) {\r\n            final CacheDownload download = getNextRedditInQueue();\r\n            new CacheDownloadThread(download, true, \"Cache Download Thread: Reddit\");\r\n        }\r\n        try {\r\n            // Delay imposed by reddit API restrictions.\r\n            sleep(1200);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/288", "ground_truth": "        } catch (final InterruptedException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\cache\\PrioritisedDownloadQueue.java"}}
{"prompt": "\n import android.content.Context\n/**\r\n * Starts all alarms that are supposed to start at device boot\r\n *\r\n * @param context\r\n */\r\npublic static void onBoot(final Context context) {\r\n    for (final Alarm alarm : Alarm.values()) {\r", "choices": [{"text": "//        if (alarm.isOnBoot()) {\r\n            final AlarmManager alarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);\r\n            final Intent intent = new Intent(context, AlarmReceiver.class);\r\n            intent.putExtra(AlarmReceiver.EXTRA_ALARM, alarm);\r\n            final PendingIntent pendingIntent = PendingIntent.getBroadcast(context, alarm.ordinal(), intent, PendingIntent.FLAG_UPDATE_CURRENT);\r\n            alarmManager.set(AlarmManager.RTC_WAKEUP, alarm.getTriggerTime(), pendingIntent);\r\n//        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/290", "ground_truth": "        if (alarm.startOnBoot()) {\r\n            startAlarm(alarm, context);\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\Alarms.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\n @JvmStatic\r\n\tfun runOnUiThread(runnable: Runnable) {\r\n        if (General.isThisUIThread) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/291", "ground_truth": "            runnable.run()\r\n        } else {\r\n            UI_THREAD_HANDLER.post(runnable)\r\n        }\r\n    }", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\AndroidCommon.kt"}}
{"prompt": "\n import com.google.android.material.textfield.MaterialAutoCompleteTextView\nimport android.widget.TextView\nimport android.view.View\n\t@JvmStatic\r\n\tfun setAutoCompleteTextViewItemsNoFilter(\r\n\t\tview: MaterialAutoCompleteTextView,\r\n\t\titems: List<String>\r\n\t) {\r", "choices": [{"text": "//\t\tval adapter = ArrayAdapter(view.context, android.R.layout.simple_dropdown_item_1line, items)\r\n//\t\tview.setAdapter(adapter)\r\n\t\tview.setAdapter(ArrayAdapter(view.context, android.R.layout.simple_dropdown_item_1line, items))\r\n\t}\r\n\t@JvmStatic\r\n\tfun setAutoCompleteTextViewItems(\r\n\t\tview: MaterialAutoCompleteTextView,\r\n\t\titems: List<String>\r\n\t) {\r\n\t\tval adapter = ArrayAdapter(view.context, android.R.layout."}], "metadata": {"task_id": "RedReader/294", "ground_truth": "\t\tview.setSimpleItems(items.toTypedArray())\r\n\t\tview.setAdapter(NoFilterAdapter(view.adapter as ListAdapter, items))\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\AndroidCommon.kt"}}
{"prompt": "\n import android.view.View\n\t@JvmStatic\r\n\tfun removeClickListeners(view: View) {\r\n\t\tview.apply {\r\n\t\t\tsetOnClickListener(null)\r", "choices": [{"text": "//\t\t\tsetOnLongClickListener(null)\r\n//\t\t\tsetOnTouchListener(null)\r\n//\t\t\tsetOnFocusChangeListener(null)\r\n//\t\t\tsetOnKeyListener(null)\r\n//\t\t\tsetOnScrollChangeListener(null)\r\n//\t\t\tsetOnSystemUiVisibilityChangeListener(null)\r\n//\t\t\tsetOnGenericMotionListener(null)\r\n//\t\t\tsetOnCreateContextMenuListener(null)\r\n//\t\t\tsetOnDragListener(null)\r\n//\t\t\tsetOnGenericMotionListener(null)\r\n//\t\t\tsetOnHoverListener(null)\r\n//"}], "metadata": {"task_id": "RedReader/295", "ground_truth": "\t\t\tsetOnLongClickListener(null)\r\n\t\t\tisClickable = false\r\n\t\t\tisLongClickable = false\r\n\t\t}\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\AndroidCommon.kt"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.os.SystemClock\n@NonNull\r\npublic E get() {\r\n    final long timeNow = SystemClock.uptimeMillis();\r\n    final CacheEntry<E> entry = mEntry.get();\r\n    if (entry != null && timeNow - entry.getLastUpdateMs() < mMaxAgeMs) {\r\n        return entry.getValue();\r", "choices": [{"text": "\n import androidx.annotation.NonNull\nimport android.os.SystemClock\n@NonNull\r\npublic E get() {\r\n    final long timeNow = SystemClock.uptimeMillis();\r\n    final CacheEntry<E> entry = mEntry.get();\r\n    if (entry!= null && timeNow - entry.getLastUpdateMs() < mMaxAgeMs) {\r\n        return entry.getValue();\r\n}\r\n    final E value = mFactory.create();\r\n    mEntry.set(new CacheEntry<>(value, timeNow));\r\n    return value;\r\n}\r\n"}], "metadata": {"task_id": "RedReader/297", "ground_truth": "    }\r\n    final E newValue = mFactory.create();\r\n    mEntry.set(new CacheEntry<>(newValue, timeNow));\r\n    return newValue;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\CachedValue.java"}}
{"prompt": "\n import androidx.core.view.accessibility.AccessibilityNodeInfoCompat\nimport android.view.View\n@Override\r\npublic void onInitializeAccessibilityNodeInfo(final View host, final AccessibilityNodeInfoCompat info) {\r", "choices": [{"text": "super.onInitializeAccessibilityNodeInfo(host, info);\r\nfinal View view = host;\r\nif (view instanceof TextView) {\r\nfinal TextView textView = (TextView) view;\r\nfinal CharSequence text = textView.getText();\r\nif (text instanceof Spanned) {\r\nfinal Spannable spannable = (Spannable) text;\r\nfinal int start = spannable.getSpanStart(this);\r\nfinal int end = spannable.getSpanEnd(this);\r\nfinal int flags = spannable.getSpanFlags(this);\r\nif"}], "metadata": {"task_id": "RedReader/298", "ground_truth": "    super.onInitializeAccessibilityNodeInfo(host, info);\r\n    info.setHeading(true);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\ChangelogManager.java"}}
{"prompt": "\n import androidx.annotation.Nullable\n@Nullable\r\npublic E peek() {\r\n    if (isEmpty()) {\r\n        return null;\r", "choices": [{"text": "}\r\nreturn head.item;\r\n}\r\n"}], "metadata": {"task_id": "RedReader/300", "ground_truth": "    }\r\n    return mData.get(mData.size() - 1);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\collections\\Stack.java"}}
{"prompt": "\n import java.util.Collection\npublic final <Output extends Collection<? super Type>> Output collect(final Output output) {\r\n    while (hasNext()) {\r\n        output.add(take());\r", "choices": [{"text": "}\r\nreturn output;\r\n}\r\n"}], "metadata": {"task_id": "RedReader/301", "ground_truth": "    }\r\n    return output;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\collections\\Stream.java"}}
{"prompt": "\n public synchronized void add(final K key, final V value) {\r\n    WeakReferenceListManager<V> list = mData.get(key);\r\n    if (list == null) {\r\n        list = new WeakReferenceListManager<>();\r\n        mData.put(key, list);\r\n    }\r\n    list.add(value);\r", "choices": [{"text": "}\r\n public synchronized void remove(final K key, final V value) {\r\n    WeakReferenceListManager<V> list = mData.get(key);\r\n    if (list!= null) {\r\n        list.remove(value);\r\n    }\r\n}\r\n public synchronized void clear(final K key) {\r\n    WeakReferenceListManager<V> list = mData.get(key);\r\n    if (list!= null) {\r\n        list.clear();\r\n    }\r\n}\r\n public synchronized void clear() {\r\n    mData.clear();\r\n}\r\n public synchronized boolean contains(final K key, final V"}], "metadata": {"task_id": "RedReader/302", "ground_truth": "    // Perform cleanup once for each 256 values which are added\r\n    if (++mCleanupCounter == 0) {\r\n        clean();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\collections\\WeakReferenceListHashMapManager.java"}}
{"prompt": "\n public synchronized void remove(final K key, final V value) {\r\n    final WeakReferenceListManager<V> list = mData.get(key);\r\n    if (list != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/303", "ground_truth": "        list.remove(value);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\collections\\WeakReferenceListHashMapManager.java"}}
{"prompt": "\n public synchronized void map(final K key, final WeakReferenceListManager.Operator<V> operator) {\r\n    final WeakReferenceListManager<V> list = mData.get(key);\r\n    if (list != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/304", "ground_truth": "        list.map(operator);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\collections\\WeakReferenceListHashMapManager.java"}}
{"prompt": "\n public synchronized <A> void map(final K key, final WeakReferenceListManager.ArgOperator<V, A> operator, final A arg) {\r\n    final WeakReferenceListManager<V> list = mData.get(key);\r\n    if (list != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/305", "ground_truth": "        list.map(operator, arg);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\collections\\WeakReferenceListHashMapManager.java"}}
{"prompt": "\n import java.util.Map\nimport java.util.Iterator\npublic synchronized void clean() {\r\n    final Iterator<Map.Entry<K, WeakReferenceListManager<V>>> iterator = mData.entrySet().iterator();\r\n    while (iterator.hasNext()) {\r\n        final Map.Entry<K, WeakReferenceListManager<V>> entry = iterator.next();\r\n        final WeakReferenceListManager<V> list = entry.getValue();\r\n        list.clean();\r", "choices": [{"text": "}\r\n}\n"}], "metadata": {"task_id": "RedReader/306", "ground_truth": "        if (list.isEmpty()) {\r\n            iterator.remove();\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\collections\\WeakReferenceListHashMapManager.java"}}
{"prompt": "\n import java.util.Iterator\nimport java.lang.ref.WeakReference\npublic synchronized void map(final Operator<E> operator) {\r\n    final Iterator<WeakReference<E>> iterator = data.iterator();\r\n    while (iterator.hasNext()) {\r\n        final E object = iterator.next().get();\r\n        if (object == null) {\r\n            iterator.remove();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/307", "ground_truth": "        } else {\r\n            operator.operate(object);\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\collections\\WeakReferenceListManager.java"}}
{"prompt": "\n import java.util.Iterator\nimport java.lang.ref.WeakReference\npublic synchronized <A> void map(final ArgOperator<E, A> operator, final A arg) {\r\n    final Iterator<WeakReference<E>> iterator = data.iterator();\r\n    while (iterator.hasNext()) {\r\n        final E object = iterator.next().get();\r\n        if (object == null) {\r\n            iterator.remove();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/308", "ground_truth": "        } else {\r\n            operator.operate(object, arg);\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\collections\\WeakReferenceListManager.java"}}
{"prompt": "\n import java.util.Iterator\nimport java.lang.ref.WeakReference\npublic synchronized void remove(final E object) {\r\n    final Iterator<WeakReference<E>> iterator = data.iterator();\r\n    while (iterator.hasNext()) {\r", "choices": [{"text": "final WeakReference<E> reference = iterator.next();\r\nfinal E element = reference.get();\r\nif (element == null) {\r\niterator.remove();\r\n} else if (element.equals(object)) {\r\nreference.clear();\r\niterator.remove();\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/309", "ground_truth": "        if (iterator.next().get() == object) {\r\n            iterator.remove();\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\collections\\WeakReferenceListManager.java"}}
{"prompt": "\n import java.util.Iterator\nimport java.lang.ref.WeakReference\npublic synchronized void clean() {\r\n    final Iterator<WeakReference<E>> iterator = data.iterator();\r\n    while (iterator.hasNext()) {\r\n        final E object = iterator.next().get();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/310", "ground_truth": "        if (object == null) {\r\n            iterator.remove();\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\collections\\WeakReferenceListManager.java"}}
{"prompt": "\n private void ensureCapacity(final int desiredCapacity) {\r\n    if (desiredCapacity <= mData.length) {\r\n        return;\r\n    }\r\n    if (desiredCapacity > (mData.length * 2)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/313", "ground_truth": "        realloc(desiredCapacity + (desiredCapacity / 2));\r\n    } else {\r\n        realloc(mData.length * 2);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\datastream\\MemoryDataStream.java"}}
{"prompt": "\n private void realloc(final int newCapacity) {\r\n    if (newCapacity < mSize) {\r\n        throw new RuntimeException(\"Cannot shrink array\");\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/314", "ground_truth": "    }\r\n    mData = Arrays.copyOf(mData, newCapacity);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\datastream\\MemoryDataStream.java"}}
{"prompt": "\n public int size() {\r\n    synchronized (mLock) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/315", "ground_truth": "        return mSize;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\datastream\\MemoryDataStream.java"}}
{"prompt": "\n import androidx.annotation.NonNull\npublic void writeBytes(@NonNull final byte[] data, final int offset, final int length) {\r\n    synchronized (mLock) {\r\n        ensureCapacity(mSize + length);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/316", "ground_truth": "        System.arraycopy(data, offset, mData, mSize, length);\r\n        mSize += length;\r\n        mLock.notifyAll();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\datastream\\MemoryDataStream.java"}}
{"prompt": "\n public void setComplete() {\r\n    synchronized (mLock) {\r\n        mComplete = true;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/317", "ground_truth": "        mLock.notifyAll();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\datastream\\MemoryDataStream.java"}}
{"prompt": "\n import java.io.IOException\nimport androidx.annotation.NonNull\npublic void setFailed(@NonNull final IOException e) {\r\n    synchronized (mLock) {\r\n        mFailed = e;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/318", "ground_truth": "        mLock.notifyAll();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\datastream\\MemoryDataStream.java"}}
{"prompt": "\n import java.io.IOException\nimport androidx.annotation.NonNull\npublic void getUnderlyingByteArrayWhenComplete(@NonNull final ByteArrayCallback callback) throws IOException {\r\n    synchronized (mLock) {\r\n        while (!mComplete && mFailed == null) {\r\n            try {\r\n                mLock.wait();\r\n            } catch (final InterruptedException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n        if (mFailed != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/319", "ground_truth": "            throw mFailed;\r\n        }\r\n    }\r\n    callback.onByteArray(mData, 0, mSize);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\datastream\\MemoryDataStream.java"}}
{"prompt": "\n import java.io.IOException\n@Override\r\npublic int read() throws IOException {\r\n    final int result = mStream.blockingReadOneByte(mPosition);\r", "choices": [{"text": "if (result == -1) {\r\n    return -1;\r\n}\r\nmPosition += 1;\r\nreturn result;\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/320", "ground_truth": "    if (result >= 0) {\r\n        mPosition++;\r\n    }\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\datastream\\MemoryDataStreamInputStream.java"}}
{"prompt": "\n import java.io.IOException\n@Override\r\npublic int read(final byte[] buf, final int off, final int len) throws IOException {\r\n    final int bytesRead = mStream.blockingRead(mPosition, buf, off, len);\r", "choices": [{"text": "//    mPosition += bytesRead;\r\n    return bytesRead;\r\n}\r\n"}], "metadata": {"task_id": "RedReader/321", "ground_truth": "    if (bytesRead > 0) {\r\n        mPosition += bytesRead;\r\n    }\r\n    return bytesRead;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\datastream\\MemoryDataStreamInputStream.java"}}
{"prompt": "\n import java.io.IOException\n@Override\r\npublic void seek(final long position) throws IOException {\r\n    if (position < 0) {\r\n        throw new IOException(\"Attempted to seek before zero\");\r", "choices": [{"text": "}\r\nif (position > length) {\r\n        throw new IOException(\"Attempted to seek past end of file\");\r\n}\r\nif (position == 0) {\r\n        // Seek to the beginning of the file\r\n        if (position == 0) {\r\n            // Seek to the beginning of the file\r\n            if (position == 0) {\r\n                // Seek to the beginning of the file\r\n                if (position == 0) {\r\n                    // Seek to the beginning of the file\r\n                    if (position == 0) {\r\n                        // Seek to the beginning of the file\r\n                        if (position == 0) {"}], "metadata": {"task_id": "RedReader/322", "ground_truth": "    }\r\n    mPosition = (int) position;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\datastream\\MemoryDataStreamInputStream.java"}}
{"prompt": "\n @Override\r\npublic long skip(final long offset) {\r\n    final int bytesToSkip = (int) Math.min(offset, Math.max(0, mStream.size() - mPosition));\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/323", "ground_truth": "    mPosition += bytesToSkip;\r\n    return bytesToSkip;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\datastream\\MemoryDataStreamInputStream.java"}}
{"prompt": "\n import java.io.IOException\n@Override\r\npublic void seek(final long position) throws IOException {\r", "choices": [{"text": "}\r\n@Override\r\npublic void seek(final long position, final SeekMode mode) throws IOException {\r\n}\r\n@Override\r\npublic void setLength(final long newLength) throws IOException {\r\n}\r\n@Override\r\npublic void write(final byte[] buffer) throws IOException {\r\n}\r\n@Override\r\npublic void write(final byte[] buffer, final int offset, final int length) throws IOException {\r\n}\r\n@Override\r\npublic void write(final int oneByte) throws IOException {\r\n}\r\n@Override\r\npublic void"}], "metadata": {"task_id": "RedReader/324", "ground_truth": "    mFile.seek(position);\r\n    mPosition = position;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\datastream\\SeekableFileInputStream.java"}}
{"prompt": "\n import java.io.IOException\nimport androidx.annotation.NonNull\n@Override\r\npublic void readRemainingAsBytes(@NonNull final ByteArrayCallback callback) throws IOException {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/325", "ground_truth": "    final byte[] result = General.readWholeStream(this);\r\n    callback.onByteArray(result, 0, result.length);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\datastream\\SeekableFileInputStream.java"}}
{"prompt": "\n import java.io.IOException\nimport java.io.File\n@Override\r\npublic int read() throws IOException {\r\n    final int result = mFile.read();\r", "choices": [{"text": "if (result == -1) {\r\n    mFile = null;\r\n}\r\nreturn result;\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/326", "ground_truth": "    if (result >= 0) {\r\n        mPosition++;\r\n    }\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\datastream\\SeekableFileInputStream.java"}}
{"prompt": "\n import java.io.IOException\nimport java.io.File\n@Override\r\npublic int read(final byte[] buf, final int off, final int len) throws IOException {\r\n    if (len == 0) {\r\n        throw new IOException(\"Attempted to read zero bytes\");\r\n    }\r\n    final int result = mFile.read(buf, off, len);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/327", "ground_truth": "    if (result > 0) {\r\n        mPosition += result;\r\n    }\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\datastream\\SeekableFileInputStream.java"}}
{"prompt": "\n import java.io.IOException\n@Override\r\npublic long skip(final long n) throws IOException {\r\n    final long bytesToSkip = Math.min(n, available());\r", "choices": [{"text": "//    if (bytesToSkip == 0) {\r\n//        return 0;\r\n//    }\r\n    final long skipped = super.skip(bytesToSkip);\r\n    if (skipped!= bytesToSkip) {\r\n        throw new IOException(\"Could not skip \" + bytesToSkip + \" bytes\");\r\n    }\r\n    return skipped;\r\n}\n"}], "metadata": {"task_id": "RedReader/328", "ground_truth": "    seek((int) (mPosition + bytesToSkip));\r\n    return bytesToSkip;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\datastream\\SeekableFileInputStream.java"}}
{"prompt": "\n import android.widget.EditText\nprivate static void performSearch(final EditText editText, final OnSearchListener listener) {\r\n    final String query = editText.getText().toString().trim();\r\n    if (StringUtils.isEmpty(query)) {\r", "choices": [{"text": "//        Toast.makeText(editText.getContext(), \"Please enter a search term\", Toast.LENGTH_SHORT).show();\r\n        return;\r\n    }\r\n    listener.onSearch(query);\r\n}\r\n"}], "metadata": {"task_id": "RedReader/329", "ground_truth": "        listener.onSearch(null);\r\n    } else {\r\n        listener.onSearch(query);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\DialogUtils.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\nimport androidx.appcompat.app.AlertDialog\nimport androidx.annotation.NonNull\nimport android.app.Activity\npublic static void showDialog(@NonNull final Activity activity, @NonNull final String title, @NonNull final String message) {\r\n    AndroidCommon.runOnUiThread(() -> {\r\n        new MaterialAlertDialogBuilder(activity).setTitle(title).setMessage(message).setNeutralButton(R.string.dialog_close, (dialog, which) -> {\r", "choices": [{"text": "dialog.dismiss();\r\n}).show();\r\n    });\r\n}\n"}], "metadata": {"task_id": "RedReader/331", "ground_truth": "        }).create().show();\r\n    });\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\DialogUtils.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\nimport androidx.appcompat.app.AlertDialog\nimport androidx.annotation.StringRes\nimport androidx.annotation.NonNull\nimport android.app.Activity\npublic static void showDialog(@NonNull final Activity activity, @StringRes final int title, @StringRes final int message) {\r\n    AndroidCommon.runOnUiThread(() -> {\r\n        new MaterialAlertDialogBuilder(activity).setTitle(title).setMessage(message).setNeutralButton(R.string.dialog_close, (dialog, which) -> {\r", "choices": [{"text": "dialog.dismiss();\r\n}).show();\r\n    });\r\n}\n"}], "metadata": {"task_id": "RedReader/332", "ground_truth": "        }).create().show();\r\n    });\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\DialogUtils.java"}}
{"prompt": "\n public void send(final E event) {\r\n    mMostRecentEvent = event;\r\n    for (final Listener<E> listener : mListeners.get()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/334", "ground_truth": "        listener.onEvent(event);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\EventListenerSet.java"}}
{"prompt": "\n public E register(final Listener<E> listener) {\r", "choices": [{"text": "-  return register(listener, null);\r\n+  return register(listener, null, null);\r\n }\r\n \r\n /**\r\n  * Registers a listener with the given name.\r\n  * \r\n  * @param listener\r\n  * @param name\r\n  * @return\r\n  */\r\n public E register(final Listener<E> listener, final String name) {\r\n-  return register(listener, name, null);\r\n+  return register(listener, name, null, null);\r\n }\r\n \r\n /**\r\n  * Registers a listener with the given name and priority.\r\n  * \r\n  * @param listener\r\n  * @"}], "metadata": {"task_id": "RedReader/335", "ground_truth": "    mListeners.get().add(listener);\r\n    return mMostRecentEvent;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\EventListenerSet.java"}}
{"prompt": "\n import java.util.Set\nimport androidx.annotation.NonNull\npublic static void handleFirstInstall(@NonNull final SharedPrefsWrapper sharedPrefs) {\r\n    // Set all feature flags when first installing\r\n    for (final FeatureFlag flag : FeatureFlag.values()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/337", "ground_truth": "        setFeatureFlag(sharedPrefs, flag);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\FeatureFlagHandler.java"}}
{"prompt": "\n import java.io.IOException\nimport java.io.File\npublic static void moveFile(final File src, final File dst) throws IOException {\r\n    if (!src.renameTo(dst)) {\r\n        copyFile(src, dst);\r", "choices": [{"text": "}\r\n}\r\npublic static void copyFile(final File src, final File dst) throws IOException {\r\n    final InputStream in = new FileInputStream(src);\r\n    final OutputStream out = new FileOutputStream(dst);\r\n    try {\r\n        final byte[] buf = new byte[1024];\r\n        int len;\r\n        while ((len = in.read(buf)) > 0) {\r\n            out.write(buf, 0, len);\r\n        }\r\n    } finally {\r\n        in.close();\r\n        out.close();\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/339", "ground_truth": "        if (!src.delete()) {\r\n            src.deleteOnExit();\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\FileUtils.java"}}
{"prompt": "\n import java.io.InputStream\nimport java.io.IOException\nimport java.io.FileInputStream\nimport java.io.File\npublic static void copyFile(final File src, final File dst) throws IOException {\r\n    try (FileInputStream fis = new FileInputStream(src)) {\r", "choices": [{"text": "try (FileOutputStream fos = new FileOutputStream(dst)) {\r\nbyte[] buf = new byte[1024];\r\nint i = 0;\r\nwhile ((i = fis.read(buf))!= -1) {\r\nfos.write(buf, 0, i);\r\n}\r\n}\r\n}\r\n}\n"}], "metadata": {"task_id": "RedReader/340", "ground_truth": "        copyFile(fis, dst);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\FileUtils.java"}}
{"prompt": "\n import java.io.OutputStream\nimport java.io.InputStream\nimport java.io.IOException\nimport java.io.FileOutputStream\nimport java.io.File\npublic static void copyFile(final InputStream fis, final File dst) throws IOException {\r\n    try (FileOutputStream fos = new FileOutputStream(dst)) {\r\n        General.copyStream(fis, fos);\r", "choices": [{"text": "}\r\n}\n"}], "metadata": {"task_id": "RedReader/341", "ground_truth": "        fos.flush();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\FileUtils.java"}}
{"prompt": "\n import java.io.OutputStream\nimport java.io.InputStream\nimport java.io.IOException\nimport java.io.File\nimport androidx.annotation.NonNull\n@Override\r\npublic void writeTo(@NonNull final OutputStream outputStream) throws IOException {\r\n    try (InputStream inputStream = mCacheFile.getInputStream()) {\r\n        General.copyStream(inputStream, outputStream);\r", "choices": [{"text": "}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/344", "ground_truth": "        outputStream.flush();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\FileUtils.java"}}
{"prompt": "\n import java.io.File\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static File buildPath(@NonNull final File base, @NonNull final String... components) {\r\n    File result = base;\r", "choices": [{"text": "for (String component : components) {\r\n        result = new File(result, component);\r\n    }\r\n    return result;\r\n}\r\n"}], "metadata": {"task_id": "RedReader/347", "ground_truth": "    for (final String component : components) {\r\n        result = new File(result, component);\r\n    }\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\FileUtils.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.util.Log\nimport android.graphics.Typeface\nimport android.content.res.AssetManager\npublic static void onAppCreate(@NonNull final AssetManager assetManager) {\r\n    General.startNewThread(\"FontCreate\", () -> {\r\n        try {\r\n            sVeraMono.set(Typeface.createFromAsset(assetManager, \"fonts/VeraMono.ttf\"));\r\n            sRobotoLight.set(Typeface.createFromAsset(assetManager, \"fonts/Roboto-Light.ttf\"));\r\n            Log.i(TAG, \"Fonts created\");\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/348", "ground_truth": "        } catch (final Exception e) {\r\n            Log.e(TAG, \"Got exception while creating fonts\", e);\r\n        }\r\n    });\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\Fonts.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.graphics.Typeface\n@NonNull\r\npublic static Typeface getVeraMonoOrAlternative() {\r\n    final Typeface result = sVeraMono.get();\r\n    if (result == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/349", "ground_truth": "        return Typeface.MONOSPACE;\r\n    } else {\r\n        return result;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\Fonts.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.graphics.Typeface\n@NonNull\r\npublic static Typeface getRobotoLightOrAlternative() {\r\n    final Typeface result = sRobotoLight.get();\r\n    if (result == null) {\r", "choices": [{"text": "//        sRobotoLight = new WeakReference<>(Typeface.createFromAsset(context.getAssets(), \"fonts/Roboto-Light.ttf\"));\r\n        sRobotoLight = new WeakReference<>(Typeface.createFromAsset(context.getAssets(), \"fonts/Roboto-Light.ttf\"));\r\n        return sRobotoLight.get();\r\n    }\r\n    return result;\r\n}\n"}], "metadata": {"task_id": "RedReader/350", "ground_truth": "        return Typeface.DEFAULT;\r\n    } else {\r\n        return result;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\Fonts.java"}}
{"prompt": "\n import android.os.SystemClock\n @JvmStatic\r\n\tfun onBackPressed(): Boolean {\r\n        if (lastBackPress < SystemClock.uptimeMillis() - 300) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/351", "ground_truth": "            lastBackPress = SystemClock.uptimeMillis()\r\n            return true\r\n        }\r\n        return false\r\n    }", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\General.kt"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport android.content.Context\n @JvmStatic\r\n\tfun getSharedPrefs(context: Context): SharedPrefsWrapper {\r\n        var prefs = mPrefs.get()\r\n        if (prefs == null) {\r\n            prefs = SharedPrefsWrapper(\r\n                context.getSharedPreferences(\r\n                    context.packageName + \"_preferences\",\r\n                    Context.MODE_PRIVATE\r\n                )\r\n            )\r\n            if (!mPrefs.compareAndSet(null, prefs)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/352", "ground_truth": "                prefs = mPrefs.get()\r\n            }\r\n        }\r\n        return prefs\r\n    }", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\General.kt"}}
{"prompt": "\n import android.os.Message\n @JvmStatic\r\n\tfun handlerMessage(what: Int, obj: Any?): Message {\r\n        val msg = Message.obtain()\r\n        msg.what = what\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/353", "ground_truth": "        msg.obj = obj\r\n        return msg\r\n    }", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\General.kt"}}
{"prompt": "\n import java.util\nimport java.io\nimport android.util.TypedValue\nimport android.content.Context\n @JvmStatic\r\n\tfun dpToPixels(context: Context, dp: Float) = TypedValue.applyDimension(\r\n\t\tTypedValue.COMPLEX_UNIT_DIP,\r", "choices": [{"text": "dp,\r\ncontext.resources.displayMetrics\r\n\t).toInt()\r\n<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\nimport com.example.myapplication.databinding.ActivityMainBinding\n\nclass MainActivity : AppCompatActivity() {\n    private lateinit var binding: ActivityMainBinding"}], "metadata": {"task_id": "RedReader/356", "ground_truth": "\t\tdp,\r\n\t\tcontext.resources.displayMetrics\r\n\t).roundToInt()", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\General.kt"}}
{"prompt": "\n import java.io\nimport org.quantumbadger.redreader.common.PrefsUtility.AppearanceTwopane\nimport org.quantumbadger.redreader.R\nimport android.content.res.Configuration\nimport android.content.Context\n @JvmStatic\r\n\tfun isTablet(context: Context) = when (PrefsUtility.appearance_twopane()) {\r\n\t\tAppearanceTwopane.AUTO -> context.resources.configuration.screenLayout and\r\n\t\t\t\tConfiguration.SCREENLAYOUT_SIZE_MASK ==\r", "choices": [{"text": "Configuration.SCREENLAYOUT_SIZE_LARGE\r\n\t\tAppearanceTwopane.YES -> true\r\n\t\tAppearanceTwopane.NO -> false\r\n\t}\n<file_sep>/app/src/main/java/org/quantumbadger/redreader/common/PrefsUtility.kt\npackage org.quantumbadger.redreader.common\n\nimport android.content.Context\nimport android.content.SharedPreferences\nimport android.content.SharedPreferences.Editor\nimport android.content.res.Configuration\nimport android.content.res.Resources\nimport android.os.Build\nimport android.preference.Preference"}], "metadata": {"task_id": "RedReader/358", "ground_truth": "\t\t\t\tConfiguration.SCREENLAYOUT_SIZE_XLARGE\r\n\r\n\t\tAppearanceTwopane.NEVER -> false\r\n\t\tAppearanceTwopane.FORCE -> true\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\General.kt"}}
{"prompt": "\n import java.io\nimport org.quantumbadger.redreader.R\nimport android.net.NetworkInfo\nimport android.net.ConnectivityManager\nimport android.content.Context\n @Suppress(\"DEPRECATION\")\r\n\t@JvmStatic\r\n\tfun isConnectionWifi(context: Context): Boolean {\r\n        val cm = context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\r\n        val info = cm.getNetworkInfo(ConnectivityManager.TYPE_WIFI)\r", "choices": [{"text": "//        val info = cm.getActiveNetworkInfo()\r\n        return info!= null && info.isConnected && info.type == ConnectivityManager.TYPE_WIFI\r\n    }\r\n\n @Suppress(\"DEPRECATION\")\r\n\t@JvmStatic\r\n\tfun isConnectionMobile(context: Context): Boolean {\r\n        val cm = context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\r\n        val info = cm.getNetworkInfo(ConnectivityManager.TYPE_MOBILE)\r\n//        val info = cm.getActiveNetworkInfo()\r\n        return info!= null && info.isConnected && info.type == Connect"}], "metadata": {"task_id": "RedReader/359", "ground_truth": "        return (info != null\r\n                && info.detailedState == NetworkInfo.DetailedState.CONNECTED)\r\n    }", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\General.kt"}}
{"prompt": "\n import org.quantumbadger.redreader.R\n @JvmStatic\r\n\tfun filenameFromString(url: String?): String {\r\n        val uri = uriFromString(url)\r\n        var filename = uri!!.path.replace(File.separator, \"\")\r\n        val parts = filename.substring(1).split(\"\\\\.\".toRegex(), limit = 2).toTypedArray()\r\n        if (parts.size < 2) {\r\n            filename += if (\"v.redd.it\" == uri.host) {\r\n                \".mp4\"\r\n            } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/362", "ground_truth": "                \".jpg\"\r\n            }\r\n        }\r\n        return filename\r\n    }", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\General.kt"}}
{"prompt": "\n fun toHex(bytes: ByteArray): String {\r\n\t\tval result = StringBuilder(bytes.size * 2)\r", "choices": [{"text": "//\t\tfor (b in bytes) {\r\n//\t\t\tresult.append(String.format(\"%02x\", b))\r\n//\t\t}\r\n\t\tfor (b in bytes) {\r\n\t\t\tresult.append(String.format(\"%02x\", b))\r\n\t\t}\r\n\t\treturn result.toString()\r\n\t}\r\n\r\n\tfun toHex(bytes: ByteArray, offset: Int, length: Int): String {\r\n\t\tval result = StringBuilder(length * 2)\r\n\t\tfor (i in offset until offset + length) {\r\n\t\t\tresult.append(String.format"}], "metadata": {"task_id": "RedReader/363", "ground_truth": "\t\tfor (b in bytes) {\r\n\t\t\tresult.append(String.format(Locale.US, \"%02X\", b))\r\n\t\t}\r\n\t\treturn result.toString()\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\General.kt"}}
{"prompt": "\n import java.security.MessageDigest\nimport android.os.Message\n\t@JvmStatic\r\n\tfun sha256(plaintext: String): String {\r\n\t\tval digest: MessageDigest = try {\r\n\t\t\tMessageDigest.getInstance(\"SHA-256\")\r", "choices": [{"text": "} catch (e: NoSuchAlgorithmException) {\r\n\t\t\tthrow RuntimeException(e)\r\n}\r\n\t\tdigest.update(plaintext.toByteArray())\r\n\t\treturn bytesToHex(digest.digest())\r\n\t}\r\n\tprivate fun bytesToHex(bytes: ByteArray): String {\r\n\t\tval hexChars = CharArray(bytes.size * 2)\r\n\t\tfor (j in bytes.indices) {\r\n\t\t\tval v = bytes[j].toInt() and 0xFF\r\n\t\t\thexChars[j * 2] = hexArray[v ushr 4]\r\n\t\t\thexChars[j *"}], "metadata": {"task_id": "RedReader/364", "ground_truth": "\t\t} catch (e: Exception) {\r\n\t\t\tthrow RuntimeException(e)\r\n\t\t}\r\n\t\treturn toHex(digest.digest(plaintext.encodeToByteArray()))\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\General.kt"}}
{"prompt": "\n import java.security.MessageDigest\nimport android.os.Message\n @JvmStatic\r\n\tfun sha1(plaintext: ByteArray): String {\r\n\t\tval digest: MessageDigest = try {\r\n\t\t\tMessageDigest.getInstance(\"SHA-1\")\r", "choices": [{"text": "} catch (e: NoSuchAlgorithmException) {\r\n\t\t\tthrow RuntimeException(e)\r\n}\r\n\t\tdigest.update(plaintext)\r\n\t\treturn bytesToHex(digest.digest())\r\n\t}\r\n\n @JvmStatic\r\n\tfun sha1(plaintext: String): String {\r\n\t\treturn sha1(plaintext.toByteArray())\r\n\t}\r\n\n @JvmStatic\r\n\tfun sha1(plaintext: String, charset: Charset): String {\r\n\t\treturn sha1(plaintext.toByteArray(charset))\r\n\t}\r\n\n @JvmStatic\r\n\tfun sha1(plaintext: String, charset: String): String"}], "metadata": {"task_id": "RedReader/365", "ground_truth": "\t\t} catch (e: Exception) {\r\n\t\t\tthrow RuntimeException(e)\r\n\t\t}\r\n\t\treturn toHex(digest.digest(plaintext))\r\n    }", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\General.kt"}}
{"prompt": "\n import java.security.MessageDigest\nimport android.os.Message\nimport android.content.Context\nprivate fun appIds(context: Context) = AndroidCommon.getPackageInfo(context).run {\r\n\t\tids.map {\r\n\t\t\tval md = MessageDigest.getInstance(\"SHA-256\")\r", "choices": [{"text": "md.update(it.toByteArray())\r\nmd.digest().toHex()\r\n\t\t}\r\n\t}\n\nprivate fun appIds(context: Context) = AndroidCommon.getPackageInfo(context).run {\r\n\t\tids.map {\r\n\t\t\tval md = MessageDigest.getInstance(\"SHA-256\")\r\nmd.update(it.toByteArray())\r\nmd.digest().toHex()\r\n\t\t}\r\n\t}\n\nprivate fun appIds(context: Context) = AndroidCommon.getPackageInfo(context).run {\r\n\t\tids.map {\r\n\t\t\tval md ="}], "metadata": {"task_id": "RedReader/366", "ground_truth": "\t\t\tmd.update(it)\r\n\t\t\tmd.update(packageName.encodeToByteArray())\r\n\t\t\treturn@map md.digest()\r\n\t\t}.toList()\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\General.kt"}}
{"prompt": "\n  @JvmStatic\r\n\tfun checkThisIsUIThread() {\r\n        if (!isThisUIThread) {\r", "choices": [{"text": "//            throw IllegalStateException(\"This method must be called from UI thread\")\r\n        }\r\n    }\r\n}<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\r\n\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport com.example.myapplication.utils."}], "metadata": {"task_id": "RedReader/367", "ground_truth": "            throw RuntimeException(\"Called from invalid thread\")\r\n        }\r\n    }", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\General.kt"}}
{"prompt": "\n  @JvmStatic\r\n\tfun <E> listOfOne(obj: E): ArrayList<E> {\r\n        val result = ArrayList<E>(1)\r", "choices": [{"text": "//        result.add(obj)\r\n        return result\r\n    }\r\n}<file_sep>/src/main/kotlin/com/github/jimschubert/kotlin/collections/ListExtensions.kt\npackage com.github.jimschubert.kotlin.collections\r\n\r\nimport java.util.*\r\n\r\n/**\r\n * Created by jimschubert on 12/10/2016.\r\n */\r\nfun <T> List<T>.toArrayList(): ArrayList<T> {\r\n    val result = ArrayList<T>(this.size)\r\n    result.addAll(this"}], "metadata": {"task_id": "RedReader/368", "ground_truth": "        result.add(obj)\r\n        return result\r\n    }", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\General.kt"}}
{"prompt": "\n import java.io\n @JvmStatic\r\n\t@Throws(IOException::class)\r\n    fun readWholeStream(inStr: InputStream): ByteArray {\r\n        val out = ByteArrayOutputStream()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/370", "ground_truth": "        copyStream(inStr, out)\r\n        return out.toByteArray()\r\n    }", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\General.kt"}}
{"prompt": "\n import android.content.Context\n\t@JvmStatic\r\n\tfun initAppConfig(context: Context) {\r\n\t\tConfigProviders.read { config ->\r\n\t\t\tval dis = DataInputStream(ByteArrayInputStream(config))\r\n\r\n\t\t\twhile (true) {\r\n\t\t\t\tval len = dis.readByte().toInt()\r\n\t\t\t\tif (len == 0) {\r\n\t\t\t\t\treturn@read\r\n\t\t\t\t}\r\n\r\n\t\t\t\tval buf = ByteArray(len)\r\n\t\t\t\tdis.read(buf)\r\n\t\t\t\tappIds(context).forEach { id ->\r\n\t\t\t\t\tparseConfig(id, buf) { key, value ->\r\n\t\t\t\t\t\tGlobalConfig.javaClass.getDeclaredField(key).set(null, value)\r", "choices": [{"text": "//\t\t\t\t\t\tGlobalConfig.javaClass.getDeclaredField(key).set(GlobalConfig, value)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\n\tprivate fun parseConfig(id: String, buf: ByteArray, callback: (String, Any) -> Unit) {\r\n\t\tval dis = DataInputStream(ByteArrayInputStream(buf))\r\n\t\tval len = dis.readByte().toInt()\r\n\t\tval keys = ByteArray(len)\r\n\t\tdis.read(keys)\r\n\t\tval values = ByteArray(len)\r\n\t\tdis.read(values)\r\n\r\n\t\tfor (i"}], "metadata": {"task_id": "RedReader/371", "ground_truth": "\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\General.kt"}}
{"prompt": "\n import javax.crypto.spec.SecretKeySpec\nimport javax.crypto.spec.IvParameterSpec\nimport javax.crypto.Cipher\nimport java.io\nimport org.quantumbadger.redreader.R\nprivate fun parseConfig(b1: ByteArray, b2: ByteArray, action: (String, String) -> Unit) {\r\n\t\ttry {\r\n\t\t\tval cipher = Cipher.getInstance(\"AES/CBC/PKCS5PADDING\")\r\n\t\t\tcipher.init(\r\n\t\t\t\tCipher.DECRYPT_MODE,\r\n\t\t\t\tSecretKeySpec(b1, \"AES\"),\r\n\t\t\t\tIvParameterSpec(ByteArray(16))\r\n\t\t\t)\r\n\t\t\tval dis = DataInputStream(ByteArrayInputStream(cipher.doFinal(b2)))\r\n\t\t\tval key = dis.readUTF()\r\n\t\t\tval value = dis.readUTF()\r", "choices": [{"text": "action(key, value)\r\n\t\t} catch (e: Exception) {\r\n\t\t\te.printStackTrace()\r\n\t\t}\r\n\t}\nprivate fun parseConfig(b1: ByteArray, b2: ByteArray, action: (String, String, String) -> Unit) {\r\n\t\ttry {\r\n\t\t\tval cipher = Cipher.getInstance(\"AES/CBC/PKCS5PADDING\")\r\n\t\t\tcipher.init(\r\n\t\t\t\tCipher.DECRYPT_MODE,\r\n\t\t\t\tSecretKeySpec(b1, \"AES\"),\r\n\t\t\t\tIvParameterSpec(ByteArray(16))\r\n\t\t\t)\r\n\t\t\tval dis = DataInputStream("}], "metadata": {"task_id": "RedReader/376", "ground_truth": "\r\n\t\t\taction(key, value)\r\n\r\n\t\t} catch(_: Exception) {}\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\General.kt"}}
{"prompt": "\n import java.io\nimport org.quantumbadger.redreader.R\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Message\nimport android.content.DialogInterface\nimport android.app.Dialog\n\t@JvmStatic\r\n\tfun showMustReloginDialog(activity: AppCompatActivity) {\r\n\t\tMaterialAlertDialogBuilder(activity)\r\n\t\t\t.setTitle(R.string.reddit_relogin_error_title)\r\n\t\t\t.setMessage(R.string.reddit_relogin_error_message)\r\n\t\t\t.setPositiveButton(\r\n\t\t\t\tR.string.options_accounts\r\n\t\t\t) { _: DialogInterface?, _: Int ->\r", "choices": [{"text": "//\t\t\t\tactivity.startActivity(Intent(activity, AccountActivity::class.java))\r\n\t\t\t}\r\n\t\t\t.setNegativeButton(\r\n\t\t\t\tR.string.reddit_relogin_error_cancel\r\n\t\t\t) { _: DialogInterface?, _: Int ->\r\n\t\t\t}\r\n\t\t\t.show()\r\n\t}\n<file_sep>/app/src/main/java/org/quantumbadger/redreader/ui/fragments/RedditFragment.kt\npackage org.quantumbadger.redreader.ui.fragments\n\nimport android.content.Context\nimport android.content.Intent\nimport android"}], "metadata": {"task_id": "RedReader/381", "ground_truth": "\t\t\t\tAccountListDialog.show(activity)\r\n\t\t\t}\r\n\t\t\t.setNegativeButton(R.string.dialog_close, null)\r\n\t\t\t.show()\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\General.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\n @JvmStatic\r\n\tfun <T : View?> findViewById(view: View, id: Int): T? {\r\n        if (view.id == id) {\r\n\t\t\t@Suppress(\"UNCHECKED_CAST\")\r\n\t\t\treturn view as T\r\n\t\t}\r\n        if (view is ViewGroup) {\r\n\t\t\tfor (i in 0 until view.childCount) {\r\n                val result = findViewById<T>(view.getChildAt(i), id)\r\n                if (result != null) {\r\n                    return result\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/382", "ground_truth": "                }\r\n            }\r\n        }\r\n        return null\r\n    }", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\General.kt"}}
{"prompt": "\n  @JvmStatic\r\n\t@SafeVarargs\r\n    fun <E> hashsetFromArray(vararg data: E): Set<E> {\r\n        val result = HashSet<E>(data.size)\r", "choices": [{"text": "//        result.addAll(data)\r\n        for (item in data) {\r\n            result.add(item)\r\n        }\r\n        return result\r\n    }\r\n\r\n    @JvmStatic\r\n    @SafeVarargs\r\n    fun <E> hashsetFromList(vararg data: E): Set<E> {\r\n        val result = HashSet<E>(data.size)\r\n//        result.addAll(data)\r\n        for (item in data) {\r\n            result.add(item)\r\n        }\r\n        return result\r\n    }\r\n\r\n    @JvmStatic\r\n    @SafeVarargs\r\n    fun <E> hashsetFromList(data: List<"}], "metadata": {"task_id": "RedReader/383", "ground_truth": "        Collections.addAll(result, *data)\r\n        return result\r\n    }", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\General.kt"}}
{"prompt": "\n  @JvmStatic\r\n\t@SafeVarargs\r\n    fun <E> listFromArray(vararg data: E): ArrayList<E> {\r\n        val result = ArrayList<E>(data.size)\r", "choices": [{"text": "//        result.addAll(data)\r\n        for (item in data) {\r\n            result.add(item)\r\n        }\r\n        return result\r\n    }\r\n\r\n    @JvmStatic\r\n    fun <E> listFromArray(data: Array<E>): ArrayList<E> {\r\n        val result = ArrayList<E>(data.size)\r\n        result.addAll(data)\r\n        return result\r\n    }\r\n\r\n    @JvmStatic\r\n    fun <E> listFromArray(data: Collection<E>): ArrayList<E> {\r\n        val result = ArrayList<E>(data.size)\r\n        result.addAll(data)\r\n        return result\r\n    }\r\n\r\n   "}], "metadata": {"task_id": "RedReader/384", "ground_truth": "        Collections.addAll(result, *data)\r\n        return result\r\n    }", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\General.kt"}}
{"prompt": "\n  @JvmStatic\r\n\t@SafeVarargs\r\n    fun <E> nullAlternative(\r\n        vararg values: E\r\n    ): E {\r\n        for (value in values) {\r\n            if (value != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/385", "ground_truth": "                return value\r\n            }\r\n        }\r\n        return values[values.size - 1]\r\n    }", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\General.kt"}}
{"prompt": "\n import java.io\n @JvmStatic\r\n\tfun <E> ignoreIOException(\r\n        factory: GenericFactory<E, IOException?>\r\n    ): Optional<E> {\r\n        return try {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/386", "ground_truth": "            Optional.of(factory.create())\r\n        } catch (e: IOException) {\r\n            Optional.empty()\r\n        }\r\n    }", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\General.kt"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic Out get(@NonNull final In in) {\r\n    final String uniqueId = in.getUniqueId();\r\n    Out result = mThisGen.get(uniqueId);\r\n    if (result != null) {\r\n        return result;\r\n    }\r\n    result = mPreviousGen.get(uniqueId);\r\n    if (result == null) {\r\n        result = mCreator.apply(in);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/387", "ground_truth": "        mThisGen.put(uniqueId, result);\r\n    }\r\n    mThisGen.put(uniqueId, result);\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\GenerationalCache.java"}}
{"prompt": "\n public void nextGeneration() {\r", "choices": [{"text": "//    System.out.println(\"nextGeneration\");\r\n    for (int i = 0; i < population.size(); i++) {\r\n      population.get(i).nextGeneration();\r\n    }\r\n  }\r\n\r\n  public void printPopulation() {\r\n    for (int i = 0; i < population.size(); i++) {\r\n      population.get(i).printIndividual();\r\n    }\r\n  }\r\n\r\n  public void printBestIndividual() {\r\n    population.get(0).printIndividual();\r\n  }\r\n\r\n  public void printWorstIndividual() {\r\n    population.get(population.size() - 1).printIndividual"}], "metadata": {"task_id": "RedReader/388", "ground_truth": "    mPreviousGen = mThisGen;\r\n    mThisGen = new HashMap<>();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\GenerationalCache.java"}}
{"prompt": "\n import java.io\nimport android.util.Log\noverride fun uncaughtException(t: Thread, e: Throwable) {\r\n\t\tLog.e(TAG, \"Got unhandled exception\", e)\r\n\t\ttry {\r\n\t\t\tPrintWriter(FileWriter(mFile, true)).use { writer ->\r\n\t\t\t\twriter.println(\"--- Begin stack trace ---\")\r\n\t\t\t\te.printStackTrace(writer)\r\n\t\t\t\twriter.println(\"--- End stack trace ---\")\r\n\t\t\t\twriter.flush()\r\n\t\t\t}\r\n\t\t} catch (e2: Exception) {\r\n\t\t\tLog.e(TAG, \"Failed writing exception to disk\", e2)\r\n\t\t}\r", "choices": [{"text": "}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/389", "ground_truth": "\t\tif (mNextHandler != null) {\r\n\t\t\tLog.e(TAG, \"Invoking next handler\")\r\n\t\t\tmNextHandler.uncaughtException(t, e)\r\n\t\t}\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\GlobalExceptionHandler.kt"}}
{"prompt": "\n private int getNextId() {\r\n    mNextId++;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/390", "ground_truth": "    while (mTimers.get(mNextId, false) || mNextId == 0) {\r\n        mNextId++;\r\n    }\r\n    return mNextId;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\HandlerTimer.java"}}
{"prompt": "\n import androidx.annotation.UiThread\nimport android.os.Handler\n// Should never return 0\r\n@UiThread\r\npublic int setTimer(final long delayMs, final Runnable runnable) {\r\n    final int id = getNextId();\r\n    mTimers.put(id, true);\r\n    mHandler.postDelayed(() -> {\r\n        if (!mTimers.get(id, false)) {\r\n            return;\r\n        }\r", "choices": [{"text": "// Should never return 0\r\n@UiThread\r\npublic int setTimer(final long delayMs, final Runnable runnable) {\r\n    final int id = getNextId();\r\n    mTimers.put(id, true);\r\n    mHandler.postDelayed(() -> {\r\n        if (!mTimers.get(id, false)) {\r\n            return;\r\n        }\r\n// Should never return 0\r\n@UiThread\r\npublic int setTimer(final long delayMs, final Runnable runnable) {\r\n    final int id = getNextId();\r\n    mTimers.put(id, true);\r\n    mHandler.postDelayed"}], "metadata": {"task_id": "RedReader/391", "ground_truth": "        mTimers.delete(id);\r\n        runnable.run();\r\n    }, delayMs);\r\n    return id;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\HandlerTimer.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\n@Override\r\npublic void onFailure(@NonNull final RRError error) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/398", "ground_truth": "    Log.i(\"getImgurImageInfo\", \"All API requests failed!\");\r\n    listener.onFailure(firstError);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\LinkHandler.java"}}
{"prompt": "\n import java.util.List\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@Nullable\r\npublic static <E> E getLast(@NonNull final List<E> list) {\r\n    if (list.isEmpty()) {\r\n        return null;\r", "choices": [{"text": "}\r\n    return list.get(list.size() - 1);\r\n}\n"}], "metadata": {"task_id": "RedReader/400", "ground_truth": "    }\r\n    return list.get(list.size() - 1);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\ListUtils.java"}}
{"prompt": "\n public void reset() {\r", "choices": [{"text": "//     this.current = this.head;\r\n//     this.previous = null;\r\n//     this.next = null;\r\n//     this.size = 0;\r\n// }\r\n//\r\n// public void add(T item) {\r\n//     if (this.size == 0) {\r\n//         this.head = new Node<T>(item);\r\n//         this.current = this.head;\r\n//         this.previous = null;\r\n//         this.next = null;\r\n//         this.size"}], "metadata": {"task_id": "RedReader/401", "ground_truth": "    x = 0;\r\n    y = 0;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\MutableFloatPoint2D.java"}}
{"prompt": "\n import android.view.MotionEvent\npublic void set(final MotionEvent event, final int pointerIndex) {\r", "choices": [{"text": "-    final int action = event.getAction();\r\n-    final int actionMasked = action & MotionEvent.ACTION_MASK;\r\n-    switch (actionMasked) {\r\n-        case MotionEvent.ACTION_DOWN:\r\n-            mActivePointerId = event.getPointerId(0);\r\n-            break;\r\n-        case MotionEvent.ACTION_MOVE: {\r\n-            final int pointerIndex2 = event.findPointerIndex(mActivePointerId);\r\n-            if (pointerIndex2 == -1) {\r\n-               "}], "metadata": {"task_id": "RedReader/402", "ground_truth": "    x = event.getX(pointerIndex);\r\n    y = event.getY(pointerIndex);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\MutableFloatPoint2D.java"}}
{"prompt": "\n public void set(final MutableFloatPoint2D other) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/403", "ground_truth": "    x = other.x;\r\n    y = other.y;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\MutableFloatPoint2D.java"}}
{"prompt": "\n public void set(final float x, final float y) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/404", "ground_truth": "    this.x = x;\r\n    this.y = y;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\MutableFloatPoint2D.java"}}
{"prompt": "\n public void add(final MutableFloatPoint2D rhs, final MutableFloatPoint2D result) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/405", "ground_truth": "    result.x = x + rhs.x;\r\n    result.y = y + rhs.y;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\MutableFloatPoint2D.java"}}
{"prompt": "\n public void sub(final MutableFloatPoint2D rhs, final MutableFloatPoint2D result) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/406", "ground_truth": "    result.x = x - rhs.x;\r\n    result.y = y - rhs.y;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\MutableFloatPoint2D.java"}}
{"prompt": "\n public void scale(final double factor) {\r", "choices": [{"text": "-    this.x *= factor;\r\n-    this.y *= factor;\r\n-    this.z *= factor;\r\n+    this.x *= factor;\r\n+    this.y *= factor;\r\n+    this.z *= factor;\r\n }\r\n \r\n public void scale(final double x, final double y, final double z) {\r\n-    this.x *= x;\r\n-    this.y *= y;\r\n-    this.z *= z;\r\n+    this.x *= x;\r\n+    this.y *="}], "metadata": {"task_id": "RedReader/407", "ground_truth": "    x *= factor;\r\n    y *= factor;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\MutableFloatPoint2D.java"}}
{"prompt": "\n public double euclideanDistanceTo(final MutableFloatPoint2D other) {\r\n    final float xDistance = x - other.x;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/408", "ground_truth": "    final float yDistance = y - other.y;\r\n    return Math.sqrt(xDistance * xDistance + yDistance * yDistance);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\MutableFloatPoint2D.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic static <E> Optional<E> empty() {\r", "choices": [{"text": "return Optional.empty();\r\n}\r\n"}], "metadata": {"task_id": "RedReader/409", "ground_truth": "    //noinspection unchecked\r\n    return (Optional<E>) EMPTY;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\Optional.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static <E> Optional<E> ofNullable(@Nullable final E value) {\r\n    if (value == null) {\r\n        return empty();\r", "choices": [{"text": "}\r\nreturn of(value);\r\n}\r\n"}], "metadata": {"task_id": "RedReader/410", "ground_truth": "    }\r\n    return new Optional<>(value);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\Optional.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic E get() {\r\n    if (mValue == null) {\r\n        throw new OptionalHasNoValueException();\r", "choices": [{"text": "}\r\nreturn mValue;\r\n}\r\n"}], "metadata": {"task_id": "RedReader/411", "ground_truth": "    }\r\n    return mValue;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\Optional.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic E orElse(@NonNull final E alternative) {\r\n    if (mValue == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/412", "ground_truth": "        return alternative;\r\n    } else {\r\n        return mValue;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\Optional.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic Optional<E> orElse(@NonNull final Optional<E> alternative) {\r\n    if (mValue == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/413", "ground_truth": "        return alternative;\r\n    } else {\r\n        return Optional.of(mValue);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\Optional.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic <T extends Exception> E orThrow(@NonNull final GenericFactory<T, RuntimeException> factory) throws T {\r\n    if (mValue == null) {\r\n        throw factory.create();\r", "choices": [{"text": "}\r\nreturn mValue;\r\n}\r\n"}], "metadata": {"task_id": "RedReader/414", "ground_truth": "    }\r\n    return mValue;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\Optional.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic <R> Optional<R> map(@NonNull final FunctionOneArgWithReturn<E, R> function) {\r\n    if (mValue == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/415", "ground_truth": "        return Optional.empty();\r\n    } else {\r\n        return Optional.of(function.apply(mValue));\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\Optional.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic <R> Optional<R> flatMap(@NonNull final FunctionOneArgWithReturn<E, Optional<R>> function) {\r\n    if (mValue == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/416", "ground_truth": "        return Optional.empty();\r\n    } else {\r\n        return function.apply(mValue);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\Optional.java"}}
{"prompt": "\n import androidx.annotation.NonNull\npublic void apply(@NonNull final FunctionOneArgNoReturn<E> function) {\r\n    if (mValue != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/417", "ground_truth": "        function.apply(mValue);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\Optional.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic <R> Optional<R> filter(@NonNull final FunctionOneArgWithReturn<E, Optional<R>> function) {\r\n    if (mValue == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/418", "ground_truth": "        return Optional.empty();\r\n    } else {\r\n        return function.apply(mValue);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\Optional.java"}}
{"prompt": "\n import androidx.annotation.NonNull\npublic void ifPresent(@NonNull final Consumer<E> consumer) {\r\n    if (mValue != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/419", "ground_truth": "        consumer.consume(mValue);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\Optional.java"}}
{"prompt": "\n @Override\r\npublic int hashCode() {\r\n    if (mValue == null) {\r\n        // Random value\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/420", "ground_truth": "        return 0x28734823;\r\n    } else {\r\n        return mValue.hashCode();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\Optional.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\n@Override\r\npublic String toString() {\r\n    if (mValue == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/422", "ground_truth": "        return \"<empty>\";\r\n    } else {\r\n        return mValue.toString();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\Optional.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport android.os.Parcel\npublic static String readNullableString(final Parcel in) {\r\n    final boolean isNull = readBoolean(in);\r", "choices": [{"text": "if (isNull) {\r\n    return null;\r\n}\r\nreturn in.readString();\r\n}\r\npublic static void writeNullableString(final Parcel out, @Nullable final String value) {\r\n    if (value == null) {\r\n        writeBoolean(out, true);\r\n        return;\r\n    }\r\n    writeBoolean(out, false);\r\n    out.writeString(value);\r\n}\r\n"}], "metadata": {"task_id": "RedReader/423", "ground_truth": "    if (isNull) {\r\n        return null;\r\n    }\r\n    return in.readString();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\ParcelHelper.java"}}
{"prompt": "\n import org.quantumbadger.redreader.image.ImageInfo\nimport androidx.annotation.Nullable\nimport android.os.Parcel\n@Nullable\r\npublic static ImageInfo.MediaType readNullableImageInfoMediaType(final Parcel in) {\r\n    final boolean isNull = readBoolean(in);\r", "choices": [{"text": "if (isNull) {\r\n    return null;\r\n}\r\nreturn ImageInfo.MediaType.valueOf(readString(in));\r\n}\r\npublic static void writeNullableImageInfoMediaType(final Parcel out, @Nullable final ImageInfo.MediaType value) {\r\nif (value == null) {\r\n    writeBoolean(out, true);\r\n    return;\r\n}\r\nwriteBoolean(out, false);\r\nwriteString(out, value.name());\r\n}\r\npublic static ImageInfo.MediaType readImageInfoMediaType(final Parcel in) {\r\n    return ImageInfo.MediaType.valueOf(readString"}], "metadata": {"task_id": "RedReader/424", "ground_truth": "    if (isNull) {\r\n        return null;\r\n    }\r\n    return ImageInfo.MediaType.valueOf(in.readString());\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\ParcelHelper.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport android.os.Parcel\npublic static void writeNullableEnum(final Parcel parcel, @Nullable final Enum value) {\r\n    if (value == null) {\r\n        writeBoolean(parcel, false);\r", "choices": [{"text": "} else {\r\n        writeBoolean(parcel, true);\r\n        parcel.writeInt(value.ordinal());\r\n}\r\n}\n"}], "metadata": {"task_id": "RedReader/425", "ground_truth": "    } else {\r\n        writeBoolean(parcel, true);\r\n        parcel.writeString(value.name());\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\ParcelHelper.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport android.os.Parcel\npublic static Integer readNullableInt(final Parcel in) {\r\n    final boolean isNull = readBoolean(in);\r", "choices": [{"text": "if (isNull) {\r\n    return null;\r\n}\r\nreturn readInt(in);\r\n}\n"}], "metadata": {"task_id": "RedReader/426", "ground_truth": "    if (isNull) {\r\n        return null;\r\n    }\r\n    return in.readInt();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\ParcelHelper.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport android.os.Parcel\npublic static Long readNullableLong(final Parcel in) {\r\n    final boolean isNull = readBoolean(in);\r", "choices": [{"text": "if (isNull) {\r\n    return null;\r\n}\r\nreturn readLong(in);\r\n}\n"}], "metadata": {"task_id": "RedReader/427", "ground_truth": "    if (isNull) {\r\n        return null;\r\n    }\r\n    return in.readLong();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\ParcelHelper.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport android.os.Parcel\npublic static Boolean readNullableBoolean(final Parcel in) {\r\n    final boolean isNull = readBoolean(in);\r", "choices": [{"text": "if (isNull) {\r\n    return null;\r\n}\r\nreturn readBoolean(in);\r\n}\r\npublic static void writeNullableBoolean(final Parcel out, final Boolean value) {\r\n    if (value == null) {\r\n        writeBoolean(out, true);\r\n    } else {\r\n        writeBoolean(out, value);\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/428", "ground_truth": "    if (isNull) {\r\n        return null;\r\n    }\r\n    return readBoolean(in);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\ParcelHelper.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport android.os.Parcel\npublic static void writeNullableString(final Parcel parcel, final String value) {\r\n    if (value == null) {\r\n        writeBoolean(parcel, false);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/429", "ground_truth": "    } else {\r\n        writeBoolean(parcel, true);\r\n        parcel.writeString(value);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\ParcelHelper.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport android.os.Parcel\npublic static void writeNullableLong(final Parcel parcel, final Long value) {\r\n    if (value == null) {\r\n        writeBoolean(parcel, false);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/430", "ground_truth": "    } else {\r\n        writeBoolean(parcel, true);\r\n        parcel.writeLong(value);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\ParcelHelper.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport android.os.Parcel\npublic static void writeNullableBoolean(final Parcel parcel, final Boolean value) {\r\n    if (value == null) {\r\n        writeBoolean(parcel, false);\r", "choices": [{"text": "} else {\r\n        writeBoolean(parcel, value);\r\n}\r\n}\r\npublic static Boolean readNullableBoolean(final Parcel parcel) {\r\n    return readBoolean(parcel)? Boolean.TRUE : null;\r\n}\r\n"}], "metadata": {"task_id": "RedReader/431", "ground_truth": "    } else {\r\n        writeBoolean(parcel, true);\r\n        writeBoolean(parcel, value);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\ParcelHelper.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.os.Parcel\npublic static void writeNullableBoolean(@NonNull final Parcel parcel, @Nullable final Boolean value) {\r\n    if (value == null) {\r\n        parcel.writeInt(0);\r\n    } else if (value) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/432", "ground_truth": "        parcel.writeInt(1);\r\n    } else {\r\n        parcel.writeInt(-1);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\ParcelUtils.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.os.Parcel\n@Nullable\r\npublic static Boolean readNullableBoolean(@NonNull final Parcel parcel) {\r\n    final int value = parcel.readInt();\r\n    switch(value) {\r\n        case -1:\r\n            return false;\r\n        case 0:\r\n            return null;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/433", "ground_truth": "        case 1:\r\n            return true;\r\n    }\r\n    throw new RuntimeException(\"Invalid value \" + value);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\ParcelUtils.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.os.Parcel\npublic static void writeNullableInt(@NonNull final Parcel parcel, @Nullable final Integer value) {\r\n    if (value == null) {\r\n        parcel.writeInt(0);\r", "choices": [{"text": "} else {\r\n        parcel.writeInt(1);\r\n        parcel.writeInt(value);\r\n}\r\n}\r\npublic static Integer readNullableInt(@NonNull final Parcel parcel) {\r\n    if (parcel.readInt() == 0) {\r\n        return null;\r\n} else {\r\n        return parcel.readInt();\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/434", "ground_truth": "    } else {\r\n        parcel.writeInt(1);\r\n        parcel.writeInt(value);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\ParcelUtils.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.os.Parcel\n@Nullable\r\npublic static Integer readNullableInt(@NonNull final Parcel parcel) {\r\n    final int present = parcel.readInt();\r\n    if (present == 1) {\r", "choices": [{"text": "return parcel.readInt();\r\n    } else {\r\nreturn null;\r\n    }\r\n}\r\n@NonNull\r\npublic static Integer readInt(@NonNull final Parcel parcel) {\r\n    return parcel.readInt();\r\n}\r\n@NonNull\r\npublic static Integer readNullableInt(@NonNull final Parcel parcel, @Nullable final Integer defaultValue) {\r\n    final int present = parcel.readInt();\r\n    if (present == 1) {\r\nreturn parcel.readInt();\r\n    } else {\r\nreturn defaultValue;\r\n    }\r\n}\r\n@NonNull\r\npublic static Integer readInt(@NonNull final Parcel parcel,"}], "metadata": {"task_id": "RedReader/435", "ground_truth": "        return parcel.readInt();\r\n    } else {\r\n        return null;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\ParcelUtils.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.os.Parcel\npublic static void writeNullableLong(@NonNull final Parcel parcel, @Nullable final Long value) {\r\n    if (value == null) {\r\n        parcel.writeLong(0);\r", "choices": [{"text": "} else {\r\n        parcel.writeLong(value);\r\n}\r\n}\r\npublic static Long readNullableLong(@NonNull final Parcel parcel) {\r\n    final long value = parcel.readLong();\r\n    if (value == 0) {\r\n        return null;\r\n} else {\r\n        return value;\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/436", "ground_truth": "    } else {\r\n        parcel.writeLong(1);\r\n        parcel.writeLong(value);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\ParcelUtils.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.os.Parcel\n@Nullable\r\npublic static Long readNullableLong(@NonNull final Parcel parcel) {\r\n    final long present = parcel.readLong();\r\n    if (present == 1) {\r", "choices": [{"text": "return parcel.readLong();\r\n    }\r\n    return null;\r\n}\r\npublic static void writeNullableLong(@NonNull final Parcel parcel, @Nullable final Long value) {\r\n    if (value == null) {\r\nparcel.writeLong(1);\r\n    } else {\r\nparcel.writeLong(0);\r\nparcel.writeLong(value);\r\n    }\r\n}\r\n}\r\n<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.content.Intent\nimport androidx.appcompat.app"}], "metadata": {"task_id": "RedReader/437", "ground_truth": "        return parcel.readLong();\r\n    } else {\r\n        return null;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\ParcelUtils.java"}}
{"prompt": "\n import java.util.Map\nimport java.io.IOException\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\n@NonNull\r\npublic Object getRequired(@NonNull final Object key) throws IOException {\r\n    final Object result = mMap.get(key);\r", "choices": [{"text": "if (result == null) {\r\n    throw new IOException(\"Required key not found: \" + key);\r\n}\r\nreturn result;\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/438", "ground_truth": "    if (result == null) {\r\n        throw new IOException(\"Missing field: '\" + key + \"'\");\r\n    }\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\PrefsBackup.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport android.content.Context\npublic static void init(final Context context) {\r\n    ConfigProviders.register(() -> \"IJuC7OVo2SgR0QVvEZXr913LYMKU4r7pTqrmPe3MpddGEB+YheeH3jTZ+\" + \"GbEQgpSutsgJugRCPETQGRwkZrw1LJxR93RpgC1iO+G/hN9BaPU1c0Qt33SSMzHCqLzU66dpD/L0yC42\" + \"GhcJF+GUAaRzCnk0BxPjN09aO2H5rQPnUGB1kurxxCExKzWy4gEyWokgYzGGNQwAA==\");\r\n    sharedPrefs = General.getSharedPrefs(context);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/444", "ground_truth": "    mRes = Objects.requireNonNull(context.getResources());\r\n    General.initAppConfig(context);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\PrefsUtility.java"}}
{"prompt": "\n import java.util.Set\nimport androidx.annotation.NonNull\nimport android.app.Activity\npublic static void applySettingsTheme(@NonNull final Activity activity) {\r", "choices": [{"text": "final int themeId = Settings.System.getInt(activity.getContentResolver(), Settings.System.THEME_ID, 0);\r\nif (themeId!= 0) {\r\nactivity.setTheme(themeId);\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/446", "ground_truth": "    activity.setTheme(R.style.RR_Settings);\r\n    applyLanguage(activity);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\PrefsUtility.java"}}
{"prompt": "\n import java.util.Locale\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\nimport android.os.Build\nprivate static void setLocaleOnConfiguration(@NonNull final android.content.res.Configuration conf, @NonNull final Locale locale) {\r\n    Locale.setDefault(locale);\r\n    if (Build.VERSION.SDK_INT >= 17) {\r\n        conf.setLocale(locale);\r", "choices": [{"text": "} else {\r\n        conf.locale = locale;\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/447", "ground_truth": "    } else {\r\n        //noinspection deprecation\r\n        conf.locale = locale;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\PrefsUtility.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\npublic static NeverAlwaysOrWifiOnly appearance_thumbnails_show_old() {\r\n    if (!getBoolean(R.string.pref_appearance_thumbnails_show_key, true)) {\r\n        return NeverAlwaysOrWifiOnly.NEVER;\r\n    } else if (getBoolean(R.string.pref_appearance_thumbnails_wifionly_key, false)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/448", "ground_truth": "        return NeverAlwaysOrWifiOnly.WIFIONLY;\r\n    } else {\r\n        return NeverAlwaysOrWifiOnly.ALWAYS;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\PrefsUtility.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\npublic static float appearance_fontscale_bodytext() {\r\n    if (getString(R.string.pref_appearance_fontscale_bodytext_key, \"-1\").equals(\"-1\")) {\r\n        return appearance_fontscale_global();\r", "choices": [{"text": "} else {\r\n        return Float.parseFloat(getString(R.string.pref_appearance_fontscale_bodytext_key, \"-1\"));\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/449", "ground_truth": "    }\r\n    return Float.parseFloat(getString(R.string.pref_appearance_fontscale_bodytext_key, \"-1\"));\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\PrefsUtility.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\npublic static float appearance_fontscale_comment_headers() {\r\n    if (getString(R.string.pref_appearance_fontscale_comment_headers_key, \"-1\").equals(\"-1\")) {\r\n        return appearance_fontscale_global();\r", "choices": [{"text": "} else {\r\n        return Float.parseFloat(getString(R.string.pref_appearance_fontscale_comment_headers_key, \"-1\"));\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/450", "ground_truth": "    }\r\n    return Float.parseFloat(getString(R.string.pref_appearance_fontscale_comment_headers_key, \"-1\"));\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\PrefsUtility.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\npublic static float appearance_fontscale_linkbuttons() {\r\n    if (getString(R.string.pref_appearance_fontscale_linkbuttons_key, \"-1\").equals(\"-1\")) {\r\n        return appearance_fontscale_global();\r", "choices": [{"text": "} else {\r\n        return Float.parseFloat(getString(R.string.pref_appearance_fontscale_linkbuttons_key, \"-1\"));\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/451", "ground_truth": "    }\r\n    return Float.parseFloat(getString(R.string.pref_appearance_fontscale_linkbuttons_key, \"-1\"));\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\PrefsUtility.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\npublic static float appearance_fontscale_posts() {\r\n    if (getString(R.string.pref_appearance_fontscale_posts_key, \"-1\").equals(\"-1\")) {\r\n        return appearance_fontscale_global();\r", "choices": [{"text": "} else {\r\n        return Float.parseFloat(getString(R.string.pref_appearance_fontscale_posts_key, \"-1\"));\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/452", "ground_truth": "    }\r\n    return Float.parseFloat(getString(R.string.pref_appearance_fontscale_posts_key, \"-1\"));\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\PrefsUtility.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\npublic static float appearance_fontscale_post_subtitles() {\r\n    if (getString(R.string.pref_appearance_fontscale_post_subtitles_key, \"-1\").equals(\"-1\")) {\r\n        return appearance_fontscale_global();\r", "choices": [{"text": "} else {\r\n        return Float.parseFloat(getString(R.string.pref_appearance_fontscale_post_subtitles_key, \"-1\"));\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/453", "ground_truth": "    }\r\n    return Float.parseFloat(getString(R.string.pref_appearance_fontscale_post_subtitles_key, \"-1\"));\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\PrefsUtility.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\npublic static float appearance_fontscale_post_header_titles() {\r\n    if (getString(R.string.pref_appearance_fontscale_post_header_titles_key, \"-1\").equals(\"-1\")) {\r\n        return appearance_fontscale_global();\r", "choices": [{"text": "} else {\r\n        return Float.parseFloat(getString(R.string.pref_appearance_fontscale_post_header_titles_key, \"-1\"));\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/454", "ground_truth": "    }\r\n    return Float.parseFloat(getString(R.string.pref_appearance_fontscale_post_header_titles_key, \"-1\"));\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\PrefsUtility.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\npublic static float appearance_fontscale_post_header_subtitles() {\r\n    if (getString(R.string.pref_appearance_fontscale_post_header_subtitles_key, \"-1\").equals(\"-1\")) {\r\n        return appearance_fontscale_global();\r", "choices": [{"text": "} else {\r\n        return Float.parseFloat(getString(R.string.pref_appearance_fontscale_post_header_subtitles_key, \"-1\"));\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/455", "ground_truth": "    }\r\n    return Float.parseFloat(getString(R.string.pref_appearance_fontscale_post_header_subtitles_key, \"-1\"));\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\PrefsUtility.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\npublic static Integer pref_behaviour_comment_min() {\r\n    final Integer defaultValue = -4;\r\n    final String value = getString(R.string.pref_behaviour_comment_min_key, defaultValue.toString());\r\n    if (value == null || value.trim().isEmpty()) {\r\n        return null;\r\n    }\r\n    try {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/465", "ground_truth": "        return Integer.parseInt(value);\r\n    } catch (final Throwable e) {\r\n        return defaultValue;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\PrefsUtility.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.time.TimeDuration\nimport org.quantumbadger.redreader.R\npublic static TimeDuration pref_cache_rerequest_postlist_age() {\r\n    try {\r\n        final int hours = Integer.parseInt(getString(R.string.pref_cache_rerequest_postlist_age_key, \"1\"));\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/467", "ground_truth": "        return TimeDuration.hours(hours);\r\n    } catch (final Throwable e) {\r\n        return TimeDuration.hours(1);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\PrefsUtility.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\npublic static NeverAlwaysOrWifiOnly cache_precache_images_old() {\r\n    if (network_tor()) {\r\n        return NeverAlwaysOrWifiOnly.NEVER;\r\n    }\r\n    if (!getBoolean(R.string.pref_cache_precache_images_key, true)) {\r\n        return NeverAlwaysOrWifiOnly.NEVER;\r\n    } else if (getBoolean(R.string.pref_cache_precache_images_wifionly_key, true)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/469", "ground_truth": "        return NeverAlwaysOrWifiOnly.WIFIONLY;\r\n    } else {\r\n        return NeverAlwaysOrWifiOnly.ALWAYS;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\PrefsUtility.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\npublic static NeverAlwaysOrWifiOnly cache_precache_comments_old() {\r\n    if (!getBoolean(R.string.pref_cache_precache_comments_key, true)) {\r\n        return NeverAlwaysOrWifiOnly.NEVER;\r\n    } else if (getBoolean(R.string.pref_cache_precache_comments_wifionly_key, false)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/470", "ground_truth": "        return NeverAlwaysOrWifiOnly.WIFIONLY;\r\n    } else {\r\n        return NeverAlwaysOrWifiOnly.ALWAYS;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\PrefsUtility.java"}}
{"prompt": "\n import java.util.Set\nimport java.util.List\nimport java.util.ArrayList\nimport org.quantumbadger.redreader.reddit.things.SubredditCanonicalId\nimport org.quantumbadger.redreader.io.WritableHashSet\npublic static List<SubredditCanonicalId> pref_subreddits_list(final int prefId) {\r\n    final String value = getString(prefId, \"\");\r\n    final ArrayList<String> list = WritableHashSet.escapedStringToList(value);\r\n    final ArrayList<SubredditCanonicalId> result = new ArrayList<>(list.size());\r\n    try {\r\n        for (final String str : list) {\r\n            result.add(new SubredditCanonicalId(str));\r\n        }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/483", "ground_truth": "    } catch (final InvalidSubredditNameException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\PrefsUtility.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport androidx.annotation.Nullable\n@Nullable\r\npublic static String pref_reddit_client_id_override() {\r\n    final String value = getString(R.string.pref_reddit_client_id_override_key, null);\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    final String valueTrimmed = value.trim();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/485", "ground_truth": "    if (valueTrimmed.isEmpty()) {\r\n        return null;\r\n    }\r\n    return valueTrimmed;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\PrefsUtility.java"}}
{"prompt": "\n import androidx.annotation.NonNull\npublic final boolean isHigherPriorityThan(@NonNull final Priority other) {\r\n    if (primary != other.primary) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/487", "ground_truth": "        return primary < other.primary;\r\n    } else {\r\n        return secondary < other.secondary;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\Priority.java"}}
{"prompt": "\n @Override\r\npublic final void run() {\r\n    if (!mAlreadyRun.getAndSet(true)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/488", "ground_truth": "        mRunnable.run();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\RunnableOnce.java"}}
{"prompt": "\n import java.util.Locale\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.StringRes\nimport androidx.annotation.NonNull\nimport android.content.Context\npublic static String getAccessibilityString(@NonNull final Context context, @StringRes final int res) {\r\n    // Only override for English for now\r\n    if (!Locale.getDefault().getLanguage().equals(LANGUAGE_CODE_EN)) {\r\n        return context.getString(res);\r\n    }\r\n    // Replace \"read\" with the English homophone \"red\" to work around bad speech synth handling\r\n    if (res == R.string.accessibility_post_already_read_withperiod) {\r", "choices": [{"text": "return context.getString(R.string.accessibility_post_already_read_withperiod_red);\r\n    }\r\n    if (res == R.string.accessibility_post_already_read_withoutperiod) {\r\nreturn context.getString(R.string.accessibility_post_already_read_withoutperiod_red);\r\n    }\r\n    if (res == R.string.accessibility_post_unread_withperiod) {\r\nreturn context.getString(R.string.accessibility_post_unread_withperiod_red);\r\n    }\r\n    if (res == R.string.accessibility_post_"}], "metadata": {"task_id": "RedReader/489", "ground_truth": "        return \"Red.\";\r\n    } else {\r\n        return context.getString(res);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\ScreenreaderPronunciation.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic static DataType fromConstant(final byte value) throws UnhandledTypeException {\r\n    if (value < 0 || value >= values().length) {\r\n        throw new UnhandledTypeException(\"Unknown type constant \" + (int) value);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/491", "ground_truth": "    }\r\n    return values()[value];\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\SerializeUtils.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport androidx.annotation.NonNull\npublic Editor putString(@NonNull final String key, @Nullable final String value) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/493", "ground_truth": "    mEditor.putString(key, value);\r\n    return this;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\SharedPrefsWrapper.java"}}
{"prompt": "\n import androidx.annotation.NonNull\npublic Editor putInt(@NonNull final String key, final int value) {\r", "choices": [{"text": ""}], "metadata": {"task_id": "RedReader/494", "ground_truth": "    mEditor.putInt(key, value);\r\n    return this;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\SharedPrefsWrapper.java"}}
{"prompt": "\n import androidx.annotation.NonNull\npublic Editor putLong(@NonNull final String key, final long value) {\r", "choices": [{"text": ""}], "metadata": {"task_id": "RedReader/495", "ground_truth": "    mEditor.putLong(key, value);\r\n    return this;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\SharedPrefsWrapper.java"}}
{"prompt": "\n import androidx.annotation.NonNull\npublic Editor putBoolean(@NonNull final String key, final boolean value) {\r", "choices": [{"text": ""}], "metadata": {"task_id": "RedReader/496", "ground_truth": "    mEditor.putBoolean(key, value);\r\n    return this;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\SharedPrefsWrapper.java"}}
{"prompt": "\n import java.util.Set\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\npublic Editor putStringSet(@NonNull final String key, @Nullable final Set<String> value) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/497", "ground_truth": "    mEditor.putStringSet(key, value);\r\n    return this;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\SharedPrefsWrapper.java"}}
{"prompt": "\n public void apply() {\r\n    // Take read lock as we aren't doing an atomic restore\r\n    try (Locker ignored = new Locker(mRestoreLock.readLock())) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/498", "ground_truth": "        mEditor.apply();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\SharedPrefsWrapper.java"}}
{"prompt": "\n import android.content.SharedPreferences\npublic void registerOnSharedPreferenceChangeListener(final OnSharedPreferenceChangeListener listener) {\r\n    final SharedPreferences.OnSharedPreferenceChangeListener spListener = (sharedPreferences, key) -> listener.onSharedPreferenceChanged(this, key);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/499", "ground_truth": "    mPrefs.registerOnSharedPreferenceChangeListener(spListener);\r\n    mListenerWrappers.put(listener, spListener);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\SharedPrefsWrapper.java"}}
{"prompt": "\n import android.content.SharedPreferences\npublic void unregisterOnSharedPreferenceChangeListener(final OnSharedPreferenceChangeListener listener) {\r\n    final SharedPreferences.OnSharedPreferenceChangeListener spListener = mListenerWrappers.remove(listener);\r\n    if (spListener != null) {\r", "choices": [{"text": "\n import android.content.SharedPreferences\npublic void unregisterOnSharedPreferenceChangeListener(final OnSharedPreferenceChangeListener listener) {\r\n    final SharedPreferences.OnSharedPreferenceChangeListener spListener = mListenerWrappers.remove(listener);\r\n    if (spListener!= null) {\r\n//        mSharedPreferences.unregisterOnSharedPreferenceChangeListener(spListener);\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/500", "ground_truth": "        mPrefs.unregisterOnSharedPreferenceChangeListener(spListener);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\SharedPrefsWrapper.java"}}
{"prompt": "\n import androidx.annotation.NonNull\npublic boolean contains(@NonNull final String key) {\r\n    try (Locker ignored = new Locker(mRestoreLock.readLock())) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/501", "ground_truth": "        return mPrefs.contains(key);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\SharedPrefsWrapper.java"}}
{"prompt": "\n import java.util.Map\nimport androidx.annotation.NonNull\n@NonNull\r\npublic Map<String, ?> getAllClone() {\r\n    try (Locker ignored = new Locker(mRestoreLock.readLock())) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/502", "ground_truth": "        return new HashMap<>(mPrefs.getAll());\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\SharedPrefsWrapper.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@Nullable\r\npublic String getString(@NonNull final String key, @Nullable final String defValue) {\r\n    try (Locker ignored = new Locker(mRestoreLock.readLock())) {\r", "choices": [{"text": "//        return mRestoreMap.get(key, defValue);\r\n        return mRestoreMap.get(key, defValue);\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/503", "ground_truth": "        return mPrefs.getString(key, defValue);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\SharedPrefsWrapper.java"}}
{"prompt": "\n import androidx.annotation.NonNull\npublic int getInt(@NonNull final String key, final int defValue) {\r\n    try (Locker ignored = new Locker(mRestoreLock.readLock())) {\r", "choices": [{"text": ""}], "metadata": {"task_id": "RedReader/504", "ground_truth": "        return mPrefs.getInt(key, defValue);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\SharedPrefsWrapper.java"}}
{"prompt": "\n import androidx.annotation.NonNull\npublic long getLong(@NonNull final String key, final long defValue) {\r\n    try (Locker ignored = new Locker(mRestoreLock.readLock())) {\r", "choices": [{"text": ""}], "metadata": {"task_id": "RedReader/505", "ground_truth": "        return mPrefs.getLong(key, defValue);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\SharedPrefsWrapper.java"}}
{"prompt": "\n import java.util.Set\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@Nullable\r\npublic Set<String> getStringSet(@NonNull final String key, @Nullable final Set<String> defValues) {\r\n    try (Locker ignored = new Locker(mRestoreLock.readLock())) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/506", "ground_truth": "        return mPrefs.getStringSet(key, defValues);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\SharedPrefsWrapper.java"}}
{"prompt": "\n import androidx.annotation.NonNull\npublic boolean getBoolean(@NonNull final String key, final boolean defValue) {\r\n    try (Locker ignored = new Locker(mRestoreLock.readLock())) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/507", "ground_truth": "        return mPrefs.getBoolean(key, defValue);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\SharedPrefsWrapper.java"}}
{"prompt": "\n private void moveToNext() {\r\n    while (mInner.hasNext()) {\r\n        mNext = mInner.next();\r\n        if (mPredicate.matches(mNext)) {\r\n            return;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/509", "ground_truth": "        }\r\n    }\r\n    mNext = null;\r\n    mHasNext = false;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\streams\\FilterStream.java"}}
{"prompt": "\n @Override\r\npublic E next() {\r\n    final E result = mNext;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/510", "ground_truth": "    moveToNext();\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\streams\\FilterStream.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.Consumer\nimport androidx.annotation.NonNull\ndefault void forEach(@NonNull final Consumer<E> consumer) {\r\n    while (hasNext()) {\r", "choices": [{"text": "consumer.accept(next());\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/511", "ground_truth": "        consumer.consume(next());\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\streams\\Stream.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic static Optional<String> removePrefix(@NonNull final String input, @NonNull final String prefix) {\r\n    if (input.startsWith(prefix)) {\r", "choices": [{"text": "return Optional.of(input.substring(prefix.length()));\r\n    }\r\n    return Optional.empty();\r\n}\r\n"}], "metadata": {"task_id": "RedReader/512", "ground_truth": "        return Optional.of(input.substring(prefix.length()));\r\n    } else {\r\n        return Optional.empty();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\StringUtils.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic static String asciiUppercase(@NonNull final String input) {\r\n    final char[] chars = input.toCharArray();\r\n    for (int i = 0; i < chars.length; i++) {\r\n        if (chars[i] >= 'a' && chars[i] <= 'z') {\r\n            chars[i] -= 'a';\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/513", "ground_truth": "            chars[i] += 'A';\r\n        }\r\n    }\r\n    return new String(chars);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\StringUtils.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic static String asciiLowercase(@NonNull final String input) {\r\n    final char[] chars = input.toCharArray();\r\n    for (int i = 0; i < chars.length; i++) {\r\n        if (chars[i] >= 'A' && chars[i] <= 'Z') {\r\n            chars[i] -= 'A';\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/514", "ground_truth": "            chars[i] += 'a';\r\n        }\r\n    }\r\n    return new String(chars);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\StringUtils.java"}}
{"prompt": "\n import java.util.Collection\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static String join(@NonNull final Collection<?> elements, @NonNull final CharSequence separator) {\r\n    final StringBuilder result = new StringBuilder();\r\n    boolean first = true;\r\n    for (final Object element : elements) {\r\n        if (!first) {\r\n            result.append(separator);\r\n        }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/515", "ground_truth": "        result.append(element.toString());\r\n        first = false;\r\n    }\r\n    return result.toString();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\StringUtils.java"}}
{"prompt": "\n public E get() {\r\n    if (mThread != Thread.currentThread()) {\r\n        throw new RuntimeException(\"Accessing variable from wrong thread\");\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/516", "ground_truth": "    }\r\n    return mValue;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\ThreadCheckedVar.java"}}
{"prompt": "\n public void set(final E value) {\r\n    if (mThread != Thread.currentThread()) {\r\n        throw new RuntimeException(\"Setting variable from wrong thread\");\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/517", "ground_truth": "    }\r\n    mValue = value;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\ThreadCheckedVar.java"}}
{"prompt": "\n public synchronized void trigger() {\r\n    if (thread == null) {\r\n        thread = new InternalTriggerableThread();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/520", "ground_truth": "        thread.start();\r\n    } else if (allowRetrigger) {\r\n        shouldRetrigger = true;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\TriggerableThread.java"}}
{"prompt": "\n private synchronized boolean shouldThreadContinue() {\r\n    if (shouldRetrigger) {\r\n        shouldRetrigger = false;\r\n        return true;\r\n    } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/521", "ground_truth": "        thread = null;\r\n        allowRetrigger = false;\r\n        return false;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\TriggerableThread.java"}}
{"prompt": "\n @Override\r\npublic void run() {\r\n    do {\r\n        try {\r\n            Thread.sleep(initialDelay);\r\n        } catch (final InterruptedException e) {\r\n            throw new RuntimeException(e);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/522", "ground_truth": "        }\r\n        onSleepEnd();\r\n        task.run();\r\n    } while (shouldThreadContinue());\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\TriggerableThread.java"}}
{"prompt": "\n public void triggerOne() {\r", "choices": [{"text": "// \tSystem.out.println(\"triggerOne\");\r\n }\r\n\r\n public void triggerTwo() {\r\n// \tSystem.out.println(\"triggerTwo\");\r\n }\r\n\r\n public void triggerThree() {\r\n// \tSystem.out.println(\"triggerThree\");\r\n }\r\n\r\n public void triggerFour() {\r\n// \tSystem.out.println(\"triggerFour\");\r\n }\r\n\r\n public void triggerFive() {\r\n// \tSystem.out.println(\"triggerFive\");\r\n }\r\n\r\n public void triggerSix() {\r\n// \tSystem.out.println(\"triggerSix\");"}], "metadata": {"task_id": "RedReader/523", "ground_truth": "    mThreads[mNextThreadToTrigger].trigger();\r\n    mNextThreadToTrigger = (mNextThreadToTrigger + 1) % mThreads.length;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\TriggerableThreadGroup.java"}}
{"prompt": "\n import androidx.annotation.UiThread\n@UiThread\r\npublic void startTimer() {\r\n    General.checkThisIsUIThread();\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/524", "ground_truth": "    mShouldTimerRun = true;\r\n    mHandler.postDelayed(this, mIntervalMs);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\UIThreadRepeatingTimer.java"}}
{"prompt": " import androidx.annotation.UiThread\nprivate boolean mShouldTimerRun = false;\nprivate final long mIntervalMs;\nprivate final Handler mHandler = new Handler(Looper.getMainLooper());\n@UiThread\r\npublic void stopTimer() {\r", "choices": [{"text": "mShouldTimerRun = false;\r\n}\n"}], "metadata": {"task_id": "RedReader/525", "ground_truth": "    General.checkThisIsUIThread();\r\n    mShouldTimerRun = false;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\UIThreadRepeatingTimer.java"}}
{"prompt": "\n @Override\r\npublic void run() {\r\n    if (mShouldTimerRun) {\r\n        mListener.onUIThreadRepeatingTimer(this);\r", "choices": [{"text": "}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/526", "ground_truth": "        if (mShouldTimerRun) {\r\n            mHandler.postDelayed(this, mIntervalMs);\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\UIThreadRepeatingTimer.java"}}
{"prompt": "\n public synchronized void enqueue(final E object) {\r\n    if (set.add(object)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/527", "ground_truth": "        queue.addLast(object);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\UniqueSynchronizedQueue.java"}}
{"prompt": "\n public synchronized E dequeue() {\r\n    if (queue.isEmpty()) {\r\n        return null;\r", "choices": [{"text": "}\r\nE element = queue.remove(0);\r\nreturn element;\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/528", "ground_truth": "    }\r\n    final E result = queue.removeFirst();\r\n    set.remove(result);\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\UniqueSynchronizedQueue.java"}}
{"prompt": "\n import java.util.Iterator\nimport java.lang.ref.WeakReference\npublic synchronized void updateAllListeners() {\r\n    final Iterator<WeakReference<E>> iter = listeners.iterator();\r\n    while (iter.hasNext()) {\r\n        final E listener = iter.next().get();\r\n        if (listener == null) {\r\n            iter.remove();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/529", "ground_truth": "        } else {\r\n            notifyListener(listener);\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\common\\UpdateNotifier.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport android.net.Uri\nimport android.content.Intent\n@Override\r\npublic void onActivityResult(final int requestCode, final int resultCode, final Intent data) {\r\n    if (requestCode == 123 && requestCode == resultCode && data.hasExtra(\"url\")) {\r\n        final Uri uri = Uri.parse(data.getStringExtra(\"url\"));\r", "choices": [{"text": "}\r\n}\n"}], "metadata": {"task_id": "RedReader/530", "ground_truth": "        RedditOAuth.completeLogin(mActivity, uri, RunnableOnce.DO_NOTHING);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\AccountListDialog.java"}}
{"prompt": "\n @Override\r\npublic boolean onTap() {\r\n    if (toolbarOverlay.isShown()) {\r", "choices": [{"text": "toolbarOverlay.hide();\r\n} else {\r\ntoolbarOverlay.show();\r\n}\r\nreturn true;\r\n}\r\n});\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "RedReader/533", "ground_truth": "        toolbarOverlay.hide();\r\n        return true;\r\n    }\r\n    return false;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\CommentListingFragment.java"}}
{"prompt": "\n import org.quantumbadger.redreader.image.ImageInfo\npublic static ImageInfoDialog newInstance(final ImageInfo info) {\r\n    final ImageInfoDialog pp = new ImageInfoDialog();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/540", "ground_truth": "    final Bundle args = new Bundle();\r\n    args.putParcelable(\"info\", info);\r\n    pp.setArguments(args);\r\n    return pp;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\ImageInfoDialog.java"}}
{"prompt": "\n import java.util.HashSet\nimport org.quantumbadger.redreader.common.time.TimestampUTC\nimport org.quantumbadger.redreader.R\n@Override\r\npublic void onRequestSuccess(final HashSet<String> result, final TimestampUTC timeCached) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/541", "ground_truth": "    multiredditSubscriptionManager.addListener(MainMenuFragment.this);\r\n    onMultiredditSubscriptionsChanged(result);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\MainMenuFragment.java"}}
{"prompt": "\n import java.util.HashSet\nimport org.quantumbadger.redreader.reddit.things.SubredditCanonicalId\nimport org.quantumbadger.redreader.common.time.TimestampUTC\nimport org.quantumbadger.redreader.R\n@Override\r\npublic void onRequestSuccess(final HashSet<SubredditCanonicalId> result, final TimestampUTC timeCached) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/542", "ground_truth": "    subredditSubscriptionManager.addListener(MainMenuFragment.this);\r\n    onSubredditSubscriptionsChanged(result);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\MainMenuFragment.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.RRError\nimport org.quantumbadger.redreader.R\n@Override\r\npublic void onRequestFailed(final RRError failureReason) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\n}\r\n});\r\n"}], "metadata": {"task_id": "RedReader/545", "ground_truth": "    // Ignore\r\n    AndroidCommon.UI_THREAD_HANDLER.post(() -> CacheManager.getInstance(context).makeRequest(mRequest));\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\PostListingFragment.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport android.view.View\nimport android.os.Bundle\n@Override\r\npublic Bundle onSaveInstanceState() {\r\n    final Bundle bundle = new Bundle();\r\n    final LinearLayoutManager layoutManager = (LinearLayoutManager) mRecyclerView.getLayoutManager();\r", "choices": [{"text": "}\r\n@Override\r\npublic void onRestoreInstanceState(Bundle savedInstanceState) {\r\n    super.onRestoreInstanceState(savedInstanceState);\r\n    final LinearLayoutManager layoutManager = (LinearLayoutManager) mRecyclerView.getLayoutManager();\r\n    layoutManager.scrollToPosition(savedInstanceState.getInt(KEY_POSITION));\r\n}\r\n@Override\r\npublic void onSaveInstanceState(Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r\n    final LinearLayoutManager layoutManager = (LinearLayoutManager) mRecyclerView.getLayoutManager();\r\n    outState.putInt(KEY_POSITION, layoutManager.findFirstVisibleItemPosition());\r\n}\r\n"}], "metadata": {"task_id": "RedReader/546", "ground_truth": "    bundle.putInt(SAVEDSTATE_FIRST_VISIBLE_POS, layoutManager.findFirstVisibleItemPosition());\r\n    return bundle;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\PostListingFragment.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\npublic void cancel() {\r\n    if (mRequest != null) {\r", "choices": [{"text": "\n import org.quantumbadger.redreader.R\npublic void cancel() {\r\n    if (mRequest!= null) {\r\n//        mRequest.cancel();\r\n        mRequest = null;\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/547", "ground_truth": "        mRequest.cancel();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\PostListingFragment.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\npublic synchronized void restackRefreshCount() {\r\n    while (mPostRefreshCount.get() <= 0) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/548", "ground_truth": "        mPostRefreshCount.addAndGet(mPostCountLimit);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\PostListingFragment.java"}}
{"prompt": "\n import org.quantumbadger.redreader.views.RedditPostView\nimport org.quantumbadger.redreader.reddit.prepared.RedditPreparedPost\nimport org.quantumbadger.redreader.reddit.kthings.RedditPost\nimport org.quantumbadger.redreader.R\nimport android.view.View\nimport android.app.Activity\n@Override\r\npublic void onPostSelected(final RedditPreparedPost post) {\r\n    ((RedditPostView.PostSelectionListener) getActivity()).onPostSelected(post);\r\n    new Thread() {\r\n\r\n        @Override\r", "choices": [{"text": "\n        public void run() {\r\n            RedditPost post = post.getRedditPost();\r\n            RedditPreparedPost preparedPost = new RedditPreparedPost(post);\r\n            RedditPreparedPost.setPost(preparedPost);\r\n            RedditPreparedPost.setActivity((Activity) getActivity());\r\n            RedditPreparedPost.setPostSelectionListener((RedditPostView.PostSelectionListener) getActivity());\r\n            RedditPreparedPost.setPostView((RedditPostView) getActivity().findViewById(R.id.post_view));\r\n            RedditPreparedPost.setPostView(preparedPost);\r\n            RedditPreparedPost."}], "metadata": {"task_id": "RedReader/549", "ground_truth": "        public void run() {\r\n            post.markAsRead(getActivity());\r\n        }\r\n    }.start();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\PostListingFragment.java"}}
{"prompt": "\n import org.quantumbadger.redreader.views.RedditPostView\nimport org.quantumbadger.redreader.reddit.prepared.RedditPreparedPost\nimport org.quantumbadger.redreader.reddit.kthings.RedditPost\nimport org.quantumbadger.redreader.R\nimport android.view.View\nimport android.app.Activity\n@Override\r\npublic void onPostCommentsSelected(final RedditPreparedPost post) {\r\n    ((RedditPostView.PostSelectionListener) getActivity()).onPostCommentsSelected(post);\r\n    new Thread() {\r\n\r\n        @Override\r", "choices": [{"text": "\n        public void run() {\r\n            RedditPost post = post.getRedditPost();\r\n            if (post.isCommentable()) {\r\n                RedditPreparedPost preparedPost = new RedditPreparedPost(post);\r\n                preparedPost.setComments(RedditApi.getComments(post.getPermalink()));\r\n                ((RedditPostView.PostSelectionListener) getActivity()).onPostCommentsSelected(preparedPost);\r\n            } else {\r\n                ((RedditPostView.PostSelectionListener) getActivity()).onPostCommentsSelected(post);\r\n            }\r\n        }\r\n    }.start();\r\n}\r\n"}], "metadata": {"task_id": "RedReader/550", "ground_truth": "        public void run() {\r\n            post.markAsRead(getActivity());\r\n        }\r\n    }.start();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\PostListingFragment.java"}}
{"prompt": "\n import org.quantumbadger.redreader.image.ImageInfo\n@Override\r\npublic void onSuccess(final ImageInfo info) {\r\n    if (!precacheImages) {\r\n        return;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/554", "ground_truth": "    }\r\n    precacheImage(activity, info, positionInList, gifViewMode, imageViewMode, videoViewMode);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\PostListingFragment.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.RRError\nimport org.quantumbadger.redreader.common.AndroidCommon\nimport org.quantumbadger.redreader.adapters.PostListingManager\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\n@Override\r\npublic void onFailure(@NonNull final RRError error) {\r\n    AndroidCommon.UI_THREAD_HANDLER.post(() -> {\r\n        mPostListingManager.setLoadingVisible(false);\r", "choices": [{"text": "//        mPostListingManager.setLoadingVisible(false);\r\n        mPostListingManager.setLoadingVisible(false);\r\n        mPostListingManager.setLoadingVisible(false);\r\n        mPostListingManager.setLoadingVisible(false);\r\n        mPostListingManager.setLoadingVisible(false);\r\n        mPostListingManager.setLoadingVisible(false);\r\n        mPostListingManager.setLoadingVisible(false);\r\n        mPostListingManager.setLoadingVisible(false);\r\n        mPostListingManager.setLoadingVisible(false);\r\n        mPostListingManager.setLoadingVisible(false);\r\n        mPostListingManager."}], "metadata": {"task_id": "RedReader/555", "ground_truth": "        mPostListingManager.addFooterError(new ErrorView(activity, error));\r\n    });\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\PostListingFragment.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.RRError\nimport org.quantumbadger.redreader.common.General\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\nimport android.util.Log\n@Override\r\npublic void onFailure(@NonNull final RRError error) {\r\n    if (General.isSensitiveDebugLoggingEnabled()) {\r", "choices": [{"text": "Log.d(General.TAG, \"onFailure: \" + error.getMessage());\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/556", "ground_truth": "        Log.e(TAG, \"Failed to precache \" + url + \" (\" + error + \")\");\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\PostListingFragment.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.RRError\nimport org.quantumbadger.redreader.common.General\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\nimport android.util.Log\n@Override\r\npublic void onFailure(@NonNull final RRError error) {\r\n    if (General.isSensitiveDebugLoggingEnabled()) {\r", "choices": [{"text": "Log.d(General.TAG, \"onFailure: \" + error.getMessage());\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/557", "ground_truth": "        Log.e(TAG, String.format(Locale.US, \"Failed to precache %s (%s)\", url, error));\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\PostListingFragment.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.kthings.RedditPost\nimport org.quantumbadger.redreader.R\npublic static PostPropertiesDialog newInstance(final RedditPost post) {\r\n    final PostPropertiesDialog pp = new PostPropertiesDialog();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/558", "ground_truth": "    final Bundle args = new Bundle();\r\n    args.putParcelable(\"post\", post);\r\n    pp.setArguments(args);\r\n    return pp;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\PostPropertiesDialog.java"}}
{"prompt": "\n import java.util.Collection\nimport org.quantumbadger.redreader.reddit.RedditFlairChoice\nimport org.quantumbadger.redreader.common.AndroidCommon\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\nimport android.view.View\n@Override\r\npublic void onSuccess(@NonNull final Collection<RedditFlairChoice> choices) {\r\n    AndroidCommon.runOnUiThread(() -> {\r\n        if (!mActive) {\r\n            return;\r\n        }\r\n        mLoadingSpinnerView.setVisibility(View.GONE);\r\n        mMainControls.setVisibility(View.VISIBLE);\r\n        if (choices.isEmpty()) {\r\n            disableFlairSpinner(R.string.post_submit_flair_none_available);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/563", "ground_truth": "        } else {\r\n            enableFlairSpinner(choices);\r\n        }\r\n    });\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\postsubmit\\PostSubmitContentFragment.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.AndroidCommon\n@Override\r\npublic void onSubredditDoesNotExist() {\r\n    AndroidCommon.runOnUiThread(() -> {\r\n        if (!mActive) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/564", "ground_truth": "            return;\r\n        }\r\n        ifActivityNotNull(Listener::onContentFragmentSubredditDoesNotExist);\r\n    });\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\postsubmit\\PostSubmitContentFragment.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.AndroidCommon\n@Override\r\npublic void onSubredditPermissionDenied() {\r\n    AndroidCommon.runOnUiThread(() -> {\r\n        if (!mActive) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/565", "ground_truth": "            return;\r\n        }\r\n        ifActivityNotNull(Listener::onContentFragmentSubredditPermissionDenied);\r\n    });\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\postsubmit\\PostSubmitContentFragment.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\nimport android.view.MenuItem\nimport android.view.MenuInflater\nimport android.view.Menu\n@Override\r\npublic void onCreateOptionsMenu(@NonNull final Menu menu, @NonNull final MenuInflater inflater) {\r\n    final MenuItem send = menu.add(R.string.comment_reply_send);\r\n    send.setIcon(R.drawable.ic_action_send_dark);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "RedReader/567", "ground_truth": "    send.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);\r\n    menu.add(R.string.comment_reply_preview);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\postsubmit\\PostSubmitContentFragment.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nprivate void resetDraft() {\r\n    mDraftReset = true;\r\n    lastType = null;\r\n    lastTitle = null;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/571", "ground_truth": "    lastText = null;\r\n    lastInbox = true;\r\n    lastNsfw = false;\r\n    lastSpoiler = false;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\postsubmit\\PostSubmitContentFragment.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.Consumer\nimport androidx.fragment.app.FragmentActivity\nimport androidx.fragment.app.Fragment\nimport androidx.annotation.NonNull\nprivate void ifActivityNotNull(@NonNull final Consumer<Listener> action) {\r\n    final FragmentActivity activity = getActivity();\r\n    if (activity != null) {\r", "choices": [{"text": "\n import org.quantumbadger.redreader.common.Consumer\nimport androidx.fragment.app.FragmentActivity\nimport androidx.fragment.app.Fragment\nimport androidx.annotation.NonNull\nprivate void ifActivityNotNull(@NonNull final Consumer<Listener> action) {\r\n    final FragmentActivity activity = getActivity();\r\n    if (activity!= null) {\r\naction.accept(activity);\r\n    }\r\n}\r\nprivate void ifFragmentNotNull(@NonNull final Consumer<Listener> action) {\r\n    final Fragment fragment = getFragment();\r\n    if (fragment!= null) {\r\naction.accept(fragment);\r\n    }\r\n}\r\nprivate void ifActivityNotNull(@NonNull final Consumer<Listener> action) {\r\n    final FragmentActivity activity = getActivity();\r\n    if (activity!= null) {\r\naction.accept(activity);\r\n    }\r\n}\r\nprivate void ifFragmentNotNull(@NonNull final Consumer<Listener> action) {\r\n    final Fragment fragment = getFragment"}], "metadata": {"task_id": "RedReader/572", "ground_truth": "        action.consume((Listener) activity);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\postsubmit\\PostSubmitContentFragment.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.os.Bundle\n@NonNull\r\npublic Bundle toBundle() {\r\n    final Bundle result = new Bundle(1);\r", "choices": [{"text": "result.putParcelable(\"com.google.android.gms.maps.model.LatLng\", this);\r\nreturn result;\r\n}\r\n@NonNull\r\npublic static LatLng fromBundle(@NonNull final Bundle bundle) {\r\nreturn (LatLng) bundle.getParcelable(\"com.google.android.gms.maps.model.LatLng\");\r\n}\r\n}\r\n<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.content.Intent\nimport androidx.appcompat.app.AppCompatActivity\nimport"}], "metadata": {"task_id": "RedReader/573", "ground_truth": "    if (subreddit != null) {\r\n        result.putParcelable(KEY_SUBREDDIT, subreddit);\r\n    }\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\postsubmit\\PostSubmitSubredditSelectionFragment.java"}}
{"prompt": "\n import org.quantumbadger.redreader.viewholders.VH1Text\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.content.Context\n@NonNull\r\n@Override\r\npublic VH1Text onCreateViewHolder(@NonNull final ViewGroup viewGroup, final int i) {\r\n    final View view = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.list_item_1_text, viewGroup, false);\r\n    final VH1Text result = new VH1Text(view);\r", "choices": [{"text": "}\r\n@NonNull\r\n@Override\r\npublic void onBindViewHolder(@NonNull final VH1Text vh1Text, final int i) {\r\n    final Article article = this.mArticles.get(i);\r\n    vh1Text.mTitle.setText(article.getTitle());\r\n    vh1Text.mAuthor.setText(article.getAuthor());\r\n    vh1Text.mDate.setText(article.getDate());\r\n    vh1Text.mContent.setText(article.getContent());\r\n}\r\n@Override\r\npublic int getItemCount() {\r\n    return this."}], "metadata": {"task_id": "RedReader/574", "ground_truth": "    view.setOnClickListener(v -> mSubredditBox.setText(result.text.getText()));\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\postsubmit\\PostSubmitSubredditSelectionFragment.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport android.view.View\n@Nullable\r\npublic View getOverlayView() {\r", "choices": [{"text": "return null;\r\n}\r\npublic void setOverlayView(@Nullable View overlayView) {\r\n}\r\npublic void setOverlayView(@Nullable View overlayView, boolean animate) {\r\n}\r\npublic void setOverlayView(@Nullable View overlayView, boolean animate, boolean animateScale) {\r\n}\r\npublic void setOverlayView(@Nullable View overlayView, boolean animate, boolean animateScale, boolean animateAlpha) {\r\n}\r\npublic void setOverlayView(@Nullable View overlayView, boolean animate, boolean animateScale, boolean animateAlpha, boolean animateTranslate) {\r\n}"}], "metadata": {"task_id": "RedReader/576", "ground_truth": "    // Null by default\r\n    return null;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\RRFragment.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General\nimport androidx.annotation.NonNull\nimport android.widget.FrameLayout\nimport android.view.View\n@NonNull\r\npublic final View createCombinedListingAndOverlayView() {\r\n    final FrameLayout outer = new FrameLayout(mParent);\r\n    {\r\n        final View view = getListingView();\r\n        outer.addView(view);\r\n        General.setLayoutMatchParent(view);\r\n    }\r\n    {\r\n        final View overlayView = getOverlayView();\r\n        if (overlayView != null) {\r\n            outer.addView(overlayView);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/577", "ground_truth": "            General.setLayoutMatchParent(overlayView);\r\n        }\r\n    }\r\n    return outer;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\RRFragment.java"}}
{"prompt": "\n import java.util.UUID\nimport org.quantumbadger.redreader.activities.SessionChangeListener\nimport android.os.Bundle\nimport android.net.Uri\nimport android.app.Dialog\npublic static SessionListDialog newInstance(final Uri url, final UUID current, final SessionChangeListener.SessionChangeType type) {\r\n    final SessionListDialog dialog = new SessionListDialog();\r\n    final Bundle args = new Bundle(3);\r\n    args.putString(\"url\", url.toString());\r\n    if (current != null) {\r\n        args.putString(\"current\", current.toString());\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/579", "ground_truth": "    }\r\n    args.putString(\"type\", type.name());\r\n    dialog.setArguments(args);\r\n    return dialog;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\SessionListDialog.java"}}
{"prompt": "\n import android.os.Bundle\nimport android.content.Context\n@Override\r\npublic void onCreate(final Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    context = getContext();\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/582", "ground_truth": "    packageManager = getActivity().getPackageManager();\r\n    shareIntent = getArguments().getParcelable(\"intent\");\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\ShareOrderDialog.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.things.RedditUser\nimport org.quantumbadger.redreader.R\npublic static UserPropertiesDialog newInstance(final RedditUser user) {\r\n    final UserPropertiesDialog pp = new UserPropertiesDialog();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/585", "ground_truth": "    final Bundle args = new Bundle();\r\n    args.putParcelable(\"user\", user);\r\n    pp.setArguments(args);\r\n    return pp;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\UserPropertiesDialog.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.kthings.RedditPost\nimport org.quantumbadger.redreader.R\nimport androidx.fragment.app.Fragment\nimport android.webkit.WebView\nimport android.view.View\nimport android.os.Bundle\npublic static WebViewFragment newInstance(final String url, final RedditPost post) {\r\n    final WebViewFragment f = new WebViewFragment();\r\n    final Bundle bundle = new Bundle(1);\r\n    bundle.putString(\"url\", url);\r\n    if (post != null) {\r", "choices": [{"text": "\n import org.quantumbadger.redreader.reddit.kthings.RedditPost\nimport org.quantumbadger.redreader.R\nimport androidx.fragment.app.Fragment\nimport android.webkit.WebView\nimport android.view.View\nimport android.os.Bundle\npublic static WebViewFragment newInstance(final String url, final RedditPost post) {\r\n    final WebViewFragment f = new WebViewFragment();\r\n    final Bundle bundle = new Bundle(1);\r\n    bundle.putString(\"url\", url);\r\n    if (post!= null) {\r\nbundle.putSerializable(\"post\", post);\r\n    }\r\n    f.setArguments(bundle);\r\n    return f;\r\n}\n\n"}], "metadata": {"task_id": "RedReader/586", "ground_truth": "        bundle.putParcelable(\"post\", post);\r\n    }\r\n    f.setArguments(bundle);\r\n    return f;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\WebViewFragment.java"}}
{"prompt": "\n import androidx.fragment.app.Fragment\nimport android.webkit.WebView\nimport android.view.View\npublic static WebViewFragment newInstanceHtml(final String html) {\r\n    final WebViewFragment f = new WebViewFragment();\r", "choices": [{"text": "final Bundle args = new Bundle();\r\nargs.putString(\"html\", html);\r\nf.setArguments(args);\r\nreturn f;\r\n}\r\n@Override\r\npublic View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\nfinal View v = inflater.inflate(R.layout.fragment_webview, container, false);\r\nfinal WebView wv = (WebView) v.findViewById(R.id.webview);\r\nwv.getSettings().setJavaScriptEnabled(true);\r\nwv.loadData(getArguments().getString(\"html\"), \"text/"}], "metadata": {"task_id": "RedReader/587", "ground_truth": "    final Bundle bundle = new Bundle(1);\r\n    bundle.putString(\"html\", html);\r\n    f.setArguments(bundle);\r\n    return f;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\WebViewFragment.java"}}
{"prompt": "\n import android.os.Bundle\n@Override\r\npublic void onCreate(final Bundle savedInstanceState) {\r\n    // TODO load position/etc?\r\n    super.onCreate(savedInstanceState);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/588", "ground_truth": "    mUrl = getArguments().getString(\"url\");\r\n    html = getArguments().getString(\"html\");\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\WebViewFragment.java"}}
{"prompt": "\n import java.net.URISyntaxException\nimport org.quantumbadger.redreader.R\nimport android.net.Uri\nimport android.content.Intent\n/**\r\n * Assumes the {@code url} starts with `intent://`\r\n */\r\nprivate boolean onEncounteredIntentUrl(final String url) {\r\n    final Intent nativeAppIntent;\r\n    try {\r\n        nativeAppIntent = Intent.parseUri(url, Intent.URI_INTENT_SCHEME);\r\n    } catch (final URISyntaxException e) {\r\n        return false;\r\n    }\r\n    if (nativeAppIntent == null) {\r\n        return false;\r\n    }\r\n    final String fallbackUrl = nativeAppIntent.getStringExtra(\"browser_fallback_url\");\r\n    if (fallbackUrl == null) {\r\n        return false;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/590", "ground_truth": "    }\r\n    webView.loadUrl(fallbackUrl);\r\n    currentUrl = fallbackUrl;\r\n    return true;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\WebViewFragment.java"}}
{"prompt": "\n import android.net.Uri\nimport android.content.Intent\n/**\r\n * Assumes the {@code url} starts with something other than `intent://`, `http://` or\r\n * `https://`\r\n */\r\nprivate boolean onEncounteredCustomSchemeUrl(final String url) {\r\n    final Intent nativeAppIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));\r\n    try {\r\n        startActivity(nativeAppIntent);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/591", "ground_truth": "        return true;\r\n    } catch (final ActivityNotFoundException e) {\r\n        return false;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\WebViewFragment.java"}}
{"prompt": "\n import androidx.appcompat.app.AppCompatActivity\nimport android.webkit.WebView\nimport android.view.View\nimport android.graphics.Bitmap\n@Override\r\npublic void onPageStarted(final WebView view, final String url, final Bitmap favicon) {\r\n    super.onPageStarted(view, url, favicon);\r\n    if (mUrl != null && url != null) {\r\n        final AppCompatActivity activity = mActivity;\r", "choices": [{"text": "\n import androidx.appcompat.app.AppCompatActivity\nimport android.webkit.WebView\nimport android.view.View\nimport android.graphics.Bitmap\n@Override\r\npublic void onPageStarted(final WebView view, final String url, final Bitmap favicon) {\r\n    super.onPageStarted(view, url, favicon);\r\n    if (mUrl!= null && url!= null) {\r\n        final AppCompatActivity activity = mActivity;\r\nif (activity!= null) {\r\n            activity.runOnUiThread(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    mUrl = url;\r\n                    mWebView.loadUrl(url);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/592", "ground_truth": "        if (activity != null) {\r\n            activity.setTitle(url);\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\WebViewFragment.java"}}
{"prompt": "\n @Override\r\npublic boolean onTap() {\r\n    if (toolbarOverlay.isShown()) {\r", "choices": [{"text": "toolbarOverlay.hide();\r\n} else {\r\ntoolbarOverlay.show();\r\n}\r\nreturn true;\r\n}\r\n});\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "RedReader/594", "ground_truth": "        toolbarOverlay.hide();\r\n        return true;\r\n    }\r\n    return false;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\WebViewFragment.java"}}
{"prompt": "\n import android.view.View\npublic boolean onBackButtonPressed() {\r\n    if (webView.canGoBack()) {\r\n        goingBack = true;\r\n        lastBackDepthAttempt = -1;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/596", "ground_truth": "        webView.goBack();\r\n        return true;\r\n    }\r\n    return false;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\WebViewFragment.java"}}
{"prompt": "\n @Override\r\npublic void onPause() {\r\n    super.onPause();\r", "choices": [{"text": "}\r\n\r\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n}\r\n\r\n@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "RedReader/597", "ground_truth": "    webView.onPause();\r\n    webView.pauseTimers();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\WebViewFragment.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/598", "ground_truth": "    webView.resumeTimers();\r\n    webView.onResume();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\fragments\\WebViewFragment.java"}}
{"prompt": "\n import org.quantumbadger.redreader.http.body.multipart.Part\nimport androidx.annotation.NonNull\n@NonNull\r\npublic HTTPRequestBodyMultipart addPart(@NonNull final Part part) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/599", "ground_truth": "    mParts.add(part);\r\n    return this;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\http\\body\\HTTPRequestBodyMultipart.java"}}
{"prompt": "\n import org.quantumbadger.redreader.http.body.multipart.Part\nimport org.quantumbadger.redreader.common.Consumer\nimport androidx.annotation.NonNull\npublic void forEachPart(@NonNull final Consumer<Part> consumer) {\r\n    for (final Part part : mParts) {\r", "choices": [{"text": "consumer.accept(part);\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/600", "ground_truth": "        consumer.consume(part);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\http\\body\\HTTPRequestBodyMultipart.java"}}
{"prompt": "\n import org.quantumbadger.redreader.http.PostField\nimport androidx.annotation.NonNull\n@NonNull\r\npublic HTTPRequestBodyPostFields addField(@NonNull final PostField field) {\r", "choices": [{"text": "this.fields.add(field);\r\nreturn this;\r\n}\r\n}\r\n<file_sep>/app/src/main/java/org/quantumbadger/redreader/http/HTTPRequestBodyPostFields.java\npackage org.quantumbadger.redreader.http;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.quantumbadger.redreader.http.PostField;\nimport androidx.annotation.NonNull;\n@NonNull\npublic class HTTPRequestBodyPostFields {\nprivate final List<PostField> fields = new"}], "metadata": {"task_id": "RedReader/601", "ground_truth": "    mPostFields.add(field);\r\n    return this;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\http\\body\\HTTPRequestBodyPostFields.java"}}
{"prompt": "\n import java.io.InputStream\nimport java.io.IOException\nimport org.quantumbadger.redreader.common.datastream.SeekableInputStream\nimport org.quantumbadger.redreader.common.Optional\nimport org.quantumbadger.redreader.common.GenericFactory\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static Optional<FailedRequestBody> from(@NonNull final GenericFactory<SeekableInputStream, IOException> is) {\r\n    try {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/603", "ground_truth": "        return from(is.create());\r\n    } catch (final IOException e) {\r\n        return Optional.empty();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\http\\FailedRequestBody.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.Optional\nimport org.quantumbadger.redreader.common.General\nimport androidx.annotation.NonNull\n@NonNull\r\n@Override\r\npublic synchronized String toString() {\r\n    if (!mString.isPresent()) {\r\n        if (mBytes.isPresent()) {\r\n            mString = Optional.of(new String(mBytes.get(), General.CHARSET_UTF8));\r\n        } else if (mJson.isPresent()) {\r\n            mString = Optional.of(mJson.toString());\r\n        } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/604", "ground_truth": "            throw new RuntimeException(\"No data present\");\r\n        }\r\n    }\r\n    return mString.get();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\http\\FailedRequestBody.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.Optional\nimport org.quantumbadger.redreader.common.General\nimport androidx.annotation.NonNull\n@NonNull\r\npublic synchronized byte[] toBytes() {\r\n    if (!mBytes.isPresent()) {\r\n        mBytes = Optional.of(toString().getBytes(General.CHARSET_UTF8));\r", "choices": [{"text": "}\r\nreturn mBytes.get();\r\n}\r\n"}], "metadata": {"task_id": "RedReader/605", "ground_truth": "    }\r\n    return mBytes.get();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\http\\FailedRequestBody.java"}}
{"prompt": "\n import java.io.InputStream\nimport java.io.IOException\nimport java.io.ByteArrayInputStream\nimport org.quantumbadger.redreader.jsonwrap.JsonValue\nimport org.quantumbadger.redreader.common.Optional\nimport androidx.annotation.NonNull\n@NonNull\r\npublic synchronized Optional<JsonValue> toJson() {\r\n    if (!mJson.isPresent() && !mAttemptedParse) {\r\n        mAttemptedParse = true;\r\n        try {\r\n            mJson = Optional.of(JsonValue.parse(new ByteArrayInputStream(toBytes())));\r\n        } catch (final IOException e) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/606", "ground_truth": "            // Ignore this\r\n        }\r\n    }\r\n    return mJson;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\http\\FailedRequestBody.java"}}
{"prompt": "\n import java.net.Socket\nimport javax.net.ssl.SSLSocket\nprivate Socket enableTLS1_2(final Socket s) {\r\n    if (s instanceof SSLSocket) {\r\n        ((SSLSocket) s).setEnabledProtocols(TLS_V1_2_ONLY);\r", "choices": [{"text": "}\r\nreturn s;\r\n}\n"}], "metadata": {"task_id": "RedReader/607", "ground_truth": "    }\r\n    return s;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\http\\LegacyTLSSocketFactory.java"}}
{"prompt": "\n import java.util.List\nimport okhttp3.HttpUrl\nimport okhttp3.Cookie\nimport androidx.annotation.NonNull\n@NonNull\r\n@Override\r\npublic List<Cookie> loadForRequest(final HttpUrl url) {\r\n    if (url.toString().contains(\"search\")) {\r", "choices": [{"text": "return Collections.singletonList(new Cookie.Builder(\"search\", \"1\")\r\n.domain(\"example.com\")\r\n.path(\"/\")\r\n.build());\r\n}\r\nreturn Collections.emptyList();\r\n}\r\n@Override\r\npublic void saveFromResponse(final HttpUrl url, final List<Cookie> cookies) {\r\nif (url.toString().contains(\"search\")) {\r\nfor (final Cookie cookie : cookies) {\r\nif (cookie.name().equals(\"search\")) {\r\ncookieManager.setCookie(url.toString(), cookie.toString());\r\n"}], "metadata": {"task_id": "RedReader/608", "ground_truth": "        return list;\r\n    } else {\r\n        return Collections.emptyList();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\http\\okhttp\\OKHTTPBackend.java"}}
{"prompt": "\n import org.quantumbadger.redreader.http.HTTPBackend\npublic static synchronized HTTPBackend getHttpBackend() {\r\n    if (httpBackend == null) {\r\n        httpBackend = new OKHTTPBackend();\r", "choices": [{"text": "}\r\nreturn httpBackend;\r\n}\n"}], "metadata": {"task_id": "RedReader/609", "ground_truth": "    }\r\n    return httpBackend;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\http\\okhttp\\OKHTTPBackend.java"}}
{"prompt": "\n import org.quantumbadger.redreader.http.body.multipart.PartFormData\nimport org.quantumbadger.redreader.http.body.multipart.Part\nimport org.quantumbadger.redreader.common.Void\nimport androidx.annotation.NonNull\n@NonNull\r\n@Override\r\npublic Void visitPart(@NonNull final PartFormData part) {\r", "choices": [{"text": "return null;\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r"}], "metadata": {"task_id": "RedReader/610", "ground_truth": "    builder.addFormDataPart(part.name, part.value);\r\n    return Void.INSTANCE;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\http\\okhttp\\OKHTTPBackend.java"}}
{"prompt": "\n @Override\r\npublic void cancel() {\r\n    cancelled.set(true);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/612", "ground_truth": "    final Call call = callRef.getAndSet(null);\r\n    if (call != null) {\r\n        call.cancel();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\http\\okhttp\\OKHTTPBackend.java"}}
{"prompt": "\n import java.util.List\npublic static String encodeList(final List<PostField> fields) {\r\n    final StringBuilder result = new StringBuilder();\r\n    for (final PostField field : fields) {\r\n        if (result.length() > 0) {\r\n            result.append('&');\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/614", "ground_truth": "        }\r\n        result.append(field.encode());\r\n    }\r\n    return result.toString();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\http\\PostField.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.os.Message\n@Override\r\npublic void handleMessage(@NonNull final Message msg) {\r\n    if (playing && view != null) {\r", "choices": [{"text": "\n import androidx.annotation.NonNull\nimport android.os.Message\n@Override\r\npublic void handleMessage(@NonNull final Message msg) {\r\n    if (playing && view!= null) {\r\n//        view.setProgress(msg.arg1);\r\n        view.setProgress(msg.arg1);\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/617", "ground_truth": "        view.setImageBitmap((Bitmap) msg.obj);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\image\\GifDecoderThread.java"}}
{"prompt": "\n public void stopPlaying() {\r\n    playing = false;\r\n    interrupt();\r\n    try {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/618", "ground_truth": "        is.close();\r\n    } catch (final Throwable t) {\r\n        Log.e(TAG, \"Exception while stopping\", t);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\image\\GifDecoderThread.java"}}
{"prompt": "\n @Override\r\npublic void run() {\r\n    try {\r\n        decoder.read(is);\r\n        loaded.set(true);\r", "choices": [{"text": "} catch (IOException e) {\r\n        e.printStackTrace();\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/619", "ground_truth": "    } catch (final Throwable t) {\r\n        Log.i(TAG, \"Got exception\", t);\r\n        failed.set(true);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\image\\GifDecoderThread.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static HasAudio fromBoolean(@Nullable final Boolean value) {\r\n    if (value == null) {\r\n        return MAYBE_AUDIO;\r\n    }\r\n    if (value) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/620", "ground_truth": "        return HAS_AUDIO;\r\n    } else {\r\n        return NO_AUDIO;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\image\\ImageInfo.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.kthings.RedditPost\nfun addToCache(post: RedditPost) {\r\n\t\t\tAlbumInfo.parseRedditGallery(post)?.apply {\r\n\t\t\t\tsynchronized(cache) {\r", "choices": [{"text": "//\t\t\t\t\tcache.add(this)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\n"}], "metadata": {"task_id": "RedReader/625", "ground_truth": "\t\t\t\t\tcache.remove(post.id)\r\n\t\t\t\t\tcache.put(post.id, this)\r\n\t\t\t\t}\r\n\t\t\t}\r\n        }", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\image\\RedditGalleryAPI.kt"}}
{"prompt": "\n import org.quantumbadger.redreader.common.RRError\nimport androidx.annotation.NonNull\n@Override\r\npublic void onFailure(@NonNull final RRError error) {\r\n    if (!mNotifiedFailure.getAndSet(true)) {\r", "choices": [{"text": "//        Toast.makeText(this, error.getMessage(), Toast.LENGTH_LONG).show();\r\n        Log.e(TAG, error.getMessage());\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/626", "ground_truth": "        listener.onFailure(error);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\image\\RedditVideosAPI.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.RRError\nimport androidx.annotation.NonNull\n@Override\r\npublic void onFailure(@NonNull final RRError error) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/629", "ground_truth": "    Log.i(TAG, \"Failed to get RedGifs v2 token\");\r\n    listener.onFailure(error);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\image\\RedgifsAPIV2.java"}}
{"prompt": "\n import android.graphics.Bitmap\nprivate static Bitmap scaleAndCrop(final Bitmap src, final int w, final int h, final int newWidth) {\r\n    final float scaleFactor = (float) newWidth / (float) w;\r\n    final Bitmap scaled = Bitmap.createScaledBitmap(src, Math.round(scaleFactor * src.getWidth()), Math.round(scaleFactor * src.getHeight()), true);\r\n    final Bitmap result = Bitmap.createBitmap(scaled, 0, 0, newWidth, Math.round((float) h * scaleFactor));\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/631", "ground_truth": "    if (result != scaled) {\r\n        scaled.recycle();\r\n    }\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\image\\ThumbnailScaler.java"}}
{"prompt": "\n import java.io.IOException\nimport androidx.annotation.Nullable\n@Nullable\r\npublic Boolean readNullableBoolean() throws IOException {\r\n    if (!readBoolean()) {\r\n        return null;\r", "choices": [{"text": "}\r\nreturn true;\r\n}\r\n"}], "metadata": {"task_id": "RedReader/633", "ground_truth": "    }\r\n    return readBoolean();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\io\\ExtendedDataInputStream.java"}}
{"prompt": "\n import java.io.IOException\nimport androidx.annotation.Nullable\npublic void writeNullableBoolean(@Nullable final Boolean value) throws IOException {\r\n    if (value == null) {\r\n        writeBoolean(false);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/634", "ground_truth": "    } else {\r\n        writeBoolean(true);\r\n        writeBoolean(value);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\io\\ExtendedDataOutputStream.java"}}
{"prompt": "\n private synchronized void put(final V value, final boolean writeDown) {\r\n    final CacheEntry oldEntry = cached.get(value.getKey());\r\n    if (oldEntry != null) {\r\n        cached.put(value.getKey(), new CacheEntry(value, oldEntry.listeners));\r\n        oldEntry.listeners.map(updatedVersionListenerNotifier, value);\r\n    } else {\r\n        cached.put(value.getKey(), new CacheEntry(value));\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/638", "ground_truth": "    }\r\n    if (writeDown) {\r\n        cacheDataSource.performWrite(value);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\io\\PermanentCache.java"}}
{"prompt": "\n import java.util.Collection\nprivate synchronized void put(final Collection<V> values, final boolean writeDown) {\r\n    for (final V value : values) {\r\n        final CacheEntry oldEntry = cached.get(value.getKey());\r\n        if (oldEntry != null) {\r\n            cached.put(value.getKey(), new CacheEntry(value, oldEntry.listeners));\r\n            oldEntry.listeners.map(updatedVersionListenerNotifier, value);\r\n        } else {\r\n            cached.put(value.getKey(), new CacheEntry(value));\r\n        }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/639", "ground_truth": "    }\r\n    if (writeDown) {\r\n        cacheDataSource.performWrite(values);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\io\\PermanentCache.java"}}
{"prompt": "\n import java.lang.reflect.Field\nprivate static <E> int getDbVersion(final Class<E> clazz) {\r\n    for (final Field field : clazz.getDeclaredFields()) {\r\n        if (field.isAnnotationPresent(WritableObject.WritableObjectVersion.class)) {\r\n            field.setAccessible(true);\r\n            try {\r\n                return field.getInt(null);\r\n            } catch (final IllegalAccessException e) {\r\n                throw new RuntimeException(e);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/640", "ground_truth": "            }\r\n        }\r\n    }\r\n    throw new UnexpectedInternalStateException(\"Writable object has no DB version\");\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\io\\RawObjectDB.java"}}
{"prompt": "\n import java.lang.reflect.Field\nprivate String getFieldTypeString(final Class<?> fieldType) {\r\n    if (fieldType == Integer.class || fieldType == Long.class || fieldType == Integer.TYPE || fieldType == Long.TYPE) {\r\n        return \" INTEGER\";\r\n    } else if (fieldType == Boolean.class || fieldType == Boolean.TYPE) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/641", "ground_truth": "        return \" INTEGER\";\r\n    } else {\r\n        return \" TEXT\";\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\io\\RawObjectDB.java"}}
{"prompt": "\n import java.util.LinkedList\nimport java.util.Collection\nimport android.database.sqlite.SQLiteDatabase\nimport android.database.Cursor\npublic synchronized Collection<E> getAll() {\r\n    try (SQLiteDatabase db = getReadableDatabase()) {\r\n        try (Cursor cursor = db.query(TABLE_NAME, fieldNames, null, null, null, null, null)) {\r\n            final LinkedList<E> result = new LinkedList<>();\r\n            while (cursor.moveToNext()) {\r\n                result.add(readFromCursor(cursor));\r\n            }\r\n            return result;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/642", "ground_truth": "        } catch (final Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\io\\RawObjectDB.java"}}
{"prompt": "\n import java.util.ArrayList\nimport java.lang.reflect.Field\npublic synchronized E getById(final K id) {\r\n    final ArrayList<E> queryResult = getByField(FIELD_ID, id.toString());\r\n    if (queryResult.size() != 1) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/643", "ground_truth": "        return null;\r\n    } else {\r\n        return queryResult.get(0);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\io\\RawObjectDB.java"}}
{"prompt": "\n import android.database.sqlite.SQLiteDatabase\nimport android.content.ContentValues\npublic synchronized void put(final E object) {\r\n    final SQLiteDatabase db = getWritableDatabase();\r\n    try {\r\n        final ContentValues values = new ContentValues(fields.length + 1);\r\n        final long result = db.insertOrThrow(TABLE_NAME, null, toContentValues(object, values));\r\n        if (result < 0) {\r\n            throw new RuntimeException(\"Database write failed\");\r\n        }\r\n    } catch (final IllegalAccessException e) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/644", "ground_truth": "        throw new RuntimeException(e);\r\n    } finally {\r\n        db.close();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\io\\RawObjectDB.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.content.Context\n@NonNull\r\npublic static synchronized RedditChangeDataIO getInstance(final Context context) {\r\n    if (INSTANCE == null) {\r\n        INSTANCE = new RedditChangeDataIO(context.getApplicationContext());\r\n        if (STATIC_UPDATE_PENDING) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/645", "ground_truth": "            INSTANCE.notifyUpdate();\r\n        }\r\n    }\r\n    return INSTANCE;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\io\\RedditChangeDataIO.java"}}
{"prompt": "\n public static synchronized void notifyUpdateStatic() {\r\n    if (INSTANCE != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/646", "ground_truth": "        INSTANCE.notifyUpdate();\r\n    } else {\r\n        STATIC_UPDATE_PENDING = true;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\io\\RedditChangeDataIO.java"}}
{"prompt": "\n private void notifyUpdate() {\r\n    synchronized (mLock) {\r\n        if (mIsInitialReadComplete) {\r\n            triggerUpdate();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/647", "ground_truth": "        } else {\r\n            mUpdatePending = true;\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\io\\RedditChangeDataIO.java"}}
{"prompt": "\n private void notifyInitialReadComplete() {\r\n    synchronized (mLock) {\r\n        mIsInitialReadComplete = true;\r\n        if (mUpdatePending) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/648", "ground_truth": "            triggerUpdate();\r\n            mUpdatePending = false;\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\io\\RedditChangeDataIO.java"}}
{"prompt": "\n import java.util.ArrayList\nprivate void doWrite() {\r\n    synchronized (ioLock) {\r\n        final ArrayList<V> values;\r\n        synchronized (toWrite) {\r\n            values = new ArrayList<>(toWrite.values());\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/649", "ground_truth": "            toWrite.clear();\r\n        }\r\n        db.putAll(values);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\io\\ThreadedRawObjectDB.java"}}
{"prompt": "\n private void doRead() {\r\n    synchronized (ioLock) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/650", "ground_truth": "        while (!toRead.isEmpty()) {\r\n            toRead.remove().run();\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\io\\ThreadedRawObjectDB.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.TimestampBound\n@Override\r\npublic void performRequest(final K key, final TimestampBound timestampBound, final RequestResponseHandler<V, F> handler) {\r", "choices": [{"text": "final Request<V, F> request = new Request<V, F>(key, timestampBound, handler);\r\nfinal Request<V, F> requestCopy = request.copy();\r\nfinal Request<V, F> requestCopy2 = request.copy();\r\nfinal Request<V, F> requestCopy3 = request.copy();\r\nfinal Request<V, F> requestCopy4 = request.copy();\r\nfinal Request<V, F> requestCopy5 = request.copy();\r\nfinal Request<V, F> requestCopy6 = request.copy();\r\nfinal"}], "metadata": {"task_id": "RedReader/651", "ground_truth": "    toRead.offer(new SingleReadOperation(timestampBound, handler, key));\r\n    readThread.trigger();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\io\\ThreadedRawObjectDB.java"}}
{"prompt": "\n import java.util.HashMap\nimport java.util.Collection\nimport org.quantumbadger.redreader.common.TimestampBound\n@Override\r\npublic void performRequest(final Collection<K> keys, final TimestampBound timestampBound, final RequestResponseHandler<HashMap<K, V>, F> handler) {\r", "choices": [{"text": "final HashMap<K, V> result = new HashMap<K, V>();\r\nfinal Iterator<K> keyIterator = keys.iterator();\r\nwhile (keyIterator.hasNext()) {\r\nfinal K key = keyIterator.next();\r\nfinal V value = this.get(key);\r\nif (value!= null) {\r\nresult.put(key, value);\r\n}\r\n}\r\nhandler.handleResponse(result);\r\n}\r\n}\r\n<file_sep>/src/main/java/org/quantumbadger/redreader/common/TimestampBound."}], "metadata": {"task_id": "RedReader/652", "ground_truth": "    toRead.offer(new BulkReadOperation(timestampBound, handler, keys));\r\n    readThread.trigger();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\io\\ThreadedRawObjectDB.java"}}
{"prompt": "\n @Override\r\npublic void performWrite(final V value) {\r\n    synchronized (toWrite) {\r\n        toWrite.put(value.getKey(), value);\r", "choices": [{"text": "}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/653", "ground_truth": "    }\r\n    writeThread.trigger();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\io\\ThreadedRawObjectDB.java"}}
{"prompt": "\n import java.util.Collection\n@Override\r\npublic void performWrite(final Collection<V> values) {\r\n    synchronized (toWrite) {\r\n        for (final V value : values) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/654", "ground_truth": "            toWrite.put(value.getKey(), value);\r\n        }\r\n    }\r\n    writeThread.trigger();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\io\\ThreadedRawObjectDB.java"}}
{"prompt": "\n import java.util.HashMap\nimport org.quantumbadger.redreader.common.time.TimestampUTC\n@Override\r\npublic void onRequestSuccess(final HashMap<K, V> result, final TimestampUTC timeCached) {\r\n    final TimestampUTC timestamp = outerOldestTimestamp == null ? timeCached : TimestampUTC.oldest(outerOldestTimestamp, timeCached);\r\n    performWrite(result.values());\r", "choices": [{"text": "\n import java.util.HashMap\nimport org.quantumbadger.redreader.common.time.TimestampUTC\n@Override\r\npublic void onRequestSuccess(final HashMap<K, V> result, final TimestampUTC timeCached) {\r\n    final TimestampUTC timestamp = outerOldestTimestamp == null? timeCached : TimestampUTC.oldest(outerOldestTimestamp, timeCached);\r\n    performWrite(result.values());\r\n}\r\n"}], "metadata": {"task_id": "RedReader/655", "ground_truth": "    existingResult.putAll(result);\r\n    responseHandler.onRequestSuccess(existingResult, timestamp);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\io\\ThreadedRawObjectDB.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.time.TimestampUTC\n@Override\r\npublic void onRequestSuccess(final V result, final TimestampUTC timeCached) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/656", "ground_truth": "    performWrite(result);\r\n    responseHandler.onRequestSuccess(result, timeCached);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\io\\ThreadedRawObjectDB.java"}}
{"prompt": "\n import java.lang.ref.WeakReference\nprivate synchronized void put(final V value, final boolean writeDown) {\r\n    final CacheEntry oldEntry = cached.get(value.getKey());\r\n    if (oldEntry != null) {\r\n        cached.put(value.getKey(), new CacheEntry(new WeakReference<>(value), oldEntry.listeners));\r\n        oldEntry.listeners.map(updatedVersionListenerNotifier, value);\r\n    } else {\r\n        cached.put(value.getKey(), new CacheEntry(new WeakReference<>(value)));\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/660", "ground_truth": "    }\r\n    if (writeDown) {\r\n        cacheDataSource.performWrite(value);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\io\\WeakCache.java"}}
{"prompt": "\n import java.util.HashSet\npublic synchronized HashSet<String> toHashset() {\r\n    if (hashSet != null) {\r\n        return hashSet;\r", "choices": [{"text": "\n import java.util.HashSet\npublic synchronized HashSet<String> toHashset() {\r\n    if (hashSet!= null) {\r\n        return hashSet;\r\n}\r\nhashSet = new HashSet<String>();\r\nfor (String s : this) {\r\n    hashSet.add(s);\r\n}\r\nreturn hashSet;\r\n}\r\n"}], "metadata": {"task_id": "RedReader/663", "ground_truth": "    }\r\n    return (hashSet = new HashSet<>(escapedStringToList(serialised)));\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\io\\WritableHashSet.java"}}
{"prompt": "\n @Override\r\nprotected void prettyPrint(final int indent, final StringBuilder sb) {\r\n    sb.append('[');\r\n    for (int item = 0; item < mContents.size(); item++) {\r\n        if (item != 0) {\r\n            sb.append(',');\r\n        }\r\n        sb.append('\\n');\r\n        for (int i = 0; i < indent + 1; i++) {\r\n            sb.append(\"   \");\r\n        }\r\n        mContents.get(item).prettyPrint(indent + 1, sb);\r\n    }\r\n    sb.append('\\n');\r", "choices": [{"text": "\n @Override\r\nprotected void prettyPrint(final int indent, final StringBuilder sb) {\r\n    sb.append('[');\r\n    for (int item = 0; item < mContents.size(); item++) {\r\n        if (item!= 0) {\r\n            sb.append(',');\r\n        }\r\n        sb.append('\\n');\r\n        for (int i = 0; i < indent + 1; i++) {\r\n            sb.append(\"   \");\r\n        }\r\n        mContents.get(item).prettyPrint(indent + 1, sb);\r\n    }\r\n    sb.append('\\n');\r\n}\r\n"}], "metadata": {"task_id": "RedReader/664", "ground_truth": "    for (int i = 0; i < indent; i++) {\r\n        sb.append(\"   \");\r\n    }\r\n    sb.append(']');\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\jsonwrap\\JsonArray.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.Consumer\npublic void forEachObject(final Consumer<JsonObject> consumer) {\r\n    for (final JsonValue value : mContents) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/665", "ground_truth": "        consumer.consume(value.asObject());\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\jsonwrap\\JsonArray.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.Optional\nimport androidx.annotation.NonNull\n@NonNull\r\n@Override\r\nprotected Optional<JsonValue> getAtPathInternal(final int offset, final Object... keys) {\r\n    if (offset == keys.length) {\r\n        return Optional.of(this);\r\n    }\r\n    if (!(keys[offset] instanceof Integer)) {\r\n        return Optional.empty();\r\n    }\r\n    final int key = (Integer) keys[offset];\r\n    if (key < 0 || key >= mContents.size()) {\r\n        return Optional.empty();\r\n    }\r\n    final JsonValue next = mContents.get(key);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/666", "ground_truth": "    if (next == null) {\r\n        return Optional.empty();\r\n    }\r\n    return next.getAtPathInternal(offset + 1, keys);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\jsonwrap\\JsonArray.java"}}
{"prompt": "\n import java.lang.reflect.InvocationTargetException\nimport androidx.annotation.NonNull\n@NonNull\r\n@Override\r\npublic <E extends JsonDeserializable> E asObject(final Class<E> clazz) throws InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {\r\n    final E obj = clazz.getConstructor().newInstance();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/667", "ground_truth": "    populateObject(obj);\r\n    return obj;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\jsonwrap\\JsonObject.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@Nullable\r\npublic String getString(@NonNull final String id) {\r\n    final JsonValue value = get(id);\r", "choices": [{"text": "if (value == null) {\r\n    return null;\r\n}\r\nreturn value.asString();\r\n}\r\n"}], "metadata": {"task_id": "RedReader/668", "ground_truth": "    if (value == null) {\r\n        return null;\r\n    }\r\n    return value.asString();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\jsonwrap\\JsonObject.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@Nullable\r\npublic Long getLong(@NonNull final String id) {\r\n    final JsonValue value = get(id);\r", "choices": [{"text": "if (value == null) {\r\n    return null;\r\n}\r\nreturn value.asLong();\r\n}\r\n"}], "metadata": {"task_id": "RedReader/669", "ground_truth": "    if (value == null) {\r\n        return null;\r\n    }\r\n    return value.asLong();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\jsonwrap\\JsonObject.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@Nullable\r\npublic Double getDouble(@NonNull final String id) {\r\n    final JsonValue value = get(id);\r", "choices": [{"text": "if (value == null) {\r\n    return null;\r\n}\r\nreturn value.asDouble();\r\n}\r\n"}], "metadata": {"task_id": "RedReader/670", "ground_truth": "    if (value == null) {\r\n        return null;\r\n    }\r\n    return value.asDouble();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\jsonwrap\\JsonObject.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@Nullable\r\npublic Boolean getBoolean(@NonNull final String id) {\r\n    final JsonValue value = get(id);\r", "choices": [{"text": "if (value == null) {\r\n    return null;\r\n}\r\nreturn value.asBoolean();\r\n}\r\n"}], "metadata": {"task_id": "RedReader/671", "ground_truth": "    if (value == null) {\r\n        return null;\r\n    }\r\n    return value.asBoolean();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\jsonwrap\\JsonObject.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@Nullable\r\npublic JsonObject getObject(@NonNull final String id) {\r\n    final JsonValue value = get(id);\r", "choices": [{"text": "if (value == null) {\r\n    return null;\r\n}\r\nreturn value.asObject();\r\n}\r\n"}], "metadata": {"task_id": "RedReader/672", "ground_truth": "    if (value == null) {\r\n        return null;\r\n    }\r\n    return value.asObject();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\jsonwrap\\JsonObject.java"}}
{"prompt": "\n import java.lang.reflect.InvocationTargetException\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@Nullable\r\npublic <E extends JsonDeserializable> E getObject(@NonNull final String id, final Class<E> clazz) throws InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {\r\n    final JsonValue value = get(id);\r", "choices": [{"text": "if (value == null) {\r\n    return null;\r\n}\r\nreturn value.toObject(clazz);\r\n}\r\n"}], "metadata": {"task_id": "RedReader/673", "ground_truth": "    if (value == null) {\r\n        return null;\r\n    }\r\n    return value.asObject(clazz);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\jsonwrap\\JsonObject.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@Nullable\r\npublic JsonArray getArray(@NonNull final String id) {\r\n    final JsonValue value = get(id);\r", "choices": [{"text": "if (value == null) {\r\n    return null;\r\n}\r\nif (value.isArray()) {\r\n    return (JsonArray) value;\r\n}\r\nthrow new IllegalArgumentException(\"Expected a JSON array but was \" + value.toString());\r\n}\r\n"}], "metadata": {"task_id": "RedReader/674", "ground_truth": "    if (value == null) {\r\n        return null;\r\n    }\r\n    return value.asArray();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\jsonwrap\\JsonObject.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.Optional\nimport androidx.annotation.NonNull\n@NonNull\r\n@Override\r\nprotected Optional<JsonValue> getAtPathInternal(final int offset, final Object... keys) {\r\n    if (offset == keys.length) {\r\n        return Optional.of(this);\r\n    }\r\n    final JsonValue next = properties.get(keys[offset].toString());\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/675", "ground_truth": "    if (next == null) {\r\n        return Optional.empty();\r\n    }\r\n    return next.getAtPathInternal(offset + 1, keys);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\jsonwrap\\JsonObject.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.StringUtils\nimport androidx.annotation.Nullable\n@Nullable\r\n@Override\r\npublic Boolean asBoolean() {\r\n    final String lowercase = StringUtils.asciiLowercase(mValue);\r\n    switch(lowercase) {\r\n        case \"true\":\r\n        case \"t\":\r\n        case \"1\":\r\n            return true;\r\n        case \"false\":\r\n        case \"f\":\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/676", "ground_truth": "        case \"0\":\r\n            return false;\r\n    }\r\n    return null;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\jsonwrap\\JsonString.java"}}
{"prompt": "\n import androidx.annotation.Nullable\n@Nullable\r\n@Override\r\npublic Double asDouble() {\r\n    try {\r", "choices": [{"text": "return Double.parseDouble(this.toString());\r\n    } catch (NumberFormatException e) {\r\nreturn null;\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/677", "ground_truth": "        return Double.parseDouble(mValue);\r\n    } catch (final NumberFormatException e) {\r\n        return null;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\jsonwrap\\JsonString.java"}}
{"prompt": "\n import androidx.annotation.Nullable\n@Nullable\r\n@Override\r\npublic Long asLong() {\r\n    try {\r", "choices": [{"text": "return Long.parseLong(this);\r\n} catch (NumberFormatException e) {\r\nreturn null;\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/678", "ground_truth": "        return Long.parseLong(mValue);\r\n    } catch (final NumberFormatException e) {\r\n        return null;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\jsonwrap\\JsonString.java"}}
{"prompt": "\n import androidx.annotation.Nullable\n@Nullable\r\npublic JsonObject asObject() {\r", "choices": [{"text": "return this.mObject;\r\n}\r\n"}], "metadata": {"task_id": "RedReader/679", "ground_truth": "    // Default implementation\r\n    return null;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\jsonwrap\\JsonValue.java"}}
{"prompt": "\n import java.lang.reflect.InvocationTargetException\nimport androidx.annotation.Nullable\n@Nullable\r\npublic <E extends JsonObject.JsonDeserializable> E asObject(final Class<E> clazz) throws InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {\r", "choices": [{"text": "return clazz.getConstructor(JsonObject.class).newInstance(this);\r\n}\r\n"}], "metadata": {"task_id": "RedReader/680", "ground_truth": "    // Default implementation\r\n    return null;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\jsonwrap\\JsonValue.java"}}
{"prompt": "\n import androidx.annotation.Nullable\n@Nullable\r\npublic JsonArray asArray() {\r", "choices": [{"text": "return new JsonArray(this);\r\n}\r\n"}], "metadata": {"task_id": "RedReader/681", "ground_truth": "    // Default implementation\r\n    return null;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\jsonwrap\\JsonValue.java"}}
{"prompt": "\n import androidx.annotation.Nullable\n@Nullable\r\npublic Boolean asBoolean() {\r", "choices": [{"text": "return this.asBoolean();\r\n}\r\n"}], "metadata": {"task_id": "RedReader/682", "ground_truth": "    // Default implementation\r\n    return null;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\jsonwrap\\JsonValue.java"}}
{"prompt": "\n import androidx.annotation.Nullable\n@Nullable\r\npublic String asString() {\r", "choices": [{"text": "return this.value;\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/683", "ground_truth": "    // Default implementation\r\n    return null;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\jsonwrap\\JsonValue.java"}}
{"prompt": "\n import androidx.annotation.Nullable\n@Nullable\r\npublic Double asDouble() {\r", "choices": [{"text": "return Double.valueOf(this.toString());\r\n}\r\n"}], "metadata": {"task_id": "RedReader/684", "ground_truth": "    // Default implementation\r\n    return null;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\jsonwrap\\JsonValue.java"}}
{"prompt": "\n import androidx.annotation.Nullable\n@Nullable\r\npublic Long asLong() {\r", "choices": [{"text": "return this.value;\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/685", "ground_truth": "    // Default implementation\r\n    return null;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\jsonwrap\\JsonValue.java"}}
{"prompt": "\n @Override\r\npublic String toString() {\r\n    final StringBuilder sb = new StringBuilder();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/686", "ground_truth": "    prettyPrint(0, sb);\r\n    return sb.toString();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\jsonwrap\\JsonValue.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.Optional\nimport androidx.annotation.NonNull\n@NonNull\r\nprotected Optional<JsonValue> getAtPathInternal(final int offset, final Object... keys) {\r\n    // Default implementation\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/690", "ground_truth": "    if (offset == keys.length) {\r\n        return Optional.of(this);\r\n    }\r\n    return Optional.empty();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\jsonwrap\\JsonValue.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.url.RedditURLParser\nimport org.quantumbadger.redreader.reddit.PostCommentSort\npublic void setSort(final PostCommentSort s) {\r\n    if (mUrl.pathType() == RedditURLParser.POST_COMMENT_LISTING_URL) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/691", "ground_truth": "        mUrl = mUrl.asPostCommentListURL().order(s);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\listingcontrollers\\CommentListingController.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.url.RedditURLParser\nimport org.quantumbadger.redreader.reddit.UserCommentSort\npublic void setSort(final UserCommentSort s) {\r\n    if (mUrl.pathType() == RedditURLParser.USER_COMMENT_LISTING_URL) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/692", "ground_truth": "        mUrl = mUrl.asUserCommentListURL().order(s);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\listingcontrollers\\CommentListingController.java"}}
{"prompt": "\n import org.quantumbadger.redreader.fragments.PostListingFragment\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\npublic final PostListingFragment get(final AppCompatActivity parent, final boolean force, final Bundle savedInstanceState) {\r\n    if (force) {\r\n        session = null;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/696", "ground_truth": "    }\r\n    return new PostListingFragment(parent, savedInstanceState, getUri(), session, force);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\listingcontrollers\\PostListingController.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.url.RedditURLParser\npublic final String multiredditName() {\r\n    if (url.pathType() == RedditURLParser.MULTIREDDIT_POST_LISTING_URL) {\r\n        return url.asMultiredditPostListURL().name;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/697", "ground_truth": "    }\r\n    return null;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\listingcontrollers\\PostListingController.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.url.RedditURLParser\npublic final String multiredditUsername() {\r\n    if (url.pathType() == RedditURLParser.MULTIREDDIT_POST_LISTING_URL) {\r\n        return url.asMultiredditPostListURL().username;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/698", "ground_truth": "    }\r\n    return null;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\listingcontrollers\\PostListingController.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic Payload toPayload() {\r\n    final Payload result = new Payload();\r\n    result.setString(ENTRY_ID, id);\r\n    result.setString(ENTRY_TITLE, title);\r\n    if (message != null) {\r\n        result.setString(ENTRY_MESSAGE, message);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/699", "ground_truth": "    }\r\n    result.setString(ENTRY_URL, url);\r\n    result.setLong(ENTRY_SHOW_UNTIL, showUntil.toUtcMs());\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\receivers\\announcements\\Announcement.java"}}
{"prompt": "\n import java.security.SignatureException\nimport java.security.Signature\nimport java.security.PrivateKey\nimport java.security.NoSuchAlgorithmException\nimport java.security.Key\nimport java.security.InvalidKeyException\nimport androidx.annotation.NonNull\n@NonNull\r\nprivate static byte[] sign(@NonNull final PrivateKey privateKey, @NonNull final byte[] message) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {\r\n    final Signature signer = Signature.getInstance(SIGNATURE_ALG);\r\n    signer.initSign(privateKey);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/701", "ground_truth": "    signer.update(message);\r\n    return signer.sign();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\receivers\\announcements\\SignatureHandler.java"}}
{"prompt": "\n import java.security.SignatureException\nimport java.security.Signature\nimport java.security.PublicKey\nimport java.security.NoSuchAlgorithmException\nimport java.security.Key\nimport java.security.InvalidKeyException\nimport androidx.annotation.NonNull\nprivate static void verify(@NonNull final PublicKey publicKey, @NonNull final byte[] message, @NonNull final byte[] signature) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException, SignatureInvalidException {\r\n    final Signature signer = Signature.getInstance(SIGNATURE_ALG);\r\n    signer.initVerify(publicKey);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/702", "ground_truth": "    signer.update(message);\r\n    if (!signer.verify(signature)) {\r\n        throw new SignatureInvalidException();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\receivers\\announcements\\SignatureHandler.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport android.content.Intent\nimport android.content.Context\n@Override\r\npublic void onReceive(final Context context, final Intent intent) {\r", "choices": [{"text": "final String action = intent.getAction();\r\nif (action.equals(Intent.ACTION_BOOT_COMPLETED)) {\r\nfinal Intent serviceIntent = new Intent(context, MyService.class);\r\ncontext.startService(serviceIntent);\r\n}\r\n}\r\n}\r\n<file_sep>/app/src/main/java/org/quantumbadger/redreader/MainActivity.java\npackage org.quantumbadger.redreader;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view"}], "metadata": {"task_id": "RedReader/704", "ground_truth": "    checkForNewMessages(context);\r\n    AnnouncementDownloader.performDownload(context);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\receivers\\NewMessageChecker.java"}}
{"prompt": "\n @Override\r\npublic void run() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\ntry {\r\nwhile(true) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(isAlive) {\r\nif(is"}], "metadata": {"task_id": "RedReader/706", "ground_truth": "    RedditChangeDataManager.pruneAllUsersDefaultMaxAge();\r\n    CacheManager.getInstance(context).pruneCache();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\receivers\\RegularCachePruner.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.RRError\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\n@Override\r\nprotected void onFailure(@NonNull final RRError error) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/707", "ground_truth": "    revertOnFailure();\r\n    General.showResultDialog(activity, error);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\api\\RedditAPICommentAction.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.RedditAPI\nimport org.quantumbadger.redreader.R\n@Override\r\nprotected void onSuccess() {\r\n    if (action == RedditAPI.ACTION_DELETE) {\r", "choices": [{"text": "//        Toast.makeText(this, getString(R.string.deleted), Toast.LENGTH_SHORT).show();\r\n        finish();\r\n    } else {\r\n        super.onSuccess();\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/708", "ground_truth": "        General.quickToast(context, R.string.delete_success);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\api\\RedditAPICommentAction.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.RRError\n@Override\r\npublic void onRequestFailed(final RRError failureReason) {\r\n    synchronized (result) {\r\n        if (stillOkay.get()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/709", "ground_truth": "            stillOkay.set(false);\r\n            handler.onRequestFailed(failureReason);\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\api\\RedditAPIIndividualSubredditDataRequester.java"}}
{"prompt": "\n import java.util.HashSet\nimport org.quantumbadger.redreader.io.WritableHashSet\nimport org.quantumbadger.redreader.common.time.TimestampUTC\nprivate synchronized void onNewSubscriptionListReceived(final HashSet<String> newSubscriptions, final TimestampUTC timestamp) {\r\n    mMultireddits = new WritableHashSet(newSubscriptions, timestamp, mUser.getCanonicalUsername());\r\n    listeners.map(notifier);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "RedReader/714", "ground_truth": "    // TODO threaded? or already threaded due to cache manager\r\n    db.put(mMultireddits);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\api\\RedditMultiredditSubscriptionManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.RRError\n// TODO handle failed requests properly -- retry? then notify listeners\r\n@Override\r\npublic void onRequestFailed(final RRError failureReason) {\r\n    if (handler != null) {\r", "choices": [{"text": "\n import org.quantumbadger.redreader.common.RRError\n// TODO handle failed requests properly -- retry? then notify listeners\r\n@Override\r\npublic void onRequestFailed(final RRError failureReason) {\r\n    if (handler!= null) {\r\n//        handler.post(new Runnable() {\r\n//            @Override\r\n//            public void run() {\r\n//                if (failureReason == RRError.NETWORK_ERROR) {\r\n//                    // TODO: show network error\r\n//                } else {\r\n//                    // TODO: show other error\r\n//                }\r\n//            }\r\n//        });\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/715", "ground_truth": "        handler.onRequestFailed(failureReason);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\api\\RedditMultiredditSubscriptionManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General.readWholeStreamAsUTF8\nimport org.quantumbadger.redreader.R\nimport android.content.Context\nfun init(context: Context) {\r\n\t\ttry {\r\n\t\t\tval fileContents = context.assets.open(\"reddit_auth.txt\").use {\r\n\t\t\t\treadWholeStreamAsUTF8(it)\r\n\t\t\t}.split(\"\\\"\")\r\n\r\n\t\t\tif (fileContents.size != 3) {\r\n\t\t\t\tthrow RuntimeException(\"Invalid file contents: $fileContents\")\r\n\t\t\t}\r\n\r\n\t\t\tval id = fileContents[1].trim()\r\n\r\n\t\t\tif (id.isEmpty()) {\r\n\t\t\t\tthrow RuntimeException(\"No ID provided in reddit_auth.txt\")\r\n\t\t\t}\r\n\r\n\t\t\tGlobalConfig.appId = id\r", "choices": [{"text": "\n import org.quantumbadger.redreader.common.General.readWholeStreamAsUTF8\nimport org.quantumbadger.redreader.R\nimport android.content.Context\nfun init(context: Context) {\r\n\t\ttry {\r\n\t\t\tval fileContents = context.assets.open(\"reddit_auth.txt\").use {\r\n\t\t\t\treadWholeStreamAsUTF8(it)\r\n\t\t\t}.split(\"\\\"\")\r\n\r\n\t\t\tif (fileContents.size!= 3) {\r\n\t\t\t\tthrow RuntimeException(\"Invalid file contents: $fileContents\")\r\n\t\t\t}\r\n\r\n\t\t\tval id = fileContents[1].trim()\r\n\r\n\t\t\tif (id.isEmpty()) {\r\n\t\t\t\tthrow RuntimeException(\"No ID provided in reddit_auth.txt\")\r\n\t\t\t}\r\n\r\n\t\t\tGlobalConfig.appId = id\r\n//\t\t\tGlobalConfig.appId = \"<KEY>\"\r\n\t\t\tGlobalConfig.appSecret = fileContents[3].trim()\r\n\t\t} catch (e: Exception) {\r\n\t\t\tthrow RuntimeException(\"Error initializing Reddit API\", e)\r\n\t\t}\r\n\t}\n<file_sep>/app/src/main/java/org/quantumbadger/redreader/common/General.kt\npackage org.quantumbadger.redreader.common\n\nimport android.content.Context\nimport android.content.res.Resources\nimport android.graphics.Bitmap\nimport android.graphics.BitmapFactory\n"}], "metadata": {"task_id": "RedReader/717", "ground_truth": "\r\n\t\t} catch (e: Exception) {\r\n\t\t\tLog.i(TAG, \"Got exception during init\", e)\r\n\t\t}\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\api\\RedditOAuth.kt"}}
{"prompt": "\n import org.quantumbadger.redreader.R\npublic void removeListener() {\r\n    synchronized (RedditSubredditSubscriptionManager.this) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/718", "ground_truth": "        listeners.remove(mListener);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\api\\RedditSubredditSubscriptionManager.java"}}
{"prompt": "\n import android.content.Context\npublic synchronized ListenerContext addListener(final SubredditSubscriptionStateChangeListener listener) {\r", "choices": [{"text": ""}], "metadata": {"task_id": "RedReader/720", "ground_truth": "    listeners.add(listener);\r\n    return new ListenerContext(listener);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\api\\RedditSubredditSubscriptionManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.things.SubredditCanonicalId\nprivate synchronized void onSubscriptionAttempt(final SubredditCanonicalId id) {\r", "choices": [{"text": ""}], "metadata": {"task_id": "RedReader/722", "ground_truth": "    pendingSubscriptions.add(id);\r\n    listeners.map(notifier, SubredditSubscriptionChangeType.SUBSCRIPTION_ATTEMPTED);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\api\\RedditSubredditSubscriptionManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.things.SubredditCanonicalId\nprivate synchronized void onUnsubscriptionAttempt(final SubredditCanonicalId id) {\r", "choices": [{"text": ""}], "metadata": {"task_id": "RedReader/723", "ground_truth": "    pendingUnsubscriptions.add(id);\r\n    listeners.map(notifier, SubredditSubscriptionChangeType.UNSUBSCRIPTION_ATTEMPTED);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\api\\RedditSubredditSubscriptionManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.things.SubredditCanonicalId\nprivate synchronized void onSubscriptionChangeAttemptFailed(final SubredditCanonicalId id) {\r\n    pendingUnsubscriptions.remove(id);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/724", "ground_truth": "    pendingSubscriptions.remove(id);\r\n    listeners.map(notifier, SubredditSubscriptionChangeType.LIST_UPDATED);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\api\\RedditSubredditSubscriptionManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.RRError\nimport org.quantumbadger.redreader.R\n@Override\r\npublic void onRequestFailed(final RRError failureReason) {\r\n    if (onFailure != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/728", "ground_truth": "        onFailure.apply(failureReason);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\api\\RedditSubredditSubscriptionManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.RRError\nimport org.quantumbadger.redreader.R\n// TODO handle failed requests properly -- retry? then notify listeners\r\n@Override\r\npublic void onRequestFailed(final RRError failureReason) {\r\n    if (handler != null) {\r", "choices": [{"text": "\n import org.quantumbadger.redreader.common.RRError\nimport org.quantumbadger.redreader.R\n// TODO handle failed requests properly -- retry? then notify listeners\r\n@Override\r\npublic void onRequestFailed(final RRError failureReason) {\r\n    if (handler!= null) {\r\n//        handler.post(new Runnable() {\r\n//            @Override\r\n//            public void run() {\r\n//                if (failureReason == RRError.NETWORK_ERROR) {\r\n//                    Toast.makeText(context, R.string.network_error, Toast.LENGTH_SHORT).show();\r\n//                } else if (failureReason == RRError.SERVER_ERROR) {\r\n//                    Toast.makeText(context, R.string.server_error, Toast.LENGTH_SHORT).show();\r\n//                } else if (failureReason == R"}], "metadata": {"task_id": "RedReader/729", "ground_truth": "        handler.onRequestFailed(failureReason);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\api\\RedditSubredditSubscriptionManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.RedditAPI\nimport org.quantumbadger.redreader.common.RRError\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\n@Override\r\nprotected void onFailure(@NonNull final RRError error) {\r\n    if (error.httpStatus != null && error.httpStatus == 404) {\r\n        // Weirdly, reddit returns a 404 if we were already subscribed/unsubscribed to\r\n        // this subreddit.\r\n        if (action == RedditAPI.SUBSCRIPTION_ACTION_SUBSCRIBE || action == RedditAPI.SUBSCRIPTION_ACTION_UNSUBSCRIBE) {\r\n            onSuccess();\r\n            return;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/733", "ground_truth": "        }\r\n    }\r\n    onSubscriptionChangeAttemptFailed(canonicalName);\r\n    General.showResultDialog(activity, error);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\api\\RedditSubredditSubscriptionManager.java"}}
{"prompt": "\nval descriptor SerialDescriptor\n fun ok() = when (this) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/739", "ground_truth": "\t\tis Ok -> value\r\n\t\tis Err -> throw error\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\kthings\\MaybeParseError.kt"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.url.PostCommentListingURL\nimport android.net.Uri\nfun getContextUrl(): PostCommentListingURL {\r\n\r\n\t\treturn context?.run {\r\n\t\t\tvar result = decoded\r\n\t\t\tif (result.startsWith(\"r/\")) {\r\n\t\t\t\tresult = \"/$result\"\r\n\t\t\t}\r\n\t\t\tif (result.startsWith(\"/\")) {\r\n\t\t\t\tresult = \"https://reddit.com$result\"\r\n\t\t\t}\r\n\t\t\tPostCommentListingURL.parse(Uri.parse(result))\r\n\r\n\t\t} ?: PostCommentListingURL(\r\n\t\t\tnull,\r\n\t\t\tlink_id,\r\n\t\t\tidAlone,\r\n\t\t\t3,\r", "choices": [{"text": "\n import org.quantumbadger.redreader.reddit.url.PostCommentListingURL\nimport android.net.Uri\nfun getContextUrl(): PostCommentListingURL {\r\n\r\n\t\treturn context?.run {\r\n\t\t\tvar result = decoded\r\n\t\t\tif (result.startsWith(\"r/\")) {\r\n\t\t\t\tresult = \"/$result\"\r\n\t\t\t}\r\n\t\t\tif (result.startsWith(\"/\")) {\r\n\t\t\t\tresult = \"https://reddit.com$result\"\r\n\t\t\t}\r\n\t\t\tPostCommentListingURL.parse(Uri.parse(result))\r\n\r\n\t\t}?: PostCommentListingURL(\r\n\t\t\tnull,\r\n\t\t\tlink_id,\r\n\t\t\tidAlone,\r\n\t\t\t3,\r\n//\t\t\t\"https://reddit.com/r/androiddev/comments/761211/how_to_get_the_current_activity_in_android_kotlin/\"\r\n\t\t\t\"https://reddit.com/r/androiddev/comments/761211/how_to_get_the_current_activity_in_android_kotlin/\"\r\n\t\t)\r\n\t}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/742", "ground_truth": "\t\t\tnull,\r\n\t\t\tnull,\r\n\t\t\tfalse\r\n\t\t)\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\kthings\\RedditComment.kt"}}
{"prompt": "\n import kotlinx.serialization.json.booleanOrNull\nimport kotlinx.serialization.json.JsonPrimitive\nimport kotlinx.serialization.json.JsonElement\nimport kotlinx.serialization.SerializationException\nimport kotlinx.serialization.KSerializer\noverride fun selectDeserializer(element: JsonElement): KSerializer<out RedditFieldEdited> {\r\n\r\n\t\tif (!(element is JsonPrimitive)) {\r\n\t\t\tthrow SerializationException(\"Expecting JSON primitive for BoolOrTimestamp\")\r\n\t\t}\r\n\r\n\t\treturn if (element.booleanOrNull == null) {\r", "choices": [{"text": "RedditFieldEdited.serializer()\r\n\t\t} else {\r\nRedditFieldEdited.serializer()\r\n\t\t}\r\n\t}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/743", "ground_truth": "\t\t\tRedditFieldEdited.Timestamp.serializer()\r\n\t\t} else {\r\n\t\t\tRedditFieldEdited.Bool.serializer()\r\n\t\t}\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\kthings\\RedditFieldEdited.kt"}}
{"prompt": "\n import kotlinx.serialization.KSerializer\noverride fun selectDeserializer(element: JsonElement): KSerializer<out RedditFieldReplies> {\r\n\r\n\t\treturn if (element is JsonObject) {\r\n\t\t\tRedditFieldRepliesSomeSerializer\r\n\t\t} else if (element is JsonPrimitive) {\r\n\t\t\tRedditFieldRepliesNoneStringSerializer\r\n\t\t} else if (element is JsonNull) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/744", "ground_truth": "\t\t\tRedditFieldRepliesNoneNullSerializer\r\n\t\t} else {\r\n\t\t\tthrow IOException(\"Unexpected replies type $element\");\r\n\t\t}\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\kthings\\RedditFieldReplies.kt"}}
{"prompt": "\n import kotlinx.serialization.encoding.Decoder\noverride fun deserialize(decoder: Decoder): RedditFieldReplies.None {\r", "choices": [{"text": "return RedditFieldReplies.None\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/745", "ground_truth": "\t\tdecoder.decodeString()\r\n\t\treturn RedditFieldReplies.None\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\kthings\\RedditFieldReplies.kt"}}
{"prompt": "\n import kotlinx.serialization.encoding.Decoder\nimport kotlinx.serialization.ExperimentalSerializationApi\n\t@OptIn(ExperimentalSerializationApi::class)\r\n\toverride fun deserialize(decoder: Decoder): RedditFieldReplies.None {\r", "choices": [{"text": "return RedditFieldReplies.None()\r\n\t}\r\n}\r\n<file_sep>/src/main/kotlin/com/rnett/reddit/api/models/RedditFieldReplies.kt\npackage com.rnett.reddit.api.models\n\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\n\n@Serializable\nsealed class RedditFieldReplies {\n    @Serializable\n    @SerialName(\"default\")\n    object Default : RedditFieldReplies()\n\n    @Serializable\n    @SerialName(\"hide\")\n    object Hide : RedditFieldReplies()\n\n    @"}], "metadata": {"task_id": "RedReader/746", "ground_truth": "\t\tdecoder.decodeNull()\r\n\t\treturn RedditFieldReplies.None\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\kthings\\RedditFieldReplies.kt"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.url.RedditURLParser.RedditURL\nimport org.quantumbadger.redreader.reddit.url.RedditURLParser\nimport org.quantumbadger.redreader.reddit.url.PostCommentListingURL\nfun getMoreUrls(\r\n\t\tcommentListingURL: RedditURL\r\n\t): List<PostCommentListingURL> {\r\n\r\n\t\tval urls = ArrayList<PostCommentListingURL>(16)\r\n\r\n\t\tif (commentListingURL.pathType() == RedditURLParser.POST_COMMENT_LISTING_URL) {\r\n\t\t\tif (count > 0) {\r\n\t\t\t\tfor (child in children) {\r\n\t\t\t\t\turls.add(commentListingURL.asPostCommentListURL().commentId(child))\r\n\t\t\t\t}\r\n\t\t\t} else {\r", "choices": [{"text": "//\t\t\t\turls.add(commentListingURL.asPostCommentListURL().commentId(commentListingURL.commentId()))\r\n\t\t\t}\r\n\t\t} else if (commentListingURL.pathType() == RedditURLParser.POST_COMMENT_URL) {\r\n\t\t\tif (count > 0) {\r\n\t\t\t\tfor (child in children) {\r\n\t\t\t\t\turls.add(commentListingURL.asPostCommentListURL().commentId(child))\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n//\t\t\t\turls.add(commentListingURL.asPostCommentListURL().commentId(comment"}], "metadata": {"task_id": "RedReader/747", "ground_truth": "\t\t\t\turls.add(commentListingURL.asPostCommentListURL().commentId(parent_id))\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn urls\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\kthings\\RedditMore.kt"}}
{"prompt": "\n fun findUrl(): String? {\r\n\r\n\t\tmedia?.reddit_video?.fallback_url?.decoded?.apply {\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\tif (url?.decoded?.contains(\".gif\") == true) {\r\n\t\t\tpreview?.images?.get(0)?.variants?.mp4?.source?.url?.decoded?.apply {\r\n\t\t\t\treturn this\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\turl_overridden_by_dest?.decoded?.apply {\r", "choices": [{"text": "//\t\t\tif (this.contains(\"reddit.com\")) {\r\n//\t\t\t\treturn this\r\n//\t\t\t}\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\treturn null\r\n\t}\r\n\r\n fun findUrl(url: String): String? {\r\n\r\n\t\tif (url.contains(\".gif\")) {\r\n\t\t\treturn url\r\n\t\t}\r\n\r\n\t\tif (url.contains(\"reddit.com\")) {\r\n\t\t\treturn url\r\n\t\t}\r\n\r\n\t\treturn null\r\n\t}\r\n\r\n fun findUrl(url: String, type: String): String? {\r\n\r\n\t\tif (url.contains(\".gif\")) {\r\n\t\t\t"}], "metadata": {"task_id": "RedReader/748", "ground_truth": "\t\t\treturn this\r\n\t\t}\r\n\r\n\t\treturn url?.decoded\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\kthings\\RedditPost.kt"}}
{"prompt": "\n import kotlinx.serialization.json.JsonElement\nimport kotlinx.serialization.json.JsonArray\nimport kotlinx.serialization.KSerializer\noverride fun selectDeserializer(element: JsonElement): KSerializer<out RedditThingResponse> {\r\n\r\n\t\treturn if (element is JsonArray) {\r", "choices": [{"text": "//\t\t\tval list = mutableListOf<RedditThingResponse>()\r\n//\t\t\telement.forEach {\r\n//\t\t\t\tlist.add(serializer().deserialize(JsonDecodingInput(it)))\r\n//\t\t\t}\r\n//\t\t\tRedditThingResponse.serializer().list.deserialize(JsonDecodingInput(list))\r\n\t\t\tRedditThingResponse.serializer().list.deserialize(JsonDecodingInput(element))\r\n\t\t} else {\r\n\t\t\tRedditThingResponse.serializer().deserialize(JsonDecodingInput(element))\r\n\t\t}\r\n\t}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/749", "ground_truth": "\t\t\tRedditThingResponseMultipleSerializer\r\n\t\t} else {\r\n\t\t\tRedditThingResponseSingleSerializer\r\n\t\t}\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\kthings\\RedditThingResponse.kt"}}
{"prompt": "\n import org.quantumbadger.redreader.common.StringUtils\npublic static PostCommentSort lookup(String name) {\r\n    name = StringUtils.asciiUppercase(name);\r\n    if (name.equals(\"CONFIDENCE\")) {\r\n        // oh, reddit...\r\n        return BEST;\r\n    }\r\n    try {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/750", "ground_truth": "        return PostCommentSort.valueOf(name);\r\n    } catch (final IllegalArgumentException e) {\r\n        return null;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\PostCommentSort.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.LinkHandler\nimport org.quantumbadger.redreader.activities.BaseActivity\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\nimport android.view.View\n@Nullable\r\n@Override\r\nprotected View.OnLongClickListener generateOnLongClickListener(@NonNull final BaseActivity activity, @Nullable final Integer textColor, @Nullable final Float textSize, final boolean showLinkButtons) {\r\n    return (button) -> {\r\n        LinkHandler.onLinkLongClicked(activity, mDetails.url);\r", "choices": [{"text": "return true;\r\n    };\r\n}\r\n@Nullable\r\n@Override\r\nprotected View.OnClickListener generateOnClickListener(@NonNull final BaseActivity activity, @Nullable final Integer textColor, @Nullable final Float textSize, final boolean showLinkButtons) {\r\n    return (button) -> {\r\n        LinkHandler.onLinkClicked(activity, mDetails.url);\r\nreturn true;\r\n    };\r\n}\r\n@Nullable\r\n@Override\r\nprotected View.OnClickListener generateOnLinkClickedListener(@NonNull final BaseActivity activity, @Nullable final Integer textColor, @Nullable final Float textSize, final boolean showLinkButtons"}], "metadata": {"task_id": "RedReader/752", "ground_truth": "        return true;\r\n    };\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\bodytext\\BodyElementLinkButton.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.AndroidCommon\n@Override\r\npublic void addSpanDynamic(final Object what, final int start, final int end, final int flags) {\r\n    AndroidCommon.runOnUiThread(() -> {\r\n        mSpanned.setSpan(what, start, end, flags);\r", "choices": [{"text": "});\r\n}\r\n"}], "metadata": {"task_id": "RedReader/753", "ground_truth": "        if (mTextView != null) {\r\n            mTextView.setText(mSpanned);\r\n        }\r\n    });\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\bodytext\\BodyElementTextSpanned.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic final String getButtonTitle() {\r\n    if (name == null || name.isEmpty()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/755", "ground_truth": "        return url;\r\n    } else {\r\n        return name;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\html\\HtmlRawElement.java"}}
{"prompt": "\n import androidx.annotation.Nullable\n@Nullable\r\npublic final String getButtonSubtitle() {\r\n    if (name == null || name.isEmpty()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/756", "ground_truth": "        return null;\r\n    } else {\r\n        return url;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\html\\HtmlRawElement.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@NonNull\r\npublic final String getPlainText() {\r\n    final StringBuilder sb = new StringBuilder();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/757", "ground_truth": "    getPlainText(sb);\r\n    return sb.toString();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\html\\HtmlRawElement.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@Override\r\npublic void getPlainText(@NonNull final StringBuilder stringBuilder) {\r\n    for (final HtmlRawElement element : mChildren) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/758", "ground_truth": "        element.getPlainText(stringBuilder);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\html\\HtmlRawElementBlock.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@Override\r\npublic void getPlainText(@NonNull final StringBuilder stringBuilder) {\r\n    for (final HtmlRawElement element : mChildren) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/760", "ground_truth": "        element.getPlainText(stringBuilder);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\html\\HtmlRawElementBulletList.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@Override\r\npublic void getPlainText(@NonNull final StringBuilder stringBuilder) {\r\n    for (final HtmlRawElement element : mChildren) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/763", "ground_truth": "        element.getPlainText(stringBuilder);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\html\\HtmlRawElementImg.java"}}
{"prompt": "\n import java.util.ArrayList\nimport android.text.style.CharacterStyle\nimport android.text.style.BackgroundColorSpan\nimport androidx.annotation.NonNull\nimport android.graphics.Color\npublic static HtmlRawElementStyledText create(@NonNull final String text) {\r\n    final ArrayList<CharacterStyle> spans = new ArrayList<>();\r\n    spans.add(new BackgroundColorSpan(Color.RED));\r", "choices": [{"text": "return new HtmlRawElementStyledText(text, spans);\r\n}\n"}], "metadata": {"task_id": "RedReader/764", "ground_truth": "    spans.add(new ForegroundColorSpan(Color.WHITE));\r\n    return new HtmlRawElementStyledText(text, spans);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\html\\HtmlRawElementInlineErrorMessage.java"}}
{"prompt": "\n import java.util.ArrayList\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static HtmlRawElementTagPassthrough appendError(@NonNull final String text, @NonNull final HtmlRawElement element) {\r\n    final ArrayList<HtmlRawElement> children = new ArrayList<>();\r\n    children.add(element);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/765", "ground_truth": "    children.add(HtmlRawElementInlineErrorMessage.create(text));\r\n    return new HtmlRawElementTagPassthrough(children);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\html\\HtmlRawElementInlineErrorMessage.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@Override\r\npublic void getPlainText(@NonNull final StringBuilder stringBuilder) {\r\n    for (final HtmlRawElement element : mChildren) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/766", "ground_truth": "        element.getPlainText(stringBuilder);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\html\\HtmlRawElementNumberedList.java"}}
{"prompt": "\n import java.util.ArrayList\nimport org.quantumbadger.redreader.reddit.prepared.bodytext.BodyElement\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.annotation.NonNull\n@Override\r\npublic void generate(@NonNull final AppCompatActivity activity, @NonNull final ArrayList<BodyElement> destination) {\r\n    final ArrayList<BodyElement> elements = new ArrayList<>();\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/769", "ground_truth": "    mChild.generate(activity, elements);\r\n    destination.add(new BodyElementQuote(elements));\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\html\\HtmlRawElementQuote.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@Override\r\npublic void getPlainText(@NonNull final StringBuilder stringBuilder) {\r\n    for (final HtmlRawElement element : mChildren) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/772", "ground_truth": "        element.getPlainText(stringBuilder);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\html\\HtmlRawElementTable.java"}}
{"prompt": "\n import java.util.ArrayList\nimport org.quantumbadger.redreader.reddit.prepared.bodytext.BodyElement\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.annotation.NonNull\n@Override\r\npublic void generate(@NonNull final AppCompatActivity activity, @NonNull final ArrayList<BodyElement> destination) {\r\n    final ArrayList<BodyElement> elements = new ArrayList<>();\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/775", "ground_truth": "    mChild.generate(activity, elements);\r\n    destination.add(new BodyElementTableCell(elements));\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\html\\HtmlRawElementTableCell.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@Override\r\npublic void getPlainText(@NonNull final StringBuilder stringBuilder) {\r\n    for (final HtmlRawElement element : mChildren) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/776", "ground_truth": "        element.getPlainText(stringBuilder);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\html\\HtmlRawElementTableRow.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@Override\r\npublic void getPlainText(@NonNull final StringBuilder stringBuilder) {\r\n    for (final HtmlRawElement element : mChildren) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/780", "ground_truth": "        element.getPlainText(stringBuilder);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\html\\HtmlRawElementTagAttributeChange.java"}}
{"prompt": "\n import java.util.ArrayList\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.annotation.NonNull\n@Override\r\npublic final void reduce(@NonNull final HtmlTextAttributes activeAttributes, @NonNull final AppCompatActivity activity, @NonNull final ArrayList<HtmlRawElement> destination, @NonNull final ArrayList<LinkButtonDetails> linkButtons) {\r\n    onStart(activeAttributes);\r\n    try {\r\n        for (final HtmlRawElement child : mChildren) {\r\n            child.reduce(activeAttributes, activity, destination, linkButtons);\r\n        }\r", "choices": [{"text": "} finally {\r\n    onEnd(activeAttributes);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/781", "ground_truth": "    } finally {\r\n        onEnd(activeAttributes);\r\n    }\r\n    onLinkButtons(linkButtons);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\html\\HtmlRawElementTagAttributeChange.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@Override\r\nprotected void onStart(@NonNull final HtmlTextAttributes activeAttributes) {\r", "choices": [{"text": "super.onStart(activeAttributes);\r\n}\r\n"}], "metadata": {"task_id": "RedReader/782", "ground_truth": "    activeAttributes.bold++;\r\n    activeAttributes.extraLarge++;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\html\\HtmlRawElementTagH1.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@Override\r\nprotected void onEnd(@NonNull final HtmlTextAttributes activeAttributes) {\r", "choices": [{"text": "super.onEnd(activeAttributes);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/783", "ground_truth": "    activeAttributes.bold--;\r\n    activeAttributes.extraLarge--;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\html\\HtmlRawElementTagH1.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@Override\r\nprotected void onStart(@NonNull final HtmlTextAttributes activeAttributes) {\r", "choices": [{"text": "super.onStart(activeAttributes);\r\n}\r\n"}], "metadata": {"task_id": "RedReader/784", "ground_truth": "    activeAttributes.bold++;\r\n    activeAttributes.large++;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\html\\HtmlRawElementTagH3.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@Override\r\nprotected void onEnd(@NonNull final HtmlTextAttributes activeAttributes) {\r", "choices": [{"text": "super.onEnd(activeAttributes);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/785", "ground_truth": "    activeAttributes.bold--;\r\n    activeAttributes.large--;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\html\\HtmlRawElementTagH3.java"}}
{"prompt": "\n private static boolean isNameChar(final char c) {\r\n    switch(c) {\r\n        case 0:\r\n        case ' ':\r\n        case '\\'':\r\n        case '\"':\r\n        case '>':\r\n        case '/':\r\n        case '=':\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/786", "ground_truth": "            return false;\r\n        default:\r\n            return true;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\html\\HtmlReader.java"}}
{"prompt": "\n private boolean tryAccept(final char c) {\r\n    if (mPos < mHtml.length() && mHtml.charAt(mPos) == c) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/788", "ground_truth": "        mPos++;\r\n        return true;\r\n    }\r\n    return false;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\html\\HtmlReader.java"}}
{"prompt": "\n private void skipWhitespace() {\r\n    while (mPos < mHtml.length() && isWhitespace(mHtml.charAt(mPos))) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/790", "ground_truth": "        mPos++;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\html\\HtmlReader.java"}}
{"prompt": "\n private void skipNewlines() {\r\n    while (mPos < mHtml.length() && mHtml.charAt(mPos) == '\\n') {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/791", "ground_truth": "        mPos++;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\html\\HtmlReader.java"}}
{"prompt": "\n public HtmlReader.Token advance() throws MalformedHtmlException {\r", "choices": [{"text": "-    if (this.currentToken == null) {\r\n-      this.currentToken = this.tokenizer.nextToken();\r\n-    }\r\n-    return this.currentToken;\r\n+    return this.tokenizer.nextToken();\r\n   }\r\n \r\n   /**\r\n    * Returns the current token.\r\n    *\r\n    * @return the current token\r\n    */\r\n   public HtmlReader.Token currentToken() {\r\n-    return this.currentToken;\r\n+    return this.tokenizer.currentToken();\r\n   }\r\n \r\n   /**\r\n    * Returns the current token as a string.\r\n    *\r\n    *"}], "metadata": {"task_id": "RedReader/792", "ground_truth": "    mNext = mHtmlReader.readNext();\r\n    return mNext;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\html\\HtmlReaderPeekable.java"}}
{"prompt": "\n public CharArrSubstring rejoin(final CharArrSubstring toAppend) {\r\n    if (toAppend.start - 1 != start + length) {\r\n        throw new RuntimeException(\"Internal error: attempt to join non-consecutive substrings\");\r", "choices": [{"text": "\n public CharArrSubstring rejoin(final CharArrSubstring toAppend) {\r\n    if (toAppend.start - 1!= start + length) {\r\n        throw new RuntimeException(\"Internal error: attempt to join non-consecutive substrings\");\r\n}\r\nfinal int newLength = length + toAppend.length;\r\nfinal char[] newChars = new char[newLength];\r\nSystem.arraycopy(chars, start, newChars, 0, length);\r\nSystem.arraycopy(toAppend.chars, toAppend.start, newChars, length, toAppend.length);\r\nreturn new CharArrSubstring(newChars, 0, newLength);\r\n}\r\npublic CharArrSubstring rejoin(final char[] toAppend) {\r\n    if (toAppend.length!= 0 && toAppend[0] - "}], "metadata": {"task_id": "RedReader/794", "ground_truth": "    }\r\n    return new CharArrSubstring(arr, start, length + 1 + toAppend.length);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\CharArrSubstring.java"}}
{"prompt": "\n private static int indexOfLinebreak(final char[] raw, final int startPos) {\r\n    for (int i = startPos; i < raw.length; i++) {\r\n        if (raw[i] == '\\n') {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/795", "ground_truth": "            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\CharArrSubstring.java"}}
{"prompt": "\n public int countSpacesAtStart() {\r\n    for (int i = 0; i < length; i++) {\r\n        if (arr[start + i] != ' ') {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/796", "ground_truth": "            return i;\r\n        }\r\n    }\r\n    return length;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\CharArrSubstring.java"}}
{"prompt": "\n public int countSpacesAtEnd() {\r\n    for (int i = 0; i < length; i++) {\r\n        if (arr[start + length - 1 - i] != ' ') {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/797", "ground_truth": "            return i;\r\n        }\r\n    }\r\n    return length;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\CharArrSubstring.java"}}
{"prompt": "\n public int countPrefixLengthIgnoringSpaces(final char c) {\r\n    for (int i = 0; i < length; i++) {\r\n        if (arr[start + i] != ' ' && arr[start + i] != c) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/798", "ground_truth": "            return i;\r\n        }\r\n    }\r\n    return length;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\CharArrSubstring.java"}}
{"prompt": "\n public int countPrefixLevelIgnoringSpaces(final char c) {\r\n    int level = 0;\r\n    for (int i = 0; i < length; i++) {\r\n        if (arr[start + i] != ' ' && arr[start + i] != c) {\r\n            return level;\r\n        } else if (arr[start + i] == c) {\r\n            // TODO tidy up\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/799", "ground_truth": "            level++;\r\n        }\r\n    }\r\n    return length;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\CharArrSubstring.java"}}
{"prompt": "\n public boolean isRepeatingChar(final char c, final int start, final int len) {\r\n    for (int i = 0; i < len; i++) {\r\n        if (arr[i + start + this.start] != c) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/801", "ground_truth": "            return false;\r\n        }\r\n    }\r\n    return true;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\CharArrSubstring.java"}}
{"prompt": "\n public boolean equalAt(final int position, final String needle) {\r\n    if (length < position + needle.length()) {\r\n        return false;\r\n    }\r\n    for (int i = 0; i < needle.length(); i++) {\r\n        if (needle.charAt(i) != arr[start + position + i]) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/802", "ground_truth": "            return false;\r\n        }\r\n    }\r\n    return true;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\CharArrSubstring.java"}}
{"prompt": "\n public void replaceUnicodeSpaces() {\r\n    for (int i = 0; i < length; i++) {\r", "choices": [{"text": "//      if (text.charAt(i) =='') {\r\n//        text.setCharAt(i, '\\u00A0');\r\n//      }\r\n    }\r\n  }\r\n\r\n  public void replaceUnicodeSpaces(char[] chars) {\r\n    for (int i = 0; i < length; i++) {\r\n//      if (chars[i] =='') {\r\n//        chars[i] = '\\u00A0';\r\n//      }\r\n    }\r\n  }\r\n\r\n  public void replaceUnicodeSpaces(char[] chars, int start, int end) {"}], "metadata": {"task_id": "RedReader/803", "ground_truth": "        if (MarkdownTokenizer.isUnicodeWhitespace(arr[start + i])) {\r\n            arr[start + i] = ' ';\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\CharArrSubstring.java"}}
{"prompt": "\n public void append(final int[] arr) {\r", "choices": [{"text": "//     for (int i = 0; i < arr.length; i++) {\r\n//       append(arr[i]);\r\n//     }\r\n//   }\r\n// \r\n//   public void append(final int[] arr, final int offset, final int length) {\r\n//     for (int i = offset; i < offset + length; i++) {\r\n//       append(arr[i]);\r\n//     }\r\n//   }\r\n// \r\n//   public void append(final long[] arr) {\r\n//     for ("}], "metadata": {"task_id": "RedReader/804", "ground_truth": "    System.arraycopy(arr, 0, data, pos, arr.length);\r\n    pos += arr.length;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\IntArrayLengthPair.java"}}
{"prompt": "\n public void append(final char[] arr) {\r\n    for (int i = 0; i < arr.length; i++) {\r\n        data[pos + i] = arr[i];\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/805", "ground_truth": "    }\r\n    pos += arr.length;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\IntArrayLengthPair.java"}}
{"prompt": "\n public int[] substringAsArray(final int start) {\r\n    final int[] result = new int[pos - start];\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/806", "ground_truth": "    System.arraycopy(data, start, result, 0, result.length);\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\IntArrayLengthPair.java"}}
{"prompt": "\n private static int indexOf(final int[] haystack, final int needle, final int startPos) {\r\n    for (int i = startPos; i < haystack.length; i++) {\r\n        if (haystack[i] == needle) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/809", "ground_truth": "            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\MarkdownParagraph.java"}}
{"prompt": "\n public boolean isEmpty() {\r\n    if (type == MarkdownParser.MarkdownParagraphType.HLINE) {\r\n        return false;\r\n    }\r\n    if (type == MarkdownParser.MarkdownParagraphType.EMPTY) {\r\n        return true;\r\n    }\r\n    if (tokens == null) {\r\n        return raw.countSpacesAtStart() == raw.length;\r\n    } else {\r\n        for (final int token : tokens) {\r\n            if (!MarkdownTokenizer.isUnicodeWhitespace(token)) {\r\n                return false;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/810", "ground_truth": "            }\r\n        }\r\n        return true;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\MarkdownParagraph.java"}}
{"prompt": "\n public static IntArrayLengthPair tokenize(final CharArrSubstring input) {\r\n    final IntArrayLengthPair tmp1 = new IntArrayLengthPair(input.length * 3);\r\n    final IntArrayLengthPair tmp2 = new IntArrayLengthPair(input.length * 3);\r\n    tmp1.pos = input.length;\r\n    for (int i = 0; i < input.length; i++) {\r\n        tmp1.data[i] = input.charAt(i);\r\n    }\r\n    // Markdown is evil.\r\n    naiveTokenize(tmp1, tmp2);\r", "choices": [{"text": ""}], "metadata": {"task_id": "RedReader/811", "ground_truth": "    clean(tmp2, tmp1);\r\n    linkify(tmp1, tmp2);\r\n    clean(tmp2, tmp1);\r\n    return tmp1;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\MarkdownTokenizer.java"}}
{"prompt": "\n private static int findParenClosePos(final IntArrayLengthPair tokens, final int startPos) {\r\n    for (int i = startPos; i < tokens.pos; i++) {\r\n        switch(tokens.data[i]) {\r\n            case TOKEN_PAREN_CLOSE:\r\n                return i;\r\n            case '\"':\r\n                i = indexOfIgnoreEscaped(tokens, '\"', i + 1);\r\n                if (i < 0) {\r\n                    return -1;\r\n                }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/812", "ground_truth": "                break;\r\n        }\r\n    }\r\n    return -1;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\MarkdownTokenizer.java"}}
{"prompt": "\n private static int indexOfIgnoreEscaped(final IntArrayLengthPair haystack, final int needle, final int startPos) {\r\n    for (int i = startPos; i < haystack.pos; i++) {\r\n        if (haystack.data[i] == '\\\\') {\r\n            i++;\r\n        } else if (haystack.data[i] == needle) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/813", "ground_truth": "            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\MarkdownTokenizer.java"}}
{"prompt": "\n private static int indexOf(final int[] haystack, final int needle, final int startInclusive, final int endExclusive) {\r\n    for (int i = startInclusive; i < endExclusive; i++) {\r\n        if (haystack[i] == needle) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/814", "ground_truth": "            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\MarkdownTokenizer.java"}}
{"prompt": "\n public static int findCloseWellBracketed(final int[] haystack, final int openBracket, final int closeBracket, final int startInclusive, final int endExclusive) {\r\n    if (haystack[startInclusive] != openBracket) {\r\n        throw new RuntimeException(\"Internal markdown parser error\");\r\n    }\r\n    int b = 1;\r\n    for (int i = startInclusive + 1; i < endExclusive; i++) {\r\n        if (haystack[i] == openBracket) {\r\n            b++;\r\n        } else if (haystack[i] == closeBracket) {\r\n            b--;\r\n        }\r\n        if (b == 0) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/815", "ground_truth": "            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\MarkdownTokenizer.java"}}
{"prompt": "\n private static boolean isSpaces(final int[] haystack, final int startInclusive, final int endExclusive) {\r\n    for (int i = startInclusive; i < endExclusive; i++) {\r\n        if (haystack[i] != ' ') {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/816", "ground_truth": "            return false;\r\n        }\r\n    }\r\n    return true;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\MarkdownTokenizer.java"}}
{"prompt": "\n private static boolean isDigits(final int[] haystack, final int startInclusive, final int endExclusive) {\r\n    for (int i = startInclusive; i < endExclusive; i++) {\r\n        if (haystack[i] < '0' || haystack[i] > '9') {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/817", "ground_truth": "            return false;\r\n        }\r\n    }\r\n    return true;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\MarkdownTokenizer.java"}}
{"prompt": "\n private static boolean isHexDigits(final int[] haystack, final int startInclusive, final int endExclusive) {\r\n    for (int i = startInclusive; i < endExclusive; i++) {\r\n        final int c = haystack[i];\r\n        if ((c < '0' || c > '9') && (c < 'a' || c > 'f') && (c < 'A' || c > 'F')) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/818", "ground_truth": "            return false;\r\n        }\r\n    }\r\n    return true;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\MarkdownTokenizer.java"}}
{"prompt": "\n private static int getDecimal(final int[] chars, final int startInclusive, final int endExclusive) {\r\n    int result = 0;\r\n    for (int i = startInclusive; i < endExclusive; i++) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/819", "ground_truth": "        result *= 10;\r\n        result += chars[i] - '0';\r\n    }\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\MarkdownTokenizer.java"}}
{"prompt": "\n private static int fromHex(final int ch) {\r\n    if (ch >= '0' && ch <= '9') {\r\n        return ch - '0';\r\n    }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/820", "ground_truth": "    if (ch >= 'a' && ch <= 'f') {\r\n        return 10 + ch - 'a';\r\n    }\r\n    return 10 + ch - 'A';\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\MarkdownTokenizer.java"}}
{"prompt": "\n private static int getHex(final int[] chars, final int startInclusive, final int endExclusive) {\r\n    int result = 0;\r\n    for (int i = startInclusive; i < endExclusive; i++) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/821", "ground_truth": "        result *= 16;\r\n        result += fromHex(chars[i]);\r\n    }\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\MarkdownTokenizer.java"}}
{"prompt": "\n private static boolean equals(final int[] haystack, final char[] needle, final int startInclusive) {\r\n    for (int i = 0; i < needle.length; i++) {\r\n        if (haystack[startInclusive + i] != needle[i]) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/822", "ground_truth": "            return false;\r\n        }\r\n    }\r\n    return true;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\MarkdownTokenizer.java"}}
{"prompt": "\n private static int getLinkStartType(final int[] haystack, final int startInclusive, final int endExclusive) {\r\n    final int maxLen = endExclusive - startInclusive;\r\n    for (int type = 0; type < linkPrefixes.length; type++) {\r\n        if (linkPrefixes[type].length <= maxLen && equals(haystack, linkPrefixes[type], startInclusive)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/823", "ground_truth": "            return type;\r\n        }\r\n    }\r\n    return -1;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\MarkdownTokenizer.java"}}
{"prompt": "\n private static int getRedditLinkStartType(final int[] haystack, final int startInclusive, final int endExclusive) {\r\n    final int maxLen = endExclusive - startInclusive;\r\n    for (int type = 0; type < linkPrefixes_reddit.length; type++) {\r\n        if (linkPrefixes_reddit[type].length <= maxLen && equals(haystack, linkPrefixes_reddit[type], startInclusive)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/824", "ground_truth": "            return type;\r\n        }\r\n    }\r\n    return -1;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\markdown\\MarkdownTokenizer.java"}}
{"prompt": "\n import org.quantumbadger.redreader.account.RedditAccount\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static RedditChangeDataManager getInstance(final RedditAccount user) {\r\n    synchronized (INSTANCE_MAP) {\r\n        RedditChangeDataManager result = INSTANCE_MAP.get(user);\r\n        if (result == null) {\r\n            result = new RedditChangeDataManager();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/825", "ground_truth": "            INSTANCE_MAP.put(user, result);\r\n        }\r\n        return result;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\RedditChangeDataManager.java"}}
{"prompt": "\n import java.util.Set\nimport java.util.Map\nimport java.util.HashMap\nimport org.quantumbadger.redreader.reddit.kthings.RedditIdAndType\nimport org.quantumbadger.redreader.account.RedditAccount\nprivate static HashMap<RedditAccount, HashMap<RedditIdAndType, Entry>> snapshotAllUsers() {\r\n    final HashMap<RedditAccount, HashMap<RedditIdAndType, Entry>> result = new HashMap<>();\r\n    synchronized (INSTANCE_MAP) {\r\n        for (final RedditAccount account : INSTANCE_MAP.keySet()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/826", "ground_truth": "            result.put(account, getInstance(account).snapshot());\r\n        }\r\n    }\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\RedditChangeDataManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.kthings.RedditIdAndType\nprivate Entry get(final RedditIdAndType thing) {\r\n    final Entry entry = mEntries.get(thing);\r\n    if (entry == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/831", "ground_truth": "        return Entry.CLEAR_ENTRY;\r\n    } else {\r\n        return entry;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\RedditChangeDataManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.kthings.RedditIdAndType\npublic boolean isUpvoted(final RedditIdAndType thing) {\r\n    synchronized (mLock) {\r", "choices": [{"text": "//        if (mUpvotedThings.contains(thing)) {\r\n//            return true;\r\n//        }\r\n        return mUpvotedThings.contains(thing);\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/841", "ground_truth": "        return get(thing).isUpvoted();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\RedditChangeDataManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.kthings.RedditIdAndType\npublic boolean isDownvoted(final RedditIdAndType thing) {\r\n    synchronized (mLock) {\r", "choices": [{"text": "//        if (thing.isComment()) {\r\n//            return mDownvotedComments.contains(thing.getId());\r\n//        } else {\r\n//            return mDownvotedPosts.contains(thing.getId());\r\n//        }\r\n        return mDownvotedPosts.contains(thing.getId());\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/842", "ground_truth": "        return get(thing).isDownvoted();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\RedditChangeDataManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.kthings.RedditIdAndType\npublic boolean isRead(final RedditIdAndType thing) {\r\n    synchronized (mLock) {\r", "choices": [{"text": "//        if (mReadThings.contains(thing)) {\r\n//            return true;\r\n//        }\r\n        return mReadThings.contains(thing);\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/843", "ground_truth": "        return get(thing).isRead();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\RedditChangeDataManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.kthings.RedditIdAndType\npublic boolean isSaved(final RedditIdAndType thing) {\r\n    synchronized (mLock) {\r", "choices": [{"text": "//        return mSavedThings.contains(thing);\r\n        return mSavedThings.contains(thing.getId());\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/844", "ground_truth": "        return get(thing).isSaved();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\RedditChangeDataManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.kthings.RedditIdAndType\npublic Boolean isHidden(final RedditIdAndType thing) {\r\n    synchronized (mLock) {\r", "choices": [{"text": "//        if (thing.isSelf()) {\r\n//            return false;\r\n//        }\r\n        return thing.isSelf() || thing.isHidden();\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/845", "ground_truth": "        return get(thing).isHidden();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\RedditChangeDataManager.java"}}
{"prompt": "\n import java.util.Map\nimport java.util.HashMap\nimport org.quantumbadger.redreader.reddit.kthings.RedditIdAndType\nprivate HashMap<RedditIdAndType, Entry> snapshot() {\r\n    synchronized (mLock) {\r", "choices": [{"text": "//        return new HashMap<>(mEntries);\r\n        return mEntries;\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/846", "ground_truth": "        return new HashMap<>(mEntries);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\RedditChangeDataManager.java"}}
{"prompt": "\n public int computeScore() {\r\n    int score = src.getScoreExcludingOwnVote();\r\n    if (isUpvoted()) {\r\n        score++;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/849", "ground_truth": "    } else if (isDownvoted()) {\r\n        score--;\r\n    }\r\n    return score;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\RedditPreparedPost.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.RRError\nimport org.quantumbadger.redreader.common.General\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\nimport android.util.Log\n@Override\r\npublic void onFailure(@NonNull final RRError error) {\r\n    if (General.isSensitiveDebugLoggingEnabled()) {\r", "choices": [{"text": "Log.d(General.TAG, \"onFailure: \" + error.getMessage());\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/851", "ground_truth": "        Log.e(TAG, \"Failed to download thumbnail \" + uriStr + \" with error \" + error, error.t);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\RedditPreparedPost.java"}}
{"prompt": "\n import android.graphics.Bitmap\n// These operations are ordered so as to avoid race conditions\r\npublic Bitmap getThumbnail(final ThumbnailLoadedCallback callback, final int usageId) {\r\n    this.thumbnailCallback = callback;\r", "choices": [{"text": "}\r\npublic void setThumbnail(final Bitmap bitmap, final int usageId) {\r\n    this.thumbnail = bitmap;\r\n}\r\npublic void setThumbnail(final Bitmap bitmap, final int usageId, final int width, final int height) {\r\n    this.thumbnail = bitmap;\r\n}\r\npublic void setThumbnail(final Bitmap bitmap, final int usageId, final int width, final int height, final int cropX, final int cropY) {\r\n    this.thumbnail = bitmap;\r\n}\r\npublic void setThumbnail(final Bitmap bitmap, final int usageId, final int width"}], "metadata": {"task_id": "RedReader/852", "ground_truth": "    this.usageId = usageId;\r\n    return thumbnailCache;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\RedditPreparedPost.java"}}
{"prompt": "\n import org.quantumbadger.redreader.views.RedditPostView\nimport org.quantumbadger.redreader.R\npublic void bind(final RedditPostView boundView) {\r", "choices": [{"text": "boundView.setPost(post);\r\nboundView.setPostTitle(post.getTitle());\r\nboundView.setPostAuthor(post.getAuthor());\r\nboundView.setPostScore(post.getScore());\r\nboundView.setPostUrl(post.getUrl());\r\nboundView.setPostThumbnail(post.getThumbnail());\r\nboundView.setPostDate(post.getDate());\r\nboundView.setPostComments(post.getComments());\r\nboundView.setPostCommentsUrl(post.getCommentsUrl());\r\nboundView.setPostDomain"}], "metadata": {"task_id": "RedReader/853", "ground_truth": "    mBoundView = boundView;\r\n    mChangeDataManager.addListener(src.getIdAndType(), this);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\RedditPreparedPost.java"}}
{"prompt": "\n import org.quantumbadger.redreader.views.RedditPostView\nimport org.quantumbadger.redreader.R\npublic void unbind(final RedditPostView boundView) {\r\n    if (mBoundView == boundView) {\r\n        mBoundView = null;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/854", "ground_truth": "        mChangeDataManager.removeListener(src.getIdAndType(), this);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\RedditPreparedPost.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.kthings.RedditIdAndType\nimport org.quantumbadger.redreader.R\nimport android.content.Context\n@Override\r\npublic void onRedditDataChange(final RedditIdAndType thingIdAndType) {\r\n    if (mBoundView != null) {\r\n        final Context context = mBoundView.getContext();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/855", "ground_truth": "        if (context != null) {\r\n            mBoundView.updateAppearance();\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\RedditPreparedPost.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.kthings.RedditComment\nimport org.quantumbadger.redreader.R\nprivate int computeScore(final RedditChangeDataManager changeDataManager) {\r\n    final RedditComment rawComment = mComment.getRawComment();\r\n    int score = rawComment.getUps() - rawComment.getDowns();\r\n    if (Boolean.TRUE.equals(rawComment.getLikes())) {\r\n        score--;\r\n    }\r\n    if (Boolean.FALSE.equals(rawComment.getLikes())) {\r\n        score++;\r\n    }\r\n    if (changeDataManager.isUpvoted(getIdAndType())) {\r\n        score++;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/857", "ground_truth": "    } else if (changeDataManager.isDownvoted(getIdAndType())) {\r\n        score--;\r\n    }\r\n    return score;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\prepared\\RedditRenderableComment.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.RRError\nimport androidx.annotation.NonNull\n@Override\r\npublic void onFailure(@NonNull final RRError error) {\r\n    if (error.httpStatus != null && error.httpStatus == 404) {\r\n        responseHandler.onSubredditDoesNotExist();\r\n    } else if (error.httpStatus != null && error.httpStatus == 403) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/862", "ground_truth": "        responseHandler.onSubredditPermissionDenied();\r\n    } else {\r\n        responseHandler.onFailure(error);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\RedditAPI.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.Optional\nimport androidx.annotation.NonNull\n@Override\r\npublic void onSuccess(@NonNull final Optional<String> redirectUrl, @NonNull final Optional<String> thingId) {\r\n    if (!sendRepliesToInbox) {\r\n        thingId.ifPresent(commentFullname -> sendReplies(cm, inboxResponseHandler, user, commentFullname, false, context));\r", "choices": [{"text": "} else {\r\n        thingId.ifPresent(commentFullname -> sendReplies(cm, inboxResponseHandler, user, commentFullname, true, context));\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/864", "ground_truth": "    }\r\n    responseHandler.onSuccess(redirectUrl, thingId);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\RedditAPI.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.prepared.RedditRenderableComment\npublic RedditRenderableComment asComment() {\r\n    if (!isComment()) {\r\n        throw new RuntimeException(\"Called asComment() on non-comment item\");\r", "choices": [{"text": "}\r\nreturn this;\r\n}\n"}], "metadata": {"task_id": "RedReader/872", "ground_truth": "    }\r\n    return mComment;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\RedditCommentListItem.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.kthings.RedditMore\npublic RedditMore asLoadMore() {\r\n    if (!isLoadMore()) {\r\n        throw new RuntimeException(\"Called asLoadMore() on non-load-more item\");\r", "choices": [{"text": "}\r\nreturn this;\r\n}\r\n"}], "metadata": {"task_id": "RedReader/873", "ground_truth": "    }\r\n    return mMoreComments;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\RedditCommentListItem.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.prepared.RedditChangeDataManager\npublic boolean isCollapsed(final RedditChangeDataManager changeDataManager) {\r\n    if (!isComment()) {\r\n        return false;\r", "choices": [{"text": "}\r\nfinal RedditComment comment = (RedditComment) changeDataManager.getChangeData();\r\nreturn comment.isCollapsed();\r\n}\n"}], "metadata": {"task_id": "RedReader/874", "ground_truth": "    }\r\n    return mComment.isCollapsed(changeDataManager);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\RedditCommentListItem.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.prepared.RedditChangeDataManager\npublic boolean isHidden(final RedditChangeDataManager changeDataManager) {\r\n    if (mParent != null) {\r\n        return mParent.isCollapsed(changeDataManager) || mParent.isHidden(changeDataManager);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/875", "ground_truth": "    }\r\n    return false;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\RedditCommentListItem.java"}}
{"prompt": "\n import org.quantumbadger.redreader.views.RedditCommentView\nimport org.quantumbadger.redreader.views.LoadMoreCommentsView\nimport org.quantumbadger.redreader.common.RRThemeAttributes\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\nimport android.view.View\nimport android.content.Context\n@Override\r\npublic RecyclerView.ViewHolder onCreateViewHolder(final ViewGroup viewGroup) {\r\n    final Context context = viewGroup.getContext();\r\n    final View view;\r\n    if (isComment()) {\r\n        view = new RedditCommentView(mActivity, new RRThemeAttributes(context), mFragment, mFragment);\r\n    } else if (isLoadMore()) {\r\n        view = new LoadMoreCommentsView(context, mCommentListingUrl);\r\n    } else {\r", "choices": [{"text": "throw new IllegalStateException(\"Unknown view type\");\r\n    }\r\n    return new RecyclerView.ViewHolder(view) {\r\n        public View getView() {\r\n            return view;\r\n        }\r\n    };\r\n}\r\n@Override\r\npublic void onBindViewHolder(final RecyclerView.ViewHolder viewHolder, final int position) {\r\n    final View view = viewHolder.getView();\r\n    if (isComment()) {\r\n        final RedditCommentView redditCommentView = (RedditCommentView) view;\r\n        redditCommentView.bind(mComments.get(position));\r\n    } else if (isLoadMore()) {\r\n        final LoadMore"}], "metadata": {"task_id": "RedReader/877", "ground_truth": "        throw new RuntimeException(\"Unknown item type\");\r\n    }\r\n    return new RecyclerView.ViewHolder(view) {\r\n    };\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\RedditCommentListItem.java"}}
{"prompt": "\n import java.util.List\nimport java.util.ArrayList\nimport org.quantumbadger.redreader.jsonwrap.JsonValue\nimport org.quantumbadger.redreader.jsonwrap.JsonObject\nimport org.quantumbadger.redreader.jsonwrap.JsonArray\nimport org.quantumbadger.redreader.common.Optional\nimport androidx.annotation.NonNull\n@NonNull\r\npublic static Optional<List<RedditFlairChoice>> fromJsonList(@NonNull final JsonArray json) {\r\n    final ArrayList<RedditFlairChoice> result = new ArrayList<>(json.size());\r\n    for (final JsonValue value : json) {\r\n        final JsonObject object = value.asObject();\r\n        if (object == null) {\r\n            return Optional.empty();\r\n        }\r\n        final Optional<RedditFlairChoice> choice = fromJson(object);\r\n        if (choice.isEmpty()) {\r\n            return Optional.empty();\r", "choices": [{"text": "       }\r\n        result.add(choice.get());\r\n    }\r\n    return Optional.of(result);\r}\r\r@NonNull\rpublic static Optional<RedditFlairChoice> fromJson(@NonNull final JsonObject json) {\r\n    final Optional<String> name = json.getString(\"name\");\r\n    if (name.isEmpty()) {\r\n        return Optional.empty();\r\n    }\r\n    final Optional<String> text = json.getString(\"text\");\r\n    if (text.isEmpty()) {\r\n        return Optional.empty();\r\n    }\r\n    final Optional<String> cssClass = json.getString(\"css_class\");\r\n    if (css"}], "metadata": {"task_id": "RedReader/879", "ground_truth": "        }\r\n        result.add(choice.get());\r\n    }\r\n    return Optional.of(result);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\RedditFlairChoice.java"}}
{"prompt": "\n import android.os.Parcel\n@Override\r\npublic void writeToParcel(final Parcel dest, final int flags) {\r", "choices": [{"text": "dest.writeString(this.name);\r\ndest.writeString(this.email);\r\ndest.writeString(this.password);\r\ndest.writeString(this.phone);\r\ndest.writeString(this.address);\r\ndest.writeString(this.city);\r\ndest.writeString(this.state);\r\ndest.writeString(this.country);\r\ndest.writeString(this.zip);\r\ndest.writeString(this.gender);\r\ndest.writeString(this.dob);\r\ndest.writeString(this.image);\r\ndest.writeString(this.user"}], "metadata": {"task_id": "RedReader/881", "ground_truth": "    dest.writeString(text);\r\n    dest.writeString(templateId);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\RedditFlairChoice.java"}}
{"prompt": "\n import android.os.Parcel\n@Override\r\npublic RedditFlairChoice createFromParcel(final Parcel in) {\r\n    final String text = in.readString();\r", "choices": [{"text": "final String cssClass = in.readString();\r\nfinal String cssClass2 = in.readString();\r\nfinal String cssClass3 = in.readString();\r\nfinal String cssClass4 = in.readString();\r\nfinal String cssClass5 = in.readString();\r\nfinal String cssClass6 = in.readString();\r\nfinal String cssClass7 = in.readString();\r\nfinal String cssClass8 = in.readString();\r\nfinal String cssClass9 = in.readString();\r\nfinal String cssClass10 = in.readString();\r\nfinal String cssClass11 ="}], "metadata": {"task_id": "RedReader/882", "ground_truth": "    final String templateId = in.readString();\r\n    return new RedditFlairChoice(text, templateId);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\RedditFlairChoice.java"}}
{"prompt": "\n import org.quantumbadger.redreader.views.RedditPostView\nimport androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\n@Override\r\npublic RecyclerView.ViewHolder onCreateViewHolder(final ViewGroup viewGroup) {\r\n    final RedditPostView view = new RedditPostView(mActivity, mFragment, mActivity, mLeftHandedMode);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/884", "ground_truth": "    return new RecyclerView.ViewHolder(view) {\r\n    };\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\RedditPostListItem.java"}}
{"prompt": "\n import java.util.ArrayList\nimport org.quantumbadger.redreader.reddit.things.SubredditCanonicalId\nimport org.quantumbadger.redreader.account.RedditAccount\npublic static synchronized ArrayList<SubredditCanonicalId> getSubredditsSorted(final RedditAccount account) {\r\n    final ArrayList<SubredditCanonicalId> result = new ArrayList<>(getForAccount(account));\r", "choices": [{"text": "result.sort(new Comparator<SubredditCanonicalId>() {\r\n@Override\r\npublic int compare(final SubredditCanonicalId o1, final SubredditCanonicalId o2) {\r\nreturn o1.getName().compareTo(o2.getName());\r\n}\r\n});\r\nreturn result;\r\n}\r\n}\r\n<file_sep>/src/main/java/org/quantumbadger/redreader/reddit/things/SubredditCanonicalId.java\npackage org.quantumbadger.redreader.reddit.things;\r\nimport java.util.Objects;\r"}], "metadata": {"task_id": "RedReader/886", "ground_truth": "    Collections.sort(result);\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\RedditSubredditHistory.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.things.RedditSubreddit\nimport org.quantumbadger.redreader.account.RedditAccount\nimport android.content.Context\npublic static synchronized RedditSubredditManager getInstance(final Context context, final RedditAccount user) {\r\n    if (singleton == null || !user.equals(singletonUser)) {\r", "choices": [{"text": "\n import org.quantumbadger.redreader.reddit.things.RedditSubreddit\nimport org.quantumbadger.redreader.account.RedditAccount\nimport android.content.Context\npublic static synchronized RedditSubredditManager getInstance(final Context context, final RedditAccount user) {\r\n    if (singleton == null ||!user.equals(singletonUser)) {\r\n"}], "metadata": {"task_id": "RedReader/887", "ground_truth": "        singletonUser = user;\r\n        singleton = new RedditSubredditManager(context, user);\r\n    }\r\n    return singleton;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\RedditSubredditManager.java"}}
{"prompt": "\n import java.util.regex.Matcher\nimport org.quantumbadger.redreader.R\npublic static String stripRPrefix(final String name) throws InvalidSubredditNameException {\r\n    final Matcher matcher = NAME_PATTERN.matcher(name);\r\n    if (matcher.matches()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/891", "ground_truth": "        return matcher.group(3);\r\n    } else {\r\n        throw new InvalidSubredditNameException(name);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\things\\RedditSubreddit.java"}}
{"prompt": "\n import java.util.regex.Matcher\nimport org.quantumbadger.redreader.R\npublic static String stripUserPrefix(final String name) {\r\n    final Matcher matcher = USER_PATTERN.matcher(name);\r\n    if (matcher.matches()) {\r", "choices": [{"text": "return matcher.group(1);\r\n    }\r\n    return name;\r\n}\n"}], "metadata": {"task_id": "RedReader/892", "ground_truth": "        return matcher.group(2);\r\n    } else {\r\n        return null;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\things\\RedditSubreddit.java"}}
{"prompt": "\n public String getUrl() {\r\n    if (url != null) {\r\n        return url;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/893", "ground_truth": "    }\r\n    return \"https://reddit.com/r/\" + display_name;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\things\\RedditSubreddit.java"}}
{"prompt": "\n import androidx.annotation.Nullable\n@Nullable\r\npublic String getIconUrl() {\r\n    if (icon_img == null) {\r", "choices": [{"text": "//        icon_img = new ImageView(this);\r\n        icon_img = new ImageView(this);\r\n        icon_img.setScaleType(ImageView.ScaleType.CENTER_CROP);\r\n        icon_img.setAdjustViewBounds(true);\r\n        icon_img.setPadding(0, 0, 0, 0);\r\n        icon_img.setBackgroundColor(Color.TRANSPARENT);\r\n        icon_img.setScaleType(ImageView.ScaleType.CENTER_CROP);\r\n        icon_img.setAdjustViewBounds(true);\r\n        icon_img.setPadding(0, 0"}], "metadata": {"task_id": "RedReader/896", "ground_truth": "        return null;\r\n    } else {\r\n        return StringEscapeUtils.unescapeHtml4(icon_img);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\things\\RedditUser.java"}}
{"prompt": "\n public String getDisplayNameLowercase() {\r\n    if (mId.startsWith(\"/user/\")) {\r\n        return mId;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/898", "ground_truth": "    }\r\n    return mId.substring(3);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\things\\SubredditCanonicalId.java"}}
{"prompt": "\n import android.content.Context\n@Override\r\npublic String humanReadableName(final Context context, final boolean shorter) {\r\n    if (username == null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/902", "ground_truth": "        return name;\r\n    } else {\r\n        return String.format(Locale.US, \"%s (%s)\", name, username);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\url\\MultiredditPostListURL.java"}}
{"prompt": "\n import java.util.List\npublic PostCommentListingURL commentId(String commentId) {\r\n    if (commentId != null && commentId.startsWith(\"t1_\")) {\r\n        commentId = commentId.substring(3);\r", "choices": [{"text": "\n import java.util.List\npublic PostCommentListingURL commentId(String commentId) {\r\n    if (commentId!= null && commentId.startsWith(\"t1_\")) {\r\n        commentId = commentId.substring(3);\r\n}\r\n    return new PostCommentListingURL(commentId);\r\n}\n"}], "metadata": {"task_id": "RedReader/903", "ground_truth": "    }\r\n    return new PostCommentListingURL(after, postId, commentId, context, limit, order, video);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\url\\PostCommentListingURL.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.Constants\nimport android.net.Uri\npublic Uri generateNonJsonUri() {\r\n    final Uri.Builder builder = new Uri.Builder();\r\n    builder.scheme(Constants.Reddit.getScheme()).authority(Constants.Reddit.getHumanReadableDomain());\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "RedReader/905", "ground_truth": "    internalGenerateCommon(builder);\r\n    return builder.build();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\url\\PostCommentListingURL.java"}}
{"prompt": "\n import android.net.Uri\npublic static RedditURL parseProbableCommentListing(final Uri uri) {\r\n    final RedditURL matchURL = parse(uri);\r", "choices": [{"text": ""}], "metadata": {"task_id": "RedReader/906", "ground_truth": "    if (matchURL != null) {\r\n        return matchURL;\r\n    }\r\n    return new UnknownCommentListURL(uri);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\url\\RedditURLParser.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.net.Uri\n@NonNull\r\npublic static RedditURL parseProbablePostListing(final Uri uri) {\r\n    final RedditURL matchURL = parse(uri);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/907", "ground_truth": "    if (matchURL != null) {\r\n        return matchURL;\r\n    }\r\n    return new UnknownPostListURL(uri);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\url\\RedditURLParser.java"}}
{"prompt": "\n import android.net.Uri\npublic String humanReadablePath() {\r\n    final Uri src = generateJsonUri();\r\n    final StringBuilder builder = new StringBuilder();\r\n    for (final String pathElement : src.getPathSegments()) {\r\n        if (!pathElement.equals(\".json\")) {\r\n            builder.append(\"/\");\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/908", "ground_truth": "            builder.append(pathElement);\r\n        }\r\n    }\r\n    return builder.toString();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\url\\RedditURLParser.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\n@Override\r\npublic String humanReadablePath() {\r\n    final StringBuilder builder = new StringBuilder(super.humanReadablePath());\r", "choices": [{"text": "//    builder.append(\" (\");\r\n//    builder.append(this.getDisplayName());\r\n//    builder.append(\")\");\r\n    return builder.toString();\r\n}\r\n"}], "metadata": {"task_id": "RedReader/912", "ground_truth": "    if (query != null) {\r\n        builder.append(\"?q=\").append(query);\r\n    }\r\n    return builder.toString();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\url\\SearchPostListURL.java"}}
{"prompt": "\n import android.net.Uri\n// TODO handle this better\r\n@Override\r\npublic Uri generateJsonUri() {\r\n    if (uri.getPath().endsWith(\".json\")) {\r", "choices": [{"text": "// TODO handle this better\r\n        return uri;\r\n    } else {\r\n        return Uri.parse(uri.toString() + \".json\");\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/913", "ground_truth": "        return uri;\r\n    } else {\r\n        return uri.buildUpon().appendEncodedPath(\".json\").build();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\url\\UnknownCommentListURL.java"}}
{"prompt": "\n import android.net.Uri\n// TODO handle this better\r\n@Override\r\npublic Uri generateJsonUri() {\r\n    if (uri.getPath().endsWith(\".json\")) {\r", "choices": [{"text": "// TODO handle this better\r\n        return uri;\r\n    } else {\r\n        return Uri.parse(uri.toString() + \".json\");\r\n    }\r\n}\n"}], "metadata": {"task_id": "RedReader/914", "ground_truth": "        return uri;\r\n    } else {\r\n        return uri.buildUpon().appendEncodedPath(\".json\").build();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\url\\UnknownPostListURL.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport android.content.Context\n@Override\r\npublic String humanReadableName(final Context context, final boolean shorter) {\r\n    final String name = context.getString(R.string.user_comments);\r\n    if (shorter) {\r", "choices": [{"text": "return name.substring(0, 1);\r\n    }\r\n    return name;\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/915", "ground_truth": "        return name;\r\n    } else {\r\n        return String.format(\"%s (%s)\", name, user);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\reddit\\url\\UserCommentListingURL.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/918", "ground_truth": "    final FragmentActivity activity = getActivity();\r\n    if (activity != null) {\r\n        activity.setTitle(mTitle);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\settings\\SettingsFragment.java"}}
{"prompt": "\n import androidx.preference.PreferenceScreen\nimport androidx.preference.Preference\n//Based on https://stackoverflow.com/a/55724743\r\n@Override\r\npublic void setPreferenceScreen(final PreferenceScreen preferenceScreen) {\r\n    if (preferenceScreen != null) {\r\n        configureAllPrefsAppearance(preferenceScreen);\r", "choices": [{"text": "\n import androidx.preference.PreferenceScreen\nimport androidx.preference.Preference\n//Based on https://stackoverflow.com/a/55724743\r\n@Override\r\npublic void setPreferenceScreen(final PreferenceScreen preferenceScreen) {\r\n    if (preferenceScreen!= null) {\r\n        configureAllPrefsAppearance(preferenceScreen);\r\n}\r\n}\r\nprivate void configureAllPrefsAppearance(final PreferenceScreen preferenceScreen) {\r\n    for (int i = 0; i < preferenceScreen.getPreferenceCount(); i++) {\r\n        final Preference preference = preferenceScreen.getPreference(i);\r\n        if (preference instanceof PreferenceScreen) {\r\n            configureAllPrefsAppearance((PreferenceScreen) preference);\r\n        } else {\r\n            configurePreferenceAppearance(preference);\r\n        }\r\n    }\r\n}\r\nprivate void configurePreferenceAppearance(final Preference preference) {\r\n    if (preference instanceof PreferenceCategory) {\r\n        preference.setWidgetLayoutResource(R.layout.preference"}], "metadata": {"task_id": "RedReader/919", "ground_truth": "    }\r\n    super.setPreferenceScreen(preferenceScreen);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\settings\\SettingsFragment.java"}}
{"prompt": "\n import java.util.Objects\n@Override\r\npublic void run() {\r\n    cacheManager.pruneCache(cachesToClear.get(CacheType.LISTINGS), cachesToClear.get(CacheType.THUMBNAILS), cachesToClear.get(CacheType.IMAGES));\r\n    if (Objects.requireNonNull(cachesToClear.get(CacheType.FLAGS))) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/921", "ground_truth": "        RedditChangeDataManager.pruneAllUsersWhereOlderThan(TimeDuration.ms(0));\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\settings\\SettingsFragment.java"}}
{"prompt": "\n import androidx.core.view.ViewCompat\nimport androidx.annotation.StringRes\nimport android.view.View\nfun addAction(@StringRes label: Int, action: Runnable) {\r\n\t\texistingActions.add(ViewCompat.addAccessibilityAction(\r\n\t\t\tview,\r\n\t\t\tresources.getString(label)\r", "choices": [{"text": ",\r\n\t\t\tRunnable {\r\n\t\t\t\taction.run()\r\n\t\t\t}\r\n\t\t))\r\n\t}\r\n}<file_sep>/app/src/main/java/com/example/android/sunshine/app/MainActivity.kt\npackage com.example.android.sunshine.app\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.Menu\nimport android.view.MenuItem\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.appcompat.widget.Toolbar\nimport androidx.drawerlayout.widget.DrawerLayout\nimport androidx.navigation.NavController"}], "metadata": {"task_id": "RedReader/923", "ground_truth": "\t\t) { _, _ ->\r\n\t\t\taction.run()\r\n\t\t\ttrue\r\n\t\t})\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\AccessibilityActionManager.kt"}}
{"prompt": "\n import androidx.core.view.ViewCompat\nimport android.view.View\nfun removeAllActions() {\r\n\t\texistingActions.forEach {\r\n\t\t\tViewCompat.removeAccessibilityAction(view, it)\r", "choices": [{"text": "}\r\n}\r\nfun addAction(action: Int) {\r\n\t\tViewCompat.addAccessibilityAction(view, action)\r\n}\r\nfun addAction(action: Int, listener: AccessibilityDelegateCompat.AccessibilityAction?) {\r\n\t\tViewCompat.addAccessibilityAction(view, action, listener)\r\n}\r\nfun addAction(action: Int, listener: AccessibilityDelegateCompat.AccessibilityAction?) {\r\n\t\tViewCompat.addAccessibilityAction(view, action, listener)\r\n}\r\nfun addAction(action: Int, listener: AccessibilityDelegateCompat.AccessibilityAction?) {"}], "metadata": {"task_id": "RedReader/924", "ground_truth": "\t\t}\r\n\t\texistingActions.clear()\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\AccessibilityActionManager.kt"}}
{"prompt": "\n import androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat\nimport androidx.core.view.ViewCompat\nimport androidx.annotation.StringRes\nimport android.view.View\nprivate fun relabelAction(action: AccessibilityActionCompat, @StringRes label: Int?) {\r\n\r\n\t\tif (label == null) {\r\n\t\t\tViewCompat.replaceAccessibilityAction(\r\n\t\t\t\tview,\r\n\t\t\t\taction,\r\n\t\t\t\tnull,\r\n\t\t\t\tnull\r\n\t\t\t)\r\n\t\t} else {\r\n\t\t\tViewCompat.replaceAccessibilityAction(\r\n\t\t\t\tview,\r\n\t\t\t\taction,\r\n\t\t\t\tresources.getString(label),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/925", "ground_truth": "\t\t\t\tnull\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\AccessibilityActionManager.kt"}}
{"prompt": "\n import android.view.View\nimport android.view.MotionEvent\nimport android.annotation.SuppressLint\n@SuppressLint(\"ClickableViewAccessibility\")\r\n@Override\r\npublic boolean onTouchEvent(final MotionEvent event) {\r\n    final int action = event.getAction() & MotionEvent.ACTION_MASK;\r\n    if (action == MotionEvent.ACTION_DOWN) {\r\n        if (event.getX() < mSwipeZonePixels) {\r\n            return listener.onSwipe(LEFT);\r\n        } else if (event.getX() > getWidth() - mSwipeZonePixels) {\r\n            return listener.onSwipe(RIGHT);\r\n        } else {\r", "choices": [{"text": "//            return super.onTouchEvent(event);\r\n            return false;\r\n        }\r\n    }\r\n    return super.onTouchEvent(event);\r\n}\n"}], "metadata": {"task_id": "RedReader/926", "ground_truth": "            return listener.onTap();\r\n        }\r\n    }\r\n    return false;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\bezelmenu\\BezelSwipeOverlay.java"}}
{"prompt": "\n import android.view.View\npublic void setContents(final View contents) {\r\n    this.contents = contents;\r\n    if (shownPosition != null) {\r", "choices": [{"text": "\n import android.view.View\npublic void setContents(final View contents) {\r\n    this.contents = contents;\r\n    if (shownPosition!= null) {\r\n//        contents.setVisibility(shownPosition.equals(position)? View.VISIBLE : View.GONE);\r\n        contents.setVisibility(shownPosition.equals(position)? View.VISIBLE : View.GONE);\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/927", "ground_truth": "        show(shownPosition);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\bezelmenu\\SideToolbarOverlay.java"}}
{"prompt": "\n public void hide() {\r", "choices": [{"text": "//     this.setVisible(false);\r\n// }\r\n public void show() {\r\n     this.setVisible(true);\r\n }\r\n public void setVisible(boolean visible) {\r\n     super.setVisible(visible);\r\n }\r\n}\r\n<file_sep>/src/main/java/com/example/demo/controller/UserController.java\npackage com.example.demo.controller;\r\n\r\nimport java.util.List;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web."}], "metadata": {"task_id": "RedReader/929", "ground_truth": "    shownPosition = null;\r\n    removeAllViews();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\bezelmenu\\SideToolbarOverlay.java"}}
{"prompt": "\n public void setFlingingEnabled(final boolean flingingEnabled) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/930", "ground_truth": "    mFlingHintOuter.setVisibility(flingingEnabled ? VISIBLE : GONE);\r\n    setSwipingEnabled(flingingEnabled);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\FlingableItemView.java"}}
{"prompt": "\n @Override\r\nprotected void onUpdatedPosition(final float position) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.onUpdatedPosition(position);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/931", "ground_truth": "    mFlingHintYPos = position;\r\n    updateFlingHintPosition();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\FlingableItemView.java"}}
{"prompt": "\n @Override\r\nprotected void onEndPosition(final float endPosition) {\r\n    mFlingHintYPos = endPosition;\r", "choices": [{"text": "}\r\n\r\n@Override\r\nprotected void onEndPosition(final float endPosition, final float velocity) {\r\n    mFlingHintYPos = endPosition;\r\n}\r\n\r\n@Override\r\nprotected void onEndPosition(final float endPosition, final float velocity, final boolean isOverScroll) {\r\n    mFlingHintYPos = endPosition;\r\n}\r\n\r\n@Override\r\nprotected void onEndPosition(final float endPosition, final float velocity, final boolean isOverScroll, final boolean isTouchEvent) {\r\n    mFlingHintYPos = endPosition;\r\n}"}], "metadata": {"task_id": "RedReader/932", "ground_truth": "    updateFlingHintPosition();\r\n    mFlingHintAnimation = null;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\FlingableItemView.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.graphics.Movie\npublic static Movie prepareMovie(@NonNull final byte[] data, final int offset, final int length) {\r\n    final Movie movie = Movie.decodeByteArray(data, offset, length);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "RedReader/933", "ground_truth": "    if (movie.duration() < 1) {\r\n        throw new RuntimeException(\"Invalid GIF\");\r\n    }\r\n    return movie;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\GIFView.java"}}
{"prompt": "\n import org.quantumbadger.redreader.views.glview.program.RRGLMatrixStack\npublic final void startRender(final RRGLMatrixStack stack, final long time) {\r\n    if (mVisible) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/936", "ground_truth": "        renderInternal(stack, time);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\displaylist\\RRGLRenderable.java"}}
{"prompt": "\n import org.quantumbadger.redreader.views.glview.program.RRGLMatrixStack\n@Override\r\nprotected void preRender(final RRGLMatrixStack stack, final long time) {\r", "choices": [{"text": "super.preRender(stack, time);\r\nstack.push();\r\nstack.translate(0.0f, 0.0f, -1.0f);\r\nstack.scale(1.0f, 1.0f, 1.0f);\r\nstack.rotate(0.0f, 0.0f, 0.0f, 1.0f);\r\n}\r\n@Override\r\nprotected void postRender(final RRGLMatrixStack stack, final long time) {\r\nstack.pop();\r\nsuper.post"}], "metadata": {"task_id": "RedReader/937", "ground_truth": "    GLES20.glEnable(GLES20.GL_BLEND);\r\n    GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA, GLES20.GL_ONE_MINUS_SRC_ALPHA);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\displaylist\\RRGLRenderableBlend.java"}}
{"prompt": "\n public void setColour(final float r, final float g, final float b, final float a) {\r\n    mRed = r;\r\n    mGreen = g;\r", "choices": [{"text": "mBlue = b;\r\n    mAlpha = a;\r\n  }\r\n\r\n  public void setColour(final float[] colour) {\r\n    mRed = colour[0];\r\n    mGreen = colour[1];\r\n    mBlue = colour[2];\r\n    mAlpha = colour[3];\r\n  }\r\n\r\n  public void setColour(final int colour) {\r\n    mRed = ((colour >> 16) & 0xFF) / 255.0f;\r\n    mGreen = ((colour >> 8) & 0xFF) / 255.0f;\r\n    mBlue = (colour & "}], "metadata": {"task_id": "RedReader/938", "ground_truth": "    mBlue = b;\r\n    mAlpha = a;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\displaylist\\RRGLRenderableColouredQuad.java"}}
{"prompt": "\n public final void add(final RRGLRenderable child) {\r\n    mChildren.add(child);\r\n    if (isAdded()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/940", "ground_truth": "        child.onAdded();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\displaylist\\RRGLRenderableGroup.java"}}
{"prompt": "\n public final void remove(final RRGLRenderable child) {\r\n    if (isAdded()) {\r\n        child.onRemoved();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/941", "ground_truth": "    }\r\n    mChildren.remove(child);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\displaylist\\RRGLRenderableGroup.java"}}
{"prompt": "\n @Override\r\npublic void onAdded() {\r\n    if (!isAdded()) {\r\n        for (final RRGLRenderable entity : mChildren) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/942", "ground_truth": "            entity.onAdded();\r\n        }\r\n    }\r\n    super.onAdded();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\displaylist\\RRGLRenderableGroup.java"}}
{"prompt": "\n import org.quantumbadger.redreader.views.glview.program.RRGLMatrixStack\n@Override\r\nprotected void renderInternal(final RRGLMatrixStack matrixStack, final long time) {\r\n    for (int i = 0; i < mChildren.size(); i++) {\r\n        final RRGLRenderable entity = mChildren.get(i);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/943", "ground_truth": "        entity.startRender(matrixStack, time);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\displaylist\\RRGLRenderableGroup.java"}}
{"prompt": "\n @Override\r\npublic void onRemoved() {\r\n    super.onRemoved();\r\n    if (!isAdded()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/944", "ground_truth": "        for (final RRGLRenderable entity : mChildren) {\r\n            entity.onRemoved();\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\displaylist\\RRGLRenderableGroup.java"}}
{"prompt": "\n @Override\r\npublic boolean isAnimating() {\r\n    for (int i = 0; i < mChildren.size(); i++) {\r\n        final RRGLRenderable entity = mChildren.get(i);\r\n        if (entity.isAnimating()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/945", "ground_truth": "            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\displaylist\\RRGLRenderableGroup.java"}}
{"prompt": "\n @Override\r\npublic void setOverallAlpha(final float alpha) {\r\n    for (int i = 0; i < mChildren.size(); i++) {\r\n        final RRGLRenderable entity = mChildren.get(i);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/946", "ground_truth": "        entity.setOverallAlpha(alpha);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\displaylist\\RRGLRenderableGroup.java"}}
{"prompt": "\n import org.quantumbadger.redreader.views.glview.program.RRGLMatrixStack\n@Override\r\nprotected void renderInternal(final RRGLMatrixStack stack, final long time) {\r\n    preRender(stack, time);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/947", "ground_truth": "    mEntity.startRender(stack, time);\r\n    postRender(stack, time);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\displaylist\\RRGLRenderableRenderHooks.java"}}
{"prompt": "\n @Override\r\npublic void onAdded() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.onAdded();\r\n}\r\n\r\n@Override\r\npublic void onRemoved() {\r\n// TODO Auto-generated method stub\r\nsuper.onRemoved();\r\n}\r\n\r\n@Override\r\npublic void onReplaced() {\r\n// TODO Auto-generated method stub\r\nsuper.onReplaced();\r\n}\r\n\r\n@Override\r\npublic void onMoved() {\r\n// TODO Auto-generated method stub\r\nsuper.onMoved();\r\n}\r\n\r\n@Override\r\npublic void onDetached() {\r\n//"}], "metadata": {"task_id": "RedReader/948", "ground_truth": "    mEntity.onAdded();\r\n    super.onAdded();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\displaylist\\RRGLRenderableRenderHooks.java"}}
{"prompt": "\n @Override\r\npublic void onRemoved() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.onRemoved();\r\n}\r\n\r\n@Override\r\npublic void onReplaced() {\r\n// TODO Auto-generated method stub\r\nsuper.onReplaced();\r\n}\r\n\r\n@Override\r\npublic void onSaveInstanceState(Bundle outState) {\r\n// TODO Auto-generated method stub\r\nsuper.onSaveInstanceState(outState);\r\n}\r\n\r\n@Override\r\npublic void onStart() {\r\n// TODO Auto-generated method stub\r\nsuper.onStart();\r\n}\r\n\r\n@Override\r\npublic void"}], "metadata": {"task_id": "RedReader/949", "ground_truth": "    super.onRemoved();\r\n    mEntity.onRemoved();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\displaylist\\RRGLRenderableRenderHooks.java"}}
{"prompt": "\n public void setScale(final float x, final float y) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/950", "ground_truth": "    mScaleX = x;\r\n    mScaleY = y;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\displaylist\\RRGLRenderableScale.java"}}
{"prompt": "\n import org.quantumbadger.redreader.views.glview.program.RRGLTexture\npublic void setTexture(final RRGLTexture newTexture) {\r\n    if (isAdded()) {\r\n        mTexture.releaseReference();\r\n    }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/951", "ground_truth": "    mTexture = newTexture;\r\n    if (isAdded()) {\r\n        mTexture.addReference();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\displaylist\\RRGLRenderableTexturedQuad.java"}}
{"prompt": "\n @Override\r\npublic void onAdded() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.onAdded();\r\n}\r\n\r\n@Override\r\npublic void onRemoved() {\r\n// TODO Auto-generated method stub\r\nsuper.onRemoved();\r\n}\r\n\r\n@Override\r\npublic void onReplaced() {\r\n// TODO Auto-generated method stub\r\nsuper.onReplaced();\r\n}\r\n\r\n@Override\r\npublic void onMoved() {\r\n// TODO Auto-generated method stub\r\nsuper.onMoved();\r\n}\r\n\r\n@Override\r\npublic void onDetached() {\r\n//"}], "metadata": {"task_id": "RedReader/952", "ground_truth": "    super.onAdded();\r\n    mTexture.addReference();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\displaylist\\RRGLRenderableTexturedQuad.java"}}
{"prompt": "\n @Override\r\npublic void onRemoved() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.onRemoved();\r\n}\r\n\r\n@Override\r\npublic void onReplaced() {\r\n// TODO Auto-generated method stub\r\nsuper.onReplaced();\r\n}\r\n\r\n@Override\r\npublic void onSaveInstanceState(Bundle outState) {\r\n// TODO Auto-generated method stub\r\nsuper.onSaveInstanceState(outState);\r\n}\r\n\r\n@Override\r\npublic void onStart() {\r\n// TODO Auto-generated method stub\r\nsuper.onStart();\r\n}\r\n\r\n@Override\r\npublic void"}], "metadata": {"task_id": "RedReader/953", "ground_truth": "    mTexture.releaseReference();\r\n    super.onRemoved();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\displaylist\\RRGLRenderableTexturedQuad.java"}}
{"prompt": "\n public void setPosition(final float x, final float y) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/955", "ground_truth": "    mPositionX = x;\r\n    mPositionY = y;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\displaylist\\RRGLRenderableTranslation.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.MutableFloatPoint2D\npublic void setPosition(final MutableFloatPoint2D mPositionOffset) {\r", "choices": [{"text": ""}], "metadata": {"task_id": "RedReader/956", "ground_truth": "    mPositionX = mPositionOffset.x;\r\n    mPositionY = mPositionOffset.y;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\displaylist\\RRGLRenderableTranslation.java"}}
{"prompt": "\n public void activateProgramColour() {\r\n    if (mProgramCurrent != mProgramColour) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/957", "ground_truth": "        activateProgram(mProgramColour);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\program\\RRGLContext.java"}}
{"prompt": "\n public void activateProgramTexture() {\r\n    if (mProgramCurrent != mProgramTexture) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/958", "ground_truth": "        activateProgram(mProgramTexture);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\program\\RRGLContext.java"}}
{"prompt": "\n public int pop() {\r", "choices": [{"text": "//     if(isEmpty())\r\n//         throw new EmptyStackException();\r\n//     int item = stack[top--];\r\n//     return item;\r\n// }\r\n// public boolean isEmpty() {\r\n//     return top == -1;\r\n// }\r\n// public boolean isFull() {\r\n//     return top == stack.length - 1;\r\n// }\r\n// public int size() {\r\n//     return top + 1;\r\n// }\r\n// public void display() {\r\n//     for(int i ="}], "metadata": {"task_id": "RedReader/963", "ground_truth": "    mTopMatrixPos -= 16;\r\n    return mTopMatrixPos;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\program\\RRGLMatrixStack.java"}}
{"prompt": "\n @Override\r\npublic void onActivated() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.onActivated();\r\n}\r\n\r\n@Override\r\npublic void onDeactivated() {\r\n// TODO Auto-generated method stub\r\nsuper.onDeactivated();\r\n}\r\n\r\n@Override\r\npublic void onDeactivated(Component component) {\r\n// TODO Auto-generated method stub\r\nsuper.onDeactivated(component);\r\n}\r\n\r\n@Override\r\npublic void onDeactivated(Component component, boolean b) {\r\n// TODO Auto-generated method stub\r\nsuper.onDeactivated(component, b"}], "metadata": {"task_id": "RedReader/964", "ground_truth": "    super.onActivated();\r\n    GLES20.glEnableVertexAttribArray(mColorHandle);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\program\\RRGLProgramColour.java"}}
{"prompt": "\n @Override\r\npublic void onDeactivated() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.onDeactivated();\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r"}], "metadata": {"task_id": "RedReader/965", "ground_truth": "    super.onDeactivated();\r\n    GLES20.glDisableVertexAttribArray(mColorHandle);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\program\\RRGLProgramColour.java"}}
{"prompt": "\n public void activateTextureByHandle(final int textureHandle) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/966", "ground_truth": "    GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureHandle);\r\n    GLES20.glUniform1i(mTextureUniformHandle, 0);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\program\\RRGLProgramTexture.java"}}
{"prompt": "\n @Override\r\npublic void onActivated() {\r\n    super.onActivated();\r", "choices": [{"text": "}\r\n\r\n@Override\r\npublic void onDeactivated() {\r\n    super.onDeactivated();\r\n}\r\n\r\n@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n}\r\n\r\n@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n}\r\n\r\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n}\r\n\r\n@Override\r\npublic void onSaveInstanceState(Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r\n}\r\n\r\n@Override\r\npublic void onStop"}], "metadata": {"task_id": "RedReader/967", "ground_truth": "    GLES20.glEnableVertexAttribArray(mUVDataHandle);\r\n    GLES20.glActiveTexture(GLES20.GL_TEXTURE0);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\program\\RRGLProgramTexture.java"}}
{"prompt": "\n @Override\r\npublic void onDeactivated() {\r\n    super.onDeactivated();\r", "choices": [{"text": "}\r\n\r\n@Override\r\npublic void onDestroy() {\r\n    super.onDestroy();\r\n}\r\n\r\n@Override\r\npublic void onPause() {\r\n    super.onPause();\r\n}\r\n\r\n@Override\r\npublic void onResume() {\r\n    super.onResume();\r\n}\r\n\r\n@Override\r\npublic void onSaveInstanceState(Bundle outState) {\r\n    super.onSaveInstanceState(outState);\r\n}\r\n\r\n@Override\r\npublic void onStart() {\r\n    super.onStart();\r\n}\r\n\r\n@Override\r\npublic void onStop() {\r\n    super"}], "metadata": {"task_id": "RedReader/968", "ground_truth": "    GLES20.glDisableVertexAttribArray(mUVDataHandle);\r\n    GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, 0);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\program\\RRGLProgramTexture.java"}}
{"prompt": "\n public void releaseReference() {\r\n    mRefCount--;\r\n    if (mRefCount == 0) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/969", "ground_truth": "        deleteTexture(mTextureHandle);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\program\\RRGLTexture.java"}}
{"prompt": "\n private static void deleteTexture(final int handle) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/970", "ground_truth": "    final int[] handles = { handle };\r\n    GLES20.glDeleteTextures(1, handles, 0);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\program\\RRGLTexture.java"}}
{"prompt": "\n import org.quantumbadger.redreader.views.imageview.FingerTracker\nimport android.view.MotionEvent\nimport android.annotation.SuppressLint\n@SuppressLint(\"ClickableViewAccessibility\")\r\n@Override\r\npublic boolean onTouchEvent(final MotionEvent event) {\r\n    mFingerTracker.onTouchEvent(event);\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/971", "ground_truth": "    requestRender();\r\n    return true;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\RRGLSurfaceView.java"}}
{"prompt": "\n @Override\r\nprotected void onAttachedToWindow() {\r", "choices": [{"text": "super.onAttachedToWindow();\r\nif (mWindow!= null) {\r\nmWindow.setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\nWindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n}\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "RedReader/972", "ground_truth": "    super.onAttachedToWindow();\r\n    mDisplayListManager.onUIAttach();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\RRGLSurfaceView.java"}}
{"prompt": "\n @Override\r\nprotected void onDetachedFromWindow() {\r", "choices": [{"text": "super.onDetachedFromWindow();\r\nif (mHandler!= null) {\r\nmHandler.removeCallbacksAndMessages(null);\r\n}\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "RedReader/973", "ground_truth": "    super.onDetachedFromWindow();\r\n    mDisplayListManager.onUIDetach();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\glview\\RRGLSurfaceView.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nprivate void setIconResource(final int resource) {\r\n    if (resource != mCurrentIconResource) {\r\n        mCurrentIconResource = resource;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/974", "ground_truth": "        mIcon.setImageResource(resource);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\HorizontalSwipeProgressOverlay.java"}}
{"prompt": "\n import android.view.View\nimport android.view.MotionEvent\nimport android.annotation.SuppressLint\n@SuppressLint(\"ClickableViewAccessibility\")\r\n@Override\r\npublic boolean onTouch(final View v, final MotionEvent event) {\r", "choices": [{"text": "switch (event.getAction()) {\r\ncase MotionEvent.ACTION_DOWN:\r\nif (!v.hasFocus()) {\r\nv.requestFocus();\r\n}\r\nbreak;\r\ncase MotionEvent.ACTION_UP:\r\nv.performClick();\r\nbreak;\r\ncase MotionEvent.ACTION_MOVE:\r\nv.performClick();\r\nbreak;\r\ncase MotionEvent.ACTION_CANCEL:\r\nv.performClick();\r\nbreak;\r\n}\r\nreturn v.onTouchEvent(event);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/976", "ground_truth": "    mFingerTracker.onTouchEvent(event);\r\n    return true;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\imageview\\BasicGestureHandler.java"}}
{"prompt": "\n @Override\r\npublic void onFingerDown(final FingerTracker.Finger finger) {\r\n    mCurrentFingerCount++;\r\n    if (mCurrentFingerCount > 1) {\r", "choices": [{"text": "//        mFingerTracker.removeFinger(finger);\r\n        mCurrentFingerCount = 1;\r\n    }\r\n}\r\n\r\n@Override\r\npublic void onFingerUp(final FingerTracker.Finger finger) {\r\n    mCurrentFingerCount--;\r\n    if (mCurrentFingerCount < 0) {\r\n        mCurrentFingerCount = 0;\r\n    }\r\n}\r\n\r\n@Override\r\npublic void onFingerMove(final FingerTracker.Finger finger) {\r\n    if (mCurrentFingerCount == 1) {\r\n        mFingerTracker.remove"}], "metadata": {"task_id": "RedReader/977", "ground_truth": "        mFirstFinger = null;\r\n    } else {\r\n        mFirstFinger = finger;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\imageview\\BasicGestureHandler.java"}}
{"prompt": "\n @Override\r\npublic void onFingersMoved() {\r\n    if (mFirstFinger != null) {\r", "choices": [{"text": "\n @Override\r\npublic void onFingersMoved() {\r\n    if (mFirstFinger!= null) {\r\n//        Log.d(TAG, \"onFingersMoved: \" + mFirstFinger.getX() + \" \" + mFirstFinger.getY());\r\n        mFirstFinger.setX(mFirstFinger.getX() + mDeltaX);\r\n        mFirstFinger.setY(mFirstFinger.getY() + mDeltaY);\r\n        mSecondFinger.setX(mSecondFinger.getX() + mDeltaX);\r\n        mSecondFinger.setY(mSecondFinger.getY() + mDeltaY);\r\n        mDeltaX = 0;\r\n       "}], "metadata": {"task_id": "RedReader/978", "ground_truth": "        mListener.onHorizontalSwipe(mFirstFinger.mTotalPosDifference.x);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\imageview\\BasicGestureHandler.java"}}
{"prompt": "\n @Override\r\npublic void onFingerUp(final FingerTracker.Finger finger) {\r\n    mCurrentFingerCount--;\r\n    if (mFirstFinger != null) {\r\n        mListener.onHorizontalSwipeEnd();\r\n        // TODO\r\n        if (mFirstFinger.mDownDuration < 300 && mFirstFinger.mPosDifference.x < 20 && mFirstFinger.mPosDifference.y < 20) {\r", "choices": [{"text": "\n @Override\r\npublic void onFingerUp(final FingerTracker.Finger finger) {\r\n    mCurrentFingerCount--;\r\n    if (mFirstFinger!= null) {\r\n        mListener.onHorizontalSwipeEnd();\r\n        // TODO\r\n        if (mFirstFinger.mDownDuration < 300 && mFirstFinger.mPosDifference.x < 20 && mFirstFinger.mPosDifference.y < 20) {\r\n//            mListener.onTap();\r\n        }\r\n    }\r\n    mFirstFinger = null;\r\n}\r\n"}], "metadata": {"task_id": "RedReader/979", "ground_truth": "            mListener.onSingleTap();\r\n        }\r\n        mFirstFinger = null;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\imageview\\BasicGestureHandler.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.MutableFloatPoint2D\npublic void convertScreenToScene(final MutableFloatPoint2D screenPos, final MutableFloatPoint2D output) {\r", "choices": [{"text": ""}], "metadata": {"task_id": "RedReader/980", "ground_truth": "    output.x = (screenPos.x - mPositionOffset.x) / mScale;\r\n    output.y = (screenPos.y - mPositionOffset.y) / mScale;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\imageview\\CoordinateHelper.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.MutableFloatPoint2D\npublic void convertSceneToScreen(final MutableFloatPoint2D scenePos, final MutableFloatPoint2D output) {\r", "choices": [{"text": ""}], "metadata": {"task_id": "RedReader/981", "ground_truth": "    output.x = scenePos.x * mScale + mPositionOffset.x;\r\n    output.y = scenePos.y * mScale + mPositionOffset.y;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\imageview\\CoordinateHelper.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.MutableFloatPoint2D\npublic void translateScreen(final MutableFloatPoint2D oldScreenPos, final MutableFloatPoint2D newScreenPos) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/983", "ground_truth": "    mPositionOffset.add(newScreenPos);\r\n    mPositionOffset.sub(oldScreenPos);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\imageview\\CoordinateHelper.java"}}
{"prompt": "\n import org.quantumbadger.redreader.views.glview.program.RRGLContext\nimport org.quantumbadger.redreader.views.glview.displaylist.RRGLDisplayList\n@Override\r\npublic synchronized void onGLSceneResolutionChange(final RRGLDisplayList scene, final RRGLContext context, final int width, final int height) {\r\n    mResolutionX = width;\r\n    mResolutionY = height;\r\n    final boolean setInitialScale = (mBoundsHelper == null);\r\n    mBoundsHelper = new BoundsHelper(width, height, mImageTileSource.getWidth(), mImageTileSource.getHeight(), mCoordinateHelper);\r\n    if (setInitialScale) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/987", "ground_truth": "        mBoundsHelper.applyMinScale();\r\n    }\r\n    mScrollbars.setResolution(width, height);\r\n    mScrollbars.showBars();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\imageview\\ImageViewDisplayListManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.UIThreadRepeatingTimer\n@Override\r\npublic void onUIThreadRepeatingTimer(final UIThreadRepeatingTimer timer) {\r\n    if (mCurrentTouchState == TouchState.DOUBLE_TAP_WAIT_NO_FINGERS_DOWN) {\r\n        if (System.currentTimeMillis() - mFirstTapReleaseTime > DOUBLE_TAP_MAX_GAP_DURATION_MS) {\r\n            mListener.onSingleTap();\r\n            mCurrentTouchState = null;\r\n            mDoubleTapGapTimer.stopTimer();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/988", "ground_truth": "        }\r\n    } else {\r\n        mDoubleTapGapTimer.stopTimer();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\imageview\\ImageViewDisplayListManager.java"}}
{"prompt": "\n public synchronized void setResolution(final int x, final int y) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/990", "ground_truth": "    mResX = x;\r\n    mResY = y;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\imageview\\ImageViewScrollbars.java"}}
{"prompt": "\n @Override\r\npublic void onAdded() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.onAdded();\r\n}\r\n\r\n@Override\r\npublic void onRemoved() {\r\n// TODO Auto-generated method stub\r\nsuper.onRemoved();\r\n}\r\n\r\n@Override\r\npublic void onReplaced() {\r\n// TODO Auto-generated method stub\r\nsuper.onReplaced();\r\n}\r\n\r\n@Override\r\npublic void onMoved() {\r\n// TODO Auto-generated method stub\r\nsuper.onMoved();\r\n}\r\n\r\n@Override\r\npublic void onDetached() {\r\n//"}], "metadata": {"task_id": "RedReader/991", "ground_truth": "    super.onAdded();\r\n    mRenderable.onAdded();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\imageview\\ImageViewScrollbars.java"}}
{"prompt": "\n @Override\r\npublic void onRemoved() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.onRemoved();\r\n}\r\n\r\n@Override\r\npublic void onReplaced() {\r\n// TODO Auto-generated method stub\r\nsuper.onReplaced();\r\n}\r\n\r\n@Override\r\npublic void onSaveInstanceState(Bundle outState) {\r\n// TODO Auto-generated method stub\r\nsuper.onSaveInstanceState(outState);\r\n}\r\n\r\n@Override\r\npublic void onStart() {\r\n// TODO Auto-generated method stub\r\nsuper.onStart();\r\n}\r\n\r\n@Override\r\npublic void"}], "metadata": {"task_id": "RedReader/992", "ground_truth": "    mRenderable.onRemoved();\r\n    super.onRemoved();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\imageview\\ImageViewScrollbars.java"}}
{"prompt": "\n public synchronized void showBars() {\r\n    mShowUntil = System.currentTimeMillis() + 600;\r", "choices": [{"text": "}\r\n\n public synchronized void hideBars() {\r\n    mShowUntil = 0;\r\n}\r\n\n public synchronized void toggleBars() {\r\n    if (mShowUntil == 0) {\r\n        showBars();\r\n    } else {\r\n        hideBars();\r\n    }\r\n}\r\n\n public synchronized boolean isShowing() {\r\n    return mShowUntil!= 0;\r\n}\r\n\n public synchronized void setOnBarChangeListener(OnBarChangeListener listener) {\r\n    mOnBarChangeListener = listener;\r\n}\r\n\n public synchronized void setOnBarChangeListener(OnBarChangeListener listener, int delay) {\r\n    m"}], "metadata": {"task_id": "RedReader/993", "ground_truth": "    mIsVisible = true;\r\n    mCurrentAlpha = 1;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\imageview\\ImageViewScrollbars.java"}}
{"prompt": "\n import org.quantumbadger.redreader.views.glview.program.RRGLMatrixStack\n@Override\r\nprotected synchronized void renderInternal(final RRGLMatrixStack stack, final long time) {\r\n    if (mIsVisible && time > mShowUntil) {\r\n        mCurrentAlpha -= ALPHA_STEP;\r\n        if (mCurrentAlpha < 0) {\r\n            mIsVisible = false;\r\n            mCurrentAlpha = 0;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/994", "ground_truth": "        }\r\n    }\r\n    mRenderable.setOverallAlpha(mCurrentAlpha);\r\n    mRenderable.startRender(stack, time);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\imageview\\ImageViewScrollbars.java"}}
{"prompt": "\n import android.graphics.Bitmap\npublic Bitmap get() {\r\n    synchronized (mLock) {\r\n        if (!mWanted) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/996", "ground_truth": "            throw new RuntimeException(\"Attempted to get unwanted image!\");\r\n        }\r\n        return mResult;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\imageview\\ImageViewTileLoader.java"}}
{"prompt": "\n // Caller must synchronize on mLock\r\npublic void markAsUnwanted() {\r\n    mWanted = false;\r", "choices": [{"text": "}\r\n\r\n// Caller must synchronize on mLock\r\npublic boolean isWanted() {\r\n    return mWanted;\r\n}\r\n\r\n// Caller must synchronize on mLock\r\npublic void markAsWanted() {\r\n    mWanted = true;\r\n}\r\n\r\n// Caller must synchronize on mLock\r\npublic boolean isWantedBy(ProcessRecord r) {\r\n    return mWantedBy.contains(r);\r\n}\r\n\r\n// Caller must synchronize on mLock\r\npublic void markAsWantedBy(ProcessRecord r) {\r\n    mWantedBy"}], "metadata": {"task_id": "RedReader/997", "ground_truth": "    if (mResult != null) {\r\n        mResult.recycle();\r\n        mResult = null;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\imageview\\ImageViewTileLoader.java"}}
{"prompt": "\n public void enqueue(final ImageViewTileLoader tile) {\r\n    synchronized (mQueue) {\r\n        mQueue.addLast(tile);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/998", "ground_truth": "        mThreads.triggerOne();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\imageview\\ImageViewTileLoaderThread.java"}}
{"prompt": "\n @Override\r\npublic void run() {\r\n    while (true) {\r\n        final ImageViewTileLoader tile;\r\n        synchronized (mQueue) {\r\n            if (mQueue.isEmpty()) {\r\n                return;\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/999", "ground_truth": "            tile = mQueue.removeFirst();\r\n        }\r\n        tile.doPrepare();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\imageview\\ImageViewTileLoaderThread.java"}}
{"prompt": "\n public void markAsWanted(final int desiredScaleIndex) {\r\n    if (desiredScaleIndex == mDesiredScaleIndex) {\r\n        return;\r\n    }\r\n    mDesiredScaleIndex = desiredScaleIndex;\r\n    synchronized (mLock) {\r\n        mTileLoaders[desiredScaleIndex].markAsWanted();\r\n        for (int s = 0; s < mTileLoaders.length; s++) {\r\n            if (s != desiredScaleIndex) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/1000", "ground_truth": "                mTileLoaders[s].markAsUnwanted();\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\imageview\\MultiScaleTileManager.java"}}
{"prompt": "\n public void markAsUnwanted() {\r\n    if (mDesiredScaleIndex == -1) {\r\n        return;\r\n    }\r\n    mDesiredScaleIndex = -1;\r\n    synchronized (mLock) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/1001", "ground_truth": "        for (int s = 0; s < mTileLoaders.length; s++) {\r\n            mTileLoaders[s].markAsUnwanted();\r\n        }\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\imageview\\MultiScaleTileManager.java"}}
{"prompt": "\n import android.view.View\n/**\r\n * Sets the indentation for the View\r\n *\r\n * @param indent comment indentation number\r\n */\r\npublic void setIndentation(final int indent) {\r\n    getLayoutParams().width = (mPixelsPerIndent * indent);\r\n    mIndent = indent;\r\n    if (mPrefDrawLines) {\r", "choices": [{"text": "//        mPrefDrawLines = false;\r\n        invalidate();\r\n    }\r\n}\r\n/**\r\n * Sets the indentation for the View\r\n *\r\n * @param indent comment indentation number\r\n */\r\npublic void setIndentation(final int indent, final boolean prefDrawLines) {\r\n    getLayoutParams().width = (mPixelsPerIndent * indent);\r\n    mIndent = indent;\r\n    mPrefDrawLines = prefDrawLines;\r\n    if (mPrefDrawLines) {\r\n        invalidate();\r\n    }\r\n}\r\n/**\r\n * Sets the indentation for the View\r\n *\r\n * @param indent comment indentation number"}], "metadata": {"task_id": "RedReader/1002", "ground_truth": "        mLineBuffer = new float[mIndent * 4];\r\n    }\r\n    invalidate();\r\n    requestLayout();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\IndentView.java"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\nimport android.view.ViewGroup\nimport android.view.View\n@Override\r\npublic RecyclerView.ViewHolder onCreateViewHolder(final ViewGroup viewGroup) {\r", "choices": [{"text": "}\r\n@Override\r\npublic void onBindViewHolder(final RecyclerView.ViewHolder viewHolder, final int i) {\r\n}\r\n@Override\r\npublic int getItemCount() {\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/1003", "ground_truth": "    return new RecyclerView.ViewHolder(new ListItemView(viewGroup.getContext())) {\r\n    };\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\list\\GroupedRecyclerViewItemListItemView.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport android.widget.TextView\nimport android.view.View\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.core.view.accessibility.AccessibilityNodeInfoCompat\nimport androidx.core.view.ViewCompat\nimport androidx.core.view.AccessibilityDelegateCompat\n@Override\r\npublic void onBindViewHolder(final RecyclerView.ViewHolder viewHolder) {\r\n    final TextView view = (TextView) viewHolder.itemView;\r\n    view.setText(mText);\r\n    //From https://stackoverflow.com/a/54082384\r\n    ViewCompat.setAccessibilityDelegate(view, new AccessibilityDelegateCompat() {\r\n\r\n        @Override\r\n        public void onInitializeAccessibilityNodeInfo(final View host, final AccessibilityNodeInfoCompat info) {\r", "choices": [{"text": "//            super.onInitializeAccessibilityNodeInfo(host, info);\r\n            info.setClassName(TextView.class.getName());\r\n            info.setText(mText);\r\n            info.setPackageName(host.getContext().getPackageName());\r\n            info.setClassName(host.getClass().getName());\r\n            info.setContentDescription(mText);\r\n            info.setScrollable(true);\r\n            info.addAction(AccessibilityNodeInfoCompat.AccessibilityActionCompat.ACTION_SCROLL_FORWARD);\r\n            info.addAction(AccessibilityNodeInfoCompat.AccessibilityActionCompat.ACTION_SCROLL_BACKWARD);\r\n            info.addAction(AccessibilityNodeInfoCompat.AccessibilityActionCompat"}], "metadata": {"task_id": "RedReader/1006", "ground_truth": "            super.onInitializeAccessibilityNodeInfo(host, info);\r\n            info.setHeading(true);\r\n        }\r\n    });\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\list\\GroupedRecyclerViewItemListSectionHeaderView.java"}}
{"prompt": "\n import android.view.View\nimport androidx.core.view.accessibility.AccessibilityNodeInfoCompat\n@Override\r\npublic void onInitializeAccessibilityNodeInfo(final View host, final AccessibilityNodeInfoCompat info) {\r", "choices": [{"text": "super.onInitializeAccessibilityNodeInfo(host, info);\r\ninfo.setClassName(MyAccessibilityNodeInfoCompat.class.getName());\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/1007", "ground_truth": "    super.onInitializeAccessibilityNodeInfo(host, info);\r\n    info.setHeading(true);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\list\\GroupedRecyclerViewItemListSectionHeaderView.java"}}
{"prompt": "\n import java.util.Locale\nimport androidx.annotation.NonNull\nimport android.os.Message\n@Override\r\npublic void handleMessage(@NonNull final Message msg) {\r\n    if (textView != null) {\r\n        textView.setText(((String) msg.obj).toUpperCase(Locale.getDefault()));\r", "choices": [{"text": "\n import java.util.Locale\nimport androidx.annotation.NonNull\nimport android.os.Message\n@Override\r\npublic void handleMessage(@NonNull final Message msg) {\r\n    if (textView!= null) {\r\n        textView.setText(((String) msg.obj).toUpperCase(Locale.getDefault()));\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/1008", "ground_truth": "    }\r\n    if (msg.what == LOADING_DONE) {\r\n        hideNoAnim();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\liststatus\\LoadingView.java"}}
{"prompt": "\n import android.os.Message\nprivate void sendMessage(final String text, final int what) {\r\n    final Message msg = Message.obtain();\r\n    msg.obj = text;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/1009", "ground_truth": "    msg.what = what;\r\n    loadingHandler.sendMessage(msg);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\liststatus\\LoadingView.java"}}
{"prompt": "\n import android.view.View\npublic void setContents(final View contents) {\r\n    if (this.contents != null) {\r\n        removeView(this.contents);\r", "choices": [{"text": "\n import android.view.View\npublic void setContents(final View contents) {\r\n    if (this.contents!= null) {\r\n        removeView(this.contents);\r\n}\r\nthis.contents = contents;\r\nif (this.contents!= null) {\r\n    addView(this.contents);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/1010", "ground_truth": "    }\r\n    this.contents = contents;\r\n    addView(contents);\r\n    General.setLayoutMatchWidthWrapHeight(contents);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\liststatus\\StatusListItemView.java"}}
{"prompt": "\n import android.view.View\npublic void hideNoAnim() {\r\n    setVisibility(GONE);\r\n    removeAllViews();\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "RedReader/1011", "ground_truth": "    contents = null;\r\n    requestLayout();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\liststatus\\StatusListItemView.java"}}
{"prompt": "\n public void calculateStep() {\r\n    mVelocity -= mParams.stepLengthSeconds * ((mPosition - mParams.endPosition) * mParams.accelerationCoefficient);\r\n    mVelocity *= mParams.velocityDamping;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/1012", "ground_truth": "    mPosition += mVelocity * mParams.stepLengthSeconds;\r\n    mStep++;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\LiveDHM.java"}}
{"prompt": "\n public boolean isEndThresholdReached() {\r\n    if (mStep >= mParams.thresholdMaxSteps) {\r\n        return true;\r\n    }\r\n    if (Math.abs(mPosition) > mParams.thresholdPositionDifference) {\r\n        return false;\r\n    }\r\n    //noinspection RedundantIfStatement\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/1013", "ground_truth": "    if (Math.abs(mVelocity) > mParams.thresholdVelocity) {\r\n        return false;\r\n    }\r\n    return true;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\LiveDHM.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.PrefsUtility\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.StringRes\nimport androidx.annotation.Nullable\nimport androidx.annotation.NonNull\n@Nullable\r\n@StringRes\r\nprivate Integer getAccessibilityHintForActionPref(@NonNull final PrefsUtility.CommentAction pref) {\r\n    switch(pref) {\r\n        case COLLAPSE:\r\n            return R.string.action_collapse;\r", "choices": [{"text": "\n        case EXPAND:\r\n            return R.string.action_expand;\r\r\n        case MARK_READ:\r\n            return R.string.action_mark_read;\r\r\n        case MARK_UNREAD:\r\n            return R.string.action_mark_unread;\r\r\n        case MARK_FAVORITE:\r\n            return R.string.action_mark_favorite;\r\r\n        case MARK_UNFAVORITE:\r\n            return R.string.action_mark_unfavorite;\r\r\n        case MARK_SPAM:\r\n            return R.string.action_mark_spam;\r\r\n        case MARK_NOT_SP"}], "metadata": {"task_id": "RedReader/1019", "ground_truth": "        case ACTION_MENU:\r\n            return R.string.action_actionmenu;\r\n    }\r\n    return null;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\RedditCommentView.java"}}
{"prompt": "\n import org.quantumbadger.redreader.activities.BaseActivity\npublic void handleInboxClick(final BaseActivity activity) {\r\n    if (currentItem != null) {\r", "choices": [{"text": "\n import org.quantumbadger.redreader.activities.BaseActivity\npublic void handleInboxClick(final BaseActivity activity) {\r\n    if (currentItem!= null) {\r\n//        currentItem.setRead(true);\r\n        currentItem.setRead(false);\r\n        currentItem.setRead(true);\r\n        currentItem.setRead(false);\r\n        currentItem.setRead(true);\r\n        currentItem.setRead(false);\r\n        currentItem.setRead(true);\r\n        currentItem.setRead(false);\r\n        currentItem.setRead(true);\r\n        currentItem.setRead(false);\r\n        currentItem.setRead(true);\r\n        currentItem.setRead(false);\r\n        currentItem.setRead(true);\r\n        currentItem.setRead(false);"}], "metadata": {"task_id": "RedReader/1021", "ground_truth": "        currentItem.handleInboxClick(activity);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\RedditInboxItemView.java"}}
{"prompt": "\n import org.quantumbadger.redreader.activities.BaseActivity\npublic void handleInboxLongClick(final BaseActivity activity) {\r\n    if (currentItem != null) {\r", "choices": [{"text": "\n import org.quantumbadger.redreader.activities.BaseActivity\npublic void handleInboxLongClick(final BaseActivity activity) {\r\n    if (currentItem!= null) {\r\n//        final String currentItem = currentItem.get(position);\r\n        final String currentItem = currentItem.get(position);\r\n        final String currentItemTitle = currentItem.get(position).get(0);\r\n        final String currentItemUrl = currentItem.get(position).get(1);\r\n        final String currentItemDate = currentItem.get(position).get(2);\r\n        final String currentItemAuthor = currentItem.get(position).get(3);\r\n        final String currentItemContent = currentItem.get(position).get(4);\r\n        final String currentItemImage = currentItem."}], "metadata": {"task_id": "RedReader/1022", "ground_truth": "        currentItem.handleInboxLongClick(activity);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\RedditInboxItemView.java"}}
{"prompt": "\n @Override\r\nprotected void onAttachedToWindow() {\r\n    super.onAttachedToWindow();\r\n    if (mChangeListenerAddTask != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/1023", "ground_truth": "        mChangeListenerAddTask.run();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\RedditPostHeaderView.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\n@Override\r\nprotected void onDetachedFromWindow() {\r\n    super.onDetachedFromWindow();\r\n    if (mChangeListenerRemoveTask != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/1024", "ground_truth": "        mChangeListenerRemoveTask.run();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\RedditPostHeaderView.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.api.RedditPostActions\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\n@NonNull\r\n@Override\r\nprotected String getFlingLeftText() {\r\n    mLeftFlingAction = RedditPostActions.ActionDescriptionPair.from(mPost, mLeftFlingPref);\r\n    if (mLeftFlingAction != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/1025", "ground_truth": "        return mActivity.getString(mLeftFlingAction.getDescriptionRes());\r\n    } else {\r\n        return \"Disabled\";\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\RedditPostView.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.api.RedditPostActions\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\n@NonNull\r\n@Override\r\nprotected String getFlingRightText() {\r\n    mRightFlingAction = RedditPostActions.ActionDescriptionPair.from(mPost, mRightFlingPref);\r\n    if (mRightFlingAction != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/1026", "ground_truth": "        return mActivity.getString(mRightFlingAction.getDescriptionRes());\r\n    } else {\r\n        return \"Disabled\";\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\RedditPostView.java"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.os.Message\n@Override\r\npublic void handleMessage(@NonNull final Message msg) {\r\n    if (mUsageId != msg.what) {\r\n        return;\r", "choices": [{"text": "\n import androidx.annotation.NonNull\nimport android.os.Message\n@Override\r\npublic void handleMessage(@NonNull final Message msg) {\r\n    if (mUsageId!= msg.what) {\r\n        return;\r\n}\r\nfinal int what = msg.what;\r\nfinal int arg1 = msg.arg1;\r\nfinal int arg2 = msg.arg2;\r\nfinal Object obj = msg.obj;\r\nswitch (what) {\r\n    case MSG_SET_PROGRESS:\r\n        mProgress = arg1;\r\n        mProgressMax = arg2;\r\n        break;\r\n    case MSG_SET_MAX:\r\n        mProgressMax = arg1;\r\n        break;\r\n    case MSG_SET_PROGRESS_MAX:\r\n        mProgress = arg1;\r\n        mProgressMax = arg2;\r\n        break;\r\n    case"}], "metadata": {"task_id": "RedReader/1027", "ground_truth": "    }\r\n    mThumbnailView.setImageBitmap((Bitmap) msg.obj);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\RedditPostView.java"}}
{"prompt": "\n import android.os.Message\nimport android.graphics.Bitmap\n@Override\r\npublic void betterThumbnailAvailable(final Bitmap thumbnail, final int callbackUsageId) {\r\n    final Message msg = Message.obtain();\r\n    msg.obj = thumbnail;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/1028", "ground_truth": "    msg.what = callbackUsageId;\r\n    thumbnailHandler.sendMessage(msg);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\RedditPostView.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.General\nimport android.view.View\nprivate void setBottomMargin(final boolean enabled) {\r\n    final MarginLayoutParams layoutParams = (MarginLayoutParams) mOuterView.getLayoutParams();\r\n    if (enabled) {\r\n        layoutParams.bottomMargin = General.dpToPixels(mActivity, 6);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/1029", "ground_truth": "    } else {\r\n        layoutParams.bottomMargin = 0;\r\n    }\r\n    mOuterView.setLayoutParams(layoutParams);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\RedditPostView.java"}}
{"prompt": "\n public final void stop() {\r\n    if (!mStarted) {\r\n        throw new RuntimeException(\"Attempted to stop animation before it's started!\");\r\n    }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/1032", "ground_truth": "    if (mStopped) {\r\n        throw new RuntimeException(\"Attempted to stop animation twice!\");\r\n    }\r\n    mStopped = true;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\RRAnimation.java"}}
{"prompt": "\n @Override\r\npublic final void doFrame(final long frameTimeNanos) {\r\n    if (mStopped) {\r\n        return;\r\n    }\r\n    if (mFirstFrameNanos == -1) {\r\n        mFirstFrameNanos = frameTimeNanos;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/1033", "ground_truth": "    }\r\n    if (handleFrame(frameTimeNanos - mFirstFrameNanos)) {\r\n        CHOREOGRAPHER.postFrameCallback(this);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\RRAnimation.java"}}
{"prompt": "\n @Override\r\nprotected boolean handleFrame(final long nanosSinceAnimationStart) {\r\n    mLayoutParams.height = (int) (mStartHeight * interpolateSine(1.0 - (double) nanosSinceAnimationStart / (double) DURATION_NANOS));\r\n    mTarget.setLayoutParams(mLayoutParams);\r\n    final boolean finished = nanosSinceAnimationStart > DURATION_NANOS;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/1034", "ground_truth": "    if (finished) {\r\n        mTarget.setVisibility(View.GONE);\r\n    }\r\n    return !finished;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\RRAnimationShrinkHeight.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@Override\r\npublic void postFrameCallback(@NonNull final Callback callback) {\r\n    mCallbacks[mCallbackCount] = callback;\r\n    mCallbackCount++;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/1036", "ground_truth": "    if (!mPosted) {\r\n        AndroidCommon.UI_THREAD_HANDLER.postDelayed(this, 1000 / 60);\r\n        mPosted = true;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\RRChoreographerLegacy.java"}}
{"prompt": "\n import androidx.annotation.NonNull\n@Override\r\npublic void postFrameCallback(@NonNull final Callback callback) {\r\n    mCallbacks[mCallbackCount] = callback;\r\n    mCallbackCount++;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/1038", "ground_truth": "    if (!mPosted) {\r\n        CHOREOGRAPHER.postFrameCallback(this);\r\n        mPosted = true;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\RRChoreographerModern.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.annotation.NonNull\nimport android.view.View\n@Override\r\npublic void onScrollStateChanged(@NonNull final RecyclerView recyclerView, final int newState) {\r\n    switch(newState) {\r\n        case RecyclerView.SCROLL_STATE_IDLE:\r\n            hideScrollbar();\r\n            break;\r\n        case RecyclerView.SCROLL_STATE_DRAGGING:\r\n        case RecyclerView.SCROLL_STATE_SETTLING:\r", "choices": [{"text": "//            showScrollbar();\r\n            break;\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/1040", "ground_truth": "            showScrollbar();\r\n            break;\r\n    }\r\n    updateScroll();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\ScrollbarRecyclerViewManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout\nimport androidx.annotation.NonNull\npublic void enablePullToRefresh(@NonNull final SwipeRefreshLayout.OnRefreshListener listener) {\r", "choices": [{"text": "swipeRefreshLayout.setOnRefreshListener(listener);\r\nswipeRefreshLayout.setColorSchemeResources(R.color.colorPrimary, R.color.colorPrimaryDark);\r\nswipeRefreshLayout.setProgressBackgroundColorSchemeColor(Color.WHITE);\r\nswipeRefreshLayout.setProgressViewOffset(false, 0, 100);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/1041", "ground_truth": "    mSwipeRefreshLayout.setOnRefreshListener(listener);\r\n    mSwipeRefreshLayout.setEnabled(true);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\ScrollbarRecyclerViewManager.java"}}
{"prompt": "\n private void showScrollbar() {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/1042", "ground_truth": "    mScrollbar.animate().cancel();\r\n    mScrollbar.setAlpha(1f);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\ScrollbarRecyclerViewManager.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.EventListenerSet\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.annotation.NonNull\npublic void bind(@NonNull final AppCompatActivity activity, @NonNull final EventListenerSet<String> querySource) {\r\n    mActivity = activity;\r\n    if (mBinding != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/1044", "ground_truth": "        throw new RuntimeException(\"Search view already bound\");\r\n    }\r\n    mBinding = querySource;\r\n    doBind();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\SubredditSearchQuickLinks.java"}}
{"prompt": "\n private void doBind() {\r\n    if (mBinding != null) {\r\n        mBindingListener = this::update;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/1045", "ground_truth": "        update(mBinding.register(mBindingListener));\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\SubredditSearchQuickLinks.java"}}
{"prompt": "\n private void doUnbind() {\r\n    if (mBinding != null && mBindingListener != null) {\r\n        mBinding.unregister(mBindingListener);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/1046", "ground_truth": "        mBindingListener = null;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\SubredditSearchQuickLinks.java"}}
{"prompt": "\n @Override\r\nprotected void onAttachedToWindow() {\r", "choices": [{"text": "super.onAttachedToWindow();\r\nif (mWindow!= null) {\r\nmWindow.setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,\r\nWindowManager.LayoutParams.FLAG_FULLSCREEN);\r\n}\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "RedReader/1047", "ground_truth": "    super.onAttachedToWindow();\r\n    doBind();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\SubredditSearchQuickLinks.java"}}
{"prompt": "\n @Override\r\nprotected void onDetachedFromWindow() {\r", "choices": [{"text": "super.onDetachedFromWindow();\r\nif (mHandler!= null) {\r\nmHandler.removeCallbacksAndMessages(null);\r\n}\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "RedReader/1048", "ground_truth": "    super.onDetachedFromWindow();\r\n    doUnbind();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\SubredditSearchQuickLinks.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\n@Override\r\nprotected void onAttachedToWindow() {\r\n    super.onAttachedToWindow();\r\n    if (mRunnableOnAttach != null) {\r", "choices": [{"text": "\n import org.quantumbadger.redreader.R\n@Override\r\nprotected void onAttachedToWindow() {\r\n    super.onAttachedToWindow();\r\n    if (mRunnableOnAttach!= null) {\r\nmRunnableOnAttach.run();\r\nmRunnableOnAttach = null;\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/1050", "ground_truth": "        mRunnableOnAttach.run();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\SubredditToolbar.java"}}
{"prompt": " import org.quantumbadger.redreader.R\nprivate Optional<SubredditDetails> mSubredditDetails = Optional.empty();\nprivate Runnable mRunnableOnDetach;\nprivate Runnable mRunnableOnPinnedChange;\n@Override\r\nprotected void onDetachedFromWindow() {\r\n    super.onDetachedFromWindow();\r\n    if (mRunnableOnDetach != null) {\r", "choices": [{"text": " import org.quantumbadger.redreader.R\nprivate Optional<SubredditDetails> mSubredditDetails = Optional.empty();\nprivate Runnable mRunnableOnDetach;\nprivate Runnable mRunnableOnPinnedChange;\n@Override\r\nprotected void onDetachedFromWindow() {\r\n    super.onDetachedFromWindow();\r\n    if (mRunnableOnDetach!= null) {\r\nmRunnableOnDetach.run();\r\nmRunnableOnDetach = null;\r\n}\r\n}\r\n@Override\r\nprotected void onAttachedToWindow() {\r\n    super.onAttachedToWindow();\r\n    if (mRunnableOnPinnedChange!= null) {\r\nmRunnableOnPinnedChange.run();\r\nmRunnableOnPinnedChange = null;\r\n}\r\n}\r\npublic void setSubredditDetails(SubredditDetails subredditDetails) {\r\nmSubredditDetails = Optional.ofNullable(subredditDetails);\r\n}\r\npublic void setRunnable"}], "metadata": {"task_id": "RedReader/1051", "ground_truth": "        mRunnableOnDetach.run();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\SubredditToolbar.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.api.RedditSubredditSubscriptionManager\nimport org.quantumbadger.redreader.R\n@Override\r\npublic void onSubredditSubscriptionListUpdated(final RedditSubredditSubscriptionManager subredditSubscriptionManager) {\r\n    if (mRunnableOnSubscriptionsChange != null) {\r", "choices": [{"text": "\n import org.quantumbadger.redreader.reddit.api.RedditSubredditSubscriptionManager\nimport org.quantumbadger.redreader.R\n@Override\r\npublic void onSubredditSubscriptionListUpdated(final RedditSubredditSubscriptionManager subredditSubscriptionManager) {\r\n    if (mRunnableOnSubscriptionsChange!= null) {\r\nmRunnableOnSubscriptionsChange.run();\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/1052", "ground_truth": "        AndroidCommon.UI_THREAD_HANDLER.post(mRunnableOnSubscriptionsChange);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\SubredditToolbar.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.api.RedditSubredditSubscriptionManager\nimport org.quantumbadger.redreader.R\n@Override\r\npublic void onSubredditSubscriptionAttempted(final RedditSubredditSubscriptionManager subredditSubscriptionManager) {\r\n    if (mRunnableOnSubscriptionsChange != null) {\r", "choices": [{"text": "\n import org.quantumbadger.redreader.reddit.api.RedditSubredditSubscriptionManager\nimport org.quantumbadger.redreader.R\n@Override\r\npublic void onSubredditSubscriptionAttempted(final RedditSubredditSubscriptionManager subredditSubscriptionManager) {\r\n    if (mRunnableOnSubscriptionsChange!= null) {\r\n//        mRunnableOnSubscriptionsChange.run();\r\n        mRunnableOnSubscriptionsChange.run();\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/1053", "ground_truth": "        AndroidCommon.UI_THREAD_HANDLER.post(mRunnableOnSubscriptionsChange);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\SubredditToolbar.java"}}
{"prompt": "\n import org.quantumbadger.redreader.reddit.api.RedditSubredditSubscriptionManager\nimport org.quantumbadger.redreader.R\n@Override\r\npublic void onSubredditUnsubscriptionAttempted(final RedditSubredditSubscriptionManager subredditSubscriptionManager) {\r\n    if (mRunnableOnSubscriptionsChange != null) {\r", "choices": [{"text": "\n import org.quantumbadger.redreader.reddit.api.RedditSubredditSubscriptionManager\nimport org.quantumbadger.redreader.R\n@Override\r\npublic void onSubredditUnsubscriptionAttempted(final RedditSubredditSubscriptionManager subredditSubscriptionManager) {\r\n    if (mRunnableOnSubscriptionsChange!= null) {\r\nmRunnableOnSubscriptionsChange.run();\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/1054", "ground_truth": "        AndroidCommon.UI_THREAD_HANDLER.post(mRunnableOnSubscriptionsChange);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\SubredditToolbar.java"}}
{"prompt": "\n import org.quantumbadger.redreader.common.SharedPrefsWrapper\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\nimport android.content.Context\n@Override\r\npublic void onSharedPreferenceChanged(@NonNull final SharedPrefsWrapper sharedPreferences, @NonNull final String key) {\r\n    if (mRunnableOnPinnedChange != null && key.equals(mContext.getString(R.string.pref_pinned_subreddits_key))) {\r", "choices": [{"text": "\n import org.quantumbadger.redreader.common.SharedPrefsWrapper\nimport org.quantumbadger.redreader.R\nimport androidx.annotation.NonNull\nimport android.content.Context\n@Override\r\npublic void onSharedPreferenceChanged(@NonNull final SharedPrefsWrapper sharedPreferences, @NonNull final String key) {\r\n    if (mRunnableOnPinnedChange!= null && key.equals(mContext.getString(R.string.pref_pinned_subreddits_key))) {\r\nmRunnableOnPinnedChange.run();\r\n    }\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/1055", "ground_truth": "        mRunnableOnPinnedChange.run();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\SubredditToolbar.java"}}
{"prompt": "\n protected void resetSwipeState() {\r\n    mSwipeHistory.clear();\r\n    mSwipeStart = null;\r\n    mSwipeStartPointerId = -1;\r\n    mSwipeInProgress = false;\r", "choices": [{"text": "}\r\n\r\n"}], "metadata": {"task_id": "RedReader/1056", "ground_truth": "    mCurrentSwipeDelta = 0;\r\n    mOverallSwipeDelta = 0;\r\n    cancelSwipeAnimation();\r\n    updateOffset();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\SwipableItemView.java"}}
{"prompt": "\n private void onFingerSwipeMove() {\r", "choices": [{"text": "//  if (m_fingerSwipeMove!= null) {\r\n//    m_fingerSwipeMove.onFingerSwipeMove();\r\n//  }\r\n}\r\n\r\n private void onFingerSwipeUp() {\r\n//  if (m_fingerSwipeUp!= null) {\r\n//    m_fingerSwipeUp.onFingerSwipeUp();\r\n//  }\r\n}\r\n\r\n private void onFingerSwipeDown() {\r\n//  if (m_fingerSwipeDown!= null) {\r\n//    m_fingerSwipeDown."}], "metadata": {"task_id": "RedReader/1059", "ground_truth": "    mSwipeHistory.add(mCurrentSwipeDelta, System.currentTimeMillis());\r\n    updateOffset();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\SwipableItemView.java"}}
{"prompt": "\n private void onSwipeEnd() {\r\n    if (mSwipeHistory.size() >= 2) {\r\n        mVelocity = (mSwipeHistory.getMostRecent() - mSwipeHistory.getAtTimeAgoMs(100)) * 10;\r\n    } else {\r\n        mVelocity = 0;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/1060", "ground_truth": "    }\r\n    mOverallSwipeDelta += mCurrentSwipeDelta;\r\n    mCurrentSwipeDelta = 0;\r\n    animateSwipeToRestPosition();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\SwipableItemView.java"}}
{"prompt": "\n private void onSwipeCancelled() {\r\n    mVelocity = 0;\r\n    mOverallSwipeDelta += mCurrentSwipeDelta;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/1061", "ground_truth": "    mCurrentSwipeDelta = 0;\r\n    animateSwipeToRestPosition();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\SwipableItemView.java"}}
{"prompt": "\n private void startSwipeAnimation(final SwipeAnimation animation) {\r\n    if (mCurrentSwipeAnimation != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/1063", "ground_truth": "        mCurrentSwipeAnimation.stop();\r\n    }\r\n    mCurrentSwipeAnimation = animation;\r\n    mCurrentSwipeAnimation.start();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\SwipableItemView.java"}}
{"prompt": "\n private void cancelSwipeAnimation() {\r\n    if (mCurrentSwipeAnimation != null) {\r\n        mCurrentSwipeAnimation.stop();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/1064", "ground_truth": "        mCurrentSwipeAnimation = null;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\SwipableItemView.java"}}
{"prompt": "\n @Override\r\nprotected void onUpdatedPosition(final float position) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.onUpdatedPosition(position);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/1065", "ground_truth": "    mOverallSwipeDelta = position;\r\n    updateOffset();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\SwipableItemView.java"}}
{"prompt": "\n @Override\r\nprotected void onEndPosition(final float endPosition) {\r\n    mOverallSwipeDelta = endPosition;\r", "choices": [{"text": "}\r\n\r\n@Override\r\nprotected void onCancelPosition(final float cancelPosition) {\r\n    mOverallSwipeDelta = cancelPosition;\r\n}\r\n\r\n@Override\r\nprotected void onResetPosition(final float resetPosition) {\r\n    mOverallSwipeDelta = resetPosition;\r\n}\r\n\r\n@Override\r\nprotected void onSwipe(final float swipePosition) {\r\n    mOverallSwipeDelta = swipePosition;\r\n}\r\n\r\n@Override\r\nprotected void onSwipeEnd(final float swipeEndPosition) {\r\n    mOverallSwipeDelta = swipeEndPosition;\r\n}\r\n\r\n@Override\r"}], "metadata": {"task_id": "RedReader/1066", "ground_truth": "    updateOffset();\r\n    mCurrentSwipeAnimation = null;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\SwipableItemView.java"}}
{"prompt": "\n import android.view.MotionEvent\n@Override\r\npublic boolean onInterceptTouchEvent(final MotionEvent ev) {\r\n    if (mSwipeInProgress) {\r\n        return true;\r\n    }\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "RedReader/1067", "ground_truth": "    if (swipeStartLogic(ev)) {\r\n        return true;\r\n    }\r\n    return super.onInterceptTouchEvent(ev);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\SwipableItemView.java"}}
{"prompt": "\n public float getAtTimeAgoMs(final long timeAgo) {\r\n    final long timestamp = timestamps[getNthMostRecentIndex(0)] - timeAgo;\r\n    float result = getMostRecent();\r\n    for (int i = 0; i < len; i++) {\r\n        final int index = getNthMostRecentIndex(i);\r\n        if (timestamp > timestamps[index]) {\r\n            return result;\r\n        } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/1069", "ground_truth": "            result = positions[index];\r\n        }\r\n    }\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\SwipeHistory.java"}}
{"prompt": "\n private int getNthMostRecentIndex(final int n) {\r\n    if (n >= len || n < 0) {\r\n        throw new ArrayIndexOutOfBoundsException(n);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/1070", "ground_truth": "    }\r\n    return (start + len - n - 1) % positions.length;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\SwipeHistory.java"}}
{"prompt": "\n public void clear() {\r", "choices": [{"text": "//     this.list.clear();\r\n// }\r\n public void clear() {\r\n     this.list.clear();\r\n     this.list.add(new ArrayList<String>());\r\n }\r\n public void add(String s) {\r\n     this.list.get(this.list.size() - 1).add(s);\r\n }\r\n public void add(List<String> l) {\r\n     this.list.add(l);\r\n }\r\n public void add(String[] l) {\r\n     this.list.add(Arrays.asList(l));\r\n }\r\n public void add(List<List"}], "metadata": {"task_id": "RedReader/1071", "ground_truth": "    len = 0;\r\n    start = 0;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\SwipeHistory.java"}}
{"prompt": "\n import java.util.Objects\nimport java.io.IOException\nimport com.google.android.exoplayer2.C\n@Override\r\npublic int read(final byte[] buffer, final int offset, final int readLength) throws IOException {\r\n    if (readLength == 0) {\r\n        return 0;\r\n    }\r\n    final int result = Objects.requireNonNull(mCurrentStream).read(buffer, offset, readLength);\r\n    if (result < 0) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/1073", "ground_truth": "        return C.RESULT_END_OF_INPUT;\r\n    }\r\n    bytesTransferred(result);\r\n    return result;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\video\\ExoPlayerSeekableInputStreamDataSource.java"}}
{"prompt": "\n import java.io.IOException\nimport com.google.android.exoplayer2.C\n@Override\r\npublic void close() throws IOException {\r\n    if (mCurrentStream != null) {\r", "choices": [{"text": "\n import java.io.IOException\nimport com.google.android.exoplayer2.C\n@Override\r\npublic void close() throws IOException {\r\n    if (mCurrentStream!= null) {\r\nmCurrentStream.close();\r\nmCurrentStream = null;\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/1074", "ground_truth": "        mCurrentStream.close();\r\n        mCurrentStream = null;\r\n        transferEnded();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\video\\ExoPlayerSeekableInputStreamDataSource.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\n@Override\r\npublic void run() {\r\n    updateProgress();\r\n    if (!mReleased) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/1075", "ground_truth": "        AndroidCommon.UI_THREAD_HANDLER.postDelayed(this, 150);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\video\\ExoPlayerWrapperView.java"}}
{"prompt": "\n import com.google.android.exoplayer2.Player\nimport com.google.android.exoplayer2.PlaybackException\nimport androidx.annotation.NonNull\n@Override\r\npublic void onPlayerError(@NonNull final PlaybackException error) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "RedReader/1076", "ground_truth": "    Log.e(TAG, \"ExoPlayer error\", error);\r\n    mListener.onError();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\video\\ExoPlayerWrapperView.java"}}
{"prompt": "\n public void handleTap() {\r\n    if (mControlView == null) {\r\n        return;\r\n    }\r\n    if (mControlView.getVisibility() != VISIBLE) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "RedReader/1077", "ground_truth": "        mControlView.setVisibility(VISIBLE);\r\n    } else {\r\n        mControlView.setVisibility(GONE);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\video\\ExoPlayerWrapperView.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\npublic void release() {\r\n    if (!mReleased) {\r", "choices": [{"text": "//        mSurfaceTexture.release();\r\n        mReleased = true;\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "RedReader/1078", "ground_truth": "        removeAllViews();\r\n        mVideoPlayer.release();\r\n        mReleased = true;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\video\\ExoPlayerWrapperView.java"}}
{"prompt": "\n import android.view.View\n@Override\r\npublic View getVideoLoadingProgressView() {\r\n    // Video will start loading\r\n    if (loadingView != null) {\r\n        loadingView.setVisibility(View.VISIBLE);\r", "choices": [{"text": "\n import android.view.View\n@Override\r\npublic View getVideoLoadingProgressView() {\r\n    // Video will start loading\r\n    if (loadingView!= null) {\r\n        loadingView.setVisibility(View.VISIBLE);\r\n}\r\nreturn loadingView;\r\n}\r\n@Override\r\npublic void onVideoSizeChanged(int width, int height, int unappliedRotation, int pixelWidthHeightRatio) {\r\n    // Video will start loading\r\n    if (loadingView!= null) {\r\n        loadingView.setVisibility(View.GONE);\r\n}\r\n}\r\n@Override\r\npublic void onPrepared(MediaPlayer mp) {\r\n    // Video will start loading\r\n    if (loadingView!= null) {\r\n        loadingView.setVisibility(View.GONE);\r\n}\r\n}\r\n@Override\r\npublic void on"}], "metadata": {"task_id": "RedReader/1082", "ground_truth": "        return loadingView;\r\n    } else {\r\n        return super.getVideoLoadingProgressView();\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\webview\\VideoEnabledWebChromeClient.java"}}
{"prompt": "\n import android.view.View\nimport android.media.MediaPlayer\n// Video will start playing, only called in the case of android.widget.VideoView\r\n// (typically API level <11)\r\n@Override\r\npublic void onPrepared(final MediaPlayer mp) {\r\n    if (loadingView != null) {\r", "choices": [{"text": "\n import android.view.View\nimport android.media.MediaPlayer\n// Video will start playing, only called in the case of android.widget.VideoView\r\n// (typically API level <11)\r\n@Override\r\npublic void onPrepared(final MediaPlayer mp) {\r\n    if (loadingView!= null) {\r\n// Remove the loading view\r\n        loadingView.setVisibility(View.GONE);\r\n    }\r\n// Start the video\r\n    mp.start();\r\n}\r\n// Video will start playing, only called in the case of android.widget.VideoView\r\n// (typically API level <11)\r\n@Override\r\npublic void onCompletion(final MediaPlayer mp) {\r\n    if (loadingView!= null) {\r\n// Remove the loading view\r\n        loadingView.setVisibility(View.GONE);\r\n    }\r\n// Start the video\r\n    mp.start();\r\n}\r\n// Video will"}], "metadata": {"task_id": "RedReader/1083", "ground_truth": "        loadingView.setVisibility(View.GONE);\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\webview\\VideoEnabledWebChromeClient.java"}}
{"prompt": "\n import android.view.View\nimport android.media.MediaPlayer\n// Error while playing video, only called in the case of android.widget.VideoView\r\n// (typically API level <11)\r\n@Override\r\npublic boolean onError(final MediaPlayer mp, final int what, final int extra) {\r", "choices": [{"text": "//...\r\n}\r\n// Error while playing video, only called in the case of android.widget.VideoView\r\n// (typically API level <11)\r\n@Override\r\npublic void onPrepared(final MediaPlayer mp) {\r\n//...\r\n}\r\n// Error while playing video, only called in the case of android.widget.VideoView\r\n// (typically API level <11)\r\n@Override\r\npublic void onCompletion(final MediaPlayer mp) {\r\n//...\r\n}\r\n// Error while playing video, only called"}], "metadata": {"task_id": "RedReader/1084", "ground_truth": "    // By returning false, onCompletion() will be called\r\n    return false;\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\webview\\VideoEnabledWebChromeClient.java"}}
{"prompt": "\n import android.view.View\n/**\r\n * Notifies the class that the back key has been pressed by the user. This must be called from\r\n * the Activity's onBackPressed(), and if it returns false, the activity itself should handle\r\n * it. Otherwise don't do anything.\r\n *\r\n * @return Returns true if the event was handled, and false if was not (video view is not\r\n * visible)\r\n */\r\n@SuppressWarnings(\"unused\")\r\npublic boolean onBackPressed() {\r\n    if (isVideoFullscreen) {\r\n        onHideCustomView();\r", "choices": [{"text": "//        return true;\r\n    }\r\n    return false;\r\n}\r\n"}], "metadata": {"task_id": "RedReader/1085", "ground_truth": "        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\webview\\VideoEnabledWebChromeClient.java"}}
{"prompt": "\n @Override\r\npublic void loadData(final String data, final String mimeType, final String encoding) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.loadData(data, mimeType, encoding);\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "RedReader/1088", "ground_truth": "    addJavascriptInterface();\r\n    super.loadData(data, mimeType, encoding);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\webview\\WebViewFixed.java"}}
{"prompt": "\n import org.quantumbadger.redreader.R\n@Override\r\npublic void loadDataWithBaseURL(final String baseUrl, final String data, final String mimeType, final String encoding, final String historyUrl) {\r", "choices": [{"text": "super.loadDataWithBaseURL(baseUrl, data, mimeType, encoding, historyUrl);\r\n}\r\n@Override\r\npublic void loadData(final String data, final String mimeType, final String encoding) {\r\nsuper.loadData(data, mimeType, encoding);\r\n}\r\n@Override\r\npublic void loadUrl(final String url) {\r\nsuper.loadUrl(url);\r\n}\r\n@Override\r\npublic void loadUrl(final String url, final Map<String, String> additionalHttpHeaders) {\r\nsuper.loadUrl(url, additionalHttpHeaders"}], "metadata": {"task_id": "RedReader/1089", "ground_truth": "    addJavascriptInterface();\r\n    super.loadDataWithBaseURL(baseUrl, data, mimeType, encoding, historyUrl);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\webview\\WebViewFixed.java"}}
{"prompt": "\n @Override\r\npublic void loadUrl(final String url) {\r", "choices": [{"text": "super.loadUrl(url);\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "RedReader/1091", "ground_truth": "    addJavascriptInterface();\r\n    super.loadUrl(url);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\webview\\WebViewFixed.java"}}
{"prompt": "\n import java.util.Map\n@Override\r\npublic void loadUrl(final String url, final Map<String, String> additionalHttpHeaders) {\r", "choices": [{"text": "super.loadUrl(url, additionalHttpHeaders);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "RedReader/1092", "ground_truth": "    addJavascriptInterface();\r\n    super.loadUrl(url, additionalHttpHeaders);\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\webview\\WebViewFixed.java"}}
{"prompt": "\n public void clearBrowser() {\r\n    this.clearCache(true);\r\n    this.clearFormData();\r", "choices": [{"text": "}\r\n public void clearCache(boolean clearBrowserCache) {\r\n    this.driver.manage().deleteAllCookies();\r\n    if (clearBrowserCache) {\r\n        this.driver.navigate().refresh();\r\n    }\r\n}\r\n public void clearFormData() {\r\n    this.driver.manage().deleteAllCookies();\r\n    this.driver.navigate().refresh();\r\n}\r\n public void closeBrowser() {\r\n    this.driver.close();\r\n}\r\n public void closeAllBrowsers() {\r\n    this.driver.quit();\r\n}\r\n public void closeOtherBrowsers() {\r\n    for (String winHandle"}], "metadata": {"task_id": "RedReader/1095", "ground_truth": "    this.clearHistory();\r\n    CookieManager.getInstance().removeAllCookie();\r\n}", "fpath": "RedReader\\src\\main\\java\\org\\quantumbadger\\redreader\\views\\webview\\WebViewFixed.java"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.StringField\nfun setFields(fields: List<StringField>) {\n        fieldData.clear()\n\n        fields.forEach { field ->\n            fieldData.add(MutableStringPair(field.name, field.value))\n        }\n        if (fieldData.isEmpty()) {", "choices": [{"text": "            fieldData.add(MutableStringPair(\"No fields\", \"No fields\"))\n        }\n    }\n\nfun setFields(fields: List<String>) {\n        fieldData.clear()\n\n        fields.forEach { field ->\n            fieldData.add(MutableStringPair(field, field))\n        }\n        if (fieldData.isEmpty()) {\n            fieldData.add(MutableStringPair(\"No fields\", \"No fields\"))\n        }\n    }\n\nfun setFields(fields: List<Pair<String, String>>) {\n        fieldData.clear()\n\n        fields.forEach { field ->\n            fieldData.add"}], "metadata": {"task_id": "Tusky/5", "ground_truth": "            fieldData.add(MutableStringPair(\"\", \"\"))\n        }\n\n        notifyDataSetChanged()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\adapter\\AccountFieldEditAdapter.kt"}}
{"prompt": "\n fun setFieldLimits(maxNameLength: Int?, maxValueLength: Int?) {\n        this.maxNameLength = maxNameLength", "choices": [{"text": "        this.maxValueLength = maxValueLength\n    }\n\n    fun setFieldLimits(maxNameLength: Int?, maxValueLength: Int?, maxNameLengthForList: Int?, maxValueLengthForList: Int?) {\n        this.maxNameLength = maxNameLength\n        this.maxValueLength = maxValueLength\n        this.maxNameLengthForList = maxNameLengthForList\n        this.maxValueLengthForList = maxValueLengthForList\n    }\n\n    fun setFieldLimits(maxNameLength: Int?, maxValueLength: Int?, maxNameLengthForList: Int?, maxValueLengthForList: Int?, maxNameLengthFor"}], "metadata": {"task_id": "Tusky/6", "ground_truth": "        this.maxValueLength = maxValueLength\n        notifyDataSetChanged()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\adapter\\AccountFieldEditAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.StringField\nfun getFieldData(): List<StringField> {\n        return fieldData.map {", "choices": [{"text": "            StringField(it.name, it.value)\n        }\n    }\n"}], "metadata": {"task_id": "Tusky/7", "ground_truth": "            StringField(it.first, it.second)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\adapter\\AccountFieldEditAdapter.kt"}}
{"prompt": "\n fun addField() {", "choices": [{"text": " val field = Field(\n name = \"field\",\n type = \"string\",\n description = \"field description\",\n required = true,\n defaultValue = \"default value\"\n )\n fields.add(field)\n }\n}\n\n"}], "metadata": {"task_id": "Tusky/8", "ground_truth": "        fieldData.add(MutableStringPair(\"\", \"\"))\n        notifyItemInserted(fieldData.size - 1)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\adapter\\AccountFieldEditAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.BindingHolder\nimport com.keylesspalace.tusky.databinding.ItemEditFieldBinding\nimport android.view.ViewGroup\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(\n        parent: ViewGroup,\n        viewType: Int\n    ): BindingHolder<ItemEditFieldBinding> {\n        val binding = ItemEditFieldBinding.inflate(\n            LayoutInflater.from(parent.context),", "choices": [{"text": "            parent,\n            false\n        )\n        return BindingHolder(binding)\n    }\n\n    override fun onBindViewHolder(holder: BindingHolder<ItemEditFieldBinding>, position: Int) {\n        val item = getItem(position)\n        holder.binding.apply {\n            editField.setText(item.value)\n            editField.hint = item.hint\n            editField.addTextChangedListener(object : TextWatcher {\n                override fun afterTextChanged(s: Editable?) {\n                    item.value = s.toString()\n                }\n\n                override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after:"}], "metadata": {"task_id": "Tusky/9", "ground_truth": "            parent,\n            false\n        )\n        return BindingHolder(binding)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\adapter\\AccountFieldEditAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.interfaces.LinkListener\nfun setupLinkListener(listener: LinkListener) {\n        itemView.setOnClickListener {", "choices": [{"text": "            listener.onLinkClicked(itemView.tag as String)\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/10", "ground_truth": "            listener.onViewAccount(\n                accountId\n            )\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\adapter\\AccountViewHolder.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.BindingHolder\nimport com.keylesspalace.tusky.entity.Emoji\nimport com.keylesspalace.tusky.databinding.ItemEmojiButtonBinding\nimport android.view.ViewGroup\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(\n        parent: ViewGroup,\n        viewType: Int\n    ): BindingHolder<ItemEmojiButtonBinding> {\n        val binding = ItemEmojiButtonBinding.inflate(\n            LayoutInflater.from(parent.context),", "choices": [{"text": "            parent,\n            false\n        )\n        return BindingHolder(binding)\n    }\n\n    override fun onBindViewHolder(holder: BindingHolder<ItemEmojiButtonBinding>, position: Int) {\n        val emoji = getItem(position)\n        holder.binding.emoji = emoji\n        holder.binding.root.setOnClickListener {\n            onEmojiClick(emoji)\n        }\n    }\n\n    private fun onEmojiClick(emoji: Emoji) {\n        if (emoji.isCustom) {\n            onCustomEmojiClick(emoji)\n        } else {\n            onEmojiClick(emoji.code)\n        }\n    }\n\n    private fun onEmojiClick(code"}], "metadata": {"task_id": "Tusky/11", "ground_truth": "            parent,\n            false\n        )\n        return BindingHolder(binding)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\adapter\\EmojiAdapter.kt"}}
{"prompt": "\n import com.google.android.material.color.MaterialColors\nimport android.widget.TextView\nimport android.view.ViewGroup\nimport android.view.View\noverride fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {\n        return (super.getDropDownView(position, convertView, parent) as TextView).apply {\n            setTextColor(MaterialColors.getColor(this, android.R.attr.textColorTertiary))", "choices": [{"text": "        }\n    }\n}<file_sep>/app/src/main/java/com/example/myapplication/ui/main/MainViewModel.kt\npackage com.example.myapplication.ui.main\n\nimport android.app.Application\nimport androidx.lifecycle.AndroidViewModel\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.viewModelScope\nimport com.example.myapplication.data.model.User\nimport com.example.myapplication.data.repository.UserRepository\nimport com.example.myapplication.utils.Resource\nimport kotlinx.coroutines."}], "metadata": {"task_id": "Tusky/13", "ground_truth": "            text = super.getItem(position)?.getTuskyDisplayName(context)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\adapter\\LocaleAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.content.Context\nprivate void setUsername(String name) {\r\n    Context context = username.getContext();\r\n    String format = context.getString(R.string.post_username_format);\r", "choices": [{"text": "username.setText(String.format(format, name));\r\n}\n"}], "metadata": {"task_id": "Tusky/16", "ground_truth": "    String usernameText = String.format(format, name);\r\n    username.setText(usernameText);\r\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\adapter\\NotificationsAdapter.java"}}
{"prompt": "\n import java.util.List\nimport com.keylesspalace.tusky.entity.Notification\nimport android.widget.Button\nvoid setupButtons(final NotificationActionListener listener, final String accountId, final String notificationId) {\r\n    this.notificationActionListener = listener;\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Tusky/18", "ground_truth": "    this.accountId = accountId;\r\n    this.notificationId = notificationId;\r\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\adapter\\NotificationsAdapter.java"}}
{"prompt": "\n fun getSelected(): List<Int> {", "choices": [{"text": " return selected\n }\n\n fun setSelected(selected: List<Int>) {\n this.selected = selected\n }\n\n fun getSelectedCount(): Int {\n return selected.size\n }\n\n fun getSelectedCount(selected: List<Int>): Int {\n return selected.size\n }\n\n fun getSelectedCount(selected: List<Int>, selectedCount: Int): Int {\n return selected.size\n }\n\n fun getSelectedCount(selected: List<Int>, selectedCount: Int, selectedCount2: Int): Int {\n return selected.size\n }\n\n fun getSelectedCount(selected: List<"}], "metadata": {"task_id": "Tusky/23", "ground_truth": "        return pollOptions.filter { it.selected }\n            .map { pollOptions.indexOf(it) }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\adapter\\PollAdapter.kt"}}
{"prompt": "\nvar options List<String>\nvar multiple Boolean\nvar clickListener View?.OnClickListener?\n fun update(newOptions: List<String>, multiple: Boolean) {\n        this.options = newOptions", "choices": [{"text": "        this.multiple = multiple\n        notifyDataSetChanged()\n    }\n override fun getView(position: Int, convertView: View?, parent: ViewGroup?): View {\n        val view = convertView?: LayoutInflater.from(context).inflate(R.layout.item_spinner, parent, false)\n        val textView = view.findViewById<TextView>(R.id.textView)\n        val checkBox = view.findViewById<CheckBox>(R.id.checkBox)\n        val item = options[position]\n        textView.text = item\n        checkBox.isChecked = item.contains(\"selected\")\n        checkBox.setOnClickListener {\n            if (multiple) {\n               "}], "metadata": {"task_id": "Tusky/25", "ground_truth": "        this.multiple = multiple\n        notifyDataSetChanged()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\adapter\\PreviewPollOptionsAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport androidx.core.widget.TextViewCompat\nimport android.widget.TextView\nimport android.view.View\noverride fun onBindViewHolder(holder: PreviewViewHolder, position: Int) {\n        val textView = holder.itemView as TextView\n\n        val iconId = if (multiple) {\n            R.drawable.ic_check_box_outline_blank_18dp\n        } else {\n            R.drawable.ic_radio_button_unchecked_18dp\n        }\n\n        TextViewCompat.setCompoundDrawablesRelativeWithIntrinsicBounds(textView, iconId, 0, 0, 0)", "choices": [{"text": "        textView.text = getItem(position).name\n        textView.setOnClickListener {\n            if (multiple) {\n                if (selectedItems.contains(getItem(position))) {\n                    selectedItems.remove(getItem(position))\n                } else {\n                    selectedItems.add(getItem(position))\n                }\n            } else {\n                selectedItems.clear()\n                selectedItems.add(getItem(position))\n            }\n            notifyDataSetChanged()\n        }\n        if (selectedItems.contains(getItem(position))) {\n            textView.setBackgroundColor(Color.LTGRAY)\n        } else {\n            textView.setBackgroundColor(Color.TRANSPARENT)"}], "metadata": {"task_id": "Tusky/27", "ground_truth": "\n        textView.text = options[position]\n\n        textView.setOnClickListener(clickListener)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\adapter\\PreviewPollOptionsAdapter.kt"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport android.content.Context\nprotected void setUsername(@Nullable String name) {\r\n    Context context = username.getContext();\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Tusky/30", "ground_truth": "    String usernameText = context.getString(R.string.post_username_format, name);\r\n    username.setText(usernameText);\r\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\adapter\\StatusBaseViewHolder.java"}}
{"prompt": "\n import android.widget.Button\nimport android.view.View\nprivate void hidePoll() {\r\n    pollButton.setVisibility(View.GONE);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Tusky/33", "ground_truth": "    pollDescription.setVisibility(View.GONE);\r\n    pollOptions.setVisibility(View.GONE);\r\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\adapter\\StatusBaseViewHolder.java"}}
{"prompt": "\n protected void hideSensitiveMediaWarning() {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Tusky/37", "ground_truth": "    sensitiveMediaWarning.setVisibility(View.GONE);\r\n    sensitiveMediaShow.setVisibility(View.GONE);\r\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\adapter\\StatusBaseViewHolder.java"}}
{"prompt": "\n import java.util.List\nimport com.keylesspalace.tusky.entity.Attachment\nimport androidx.annotation.NonNull\nprotected static boolean hasPreviewableAttachment(@NonNull List<Attachment> attachments) {\r\n    for (Attachment attachment : attachments) {\r\n        if (attachment.getType() == Attachment.Type.AUDIO || attachment.getType() == Attachment.Type.UNKNOWN) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Tusky/38", "ground_truth": "            return false;\r\n        }\r\n    }\r\n    return true;\r\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\adapter\\StatusBaseViewHolder.java"}}
{"prompt": "\n import android.view.View\nprivate void hideQuantitativeStats() {\r\n    reblogs.setVisibility(View.GONE);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Tusky/44", "ground_truth": "    favourites.setVisibility(View.GONE);\r\n    infoDivider.setVisibility(View.GONE);\r\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\adapter\\StatusDetailedViewHolder.java"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Status\npublic void showStatusContent(boolean show) {\r", "choices": [{"text": "if (show) {\r\nstatusContent.setVisibility(View.VISIBLE);\r\n} else {\r\nstatusContent.setVisibility(View.GONE);\r\n}\r\n}\r\npublic void showStatusContent(Status status) {\r\nif (status == Status.SUCCESS) {\r\nshowStatusContent(true);\r\nstatusContent.setBackgroundColor(Color.GREEN);\r\n} else if (status == Status.ERROR) {\r\nshowStatusContent(true);\r\nstatusContent.setBackgroundColor(Color.RED);\r\n} else if (status == Status.LOADING) {"}], "metadata": {"task_id": "Tusky/47", "ground_truth": "    super.showStatusContent(show);\r\n    contentCollapseButton.setVisibility(show ? View.VISIBLE : View.GONE);\r\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\adapter\\StatusViewHolder.java"}}
{"prompt": "\n import com.keylesspalace.tusky.TabData\nfun updateData(newData: List<TabData>) {", "choices": [{"text": "    // Update the data\n    data = newData\n}\n\n"}], "metadata": {"task_id": "Tusky/49", "ground_truth": "        this.data = newData\n        notifyDataSetChanged()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\adapter\\TabAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nfun setRemoveButtonVisible(enabled: Boolean) {\n        if (removeButtonEnabled != enabled) {\n            removeButtonEnabled = enabled", "choices": [{"text": "\n import com.keylesspalace.tusky.R\nfun setRemoveButtonVisible(enabled: Boolean) {\n        if (removeButtonEnabled!= enabled) {\n            removeButtonEnabled = enabled\n            removeButton.visibility = if (enabled) View.VISIBLE else View.GONE\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/51", "ground_truth": "            notifyDataSetChanged()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\adapter\\TabAdapter.kt"}}
{"prompt": "\nval eventsSubject\nval eventsObservable Observable<Event>\nval sharedEventFlow MutableSharedFlow<Event>\n suspend fun dispatch(event: Event) {", "choices": [{"text": " eventsSubject.onNext(event)\n }\n}\n\n"}], "metadata": {"task_id": "Tusky/52", "ground_truth": "        sharedEventFlow.emit(event)\n        eventsSubject.onNext(event)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\appstore\\EventsHub.kt"}}
{"prompt": "\n import androidx.annotation.NonNull\nimport android.content.Intent\npublic void startActivityWithSlideInAnimation(@NonNull Intent intent) {\r", "choices": [{"text": "startActivity(intent);\r\noverridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Tusky/53", "ground_truth": "    super.startActivity(intent);\r\n    overridePendingTransition(R.anim.slide_from_right, R.anim.slide_to_left);\r\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\BaseActivity.java"}}
{"prompt": "\nprivate static final String TAG = \"BaseActivity\";\nprivate static final int REQUESTER_NONE = Integer.MAX_VALUE;\nprivate HashMap<Integer, PermissionRequester> requesters;\n @Override\r\npublic void finish() {\r", "choices": [{"text": "super.finish();\r\noverridePendingTransition(R.anim.slide_in_left, R.anim.slide_out_right);\r\n}\r\n\n@Override\r\npublic void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\nsuper.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\nif (requesters == null) {\r\nreturn;\r\n}\r\nPermissionRequester requester = requesters.get(requestCode);\r\nif (requester == null) {\r\nreturn;"}], "metadata": {"task_id": "Tusky/55", "ground_truth": "    super.finish();\r\n    overridePendingTransition(R.anim.slide_from_left, R.anim.slide_to_right);\r\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\BaseActivity.java"}}
{"prompt": "\n import com.keylesspalace.tusky.db.AccountEntity\nimport androidx.annotation.NonNull\nimport android.content.Intent\npublic void openAsAccount(@NonNull String url, @NonNull AccountEntity account) {\r\n    accountManager.setActiveAccount(account.getId());\r\n    Intent intent = MainActivity.redirectIntent(this, account.getId(), url);\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Tusky/58", "ground_truth": "    startActivity(intent);\r\n    finishWithoutSlideOutAnimation();\r\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\BaseActivity.java"}}
{"prompt": "\n open fun viewAccount(id: String) {", "choices": [{"text": "     val intent = Intent(this, AccountActivity::class.java)\n     intent.putExtra(AccountActivity.ACCOUNT_ID, id)\n     startActivity(intent)\n }\n+\n+open fun viewAccount(account: Account) {\n+    viewAccount(account.id)\n+}\n<pr_file>/app/src/main/java/com/example/android/trackr/ui/account/AccountActivity.kt<pr_diff_hunk>@@ -1,10 +1,11 @@\n package com.example.android.trackr.ui.account\n \n import android.os.Bundle\n import android"}], "metadata": {"task_id": "Tusky/61", "ground_truth": "        val intent = AccountActivity.getIntent(this, id)\n        startActivityWithSlideInAnimation(intent)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\BottomSheetActivity.kt"}}
{"prompt": "\n import androidx.annotation.VisibleForTesting\n @VisibleForTesting\n    fun onBeginSearch(url: String) {", "choices": [{"text": "        val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK)\n        intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION)\n        intent.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS)\n        intent.addFlags(Intent.FLAG_ACTIVITY_MULTIPLE_TASK)\n        intent.addFlags(Intent.FLAG"}], "metadata": {"task_id": "Tusky/63", "ground_truth": "        searchUrl = url\n        showQuerySheet()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\BottomSheetActivity.kt"}}
{"prompt": " import androidx.annotation.VisibleForTesting\nvar bottomSheet BottomSheetBehavior<LinearLayout>\nvar searchUrl String?\nvar mastodonApi MastodonApi\n @VisibleForTesting\n    fun cancelActiveSearch() {\n        if (isSearching()) {", "choices": [{"text": "            searchUrl?.let {\n                mastodonApi.cancelSearch(it)\n            }\n        }\n    }\n\n    fun isSearching(): Boolean {\n        return searchUrl!= null\n    }\n\n    fun search(query: String) {\n        searchUrl = mastodonApi.search(query)\n    }\n\n    fun getSearchUrl(): String? {\n        return searchUrl\n    }\n\n    fun getSearchUrl(callback: (String?) -> Unit) {\n        if (isSearching()) {\n            mastodonApi.getSearchUrl(searchUrl!!, callback)\n        } else {\n            callback(null)\n       "}], "metadata": {"task_id": "Tusky/65", "ground_truth": "            onEndSearch(searchUrl)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\BottomSheetActivity.kt"}}
{"prompt": "\n private fun makeNotificationBarTransparent() {", "choices": [{"text": " if (Build.VERSION.SDK\\_INT >= Build.VERSION\\_CODES.LOLLIPOP) {\n window.clearFlags(WindowManager.LayoutParams.FLAG\\_TRANSLUCENT\\_STATUS)\n window.addFlags(WindowManager.LayoutParams.FLAG\\_DRAWS\\_SYSTEM\\_BAR\\_BACKGROUNDS)\n window.statusBarColor = Color.TRANSPARENT\n }\n }\n\n"}], "metadata": {"task_id": "Tusky/66", "ground_truth": "        WindowCompat.setDecorFitsSystemWindows(window, false)\n        window.statusBarColor = statusBarColorTransparent\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\account\\AccountActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nprivate fun onRefresh() {", "choices": [{"text": "    // TODO: Implement this method to perform a refresh to the contents of the fragment\n    // You can also use swipeRefreshLayout.isRefreshing = false to set refreshing to false\n}\n\nprivate fun onItemClick(item: Item) {\n    // TODO: Implement this method to open the details activity of the selected item\n}\n\nprivate fun onItemLongClick(item: Item) {\n    // TODO: Implement this method to open the details activity of the selected item\n}\n\nprivate fun onItemDelete(item: Item) {\n    // TODO: Implement this method to delete the selected item"}], "metadata": {"task_id": "Tusky/67", "ground_truth": "        viewModel.refresh()\n        adapter.refreshContent()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\account\\AccountActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.show\nimport com.keylesspalace.tusky.entity.Account\nimport com.keylesspalace.tusky.R\nimport android.view.View\nprivate fun updateRemoteAccount() {\n        loadedAccount?.let { account ->\n            if (account.isRemote()) {\n                binding.accountRemoveView.show()\n                binding.accountRemoveView.setOnClickListener {", "choices": [{"text": "                    val dialog = AlertDialog.Builder(requireContext())\n                    dialog.setTitle(R.string.remove_account_title)\n                    dialog.setMessage(R.string.remove_account_message)\n                    dialog.setPositiveButton(R.string.remove_account_positive) { _, _ ->\n                        viewModel.removeAccount(account)\n                    }\n                    dialog.setNegativeButton(R.string.remove_account_negative) { _, _ -> }\n                    dialog.show()\n                }\n            } else {\n                binding.accountRemoveView.hide()\n            }\n        }\n    }\n\nprivate fun updateLocalAccount()"}], "metadata": {"task_id": "Tusky/72", "ground_truth": "                    openLink(account.url)\n                }\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\account\\AccountActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Account\nimport com.keylesspalace.tusky.R\nimport androidx.appcompat.app.AlertDialog\nprivate fun toggleBlock() {\n        if (viewModel.relationshipData.value?.data?.blocking != true) {\n            AlertDialog.Builder(this)\n                .setMessage(getString(R.string.dialog_block_warning, loadedAccount?.username))\n                .setPositiveButton(android.R.string.ok) { _, _ -> viewModel.changeBlockState() }\n                .setNegativeButton(android.R.string.cancel, null)", "choices": [{"text": "\n import com.keylesspalace.tusky.entity.Account\nimport com.keylesspalace.tusky.R\nimport androidx.appcompat.app.AlertDialog\nprivate fun toggleBlock() {\n        if (viewModel.relationshipData.value?.data?.blocking!= true) {\n            AlertDialog.Builder(this)\n               .setMessage(getString(R.string.dialog_block_warning, loadedAccount?.username))\n               .setPositiveButton(android.R.string.ok) { _, _ -> viewModel.changeBlockState() }\n               .setNegativeButton(android.R.string.cancel, null)\n               .show()\n        } else {\n            viewModel.changeBlockState()\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/77", "ground_truth": "                .show()\n        } else {\n            viewModel.changeBlockState()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\account\\AccountActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.view.showMuteAccountDialog\nimport com.keylesspalace.tusky.util.show\nimport com.keylesspalace.tusky.entity.Account\nprivate fun toggleMute() {\n        if (viewModel.relationshipData.value?.data?.muting != true) {\n            loadedAccount?.let {\n                showMuteAccountDialog(\n                    this,\n                    it.username\n                ) { notifications, duration ->\n                    viewModel.muteAccount(notifications, duration)\n                }", "choices": [{"text": "\n import com.keylesspalace.tusky.view.showMuteAccountDialog\nimport com.keylesspalace.tusky.util.show\nimport com.keylesspalace.tusky.entity.Account\nprivate fun toggleMute() {\n        if (viewModel.relationshipData.value?.data?.muting!= true) {\n            loadedAccount?.let {\n                showMuteAccountDialog(\n                    this,\n                    it.username\n                ) { notifications, duration ->\n                    viewModel.muteAccount(notifications, duration)\n                }\n            }\n        } else {\n            viewModel.unmuteAccount()\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/78", "ground_truth": "            }\n        } else {\n            viewModel.unmuteAccount()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\account\\AccountActivity.kt"}}
{"prompt": "\n import android.view.View\noverride fun onViewTag(tag: String) {", "choices": [{"text": "    // do something\n}\n"}], "metadata": {"task_id": "Tusky/80", "ground_truth": "        val intent = StatusListActivity.newHashtagIntent(this, tag)\n        startActivityWithSlideInAnimation(intent)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\account\\AccountActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Account\nimport android.view.View\nimport android.content.Intent\noverride fun onViewAccount(id: String) {\n        val intent = Intent(this, AccountActivity::class.java)", "choices": [{"text": "        intent.putExtra(\"id\", id)\n        startActivity(intent)\n    }\n\n"}], "metadata": {"task_id": "Tusky/81", "ground_truth": "        intent.putExtra(\"id\", id)\n        startActivityWithSlideInAnimation(intent)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\account\\AccountActivity.kt"}}
{"prompt": "\n import com.google.android.material.floatingactionbutton.FloatingActionButton\noverride fun getActionButton(): FloatingActionButton? {\n        return if (!blocking) {", "choices": [{"text": "            null\n        } else {\n            blockingActionButton\n        }\n    }\n"}], "metadata": {"task_id": "Tusky/82", "ground_truth": "            binding.accountFloatingActionButton\n        } else {\n            null\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\account\\AccountActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Account\nimport android.content.Intent\nimport android.content.Context\n @JvmStatic\n        fun getIntent(context: Context, accountId: String): Intent {\n            val intent = Intent(context, AccountActivity::class.java)", "choices": [{"text": "            intent.putExtra(ACCOUNT_ID, accountId)\n            return intent\n        }\n<file_sep>/app/src/main/java/com/keylesspalace/tusky/ui/account/AccountActivity.kt\npackage com.keylesspalace.tusky.ui.account\n\nimport android.os.Bundle\nimport android.view.Menu\nimport android.view.MenuItem\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.fragment.app.Fragment\nimport com.keylesspalace.tusky.R\nimport com.keylesspalace"}], "metadata": {"task_id": "Tusky/84", "ground_truth": "            intent.putExtra(KEY_ACCOUNT_ID, accountId)\n            return intent\n        }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\account\\AccountActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.BindingHolder\nimport com.keylesspalace.tusky.entity.Field\nimport com.keylesspalace.tusky.databinding.ItemAccountFieldBinding\nimport android.view.ViewGroup\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(\n        parent: ViewGroup,\n        viewType: Int\n    ): BindingHolder<ItemAccountFieldBinding> {\n        val binding = ItemAccountFieldBinding.inflate(\n            LayoutInflater.from(parent.context),", "choices": [{"text": "            parent,\n            false\n        )\n        return BindingHolder(binding)\n    }\n\n    override fun onBindViewHolder(holder: BindingHolder<ItemAccountFieldBinding>, position: Int) {\n        val field = getItem(position)\n        holder.binding.field = field\n        holder.binding.executePendingBindings()\n    }\n}<file_sep>/app/src/main/java/com/keylesspalace/tusky/ui/account/AccountViewModel.kt\npackage com.keylesspalace.tusky.ui.account\n\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle."}], "metadata": {"task_id": "Tusky/85", "ground_truth": "            parent,\n            false\n        )\n        return BindingHolder(binding)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\account\\AccountFieldAdapter.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.keylesspalace.tusky.util.Success\nimport com.keylesspalace.tusky.appstore.MuteEvent\nimport com.keylesspalace.tusky.appstore.DomainMuteEvent\nimport at.connyduck.calladapter.networkresult.fold\nimport androidx.lifecycle.viewModelScope\nfun blockDomain(instance: String) {\n        viewModelScope.launch {\n            mastodonApi.blockDomain(instance).fold({\n                eventHub.dispatch(DomainMuteEvent(instance))\n                val relation = relationshipData.value?.data\n                if (relation != null) {\n                    relationshipData.postValue(Success(relation.copy(blockingDomain = true)))\n                }", "choices": [{"text": "\n import kotlinx.coroutines.launch\nimport com.keylesspalace.tusky.util.Success\nimport com.keylesspalace.tusky.appstore.MuteEvent\nimport com.keylesspalace.tusky.appstore.DomainMuteEvent\nimport at.connyduck.calladapter.networkresult.fold\nimport androidx.lifecycle.viewModelScope\nfun blockDomain(instance: String) {\n        viewModelScope.launch {\n            mastodonApi.blockDomain(instance).fold({\n                eventHub.dispatch(DomainMuteEvent(instance))\n                val relation = relationshipData.value?.data\n                if (relation!= null) {\n                    relationshipData.postValue(Success(relation.copy(blockingDomain = true)))\n                }\n            }, {\n                eventHub.dispatch(MuteEvent(instance))\n            })\n        }\n    }\n\nfun unblockDomain(instance: String) {\n        viewModelScope.launch {\n            mastodonApi.unblockDomain(instance).fold({\n                eventHub.dispatch(DomainMuteEvent(instance))\n                val relation = relationshipData.value?.data\n                if (relation!= null) {\n                    relationshipData.postValue(Success(relation.copy(blockingDomain = false)))\n                }\n            }, {\n                eventHub.dispatch(MuteEvent(instance))\n            })\n        }\n    }\n\nfun blockUser"}], "metadata": {"task_id": "Tusky/90", "ground_truth": "            }, { e ->\n                Log.e(TAG, \"Error muting $instance\", e)\n            })\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\account\\AccountViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.keylesspalace.tusky.util.Success\nimport at.connyduck.calladapter.networkresult.fold\nimport androidx.lifecycle.viewModelScope\nfun unblockDomain(instance: String) {\n        viewModelScope.launch {\n            mastodonApi.unblockDomain(instance).fold({\n                val relation = relationshipData.value?.data\n                if (relation != null) {\n                    relationshipData.postValue(Success(relation.copy(blockingDomain = false)))\n                }", "choices": [{"text": "\n import kotlinx.coroutines.launch\nimport com.keylesspalace.tusky.util.Success\nimport at.connyduck.calladapter.networkresult.fold\nimport androidx.lifecycle.viewModelScope\nfun unblockDomain(instance: String) {\n        viewModelScope.launch {\n            mastodonApi.unblockDomain(instance).fold({\n                val relation = relationshipData.value?.data\n                if (relation!= null) {\n                    relationshipData.postValue(Success(relation.copy(blockingDomain = false)))\n                }\n            }, {\n                Log.e(\"unblockDomain\", it.message)\n            })\n        }\n    }\n\nfun blockDomain(instance: String) {\n        viewModelScope.launch {\n            mastodonApi.blockDomain(instance).fold({\n                val relation = relationshipData.value?.data\n                if (relation!= null) {\n                    relationshipData.postValue(Success(relation.copy(blockingDomain = true)))\n                }\n            }, {\n                Log.e(\"blockDomain\", it.message)\n            })\n        }\n    }\n\nfun muteDomain(instance: String) {\n        viewModelScope."}], "metadata": {"task_id": "Tusky/91", "ground_truth": "            }, { e ->\n                Log.e(TAG, \"Error unmuting $instance\", e)\n            })\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\account\\AccountViewModel.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.Loading\nimport com.keylesspalace.tusky.entity.Account\nprivate fun reload(isReload: Boolean = false) {\n        if (isDataLoading) {\n            return\n        }\n        accountId.let {\n            obtainAccount(isReload)", "choices": [{"text": "        }\n    }\n\nprivate fun obtainAccount(isReload: Boolean = false) {\n        isDataLoading = true\n        if (isReload) {\n            accountViewModel.reloadAccount()\n        } else {\n            accountViewModel.getAccount()\n        }\n        accountViewModel.accountLiveData.observe(this, Observer {\n            when (it) {\n                is Loading.Loading -> {\n                    showLoading()\n                }\n                is Loading.Success -> {\n                    hideLoading()\n                    it.data?.let {\n                        account = it\n                        accountViewModel.accountLiveData.value = Loading.Success(it)\n                    }\n                }\n                is Loading"}], "metadata": {"task_id": "Tusky/93", "ground_truth": "            if (!isSelf) {\n                obtainRelationship(isReload)\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\account\\AccountViewModel.kt"}}
{"prompt": " import com.keylesspalace.tusky.entity.Account\nval accountData\nvar accountId String\nval activeAccount\nfun setAccountInfo(accountId: String) {\n        this.accountId = accountId", "choices": [{"text": "        accountData = Account.getAccountData(accountId)\n        activeAccount = Account.getAccount(accountId)\n}\n"}], "metadata": {"task_id": "Tusky/94", "ground_truth": "        this.isSelf = activeAccount.accountId == accountId\n        reload(false)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\account\\AccountViewModel.kt"}}
{"prompt": "\n import android.content.Context\noverride fun onAttach(context: Context) {", "choices": [{"text": "    super.onAttach(context)\n    if (context is OnFragmentInteractionListener) {\n        mListener = context\n    } else {\n        throw RuntimeException(context.toString() + \" must implement OnFragmentInteractionListener\")\n    }\n}\n\n"}], "metadata": {"task_id": "Tusky/95", "ground_truth": "        super.onAttach(context)\n        selectListener = context as? ListSelectionListener\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\account\\list\\ListSelectionFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.CoroutineStart\nimport com.keylesspalace.tusky.util.show\nimport androidx.lifecycle.lifecycleScope\nimport android.view.View\nprivate fun getProgressBarJob(progressView: View, delayMs: Long) = this.lifecycleScope.launch(\n        start = CoroutineStart.LAZY\n    ) {\n        try {\n            delay(delayMs)\n            progressView.show()", "choices": [{"text": "        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n    }\n\nprivate fun getProgressBarJob(progressView: View) = this.lifecycleScope.launch(\n        start = CoroutineStart.LAZY\n    ) {\n        try {\n            delay(1000)\n            progressView.show()\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n    }\n\nprivate fun getProgressBarJob(progressView: View, delayMs: Long, onFinish: () -> Unit) = this.lifecycleScope.launch(\n        start = CoroutineStart.LAZY"}], "metadata": {"task_id": "Tusky/97", "ground_truth": "            awaitCancellation()\n        } finally {\n            progressView.hide()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\account\\list\\ListSelectionFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {", "choices": [{"text": "    super.onDestroyView()\n    binding = null\n}\n\n"}], "metadata": {"task_id": "Tusky/98", "ground_truth": "        super.onDestroyView()\n        _binding = null\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\account\\list\\ListSelectionFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.show\nimport com.keylesspalace.tusky.util.hide\nimport android.view.View\nprivate fun load() {\n        binding.progressBar.show()\n        binding.listsView.hide()", "choices": [{"text": "        binding.errorView.hide()\n        binding.emptyView.hide()\n    }\n\n    private fun showError() {\n        binding.progressBar.hide()\n        binding.listsView.hide()\n        binding.errorView.show()\n        binding.emptyView.hide()\n    }\n\n    private fun showEmpty() {\n        binding.progressBar.hide()\n        binding.listsView.hide()\n        binding.errorView.hide()\n        binding.emptyView.show()\n    }\n\n    private fun showList() {\n        binding.progressBar.hide()\n        binding.listsView.show()\n        binding.errorView"}], "metadata": {"task_id": "Tusky/99", "ground_truth": "        binding.messageView.hide()\n        viewModel.load(accountId)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\account\\list\\ListSelectionFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.os.Bundle\nfun newInstance(accountId: String?): ListSelectionFragment {\n            val args = Bundle().apply {\n                putString(ARG_ACCOUNT_ID, accountId)", "choices": [{"text": "            }\n            val fragment = ListSelectionFragment()\n            fragment.arguments = args\n            return fragment\n        }\nclass ListSelectionFragment : Fragment() {\n    private var accountId: String? = null\n    private var listSelectionListener: ListSelectionListener? = null\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        accountId = arguments?.getString(ARG_ACCOUNT_ID)\n    }\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        return inflater.inflate(R.layout.fragment_list_selection, container, false)\n    }"}], "metadata": {"task_id": "Tusky/100", "ground_truth": "            }\n            return ListSelectionFragment().apply { arguments = args }\n        }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\account\\list\\ListSelectionFragment.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {", "choices": [{"text": "    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n    val button = findViewById<Button>(R.id.button)\n    button.setOnClickListener {\n        val intent = Intent(this, SecondActivity::class.java)\n        startActivity(intent)\n    }\n}\n"}], "metadata": {"task_id": "Tusky/101", "ground_truth": "        super.onCreate(savedInstanceState)\n        viewModel.accountId = arguments?.getString(ACCOUNT_ID_ARG)!!\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\account\\media\\AccountMediaFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onMenuItemSelected(menuItem: MenuItem): Boolean {\n        return when (menuItem.itemId) {\n            R.id.action_refresh -> {\n                binding.swipeRefreshLayout.isRefreshing = true\n                refreshContent()", "choices": [{"text": "                true\n            }\n            else -> super.onMenuItemSelected(menuItem)\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/103", "ground_truth": "                true\n            }\n            else -> false\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\account\\media\\AccountMediaFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.viewdata.AttachmentViewData\nfun revealAttachment(viewData: AttachmentViewData) {\n        val position = attachmentData.indexOfFirst { oldViewData -> oldViewData.id == viewData.id }", "choices": [{"text": "        val oldViewData = attachmentData[position]\n        val newViewData = viewData.copy(isRevealed = true)\n        attachmentData[position] = newViewData\n        val oldView = attachmentView[position]\n        val newView = oldView.copy(isRevealed = true)\n        attachmentView[position] = newView\n        val oldViewItem = attachmentViewItem[position]\n        val newViewItem = oldViewItem.copy(isRevealed = true)\n        attachmentViewItem[position] = newViewItem\n        val oldViewItemData = attachmentViewItemData[position]"}], "metadata": {"task_id": "Tusky/107", "ground_truth": "        attachmentData[position] = viewData.copy(isRevealed = true)\n        currentSource?.invalidate()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\account\\media\\AccountMediaViewModel.kt"}}
{"prompt": "\n override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec)", "choices": [{"text": "        val width = MeasureSpec.getSize(widthMeasureSpec)\n        val height = MeasureSpec.getSize(heightMeasureSpec)\n        setMeasuredDimension(width, height)\n    }\n}\n\n"}], "metadata": {"task_id": "Tusky/108", "ground_truth": "        val width = measuredWidth\n        setMeasuredDimension(width, width)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\account\\media\\SquareImageView.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.content.Intent\nimport android.content.Context\nfun newIntent(context: Context, type: Type, id: String? = null): Intent {\n            return Intent(context, AccountListActivity::class.java).apply {\n                putExtra(EXTRA_TYPE, type)", "choices": [{"text": "                putExtra(EXTRA_ID, id)\n            }\n        }\n\nclass AccountListActivity : AppCompatActivity() {\n\n    private lateinit var mAccountList: RecyclerView\n    private lateinit var mAccountAdapter: AccountAdapter\n    private lateinit var mAccountViewModel: AccountViewModel\n    private lateinit var mAccountViewModelFactory: AccountViewModelFactory\n    private lateinit var mAccountRepository: AccountRepository\n    private lateinit var mAccountListViewModelFactory: AccountListViewModelFactory\n    private lateinit var mAccountListViewModel: AccountListViewModel\n    private lateinit var mAccountListRepository: AccountListRepository\n    private lateinit var mAccountListObserver: Observer<List<Account>>"}], "metadata": {"task_id": "Tusky/109", "ground_truth": "                putExtra(EXTRA_ID, id)\n            }\n        }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\accountlist\\AccountListActivity.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)", "choices": [{"text": "        setContentView(R.layout.activity_main)\n        val button = findViewById<Button>(R.id.button)\n        button.setOnClickListener {\n            val intent = Intent(this, SecondActivity::class.java)\n            startActivity(intent)\n        }\n    }\n}\n"}], "metadata": {"task_id": "Tusky/110", "ground_truth": "        type = requireArguments().getSerializable(ARG_TYPE) as Type\n        id = requireArguments().getString(ARG_ID)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\accountlist\\AccountListFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.BaseActivity\nimport android.view.View\noverride fun onViewTag(tag: String) {\n        (activity as BaseActivity?)\n            ?.startActivityWithSlideInAnimation(", "choices": [{"text": "\n import com.keylesspalace.tusky.BaseActivity\nimport android.view.View\noverride fun onViewTag(tag: String) {\n        (activity as BaseActivity?)\n           ?.startActivityWithSlideInAnimation(Intent(activity, tag))\n    }\n\n"}], "metadata": {"task_id": "Tusky/111", "ground_truth": "                StatusListActivity.newHashtagIntent(requireContext(), tag)\n            )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\accountlist\\AccountListFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.components.account.AccountActivity\nimport com.keylesspalace.tusky.BaseActivity\nimport android.view.View\noverride fun onViewAccount(id: String) {\n        (activity as BaseActivity?)?.let {\n            val intent = AccountActivity.getIntent(it, id)", "choices": [{"text": "            it.startActivity(intent)\n        }\n    }\n"}], "metadata": {"task_id": "Tusky/112", "ground_truth": "            it.startActivityWithSlideInAnimation(intent)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\accountlist\\AccountListFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.lifecycleScope\nimport androidx.lifecycle.Lifecycle\noverride fun onMute(mute: Boolean, id: String, position: Int, notifications: Boolean) {\n        viewLifecycleOwner.lifecycleScope.launch {\n            try {\n                if (!mute) {\n                    api.unmuteAccount(id)\n                } else {\n                    api.muteAccount(id, notifications)\n                }\n                onMuteSuccess(mute, id, position, notifications)", "choices": [{"text": "            } catch (e: Exception) {\n                onMuteError(e, id, position, notifications)\n            }\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/113", "ground_truth": "            } catch (_: Throwable) {\n                onMuteFailure(mute, id, notifications)\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\accountlist\\AccountListFragment.kt"}}
{"prompt": "\n private fun onMuteFailure(mute: Boolean, accountId: String, notifications: Boolean) {\n        val verb = if (mute) {\n            if (notifications) {\n                \"mute (notifications = true)\"\n            } else {\n                \"mute (notifications = false)\"\n            }", "choices": [{"text": "        } else {\n            \"unmute\"\n        }\n        Log.d(TAG, \"onMuteFailure: $verb failed for account $accountId\")\n    }\n}\n\n"}], "metadata": {"task_id": "Tusky/114", "ground_truth": "        } else {\n            \"unmute\"\n        }\n        Log.e(TAG, \"Failed to $verb account id $accountId\")\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\accountlist\\AccountListFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.lifecycleScope\nimport androidx.lifecycle.Lifecycle\noverride fun onBlock(block: Boolean, id: String, position: Int) {\n        viewLifecycleOwner.lifecycleScope.launch {\n            try {\n                if (!block) {\n                    api.unblockAccount(id)\n                } else {\n                    api.blockAccount(id)\n                }\n                onBlockSuccess(block, id, position)", "choices": [{"text": "            } catch (e: Exception) {\n                onBlockError(block, id, position)\n            }\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/115", "ground_truth": "            } catch (_: Throwable) {\n                onBlockFailure(block, id)\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\accountlist\\AccountListFragment.kt"}}
{"prompt": "\n private fun onBlockFailure(block: Boolean, accountId: String) {\n        val verb = if (block) {\n            \"block\"", "choices": [{"text": "        } else {\n            \"unblock\"\n        }\n        val message = \"Failed to $verb account $accountId\"\n        Log.e(TAG, message)\n        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()\n    }\n}\n"}], "metadata": {"task_id": "Tusky/116", "ground_truth": "        } else {\n            \"unblock\"\n        }\n        Log.e(TAG, \"Failed to $verb account accountId $accountId\")\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\accountlist\\AccountListFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nprivate fun onRespondToFollowRequestSuccess(position: Int) {", "choices": [{"text": "    val followRequest = followRequests[position]\n    followRequests.removeAt(position)\n    adapter.notifyItemRemoved(position)\n    adapter.notifyItemRangeChanged(position, followRequests.size)\n    val followRequestCount = followRequests.size\n    if (followRequestCount == 0) {\n        followRequestsEmpty.visibility = View.VISIBLE\n        followRequestsList.visibility = View.GONE\n    }\n    if (followRequestCount == 1) {\n        followRequestsEmpty.text = getString(R.string.follow_request_empty)\n    } else {\n        followRequestsEmpty.text = getString"}], "metadata": {"task_id": "Tusky/117", "ground_truth": "        val followRequestsAdapter = adapter as FollowRequestsAdapter\n        followRequestsAdapter.removeItem(position)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\accountlist\\AccountListFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.show\nimport com.keylesspalace.tusky.R\nimport android.view.View\nimport android.util.Log\nprivate fun onFetchAccountsFailure(throwable: Throwable) {\n        fetching = false\n        binding.swipeRefreshLayout.isRefreshing = false\n        Log.e(TAG, \"Fetch failure\", throwable)\n\n        if (adapter.itemCount == 0) {\n            binding.messageView.show()\n            binding.messageView.setup(throwable) {", "choices": [{"text": "                fetchAccounts()\n            }\n        }\n    }\n\nprivate fun onFetchAccountsSuccess(accounts: List<Account>) {\n        fetching = false\n        binding.swipeRefreshLayout.isRefreshing = false\n        adapter.submitList(accounts)\n        binding.messageView.hide()\n    }\n\nprivate fun onFetchAccounts(accounts: List<Account>) {\n        fetching = false\n        binding.swipeRefreshLayout.isRefreshing = false\n        adapter.submitList(accounts)\n        binding.messageView.hide()\n    }\n\nprivate fun onFetchAccounts() {\n        fetching = true\n        binding.swipeRefreshLayout"}], "metadata": {"task_id": "Tusky/120", "ground_truth": "                binding.messageView.hide()\n                this.fetchAccounts(null)\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\accountlist\\AccountListFragment.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\nfinal override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\n        if (getItemViewType(position) == VIEW_TYPE_ACCOUNT) {\n            @Suppress(\"UNCHECKED_CAST\")", "choices": [{"text": "            val accountViewHolder = holder as AccountViewHolder\n            accountViewHolder.bind(accounts[position])\n        } else {\n            @Suppress(\"UNCHECKED_CAST\")\n            val loadingViewHolder = holder as LoadingViewHolder\n            loadingViewHolder.bind()\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/122", "ground_truth": "            this.onBindAccountViewHolder(holder as AVH, position)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\accountlist\\adapter\\AccountAdapter.kt"}}
{"prompt": "\n override fun getItemViewType(position: Int): Int {\n        return if (position == accountList.size && bottomLoading) {", "choices": [{"text": "            LOADING_VIEW\n        } else {\n            NORMAL_VIEW\n        }\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\n        return if (viewType == NORMAL_VIEW) {\n            val view = LayoutInflater.from(parent.context).inflate(R.layout.item_account, parent, false)\n            AccountViewHolder(view)\n        } else {\n            val view = LayoutInflater.from(parent.context).inflate(R.layout.item_loading, parent, false)\n            LoadingViewHolder(view)\n        }\n    }\n\n    override fun onBindViewHolder(holder"}], "metadata": {"task_id": "Tusky/125", "ground_truth": "            VIEW_TYPE_FOOTER\n        } else {\n            VIEW_TYPE_ACCOUNT\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\accountlist\\adapter\\AccountAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.TimelineAccount\nfun update(newAccounts: List<TimelineAccount>) {", "choices": [{"text": "    val oldAccounts = TimelineAccount.all()\n    val newAccountIds = newAccounts.map { it.id }\n    val oldAccountIds = oldAccounts.map { it.id }\n    val toDelete = oldAccountIds.filter {!newAccountIds.contains(it) }\n    val toUpdate = newAccounts.filter { oldAccountIds.contains(it.id) }\n    val toInsert = newAccounts.filter {!oldAccountIds.contains(it.id) }\n    toDelete.forEach { it.delete() }\n    toUpdate.forEach { it.update() }\n    to"}], "metadata": {"task_id": "Tusky/126", "ground_truth": "        accountList = removeDuplicates(newAccounts)\n        notifyDataSetChanged()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\accountlist\\adapter\\AccountAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.TimelineAccount\nfun removeItem(position: Int): TimelineAccount? {\n        if (position < 0 || position >= accountList.size) {\n            return null", "choices": [{"text": "        }\n        val item = accountList[position]\n        accountList.removeAt(position)\n        return item\n    }\n\nfun addItem(item: TimelineAccount) {\n        accountList.add(item)\n    }\n\nfun updateItem(position: Int, item: TimelineAccount) {\n        if (position < 0 || position >= accountList.size) {\n            return\n        }\n        accountList[position] = item\n    }\n\nfun getItem(position: Int): TimelineAccount? {\n        if (position < 0 || position >= accountList.size) {\n            return null\n        }\n       "}], "metadata": {"task_id": "Tusky/129", "ground_truth": "        }\n        val account = accountList.removeAt(position)\n        notifyItemRemoved(position)\n        return account\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\accountlist\\adapter\\AccountAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.TimelineAccount\nfun addItem(account: TimelineAccount, position: Int) {\n        if (position < 0 || position > accountList.size) {", "choices": [{"text": "            throw IndexOutOfBoundsException(\"position must be between 0 and ${accountList.size}\")\n        }\n        accountList.add(position, account)\n        notifyItemInserted(position)\n    }\nfun removeItem(position: Int) {\n        if (position < 0 || position >= accountList.size) {\n            throw IndexOutOfBoundsException(\"position must be between 0 and ${accountList.size}\")\n        }\n        accountList.removeAt(position)\n        notifyItemRemoved(position)\n    }\nfun updateItem(account: TimelineAccount, position: Int) {\n        if (position < 0 || position >="}], "metadata": {"task_id": "Tusky/130", "ground_truth": "            return\n        }\n        accountList.add(position, account)\n        notifyItemInserted(position)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\accountlist\\adapter\\AccountAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.BindingHolder\nimport com.keylesspalace.tusky.databinding.ItemBlockedUserBinding\nimport android.view.ViewGroup\nimport android.view.LayoutInflater\noverride fun createAccountViewHolder(parent: ViewGroup): BindingHolder<ItemBlockedUserBinding> {\n        val binding = ItemBlockedUserBinding.inflate(\n            LayoutInflater.from(parent.context),", "choices": [{"text": "            parent,\n            false\n        )\n        return BindingHolder(binding)\n    }\n\noverride fun bindAccountViewHolder(binding: BindingHolder<ItemBlockedUserBinding>, item: BlockedUser) {\n        binding.binding.blockedUser = item\n    }\n}\n<file_sep>/app/src/main/java/com/keylesspalace/tusky/ui/account/AccountFragment.kt\npackage com.keylesspalace.tusky.ui.account\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android."}], "metadata": {"task_id": "Tusky/131", "ground_truth": "            parent,\n            false\n        )\n        return BindingHolder(binding)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\accountlist\\adapter\\BlocksAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.databinding.ItemFollowRequestBinding\nimport com.keylesspalace.tusky.adapter.FollowRequestViewHolder\nimport android.view.ViewGroup\nimport android.view.LayoutInflater\noverride fun createAccountViewHolder(parent: ViewGroup): FollowRequestViewHolder {\n        val binding = ItemFollowRequestBinding.inflate(\n            LayoutInflater.from(parent.context),\n            parent,\n            false\n        )\n        return FollowRequestViewHolder(", "choices": [{"text": "inding)\n    }\n\noverride fun bindAccountViewHolder(holder: FollowRequestViewHolder, item: FollowRequest) {\n        holder.binding.apply {\n            tvUsername.text = item.username\n            tvReason.text = item.reason\n            tvDate.text = item.date\n            tvStatus.text = item.status\n            tvStatus.setTextColor(\n                ContextCompat.getColor(\n                    tvStatus.context,\n                    if (item.status == \"Accepted\") R.color.green else R.color.red\n                )\n            )\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/134", "ground_truth": "            binding,\n            linkListener,\n            showHeader = false\n        )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\accountlist\\adapter\\FollowRequestsAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.BindingHolder\nimport com.keylesspalace.tusky.databinding.ItemFollowRequestsHeaderBinding\nimport com.keylesspalace.tusky.R\nimport android.view.ViewGroup\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(\n        parent: ViewGroup,\n        viewType: Int\n    ): BindingHolder<ItemFollowRequestsHeaderBinding> {\n        val binding = ItemFollowRequestsHeaderBinding.inflate(\n            LayoutInflater.from(parent.context),", "choices": [{"text": "            parent,\n            false\n        )\n        return BindingHolder(binding)\n    }\n\n    override fun onBindViewHolder(holder: BindingHolder<ItemFollowRequestsHeaderBinding>, position: Int) {\n        holder.binding.root.setOnClickListener {\n            onItemClick?.invoke(position)\n        }\n    }\n}<file_sep>/app/src/main/java/com/keylesspalace/tusky/ui/profile/ProfileFragment.kt\npackage com.keylesspalace.tusky.ui.profile\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android"}], "metadata": {"task_id": "Tusky/136", "ground_truth": "            parent,\n            false\n        )\n        return BindingHolder(binding)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\accountlist\\adapter\\FollowRequestsHeaderAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.BindingHolder\nimport com.keylesspalace.tusky.databinding.ItemMutedUserBinding\nimport android.view.ViewGroup\nimport android.view.LayoutInflater\noverride fun createAccountViewHolder(parent: ViewGroup): BindingHolder<ItemMutedUserBinding> {\n        val binding = ItemMutedUserBinding.inflate(\n            LayoutInflater.from(parent.context),", "choices": [{"text": "            parent,\n            false\n        )\n        return BindingHolder(binding)\n    }\n\noverride fun bindAccountViewHolder(binding: BindingHolder<ItemMutedUserBinding>, item: MutedUser) {\n        binding.binding.mutedUser = item\n    }\n}\n<file_sep>/app/src/main/java/com/keylesspalace/tusky/ui/account/AccountViewModel.kt\npackage com.keylesspalace.tusky.ui.account\n\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport"}], "metadata": {"task_id": "Tusky/137", "ground_truth": "            parent,\n            false\n        )\n        return BindingHolder(binding)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\accountlist\\adapter\\MutesAdapter.kt"}}
{"prompt": "\n fun updateMutingNotifications(id: String, mutingNotifications: Boolean, position: Int) {", "choices": [{"text": "-    val notification = notifications[position]\n-    notification.mutingNotifications = mutingNotifications\n-    notifications[position] = notification\n-    updateNotification(notification)\n+    val notification = notifications[id]\n+    notification?.mutingNotifications = mutingNotifications\n+    notifications[id] = notification\n+    updateNotification(notification)\n }\n \n fun updateNotification(notification: Notification) {\n     val notificationManager = getNotificationManager()\n     notificationManager.notify(notification.id, notification.toNotification())\n }\n \n fun getNotificationManager(): NotificationManager {\n     return get"}], "metadata": {"task_id": "Tusky/138", "ground_truth": "        mutingNotificationsMap[id] = mutingNotifications\n        notifyItemChanged(position)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\accountlist\\adapter\\MutesAdapter.kt"}}
{"prompt": "\nval mutingNotificationsMap\n fun updateMutingNotificationsMap(newMutingNotificationsMap: HashMap<String, Boolean>) {", "choices": [{"text": " mutingNotificationsMap = newMutingNotificationsMap\n }\n\n"}], "metadata": {"task_id": "Tusky/139", "ground_truth": "        mutingNotificationsMap.putAll(newMutingNotificationsMap)\n        notifyDataSetChanged()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\accountlist\\adapter\\MutesAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.BindingHolder\nimport com.keylesspalace.tusky.entity.Announcement\nimport com.keylesspalace.tusky.databinding.ItemAnnouncementBinding\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(\n        parent: ViewGroup,\n        viewType: Int\n    ): BindingHolder<ItemAnnouncementBinding> {\n        val binding = ItemAnnouncementBinding.inflate(\n            LayoutInflater.from(parent.context),", "choices": [{"text": "            parent,\n            false\n        )\n        return BindingHolder(binding)\n    }\n\n    override fun onBindViewHolder(holder: BindingHolder<ItemAnnouncementBinding>, position: Int) {\n        val announcement = getItem(position)\n        holder.binding.announcement = announcement\n        holder.binding.executePendingBindings()\n    }\n}<file_sep>/app/src/main/java/com/keylesspalace/tusky/ui/main/MainViewModel.kt\npackage com.keylesspalace.tusky.ui.main\n\nimport android.app.Application\nimport androidx."}], "metadata": {"task_id": "Tusky/140", "ground_truth": "            parent,\n            false\n        )\n        return BindingHolder(binding)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\announcements\\AnnouncementAdapter.kt"}}
{"prompt": " import com.keylesspalace.tusky.entity.Announcement\nval absoluteTimeFormatter\nfun updateList(items: List<Announcement>) {", "choices": [{"text": "    val adapter = AnnouncementAdapter(items)\n    recyclerView.adapter = adapter\n}\n\nfun updateList(item: Announcement) {\n    val adapter = recyclerView.adapter as AnnouncementAdapter\n    adapter.add(item)\n}\n\nfun updateList(item: Announcement, position: Int) {\n    val adapter = recyclerView.adapter as AnnouncementAdapter\n    adapter.add(item, position)\n}\n\nfun updateList(item: Announcement, position: Int, isUpdate: Boolean) {\n    val adapter = recyclerView.adapter as AnnouncementAdapter\n    adapter.add"}], "metadata": {"task_id": "Tusky/141", "ground_truth": "        this.items = items\n        notifyDataSetChanged()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\announcements\\AnnouncementAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onMenuItemSelected(menuItem: MenuItem): Boolean {\n        return when (menuItem.itemId) {\n            R.id.action_refresh -> {\n                binding.swipeRefreshLayout.isRefreshing = true\n                refreshAnnouncements()", "choices": [{"text": "                true\n            }\n            else -> super.onMenuItemSelected(menuItem)\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/143", "ground_truth": "                true\n            }\n            else -> false\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\announcements\\AnnouncementsActivity.kt"}}
{"prompt": "\n private fun refreshAnnouncements() {", "choices": [{"text": " val announcement = Announcement(\n \"Announcement 1\",\n \"Announcement 1 description\",\n \"Announcement 1 link\",\n \"Announcement 1 image\",\n \"Announcement 1 date\"\n )\n val announcement2 = Announcement(\n \"Announcement 2\",\n \"Announcement 2 description\",\n \"Announcement 2 link\",\n \"Announcement 2 image\",\n \"Announcement 2 date\"\n )\n val announcement3 = Announcement(\n \"Announcement 3\",\n \"Announcement 3 description\",\n \"Announcement "}], "metadata": {"task_id": "Tusky/144", "ground_truth": "        viewModel.load()\n        binding.swipeRefreshLayout.isRefreshing = true\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\announcements\\AnnouncementsActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.view.View\noverride fun openReactionPicker(announcementId: String, target: View) {", "choices": [{"text": "    val intent = Intent(target.context, ReactionPickerActivity::class.java)\n    intent.putExtra(EXTRA_ANNOUNCEMENT_ID, announcementId)\n    target.context.startActivity(intent)\n}\n\noverride fun openReactionPicker(announcementId: String, target: View, requestCode: Int) {\n    val intent = Intent(target.context, ReactionPickerActivity::class.java)\n    intent.putExtra(EXTRA_ANNOUNCEMENT_ID, announcementId)\n    target.context.startActivityForResult(intent, requestCode)\n}\n\noverride fun"}], "metadata": {"task_id": "Tusky/145", "ground_truth": "        currentAnnouncementId = announcementId\n        pickerDialog.showAsDropDown(target)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\announcements\\AnnouncementsActivity.kt"}}
{"prompt": "\n override fun onEmojiSelected(shortcode: String) {", "choices": [{"text": " // do something\n }\n })\n\n"}], "metadata": {"task_id": "Tusky/146", "ground_truth": "        viewModel.addReaction(currentAnnouncementId!!, shortcode)\n        pickerDialog.dismiss()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\announcements\\AnnouncementsActivity.kt"}}
{"prompt": "\n import android.view.View\noverride fun onViewTag(tag: String) {", "choices": [{"text": "    // do something\n}\n"}], "metadata": {"task_id": "Tusky/147", "ground_truth": "        val intent = StatusListActivity.newHashtagIntent(this, tag)\n        startActivityWithSlideInAnimation(intent)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\announcements\\AnnouncementsActivity.kt"}}
{"prompt": "\n private fun setupContentWarningField(startingContentWarning: String?) {\n        if (startingContentWarning != null) {\n            binding.composeContentWarningField.setText(startingContentWarning)", "choices": [{"text": "\n private fun setupContentWarningField(startingContentWarning: String?) {\n        if (startingContentWarning!= null) {\n            binding.composeContentWarningField.setText(startingContentWarning)\n        }\n    }\n\n    private fun setupContentWarningField() {\n        binding.composeContentWarningField.setText(\n            getString(\n                R.string.compose_content_warning_field_default_value\n            )\n        )\n    }\n\n    private fun setupContentWarningFieldListener() {\n        binding.composeContentWarningField.addTextChangedListener(object : TextWatcher {\n            override fun beforeTextChanged(\n                s: CharSequence,\n                start: Int,\n                count: Int,\n                after: Int\n            ) {\n            }\n\n            override fun onTextChanged(\n                s: CharSequence,\n                start: Int,\n                before: Int,\n                count"}], "metadata": {"task_id": "Tusky/148", "ground_truth": "        }\n        binding.composeContentWarningField.doOnTextChanged { _, _, _, _ -> updateVisibleCharactersLeft() }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\ComposeActivity.kt"}}
{"prompt": "\n private fun onScheduleClick() {\n        if (viewModel.scheduledAt.value == null) {", "choices": [{"text": "            viewModel.schedule()\n        } else {\n            viewModel.unschedule()\n        }\n    }\n}\n\n"}], "metadata": {"task_id": "Tusky/153", "ground_truth": "            binding.composeScheduleView.openPickDateDialog()\n        } else {\n            showScheduleView()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\ComposeActivity.kt"}}
{"prompt": "\nvar scheduleBehavior BottomSheetBehavior<*>\nvar composeOptionsBehavior BottomSheetBehavior<*>\nvar activeAccount AccountEntity\n private fun removePoll() {", "choices": [{"text": "        val poll = pollList.find { it.id == pollId }\n        poll?.let {\n            val index = pollList.indexOf(it)\n            pollList.removeAt(index)\n            adapter.notifyItemRemoved(index)\n        }\n    }\n\nprivate fun removePoll(poll: PollEntity) {\n        val index = pollList.indexOf(poll)\n        pollList.removeAt(index)\n        adapter.notifyItemRemoved(index)\n    }\n\nprivate fun removePoll(poll: PollEntity, position: Int) {\n        pollList.removeAt(position)\n        adapter.notify"}], "metadata": {"task_id": "Tusky/154", "ground_truth": "        viewModel.poll.value = null\n        binding.pollPreview.hide()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\ComposeActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.show\nimport androidx.core.view.isGone\nprivate fun onContentWarningChanged() {\n        val showWarning = binding.composeContentWarningBar.isGone", "choices": [{"text": "        binding.composeContentWarningBar.isGone = showWarning\n        binding.composeContentWarningBar.show(showWarning)\n    }\n\n"}], "metadata": {"task_id": "Tusky/157", "ground_truth": "        viewModel.contentWarningChanged(showWarning)\n        updateVisibleCharactersLeft()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\ComposeActivity.kt"}}
{"prompt": "\n import android.view.View\nprivate fun verifyScheduledTime(): Boolean {\n        return binding.composeScheduleView.verifyScheduledTime(", "choices": [{"text": "inding.composeScheduleView.getScheduledTime())\n    }\n\n"}], "metadata": {"task_id": "Tusky/158", "ground_truth": "            binding.composeScheduleView.getDateTime(viewModel.scheduledAt.value)\n        )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\ComposeActivity.kt"}}
{"prompt": "\n private fun onSendClicked() {\n        if (verifyScheduledTime()) {", "choices": [{"text": "            val intent = Intent(this, SendMessageActivity::class.java)\n            intent.putExtra(Constants.MESSAGE_TEXT, messageText.text.toString())\n            intent.putExtra(Constants.MESSAGE_TIME, messageTime.text.toString())\n            startActivity(intent)\n        }\n    }\n\n    private fun verifyScheduledTime(): Boolean {\n        val time = messageTime.text.toString()\n        if (time.isEmpty()) {\n            messageTime.error = getString(R.string.error_message_time_empty)\n            return false\n        }\n        return true\n    }\n}\n<file_sep>/app/src/"}], "metadata": {"task_id": "Tusky/159", "ground_truth": "            sendStatus()\n        } else {\n            showScheduleView()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\ComposeActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.setDrawableTint\nimport com.keylesspalace.tusky.R\nimport android.widget.ImageButton\nprivate fun enableButton(button: ImageButton, clickable: Boolean, colorActive: Boolean) {\n        button.isEnabled = clickable\n        setDrawableTint(\n            this,\n            button.drawable,\n            if (colorActive) {\n                android.R.attr.textColorTertiary", "choices": [{"text": "            } else {\n                android.R.attr.textColorSecondary\n            }\n        )\n    }\n\nclass SettingsFragment : Fragment() {\n    private lateinit var binding: FragmentSettingsBinding\n    private lateinit var viewModel: SettingsViewModel\n    private lateinit var adapter: SettingsAdapter\n    private lateinit var adapter2: SettingsAdapter\n    private lateinit var adapter3: SettingsAdapter\n    private lateinit var adapter4: SettingsAdapter\n    private lateinit var adapter5: SettingsAdapter\n    private lateinit var adapter6: SettingsAdapter\n    private lateinit var adapter7: SettingsAdapter\n    private lateinit var adapter8: SettingsAdapter\n    private lateinit var adapter9: SettingsAdapter\n    private lateinit"}], "metadata": {"task_id": "Tusky/160", "ground_truth": "            } else {\n                R.attr.textColorDisabled\n            }\n        )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\ComposeActivity.kt"}}
{"prompt": "\n import androidx.core.content.res.use\nprivate fun sanitizePickMediaDescription(description: String?): String? {\n        if (description == null) {\n            return null\n        }\n\n        // The Gboard android keyboard attaches this text whenever the user\n        // pastes something from the keyboard's suggestion bar.\n        // Due to different end user locales, the exact text may vary, but at\n        // least in version 13.4.08, all of the translations contained the\n        // string \"Gboard\".\n        if (\"Gboard\" in description) {", "choices": [{"text": "            return null\n        }\n\n        // The Gboard android keyboard attaches this text whenever the user\n        // pastes something from the keyboard's suggestion bar.\n        // Due to different end user locales, the exact text may vary, but at\n        // least in version 13.4.08, all of the translations contained the\n        // string \"Gboard\".\n        if (\"Gboard\" in description) {\n            return null\n        }\n\n        // The Gboard android keyboard attaches this text whenever the user\n        // pastes something from the keyboard's suggestion bar.\n        // Due to different end user locales, the exact text"}], "metadata": {"task_id": "Tusky/161", "ground_truth": "            return null\n        }\n\n        return description\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\ComposeActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.view.MenuItem\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\n        if (item.itemId == android.R.id.home) {\n            handleCloseButton()", "choices": [{"text": "            return true\n        }\n        return super.onOptionsItemSelected(item)\n    }\n\n"}], "metadata": {"task_id": "Tusky/162", "ground_truth": "            return true\n        }\n\n        return super.onOptionsItemSelected(item)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\ComposeActivity.kt"}}
{"prompt": "\n private fun deleteDraftAndFinish() {", "choices": [{"text": " val intent = Intent()\n intent.putExtra(EXTRA\\_DRAFT\\_ID, draftId)\n setResult(Activity.RESULT\\_OK, intent)\n finish()\n }\n}\n\n"}], "metadata": {"task_id": "Tusky/165", "ground_truth": "        viewModel.deleteDraft()\n        finishWithoutSlideOutAnimation()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\ComposeActivity.kt"}}
{"prompt": "\n private fun resetSchedule() {", "choices": [{"text": " mTimer?.cancel()\n mTimer = null\n }\n\n private fun startSchedule() {\n mTimer = Timer()\n mTimer!!.schedule(object : TimerTask() {\n override fun run() {\n mHandler.post {\n // do something\n }\n }, 0, 1000)\n }\n}\n\n"}], "metadata": {"task_id": "Tusky/168", "ground_truth": "        viewModel.updateScheduledAt(null)\n        scheduleBehavior.state = BottomSheetBehavior.STATE_HIDDEN\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\ComposeActivity.kt"}}
{"prompt": "\n import com.canhub.cropper.options\nimport android.content.Intent\nimport android.content.Context\n @JvmStatic\n        fun startIntent(context: Context, options: ComposeOptions): Intent {\n            return Intent(context, ComposeActivity::class.java).apply {", "choices": [{"text": "                putExtra(ComposeActivity.EXTRA_OPTIONS, options)\n            }\n        }\n"}], "metadata": {"task_id": "Tusky/169", "ground_truth": "                putExtra(COMPOSE_OPTIONS_EXTRA, options)\n            }\n        }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\ComposeActivity.kt"}}
{"prompt": "\n private fun isMentionOrHashtagAllowedCharacter(character: Char): Boolean {\n        return Character.isLetterOrDigit(character) || character == '_' || // simple usernames", "choices": [{"text": "                character == '#' || character == '@' || character == '-' || // hashtags\n                character == '.' || character == '!' || character == '?' || // mentions\n                character == ':' || character == ';' || character == '\\'' || // emojis\n                character =='' || character == ',' || character == '/' || // punctuation\n                character == '`' || character == '~' || character == '|' || // symbols\n                character == '(' || character == ')' || character == '[' || // brackets\n                character == ']' || character == '{' || character == '}' || // braces\n                character == '<' || character == '"}], "metadata": {"task_id": "Tusky/172", "ground_truth": "            character == '-' || // extended usernames\n            character == '.' // domain dot\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\ComposeTokenizer.kt"}}
{"prompt": "\n override fun findTokenEnd(text: CharSequence, cursor: Int): Int {\n        var i = cursor\n        val length = text.length\n        while (i < length) {\n            if (text[i] == ' ') {\n                return i\n            } else {", "choices": [{"text": "\n override fun findTokenEnd(text: CharSequence, cursor: Int): Int {\n        var i = cursor\n        val length = text.length\n        while (i < length) {\n            if (text[i] =='') {\n                return i\n            } else {\n                i++\n            }\n        }\n        return length\n    }\n}\n\nclass Tokenizer(private val tokenizer: Tokenizer) : Tokenizer {\n    override fun findTokenStart(text: CharSequence, cursor: Int): Int {\n        return tokenizer.findTokenStart(text, cursor)\n    }\n\n    override fun findTokenEnd(text: CharSequence, cursor: Int): Int {\n        return tokenizer.findTokenEnd(text, cursor)\n    }\n}\n\nclass TokenizerImpl : Tokenizer {\n    override fun findTokenStart(text: CharSequence, cursor: Int): Int {\n        var i = cursor\n       "}], "metadata": {"task_id": "Tusky/173", "ground_truth": "                i++\n            }\n        }\n        return length\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\ComposeTokenizer.kt"}}
{"prompt": "\n import android.text.TextUtils\nimport android.text.Spanned\nimport android.text.SpannableString\noverride fun terminateToken(text: CharSequence): CharSequence {\n        var i = text.length\n        while (i > 0 && text[i - 1] == ' ') {\n            i--\n        }\n        return if (i > 0 && text[i - 1] == ' ') {\n            text\n        } else if (text is Spanned) {\n            val s = SpannableString(\"$text \")\n            TextUtils.copySpansFrom(text, 0, text.length, Object::class.java, s, 0)", "choices": [{"text": "\n import android.text.TextUtils\nimport android.text.Spanned\nimport android.text.SpannableString\noverride fun terminateToken(text: CharSequence): CharSequence {\n        var i = text.length\n        while (i > 0 && text[i - 1] =='') {\n            i--\n        }\n        return if (i > 0 && text[i - 1] =='') {\n            text\n        } else if (text is Spanned) {\n            val s = SpannableString(\"$text \")\n            TextUtils.copySpansFrom(text, 0, text.length, Object::class.java, s, 0)\n            s\n        } else {\n            \"$text \"\n        }\n    }\n<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\nimport com.example.myapplication.databinding.ActivityMainBinding\n\nclass MainActivity : AppCompatActivity() {\n    private lateinit var binding: ActivityMainBinding\n    override"}], "metadata": {"task_id": "Tusky/174", "ground_truth": "            s\n        } else {\n            \"$text \"\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\ComposeTokenizer.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.update\nimport com.keylesspalace.tusky.entity.Attachment\nimport com.keylesspalace.tusky.components.compose.ComposeActivity.QueuedMedia\nimport android.net.Uri\nprivate fun addUploadedMedia(\n        id: String,\n        type: QueuedMedia.Type,\n        uri: Uri,\n        description: String?,\n        focus: Attachment.Focus?\n    ) {\n        media.update { mediaList ->\n            val mediaItem = QueuedMedia(\n                localId = mediaUploader.getNewLocalMediaId(),\n                uri = uri,\n                type = type,\n                mediaSize = 0,\n                uploadPercent = -1,\n                id = id,\n                description = description,\n                focus = focus,", "choices": [{"text": "                isUploading = true\n            )\n            mediaList.add(mediaItem)\n        }\n    }\n\nprivate fun removeUploadedMedia(id: String) {\n    media.update { mediaList ->\n        mediaList.find { it.id == id }?.let { mediaItem ->\n            mediaList.remove(mediaItem)\n        }\n    }\n}\n\nprivate fun updateUploadedMedia(id: String, mediaSize: Long, uploadPercent: Int) {\n    media.update { mediaList ->\n        mediaList.find { it.id == id }?.let { mediaItem ->\n            mediaItem."}], "metadata": {"task_id": "Tusky/175", "ground_truth": "                state = QueuedMedia.State.PUBLISHED\n            )\n            mediaList + mediaItem\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\ComposeViewModel.kt"}}
{"prompt": "\n fun contentWarningChanged(value: Boolean) {", "choices": [{"text": " contentWarning = value\n }\n\n @get:Bindable\n var contentAdult: Boolean = false\n fun contentAdultChanged(value: Boolean) {\n contentAdult = value\n }\n\n @get:Bindable\n var contentViolence: Boolean = false\n fun contentViolenceChanged(value: Boolean) {\n contentViolence = value\n }\n\n @get:Bindable\n var contentSex: Boolean = false\n fun contentSexChanged(value: Boolean) {\n contentSex = value\n }\n\n @get:Bindable\n var contentNudity: Boolean = false"}], "metadata": {"task_id": "Tusky/178", "ground_truth": "        showContentWarning.value = value\n        contentWarningStateChanged = true\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\ComposeViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun deleteDraft() {\n        viewModelScope.launch {", "choices": [{"text": "            val draft = draftDao.getDraft()\n            draftDao.deleteDraft(draft)\n        }\n    }\n\nfun deleteDraft(draft: Draft) {\n        viewModelScope.launch {\n            draftDao.deleteDraft(draft)\n        }\n    }\n\nfun deleteDraft(draft: Draft, callback: (Boolean) -> Unit) {\n        viewModelScope.launch {\n            draftDao.deleteDraft(draft)\n            callback(true)\n        }\n    }\n\nfun deleteDraft(draft: Draft, callback: (Boolean) -> Unit, error: (Throwable) -> Unit) {\n        viewModelScope.launch"}], "metadata": {"task_id": "Tusky/179", "ground_truth": "            if (draftId != 0) {\n                draftHelper.deleteDraftAndAttachments(draftId)\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\ComposeViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.first\nfun shouldShowSaveDraftDialog(): Boolean {\n        // if any of the media files need to be downloaded first it could take a while, so show a loading dialog\n        return media.value.any { mediaValue ->", "choices": [{"text": "            mediaValue.isDownloaded.not() && mediaValue.isMediaFile.not()\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/180", "ground_truth": "            mediaValue.uri.scheme == \"https\"\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\ComposeViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.update\nimport com.keylesspalace.tusky.components.compose.ComposeActivity.QueuedMedia\nprivate fun updateMediaItem(localId: Int, mutator: (QueuedMedia) -> QueuedMedia) {\n        media.update { mediaList ->\n            mediaList.map { mediaItem ->\n                if (mediaItem.localId == localId) {\n                    mutator(mediaItem)\n                } else {", "choices": [{"text": "                    mediaItem\n                }\n            }\n        }\n    }\n\nprivate fun updateMediaItem(localId: Int, mutator: (QueuedMedia) -> QueuedMedia) {\n        media.update { mediaList ->\n            mediaList.map { mediaItem ->\n                if (mediaItem.localId == localId) {\n                    mutator(mediaItem)\n                } else {\n                    mediaItem\n                }\n            }\n        }\n    }\n\nprivate fun updateMediaItem(localId: Int, mutator: (QueuedMedia) -> QueuedMedia) {\n        media.update { mediaList ->\n            mediaList.map"}], "metadata": {"task_id": "Tusky/181", "ground_truth": "                    mediaItem\n                }\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\ComposeViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.update\nfun updateDescription(localId: Int, description: String) {\n        updateMediaItem(localId) { mediaItem ->", "choices": [{"text": "            mediaItem.description = description\n        }\n    }\n\nfun updateMediaItem(localId: Int, update: (MediaItem) -> Unit) {\n        val mediaItem = mediaItems.find { it.localId == localId }?: return\n        update(mediaItem)\n        mediaItems = mediaItems.update {\n            it.find { it.localId == localId }?.let { update(it) }?: it\n        }\n    }\n\nfun updateMediaItem(localId: Int, update: (MediaItem) -> Unit) {\n        val mediaItem = mediaItems.find { it"}], "metadata": {"task_id": "Tusky/182", "ground_truth": "            mediaItem.copy(description = description)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\ComposeViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.update\nimport com.keylesspalace.tusky.entity.Attachment\nfun updateFocus(localId: Int, focus: Attachment.Focus) {\n        updateMediaItem(localId) { mediaItem ->", "choices": [{"text": "            mediaItem.focus = focus\n        }\n    }\n\nfun updateMediaItem(localId: Int, update: (MediaItem) -> Unit) {\n        val mediaItem = mediaItems.find { it.localId == localId }\n        if (mediaItem!= null) {\n            update(mediaItem)\n        }\n    }\n\nfun updateMediaItems(update: (List<MediaItem>) -> Unit) {\n        update(mediaItems)\n    }\n\nfun updateMediaItem(localId: Int, update: (MediaItem) -> Unit) {\n        val mediaItem = mediaItems.find"}], "metadata": {"task_id": "Tusky/183", "ground_truth": "            mediaItem.copy(focus = focus)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\ComposeViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.update\nfun updateScheduledAt(newScheduledAt: String?) {\n        if (newScheduledAt != scheduledAt.value) {", "choices": [{"text": "\n import kotlinx.coroutines.flow.update\nfun updateScheduledAt(newScheduledAt: String?) {\n        if (newScheduledAt!= scheduledAt.value) {\n            scheduledAt.update { newScheduledAt }\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/184", "ground_truth": "            hasScheduledTimeChanged = true\n        }\n\n        scheduledAt.value = newScheduledAt\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\ComposeViewModel.kt"}}
{"prompt": "\n fun addChoice() {", "choices": [{"text": " val choice = Choice(\n question = question,\n answer = answer,\n )\n choices.add(choice)\n }\n\n fun addQuestion() {\n val question = Question(\n question = question,\n answer = answer,\n )\n questions.add(question)\n }\n\n fun addAnswer() {\n val answer = Answer(\n question = question,\n answer = answer,\n )\n answers.add(answer)\n }\n\n fun addQuestionAnswer() {\n val questionAnswer = QuestionAnswer(\n question = question,\n answer = answer,\n )\n questionAnswers.add(questionAnswer"}], "metadata": {"task_id": "Tusky/185", "ground_truth": "        options.add(\"\")\n        notifyItemInserted(options.size - 1)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\dialog\\AddPollOptionsAdapter.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {", "choices": [{"text": "    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n    val button = findViewById<Button>(R.id.button)\n    button.setOnClickListener {\n        val intent = Intent(this, SecondActivity::class.java)\n        startActivity(intent)\n    }\n}\n"}], "metadata": {"task_id": "Tusky/186", "ground_truth": "        super.onCreate(savedInstanceState)\n        setStyle(STYLE_NORMAL, R.style.TuskyDialogFragmentStyle)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\dialog\\CaptionDialog.kt"}}
{"prompt": "\n import kotlinx.coroutines.cancel\nfun cancelUploadScope(vararg localMediaIds: Int) {\n        localMediaIds.forEach { localId ->", "choices": [{"text": "            val scope = uploadScopeMap[localId]\n            scope?.cancel()\n        }\n    }\n"}], "metadata": {"task_id": "Tusky/193", "ground_truth": "            uploads.remove(localId)?.scope?.cancel()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\MediaUploader.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Status\nimport com.keylesspalace.tusky.R\nfun setStatusVisibility(visibility: Status.Visibility) {\n        val selectedButton = when (visibility) {\n            Status.Visibility.PUBLIC ->\n                R.id.publicRadioButton\n            Status.Visibility.UNLISTED ->\n                R.id.unlistedRadioButton\n            Status.Visibility.PRIVATE ->\n                R.id.privateRadioButton\n            Status.Visibility.DIRECT ->\n                R.id.directRadioButton\n            else ->", "choices": [{"text": "                R.id.publicRadioButton\n        }\n        val selectedButton2 = when (visibility) {\n            Status.Visibility.PUBLIC ->\n                R.id.publicRadioButton2\n            Status.Visibility.UNLISTED ->\n                R.id.unlistedRadioButton2\n            Status.Visibility.PRIVATE ->\n                R.id.privateRadioButton2\n            Status.Visibility.DIRECT ->\n                R.id.directRadioButton2\n            else ->\n                R.id.publicRadioButton2\n        }\n        val selectedButton3 = when (visibility) {\n            Status.Visibility.PUBLIC ->\n                R.id.publicRadioButton3\n            Status.Visibility.UN"}], "metadata": {"task_id": "Tusky/196", "ground_truth": "                R.id.directRadioButton\n        }\n\n        check(selectedButton)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\view\\ComposeOptionsView.kt"}}
{"prompt": "\n import java.util.Date\nimport com.keylesspalace.tusky.R\nimport androidx.core.content.ContextCompat\nimport android.content.Context\nprivate fun setEditIcons() {\n        val icon = ContextCompat.getDrawable(context, R.drawable.ic_create_24dp) ?: return\n        val size = binding.scheduledDateTime.lineHeight", "choices": [{"text": "\n import java.util.Date\nimport com.keylesspalace.tusky.R\nimport androidx.core.content.ContextCompat\nimport android.content.Context\nprivate fun setEditIcons() {\n        val icon = ContextCompat.getDrawable(context, R.drawable.ic_create_24dp)?: return\n        val size = binding.scheduledDateTime.lineHeight\n        val iconSize = size / 2\n        val iconMargin = (size - iconSize) / 2\n        val iconPadding = (size - iconSize) / 2\n        icon.setBounds(iconMargin, iconPadding, iconMargin + iconSize, iconPadding + iconSize)\n        binding.scheduledDateTime.setCompoundDrawables(icon, null, null, null)\n    }\n\nprivate fun setEditIcons() {\n        val icon = ContextCompat.getDrawable(context, R.drawable.ic_create_24dp)?: return\n        val size = binding.scheduledDateTime.lineHeight\n       "}], "metadata": {"task_id": "Tusky/198", "ground_truth": "        icon.setBounds(0, 0, size, size)\n        binding.scheduledDateTime.setCompoundDrawables(null, null, icon, null)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\view\\ComposeScheduleView.kt"}}
{"prompt": "\n fun resetSchedule() {", "choices": [{"text": " if (schedule!= null) {\n schedule.cancel()\n schedule = null\n }\n }\n\n fun startSchedule() {\n if (schedule == null) {\n schedule = Timer()\n schedule.schedule(object : TimerTask() {\n override fun run() {\n if (isScheduleRunning) {\n val now = System.currentTimeMillis()\n val diff = now - lastTime\n if (diff >= 1000) {\n lastTime = now\n val time = System.currentTimeMillis()\n val diff = time - lastTime\n val diff2 = time - lastTime2\n lastTime2"}], "metadata": {"task_id": "Tusky/199", "ground_truth": "        scheduleDateTimeUtc = null\n        updateScheduleUi()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\view\\ComposeScheduleView.kt"}}
{"prompt": "\n import java.util.Date\nimport com.google.android.material.timepicker.TimeFormat\nimport android.content.Context\nprivate fun getTimeFormat(context: Context): Int {\n        return if (android.text.format.DateFormat.is24HourFormat(context)) {", "choices": [{"text": "            TimeFormat.CLOCK_24H\n        } else {\n            TimeFormat.CLOCK_12H\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/200", "ground_truth": "            TimeFormat.CLOCK_24H\n        } else {\n            TimeFormat.CLOCK_12H\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\view\\ComposeScheduleView.kt"}}
{"prompt": "\n import java.util.Date\nfun getDateTime(scheduledAt: String?): Date? {\n        scheduledAt?.let {\n            try {\n                return iso8601.parse(it)", "choices": [{"text": "            } catch (e: ParseException) {\n                e.printStackTrace()\n            }\n        }\n        return null\n    }\n\n"}], "metadata": {"task_id": "Tusky/201", "ground_truth": "            } catch (_: ParseException) {\n            }\n        }\n        return null\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\view\\ComposeScheduleView.kt"}}
{"prompt": "\n import java.util.Date\nfun setDateTime(scheduledAt: String?) {\n        val date = getDateTime(scheduledAt) ?: return\n        initializeSuggestedTime()", "choices": [{"text": "\n import java.util.Date\nfun setDateTime(scheduledAt: String?) {\n        val date = getDateTime(scheduledAt)?: return\n        initializeSuggestedTime()\n        if (date.time < Date().time) {\n            return\n        }\n        val calendar = Calendar.getInstance()\n        calendar.time = date\n        calendar.set(Calendar.SECOND, 0)\n        calendar.set(Calendar.MILLISECOND, 0)\n        calendar.set(Calendar.HOUR_OF_DAY, 0)\n        calendar.set(Calendar.MINUTE, 0)\n        calendar.set(Calendar.AM_PM, Calendar.AM)\n        calendar.set(Calendar.DAY_OF_MONTH, 1)\n        calendar.set(Calendar.MONTH, 0)\n        calendar"}], "metadata": {"task_id": "Tusky/202", "ground_truth": "        scheduleDateTimeUtc!!.time = date\n        updateScheduleUi()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\view\\ComposeScheduleView.kt"}}
{"prompt": "\n import java.util.Date\nprivate fun initializeSuggestedTime() {\n        if (scheduleDateTimeUtc == null) {", "choices": [{"text": "            scheduleDateTimeUtc = Date()\n        }\n    }\n"}], "metadata": {"task_id": "Tusky/206", "ground_truth": "            scheduleDateTimeUtc = calendar().apply {\n                add(Calendar.MINUTE, 15)\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\view\\ComposeScheduleView.kt"}}
{"prompt": "\n import android.graphics.Point\nfun setImageSize(width: Int, height: Int) {\n        this.imageSize = Point(width, height)\n        if (focus != null) {", "choices": [{"text": "\n import android.graphics.Point\nfun setImageSize(width: Int, height: Int) {\n        this.imageSize = Point(width, height)\n        if (focus!= null) {\n            focus.setImageSize(width, height)\n        }\n    }\n"}], "metadata": {"task_id": "Tusky/210", "ground_truth": "            invalidate()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\view\\FocusIndicatorView.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Attachment\nfun setFocus(focus: Attachment.Focus) {\n        this.focus = focus\n        if (imageSize != null) {", "choices": [{"text": "\n import com.keylesspalace.tusky.entity.Attachment\nfun setFocus(focus: Attachment.Focus) {\n        this.focus = focus\n        if (imageSize!= null) {\n            this.imageSize = imageSize\n        }\n    }\n\nfun setImageSize(imageSize: Attachment.ImageSize) {\n        this.imageSize = imageSize\n        if (focus!= null) {\n            this.focus = focus\n        }\n    }\n\nfun setImageSize(imageSize: Attachment.ImageSize, focus: Attachment.Focus) {\n        this.imageSize = imageSize\n        this.focus = focus\n    }\n\nfun setImageSize(imageSize: Attachment.ImageSize, focus: Attachment.Focus, url: String) {\n        this.imageSize = imageSize\n        this"}], "metadata": {"task_id": "Tusky/211", "ground_truth": "            invalidate()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\view\\FocusIndicatorView.kt"}}
{"prompt": "\n override fun setOnClickListener(l: OnClickListener?) {", "choices": [{"text": " super.setOnClickListener(l)\n if (l!= null) {\n l.onClick(this)\n }\n }\n}\n\n"}], "metadata": {"task_id": "Tusky/218", "ground_truth": "        super.setOnClickListener(l)\n        adapter.setOnClickListener(l)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\view\\PollPreviewView.kt"}}
{"prompt": "\n import android.graphics.PorterDuff\nimport android.graphics.Color\nfun setProgress(progress: Int) {\n        this.progress = progress\n        if (progress != -1) {\n            setColorFilter(Color.rgb(123, 123, 123), PorterDuff.Mode.MULTIPLY)", "choices": [{"text": "\n import android.graphics.PorterDuff\nimport android.graphics.Color\nfun setProgress(progress: Int) {\n        this.progress = progress\n        if (progress!= -1) {\n            setColorFilter(Color.rgb(123, 123, 123), PorterDuff.Mode.MULTIPLY)\n        } else {\n            setColorFilter(Color.rgb(123, 123, 123), PorterDuff.Mode.SRC_IN)\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/219", "ground_truth": "        } else {\n            clearColorFilter()\n        }\n        invalidate()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\view\\ProgressImageView.kt"}}
{"prompt": "\n import android.graphics.Paint\nfun setChecked(checked: Boolean) {\n        markBgPaint.color =", "choices": [{"text": "if (checked) {\n            Color.parseColor(\"#000000\")\n        } else {\n            Color.parseColor(\"#000000\")\n        }\n        invalidate()\n    }\n\n"}], "metadata": {"task_id": "Tusky/220", "ground_truth": "            context.getColor(if (checked) R.color.tusky_blue else R.color.tusky_grey_10)\n        invalidate()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\compose\\view\\ProgressImageView.kt"}}
{"prompt": "\n override fun onBindViewHolder(\n        holder: ConversationViewHolder,\n        position: Int,\n        payloads: List<Any>\n    ) {\n        getItem(position)?.let { conversationViewData ->", "choices": [{"text": "            holder.bind(conversationViewData)\n        }\n    }\n\n    override fun onBindViewHolder(holder: ConversationViewHolder, position: Int) {\n        getItem(position)?.let { conversationViewData ->\n            holder.bind(conversationViewData)\n        }\n    }\n\n    override fun getItemViewType(position: Int): Int {\n        return getItem(position)?.viewType?: super.getItemViewType(position)\n    }\n\n    override fun getItemCount(): Int {\n        return itemCount\n    }\n\n    override fun getItem(position: Int): ConversationViewData? {\n        return conversationViewData.getOrNull(position)\n    }\n\n    override fun getOldList"}], "metadata": {"task_id": "Tusky/222", "ground_truth": "            holder.setupWithConversation(conversationViewData, payloads.firstOrNull())\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\conversation\\ConversationAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Conversation\nfun toViewData(): ConversationViewData {\n        return ConversationViewData(\n            id = id,\n            order = order,", "choices": [{"text": "            title = title,\n            lastMessage = lastMessage,\n            lastMessageDate = lastMessageDate,\n            lastMessageSender = lastMessageSender,\n            lastMessageSenderId = lastMessageSenderId,\n            lastMessageSenderAvatar = lastMessageSenderAvatar,\n            lastMessageSenderName = lastMessageSenderName,\n            lastMessageSenderUsername = lastMessageSenderUsername,\n            lastMessageSenderIsOnline = lastMessageSenderIsOnline,\n            lastMessageSenderIsTyping = lastMessageSenderIsTyping,\n            lastMessageSenderIsTypingDate = lastMessageSenderIsTypingDate,\n            lastMessageSenderIsTypingUsername = lastMessageSenderIsTyping"}], "metadata": {"task_id": "Tusky/223", "ground_truth": "            accounts = accounts,\n            unread = unread,\n            lastStatus = lastStatus.toViewData()\n        )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\conversation\\ConversationEntity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.TimelineAccount\nfun toAccount(): TimelineAccount {\n        return TimelineAccount(\n            id = id,\n            localUsername = localUsername,\n            username = username,\n            displayName = displayName,\n            note = \"\",", "choices": [{"text": "            avatarUrl = avatarUrl,\n            isFollowing = isFollowing,\n            isBlocked = isBlocked,\n            isMuted = isMuted,\n            isVerified = isVerified,\n            isPrivate = isPrivate,\n            isProtected = isProtected,\n            isFollower = isFollower,\n            isFriend = isFriend,\n            isOnline = isOnline,\n            isOnlineMobile = isOnlineMobile,\n            isOnlineDesktop = isOnlineDesktop,\n            isOnlineTablet = isOnlineTablet,\n            isOnlineOther = isOnlineOther,\n            isOnlineUnknown = isOnlineUnknown,\n            isOnlineUnknownMobile = isOnlineUnknownMobile,"}], "metadata": {"task_id": "Tusky/224", "ground_truth": "            url = \"\",\n            avatar = avatar,\n            emojis = emojis\n        )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\conversation\\ConversationEntity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.TimelineAccount\nimport com.keylesspalace.tusky.entity.Conversation\nimport androidx.room.Entity\nfun TimelineAccount.toEntity() = ConversationAccountEntity(\n    id = id,\n    localUsername = localUsername,", "choices": [{"text": "    remoteUsername = remoteUsername,\n    remoteId = remoteId,\n    remoteType = remoteType,\n    remoteAvatar = remoteAvatar,\n    remoteAvatarSmall = remoteAvatarSmall,\n    remoteAvatarMedium = remoteAvatarMedium,\n    remoteAvatarLarge = remoteAvatarLarge,\n    remoteAvatarXlarge = remoteAvatarXlarge,\n    remoteAvatar2Xlarge = remoteAvatar2Xlarge,\n    remoteAvatar4Xlarge = remoteAvatar4Xlarge,\n    remoteAvatar5Xlarge = remoteAvatar5Xlarge,\n    remoteAvatar6Xlarge = remoteAvatar6Xlarge,\n    remoteAvatar7Xlarge = remoteAvatar7"}], "metadata": {"task_id": "Tusky/225", "ground_truth": "    username = username,\n    displayName = name,\n    avatar = avatar,\n    emojis = emojis.orEmpty()\n)", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\conversation\\ConversationEntity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Status\nimport com.keylesspalace.tusky.entity.Conversation\nimport androidx.room.Entity\nfun Conversation.toEntity(\n    accountId: Long,\n    order: Int,\n    expanded: Boolean,\n    contentShowing: Boolean,\n    contentCollapsed: Boolean\n) = ConversationEntity(\n    accountId = accountId,\n    id = id,\n    order = order,\n    accounts = accounts.map { it.toEntity() },\n    unread = unread,\n    lastStatus = lastStatus!!.toEntity(", "choices": [{"text": "ccountId),\n    expanded = expanded,\n    contentShowing = contentShowing,\n    contentCollapsed = contentCollapsed\n)\n\nfun ConversationEntity.toConversation(\n    accountId: Long,\n    order: Int,\n    expanded: Boolean,\n    contentShowing: Boolean,\n    contentCollapsed: Boolean\n) = Conversation(\n    id = id,\n    accountId = accountId,\n    order = order,\n    accounts = accounts.map { it.toAccount() },\n    unread = unread,\n    lastStatus = lastStatus!!.toStatus(accountId),\n    expanded = expanded,\n    contentShowing = contentShowing,\n    contentCollapsed = contentCollapsed\n"}], "metadata": {"task_id": "Tusky/226", "ground_truth": "        expanded = expanded,\n        contentShowing = contentShowing,\n        contentCollapsed = contentCollapsed\n    )\n)", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\conversation\\ConversationEntity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.BindingHolder\nimport com.keylesspalace.tusky.databinding.ItemNetworkStateBinding\nimport androidx.paging.LoadState\nimport android.view.ViewGroup\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(\n        parent: ViewGroup,\n        loadState: LoadState\n    ): BindingHolder<ItemNetworkStateBinding> {\n        val binding = ItemNetworkStateBinding.inflate(\n            LayoutInflater.from(parent.context),", "choices": [{"text": "            parent,\n            false\n        )\n        return BindingHolder(binding)\n    }\n\n    override fun onBindViewHolder(holder: BindingHolder<ItemNetworkStateBinding>, loadState: LoadState) {\n        holder.binding.apply {\n            if (loadState is LoadState.Error) {\n                errorMsg.text = loadState.error.localizedMessage\n            }\n            if (loadState is LoadState.Loading) {\n                progressBar.visibility = View.VISIBLE\n            } else {\n                progressBar.visibility = View.GONE\n            }\n        }\n    }\n}\n<file_sep>/app/src/main/java/com/key"}], "metadata": {"task_id": "Tusky/228", "ground_truth": "            parent,\n            false\n        )\n        return BindingHolder(binding)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\conversation\\ConversationLoadStateAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onMenuItemSelected(menuItem: MenuItem): Boolean {\n        return when (menuItem.itemId) {\n            R.id.action_refresh -> {\n                binding.swipeRefreshLayout.isRefreshing = true\n                refreshContent()", "choices": [{"text": "                true\n            }\n            else -> super.onMenuItemSelected(menuItem)\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/230", "ground_truth": "                true\n            }\n            else -> false\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\conversation\\ConversationsFragment.kt"}}
{"prompt": "\n override fun onFavourite(favourite: Boolean, position: Int) {\n        adapter.peek(position)?.let { conversation ->", "choices": [{"text": "            conversation.isFavourite = favourite\n            conversation.update()\n        }\n    }\n\n    override fun onConversationClick(conversation: Conversation) {\n        val intent = Intent(this, ConversationActivity::class.java)\n        intent.putExtra(ConversationActivity.EXTRA_CONVERSATION, conversation)\n        startActivity(intent)\n    }\n\n    override fun onConversationLongClick(conversation: Conversation) {\n        val dialog = AlertDialog.Builder(this)\n        dialog.setTitle(R.string.delete_conversation)\n        dialog.setMessage(R.string.delete_conversation_message)\n        dialog.setPositive"}], "metadata": {"task_id": "Tusky/233", "ground_truth": "            viewModel.favourite(favourite, conversation)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\conversation\\ConversationsFragment.kt"}}
{"prompt": "\n override fun onBookmark(favourite: Boolean, position: Int) {\n        adapter.peek(position)?.let { conversation ->", "choices": [{"text": "            conversation.isFavourite = favourite\n            conversation.save()\n        }\n    }\n\n    override fun onConversationClick(conversation: Conversation) {\n        val intent = Intent(this, ConversationActivity::class.java)\n        intent.putExtra(ConversationActivity.EXTRA_CONVERSATION, conversation)\n        startActivity(intent)\n    }\n\n    override fun onConversationLongClick(conversation: Conversation) {\n        val dialog = AlertDialog.Builder(this)\n        dialog.setTitle(R.string.delete_conversation)\n        dialog.setMessage(R.string.delete_conversation_message)\n        dialog.setPositive"}], "metadata": {"task_id": "Tusky/234", "ground_truth": "            viewModel.bookmark(favourite, conversation)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\conversation\\ConversationsFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onViewMedia(position: Int, attachmentIndex: Int, view: View?) {\n        adapter.peek(position)?.let { conversation ->\n            viewMedia(\n                attachmentIndex,", "choices": [{"text": "                conversation.attachments[attachmentIndex],\n                view\n            )\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/235", "ground_truth": "                AttachmentViewData.list(conversation.lastStatus.status),\n                view\n            )\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\conversation\\ConversationsFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onViewThread(position: Int) {\n        adapter.peek(position)?.let { conversation ->", "choices": [{"text": "            val view = conversation.view\n            if (view!= null) {\n                view.visibility = View.VISIBLE\n            }\n        }\n    }\n"}], "metadata": {"task_id": "Tusky/236", "ground_truth": "            viewThread(conversation.lastStatus.id, conversation.lastStatus.status.url)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\conversation\\ConversationsFragment.kt"}}
{"prompt": "\n override fun onExpandedChange(expanded: Boolean, position: Int) {\n        adapter.peek(position)?.let { conversation ->", "choices": [{"text": "            if (expanded) {\n                conversation.isExpanded = true\n                conversation.isCollapsed = false\n            } else {\n                conversation.isExpanded = false\n                conversation.isCollapsed = true\n            }\n            adapter.notifyItemChanged(position)\n        }\n    }\n}\n\n"}], "metadata": {"task_id": "Tusky/237", "ground_truth": "            viewModel.expandHiddenStatus(expanded, conversation)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\conversation\\ConversationsFragment.kt"}}
{"prompt": "\n override fun onContentHiddenChange(isShowing: Boolean, position: Int) {\n        adapter.peek(position)?.let { conversation ->", "choices": [{"text": "            if (isShowing) {\n                conversation.unreadCount = 0\n            } else {\n                conversation.unreadCount = conversation.messages.count { it.isUnread }\n            }\n        }\n    }\n}\n\n"}], "metadata": {"task_id": "Tusky/238", "ground_truth": "            viewModel.showContent(isShowing, conversation)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\conversation\\ConversationsFragment.kt"}}
{"prompt": "\n override fun onContentCollapsedChange(isCollapsed: Boolean, position: Int) {\n        adapter.peek(position)?.let { conversation ->", "choices": [{"text": "            if (isCollapsed) {\n                conversation.isCollapsed = true\n                conversation.isExpanded = false\n            } else {\n                conversation.isCollapsed = false\n                conversation.isExpanded = true\n            }\n            adapter.notifyItemChanged(position)\n        }\n    }\n}\n\n"}], "metadata": {"task_id": "Tusky/239", "ground_truth": "            viewModel.collapseLongStatus(isCollapsed, conversation)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\conversation\\ConversationsFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onViewAccount(id: String) {", "choices": [{"text": "    val view = findViewById<View>(id)\n    view.visibility = View.VISIBLE\n}\n"}], "metadata": {"task_id": "Tusky/240", "ground_truth": "        val intent = AccountActivity.getIntent(requireContext(), id)\n        startActivity(intent)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\conversation\\ConversationsFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onViewTag(tag: String) {", "choices": [{"text": "    // do something\n}\n"}], "metadata": {"task_id": "Tusky/241", "ground_truth": "        val intent = StatusListActivity.newHashtagIntent(requireContext(), tag)\n        startActivity(intent)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\conversation\\ConversationsFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\noverride fun onReply(position: Int) {\n        adapter.peek(position)?.let { conversation ->", "choices": [{"text": "            val intent = Intent(this, ReplyActivity::class.java)\n            intent.putExtra(ReplyActivity.EXTRA_CONVERSATION, conversation)\n            startActivity(intent)\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/242", "ground_truth": "            reply(conversation.lastStatus.status)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\conversation\\ConversationsFragment.kt"}}
{"prompt": "\n override fun onVoteInPoll(position: Int, choices: MutableList<Int>) {\n        adapter.peek(position)?.let { conversation ->", "choices": [{"text": "            val poll = conversation.poll\n            val pollId = poll.id\n            val pollChoice = choices[position]\n            val pollChoiceId = poll.choices[pollChoice].id\n            val pollChoiceName = poll.choices[pollChoice].name\n            val pollChoiceCount = poll.choices[pollChoice].count\n            val pollChoicePercentage = poll.choices[pollChoice].percentage\n            val pollChoiceColor = poll.choices[pollChoice].color\n            val pollChoiceImage = poll.choices[pollChoice].image\n            val pollChoiceImageId = poll.choices[pollChoice].imageId\n            val pollChoice"}], "metadata": {"task_id": "Tusky/243", "ground_truth": "            viewModel.voteInPoll(choices, conversation)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\conversation\\ConversationsFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.view.View\noverride fun onReselect() {\n        if (isAdded) {\n            binding.recyclerView.layoutManager?.scrollToPosition(0)", "choices": [{"text": "        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/244", "ground_truth": "            binding.recyclerView.stopScroll()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\conversation\\ConversationsFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport at.connyduck.calladapter.networkresult.fold\nimport androidx.lifecycle.viewModelScope\nfun favourite(favourite: Boolean, conversation: ConversationViewData) {\n        viewModelScope.launch {\n            timelineCases.favourite(conversation.lastStatus.id, favourite).fold({\n                val newConversation = conversation.toEntity(\n                    accountId = accountManager.activeAccount!!.id,\n                    favourited = favourite\n                )\n\n                saveConversationToDb(newConversation)", "choices": [{"text": "            }, {\n                Log.e(\"favourite\", it.message)\n            })\n        }\n    }\n\nfun timelineCases.favourite(statusId: Long, favourite: Boolean): Flow<Result<Unit>> =\n    flow {\n        val result = api.favourite(statusId, favourite)\n        emit(result)\n    }\n\nfun timelineCases.getConversation(conversationId: Long): Flow<Result<ConversationViewData>> =\n    flow {\n        val result = api.getConversation(conversationId)\n        emit(result)\n    }\n\nfun timelineCases.getConversation("}], "metadata": {"task_id": "Tusky/246", "ground_truth": "            }, { e ->\n                Log.w(TAG, \"failed to favourite status\", e)\n            })\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\conversation\\ConversationsViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport at.connyduck.calladapter.networkresult.fold\nimport androidx.lifecycle.viewModelScope\nfun bookmark(bookmark: Boolean, conversation: ConversationViewData) {\n        viewModelScope.launch {\n            timelineCases.bookmark(conversation.lastStatus.id, bookmark).fold({\n                val newConversation = conversation.toEntity(\n                    accountId = accountManager.activeAccount!!.id,\n                    bookmarked = bookmark\n                )\n\n                saveConversationToDb(newConversation)", "choices": [{"text": "            }, {\n                Timber.e(it)\n            })\n        }\n    }\n\nfun timelineCases: TimelineCases = TimelineCases(\n    timelineRepository = TimelineRepository(\n        timelineApi = timelineApi,\n        timelineDb = timelineDb,\n        timelineMapper = timelineMapper,\n        timelineMapperToEntity = timelineMapperToEntity,\n        timelineMapperToViewData = timelineMapperToViewData,\n        timelineMapperToViewDataWithAccount = timelineMapperToViewDataWithAccount,\n        timelineMapperToViewDataWithAccountAndStatus = timelineMapperToViewDataWithAccountAndStatus,\n        timelineMapperToViewDataWithAccountAndStatusAndAccount = timelineMapperTo"}], "metadata": {"task_id": "Tusky/247", "ground_truth": "            }, { e ->\n                Log.w(TAG, \"failed to bookmark status\", e)\n            })\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\conversation\\ConversationsViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun expandHiddenStatus(expanded: Boolean, conversation: ConversationViewData) {\n        viewModelScope.launch {\n            val newConversation = conversation.toEntity(\n                accountId = accountManager.activeAccount!!.id,", "choices": [{"text": "                isExpanded = expanded\n            )\n            conversationRepository.updateConversation(newConversation)\n        }\n    }\n\nfun expandHiddenStatus(expanded: Boolean, conversation: Conversation) {\n    viewModelScope.launch {\n        val newConversation = conversation.toEntity(\n            accountId = accountManager.activeAccount!!.id,\n            isExpanded = expanded\n        )\n        conversationRepository.updateConversation(newConversation)\n    }\n}\n\nfun expandHiddenStatus(expanded: Boolean, conversation: ConversationEntity) {\n    viewModelScope.launch {\n        val newConversation = conversation.toEntity(\n            accountId = accountManager.activeAccount"}], "metadata": {"task_id": "Tusky/248", "ground_truth": "                expanded = expanded\n            )\n            saveConversationToDb(newConversation)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\conversation\\ConversationsViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun collapseLongStatus(collapsed: Boolean, conversation: ConversationViewData) {\n        viewModelScope.launch {\n            val newConversation = conversation.toEntity(\n                accountId = accountManager.activeAccount!!.id,", "choices": [{"text": "                collapsed = collapsed\n            )\n            conversationRepository.updateConversation(newConversation)\n        }\n    }\n\nfun getConversation(conversationId: String): ConversationViewData? {\n    return conversationRepository.getConversation(conversationId)?.toViewData()\n}\n\nfun getConversation(conversationId: String, accountId: String): ConversationViewData? {\n    return conversationRepository.getConversation(conversationId, accountId)?.toViewData()\n}\n\nfun getConversation(conversationId: String, accountId: String, conversationType: ConversationType): ConversationViewData? {\n    return conversationRepository.getConversation(conversationId,"}], "metadata": {"task_id": "Tusky/249", "ground_truth": "                collapsed = collapsed\n            )\n            saveConversationToDb(newConversation)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\conversation\\ConversationsViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun showContent(showing: Boolean, conversation: ConversationViewData) {\n        viewModelScope.launch {\n            val newConversation = conversation.toEntity(\n                accountId = accountManager.activeAccount!!.id,", "choices": [{"text": "                isRead =!showing\n            )\n            conversationRepository.updateConversation(newConversation)\n        }\n    }\n\nfun showContent(showing: Boolean, conversation: ConversationViewData) {\n    viewModelScope.launch {\n        val newConversation = conversation.toEntity(\n            accountId = accountManager.activeAccount!!.id,\n            isRead =!showing\n        )\n        conversationRepository.updateConversation(newConversation)\n    }\n}\n\nfun showContent(showing: Boolean, conversation: ConversationViewData) {\n    viewModelScope.launch {\n        val newConversation = conversation.toEntity(\n            accountId ="}], "metadata": {"task_id": "Tusky/250", "ground_truth": "                showingHiddenContent = showing\n            )\n            saveConversationToDb(newConversation)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\conversation\\ConversationsViewModel.kt"}}
{"prompt": "\n import java.util.List\nimport com.keylesspalace.tusky.util.ImageLoadingHelper\nimport com.keylesspalace.tusky.R\nimport android.widget.ImageView\nimport android.view.View\nprivate void setAvatars(List<ConversationAccountEntity> accounts) {\r\n    for (int i = 0; i < avatars.length; i++) {\r\n        ImageView avatarView = avatars[i];\r\n        if (i < accounts.size()) {\r\n            ImageLoadingHelper.loadAvatar(accounts.get(i).getAvatar(), avatarView, avatarRadius48dp, statusDisplayOptions.animateAvatars(), null);\r\n            avatarView.setVisibility(View.VISIBLE);\r", "choices": [{"text": "//            avatarView.setOnClickListener(new View.OnClickListener() {\r\n//                @Override\r\n//                public void onClick(View v) {\r\n//                    if (accounts.size() > 0) {\r\n//                        Intent intent = new Intent(getActivity(), AccountActivity.class);\r\n//                        intent.putExtra(AccountActivity.EXTRA_ACCOUNT_ID, accounts.get(0).getId());\r\n//                        startActivity(intent);\r\n//                    }\r\n//                }\r\n//            });\r\n        } else {\r\n            avatarView.setVisibility(View.GONE);\r\n        }"}], "metadata": {"task_id": "Tusky/252", "ground_truth": "        } else {\r\n            avatarView.setVisibility(View.GONE);\r\n        }\r\n    }\r\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\conversation\\ConversationViewHolder.java"}}
{"prompt": "\n import com.keylesspalace.tusky.util.BindingHolder\nimport com.keylesspalace.tusky.databinding.ItemBlockedDomainBinding\nimport android.view.ViewGroup\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(\n        parent: ViewGroup,\n        viewType: Int\n    ): BindingHolder<ItemBlockedDomainBinding> {\n        val binding = ItemBlockedDomainBinding.inflate(\n            LayoutInflater.from(parent.context),", "choices": [{"text": "            parent,\n            false\n        )\n        return BindingHolder(binding)\n    }\n\n    override fun onBindViewHolder(holder: BindingHolder<ItemBlockedDomainBinding>, position: Int) {\n        holder.binding.domain = getItem(position)\n    }\n}<file_sep>/app/src/main/java/com/keylesspalace/tusky/ui/settings/SettingsFragment.kt\npackage com.keylesspalace.tusky.ui.settings\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view."}], "metadata": {"task_id": "Tusky/253", "ground_truth": "            parent,\n            false\n        )\n        return BindingHolder(binding)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\domainblocks\\DomainBlocksAdapter.kt"}}
{"prompt": "\n import androidx.paging.PagingState\nimport androidx.paging.LoadType\noverride suspend fun load(\n        loadType: LoadType,\n        state: PagingState<String, String>\n    ): MediatorResult {\n        return try {\n            val response = request(loadType)\n                ?: return MediatorResult.Success(endOfPaginationReached = true)\n", "choices": [{"text": "\n import androidx.paging.PagingState\nimport androidx.paging.LoadType\noverride suspend fun load(\n        loadType: LoadType,\n        state: PagingState<String, String>\n    ): MediatorResult {\n        return try {\n            val response = request(loadType)\n               ?: return MediatorResult.Success(endOfPaginationReached = true)\n//            val response = request(loadType)\n//               ?: return MediatorResult.Success(endOfPaginationReached = true)\n            val data = response.body()\n            val page = data?.page?: 0\n            val totalPages = data?.totalPages?: 0\n            val totalElements = data?.totalElements?: 0\n            val items = data?.content?: emptyList()\n            val nextPage = page + 1\n            val prevPage = page - 1\n            val nextPageKey = if (nextPage > totalPages) null else nextPage\n            val prevPageKey = if (prevPage <"}], "metadata": {"task_id": "Tusky/256", "ground_truth": "            return applyResponse(response)\n        } catch (e: Exception) {\n            MediatorResult.Error(e)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\domainblocks\\DomainBlocksRemoteMediator.kt"}}
{"prompt": "\n import retrofit2.Response\nimport androidx.paging.LoadType\nprivate suspend fun request(loadType: LoadType): Response<List<String>>? {\n        return when (loadType) {\n            LoadType.PREPEND -> null\n            LoadType.APPEND -> api.domainBlocks(maxId = repository.nextKey)\n            LoadType.REFRESH -> {\n                repository.nextKey = null", "choices": [{"text": "                api.domainBlocks()\n            }\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/257", "ground_truth": "                repository.domains.clear()\n                api.domainBlocks()\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\domainblocks\\DomainBlocksRemoteMediator.kt"}}
{"prompt": "\n import at.connyduck.calladapter.networkresult.onSuccess\nimport at.connyduck.calladapter.networkresult.NetworkResult\nsuspend fun block(domain: String): NetworkResult<Unit> {\n        return api.blockDomain(domain).onSuccess {\n            domains.add(domain)", "choices": [{"text": "        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/258", "ground_truth": "            factory.invalidate()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\domainblocks\\DomainBlocksRepository.kt"}}
{"prompt": "\n import at.connyduck.calladapter.networkresult.onSuccess\nimport at.connyduck.calladapter.networkresult.NetworkResult\nsuspend fun unblock(domain: String): NetworkResult<Unit> {\n        return api.unblockDomain(domain).onSuccess {\n            domains.remove(domain)", "choices": [{"text": "        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/259", "ground_truth": "            factory.invalidate()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\domainblocks\\DomainBlocksRepository.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.keylesspalace.tusky.R\nimport at.connyduck.calladapter.networkresult.onFailure\nimport androidx.lifecycle.viewModelScope\nfun block(domain: String) {\n        viewModelScope.launch {\n            repo.block(domain).onFailure { e ->\n                uiEvents.emit(\n                    SnackbarEvent(\n                        message = R.string.error_blocking_domain,\n                        domain = domain,\n                        throwable = e,\n                        actionText = R.string.action_retry,\n                        action = { block(domain) }", "choices": [{"text": "                    )\n                )\n            }\n        }\n    }\n\nfun unblock(domain: String) {\n        viewModelScope.launch {\n            repo.unblock(domain).onFailure { e ->\n                uiEvents.emit(\n                    SnackbarEvent(\n                        message = R.string.error_unblocking_domain,\n                        domain = domain,\n                        throwable = e,\n                        actionText = R.string.action_retry,\n                        action = { unblock(domain) }\n                    )\n                )\n            }\n        }\n    }\n\nfun blockUser(userId: String) {\n        viewModelScope.launch {\n            repo.block"}], "metadata": {"task_id": "Tusky/260", "ground_truth": "                    )\n                )\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\domainblocks\\DomainBlocksViewModel.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Attachment\nsuspend fun deleteDraftAndAttachments(draftId: Int) {\n        draftDao.find(draftId)?.let { draft ->", "choices": [{"text": "            draft.attachments.forEach {\n                attachmentDao.delete(it)\n            }\n            draftDao.delete(draft)\n        }\n    }\n\nsuspend fun deleteDraft(draftId: Int) {\n        draftDao.find(draftId)?.let { draft ->\n            draft.attachments.forEach {\n                attachmentDao.delete(it)\n            }\n            draftDao.delete(draft)\n        }\n    }\n\nsuspend fun deleteDrafts(draftIds: List<Int>) {\n        draftDao.find(draftIds)?.forEach { draft ->\n            draft.attachments.forEach {\n                attachmentDao.delete(it)"}], "metadata": {"task_id": "Tusky/261", "ground_truth": "            deleteDraftAndAttachments(draft)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\drafts\\DraftHelper.kt"}}
{"prompt": " import com.keylesspalace.tusky.entity.Attachment\nimport com.keylesspalace.tusky.db.DraftEntity\nval draftDao\nprivate suspend fun deleteDraftAndAttachments(draft: DraftEntity) {", "choices": [{"text": "    draftDao.delete(draft)\n    val attachments = draft.attachments\n    if (attachments.isNotEmpty()) {\n        attachmentDao.delete(attachments)\n    }\n}\n\nsuspend fun deleteDraft(draft: DraftEntity) {\n    deleteDraftAndAttachments(draft)\n}\n\nsuspend fun deleteDraft(draftId: Long) {\n    val draft = draftDao.get(draftId)\n    deleteDraftAndAttachments(draft)\n}\n\nsuspend fun deleteDrafts(drafts: List<DraftEntity>) {\n    for (draft in drafts) {\n        deleteDraftAndAttachments(draft)\n   "}], "metadata": {"task_id": "Tusky/262", "ground_truth": "        deleteAttachments(draft)\n        draftDao.delete(draft.id)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\drafts\\DraftHelper.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Attachment\nsuspend fun deleteAllDraftsAndAttachmentsForAccount(accountId: Long) {\n        draftDao.loadDrafts(accountId).forEach { draft ->", "choices": [{"text": "            draftDao.deleteDraft(draft)\n            draft.attachments.forEach { attachment ->\n                attachmentDao.deleteAttachment(attachment)\n            }\n        }\n}\n\nsuspend fun deleteAllDraftsAndAttachmentsForAccount(account: Account) = deleteAllDraftsAndAttachmentsForAccount(account.id)\n\nsuspend fun deleteAllDraftsAndAttachmentsForAccount(account: AccountEntity) = deleteAllDraftsAndAttachmentsForAccount(account.id)\n\nsuspend fun deleteAllDraftsAndAttachmentsForAccount(account: AccountEntity?) = account?.let { deleteAllDraftsAndAttachmentsForAccount("}], "metadata": {"task_id": "Tusky/263", "ground_truth": "            deleteDraftAndAttachments(draft)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\drafts\\DraftHelper.kt"}}
{"prompt": "\n import java.io.File\nimport android.net.Uri\nprivate fun Uri.isInFolder(folder: File): Boolean {", "choices": [{"text": "    val path = this.path\n    return path!= null && path.startsWith(folder.path)\n}\n\nfun Uri.getFileName(folder: File): String? {\n    val path = this.path\n    return if (path!= null && path.startsWith(folder.path)) {\n        val fileName = path.substring(folder.path.length)\n        if (fileName.startsWith(\"/\")) {\n            fileName.substring(1)\n        } else {\n            fileName\n        }\n    } else {\n        null\n    }\n}\n\nfun Uri.getFolder(folder: File): File? {\n    val path"}], "metadata": {"task_id": "Tusky/265", "ground_truth": "        val filePath = path ?: return true\n        return File(filePath).parentFile == folder\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\drafts\\DraftHelper.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.BindingHolder\nimport com.keylesspalace.tusky.databinding.ItemDraftBinding\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport android.view.ViewGroup\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(\n        parent: ViewGroup,\n        viewType: Int\n    ): BindingHolder<ItemDraftBinding> {\n        val binding = ItemDraftBinding.inflate(LayoutInflater.from(parent.context), parent, false)\n\n        val viewHolder = BindingHolder(binding)\n\n        binding.draftMediaPreview.layoutManager = LinearLayoutManager(binding.root.context, RecyclerView.HORIZONTAL, false)\n        binding.draftMediaPreview.adapter = DraftMediaAdapter {\n            getItem(viewHolder.bindingAdapterPosition)?.let { draft ->\n                listener.onOpenDraft(draft)", "choices": [{"text": "            }\n        }\n\n        return viewHolder\n    }\n\n    override fun onBindViewHolder(holder: BindingHolder<ItemDraftBinding>, position: Int) {\n        val draft = getItem(position)\n        holder.binding.draft = draft\n        holder.binding.draftMediaPreview.submitList(draft.media)\n    }\n}\n<file_sep>/app/src/main/java/com/keylesspalace/tusky/ui/settings/SettingsFragment.kt\npackage com.keylesspalace.tusky.ui.settings\n\nimport android.content.Context\nimport android.content."}], "metadata": {"task_id": "Tusky/267", "ground_truth": "            }\n        }\n\n        return viewHolder\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\drafts\\DraftsAdapter.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.keylesspalace.tusky.db.DraftEntity\nimport androidx.lifecycle.viewModelScope\nfun restoreDraft(draft: DraftEntity) {\n        viewModelScope.launch {\n            database.draftDao().insertOrReplace(draft)", "choices": [{"text": "        }\n}\n\nfun deleteDraft(draft: DraftEntity) {\n        viewModelScope.launch {\n            database.draftDao().delete(draft)\n        }\n}\n\nfun deleteAllDrafts() {\n        viewModelScope.launch {\n            database.draftDao().deleteAll()\n        }\n}\n\nfun getDrafts(): LiveData<List<DraftEntity>> {\n        return database.draftDao().getAll()\n}\n\nfun getDraft(id: Long): LiveData<DraftEntity> {\n        return database.draftDao().get(id)\n}\n\nfun getDraftsFor"}], "metadata": {"task_id": "Tusky/269", "ground_truth": "            deletedDrafts.remove(draft)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\drafts\\DraftsViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\noverride fun onCleared() {\n        viewModelScope.launch {", "choices": [{"text": "            repository.deleteAll()\n        }\n        super.onCleared()\n    }\n\n"}], "metadata": {"task_id": "Tusky/270", "ground_truth": "            deletedDrafts.forEach {\n                draftHelper.deleteAttachments(it)\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\drafts\\DraftsViewModel.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Filter\nfun load(filter: Filter) {\n        originalFilter = filter\n        title.value = filter.title\n        keywords.value = filter.keywords\n        action.value = filter.action\n        duration.value = if (filter.expiresAt == null) {\n            0", "choices": [{"text": "        } else {\n            filter.expiresAt.time - System.currentTimeMillis()\n        }\n        if (filter.expiresAt == null) {\n            expiresAt.value = null\n        } else {\n            expiresAt.value = filter.expiresAt.time\n        }\n        if (filter.expiresAt == null) {\n            expiresAt.value = null\n        } else {\n            expiresAt.value = filter.expiresAt.time\n        }\n        if (filter.expiresAt == null) {\n            expiresAt.value = null\n        } else {\n            expiresAt.value = filter.expiresAt.time\n        }\n        if"}], "metadata": {"task_id": "Tusky/273", "ground_truth": "        } else {\n            -1\n        }\n        contexts.value = filter.kinds\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\filters\\EditFilterViewModel.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Filter\nimport android.content.Context\nfun addContext(context: Filter.Kind) {\n        if (!contexts.value.contains(context)) {", "choices": [{"text": "            contexts.value.add(context)\n        }\n    }\n\nfun removeContext(context: Filter.Kind) {\n        if (contexts.value.contains(context)) {\n            contexts.value.remove(context)\n        }\n    }\n\nfun clearContexts() {\n        contexts.value.clear()\n    }\n\nfun getContexts(): List<Filter.Kind> {\n        return contexts.value\n    }\n\nfun getContextsString(): String {\n        return contexts.value.joinToString(separator = \",\")\n    }\n\nfun setContexts(contexts: List<Filter.Kind>) {\n        this"}], "metadata": {"task_id": "Tusky/275", "ground_truth": "            contexts.value += context\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\filters\\EditFilterViewModel.kt"}}
{"prompt": "\n fun validate(): Boolean {\n        return title.value.isNotBlank() &&", "choices": [{"text": "description.value.isNotBlank() && price.value.isNotBlank() &&\n                price.value.toDouble() > 0 && category.value!= null && category.value!!.id!= 0\n    }\n}<file_sep>/app/src/main/java/com/example/myapplication/ui/main/MainViewModel.kt\npackage com.example.myapplication.ui.main\n\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport com.example.myapplication.data.model.Category\nimport com.example.myapplication.data."}], "metadata": {"task_id": "Tusky/276", "ground_truth": "            keywords.value.isNotEmpty() &&\n            contexts.value.isNotEmpty()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\filters\\EditFilterViewModel.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\noverride fun onResume() {\n        super.onResume()", "choices": [{"text": "        val intent = Intent(this, MainActivity::class.java)\n        startActivity(intent)\n        finish()\n    }\n\n"}], "metadata": {"task_id": "Tusky/280", "ground_truth": "        loadFilters()\n        observeViewModel()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\filters\\FiltersActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.BindingHolder\nimport com.keylesspalace.tusky.databinding.ItemRemovableBinding\nimport com.keylesspalace.tusky.R\nimport android.view.ViewGroup\noverride fun onCreateViewHolder(\n        parent: ViewGroup,\n        viewType: Int\n    ): BindingHolder<ItemRemovableBinding> {\n        return BindingHolder(", "choices": [{"text": "temRemovableBinding.inflate(layoutInflater, parent, false))\n    }\n\n    override fun onBindViewHolder(holder: BindingHolder<ItemRemovableBinding>, position: Int) {\n        holder.binding.apply {\n            val item = getItem(position)\n            tvTitle.text = item.title\n            tvSubtitle.text = item.subtitle\n            ivIcon.setImageResource(item.icon)\n            ivIcon.setColorFilter(item.color)\n            ivIcon.setOnClickListener {\n                item.action?.invoke()\n            }\n        }\n    }\n}<file_sep>/app/src/main/java/com/keyles"}], "metadata": {"task_id": "Tusky/283", "ground_truth": "            ItemRemovableBinding.inflate(LayoutInflater.from(parent.context), parent, false)\n        )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\filters\\FiltersAdapter.kt"}}
{"prompt": "\n import androidx.paging.PagingState\nimport androidx.paging.LoadType\noverride suspend fun load(\n        loadType: LoadType,\n        state: PagingState<String, String>\n    ): MediatorResult {\n        return try {\n            val response = request(loadType)\n                ?: return MediatorResult.Success(endOfPaginationReached = true)\n", "choices": [{"text": "\n import androidx.paging.PagingState\nimport androidx.paging.LoadType\noverride suspend fun load(\n        loadType: LoadType,\n        state: PagingState<String, String>\n    ): MediatorResult {\n        return try {\n            val response = request(loadType)\n               ?: return MediatorResult.Success(endOfPaginationReached = true)\n//            val response = request(loadType)\n//               ?: return MediatorResult.Success(endOfPaginationReached = true)\n            val data = response.body()\n            val page = data?.page?: 0\n            val totalPages = data?.totalPages?: 0\n            val totalElements = data?.totalElements?: 0\n            val items = data?.content?: emptyList()\n            val nextPage = page + 1\n            val prevPage = page - 1\n            val nextPageKey = if (nextPage > totalPages) null else nextPage\n            val prevPageKey = if (prevPage <"}], "metadata": {"task_id": "Tusky/286", "ground_truth": "            return applyResponse(response)\n        } catch (e: Exception) {\n            MediatorResult.Error(e)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\followedtags\\FollowedTagsRemoteMediator.kt"}}
{"prompt": "\n import retrofit2.Response\nimport com.keylesspalace.tusky.entity.HashTag\nimport androidx.paging.LoadType\nprivate suspend fun request(loadType: LoadType): Response<List<HashTag>>? {\n        return when (loadType) {\n            LoadType.PREPEND -> null\n            LoadType.APPEND -> api.followedTags(maxId = viewModel.nextKey)\n            LoadType.REFRESH -> {\n                viewModel.nextKey = null", "choices": [{"text": "                api.followedTags()\n            }\n        }\n    }\n\nprivate fun handleResponse(response: Response<List<HashTag>>): PagingData<HashTag> {\n        val nextKey = response.body()?.last()?.id\n        return PagingData.from(response.body()?: emptyList()) {\n            PagingRequestHelper.RequestType.APPEND,\n            nextKey\n        }\n    }\n\nprivate fun handleError(e: Throwable): PagingData<HashTag> {\n        return PagingData.from(emptyList())\n    }\n\nprivate fun handleEmptyResponse(response: Response<List"}], "metadata": {"task_id": "Tusky/287", "ground_truth": "                viewModel.tags.clear()\n                api.followedTags()\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\followedtags\\FollowedTagsRemoteMediator.kt"}}
{"prompt": "\n import android.util.Log\noverride fun finish() {\n        super.finish()\n        if (isAdditionalLogin() || isAccountMigration()) {", "choices": [{"text": "            val intent = Intent(this, MainActivity::class.java)\n            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TASK or Intent.FLAG_ACTIVITY_NEW_TASK\n            startActivity(intent)\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/290", "ground_truth": "            overridePendingTransition(R.anim.slide_from_left, R.anim.slide_to_right)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\login\\LoginActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.view.Menu\nimport android.util.Log\noverride fun onCreateOptionsMenu(menu: Menu?): Boolean {\n        menu?.add(R.string.action_browser_login)?.apply {\n            setOnMenuItemClickListener {\n                onLoginClick(false)\n                true", "choices": [{"text": "            }\n        }\n        menu?.add(R.string.action_browser_logout)?.apply {\n            setOnMenuItemClickListener {\n                onLogoutClick()\n                true\n            }\n        }\n        return true\n    }\n\n"}], "metadata": {"task_id": "Tusky/291", "ground_truth": "            }\n        }\n\n        return super.onCreateOptionsMenu(menu)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\login\\LoginActivity.kt"}}
{"prompt": "\n import android.util.Log\nimport android.content.Intent\nimport android.content.Context\n @JvmStatic\n        fun getIntent(context: Context, mode: Int): Intent {\n            val loginIntent = Intent(context, LoginActivity::class.java)", "choices": [{"text": "            loginIntent.putExtra(\"mode\", mode)\n            return loginIntent\n        }\n\n"}], "metadata": {"task_id": "Tusky/293", "ground_truth": "            loginIntent.putExtra(LOGIN_MODE, mode)\n            return loginIntent\n        }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\login\\LoginActivity.kt"}}
{"prompt": "\n import android.webkit.WebView\nimport android.util.Log\nimport android.content.Intent\nimport android.content.Context\nimport android.app.Activity\noverride fun createIntent(context: Context, input: LoginData): Intent {\n        val intent = Intent(context, LoginWebViewActivity::class.java)", "choices": [{"text": "        intent.putExtra(\"loginData\", input)\n        return intent\n    }\n\nclass LoginWebViewActivity : AppCompatActivity() {\n    private val TAG = \"LoginWebViewActivity\"\n    private lateinit var webView: WebView\n    private lateinit var loginData: LoginData\n    private lateinit var loginWebViewClient: LoginWebViewClient\n    private lateinit var loginWebView: LoginWebView\n    private lateinit var loginWebViewPresenter: LoginWebViewPresenter\n    private lateinit var loginWebViewView: LoginWebViewView\n    private lateinit var loginWebViewInteractor: LoginWebViewInteractor\n    private lateinit var loginWebViewInteractorImpl: LoginWebViewInteractorImpl\n    private lateinit var loginWebViewPresenterImpl: LoginWebView"}], "metadata": {"task_id": "Tusky/295", "ground_truth": "        intent.putExtra(DATA_EXTRA, input)\n        return intent\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\login\\LoginWebViewActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.util.Log\nimport android.content.Intent\nfun makeResultIntent(result: LoginResult): Intent {\n            val intent = Intent()", "choices": [{"text": "            intent.putExtra(EXTRA_RESULT, result)\n            return intent\n        }\n\nfun getResultFromIntent(intent: Intent): LoginResult {\n            return intent.getSerializableExtra(EXTRA_RESULT) as LoginResult\n        }\n\nfun getResultFromIntent(intent: Intent): LoginResult? {\n            return intent.getSerializableExtra(EXTRA_RESULT) as LoginResult?\n        }\n\nfun getResultFromIntent(intent: Intent): LoginResult? {\n            return intent.getSerializableExtra(EXTRA_RESULT) as LoginResult?\n        }\n\nfun getResultFromIntent(intent: Intent):"}], "metadata": {"task_id": "Tusky/297", "ground_truth": "            intent.putExtra(RESULT_EXTRA, result)\n            return intent\n        }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\login\\LoginWebViewActivity.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {", "choices": [{"text": " super.onSaveInstanceState(outState)\n outState.putInt(\"key\", 1)\n}\n\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\n super.onRestoreInstanceState(savedInstanceState)\n val value = savedInstanceState.getInt(\"key\")\n}\n\n"}], "metadata": {"task_id": "Tusky/298", "ground_truth": "        super.onSaveInstanceState(outState)\n        binding.loginWebView.saveState(outState)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\login\\LoginWebViewActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.util.Log\nprivate fun sendResult(result: LoginResult) {", "choices": [{"text": "    Log.d(\"LoginActivity\", \"sendResult: $result\")\n}\n\nclass LoginActivity : AppCompatActivity() {\n\n    private val TAG = \"LoginActivity\"\n\n    private val RC_SIGN_IN = 123\n\n    private lateinit var auth: FirebaseAuth\n\n    private lateinit var googleSignInClient: GoogleSignInClient\n\n    private lateinit var firebaseAuthListener: FirebaseAuth.AuthStateListener\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_login)\n\n        auth = FirebaseAuth.getInstance()\n\n        googleSignInClient = GoogleSignIn.getClient(this"}], "metadata": {"task_id": "Tusky/300", "ground_truth": "        setResult(Activity.RESULT_OK, OauthLogin.makeResultIntent(result))\n        finishWithoutSlideOutAnimation()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\login\\LoginWebViewActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Marker\nimport com.keylesspalace.tusky.db.AccountEntity\nimport android.util.Log\nprivate suspend fun fetchMarker(authHeader: String, account: AccountEntity): Marker? {\n        return try {\n            val allMarkers = mastodonApi.markersWithAuth(\n                authHeader,\n                account.domain,\n                listOf(\"notifications\")\n            )\n            val notificationMarker = allMarkers[\"notifications\"]\n            Log.d(TAG, \"Fetched marker for ${account.fullName}: $notificationMarker\")\n            notificationMarker", "choices": [{"text": "        } catch (e: Exception) {\n            Log.e(TAG, \"Failed to fetch marker for ${account.fullName}\", e)\n            null\n        }\n    }\n\nprivate suspend fun fetchNotifications(authHeader: String, account: AccountEntity): List<Notification> {\n        return try {\n            val allNotifications = mastodonApi.notificationsWithAuth(\n                authHeader,\n                account.domain,\n                listOf(\"notifications\")\n            )\n            val notifications = allNotifications[\"notifications\"]\n            Log.d(TAG, \"Fetched notifications for ${account.fullName}: $notifications\")\n            notifications\n        } catch ("}], "metadata": {"task_id": "Tusky/302", "ground_truth": "        } catch (e: Exception) {\n            Log.e(TAG, \"Failed to fetch marker\", e)\n            null\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\notifications\\NotificationFetcher.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Notification\nimport com.keylesspalace.tusky.db.AccountEntity\nimport com.keylesspalace.tusky.R\nimport androidx.annotation.NonNull\nimport android.os.Build\nimport android.content.Context\nimport android.app.NotificationManager\nimport android.app.NotificationChannel\npublic static void deleteNotificationChannelsForAccount(@NonNull AccountEntity account, @NonNull Context context) {\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n        NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);\r", "choices": [{"text": "//        notificationManager.deleteNotificationChannel(account.getNotificationChannelId());\r\n    }\r\n}\n"}], "metadata": {"task_id": "Tusky/304", "ground_truth": "        notificationManager.deleteNotificationChannelGroup(account.getIdentifier());\r\n    }\r\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\notifications\\NotificationHelper.java"}}
{"prompt": "\n import org.unifiedpush.android.connector.UnifiedPush\nimport com.keylesspalace.tusky.network.MastodonApi\nimport com.keylesspalace.tusky.entity.Notification\nimport com.keylesspalace.tusky.db.AccountManager\nimport com.keylesspalace.tusky.db.AccountEntity\nimport android.content.Context\nprivate suspend fun enableUnifiedPushNotificationsForAccount(\n    context: Context,\n    api: MastodonApi,\n    accountManager: AccountManager,\n    account: AccountEntity\n) {\n    if (isUnifiedPushNotificationEnabledForAccount(account)) {\n        // Already registered, update the subscription to match notification settings\n        updateUnifiedPushSubscription(context, api, accountManager, account)\n    } else {\n        UnifiedPush.registerAppWithDialog(\n            context,", "choices": [{"text": "            account.instance,\n            account.accessToken,\n            account.username,\n            account.displayName,\n            account.avatarUrl,\n            account.notificationSettings\n        )\n    }\n}\n\nprivate suspend fun updateUnifiedPushSubscription(\n    context: Context,\n    api: MastodonApi,\n    accountManager: AccountManager,\n    account: AccountEntity\n) {\n    val unifiedPushSubscription = UnifiedPush.getSubscription(context, account.instance)\n    if (unifiedPushSubscription!= null) {\n        val unifiedPushSubscriptionSettings =\n            UnifiedPush.getSubscriptionSettings(context, account.instance)\n       "}], "metadata": {"task_id": "Tusky/309", "ground_truth": "            account.id.toString(),\n            features = arrayListOf(UnifiedPush.FEATURE_BYTES_MESSAGE)\n        )\n    }\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\notifications\\PushNotificationHelper.kt"}}
{"prompt": "\n import org.unifiedpush.android.connector.UnifiedPush\nimport com.keylesspalace.tusky.entity.Notification\nimport com.keylesspalace.tusky.db.AccountEntity\nimport android.content.Context\nfun disableUnifiedPushNotificationsForAccount(context: Context, account: AccountEntity) {\n    if (!isUnifiedPushNotificationEnabledForAccount(account)) {\n        // Not registered", "choices": [{"text": "for unified push notifications\n        return\n    }\n    val unifiedPush = UnifiedPush(context)\n    unifiedPush.unregister(account.id)\n}\n\nfun isUnifiedPushNotificationEnabledForAccount(account: AccountEntity): Boolean {\n    return account.unifiedPushEnabled\n}\n\nfun enableUnifiedPushNotificationsForAccount(context: Context, account: AccountEntity) {\n    if (isUnifiedPushNotificationEnabledForAccount(account)) {\n        // Already registered for unified push notifications\n        return\n    }\n    val unifiedPush = UnifiedPush(context)\n    unifiedPush.register(account.id)\n}\n"}], "metadata": {"task_id": "Tusky/310", "ground_truth": "        return\n    }\n\n    UnifiedPush.unregisterApp(context, account.id.toString())\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\notifications\\PushNotificationHelper.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Notification\nimport com.keylesspalace.tusky.db.AccountManager\nimport android.content.Context\nprivate fun disablePushNotifications(context: Context, accountManager: AccountManager) {\n    accountManager.accounts.forEach {", "choices": [{"text": "account ->\n        account.notifications.forEach { notification ->\n            if (notification.enabled) {\n                notification.enabled = false\n                accountManager.updateNotification(notification)\n            }\n        }\n    }\n}\n\nprivate fun enablePushNotifications(context: Context, accountManager: AccountManager) {\n    accountManager.accounts.forEach { account ->\n        account.notifications.forEach { notification ->\n            if (!notification.enabled) {\n                notification.enabled = true\n                accountManager.updateNotification(notification)\n            }\n        }\n    }\n}\n\nprivate fun getNotification(context: Context, accountManager: AccountManager,"}], "metadata": {"task_id": "Tusky/311", "ground_truth": "        disableUnifiedPushNotificationsForAccount(context, it)\n    }\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\notifications\\PushNotificationHelper.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Notification\nimport com.keylesspalace.tusky.db.AccountManager\nimport android.content.Context\nfun disableAllNotifications(context: Context, accountManager: AccountManager) {", "choices": [{"text": "    accountManager.getAccounts().forEach {\n        disableNotifications(context, it)\n    }\n}\n\nfun disableNotifications(context: Context, account: Account) {\n    val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n    notificationManager.cancel(account.id)\n}\n\nfun enableNotifications(context: Context, account: Account) {\n    val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n    notificationManager.notify(account.id, Notification(account.id, account.name, account.avatarUrl, account."}], "metadata": {"task_id": "Tusky/312", "ground_truth": "    disablePushNotifications(context, accountManager)\n    NotificationHelper.disablePullNotifications(context)\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\notifications\\PushNotificationHelper.kt"}}
{"prompt": "\n import org.unifiedpush.android.connector.UnifiedPush\nimport kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.keylesspalace.tusky.network.MastodonApi\nimport com.keylesspalace.tusky.entity.Notification\nimport com.keylesspalace.tusky.db.AccountManager\nimport com.keylesspalace.tusky.db.AccountEntity\nimport at.connyduck.calladapter.networkresult.onSuccess\nimport android.util.Log\nimport android.content.Context\nsuspend fun updateUnifiedPushSubscription(\n    context: Context,\n    api: MastodonApi,\n    accountManager: AccountManager,\n    account: AccountEntity\n) {\n    withContext(Dispatchers.IO) {\n        api.updatePushNotificationSubscription(\n            \"Bearer ${account.accessToken}\",\n            account.domain,\n            buildSubscriptionData(context, account)\n        ).onSuccess {\n            Log.d(TAG, \"UnifiedPush subscription updated for account ${account.id}\")\n", "choices": [{"text": "/            accountManager.updateAccount(account.copy(unifiedPushSubscription = it))\n        }\n    }\n}\n\nprivate fun buildSubscriptionData(context: Context, account: AccountEntity): Map<String, String> {\n    val unifiedPush = UnifiedPush(context)\n    val subscription = unifiedPush.getSubscription(account.domain)\n    return mapOf(\n        \"endpoint\" to subscription.endpoint,\n        \"keys\" to subscription.keys.joinToString(\",\")\n    )\n}\n\nprivate const val TAG = \"UnifiedPush\"<file_sep>/app/src/main/java/com/keyles"}], "metadata": {"task_id": "Tusky/314", "ground_truth": "            account.pushServerKey = it.serverKey\n            accountManager.saveAccount(account)\n        }\n    }\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\notifications\\PushNotificationHelper.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\noverride fun onResume() {", "choices": [{"text": "    super.onResume()\n    val intent = Intent(this, MainActivity::class.java)\n    startActivity(intent)\n    finish()\n}\n\n"}], "metadata": {"task_id": "Tusky/315", "ground_truth": "        super.onResume()\n        requireActivity().setTitle(R.string.action_view_account_preferences)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\preference\\AccountPreferencesFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport androidx.annotation.DrawableRes\n @DrawableRes\n    private fun getIconForSensitivity(sensitive: Boolean): Int {\n        return if (sensitive) {", "choices": [{"text": "            R.drawable.ic_sensitivity_on\n        } else {\n            R.drawable.ic_sensitivity_off\n        }\n    }\n\n    @DrawableRes\n    private fun getIconForStatus(status: Status): Int {\n        return when (status) {\n            Status.ONLINE -> R.drawable.ic_status_online\n            Status.OFFLINE -> R.drawable.ic_status_offline\n            Status.AWAY -> R.drawable.ic_status_away\n            Status.BUSY -> R.drawable.ic_status_busy\n            Status.DND -> R.drawable.ic_status_"}], "metadata": {"task_id": "Tusky/318", "ground_truth": "            R.drawable.ic_hide_media_24dp\n        } else {\n            R.drawable.ic_eye_24dp\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\preference\\AccountPreferencesFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.db.AccountEntity\nprivate inline fun updateAccount(changer: (AccountEntity) -> Unit) {\n        accountManager.activeAccount?.let { account ->\n            changer(account)", "choices": [{"text": "            accountManager.updateAccount(account)\n        }\n    }\n\nfun AccountManager.updateAccount(account: AccountEntity) {\n    val accountDao = db.accountDao()\n    accountDao.update(account)\n}\n\nfun AccountManager.updateAccount(account: Account) {\n    val accountDao = db.accountDao()\n    accountDao.update(account.toEntity())\n}\n\nfun AccountManager.updateAccount(account: AccountEntity, changer: (AccountEntity) -> Unit) {\n    val accountDao = db.accountDao()\n    accountDao.update(account."}], "metadata": {"task_id": "Tusky/320", "ground_truth": "            accountManager.saveAccount(account)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\preference\\NotificationPreferencesFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\noverride fun onResume() {", "choices": [{"text": "    super.onResume()\n    val intent = Intent(this, MainActivity::class.java)\n    startActivity(intent)\n    finish()\n}\n\n"}], "metadata": {"task_id": "Tusky/321", "ground_truth": "        super.onResume()\n        requireActivity().setTitle(R.string.pref_title_edit_notification_settings)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\preference\\NotificationPreferencesFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport androidx.preference.PreferenceManager\nimport androidx.preference.Preference\nimport android.content.SharedPreferences\noverride fun onResume() {\n        super.onResume()\n        PreferenceManager.getDefaultSharedPreferences(", "choices": [{"text": "his).registerOnSharedPreferenceChangeListener(this)\n    }\n\n    override fun onPause() {\n        super.onPause()\n        PreferenceManager.getDefaultSharedPreferences(this).unregisterOnSharedPreferenceChangeListener(this)\n    }\n\n    override fun onSharedPreferenceChanged(sharedPreferences: SharedPreferences, key: String) {\n        val pref = findPreference(key)\n        if (pref!= null) {\n            pref.summary = sharedPreferences.getString(key, \"\")\n        }\n    }\n}\n<file_sep>/app/src/main/java/com/keylesspalace/tusky/ui/settings/SettingsFragment."}], "metadata": {"task_id": "Tusky/322", "ground_truth": "            this\n        ).registerOnSharedPreferenceChangeListener(this)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\preference\\PreferencesActivity.kt"}}
{"prompt": "\n import androidx.preference.PreferenceManager\nimport androidx.preference.Preference\nimport android.content.SharedPreferences\noverride fun onPause() {\n        super.onPause()\n        PreferenceManager.getDefaultSharedPreferences(", "choices": [{"text": "his).unregisterOnSharedPreferenceChangeListener(this)\n    }\noverride fun onResume() {\n        super.onResume()\n        PreferenceManager.getDefaultSharedPreferences(this).registerOnSharedPreferenceChangeListener(this)\n    }\noverride fun onSharedPreferenceChanged(sharedPreferences: SharedPreferences, key: String) {\n        val pref = findPreference<Preference>(key)\n        if (pref!= null) {\n            pref.summary = sharedPreferences.getString(key, \"\")\n        }\n    }\n"}], "metadata": {"task_id": "Tusky/323", "ground_truth": "            this\n        ).unregisterOnSharedPreferenceChangeListener(this)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\preference\\PreferencesActivity.kt"}}
{"prompt": "\n import androidx.preference.Preference\nimport android.content.Intent\nimport android.content.Context\n @JvmStatic\n        fun newIntent(context: Context, preferenceType: Int): Intent {\n            val intent = Intent(context, PreferencesActivity::class.java)", "choices": [{"text": "            intent.putExtra(PREFERENCE_TYPE, preferenceType)\n            return intent\n        }\n"}], "metadata": {"task_id": "Tusky/326", "ground_truth": "            intent.putExtra(EXTRA_PREFERENCE_TYPE, preferenceType)\n            return intent\n        }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\preference\\PreferencesActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\noverride fun onResume() {", "choices": [{"text": "    super.onResume()\n    val intent = Intent(this, MainActivity::class.java)\n    startActivity(intent)\n    finish()\n}\n\n"}], "metadata": {"task_id": "Tusky/327", "ground_truth": "        super.onResume()\n        requireActivity().setTitle(R.string.action_view_preferences)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\preference\\PreferencesFragment.kt"}}
{"prompt": "\n import de.c1710.filemojicompat_ui.views.picker.preference.EmojiPickerPreference\nimport com.keylesspalace.tusky.settings.preference\nimport androidx.preference.Preference\noverride fun onDisplayPreferenceDialog(preference: Preference) {\n        if (!EmojiPickerPreference.onDisplayPreferenceDialog(this, preference)) {", "choices": [{"text": "            super.onDisplayPreferenceDialog(preference)\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/328", "ground_truth": "            super.onDisplayPreferenceDialog(preference)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\preference\\PreferencesFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\noverride fun onResume() {", "choices": [{"text": "    super.onResume()\n    val intent = Intent(this, MainActivity::class.java)\n    startActivity(intent)\n    finish()\n}\n\n"}], "metadata": {"task_id": "Tusky/329", "ground_truth": "        super.onResume()\n        requireActivity().setTitle(R.string.pref_title_http_proxy_settings)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\preference\\ProxyPreferencesFragment.kt"}}
{"prompt": "\n override fun onPause() {\n        super.onPause()", "choices": [{"text": "        if (mAdView!= null) {\n            mAdView.pause()\n        }\n    }\n\n    override fun onResume() {\n        super.onResume()\n        if (mAdView!= null) {\n            mAdView.resume()\n        }\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        if (mAdView!= null) {\n            mAdView.destroy()\n        }\n    }\n}\n<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.content.Intent"}], "metadata": {"task_id": "Tusky/330", "ground_truth": "        if (pendingRestart) {\n            pendingRestart = false\n            exitProcess(0)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\preference\\ProxyPreferencesFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\noverride fun onResume() {", "choices": [{"text": "    super.onResume()\n    val intent = Intent(this, MainActivity::class.java)\n    startActivity(intent)\n    finish()\n}\n\n"}], "metadata": {"task_id": "Tusky/331", "ground_truth": "        super.onResume()\n        requireActivity().setTitle(R.string.pref_title_post_tabs)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\preference\\TabFilterPreferencesFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.databinding.ItemReportStatusBinding\nimport android.view.ViewGroup\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): StatusViewHolder {\n        val binding = ItemReportStatusBinding.inflate(\n            LayoutInflater.from(parent.context),\n            parent,\n            false\n        )\n        return StatusViewHolder(\n            binding,\n            statusDisplayOptions,", "choices": [{"text": "            statusDisplayOptions.statusColor\n        )\n    }\n\n"}], "metadata": {"task_id": "Tusky/333", "ground_truth": "            statusViewState,\n            adapterHandler,\n            statusForPosition\n        )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\report\\adapter\\StatusesAdapter.kt"}}
{"prompt": "\n override fun onBindViewHolder(holder: StatusViewHolder, position: Int) {\n        getItem(position)?.let { status ->", "choices": [{"text": "            holder.bind(status)\n        }\n    }\n}\n\nclass StatusViewHolder(private val binding: ItemStatusBinding) : RecyclerView.ViewHolder(binding.root) {\n    fun bind(status: Status) {\n        binding.status = status\n        binding.executePendingBindings()\n    }\n}\n\n"}], "metadata": {"task_id": "Tusky/334", "ground_truth": "            holder.bind(status)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\report\\adapter\\StatusesAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Status\nimport androidx.paging.PagingState\noverride fun getRefreshKey(state: PagingState<String, Status>): String? {\n        return state.anchorPosition?.let { anchorPosition ->", "choices": [{"text": "            state.closestItemToPosition(anchorPosition)?.id\n        }\n    }\n}\n\n"}], "metadata": {"task_id": "Tusky/335", "ground_truth": "            state.closestItemToPosition(anchorPosition)?.id\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\report\\adapter\\StatusesPagingSource.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Status\nprivate suspend fun getStatusList(\n        minId: String? = null,\n        maxId: String? = null,\n        limit: Int\n    ): List<Status> {\n        return mastodonApi.accountStatusesObservable(\n            accountId = accountId,\n            maxId = maxId,\n            sinceId = null,", "choices": [{"text": "            limit = limit,\n            minId = minId\n        ).map {\n            it.map { status ->\n                Status(\n                    id = status.id,\n                    account = Account(\n                        id = status.account.id,\n                        username = status.account.username,\n                        displayName = status.account.displayName,\n                        acct = status.account.acct,\n                        avatar = status.account.avatar,\n                        avatarStatic = status.account.avatarStatic,\n                        header = status.account.header,\n                        headerStatic = status.account.headerStatic,\n                        locked = status.account.locked,\n                        created = status."}], "metadata": {"task_id": "Tusky/336", "ground_truth": "            minId = minId,\n            limit = limit,\n            excludeReblogs = true\n        ).await()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\report\\adapter\\StatusesPagingSource.kt"}}
{"prompt": "\n import java.util.Date\nimport com.keylesspalace.tusky.util.getRelativeTimeSpanString\nimport com.keylesspalace.tusky.R\nprivate fun setCreatedAt(createdAt: Date?) {\n        if (statusDisplayOptions.useAbsoluteTime) {\n            binding.timestampInfo.text = absoluteTimeFormatter.format(createdAt)\n        } else {\n            binding.timestampInfo.text = if (createdAt != null) {\n                val then = createdAt.time\n                val now = System.currentTimeMillis()\n                getRelativeTimeSpanString(binding.timestampInfo.context, then, now)\n            } else {", "choices": [{"text": "\n import java.util.Date\nimport com.keylesspalace.tusky.util.getRelativeTimeSpanString\nimport com.keylesspalace.tusky.R\nprivate fun setCreatedAt(createdAt: Date?) {\n        if (statusDisplayOptions.useAbsoluteTime) {\n            binding.timestampInfo.text = absoluteTimeFormatter.format(createdAt)\n        } else {\n            binding.timestampInfo.text = if (createdAt!= null) {\n                val then = createdAt.time\n                val now = System.currentTimeMillis()\n                getRelativeTimeSpanString(binding.timestampInfo.context, then, now)\n            } else {\n                \"\"\n            }\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/338", "ground_truth": "                // unknown minutes~\n                \"?m\"\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\report\\adapter\\StatusViewHolder.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        binding.textReported.text = getString(R.string.report_sent_success, viewModel.accountUserName)", "choices": [{"text": "        binding.textReported.visibility = View.VISIBLE\n        binding.buttonReport.visibility = View.GONE\n    }\n}\n<file_sep>/app/src/main/java/com/keylesspalace/tusky/ui/account/AccountViewModel.kt\npackage com.keylesspalace.tusky.ui.account\n\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport com.keylesspalace.tusky.data.AccountRepository\nimport com.keylesspalace.tusky"}], "metadata": {"task_id": "Tusky/339", "ground_truth": "        handleClicks()\n        subscribeObservables()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\report\\fragments\\ReportDoneFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.components.report.Screen\nprivate fun handleClicks() {\n        binding.buttonDone.setOnClickListener {\n            viewModel.navigateTo(Screen.Finish)\n        }\n        binding.buttonBlock.setOnClickListener {\n            viewModel.toggleBlock()", "choices": [{"text": "        }\n        binding.buttonUnblock.setOnClickListener {\n            viewModel.toggleBlock()\n        }\n        binding.buttonReport.setOnClickListener {\n            viewModel.navigateTo(Screen.Report)\n        }\n        binding.buttonEdit.setOnClickListener {\n            viewModel.navigateTo(Screen.Edit)\n        }\n        binding.buttonDelete.setOnClickListener {\n            viewModel.navigateTo(Screen.Delete)\n        }\n        binding.buttonCancel.setOnClickListener {\n            viewModel.navigateTo(Screen.Cancel)\n        }\n        binding.buttonCancelReport.setOnClickListener {\n            viewModel.navigateTo(Screen.Cancel)\n        }\n        binding.buttonCancelEdit.setOnClickListener"}], "metadata": {"task_id": "Tusky/340", "ground_truth": "        }\n        binding.buttonMute.setOnClickListener {\n            viewModel.toggleMute()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\report\\fragments\\ReportDoneFragment.kt"}}
{"prompt": "\n import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        fillViews()\n        handleChanges()", "choices": [{"text": "        handleClicks()\n    }\n\n"}], "metadata": {"task_id": "Tusky/341", "ground_truth": "        handleClicks()\n        subscribeObservables()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\report\\fragments\\ReportNoteFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.Success\nimport com.keylesspalace.tusky.components.report.Screen\nprivate fun subscribeObservables() {\n        viewModel.reportingState.observe(viewLifecycleOwner) {\n            when (it) {\n                is Success -> viewModel.navigateTo(Screen.Done)", "choices": [{"text": "                is Failure -> {\n                    // TODO: Handle error\n                }\n            }\n        }\n    }\n<file_sep>/app/src/main/java/com/keylesspalace/tusky/components/report/ReportViewModel.kt\npackage com.keylesspalace.tusky.components.report\n\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.keylesspalace.tusky.util.Failure\nimport com.keylesspalace.tusky"}], "metadata": {"task_id": "Tusky/343", "ground_truth": "                is Loading -> showLoading()\n                is Error -> showError(it.cause)\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\report\\fragments\\ReportNoteFragment.kt"}}
{"prompt": " import com.keylesspalace.tusky.components.report.Screen\nvar viewModelFactory ViewModelFactory\nval viewModel ReportViewModel\nval binding\nprivate fun handleClicks() {\n        binding.buttonBack.setOnClickListener {\n            viewModel.navigateTo(Screen.Back)\n        }", "choices": [{"text": "        binding.buttonNext.setOnClickListener {\n            viewModel.navigateTo(Screen.Next)\n        }\n    }\nprivate fun handleNavigation() {\n        viewModel.navigation.observe(viewLifecycleOwner, Observer { screen ->\n            when (screen) {\n                is Screen.Back -> {\n                    findNavController().navigate(R.id.action_reportFragment_to_homeFragment)\n                }\n                is Screen.Next -> {\n                    findNavController().navigate(R.id.action_reportFragment_to_reportFragment2)\n                }\n            }\n        })\n    }\nprivate fun handleError() {\n        viewModel.error"}], "metadata": {"task_id": "Tusky/345", "ground_truth": "\n        binding.buttonReport.setOnClickListener {\n            sendReport()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\report\\fragments\\ReportNoteFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport androidx.lifecycle.Lifecycle\nimport androidx.core.view.MenuProvider\nimport android.view.View\nimport android.view.Menu\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        requireActivity().addMenuProvider(this, viewLifecycleOwner, Lifecycle.State.RESUMED)\n        handleClicks()", "choices": [{"text": "    }\n\noverride fun onCreateMenu(menu: Menu, menuInflater: MenuInflater) {\n        menuInflater.inflate(R.menu.menu_main, menu)\n    }\n\noverride fun onMenuItemSelected(menuItem: MenuItem): Boolean {\n        when (menuItem.itemId) {\n            R.id.action_settings -> {\n                // User chose the \"Settings\" item, show the app settings UI...\n                return true\n            }\n            else -> return false\n        }\n    }\n\nprivate fun handleClicks() {\n        binding.button.setOnClickListener {\n            val intent = Intent(this, SecondActivity::class"}], "metadata": {"task_id": "Tusky/346", "ground_truth": "        initStatusesView()\n        setupSwipeRefreshLayout()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\report\\fragments\\ReportStatusesFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onMenuItemSelected(menuItem: MenuItem): Boolean {\n        return when (menuItem.itemId) {\n            R.id.action_refresh -> {\n                binding.swipeRefreshLayout.isRefreshing = true\n                onRefresh()", "choices": [{"text": "                true\n            }\n            else -> super.onMenuItemSelected(menuItem)\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/348", "ground_truth": "                true\n            }\n            else -> false\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\report\\fragments\\ReportStatusesFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\noverride fun onRefresh() {", "choices": [{"text": "    // Do work to refresh the list here.\n    adapter.notifyDataSetChanged()\n    swipeRefreshLayout.isRefreshing = false\n}\n\n"}], "metadata": {"task_id": "Tusky/349", "ground_truth": "        snackbarErrorRetry?.dismiss()\n        adapter.refresh()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\report\\fragments\\ReportStatusesFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nprivate fun setupSwipeRefreshLayout() {\n        binding.swipeRefreshLayout.setColorSchemeResources(R.color.tusky_blue)", "choices": [{"text": "        binding.swipeRefreshLayout.setOnRefreshListener {\n            viewModel.refresh()\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/350", "ground_truth": "\n        binding.swipeRefreshLayout.setOnRefreshListener(this)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\report\\fragments\\ReportStatusesFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport com.google.android.material.snackbar.Snackbar\nprivate fun showError() {\n        if (snackbarErrorRetry?.isShown != true) {\n            snackbarErrorRetry = Snackbar.make(binding.swipeRefreshLayout, R.string.failed_fetch_posts, Snackbar.LENGTH_INDEFINITE)\n            snackbarErrorRetry?.setAction(R.string.action_retry) {", "choices": [{"text": "\n import com.keylesspalace.tusky.R\nimport com.google.android.material.snackbar.Snackbar\nprivate fun showError() {\n        if (snackbarErrorRetry?.isShown!= true) {\n            snackbarErrorRetry = Snackbar.make(binding.swipeRefreshLayout, R.string.failed_fetch_posts, Snackbar.LENGTH_INDEFINITE)\n            snackbarErrorRetry?.setAction(R.string.action_retry) {\n                viewModel.retry()\n            }\n            snackbarErrorRetry?.show()\n        }\n    }\n\nprivate fun showError(message: String) {\n        if (snackbarErrorRetry?.isShown!= true) {\n            snackbarErrorRetry = Snackbar.make(binding.swipeRefreshLayout, message, Snackbar.LENGTH_INDEFINITE)\n            snackbarErrorRetry?.setAction(R.string.action_retry) {\n                viewModel.retry()\n            }\n            snackbarErrorRetry?.show()\n        }\n    }\n\nprivate fun showError(message: String, action: String, actionListener: View"}], "metadata": {"task_id": "Tusky/351", "ground_truth": "                adapter.retry()\n            }\n            snackbarErrorRetry?.show()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\report\\fragments\\ReportStatusesFragment.kt"}}
{"prompt": " import com.keylesspalace.tusky.components.report.Screen\nval binding\nvar adapter StatusesAdapter\nvar snackbarErrorRetry Snackbar?\nprivate fun handleClicks() {\n        binding.buttonCancel.setOnClickListener {\n            viewModel.navigateTo(Screen.Back)\n        }", "choices": [{"text": "        binding.buttonRetry.setOnClickListener {\n            viewModel.retry()\n        }\n        binding.buttonRetry.setOnLongClickListener {\n            viewModel.retry()\n            true\n        }\n        binding.buttonRetry.setOnTouchListener { _, event ->\n            if (event.action == MotionEvent.ACTION_DOWN) {\n                binding.buttonRetry.backgroundTintList =\n                    ContextCompat.getColorStateList(\n                        requireContext(),\n                        R.color.colorAccent\n                    )\n            } else if (event.action == MotionEvent.ACTION_UP) {\n                binding.buttonRetry.backgroundTintList =\n                    ContextCompat.getColorStateList("}], "metadata": {"task_id": "Tusky/352", "ground_truth": "\n        binding.buttonContinue.setOnClickListener {\n            viewModel.navigateTo(Screen.Note)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\report\\fragments\\ReportStatusesFragment.kt"}}
{"prompt": "\n fun isMediaShow(id: String, isSensitive: Boolean): Boolean = isStateEnabled(\n        mediaShownState,", "choices": [{"text": "        id,\n        isSensitive\n    )\n }\n\nfun isMediaShown(id: String, isSensitive: Boolean): Boolean = isStateEnabled(\n        mediaShownState,\n        id,\n        isSensitive\n    )\n\nfun isMediaShown(id: String): Boolean = isStateEnabled(\n        mediaShownState,\n        id,\n        false\n    )\n\nfun isMediaShown(id: String, isSensitive: Boolean): Boolean = isStateEnabled(\n        mediaShownState,\n        id,\n        isSensitive\n    )\n\nfun isMediaShown(id: String, isSensitive: Boolean, isShow:"}], "metadata": {"task_id": "Tusky/353", "ground_truth": "        id,\n        !isSensitive\n    )", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\report\\model\\StatusViewState.kt"}}
{"prompt": "\n fun isContentShow(id: String, isSensitive: Boolean): Boolean = isStateEnabled(\n        contentShownState,", "choices": [{"text": "        id,\n        isSensitive\n    )\n\n    fun isContentShown(id: String, isSensitive: Boolean): Boolean = isStateEnabled(\n        contentShownState,\n        id,\n        isSensitive\n    )\n\n    fun isContentHidden(id: String, isSensitive: Boolean): Boolean = isStateEnabled(\n        contentHiddenState,\n        id,\n        isSensitive\n    )\n\n    fun isContentHidden(id: String, isSensitive: Boolean): Boolean = isStateEnabled(\n        contentHiddenState,\n        id,\n        isSensitive\n    )\n\n    fun isContentShown(id: String, isSensitive: Boolean): Boolean = is"}], "metadata": {"task_id": "Tusky/354", "ground_truth": "        id,\n        !isSensitive\n    )", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\report\\model\\StatusViewState.kt"}}
{"prompt": "\n fun isCollapsed(id: String, isCollapsed: Boolean): Boolean = isStateEnabled(\n        longContentCollapsedState,", "choices": [{"text": "        id,\n        isCollapsed\n    )\n fun isExpanded(id: String, isExpanded: Boolean): Boolean = isStateEnabled(\n        longContentExpandedState,\n        id,\n        isExpanded\n    )\n fun isCollapsed(id: String): Boolean = isStateEnabled(\n        longContentCollapsedState,\n        id\n    )\n fun isExpanded(id: String): Boolean = isStateEnabled(\n        longContentExpandedState,\n        id\n    )\n fun isCollapsed(id: String, isCollapsed: Boolean, isExpanded: Boolean): Boolean = isStateEnabled(\n        longContentCollapsedState,\n        id,\n        is"}], "metadata": {"task_id": "Tusky/355", "ground_truth": "        id,\n        isCollapsed\n    )", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\report\\model\\StatusViewState.kt"}}
{"prompt": "\n private fun setStateEnabled(map: MutableMap<String, Boolean>, id: String, state: Boolean) =\n        map.put(", "choices": [{"text": "d, state)\n\n"}], "metadata": {"task_id": "Tusky/356", "ground_truth": "            id,\n            state\n        )", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\report\\model\\StatusViewState.kt"}}
{"prompt": "\n private fun showPreviousScreen() {\n        when (binding.wizard.currentItem) {\n            0 -> closeScreen()", "choices": [{"text": "            1 -> binding.wizard.currentItem = 0\n        }\n    }\n\n    private fun closeScreen() {\n        finish()\n    }\n\n    private fun showNextScreen() {\n        when (binding.wizard.currentItem) {\n            0 -> binding.wizard.currentItem = 1\n            1 -> binding.wizard.currentItem = 2\n        }\n    }\n\n    private fun showFinishScreen() {\n        binding.wizard.currentItem = 2\n    }\n\n    private fun showError(message: String) {\n        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()\n    }\n\n    private fun showSuccess(message:"}], "metadata": {"task_id": "Tusky/358", "ground_truth": "            1 -> showStatusesPage()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\report\\ReportActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.content.Intent\nimport android.content.Context\n @JvmStatic\n        fun getIntent(\n            context: Context,\n            accountId: String,\n            userName: String,\n            statusId: String? = null\n        ) = Intent(context, ReportActivity::class.java)\n            .apply {\n                putExtra(ACCOUNT_ID, accountId)", "choices": [{"text": "\n import com.keylesspalace.tusky.R\nimport android.content.Intent\nimport android.content.Context\n @JvmStatic\n        fun getIntent(\n            context: Context,\n            accountId: String,\n            userName: String,\n            statusId: String? = null\n        ) = Intent(context, ReportActivity::class.java)\n           .apply {\n                putExtra(ACCOUNT_ID, accountId)\n                putExtra(USER_NAME, userName)\n                putExtra(STATUS_ID, statusId)\n            }\n}<file_sep>/app/src/main/java/com/keylesspalace/tusky/ui/main/MainViewModel.kt\npackage com.keylesspalace.tusky.ui.main\n\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.keylesspalace.tusky.data.model.Account\nimport com.keyles"}], "metadata": {"task_id": "Tusky/359", "ground_truth": "                putExtra(ACCOUNT_USERNAME, userName)\n                putExtra(STATUS_ID, statusId)\n            }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\report\\ReportActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Relationship\nfun init(accountId: String, userName: String, statusId: String?) {\n        this.accountId = accountId\n        this.accountUserName = userName\n        this.statusId = statusId\n        statusId?.let {\n            selectedIds.add(it)\n        }\n\n        isRemoteAccount = userName.contains('@')\n        if (isRemoteAccount) {\n            remoteServer = userName.substring(userName.indexOf('@') + 1)\n        }\n\n        obtainRelationship()", "choices": [{"text": "    }\n\nfun obtainRelationship() {\n        val relationship = Relationship.getRelationship(accountId, accountUserName)\n        if (relationship!= null) {\n            relationship.let {\n                this.relationship = it\n                this.relationshipId = it.id\n                this.relationshipType = it.type\n                this.relationshipStatus = it.status\n                this.relationshipStatusId = it.statusId\n                this.relationshipStatusName = it.statusName\n                this.relationshipStatusDescription = it.statusDescription\n                this.relationshipStatusDate = it.statusDate\n                this.relationshipStatusDateStr = it.statusDateStr\n                this"}], "metadata": {"task_id": "Tusky/360", "ground_truth": "\n        viewModelScope.launch {\n            accountIdFlow.emit(accountId)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\report\\ReportViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.keylesspalace.tusky.util.Loading\nimport com.keylesspalace.tusky.entity.Relationship\nimport at.connyduck.calladapter.networkresult.fold\nimport androidx.lifecycle.viewModelScope\nprivate fun obtainRelationship() {\n        val ids = listOf(accountId)\n        muteStateMutable.value = Loading()\n        blockStateMutable.value = Loading()\n        viewModelScope.launch {\n            mastodonApi.relationships(ids).fold(\n                { data ->\n                    updateRelationship(data.getOrNull(0))\n                },\n                {", "choices": [{"text": "                    muteStateMutable.value = Loading.Error(it)\n                    blockStateMutable.value = Loading.Error(it)\n                }\n            )\n        }\n    }\n\nprivate fun updateRelationship(relationship: Relationship?) {\n        if (relationship == null) {\n            muteStateMutable.value = Loading.Error(IllegalStateException(\"No relationship found\"))\n            blockStateMutable.value = Loading.Error(IllegalStateException(\"No relationship found\"))\n            return\n        }\n        muteStateMutable.value = Loading.Success(relationship.muting)\n        blockStateMutable.value = Loading.Success(relationship.blocking)\n    }"}], "metadata": {"task_id": "Tusky/361", "ground_truth": "                    updateRelationship(null)\n                }\n            )\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\report\\ReportViewModel.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Status\nfun setStatusChecked(status: Status, checked: Boolean) {\n        if (checked) {", "choices": [{"text": "            status.checked = true\n        } else {\n            status.checked = false\n        }\n    }\n\nfun setStatusChecked(status: Status, checked: Boolean, isChecked: Boolean) {\n        if (checked) {\n            status.checked = true\n        } else {\n            status.checked = false\n        }\n    }\n\nfun setStatusChecked(status: Status, checked: Boolean, isChecked: Boolean, isChecked2: Boolean) {\n        if (checked) {\n            status.checked = true\n        } else {\n            status.checked = false\n        }\n    }\n\nfun setStatusChecked(status: Status,"}], "metadata": {"task_id": "Tusky/364", "ground_truth": "            selectedIds.add(status.id)\n        } else {\n            selectedIds.remove(status.id)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\report\\ReportViewModel.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onMenuItemSelected(menuItem: MenuItem): Boolean {\n        return when (menuItem.itemId) {\n            R.id.action_refresh -> {\n                binding.swipeRefreshLayout.isRefreshing = true\n                refreshStatuses()", "choices": [{"text": "                true\n            }\n            else -> super.onMenuItemSelected(menuItem)\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/366", "ground_truth": "                true\n            }\n            else -> false\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\scheduled\\ScheduledStatusActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.BindingHolder\nimport com.keylesspalace.tusky.entity.ScheduledStatus\nimport com.keylesspalace.tusky.databinding.ItemScheduledStatusBinding\nimport android.view.ViewGroup\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(\n        parent: ViewGroup,\n        viewType: Int\n    ): BindingHolder<ItemScheduledStatusBinding> {\n        val binding = ItemScheduledStatusBinding.inflate(\n            LayoutInflater.from(parent.context),", "choices": [{"text": "            parent,\n            false\n        )\n        return BindingHolder(binding)\n    }\n\n    override fun onBindViewHolder(holder: BindingHolder<ItemScheduledStatusBinding>, position: Int) {\n        val scheduledStatus = getItem(position)\n        holder.binding.scheduledStatus = scheduledStatus\n        holder.binding.executePendingBindings()\n    }\n}<file_sep>/app/src/main/java/com/keylesspalace/tusky/ui/main/MainViewModel.kt\npackage com.keylesspalace.tusky.ui.main\n\nimport androidx.lifecycle.LiveData\nimport androidx"}], "metadata": {"task_id": "Tusky/368", "ground_truth": "            parent,\n            false\n        )\n        return BindingHolder(binding)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\scheduled\\ScheduledStatusAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.BindingHolder\nimport com.keylesspalace.tusky.entity.ScheduledStatus\nimport com.keylesspalace.tusky.databinding.ItemScheduledStatusBinding\noverride fun onBindViewHolder(\n        holder: BindingHolder<ItemScheduledStatusBinding>,\n        position: Int\n    ) {\n        getItem(position)?.let { item ->\n            holder.binding.edit.isEnabled = true\n            holder.binding.delete.isEnabled = true\n            holder.binding.text.text = item.params.text\n            holder.binding.edit.setOnClickListener {\n                listener.edit(item)\n            }", "choices": [{"text": "            holder.binding.delete.setOnClickListener {\n                listener.delete(item)\n            }\n            holder.binding.text.setOnClickListener {\n                listener.edit(item)\n            }\n            holder.binding.text.setOnLongClickListener {\n                listener.edit(item)\n                true\n            }\n            holder.binding.edit.setOnLongClickListener {\n                listener.edit(item)\n                true\n            }\n            holder.binding.delete.setOnLongClickListener {\n                listener.delete(item)\n                true\n            }\n        }\n    }\n}\n<file_sep>/app/src/main/java/com/keylesspalace/t"}], "metadata": {"task_id": "Tusky/369", "ground_truth": "            holder.binding.delete.setOnClickListener {\n                listener.delete(item)\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\scheduled\\ScheduledStatusAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.ScheduledStatus\nimport androidx.paging.PagingSource\noverride fun invoke(): ScheduledStatusPagingSource {\n        return ScheduledStatusPagingSource(mastodonApi, scheduledTootsCache).also {", "choices": [{"text": "            it.start()\n        }\n    }\n}\n\nclass ScheduledStatusPagingSource(\n    private val mastodonApi: MastodonApi,\n    private val scheduledTootsCache: ScheduledTootsCache\n) : PagingSource<Int, ScheduledStatus>() {\n\n    private var nextCursor: String? = null\n\n    override suspend fun load(params: LoadParams<Int>): LoadResult<Int, ScheduledStatus> {\n        val page = params.key\n        val nextCursor = nextCursor\n        val response = mastodonApi.getScheduledStatuses(page, nextCursor)\n        val statuses ="}], "metadata": {"task_id": "Tusky/370", "ground_truth": "            pagingSource = it\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\scheduled\\ScheduledStatusPagingSource.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.ScheduledStatus\nfun remove(status: ScheduledStatus) {", "choices": [{"text": "    val scheduledStatus = ScheduledStatus.values().first { it.name == status.name }\n    val scheduledStatusId = scheduledStatus.id\n    val scheduledStatusName = scheduledStatus.name\n    val scheduledStatusDescription = scheduledStatus.description\n    val scheduledStatusColor = scheduledStatus.color\n    val scheduledStatusIcon = scheduledStatus.icon\n    val scheduledStatusIconColor = scheduledStatus.iconColor\n    val scheduledStatusIconBackgroundColor = scheduledStatus.iconBackgroundColor\n    val scheduledStatusIconBackgroundColorAlpha = scheduledStatus.iconBackgroundColorAlpha\n    val scheduledStatusIconBackgroundColorAlpha = scheduledStatus.iconBackgroundColorAlpha\n    val scheduledStatusIconBackgroundColor"}], "metadata": {"task_id": "Tusky/371", "ground_truth": "        scheduledTootsCache.remove(status)\n        pagingSource?.invalidate()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\scheduled\\ScheduledStatusPagingSource.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.databinding.ItemAccountBinding\nimport com.keylesspalace.tusky.adapter.AccountViewHolder\nimport android.view.ViewGroup\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): AccountViewHolder {\n        val binding = ItemAccountBinding.inflate(\n            LayoutInflater.from(parent.context),", "choices": [{"text": "            parent,\n            false\n        )\n        return AccountViewHolder(binding)\n    }\n}\n"}], "metadata": {"task_id": "Tusky/373", "ground_truth": "            parent,\n            false\n        )\n        return AccountViewHolder(binding)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\adapter\\SearchAccountsAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.BindingHolder\nimport com.keylesspalace.tusky.databinding.ItemHashtagBinding\noverride fun onBindViewHolder(holder: BindingHolder<ItemHashtagBinding>, position: Int) {\n        getItem(position)?.let { (name) ->\n            holder.binding.root.text = String.format(\"#%s\", name)", "choices": [{"text": "        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/376", "ground_truth": "            holder.binding.root.setOnClickListener { linkListener.onViewTag(name) }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\adapter\\SearchHashtagsAdapter.kt"}}
{"prompt": "\n override fun invoke(): SearchPagingSource<T> {\n        return SearchPagingSource(\n            mastodonApi = mastodonApi,\n            searchType = searchType,\n            searchRequest = searchRequest,\n            initialItems = initialItems,", "choices": [{"text": "            initialKey = initialKey,\n            retry = retry\n        )\n    }\n}\n<file_sep>/app/src/main/java/com/github/kazuhira_r/yukkuri/ui/home/HomeFragment.kt\npackage com.github.kazuhira_r.yukkuri.ui.home\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.core.view.isVisible\nimport androidx.fragment.app.Fragment\nimport androidx.fragment.app."}], "metadata": {"task_id": "Tusky/378", "ground_truth": "            parser = parser\n        ).also { source ->\n            currentSource = source\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\adapter\\SearchPagingSourceFactory.kt"}}
{"prompt": "\nvar searchRequest String\nvar currentSource SearchPagingSource<T>?\n fun newSearch(newSearchRequest: String) {", "choices": [{"text": "    searchRequest = newSearchRequest\n    currentSource = null\n}\n\nfun getSearchPagingSource(): SearchPagingSource<T>? {\n    if (currentSource == null) {\n        currentSource = SearchPagingSource(searchRequest)\n    }\n    return currentSource\n}\n\n"}], "metadata": {"task_id": "Tusky/379", "ground_truth": "        this.searchRequest = newSearchRequest\n        currentSource?.invalidate()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\adapter\\SearchPagingSourceFactory.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.adapter.StatusViewHolder\nimport android.view.ViewGroup\nimport android.view.LayoutInflater\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): StatusViewHolder {\n        val view = LayoutInflater.from(parent.context)", "choices": [{"text": "               .inflate(R.layout.item_status, parent, false)\n        return StatusViewHolder(view)\n    }\n}\n"}], "metadata": {"task_id": "Tusky/380", "ground_truth": "            .inflate(R.layout.item_status, parent, false)\n        return StatusViewHolder(view)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\adapter\\SearchStatusesAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.adapter.StatusViewHolder\noverride fun onBindViewHolder(holder: StatusViewHolder, position: Int) {\n        getItem(position)?.let { item ->", "choices": [{"text": "            holder.bind(item)\n        }\n    }\n"}], "metadata": {"task_id": "Tusky/381", "ground_truth": "            holder.setupWithStatus(item, statusListener, statusDisplayOptions)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\adapter\\SearchStatusesAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onMenuItemSelected(menuItem: MenuItem): Boolean {\n        return when (menuItem.itemId) {\n            R.id.action_refresh -> {\n                binding.swipeRefreshLayout.isRefreshing = true\n                onRefresh()", "choices": [{"text": "                true\n            }\n            else -> super.onMenuItemSelected(menuItem)\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/387", "ground_truth": "                true\n            }\n            else -> false\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\fragments\\SearchFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport com.google.android.material.snackbar.Snackbar\nprivate fun showError() {\n        if (snackbarErrorRetry?.isShown != true) {\n            snackbarErrorRetry = Snackbar.make(binding.root, R.string.failed_search, Snackbar.LENGTH_INDEFINITE)\n            snackbarErrorRetry?.setAction(R.string.action_retry) {\n                snackbarErrorRetry = null", "choices": [{"text": "\n import com.keylesspalace.tusky.R\nimport com.google.android.material.snackbar.Snackbar\nprivate fun showError() {\n        if (snackbarErrorRetry?.isShown!= true) {\n            snackbarErrorRetry = Snackbar.make(binding.root, R.string.failed_search, Snackbar.LENGTH_INDEFINITE)\n            snackbarErrorRetry?.setAction(R.string.action_retry) {\n                snackbarErrorRetry = null\n                viewModel.search()\n            }\n            snackbarErrorRetry?.show()\n        }\n    }\n\nprivate fun showError(message: String) {\n        if (snackbarErrorRetry?.isShown!= true) {\n            snackbarErrorRetry = Snackbar.make(binding.root, message, Snackbar.LENGTH_INDEFINITE)\n            snackbarErrorRetry?.setAction(R.string.action_retry) {\n                snackbarErrorRetry = null\n                viewModel.search()\n            }\n            snackbarErrorRetry?.show()\n        }\n    }\n\nprivate fun showError(message: Int) {\n        if"}], "metadata": {"task_id": "Tusky/389", "ground_truth": "                adapter.retry()\n            }\n            snackbarErrorRetry?.show()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\fragments\\SearchFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onViewAccount(id: String) {\n        bottomSheetActivity?.startActivityWithSlideInAnimation(", "choices": [{"text": "            AccountActivity.newInstance(id)\n        )\n    }\n\n"}], "metadata": {"task_id": "Tusky/390", "ground_truth": "            AccountActivity.getIntent(requireContext(), id)\n        )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\fragments\\SearchFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onViewTag(tag: String) {\n        bottomSheetActivity?.startActivityWithSlideInAnimation(", "choices": [{"text": "            Intent(this, YourActivity::class.java),\n            tag\n        )\n    }\n\n"}], "metadata": {"task_id": "Tusky/391", "ground_truth": "            StatusListActivity.newHashtagIntent(requireContext(), tag)\n        )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\fragments\\SearchFragment.kt"}}
{"prompt": "\n override fun onContentHiddenChange(isShowing: Boolean, position: Int) {\n        searchAdapter.peek(position)?.let {", "choices": [{"text": "            if (isShowing) {\n                searchAdapter.peek(position)?.onShow()\n            } else {\n                searchAdapter.peek(position)?.onHide()\n            }\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/393", "ground_truth": "            viewModel.contentHiddenChange(it, isShowing)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\fragments\\SearchStatusesFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\noverride fun onReply(position: Int) {\n        searchAdapter.peek(position)?.let { status ->", "choices": [{"text": "            val reply = status.reply\n            val replyId = reply.id\n            val replyUser = reply.user\n            val replyUserScreenName = replyUser.screenName\n            val replyUserAvatar = replyUser.avatar\n            val replyUserFullName = replyUser.fullName\n            val replyUserDescription = replyUser.description\n            val replyUserLocation = replyUser.location\n            val replyUserUrl = replyUser.url\n            val replyUserFollowersCount = replyUser.followersCount\n            val replyUserFriendsCount = replyUser.friendsCount\n            val replyUserStatusesCount = replyUser.statusesCount\n            val replyUserFavour"}], "metadata": {"task_id": "Tusky/394", "ground_truth": "            reply(status)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\fragments\\SearchStatusesFragment.kt"}}
{"prompt": "\n override fun onFavourite(favourite: Boolean, position: Int) {\n        searchAdapter.peek(position)?.let { status ->", "choices": [{"text": "            if (status.isFavourite!= favourite) {\n                status.isFavourite = favourite\n                searchAdapter.notifyItemChanged(position)\n            }\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/395", "ground_truth": "            viewModel.favorite(status, favourite)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\fragments\\SearchStatusesFragment.kt"}}
{"prompt": "\n override fun onBookmark(bookmark: Boolean, position: Int) {\n        searchAdapter.peek(position)?.let { status ->", "choices": [{"text": "            if (status == SearchAdapter.Status.LOADING) {\n                return\n            }\n            if (status == SearchAdapter.Status.ERROR) {\n                searchAdapter.notifyItemChanged(position)\n                return\n            }\n            if (status == SearchAdapter.Status.EMPTY) {\n                return\n            }\n            if (status == SearchAdapter.Status.SUCCESS) {\n                searchAdapter.notifyItemChanged(position)\n                return\n            }\n        }\n        searchAdapter.notifyItemChanged(position)\n    }\n\n    override fun onItemClick(position: Int) {\n        searchAdapter.peek(position)?.let { status ->\n            if"}], "metadata": {"task_id": "Tusky/396", "ground_truth": "            viewModel.bookmark(status, bookmark)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\fragments\\SearchStatusesFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onMore(view: View, position: Int) {\n        searchAdapter.peek(position)?.status?.let {", "choices": [{"text": "            when (it) {\n                SearchAdapter.Status.LOADING -> {\n                    searchAdapter.peek(position)?.status = SearchAdapter.Status.LOADING\n                    searchAdapter.notifyItemChanged(position)\n                }\n                SearchAdapter.Status.ERROR -> {\n                    searchAdapter.peek(position)?.status = SearchAdapter.Status.LOADING\n                    searchAdapter.notifyItemChanged(position)\n                }\n                SearchAdapter.Status.EMPTY -> {\n                    searchAdapter.peek(position)?.status = SearchAdapter.Status.LOADING\n                    searchAdapter.notifyItemChanged(position)\n                }\n                SearchAdapter.Status.SUCCESS -> {\n                    search"}], "metadata": {"task_id": "Tusky/397", "ground_truth": "            more(it, view, position)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\fragments\\SearchStatusesFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Status\nimport android.view.View\noverride fun onViewThread(position: Int) {\n        searchAdapter.peek(position)?.status?.let { status ->\n            val actionableStatus = status.actionableStatus", "choices": [{"text": ")\n            if (actionableStatus!= null) {\n                val actionableStatusView = searchAdapter.peek(position)?.actionableStatusView\n                actionableStatusView?.visibility = View.VISIBLE\n                actionableStatusView.text = actionableStatus.text\n                actionableStatusView.setOnClickListener {\n                    actionableStatus.action.invoke()\n                }\n            } else {\n                searchAdapter.peek(position)?.actionableStatusView?.visibility = View.GONE\n            }\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/398", "ground_truth": "            bottomSheetActivity?.viewThread(actionableStatus.id, actionableStatus.url)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\fragments\\SearchStatusesFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\noverride fun onOpenReblog(position: Int) {\n        searchAdapter.peek(position)?.status?.let { status ->", "choices": [{"text": "            val intent = Intent(this, StatusActivity::class.java)\n            intent.putExtra(StatusActivity.EXTRA_STATUS, status)\n            startActivity(intent)\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/399", "ground_truth": "            bottomSheetActivity?.viewAccount(status.account.id)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\fragments\\SearchStatusesFragment.kt"}}
{"prompt": "\n override fun onExpandedChange(expanded: Boolean, position: Int) {\n        searchAdapter.peek(position)?.let {", "choices": [{"text": "            if (expanded) {\n                searchAdapter.peek(position)?.expand()\n            } else {\n                searchAdapter.peek(position)?.collapse()\n            }\n        }\n    }\n}\n\n"}], "metadata": {"task_id": "Tusky/400", "ground_truth": "            viewModel.expandedChange(it, expanded)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\fragments\\SearchStatusesFragment.kt"}}
{"prompt": "\n override fun onContentCollapsedChange(isCollapsed: Boolean, position: Int) {\n        searchAdapter.peek(position)?.let {", "choices": [{"text": "            it.isCollapsed = isCollapsed\n            searchAdapter.notifyItemChanged(position)\n        }\n    }\n}\n\n"}], "metadata": {"task_id": "Tusky/401", "ground_truth": "            viewModel.collapsedChange(it, isCollapsed)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\fragments\\SearchStatusesFragment.kt"}}
{"prompt": "\n override fun onVoteInPoll(position: Int, choices: MutableList<Int>) {\n        searchAdapter.peek(position)?.let {", "choices": [{"text": "            val poll = it.poll\n            val vote = PollVote(poll.id, choices)\n            viewModel.voteInPoll(vote)\n        }\n    }\n}\n<file_sep>/app/src/main/java/com/example/pollapp/ui/poll/PollViewModel.kt\npackage com.example.pollapp.ui.poll\n\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.example.pollapp.data.Poll\nimport com.example.pollapp.data.Poll"}], "metadata": {"task_id": "Tusky/402", "ground_truth": "            viewModel.voteInPoll(it, choices)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\fragments\\SearchStatusesFragment.kt"}}
{"prompt": "\n private fun removeItem(position: Int) {\n        searchAdapter.peek(position)?.let {", "choices": [{"text": "            searchAdapter.remove(it)\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/403", "ground_truth": "            viewModel.removeItem(it)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\fragments\\SearchStatusesFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\noverride fun onReblog(reblog: Boolean, position: Int) {\n        searchAdapter.peek(position)?.let { status ->", "choices": [{"text": "            status.reblog = reblog\n            searchAdapter.notifyItemChanged(position)\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/404", "ground_truth": "            viewModel.reblog(status, reblog)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\fragments\\SearchStatusesFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Status.Mention\nimport com.keylesspalace.tusky.db.AccountEntity\nprivate fun accountIsInMentions(account: AccountEntity?, mentions: List<Mention>): Boolean {\n        return mentions.firstOrNull {", "choices": [{"text": "it.account == account }!= null\n}\n\nprivate fun accountIsInMentions(account: AccountEntity?, mentions: List<Mention>): Boolean {\n        return mentions.firstOrNull { it.account == account }!= null\n}\n\nprivate fun accountIsInMentions(account: AccountEntity?, mentions: List<Mention>): Boolean {\n        return mentions.firstOrNull { it.account == account }!= null\n}\n\nprivate fun accountIsInMentions(account: AccountEntity?, mentions: List<Mention>): Boolean {\n        return mentions.firstOrNull { it.account == account }!= null\n}\n"}], "metadata": {"task_id": "Tusky/407", "ground_truth": "            account?.username == it.username && account.domain == Uri.parse(it.url)?.host\n        } != null\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\fragments\\SearchStatusesFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.interfaces.AccountSelectionListener\nimport com.keylesspalace.tusky.db.AccountEntity\nprivate fun showOpenAsDialog(statusUrl: String, dialogTitle: CharSequence?) {\n        bottomSheetActivity?.showAccountChooserDialog(\n            dialogTitle,\n            false,\n            object : AccountSelectionListener {\n                override fun onAccountSelected(account: AccountEntity) {", "choices": [{"text": "                    val intent = Intent(Intent.ACTION_VIEW)\n                    intent.data = Uri.parse(statusUrl)\n                    intent.putExtra(Browser.EXTRA_APPLICATION_ID, account.id)\n                    intent.putExtra(Browser.EXTRA_USE_EXISTING_BROWSER, true)\n                    intent.putExtra(Browser.EXTRA_USE_BROWSER, true)\n                    intent.putExtra(Browser.EXTRA_TITLE, account.name)\n                    intent.putExtra(Browser.EXTRA_SHOW_HISTORY, true)\n                    intent.putExtra(Browser.EXTRA_SHOW_HISTORY_MENU_ITEM, true)\n                    intent.putExtra("}], "metadata": {"task_id": "Tusky/408", "ground_truth": "                    bottomSheetActivity?.openAsAccount(statusUrl, account)\n                }\n            }\n        )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\fragments\\SearchStatusesFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nprivate fun openReportPage(accountId: String, accountUsername: String, statusId: String) {\n        startActivity(", "choices": [{"text": "ntent(this, ReportActivity::class.java).apply {\n            putExtra(EXTRA_ACCOUNT_ID, accountId)\n            putExtra(EXTRA_ACCOUNT_USERNAME, accountUsername)\n            putExtra(EXTRA_STATUS_ID, statusId)\n        })\n    }\n\n"}], "metadata": {"task_id": "Tusky/409", "ground_truth": "            ReportActivity.getIntent(requireContext(), accountId, accountUsername, statusId)\n        )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\fragments\\SearchStatusesFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Status\nimport com.keylesspalace.tusky.R\nimport androidx.appcompat.app.AlertDialog\nimport android.os.Build\nprivate fun showConfirmDeleteDialog(id: String, position: Int) {\n        context?.let {\n            AlertDialog.Builder(it)\n                .setMessage(R.string.dialog_delete_post_warning)\n                .setPositiveButton(android.R.string.ok) { _, _ ->\n                    viewModel.deleteStatusAsync(id)\n                    removeItem(position)", "choices": [{"text": "\n import com.keylesspalace.tusky.entity.Status\nimport com.keylesspalace.tusky.R\nimport androidx.appcompat.app.AlertDialog\nimport android.os.Build\nprivate fun showConfirmDeleteDialog(id: String, position: Int) {\n        context?.let {\n            AlertDialog.Builder(it)\n               .setMessage(R.string.dialog_delete_post_warning)\n               .setPositiveButton(android.R.string.ok) { _, _ ->\n                    viewModel.deleteStatusAsync(id)\n                    removeItem(position)\n                }\n               .setNegativeButton(android.R.string.cancel, null)\n               .show()\n        }\n    }\n\nprivate fun removeItem(position: Int) {\n        adapter.remove(position)\n    }\n\nprivate fun showConfirmDeleteDialog(id: String, position: Int) {\n        context?.let {\n            AlertDialog.Builder(it)\n               .setMessage(R.string.dialog_delete_post_warning)\n               .setPositiveButton(android.R.string.ok) { _, _ ->\n                    viewModel.deleteStatusAsync(id)\n                    removeItem(position)\n                }"}], "metadata": {"task_id": "Tusky/410", "ground_truth": "                }\n                .setNegativeButton(android.R.string.cancel, null)\n                .show()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\fragments\\SearchStatusesFragment.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(binding.root)\n        setSupportActionBar(binding.toolbar)\n        supportActionBar?.apply {\n            setDisplayHomeAsUpEnabled(true)\n            setDisplayShowHomeEnabled(true)\n            setDisplayShowTitleEnabled(false)", "choices": [{"text": "        }\n        binding.toolbar.setNavigationOnClickListener {\n            onBackPressed()\n        }\n        binding.toolbar.title = \"About\"\n        binding.toolbar.subtitle = \"Version ${BuildConfig.VERSION_NAME}\"\n        binding.toolbar.setSubtitleTextColor(ContextCompat.getColor(this, R.color.colorPrimary))\n        binding.toolbar.setNavigationIcon(R.drawable.ic_arrow_back_white_24dp)\n        binding.toolbar.setNavigationContentDescription(R.string.back)\n        binding.toolbar.setNavigationOnClickListener {\n            onBackPressed()\n        }\n        binding."}], "metadata": {"task_id": "Tusky/411", "ground_truth": "        }\n        addMenuProvider(this)\n        setupPages()\n        handleIntent(intent)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\SearchActivity.kt"}}
{"prompt": "\n import android.content.Intent\noverride fun onNewIntent(intent: Intent) {", "choices": [{"text": "    super.onNewIntent(intent)\n    setIntent(intent)\n    val extras = intent.extras\n    if (extras!= null) {\n        val data = extras.getString(\"data\")\n        if (data!= null) {\n            // do something with data\n        }\n    }\n}\n\n"}], "metadata": {"task_id": "Tusky/413", "ground_truth": "        super.onNewIntent(intent)\n        handleIntent(intent)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\SearchActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.content.Intent\nimport android.app.SearchManager\nprivate fun handleIntent(intent: Intent) {\n        if (Intent.ACTION_SEARCH == intent.action) {\n            viewModel.currentQuery = intent.getStringExtra(SearchManager.QUERY).orEmpty()", "choices": [{"text": "        }\n    }\n\nclass SearchViewModel : ViewModel() {\n    var currentQuery: String = \"\"\n}\n\nclass SearchFragment : Fragment() {\n    private val viewModel: SearchViewModel by viewModels()\n\n    override fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View? {\n        return inflater.inflate(R.layout.fragment_search, container, false)\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        val searchView = view.findViewById<SearchView>("}], "metadata": {"task_id": "Tusky/416", "ground_truth": "            viewModel.search(viewModel.currentQuery)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\SearchActivity.kt"}}
{"prompt": "\n override fun onQueryTextChange(newText: String?): Boolean {\n        viewModel.currentSearchFieldContent = newText", "choices": [{"text": "        return true\n    }\n\n    override fun onQueryTextSubmit(query: String?): Boolean {\n        viewModel.currentSearchFieldContent = query\n        return true\n    }\n}<file_sep>/app/src/main/java/com/example/myapplication/ui/main/MainViewModel.kt\npackage com.example.myapplication.ui.main\n\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport com.example.myapplication.data.model.Movie\nimport com.example.myapplication.data.repository.MovieRepository\nimport com."}], "metadata": {"task_id": "Tusky/417", "ground_truth": "\n        return false\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\SearchActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Status\nfun search(query: String) {\n        loadedStatuses.clear()\n        statusesPagingSourceFactory.newSearch(query)", "choices": [{"text": "        val pagingData = statusesPagingSourceFactory.create().flow.cachedIn(viewModelScope)\n        pagingData.collectLatest { pagingData ->\n            loadedStatuses.addAll(pagingData.data)\n            adapter.submitData(pagingData)\n        }\n    }\n"}], "metadata": {"task_id": "Tusky/418", "ground_truth": "        accountsPagingSourceFactory.newSearch(query)\n        hashtagsPagingSourceFactory.newSearch(query)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\SearchViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\nimport androidx.lifecycle.viewModelScope\nfun removeItem(statusViewData: StatusViewData.Concrete) {\n        viewModelScope.launch {\n            if (timelineCases.delete(statusViewData.id).isSuccess) {\n                if (loadedStatuses.remove(statusViewData)) {", "choices": [{"text": "                    statusViewData.status.delete()\n                }\n            }\n        }\n    }\n\nfun removeItem(status: Status) {\n        viewModelScope.launch {\n            if (timelineCases.delete(status.id).isSuccess) {\n                if (loadedStatuses.remove(status)) {\n                    status.delete()\n                }\n            }\n        }\n    }\n\nfun removeItem(status: StatusViewData.Concrete) {\n        viewModelScope.launch {\n            if (timelineCases.delete(status.id).isSuccess) {\n                if (loadedStatuses.remove(status)) {\n                    status.status.delete()\n               "}], "metadata": {"task_id": "Tusky/419", "ground_truth": "                    statusesPagingSourceFactory.invalidate()\n                }\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\SearchViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\nimport androidx.lifecycle.viewModelScope\nfun favorite(statusViewData: StatusViewData.Concrete, isFavorited: Boolean) {\n        updateStatus(statusViewData.status.copy(favourited = isFavorited))\n        viewModelScope.launch {", "choices": [{"text": "            if (isFavorited) {\n                statusViewData.status.favourite()\n            } else {\n                statusViewData.status.unfavourite()\n            }\n        }\n    }\n\nfun updateStatus(status: Status) {\n        viewModelScope.launch {\n            status.update()\n        }\n    }\n\nfun deleteStatus(status: Status) {\n        viewModelScope.launch {\n            status.delete()\n        }\n    }\n\nfun deleteStatus(statusViewData: StatusViewData.Concrete) {\n        viewModelScope.launch {\n            statusViewData.status.delete()\n        }\n    }\n\nfun"}], "metadata": {"task_id": "Tusky/422", "ground_truth": "            timelineCases.favourite(statusViewData.id, isFavorited)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\SearchViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\nimport androidx.lifecycle.viewModelScope\nfun bookmark(statusViewData: StatusViewData.Concrete, isBookmarked: Boolean) {\n        updateStatus(statusViewData.status.copy(bookmarked = isBookmarked))\n        viewModelScope.launch {", "choices": [{"text": "            if (isBookmarked) {\n                statusViewData.status.bookmark()\n            } else {\n                statusViewData.status.unbookmark()\n            }\n        }\n    }\n\nfun updateStatus(status: Status) {\n        viewModelScope.launch {\n            status.update()\n        }\n    }\n\nfun deleteStatus(status: Status) {\n        viewModelScope.launch {\n            status.delete()\n        }\n    }\n\nfun deleteStatus(statusViewData: StatusViewData.Concrete) {\n        viewModelScope.launch {\n            statusViewData.status.delete()\n        }\n    }\n\nfun deleteStatus(statusViewData"}], "metadata": {"task_id": "Tusky/423", "ground_truth": "            timelineCases.bookmark(statusViewData.id, isBookmarked)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\SearchViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun muteAccount(accountId: String, notifications: Boolean, duration: Int?) {\n        viewModelScope.launch {", "choices": [{"text": "            val result = accountRepository.muteAccount(accountId, notifications, duration)\n            if (result.isSuccess) {\n                val account = result.getOrNull()\n                if (account!= null) {\n                    account.notifications = notifications\n                    account.muteDuration = duration\n                    account.muteUntil = if (duration == null) null else System.currentTimeMillis() + duration * 1000\n                    accountRepository.updateAccount(account)\n                }\n            }\n        }\n    }\n\nfun unmuteAccount(accountId: String) {\n        viewModelScope.launch {\n            val result = accountRepository.unmuteAccount(accountId"}], "metadata": {"task_id": "Tusky/424", "ground_truth": "            timelineCases.mute(accountId, notifications, duration)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\SearchViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.keylesspalace.tusky.entity.Status\nimport androidx.lifecycle.viewModelScope\nfun pinAccount(status: Status, isPin: Boolean) {\n        viewModelScope.launch {", "choices": [{"text": "            if (isPin) {\n                status.pin()\n            } else {\n                status.unpin()\n            }\n        }\n    }<file_sep>/app/src/main/java/com/keylesspalace/tusky/ui/account/AccountViewModel.kt\npackage com.keylesspalace.tusky.ui.account\n\nimport android.app.Application\nimport androidx.lifecycle.AndroidViewModel\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.viewModelScope\nimport com.keylesspalace.tusky."}], "metadata": {"task_id": "Tusky/425", "ground_truth": "            timelineCases.pin(status.id, isPin)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\SearchViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun blockAccount(accountId: String) {\n        viewModelScope.launch {", "choices": [{"text": "            try {\n                val response = AccountRepository.blockAccount(accountId)\n                if (response.isSuccessful) {\n                    response.body()?.let {\n                        if (it.status == 200) {\n                            Toast.makeText(\n                                context,\n                                \"Account Blocked Successfully\",\n                                Toast.LENGTH_SHORT\n                            ).show()\n                        } else {\n                            Toast.makeText(\n                                context,\n                                \"Account Blocking Failed\",\n                                Toast.LENGTH_SHORT\n                            ).show()\n                        }\n                    }\n                } else {\n                    Toast.makeText(\n                        context,\n                        \"Account Blocking Failed\",\n                        Toast.LENGTH_SHORT\n                   "}], "metadata": {"task_id": "Tusky/426", "ground_truth": "            timelineCases.block(accountId)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\SearchViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.async\nimport kotlinx.coroutines.Deferred\nimport com.keylesspalace.tusky.entity.Status\nimport com.keylesspalace.tusky.entity.DeletedStatus\nimport at.connyduck.calladapter.networkresult.NetworkResult\nimport androidx.lifecycle.viewModelScope\nfun deleteStatusAsync(id: String): Deferred<NetworkResult<DeletedStatus>> {\n        return viewModelScope.async {", "choices": [{"text": "            val result = TuskyApi.service.deleteStatus(id)\n            return@async result\n        }\n}\n\nfun deleteStatus(id: String): NetworkResult<DeletedStatus> {\n        return TuskyApi.service.deleteStatus(id)\n}\n\nfun deleteStatus(id: String, callback: (NetworkResult<DeletedStatus>) -> Unit) {\n        TuskyApi.service.deleteStatus(id).enqueue(callback)\n}\n\nfun deleteStatus(id: String, callback: (NetworkResult<DeletedStatus>) -> Unit, errorCallback: (Throwable)"}], "metadata": {"task_id": "Tusky/427", "ground_truth": "            timelineCases.delete(id)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\SearchViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\nimport androidx.lifecycle.viewModelScope\nfun muteConversation(statusViewData: StatusViewData.Concrete, mute: Boolean) {\n        updateStatus(statusViewData.status.copy(muted = mute))\n        viewModelScope.launch {", "choices": [{"text": "            statusViewData.status.let {\n                if (mute) {\n                    statusViewData.mute()\n                } else {\n                    statusViewData.unmute()\n                }\n            }\n        }\n    }\n\nfun updateStatus(status: Status) {\n    val statusRepository = StatusRepository()\n    statusRepository.updateStatus(status)\n}\n\nfun deleteStatus(status: Status) {\n    val statusRepository = StatusRepository()\n    statusRepository.deleteStatus(status)\n}\n\nfun deleteConversation(conversation: Conversation) {\n    val conversationRepository = ConversationRepository()\n    conversationRepository.deleteConversation(conversation"}], "metadata": {"task_id": "Tusky/428", "ground_truth": "            timelineCases.muteConversation(statusViewData.id, mute)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\SearchViewModel.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Status\nprivate fun updateStatus(newStatus: Status) {\n        val statusViewData = loadedStatuses.find { it.id == newStatus.id }\n        if (statusViewData != null) {", "choices": [{"text": "\n import com.keylesspalace.tusky.entity.Status\nprivate fun updateStatus(newStatus: Status) {\n        val statusViewData = loadedStatuses.find { it.id == newStatus.id }\n        if (statusViewData!= null) {\n            statusViewData.status = newStatus\n            statusViewData.isUpdated = true\n        } else {\n            loadedStatuses.add(StatusViewData(newStatus))\n        }\n    }\n"}], "metadata": {"task_id": "Tusky/430", "ground_truth": "            updateStatusViewData(statusViewData.copy(status = newStatus))\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\search\\SearchViewModel.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onMenuItemSelected(menuItem: MenuItem): Boolean {\n        return when (menuItem.itemId) {\n            R.id.action_refresh -> {\n                if (isSwipeToRefreshEnabled) {\n                    binding.swipeRefreshLayout.isRefreshing = true\n\n                    refreshContent()\n                    true\n                } else {\n                    false", "choices": [{"text": "                }\n            }\n            else -> super.onMenuItemSelected(menuItem)\n        }\n    }\n\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\n        menuInflater.inflate(R.menu.menu_main, menu)\n        return true\n    }\n\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\n        return when (item.itemId) {\n            R.id.action_settings -> {\n                startActivity(Intent(this, SettingsActivity::class.java))\n                true\n            }\n            else -> super.onOptionsItemSelected(item)\n        }\n    }\n\noverride fun onBackPressed()"}], "metadata": {"task_id": "Tusky/432", "ground_truth": "                }\n            }\n            else -> false\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\TimelineFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.hide\nimport com.keylesspalace.tusky.R\nimport android.view.View\noverride fun onRefresh() {\n        binding.statusView.hide()", "choices": [{"text": "        binding.swipeRefresh.isRefreshing = false\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        binding.swipeRefresh.isRefreshing = false\n    }\n\n    override fun onItemClick(view: View, item: Any) {\n        val intent = Intent(this, PostActivity::class.java)\n        intent.putExtra(PostActivity.EXTRA_POST_ID, item.id)\n        startActivity(intent)\n    }\n\n    override fun onItemLongClick(view: View, item: Any) {\n        val dialog = AlertDialog.Builder(this)\n        dialog.setTitle(R"}], "metadata": {"task_id": "Tusky/434", "ground_truth": "\n        adapter.refresh()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\TimelineFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\noverride fun onReply(position: Int) {", "choices": [{"text": " val intent = Intent(this, ReplyActivity::class.java)\n intent.putExtra(\"position\", position)\n startActivity(intent)\n }\n\n"}], "metadata": {"task_id": "Tusky/435", "ground_truth": "        val status = adapter.peek(position)?.asStatusOrNull() ?: return\n        super.reply(status.status)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\TimelineFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\noverride fun onReblog(reblog: Boolean, position: Int) {", "choices": [{"text": " if (reblog) {\n holder.reblog.setImageResource(R.drawable.ic_reblog_on)\n } else {\n holder.reblog.setImageResource(R.drawable.ic_reblog_off)\n }\n }\n\n"}], "metadata": {"task_id": "Tusky/436", "ground_truth": "        val status = adapter.peek(position)?.asStatusOrNull() ?: return\n        viewModel.reblog(reblog, status)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\TimelineFragment.kt"}}
{"prompt": "\n override fun onFavourite(favourite: Boolean, position: Int) {", "choices": [{"text": " if (favourite) {\n viewModel.addFavourite(position)\n } else {\n viewModel.removeFavourite(position)\n }\n }\n}\n\n"}], "metadata": {"task_id": "Tusky/437", "ground_truth": "        val status = adapter.peek(position)?.asStatusOrNull() ?: return\n        viewModel.favorite(favourite, status)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\TimelineFragment.kt"}}
{"prompt": "\n override fun onBookmark(bookmark: Boolean, position: Int) {", "choices": [{"text": " if (bookmark) {\n // add to bookmarks\n } else {\n // remove from bookmarks\n }\n }\n })\n\n"}], "metadata": {"task_id": "Tusky/438", "ground_truth": "        val status = adapter.peek(position)?.asStatusOrNull() ?: return\n        viewModel.bookmark(bookmark, status)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\TimelineFragment.kt"}}
{"prompt": "\n override fun onVoteInPoll(position: Int, choices: List<Int>) {", "choices": [{"text": " // TODO: handle vote\n }\n })\n\n"}], "metadata": {"task_id": "Tusky/439", "ground_truth": "        val status = adapter.peek(position)?.asStatusOrNull() ?: return\n        viewModel.voteInPoll(choices, status)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\TimelineFragment.kt"}}
{"prompt": "\nval binding\nvar hideFab\nvar kind TimelineViewModel.Kind\n override fun clearWarningAction(position: Int) {", "choices": [{"text": " viewModel.clearWarningAction(position)\n }\n override fun onItemClick(position: Int) {\n viewModel.onItemClick(position)\n }\n override fun onItemLongClick(position: Int) {\n viewModel.onItemLongClick(position)\n }\n override fun onItemSwipe(position: Int) {\n viewModel.onItemSwipe(position)\n }\n override fun onItemSwipeLeft(position: Int) {\n viewModel.onItemSwipeLeft(position)\n }\n override fun onItemSwipeRight(position: Int) {\n viewModel.onItemSwipeRight("}], "metadata": {"task_id": "Tusky/440", "ground_truth": "        val status = adapter.peek(position)?.asStatusOrNull() ?: return\n        viewModel.clearWarning(status)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\TimelineFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onMore(view: View, position: Int) {", "choices": [{"text": "// do something\n}\n"}], "metadata": {"task_id": "Tusky/441", "ground_truth": "        val status = adapter.peek(position)?.asStatusOrNull() ?: return\n        super.more(status.status, view, position)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\TimelineFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\noverride fun onOpenReblog(position: Int) {", "choices": [{"text": " val reblog = reblogList[position]\n val intent = Intent(this, ReblogActivity::class.java)\n intent.putExtra(ReblogActivity.EXTRA_REBLOG, reblog)\n startActivity(intent)\n }\n\n"}], "metadata": {"task_id": "Tusky/442", "ground_truth": "        val status = adapter.peek(position)?.asStatusOrNull() ?: return\n        super.openReblog(status.status)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\TimelineFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Status\nimport android.view.View\noverride fun onViewMedia(position: Int, attachmentIndex: Int, view: View?) {\n        val status = adapter.peek(position)?.asStatusOrNull() ?: return\n        super.viewMedia(", "choices": [{"text": "\n import com.keylesspalace.tusky.entity.Status\nimport android.view.View\noverride fun onViewMedia(position: Int, attachmentIndex: Int, view: View?) {\n        val status = adapter.peek(position)?.asStatusOrNull()?: return\n        super.viewMedia(position, attachmentIndex, view)\n        if (status.isMedia) {\n            val media = status.media\n            if (media.isVideo) {\n                val video = media.video\n                if (video.isLocal) {\n                    val videoView = view as? VideoView\n                    if (videoView!= null) {\n                        videoView.setVideoPath(video.localPath)\n                        videoView.start()\n                    }\n                }\n            }\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/449", "ground_truth": "            attachmentIndex,\n            AttachmentViewData.list(status.actionable),\n            view\n        )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\TimelineFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.components.timeline.viewmodel.TimelineViewModel\nimport com.keylesspalace.tusky.R\nimport android.view.View\noverride fun onViewAccount(id: String) {\n        if ((\n                viewModel.kind == TimelineViewModel.Kind.USER ||\n                    viewModel.kind == TimelineViewModel.Kind.USER_WITH_REPLIES\n                ) &&\n            viewModel.id == id\n        ) {\n            /* If already viewing an account page, then any requests to view that account page", "choices": [{"text": "will be ignored. */\n            return\n        }\n        viewModel.kind = TimelineViewModel.Kind.USER\n        viewModel.id = id\n        viewModel.load()\n    }\n\noverride fun onViewAccount(id: String, kind: TimelineViewModel.Kind) {\n        if (kind == TimelineViewModel.Kind.USER && viewModel.id == id) {\n            /* If already viewing an account page, then any requests to view that account page will be ignored. */\n            return\n        }\n        viewModel.kind = kind\n        viewModel.id = id\n        viewModel.load()\n    }\n\noverride fun onViewAccount(id: String"}], "metadata": {"task_id": "Tusky/452", "ground_truth": "             * should be ignored. */\n            return\n        }\n        super.viewAccount(id)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\TimelineFragment.kt"}}
{"prompt": "\nvar eventHub EventHub\nvar hideFab\nval binding\n public override fun removeItem(position: Int) {", "choices": [{"text": "        super.removeItem(position)\n        val item = items[position]\n        val index = items.indexOf(item)\n        items.removeAt(index)\n        notifyItemRemoved(index)\n    }\n\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_event, parent, false)\n        return ViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n        val item = items[position]\n        holder.bind(item)\n    }\n\n   "}], "metadata": {"task_id": "Tusky/453", "ground_truth": "        val status = adapter.peek(position)?.asStatusOrNull() ?: return\n        viewModel.removeStatusWithId(status.id)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\TimelineFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.components.timeline.viewmodel.TimelineViewModel\nimport com.keylesspalace.tusky.R\nimport android.view.View\nprivate fun actionButtonPresent(): Boolean {\n        return viewModel.kind != TimelineViewModel.Kind.TAG &&\n            viewModel.kind != TimelineViewModel.Kind.FAVOURITES &&", "choices": [{"text": "\n import com.keylesspalace.tusky.components.timeline.viewmodel.TimelineViewModel\nimport com.keylesspalace.tusky.R\nimport android.view.View\nprivate fun actionButtonPresent(): Boolean {\n        return viewModel.kind!= TimelineViewModel.Kind.TAG &&\n            viewModel.kind!= TimelineViewModel.Kind.FAVOURITES &&\n            viewModel.kind!= TimelineViewModel.Kind.SEARCH\n    }\n\nprivate fun actionButtonVisible(): Boolean {\n        return actionButtonPresent() &&\n            viewModel.kind!= TimelineViewModel.Kind.NOTIFICATIONS\n    }\n\nprivate fun actionButtonGone(): Boolean {\n        return!actionButtonVisible()\n    }\n\nprivate fun actionButtonEnabled(): Boolean {\n        return actionButtonPresent() &&\n            viewModel.kind!= TimelineViewModel.Kind.NOTIFICATIONS &&\n            viewModel.kind!= TimelineViewModel.Kind.SEARCH\n    }\n\nprivate fun actionButtonDisabled(): Boolean {\n        return!actionButtonEnabled()\n    }\n\n"}], "metadata": {"task_id": "Tusky/454", "ground_truth": "            viewModel.kind != TimelineViewModel.Kind.BOOKMARKS &&\n            activity is ActionButtonActivity\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\TimelineFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport android.view.View\noverride fun onPause() {\n        super.onPause()\n        (binding.recyclerView.layoutManager as? LinearLayoutManager)?.findFirstVisibleItemPosition()?.let { position ->\n            if (position != RecyclerView.NO_POSITION) {\n                adapter.snapshot().getOrNull(position)?.id?.let { statusId ->", "choices": [{"text": "\n import com.keylesspalace.tusky.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport android.view.View\noverride fun onPause() {\n        super.onPause()\n        (binding.recyclerView.layoutManager as? LinearLayoutManager)?.findFirstVisibleItemPosition()?.let { position ->\n            if (position!= RecyclerView.NO_POSITION) {\n                adapter.snapshot().getOrNull(position)?.id?.let { statusId ->\n                    viewModel.saveScrollPosition(statusId, position)\n                }\n            }\n        }\n    }\n\noverride fun onResume() {\n        super.onResume()\n        viewModel.scrollPosition.observe(this) {\n            binding.recyclerView.scrollToPosition(it)\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/455", "ground_truth": "                    viewModel.saveReadingPosition(statusId)\n                }\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\TimelineFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.view.View\noverride fun onReselect() {\n        if (isAdded) {\n            binding.recyclerView.layoutManager?.scrollToPosition(0)", "choices": [{"text": "        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/457", "ground_truth": "            binding.recyclerView.stopScroll()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\TimelineFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Filter\nimport com.keylesspalace.tusky.R\noverride fun getItemViewType(position: Int): Int {\n        val viewData = getItem(position)\n        return if (viewData is StatusViewData.Placeholder) {\n            VIEW_TYPE_PLACEHOLDER\n        } else if (viewData?.filterAction == Filter.Action.WARN) {", "choices": [{"text": "            VIEW_TYPE_WARN\n        } else {\n            VIEW_TYPE_STATUS\n        }\n    }\n\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\n        return when (viewType) {\n            VIEW_TYPE_PLACEHOLDER -> {\n                val view = LayoutInflater.from(parent.context).inflate(R.layout.item_placeholder, parent, false)\n                PlaceholderViewHolder(view)\n            }\n            VIEW_TYPE_WARN -> {\n                val view = LayoutInflater.from(parent.context).inflate(R.layout.item_warn, parent, false)\n                W"}], "metadata": {"task_id": "Tusky/460", "ground_truth": "            VIEW_TYPE_STATUS_FILTERED\n        } else {\n            VIEW_TYPE_STATUS\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\TimelinePagingAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.TimelineAccount\nimport com.keylesspalace.tusky.db.TimelineAccountEntity\nimport com.google.gson.Gson\nfun TimelineAccount.toEntity(accountId: Long, gson: Gson): TimelineAccountEntity {\n    return TimelineAccountEntity(\n        serverId = id,\n        timelineUserId = accountId,\n        localUsername = localUsername,\n        username = username,\n        displayName = name,\n        url = url,", "choices": [{"text": "        avatarUrl = avatarUrl,\n        isFollowing = isFollowing,\n        isBlocked = isBlocked,\n        isMuted = isMuted,\n        isOnline = isOnline,\n        isVerified = isVerified,\n        isAdmin = isAdmin,\n        isModerator = isModerator,\n        isBanned = isBanned,\n        isMutedBy = isMutedBy,\n        isMutedBy = isMutedBy,\n        isFollowingBy = isFollowingBy,\n        isFollowedBy = isFollowedBy,\n        isBlockedBy = isBlockedBy,\n        isBlockedFrom = isBlockedFrom,\n        isMut"}], "metadata": {"task_id": "Tusky/461", "ground_truth": "        avatar = avatar,\n        emojis = gson.toJson(emojis),\n        bot = bot\n    )\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\TimelineTypeMappers.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.TimelineAccount\nimport com.keylesspalace.tusky.db.TimelineAccountEntity\nimport com.google.gson.Gson\nfun TimelineAccountEntity.toAccount(gson: Gson): TimelineAccount {\n    return TimelineAccount(\n        id = serverId,\n        localUsername = localUsername,\n        username = username,\n        displayName = displayName,\n        note = \"\",\n        url = url,", "choices": [{"text": "        avatarUrl = avatarUrl,\n        isFavorite = isFavorite,\n        isMuted = isMuted,\n        isBlocked = isBlocked,\n        isOnline = isOnline,\n        isTyping = isTyping,\n        isUnread = isUnread,\n        isUnreadMention = isUnreadMention,\n        isUnreadDirect = isUnreadDirect,\n        isUnreadDirectMention = isUnreadDirectMention,\n        isUnreadDirectDirect = isUnreadDirectDirect,\n        isUnreadDirectDirectMention = isUnreadDirectDirectMention,\n        isUnreadDirectDirectDirect = isUnreadDirect"}], "metadata": {"task_id": "Tusky/462", "ground_truth": "        avatar = avatar,\n        bot = bot,\n        emojis = gson.fromJson(emojis, emojisListType)\n    )\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\TimelineTypeMappers.kt"}}
{"prompt": "\n inline fun <T> ifExpected(t: Throwable, cb: () -> T): T {\n    if (t.isExpected()) {", "choices": [{"text": "        return cb()\n    }\n    throw t\n}\n\ninline fun <T> ifExpected(t: Throwable, cb: () -> T, cb2: (Throwable) -> T): T {\n    if (t.isExpected()) {\n        return cb()\n    }\n    return cb2(t)\n}\n\ninline fun <T> ifExpected(t: Throwable, cb: () -> T, cb2: (Throwable) -> T, cb3: (Throwable) -> T): T {\n    if (t.isExpected()) {\n        return cb()\n    }\n    return cb2(t)"}], "metadata": {"task_id": "Tusky/463", "ground_truth": "        return cb()\n    } else {\n        throw t\n    }\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\util\\TimelineUtils.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\nimport androidx.lifecycle.viewModelScope\noverride fun changeExpanded(expanded: Boolean, status: StatusViewData.Concrete) {\n        viewModelScope.launch {", "choices": [{"text": "            val status = status.toStatus()\n            status.expanded = expanded\n            statusRepository.updateStatus(status)\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/464", "ground_truth": "            db.timelineDao().setExpanded(accountManager.activeAccount!!.id, status.id, expanded)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\viewmodel\\CachedTimelineViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\nimport androidx.lifecycle.viewModelScope\noverride fun changeContentShowing(isShowing: Boolean, status: StatusViewData.Concrete) {\n        viewModelScope.launch {\n            db.timelineDao()", "choices": [{"text": "               .updateStatus(status.id, isShowing)\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/465", "ground_truth": "                .setContentShowing(accountManager.activeAccount!!.id, status.id, isShowing)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\viewmodel\\CachedTimelineViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\nimport androidx.lifecycle.viewModelScope\noverride fun changeContentCollapsed(isCollapsed: Boolean, status: StatusViewData.Concrete) {\n        viewModelScope.launch {\n            db.timelineDao()", "choices": [{"text": "               .updateStatus(status.id, isCollapsed)\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/466", "ground_truth": "                .setContentCollapsed(accountManager.activeAccount!!.id, status.id, isCollapsed)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\viewmodel\\CachedTimelineViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\noverride fun removeAllByAccountId(accountId: String) {\n        viewModelScope.launch {", "choices": [{"text": "            repository.removeAllByAccountId(accountId)\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/467", "ground_truth": "            db.timelineDao().removeAllByUser(accountManager.activeAccount!!.id, accountId)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\viewmodel\\CachedTimelineViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\noverride fun removeAllByInstance(instance: String) {\n        viewModelScope.launch {", "choices": [{"text": "            repository.removeAllByInstance(instance)\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/468", "ground_truth": "            db.timelineDao().deleteAllFromInstance(accountManager.activeAccount!!.id, instance)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\viewmodel\\CachedTimelineViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\nimport androidx.lifecycle.viewModelScope\noverride fun clearWarning(status: StatusViewData.Concrete) {\n        viewModelScope.launch {", "choices": [{"text": "            repository.clearWarning(status.id)\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/469", "ground_truth": "            db.timelineDao().clearWarning(accountManager.activeAccount!!.id, status.actionableId)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\viewmodel\\CachedTimelineViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\noverride fun fullReload() {\n        viewModelScope.launch {\n            val activeAccount = accountManager.activeAccount!!", "choices": [{"text": "            val account = accountManager.getAccount(activeAccount.id)\n            val accountData = accountManager.getAccountData(account)\n            val accountData2 = accountManager.getAccountData(account)\n            val accountData3 = accountManager.getAccountData(account)\n            val accountData4 = accountManager.getAccountData(account)\n            val accountData5 = accountManager.getAccountData(account)\n            val accountData6 = accountManager.getAccountData(account)\n            val accountData7 = accountManager.getAccountData(account)\n            val accountData8 = accountManager."}], "metadata": {"task_id": "Tusky/471", "ground_truth": "            db.timelineDao().removeAll(activeAccount.id)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\viewmodel\\CachedTimelineViewModel.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Status\noverride suspend fun invalidate() {\n        // invalidating when we don't have statuses yet can cause empty timelines because it cancels the network load\n        if (db.timelineDao().getStatusCount(accountManager.activeAccount!!.id) > 0) {", "choices": [{"text": "            db.timelineDao().deleteAll(accountManager.activeAccount!!.id)\n        }\n        db.timelineDao().deleteAll(accountManager.activeAccount!!.id)\n        db.timelineDao().deleteAll(accountManager.activeAccount!!.id)\n        db.timelineDao().deleteAll(accountManager.activeAccount!!.id)\n        db.timelineDao().deleteAll(accountManager.activeAccount!!.id)\n        db.timelineDao().deleteAll(accountManager.activeAccount!!.id)\n        db.timelineDao().deleteAll(accountManager.activeAccount!!.id)\n        db.timelineDao().delete"}], "metadata": {"task_id": "Tusky/473", "ground_truth": "            currentPagingSource?.invalidate()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\viewmodel\\CachedTimelineViewModel.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\nimport com.keylesspalace.tusky.entity.Poll\noverride fun updatePoll(newPoll: Poll, status: StatusViewData.Concrete) {\n        status.copy(", "choices": [{"text": "oll = newPoll)\n    }\n\noverride fun updateStatus(newStatus: Status, status: StatusViewData.Concrete) {\n        status.copy(status = newStatus)\n    }\n\noverride fun updateStatus(newStatus: Status, status: StatusViewData.Concrete) {\n        status.copy(status = newStatus)\n    }\n\noverride fun updateStatus(newStatus: Status, status: StatusViewData.Concrete) {\n        status.copy(status = newStatus)\n    }\n\noverride fun updateStatus(newStatus: Status, status: StatusViewData.Concrete) {\n        status.copy("}], "metadata": {"task_id": "Tusky/475", "ground_truth": "            status = status.status.copy(poll = newPoll)\n        ).update()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\viewmodel\\NetworkTimelineViewModel.kt"}}
{"prompt": " import com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\nvar currentSource NetworkTimelinePagingSource?\nval statuses\nvar nextKey String?\noverride fun changeExpanded(expanded: Boolean, status: StatusViewData.Concrete) {\n        status.copy(", "choices": [{"text": "xpanded = expanded).let {\n            statuses.find { it.id == status.id }?.let {\n                statuses.remove(it)\n                statuses.add(it.copy(expanded = expanded))\n            }\n        }\n    }\n\noverride fun changeFavorite(favorite: Boolean, status: StatusViewData.Concrete) {\n        status.copy(favorite = favorite).let {\n            statuses.find { it.id == status.id }?.let {\n                statuses.remove(it)\n                statuses.add(it.copy(favorite = favorite))\n            }\n        }\n    }\n\noverride fun changeRetweet("}], "metadata": {"task_id": "Tusky/476", "ground_truth": "            isExpanded = expanded\n        ).update()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\viewmodel\\NetworkTimelineViewModel.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\noverride fun changeContentShowing(isShowing: Boolean, status: StatusViewData.Concrete) {\n        status.copy(", "choices": [{"text": "sShowing = isShowing)\n}\n\noverride fun changeContentShowing(isShowing: Boolean, status: StatusViewData.Concrete) {\n        status.copy(isShowing = isShowing)\n}\n\noverride fun changeContentShowing(isShowing: Boolean, status: StatusViewData.Concrete) {\n        status.copy(isShowing = isShowing)\n}\n\noverride fun changeContentShowing(isShowing: Boolean, status: StatusViewData.Concrete) {\n        status.copy(isShowing = isShowing)\n}\n\noverride fun changeContentShowing(isShowing: Boolean, status: StatusViewData."}], "metadata": {"task_id": "Tusky/477", "ground_truth": "            isShowingContent = isShowing\n        ).update()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\viewmodel\\NetworkTimelineViewModel.kt"}}
{"prompt": " import com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\nval statusData MutableList<StatusViewData>\nval statuses\nvar currentSource NetworkTimelinePagingSource?\noverride fun changeContentCollapsed(isCollapsed: Boolean, status: StatusViewData.Concrete) {\n        status.copy(", "choices": [{"text": "sCollapsed = isCollapsed).let {\n            statusData.find { it.id == status.id }?.let {\n                statusData.remove(it)\n                statusData.add(it.copy(isCollapsed = isCollapsed))\n            }\n        }\n    }\noverride fun changeContentExpanded(isExpanded: Boolean, status: StatusViewData.Concrete) {\n        status.copy(isExpanded = isExpanded).let {\n            statusData.find { it.id == status.id }?.let {\n                statusData.remove(it)\n                statusData.add(it.copy(isExpanded = isExpanded"}], "metadata": {"task_id": "Tusky/478", "ground_truth": "            isCollapsed = isCollapsed\n        ).update()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\viewmodel\\NetworkTimelineViewModel.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\noverride fun fullReload() {\n        nextKey = statusData.firstOrNull { it is StatusViewData.Concrete }?.asStatusOrNull()?.id", "choices": [{"text": "        statusData.clear()\n        statusData.addAll(statusRepository.getStatuses(nextKey))\n        notifyDataSetChanged()\n    }\n\noverride fun loadMore() {\n        nextKey = statusData.firstOrNull { it is StatusViewData.Concrete }?.asStatusOrNull()?.id\n        statusData.addAll(statusRepository.getStatuses(nextKey))\n        notifyDataSetChanged()\n    }\n\noverride fun loadMore(key: Long) {\n        nextKey = key\n        statusData.addAll(statusRepository.getStatuses(nextKey))\n        notifyDataSetChanged()\n    }\n\noverride fun loadMore(key"}], "metadata": {"task_id": "Tusky/484", "ground_truth": "        statusData.clear()\n        currentSource?.invalidate()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\viewmodel\\NetworkTimelineViewModel.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\noverride fun clearWarning(status: StatusViewData.Concrete) {\n        updateActionableStatusById(status.id) {", "choices": [{"text": "            status.warning = false\n            status.warningMessage = null\n            status.warningTime = null\n            status.warningType = null\n            status.warningUser = null\n            status.warningUserAvatar = null\n            status.warningUserDisplayName = null\n            status.warningUserUsername = null\n            status.warningUserUrl = null\n            status.warningUserUrl = null\n            status.warningUserUrl = null\n            status.warningUserUrl = null\n            status.warningUserUrl = null\n            status.warningUserUrl = null\n            status.warningUserUrl = null\n            status.warningUserUrl = null\n            status.warningUserUrl"}], "metadata": {"task_id": "Tusky/485", "ground_truth": "            it.copy(filtered = null)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\viewmodel\\NetworkTimelineViewModel.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\nprivate fun StatusViewData.Concrete.update() {\n        val position = statusData.indexOfFirst { viewData -> viewData.asStatusOrNull()?.id == this.id }", "choices": [{"text": "        if (position!= -1) {\n            statusData[position] = this\n        }\n    }\n\nprivate fun StatusViewData.Concrete.delete() {\n        val position = statusData.indexOfFirst { viewData -> viewData.asStatusOrNull()?.id == this.id }\n        if (position!= -1) {\n            statusData.removeAt(position)\n        }\n    }\n\nprivate fun StatusViewData.Concrete.insert(status: Status) {\n        val position = statusData.indexOfFirst { viewData -> viewData.asStatusOrNull()?.id == status.id }\n        if (position!="}], "metadata": {"task_id": "Tusky/486", "ground_truth": "        statusData[position] = this\n        currentSource?.invalidate()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\viewmodel\\NetworkTimelineViewModel.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\nprivate inline fun updateStatusById(\n        id: String,\n        updater: (StatusViewData.Concrete) -> StatusViewData.Concrete\n    ) {\n        val pos = statusData.indexOfFirst { it.asStatusOrNull()?.id == id }", "choices": [{"text": "        if (pos!= -1) {\n            val status = statusData[pos]\n            statusData[pos] = updater(status)\n        }\n    }\n\nprivate fun updateStatus(\n        status: StatusViewData.Concrete,\n        updater: (StatusViewData.Concrete) -> StatusViewData.Concrete\n) {\n    val pos = statusData.indexOfFirst { it.asStatusOrNull()?.id == status.id }\n    if (pos!= -1) {\n        statusData[pos] = updater(status)\n    }\n}\n\nprivate fun updateStatus(\n        status: StatusViewData.Concrete,\n        updater"}], "metadata": {"task_id": "Tusky/487", "ground_truth": "        if (pos == -1) return\n        updateViewDataAt(pos, updater)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\viewmodel\\NetworkTimelineViewModel.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Status\nprivate inline fun updateActionableStatusById(id: String, updater: (Status) -> Status) {\n        val pos = statusData.indexOfFirst { it.asStatusOrNull()?.id == id }\n        if (pos == -1) return\n        updateViewDataAt(pos) { vd ->\n            if (vd.status.reblog != null) {\n                vd.copy(status = vd.status.copy(reblog = updater(vd.status.reblog)))", "choices": [{"text": "\n import com.keylesspalace.tusky.entity.Status\nprivate inline fun updateActionableStatusById(id: String, updater: (Status) -> Status) {\n        val pos = statusData.indexOfFirst { it.asStatusOrNull()?.id == id }\n        if (pos == -1) return\n        updateViewDataAt(pos) { vd ->\n            if (vd.status.reblog!= null) {\n                vd.copy(status = vd.status.copy(reblog = updater(vd.status.reblog)))\n            } else {\n                vd.copy(status = vd.status.copy(status = updater(vd.status.status)))\n            }\n        }\n    }\n\nprivate fun updateViewDataAt(pos: Int, updater: (StatusViewData) -> StatusViewData) {\n    val old = statusData[pos]\n    val new = updater(old)\n    statusData[pos] = new\n    notifyItemChanged(pos)\n}\n\nprivate fun updateViewDataAt(pos: Int, updater: (StatusViewData) -> Unit) {\n    val old = statusData[pos]\n    val new = updater(old"}], "metadata": {"task_id": "Tusky/488", "ground_truth": "            } else {\n                vd.copy(status = updater(vd.status))\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\viewmodel\\NetworkTimelineViewModel.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\nprivate inline fun updateViewDataAt(\n        position: Int,\n        updater: (StatusViewData.Concrete) -> StatusViewData.Concrete\n    ) {\n        val status = statusData.getOrNull(position)?.asStatusOrNull() ?: return", "choices": [{"text": "\n import com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\nprivate inline fun updateViewDataAt(\n        position: Int,\n        updater: (StatusViewData.Concrete) -> StatusViewData.Concrete\n    ) {\n        val status = statusData.getOrNull(position)?.asStatusOrNull()?: return\n        val newStatus = updater(status.asViewData())\n        statusData.update(position, newStatus)\n    }\n\nprivate fun Status.asViewData(): StatusViewData.Concrete {\n    return when (this) {\n        is Status.Loading -> StatusViewData.Loading\n        is Status.Error -> StatusViewData.Error(message)\n        is Status.Success -> StatusViewData.Success(data)\n    }\n}\n\nprivate fun StatusViewData.Concrete.asStatus(): Status {\n    return when (this) {\n        is StatusViewData.Loading -> Status.Loading\n        is StatusViewData.Error -> Status.Error("}], "metadata": {"task_id": "Tusky/489", "ground_truth": "        statusData[position] = updater(status)\n        currentSource?.invalidate()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\timeline\\viewmodel\\NetworkTimelineViewModel.kt"}}
{"prompt": "\n import java.util.Date\nfun setup(start: Date, end: Date) {\n        binding.dates.text = itemView.context.getString(", "choices": [{"text": ".string.dates, start.toString(), end.toString())\n    }\n\n"}], "metadata": {"task_id": "Tusky/493", "ground_truth": "            R.string.date_range,\n            dateFormat.format(start),\n            dateFormat.format(end)\n        )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\trending\\TrendingDateViewHolder.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.viewdata.TrendingViewData\noverride fun getItemViewType(position: Int): Int {\n        return if (getItem(position) is TrendingViewData.Tag) {", "choices": [{"text": "            TrendingViewData.Tag.VIEW_TYPE\n        } else {\n            TrendingViewData.Trending.VIEW_TYPE\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/496", "ground_truth": "            VIEW_TYPE_TAG\n        } else {\n            VIEW_TYPE_HEADER\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\trending\\TrendingTagsAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.BaseActivity\nimport android.view.View\nfun onViewTag(tag: String) {\n        (requireActivity() as BaseActivity).startActivityWithSlideInAnimation(", "choices": [{"text": "            Intent(requireActivity(), MainActivity::class.java).apply {\n                putExtra(MainActivity.EXTRA_TAG, tag)\n            }\n        )\n    }\n\n"}], "metadata": {"task_id": "Tusky/500", "ground_truth": "            StatusListActivity.newHashtagIntent(requireContext(), tag)\n        )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\trending\\TrendingTagsFragment.kt"}}
{"prompt": " import com.keylesspalace.tusky.util.hide\nimport android.view.View\nval viewModel TrendingTagsViewModel\nval adapter\nvar viewModelFactory ViewModelFactory\nprivate fun applyLoadingState() {\n        binding.recyclerView.hide()", "choices": [{"text": "        binding.progressBar.show()\n    }\nprivate fun applyErrorState() {\n        binding.recyclerView.hide()\n        binding.progressBar.hide()\n        binding.errorLayout.show()\n    }\nprivate fun applyDataState() {\n        binding.recyclerView.show()\n        binding.progressBar.hide()\n        binding.errorLayout.hide()\n    }\nprivate fun applyEmptyState() {\n        binding.recyclerView.hide()\n        binding.progressBar.hide()\n        binding.errorLayout.hide()\n        binding.emptyLayout.show()\n    }\nprivate fun applyNoInternetState()"}], "metadata": {"task_id": "Tusky/502", "ground_truth": "        binding.messageView.hide()\n        binding.progressBar.show()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\trending\\TrendingTagsFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nprivate fun clearLoadingState() {\n        binding.swipeRefreshLayout.isRefreshing = false", "choices": [{"text": "        binding.progressBar.visibility = View.GONE\n    }\n\nprivate fun showLoadingState() {\n        binding.swipeRefreshLayout.isRefreshing = true\n        binding.progressBar.visibility = View.VISIBLE\n    }\n\nprivate fun showErrorState() {\n        binding.swipeRefreshLayout.isRefreshing = false\n        binding.progressBar.visibility = View.GONE\n        binding.errorLayout.visibility = View.VISIBLE\n    }\n\nprivate fun showSuccessState() {\n        binding.swipeRefreshLayout.isRefreshing = false\n        binding.progressBar.visibility = View.GONE\n        binding.error"}], "metadata": {"task_id": "Tusky/503", "ground_truth": "        binding.progressBar.hide()\n        binding.messageView.hide()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\trending\\TrendingTagsFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.view.View\noverride fun onReselect() {\n        if (isAdded) {\n            binding.recyclerView.layoutManager?.scrollToPosition(0)", "choices": [{"text": "        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/506", "ground_truth": "            binding.recyclerView.stopScroll()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\trending\\TrendingTagsFragment.kt"}}
{"prompt": "\n import android.text.TextPaint\noverride fun updateDrawState(tp: TextPaint) {", "choices": [{"text": " tp.color = Color.parseColor(\"#000000\")\n tp.isFakeBoldText = true\n tp.textSize = 18f\n tp.typeface = Typeface.DEFAULT\\_BOLD\n}\n\n"}], "metadata": {"task_id": "Tusky/507", "ground_truth": "            tp.bgColor = bgColor\n            tp.isStrikeThruText = true\n        }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\edits\\ViewEditsAdapter.kt"}}
{"prompt": "\n import android.text.TextPaint\noverride fun updateDrawState(tp: TextPaint) {", "choices": [{"text": " tp.color = Color.parseColor(\"#000000\")\n tp.isFakeBoldText = true\n tp.textSize = 18f\n tp.typeface = Typeface.DEFAULT\\_BOLD\n}\n\n"}], "metadata": {"task_id": "Tusky/508", "ground_truth": "            tp.bgColor = bgColor\n            tp.typeface = DEFAULT_BOLD\n        }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\edits\\ViewEditsAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onMenuItemSelected(menuItem: MenuItem): Boolean {\n        return when (menuItem.itemId) {\n            R.id.action_refresh -> {\n                binding.swipeRefreshLayout.isRefreshing = true\n                onRefresh()", "choices": [{"text": "                true\n            }\n            else -> super.onMenuItemSelected(menuItem)\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/510", "ground_truth": "                true\n            }\n            else -> false\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\edits\\ViewEditsFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\noverride fun onResume() {", "choices": [{"text": "    super.onResume()\n    val intent = Intent(this, MainActivity::class.java)\n    startActivity(intent)\n    finish()\n}\n\n"}], "metadata": {"task_id": "Tusky/511", "ground_truth": "        super.onResume()\n        requireActivity().title = getString(R.string.title_edits)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\edits\\ViewEditsFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onViewAccount(id: String) {\n        bottomSheetActivity?.startActivityWithSlideInAnimation(", "choices": [{"text": "            AccountActivity.newInstance(id)\n        )\n    }\n\n"}], "metadata": {"task_id": "Tusky/512", "ground_truth": "            AccountActivity.getIntent(requireContext(), id)\n        )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\edits\\ViewEditsFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onViewTag(tag: String) {\n        bottomSheetActivity?.startActivityWithSlideInAnimation(", "choices": [{"text": "            Intent(this, YourActivity::class.java),\n            tag\n        )\n    }\n\n"}], "metadata": {"task_id": "Tusky/513", "ground_truth": "            StatusListActivity.newHashtagIntent(requireContext(), tag)\n        )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\edits\\ViewEditsFragment.kt"}}
{"prompt": "\n import org.pageseeder.diffx.token.XMLToken\nimport org.pageseeder.diffx.api.Operator\noverride fun handle(operator: Operator, token: XMLToken) {\n        if (operator.isEdit) {", "choices": [{"text": "            if (token.isStartTag) {\n                if (token.name == \"a\") {\n                    val attributes = token.attributes\n                    if (attributes.containsKey(\"href\")) {\n                        val href = attributes[\"href\"]\n                        if (href.startsWith(\"http://\")) {\n                            attributes[\"href\"] = \"https://$href\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n"}], "metadata": {"task_id": "Tusky/515", "ground_truth": "            handleEdit(operator, token)\n        } else {\n            token.toXML(xml)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\edits\\ViewEditsViewModel.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Filter\nimport com.keylesspalace.tusky.R\noverride fun getItemViewType(position: Int): Int {\n        val viewData = getItem(position)\n        return if (viewData.isDetailed) {\n            VIEW_TYPE_STATUS_DETAILED\n        } else if (viewData.filterAction == Filter.Action.WARN) {", "choices": [{"text": "            VIEW_TYPE_STATUS_WARN\n        } else {\n            VIEW_TYPE_STATUS_NORMAL\n        }\n    }\n\noverride fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\n        val viewData = getItem(position)\n        if (holder is StatusViewHolder) {\n            holder.bind(viewData)\n        }\n    }\n\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\n        return when (viewType) {\n            VIEW_TYPE_STATUS_NORMAL -> {\n                val view = LayoutInflater.from(parent.context).inflate(R.layout"}], "metadata": {"task_id": "Tusky/517", "ground_truth": "            VIEW_TYPE_STATUS_FILTERED\n        } else {\n            VIEW_TYPE_STATUS\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\ThreadAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.content.Intent\nimport android.content.Context\nfun startIntent(context: Context, id: String, url: String): Intent {\n            val intent = Intent(context, ViewThreadActivity::class.java)\n            intent.putExtra(ID_EXTRA, id)", "choices": [{"text": "            intent.putExtra(URL_EXTRA, url)\n            return intent\n        }\n<file_sep>/app/src/main/java/com/keylesspalace/tusky/ui/view/ViewThreadActivity.kt\npackage com.keylesspalace.tusky.ui.view\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.Menu\nimport android.view.MenuItem\nimport android.view.View\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.appcompat.widget.Toolbar\nimport"}], "metadata": {"task_id": "Tusky/518", "ground_truth": "            intent.putExtra(URL_EXTRA, url)\n            return intent\n        }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\ViewThreadActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.openLink\nimport com.keylesspalace.tusky.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onMenuItemSelected(menuItem: MenuItem): Boolean {\n        return when (menuItem.itemId) {\n            R.id.action_reveal -> {\n                viewModel.toggleRevealButton()\n                true\n            }\n            R.id.action_open_in_web -> {\n                context?.openLink(requireArguments().getString(URL_EXTRA)!!)\n                true\n            }\n            R.id.action_refresh -> {\n                onRefresh()", "choices": [{"text": "                true\n            }\n            else -> super.onMenuItemSelected(menuItem)\n        }\n    }\n"}], "metadata": {"task_id": "Tusky/520", "ground_truth": "                true\n            }\n            else -> false\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\ViewThreadFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\noverride fun onResume() {", "choices": [{"text": "    super.onResume()\n    val intent = Intent(this, MainActivity::class.java)\n    startActivity(intent)\n    finish()\n}\n\n"}], "metadata": {"task_id": "Tusky/521", "ground_truth": "        super.onResume()\n        requireActivity().title = getString(R.string.title_view_thread)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\ViewThreadFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.CoroutineStart\nimport com.keylesspalace.tusky.util.show\nimport com.keylesspalace.tusky.R\nimport androidx.lifecycle.lifecycleScope\nimport androidx.lifecycle.Lifecycle\nimport androidx.annotation.CheckResult\nimport android.view.View\n @CheckResult\n    private fun getProgressBarJob(view: View, delayMs: Long) =\n        viewLifecycleOwner.lifecycleScope.launch(\n            start = CoroutineStart.LAZY\n        ) {\n            try {\n                delay(delayMs)\n                view.show()", "choices": [{"text": "            } catch (e: Exception) {\n                e.printStackTrace()\n            }\n        }\n"}], "metadata": {"task_id": "Tusky/522", "ground_truth": "                awaitCancellation()\n            } finally {\n                view.hide()\n            }\n        }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\ViewThreadFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\noverride fun onReblog(reblog: Boolean, position: Int) {", "choices": [{"text": " if (reblog) {\n holder.reblog.setImageResource(R.drawable.ic_reblog_on)\n } else {\n holder.reblog.setImageResource(R.drawable.ic_reblog_off)\n }\n }\n\n"}], "metadata": {"task_id": "Tusky/523", "ground_truth": "        val status = adapter.currentList[position]\n        viewModel.reblog(reblog, status)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\ViewThreadFragment.kt"}}
{"prompt": "\n override fun onFavourite(favourite: Boolean, position: Int) {", "choices": [{"text": " if (favourite) {\n viewModel.addFavourite(position)\n } else {\n viewModel.removeFavourite(position)\n }\n }\n}\n\n"}], "metadata": {"task_id": "Tusky/524", "ground_truth": "        val status = adapter.currentList[position]\n        viewModel.favorite(favourite, status)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\ViewThreadFragment.kt"}}
{"prompt": "\n override fun onBookmark(bookmark: Boolean, position: Int) {", "choices": [{"text": " if (bookmark) {\n // add to bookmarks\n } else {\n // remove from bookmarks\n }\n }\n })\n\n"}], "metadata": {"task_id": "Tusky/525", "ground_truth": "        val status = adapter.currentList[position]\n        viewModel.bookmark(bookmark, status)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\ViewThreadFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onViewMedia(position: Int, attachmentIndex: Int, view: View?) {\n        val status = adapter.currentList[position].status\n        super.viewMedia(", "choices": [{"text": "osition, attachmentIndex, view)\n        if (status == null) return\n        val media = status.media\n        if (media == null) return\n        val mediaUrl = media.url\n        val mediaType = media.type\n        val mediaPreviewUrl = media.previewUrl\n        val mediaPreviewType = media.previewType\n        val mediaPreviewWidth = media.previewWidth\n        val mediaPreviewHeight = media.previewHeight\n        val mediaSize = media.size\n        val mediaDuration = media.duration\n        val mediaWidth = media.width\n        val mediaHeight = media.height\n        val mediaAspectRatio = media.aspectRatio\n       "}], "metadata": {"task_id": "Tusky/526", "ground_truth": "            attachmentIndex,\n            list(status, alwaysShowSensitiveMedia),\n            view\n        )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\ViewThreadFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.viewdata.StatusViewData\nimport android.view.View\noverride fun onViewUrl(url: String) {\n        val status: StatusViewData.Concrete? = viewModel.detailedStatus()\n        if (status != null && status.status.url == url) {\n            // already viewing the status with this url\n            // probably just a preview federated and the user is clicking again to view more -> open the browser\n            // this can happen with some friendica statuses", "choices": [{"text": "\n import com.keylesspalace.tusky.viewdata.StatusViewData\nimport android.view.View\noverride fun onViewUrl(url: String) {\n        val status: StatusViewData.Concrete? = viewModel.detailedStatus()\n        if (status!= null && status.status.url == url) {\n            // already viewing the status with this url\n            // probably just a preview federated and the user is clicking again to view more -> open the browser\n            // this can happen with some friendica statuses\n            // TODO: open the browser with the url\n            // TODO: open the browser with the url\n            // TODO: open the browser with the url\n            // TODO: open the browser with the url\n            // TODO: open the browser with the url\n            // TODO: open the browser with the url\n            // TODO: open the browser with the url\n            // TODO: open the browser with the url\n            // TODO: open the browser with the url\n            // TODO: open the browser with the url\n            // TODO: open the browser with the url\n            // TODO: open the browser with the url\n            // TODO: open the browser with"}], "metadata": {"task_id": "Tusky/528", "ground_truth": "            requireContext().openLink(url)\n            return\n        }\n        super.onViewUrl(url)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\ViewThreadFragment.kt"}}
{"prompt": "\n public override fun removeItem(position: Int) {\n        adapter.currentList.getOrNull(position)?.let { status ->\n            if (status.isDetailed) {\n                // the main status we are viewing is being removed, finish the activity\n                activity?.finish()", "choices": [{"text": "            } else {\n                // remove the status from the list\n                adapter.currentList.removeAt(position)\n                adapter.notifyItemRemoved(position)\n            }\n        }\n    }\n\n    override fun onItemClick(position: Int) {\n        val status = adapter.currentList[position]\n        if (status.isDetailed) {\n            // the main status we are viewing is being clicked, finish the activity\n            activity?.finish()\n        } else {\n            // open the detailed status\n            val intent = Intent(activity, DetailedStatusActivity::class.java)\n            intent.putExtra(DetailedStatusActivity.EXTRA"}], "metadata": {"task_id": "Tusky/531", "ground_truth": "                return\n            }\n            viewModel.removeStatus(status)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\ViewThreadFragment.kt"}}
{"prompt": "\n override fun onVoteInPoll(position: Int, choices: List<Int>) {", "choices": [{"text": " // TODO: handle vote\n }\n })\n\n"}], "metadata": {"task_id": "Tusky/532", "ground_truth": "        val status = adapter.currentList[position]\n        viewModel.voteInPoll(choices, status)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\ViewThreadFragment.kt"}}
{"prompt": "\nval TAG\nval _uiState MutableStateFlow<ThreadUiState>\nval uiState Flow<ThreadUiState>\n fun retry(id: String) {", "choices": [{"text": " _uiState.value = ThreadUiState.Loading\n viewModelScope.launch {\n try {\n val thread = repository.getThread(id)\n _uiState.value = ThreadUiState.Success(thread)\n } catch (e: Exception) {\n _uiState.value = ThreadUiState.Error(e)\n }\n }\n }\n\n"}], "metadata": {"task_id": "Tusky/534", "ground_truth": "        _uiState.value = ThreadUiState.Loading\n        loadThread(id)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\ViewThreadViewModel.kt"}}
{"prompt": "\nval TAG\nval _errors\nval errors Flow<Throwable>\n fun refresh(id: String) {", "choices": [{"text": "    val url = \"https://api.github.com/repos/$id/issues\"\n    val request = Request.Builder()\n       .url(url)\n       .build()\n    val client = OkHttpClient()\n    client.newCall(request).enqueue(object : Callback {\n        override fun onFailure(call: Call, e: IOException) {\n            _errors.emit(e)\n        }\n\n        override fun onResponse(call: Call, response: Response) {\n            val body = response.body?.string()\n            val result = Gson().fromJson(body, Array<Issue>::class.java)\n            _"}], "metadata": {"task_id": "Tusky/535", "ground_truth": "        _uiState.value = ThreadUiState.Refreshing\n        loadThread(id)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\ViewThreadViewModel.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\nfun detailedStatus(): StatusViewData.Concrete? {\n        return when (val uiState = _uiState.value) {\n            is ThreadUiState.Success -> uiState.statusViewData.find { status ->\n                status.isDetailed", "choices": [{"text": "            }\n            else -> null\n        }\n    }\n\nfun detailedStatus(status: Status): StatusViewData.Concrete? {\n        return when (val uiState = _uiState.value) {\n            is ThreadUiState.Success -> uiState.statusViewData.find { statusViewData ->\n                statusViewData.status.id == status.id\n            }\n            else -> null\n        }\n    }\n\nfun detailedStatus(statusId: Long): StatusViewData.Concrete? {\n        return when (val uiState = _uiState.value) {\n            is ThreadUiState.Success -> uiState.statusViewData.find"}], "metadata": {"task_id": "Tusky/536", "ground_truth": "            }\n            is ThreadUiState.LoadingThread -> uiState.statusViewDatum\n            else -> null\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\ViewThreadViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.update\nimport com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\nfun changeContentShowing(isShowing: Boolean, status: StatusViewData.Concrete) {\n        updateStatusViewData(status.id) { viewData ->", "choices": [{"text": "            viewData.isContentShowing = isShowing\n        }\n    }\n\nfun updateStatusViewData(statusId: Long, update: StatusViewData.Concrete.() -> Unit) {\n    statusViewData.update {\n        val status = this[statusId]\n        if (status!= null) {\n            status.update()\n        }\n    }\n}\n\nfun updateStatusViewData(statusId: Long, update: StatusViewData.() -> Unit) {\n    statusViewData.update {\n        val status = this[statusId]\n        if (status!= null) {\n            status.update()\n        }\n    }\n}"}], "metadata": {"task_id": "Tusky/542", "ground_truth": "            viewData.copy(isShowingContent = isShowing)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\ViewThreadViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.update\nimport com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\nfun changeContentCollapsed(isCollapsed: Boolean, status: StatusViewData.Concrete) {\n        updateStatusViewData(status.id) { viewData ->", "choices": [{"text": "            viewData.copy(isCollapsed = isCollapsed)\n        }\n    }\n\nfun updateStatusViewData(statusId: Long, update: StatusViewData.Concrete.() -> StatusViewData.Concrete) {\n    statusViewData.update {\n        val viewData = this[statusId]\n        if (viewData!= null) {\n            this[statusId] = viewData.update()\n        }\n    }\n}\n\nfun updateStatusViewData(statusId: Long, update: StatusViewData.() -> StatusViewData) {\n    statusViewData.update {\n        val viewData = this[statusId]\n        if ("}], "metadata": {"task_id": "Tusky/543", "ground_truth": "            viewData.copy(isCollapsed = isCollapsed)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\ViewThreadViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.update\nprivate fun removeAllByAccountId(accountId: String) {\n        updateSuccess { uiState ->\n            uiState.copy(\n                statusViewData = uiState.statusViewData.filter { viewData ->", "choices": [{"text": "                    viewData.accountId!= accountId\n                }\n            )\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/545", "ground_truth": "                    viewData.status.account.id != accountId\n                }\n            )\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\ViewThreadViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.update\nimport com.keylesspalace.tusky.entity.Status\nimport com.keylesspalace.tusky.appstore.StatusDeletedEvent\nprivate fun handleStatusDeletedEvent(event: StatusDeletedEvent) {\n        updateSuccess { uiState ->\n            uiState.copy(\n                statusViewData = uiState.statusViewData.filter { status ->", "choices": [{"text": "                    status.id!= event.statusId\n                }\n            )\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/546", "ground_truth": "                    status.id != event.statusId\n                }\n            )\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\ViewThreadViewModel.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\nprivate fun StatusViewData.Concrete.getRevealButtonState(): RevealButtonState {\n        val hasWarnings = status.spoilerText.isNotEmpty()\n\n        return if (hasWarnings) {\n            if (isExpanded) {\n                RevealButtonState.HIDE\n            } else {\n                RevealButtonState.REVEAL", "choices": [{"text": "            }\n        } else {\n            RevealButtonState.GONE\n        }\n    }\n\nprivate fun StatusViewData.Concrete.getRevealButtonVisibility(): Int {\n        val hasWarnings = status.spoilerText.isNotEmpty()\n\n        return if (hasWarnings) {\n            if (isExpanded) {\n                View.VISIBLE\n            } else {\n                View.GONE\n            }\n        } else {\n            View.GONE\n        }\n    }\n\nprivate fun StatusViewData.Concrete.getRevealButtonIcon(): Int {\n        val hasWarnings = status.spoilerText.isNotEmpty()\n\n        return if (hasWarnings) {\n            if"}], "metadata": {"task_id": "Tusky/547", "ground_truth": "            }\n        } else {\n            RevealButtonState.NO_BUTTON\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\ViewThreadViewModel.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\nprivate fun List<StatusViewData.Concrete>.getRevealButtonState(): RevealButtonState {\n        var seenHide = false\n\n        forEach {\n            when (val state = it.getRevealButtonState()) {\n                RevealButtonState.NO_BUTTON -> return@forEach\n                RevealButtonState.REVEAL -> return state\n                RevealButtonState.HIDE -> seenHide = true\n            }\n        }\n\n        if (seenHide) {", "choices": [{"text": "            return RevealButtonState.HIDE\n        }\n\n        return RevealButtonState.NO_BUTTON\n    }\n\nprivate fun List<StatusViewData.Concrete>.getRevealButtonState(): RevealButtonState {\n        var seenHide = false\n\n        forEach {\n            when (val state = it.getRevealButtonState()) {\n                RevealButtonState.NO_BUTTON -> return@forEach\n                RevealButtonState.REVEAL -> return state\n                RevealButtonState.HIDE -> seenHide = true\n            }\n        }\n\n        if (seenHide) {\n            return RevealButtonState.HIDE\n        }\n\n        return"}], "metadata": {"task_id": "Tusky/548", "ground_truth": "            return RevealButtonState.HIDE\n        }\n\n        return RevealButtonState.NO_BUTTON\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\ViewThreadViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.update\nprivate inline fun updateSuccess(updater: (ThreadUiState.Success) -> ThreadUiState.Success) {\n        _uiState.update { uiState ->\n            if (uiState is ThreadUiState.Success) {\n                updater(uiState)", "choices": [{"text": "            } else {\n                uiState\n            }\n        }\n    }\n\nprivate inline fun updateError(updater: (ThreadUiState.Error) -> ThreadUiState.Error) {\n        _uiState.update { uiState ->\n            if (uiState is ThreadUiState.Error) {\n                updater(uiState)\n            } else {\n                uiState\n            }\n        }\n    }\n\nprivate inline fun updateLoading(updater: (ThreadUiState.Loading) -> ThreadUiState.Loading) {\n        _uiState.update { uiState ->\n            if (uiState is ThreadUiState.Loading) {"}], "metadata": {"task_id": "Tusky/552", "ground_truth": "            } else {\n                uiState\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\ViewThreadViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.update\nimport com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\nprivate fun updateStatusViewData(\n        statusId: String,\n        updater: (StatusViewData.Concrete) -> StatusViewData.Concrete\n    ) {\n        updateSuccess { uiState ->\n            uiState.copy(\n                statusViewData = uiState.statusViewData.map { viewData ->\n                    if (viewData.id == statusId) {\n                        updater(viewData)\n                    } else {\n                        viewData", "choices": [{"text": "                    }\n                }\n            )\n        }\n    }\n\nprivate fun updateStatus(\n        statusId: String,\n        updater: (Status) -> Status\n    ) {\n    updateSuccess { uiState ->\n        uiState.copy(\n            status = uiState.status.map { status ->\n                if (status.id == statusId) {\n                    updater(status)\n                } else {\n                    status\n                }\n            }\n        )\n    }\n}\n\nprivate fun updateStatus(\n        statusId: String,\n        updater: (Status) -> Status,\n        updaterViewData: (StatusViewData.Concrete) -> StatusViewData.Concrete"}], "metadata": {"task_id": "Tusky/553", "ground_truth": "                    }\n                }\n            )\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\ViewThreadViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.update\nimport com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\nprivate fun updateStatus(statusId: String, updater: (Status) -> Status) {\n        updateStatusViewData(statusId) { viewData ->", "choices": [{"text": "            viewData.update {\n                it.copy(status = updater(it.status))\n            }\n        }\n    }\n\nprivate fun updateStatusViewData(statusId: String, updater: (StatusViewData) -> StatusViewData) {\n        statusViewData.update {\n            it.copy(statuses = it.statuses.map { status ->\n                if (status.id == statusId) {\n                    updater(status)\n                } else {\n                    status\n                }\n            })\n        }\n    }\n\nprivate fun updateStatus(statusId: String, updater: (Status) -> Status) {\n        updateStatusViewData(statusId"}], "metadata": {"task_id": "Tusky/554", "ground_truth": "            viewData.copy(\n                status = updater(viewData.status)\n            )\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\ViewThreadViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.update\nimport com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\nfun clearWarning(viewData: StatusViewData.Concrete) {\n        updateStatus(viewData.id) { status ->", "choices": [{"text": "                status.copy(warning = false)\n        }\n}\n\nfun updateStatus(id: Long, update: (Status) -> Status) {\n        val status = statusDao.get(id)\n        statusDao.update(update(status))\n}\n\nfun updateStatus(id: Long, update: (Status) -> Status, callback: (Status) -> Unit) {\n        val status = statusDao.get(id)\n        statusDao.update(update(status), callback)\n}\n\nfun updateStatus(id: Long, update: (Status) -> Status, callback: ("}], "metadata": {"task_id": "Tusky/555", "ground_truth": "            status.copy(filtered = null)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\components\\viewthread\\ViewThreadViewModel.kt"}}
{"prompt": "\nval identifier String\nval fullName String\n fun logout() {\n        // deleting credentials so they cannot be used again\n        accessToken = \"\"", "choices": [{"text": "        refreshToken = \"\"\n        identifier = \"\"\n        fullName = \"\"\n        // clearing the shared preferences\n        val sharedPref = getSharedPreferences(PREF_NAME, Context.MODE_PRIVATE)\n        with(sharedPref.edit()) {\n            clear()\n            commit()\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/556", "ground_truth": "        clientId = null\n        clientSecret = null\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\db\\AccountEntity.kt"}}
{"prompt": "\n override fun hashCode(): Int {\n        var result = id.hashCode()\n        result = 31 * result + domain.hashCode()", "choices": [{"text": "        result = 31 * result + name.hashCode()\n        result = 31 * result + type.hashCode()\n        result = 31 * result + (description?.hashCode()?: 0)\n        result = 31 * result + (created?.hashCode()?: 0)\n        result = 31 * result + (updated?.hashCode()?: 0)\n        result = 31 * result + (deleted?.hashCode()?: 0)\n        result = 31 * result + (deletedAt?.hashCode()?: 0)\n        result = 31 * result + (deleted"}], "metadata": {"task_id": "Tusky/558", "ground_truth": "        result = 31 * result + accountId.hashCode()\n        return result\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\db\\AccountEntity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Account\nimport android.util.Log\nfun saveAccount(account: AccountEntity) {\n        if (account.id != 0L) {\n            Log.d(TAG, \"saveAccount: saving account with id \" + account.id)", "choices": [{"text": "\n import com.keylesspalace.tusky.entity.Account\nimport android.util.Log\nfun saveAccount(account: AccountEntity) {\n        if (account.id!= 0L) {\n            Log.d(TAG, \"saveAccount: saving account with id \" + account.id)\n            val accountDao = AppDatabase.getInstance(App.instance).accountDao()\n            accountDao.update(account)\n        } else {\n            Log.d(TAG, \"saveAccount: saving new account\")\n            val accountDao = AppDatabase.getInstance(App.instance).accountDao()\n            accountDao.insert(account)\n        }\n    }\n\nfun getAccount(id: Long): AccountEntity? {\n        val accountDao = AppDatabase.getInstance(App.instance).accountDao()\n        return accountDao.getAccount(id)\n    }\n\nfun getAccount(username: String): AccountEntity"}], "metadata": {"task_id": "Tusky/559", "ground_truth": "            accountDao.insertOrReplace(account)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\db\\AccountManager.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Account\nimport android.util.Log\nfun setActiveAccount(accountId: Long) {\n        val newActiveAccount = accounts.find { (id) ->\n            id == accountId\n        } ?: return // invalid accountId passed, do nothing\n\n        activeAccount?.let {\n            Log.d(TAG, \"setActiveAccount: saving account with id \" + it.id)\n            it.isActive = false\n            saveAccount(it)\n        }\n\n        activeAccount = newActiveAccount\n", "choices": [{"text": "\n import com.keylesspalace.tusky.entity.Account\nimport android.util.Log\nfun setActiveAccount(accountId: Long) {\n        val newActiveAccount = accounts.find { (id) ->\n            id == accountId\n        }?: return // invalid accountId passed, do nothing\n\n        activeAccount?.let {\n            Log.d(TAG, \"setActiveAccount: saving account with id \" + it.id)\n            it.isActive = false\n            saveAccount(it)\n        }\n\n        activeAccount = newActiveAccount\n}\n\nfun getActiveAccount(): Account? {\n        return activeAccount\n}\n\nfun getActiveAccountId(): Long? {\n        return activeAccount?.id\n}\n\nfun getActiveAccountIndex(): Int {\n        return accounts.indexOf(activeAccount)\n}\n\nfun getAccount(accountId: Long): Account? {\n        return accounts.find { (id) ->\n            id == accountId\n        }\n}\n\nfun getAccountIndex(accountId: Long): Int {\n        return accounts.indexOfFirst { (id) ->\n            id == accountId\n        }\n}\n\nfun getAccountIndex(account:"}], "metadata": {"task_id": "Tusky/560", "ground_truth": "        activeAccount?.let {\n            it.isActive = true\n            accountDao.insertOrReplace(it)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\db\\AccountManager.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Account\nfun getAllAccountsOrderedByActive(): List<AccountEntity> {\n        val accountsCopy = accounts.toMutableList()\n        accountsCopy.sortWith { l, r ->\n            when {\n                l.isActive && !r.isActive -> -1\n                r.isActive && !l.isActive -> 1\n                else -> 0", "choices": [{"text": "\n import com.keylesspalace.tusky.entity.Account\nfun getAllAccountsOrderedByActive(): List<AccountEntity> {\n        val accountsCopy = accounts.toMutableList()\n        accountsCopy.sortWith { l, r ->\n            when {\n                l.isActive &&!r.isActive -> -1\n                r.isActive &&!l.isActive -> 1\n                else -> 0\n            }\n        }\n        return accountsCopy\n    }\n\nfun getAllAccountsOrderedByActiveAndName(): List<AccountEntity> {\n        val accountsCopy = accounts.toMutableList()\n        accountsCopy.sortWith { l, r ->\n            when {\n                l.isActive &&!r.isActive -> -1\n                r.isActive &&!l.isActive -> 1\n                else -> l.name.compareTo(r.name)\n            }\n        }\n        return accountsCopy\n    }\n\nfun getAllAccountsOrderedByActiveAndNameAndEmail(): List<AccountEntity> {\n        val accountsCopy = accounts.toMutableList"}], "metadata": {"task_id": "Tusky/561", "ground_truth": "            }\n        }\n\n        return accountsCopy\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\db\\AccountManager.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Account\nfun getAccountById(accountId: Long): AccountEntity? {\n        return accounts.find { (id) ->", "choices": [{"text": "id == accountId }\n}\n\nfun getAccountByUsername(username: String): AccountEntity? {\n        return accounts.find { (name) -> name == username }\n}\n\nfun getAccountByEmail(email: String): AccountEntity? {\n        return accounts.find { (email) -> email == email }\n}\n\nfun getAccountByToken(token: String): AccountEntity? {\n        return accounts.find { (token) -> token == token }\n}\n\nfun getAccountByToken(token: String, tokenType: TokenType): AccountEntity? {\n        return accounts.find"}], "metadata": {"task_id": "Tusky/562", "ground_truth": "            id == accountId\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\db\\AccountManager.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Account\nfun getAccountByIdentifier(identifier: String): AccountEntity? {\n        return accounts.find {", "choices": [{"text": "it.identifier == identifier }\n}\n\nfun getAccountByEmail(email: String): AccountEntity? {\n        return accounts.find { it.email == email }\n}\n\nfun getAccountByUsername(username: String): AccountEntity? {\n        return accounts.find { it.username == username }\n}\n\nfun getAccountByPassword(password: String): AccountEntity? {\n        return accounts.find { it.password == password }\n}\n\nfun getAccountByPasswordHash(passwordHash: String): AccountEntity? {\n        return accounts.find { it.passwordHash == password"}], "metadata": {"task_id": "Tusky/563", "ground_truth": "            identifier == it.identifier\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\db\\AccountManager.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.settings.PrefKeys\nimport androidx.preference.PreferenceManager\nimport android.content.Context\nfun shouldDisplaySelfUsername(context: Context): Boolean {\n        val sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context)\n        val showUsernamePreference = sharedPreferences.getString(\n            PrefKeys.SHOW_SELF_USERNAME,\n            \"disambiguate\"\n        )\n        if (showUsernamePreference == \"always\") {\n            return true\n        }\n        if (showUsernamePreference == \"never\") {", "choices": [{"text": "            return false\n        }\n        return sharedPreferences.getBoolean(PrefKeys.SHOW_SELF_USERNAME_DISAMBIGUATE, true)\n    }\n\nfun shouldDisplaySelfUsername(context: Context, username: String): Boolean {\n        val sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context)\n        val showUsernamePreference = sharedPreferences.getString(\n            PrefKeys.SHOW_SELF_USERNAME,\n            \"disambiguate\"\n        )\n        if (showUsernamePreference == \"always\") {\n            return true\n        }\n        if (showUsernamePreference == \"never\") {\n            return false\n        }\n        return username!="}], "metadata": {"task_id": "Tusky/564", "ground_truth": "            return false\n        }\n\n        return accounts.size > 1 // \"disambiguate\"\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\db\\AccountManager.kt"}}
{"prompt": "\n import androidx.sqlite.db.SupportSQLiteDatabase\nimport androidx.room.Database\nimport androidx.annotation.NonNull\n@Override\r\npublic void migrate(@NonNull SupportSQLiteDatabase database) {\r\n    database.execSQL(\"CREATE TABLE TootEntity2 (uid INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, text TEXT, urls TEXT, contentWarning TEXT);\");\r\n    database.execSQL(\"INSERT INTO TootEntity2 SELECT * FROM TootEntity;\");\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Tusky/565", "ground_truth": "    database.execSQL(\"DROP TABLE TootEntity;\");\r\n    database.execSQL(\"ALTER TABLE TootEntity2 RENAME TO TootEntity;\");\r\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\db\\AppDatabase.java"}}
{"prompt": "\n import androidx.sqlite.db.SupportSQLiteDatabase\nimport androidx.room.Database\nimport androidx.annotation.NonNull\n@Override\r\npublic void migrate(@NonNull SupportSQLiteDatabase database) {\r", "choices": [{"text": "database.execSQL(\"CREATE TABLE IF NOT EXISTS `user` (`id` INTEGER, `name` TEXT, `email` TEXT, `password` TEXT, PRIMARY KEY(`id`))\");\r\ndatabase.execSQL(\"CREATE TABLE IF NOT EXISTS `user_login` (`id` INTEGER, `name` TEXT, `email` TEXT, `password` TEXT, PRIMARY KEY(`id`))\");\r\ndatabase.execSQL(\"CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)\");\r\ndatabase.execSQL(\"INSERT OR REPLACE INTO room_master_"}], "metadata": {"task_id": "Tusky/569", "ground_truth": "    MIGRATION_11_12.migrate(database);\r\n    MIGRATION_12_13.migrate(database);\r\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\db\\AppDatabase.java"}}
{"prompt": "\n import java.io.File\nimport androidx.sqlite.db.SupportSQLiteDatabase\nimport androidx.room.Database\nimport androidx.annotation.NonNull\n@Override\r\npublic void migrate(@NonNull SupportSQLiteDatabase database) {\r\n    database.execSQL(\"DROP TABLE  `TootEntity`\");\r\n    if (oldDraftDirectory != null && oldDraftDirectory.isDirectory()) {\r\n        File[] oldDraftFiles = oldDraftDirectory.listFiles();\r\n        if (oldDraftFiles != null) {\r\n            for (File file : oldDraftFiles) {\r\n                if (!file.isDirectory()) {\r\n                    file.delete();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Tusky/573", "ground_truth": "                }\r\n            }\r\n        }\r\n    }\r\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\db\\AppDatabase.java"}}
{"prompt": "\n import androidx.sqlite.db.SupportSQLiteDatabase\nimport androidx.room.Database\nimport androidx.annotation.NonNull\n@Override\r\npublic void migrate(@NonNull SupportSQLiteDatabase database) {\r\n    // no actual scheme change, but placeholder ids are now used differently so the cache needs to be cleared to avoid bugs\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Tusky/576", "ground_truth": "    database.execSQL(\"DELETE FROM `TimelineAccountEntity`\");\r\n    database.execSQL(\"DELETE FROM `TimelineStatusEntity`\");\r\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\db\\AppDatabase.java"}}
{"prompt": "\n import com.keylesspalace.tusky.TabData\nimport androidx.room.TypeConverter\n @TypeConverter\n    fun tabDataToString(tabData: List<TabData>?): String? {\n        // List name may include \":\"\n        return tabData?.joinToString(\";\") {", "choices": [{"text": "it.toString() }\n    }\n\n    @TypeConverter\n    fun stringToTabData(tabData: String?): List<TabData>? {\n        if (tabData == null) {\n            return null\n        }\n        return tabData.split(\";\").map { TabData.valueOf(it) }\n    }\n}<file_sep>/app/src/main/java/com/keylesspalace/tusky/ui/main/MainFragment.kt\npackage com.keylesspalace.tusky.ui.main\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\n"}], "metadata": {"task_id": "Tusky/584", "ground_truth": "            it.id + \":\" + it.arguments.joinToString(\":\") { s -> URLEncoder.encode(s, \"UTF-8\") }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\db\\Converters.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.components.conversation.ConversationAccountEntity\nimport androidx.room.TypeConverter\n @TypeConverter\n    fun jsonToAccountList(accountListJson: String?): List<ConversationAccountEntity>? {\n        return gson.fromJson(\n            accountListJson,", "choices": [{"text": "            object : TypeToken<List<ConversationAccountEntity>>() {}.type\n        )\n    }\n\n    @TypeConverter\n    fun accountListToJson(accountList: List<ConversationAccountEntity>?): String? {\n        return gson.toJson(accountList)\n    }\n}<file_sep>/app/src/main/java/com/keylesspalace/tusky/components/conversation/ConversationAccountEntity.kt\npackage com.keylesspalace.tusky.components.conversation\n\nimport androidx.room.ColumnInfo\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n"}], "metadata": {"task_id": "Tusky/585", "ground_truth": "            object : TypeToken<List<ConversationAccountEntity>>() {}.type\n        )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\db\\Converters.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Attachment\nimport androidx.room.TypeConverter\n @TypeConverter\n    fun jsonToDraftAttachmentList(draftAttachmentListJson: String?): List<DraftAttachment>? {\n        return gson.fromJson(\n            draftAttachmentListJson,", "choices": [{"text": "            object : TypeToken<List<DraftAttachment>>() {}.type\n        )\n    }\n\n    @TypeConverter\n    fun draftAttachmentListToJson(draftAttachmentList: List<DraftAttachment>?): String? {\n        return gson.toJson(draftAttachmentList)\n    }\n\n    @TypeConverter\n    fun jsonToAttachmentList(attachmentListJson: String?): List<Attachment>? {\n        return gson.fromJson(\n            attachmentListJson,\n            object : TypeToken<List<Attachment>>() {}.type\n        )\n    }\n\n    @TypeConverter\n    fun attachmentListToJson(attachmentList: List<Attachment>?): String? {\n        return gson"}], "metadata": {"task_id": "Tusky/586", "ground_truth": "            object : TypeToken<List<DraftAttachment>>() {}.type\n        )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\db\\Converters.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.LifecycleCoroutineScope\nprivate fun clearDraftsAlert(coroutineScope: LifecycleCoroutineScope, id: Long) {\n        coroutineScope.launch {", "choices": [{"text": "            val drafts = Drafts.getDrafts(coroutineScope.coroutineContext)\n            val draft = drafts.find { it.id == id }\n            if (draft!= null) {\n                drafts.remove(draft)\n                Drafts.saveDrafts(coroutineScope.coroutineContext, drafts)\n            }\n        }\n    }\n\nprivate fun clearDraftsAlert(coroutineScope: LifecycleCoroutineScope, id: Long, drafts: List<Draft>) {\n    coroutineScope.launch {\n        val draft = drafts.find { it.id == id }\n        if (draft!= null)"}], "metadata": {"task_id": "Tusky/587", "ground_truth": "            draftDao.draftsClearNeedUserAlert(id)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\db\\DraftsAlert.kt"}}
{"prompt": "\n suspend fun removeAll(accountId: Long) {", "choices": [{"text": "     val query = \"DELETE FROM ${TABLE_NAME} WHERE ${COLUMN_ACCOUNT_ID} =?\"\n     db.execSQL(query, arrayOf(accountId.toString()))\n }\n \n suspend fun remove(id: Long) {\n     val query = \"DELETE FROM ${TABLE_NAME} WHERE ${COLUMN_ID} =?\"\n     db.execSQL(query, arrayOf(id.toString()))\n }\n \n suspend fun get(id: Long): Account? {\n     val query = \"SELECT * FROM ${TABLE_NAME} WHERE ${COLUMN_ID} =?\"\n     val cursor = db.rawQuery"}], "metadata": {"task_id": "Tusky/588", "ground_truth": "        removeAllStatuses(accountId)\n        removeAllAccounts(accountId)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\db\\TimelineDao.kt"}}
{"prompt": "\n suspend fun cleanup(accountId: Long, limit: Int) {", "choices": [{"text": "     val account = accountRepository.findById(accountId)\n     if (account.isPresent) {\n         val account = account.get()\n         val accountBalance = account.balance\n         val accountTransactions = account.transactions\n         val accountTransactionsList = accountTransactions.toList()\n         val accountTransactionsListSize = accountTransactionsList.size\n         if (accountTransactionsListSize > limit) {\n             val accountTransactionsListLimit = accountTransactionsList.subList(0, limit)\n             val accountTransactionsListLimitSize = accountTransactionsListLimit.size\n             val accountTransactionsListLimitSum = accountTransactionsListLimit.sumOf { it.amount"}], "metadata": {"task_id": "Tusky/589", "ground_truth": "        cleanupStatuses(accountId, limit)\n        cleanupAccounts(accountId)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\db\\TimelineDao.kt"}}
{"prompt": "\n fun checkForUnsavedChanges() {\n        if (viewModel.hasUnsavedChanges(currentProfileData)) {", "choices": [{"text": "            showUnsavedChangesDialog()\n        } else {\n            showProfileData()\n        }\n    }\n\n    private fun showUnsavedChangesDialog() {\n        val dialog = AlertDialog.Builder(this)\n           .setTitle(R.string.unsaved_changes_dialog_title)\n           .setMessage(R.string.unsaved_changes_dialog_message)\n           .setPositiveButton(R.string.unsaved_changes_dialog_positive_button) { _, _ ->\n                showProfileData()\n            }\n           .setNegativeButton(R.string.unsaved_changes_dialog_negative_button) {"}], "metadata": {"task_id": "Tusky/592", "ground_truth": "            showUnsavedChangesDialog()\n        } else {\n            finish()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\EditProfileActivity.kt"}}
{"prompt": "\n override fun onStop() {\n        super.onStop()\n        if (!isFinishing) {", "choices": [{"text": "            if (mPresenter!= null) {\n                mPresenter!!.detachView()\n            }\n        }\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        if (!isFinishing) {\n            if (mPresenter!= null) {\n                mPresenter!!.detachView()\n            }\n        }\n    }\n\n    override fun onDestroyView() {\n        super.onDestroyView()\n        unbinder.unbind()\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        if (requestCode"}], "metadata": {"task_id": "Tusky/593", "ground_truth": "            viewModel.updateProfile(currentProfileData)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\EditProfileActivity.kt"}}
{"prompt": "\n import android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {", "choices": [{"text": " menuInflater.inflate(R.menu.menu_main, menu)\n return true\n}\n\n"}], "metadata": {"task_id": "Tusky/594", "ground_truth": "        menuInflater.inflate(R.menu.edit_profile_toolbar, menu)\n        return super.onCreateOptionsMenu(menu)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\EditProfileActivity.kt"}}
{"prompt": "\n import android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\n        when (item.itemId) {\n            R.id.action_save -> {\n                save()", "choices": [{"text": "                return true\n            }\n            R.id.action_delete -> {\n                delete()\n                return true\n            }\n            R.id.action_edit -> {\n                edit()\n                return true\n            }\n            R.id.action_share -> {\n                share()\n                return true\n            }\n            R.id.action_settings -> {\n                settings()\n                return true\n            }\n            else -> return super.onOptionsItemSelected(item)\n        }\n    }\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        menuInflater"}], "metadata": {"task_id": "Tusky/595", "ground_truth": "                return true\n            }\n        }\n        return super.onOptionsItemSelected(item)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\EditProfileActivity.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.keylesspalace.tusky.util.show\nimport androidx.lifecycle.lifecycleScope\nimport androidx.appcompat.app.AlertDialog\nprivate fun showUnsavedChangesDialog() = lifecycleScope.launch {\n        when (launchSaveDialog()) {\n            AlertDialog.BUTTON_POSITIVE -> save()", "choices": [{"text": "            AlertDialog.BUTTON_NEGATIVE -> cancel()\n        }\n    }\n\nprivate fun launchSaveDialog() = AlertDialog.Builder(this)\n       .setMessage(R.string.unsaved_changes_dialog_message)\n       .setPositiveButton(R.string.unsaved_changes_dialog_save_button) { _, _ ->\n            AlertDialog.BUTTON_POSITIVE\n        }\n       .setNegativeButton(R.string.unsaved_changes_dialog_cancel_button) { _, _ ->\n            AlertDialog.BUTTON_NEGATIVE\n        }\n       .show()\n\nprivate fun cancel() = finish()\n\nprivate fun"}], "metadata": {"task_id": "Tusky/598", "ground_truth": "            else -> finish()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\EditProfileActivity.kt"}}
{"prompt": "\n override fun equals(other: Any?): Boolean {\n        if (other !is Card) {", "choices": [{"text": "\n override fun equals(other: Any?): Boolean {\n        if (other!is Card) {\n            return false\n        }\n        return this.id == other.id\n    }\n\n    override fun hashCode(): Int {\n        return id.hashCode()\n    }\n}\n<file_sep>/src/main/kotlin/com/github/jimschubert/cardgame/domain/game/Game.kt\npackage com.github.jimschubert.cardgame.domain.game\n\nimport com.github.jimschubert.cardgame.domain.card.Card\nimport com.github.jimschubert.cardgame.domain.card.CardRepository\nimport com.github."}], "metadata": {"task_id": "Tusky/602", "ground_truth": "            return false\n        }\n        val account = other as Card?\n        return account?.url == this.url\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\entity\\Card.kt"}}
{"prompt": "\n override fun equals(other: Any?): Boolean {\n        if (other !is FilterV1) {", "choices": [{"text": "\n override fun equals(other: Any?): Boolean {\n        if (other!is FilterV1) {\n            return false\n        }\n        return (\n            other.filterId == filterId &&\n            other.filterName == filterName &&\n            other.filterType == filterType &&\n            other.filterDescription == filterDescription &&\n            other.filterStatus == filterStatus &&\n            other.filterCreatedDate == filterCreatedDate &&\n            other.filterUpdatedDate == filterUpdatedDate &&\n            other.filterCreatedUser == filterCreatedUser &&\n            other.filterUpdatedUser == filterUpdatedUser &&\n            other.filterCreatedUser == filterCreatedUser &&\n            other.filterUpdatedUser == filterUpdatedUser &&\n            other.filterCreatedUser == filterCreated"}], "metadata": {"task_id": "Tusky/603", "ground_truth": "            return false\n        }\n        val filter = other as FilterV1?\n        return filter?.id.equals(id)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\entity\\FilterV1.kt"}}
{"prompt": "\n fun toFilter(): Filter {\n        return Filter(\n            id = id,\n            title = phrase,\n            context = context,\n            expiresAt = expiresAt,\n            filterAction = Filter.Action.WARN.action,\n            keywords = listOf(\n                FilterKeyword(\n                    id = id,\n                    keyword = phrase,", "choices": [{"text": "                    context = context,\n                    expiresAt = expiresAt,\n                    filterAction = Filter.Action.WARN.action,\n                    filterType = Filter.Type.KEYWORD.type\n                )\n            )\n        )\n    }\n }\n\n"}], "metadata": {"task_id": "Tusky/604", "ground_truth": "                    wholeWord = wholeWord\n                )\n            )\n        )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\entity\\FilterV1.kt"}}
{"prompt": "\n override fun equals(other: Any?): Boolean {\n        if (other !is InstanceV1) {", "choices": [{"text": "\n override fun equals(other: Any?): Boolean {\n        if (other!is InstanceV1) {\n            return false\n        }\n        return this.id == other.id\n    }\n\n    override fun hashCode(): Int {\n        return id.hashCode()\n    }\n}\n<file_sep>/src/main/kotlin/com/github/jimschubert/k8s/api/v1/Pod.kt\npackage com.github.jimschubert.k8s.api.v1\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties\nimport com.fasterxml.jackson.annotation.JsonProperty\nimport com.fasterxml.jackson.annotation.JsonSubTypes\nimport com.fasterxml.jackson"}], "metadata": {"task_id": "Tusky/605", "ground_truth": "            return false\n        }\n        val instance = other as InstanceV1?\n        return instance?.uri.equals(uri)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\entity\\InstanceV1.kt"}}
{"prompt": "\n fun rewriteToStatusTypeIfNeeded(accountId: String): Notification {\n        if (type == Type.MENTION && status != null) {\n            return if (status.mentions.any {\n                    it.id == accountId\n                }\n            ) {\n                this\n            } else {", "choices": [{"text": "\n fun rewriteToStatusTypeIfNeeded(accountId: String): Notification {\n        if (type == Type.MENTION && status!= null) {\n            return if (status.mentions.any {\n                    it.id == accountId\n                }\n            ) {\n                this\n            } else {\n                copy(status = status.copy(mentions = status.mentions + Mention(accountId)))\n            }\n        }\n        return this\n    }\n }\n\n"}], "metadata": {"task_id": "Tusky/607", "ground_truth": "                copy(type = Type.STATUS)\n            }\n        }\n        return this\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\entity\\Notification.kt"}}
{"prompt": "\n fun toDeletedStatus(): DeletedStatus {\n        return DeletedStatus(\n            text = getEditableText(),\n            inReplyToId = inReplyToId,\n            spoilerText = spoilerText,\n            visibility = visibility,\n            sensitive = sensitive,\n            attachments = attachments,", "choices": [{"text": "            media = media,\n            poll = poll,\n            thread = thread,\n            pinned = pinned,\n            replyMarkup = replyMarkup,\n            authorSignature = authorSignature,\n            webPreview = webPreview,\n            hashtags = hashtags,\n            caption = caption,\n            replyToMessageId = replyToMessageId,\n            entities = entities,\n            forwardFrom = forwardFrom,\n            forwardFromChat = forwardFromChat,\n            forwardFromMessageId = forwardFromMessageId,\n            forwardSignature = forwardSignature,\n            forwardDate = forwardDate,\n            isServiceMessage = isServiceMessage,\n            senderChat = senderChat,\n            senderChatId"}], "metadata": {"task_id": "Tusky/610", "ground_truth": "            poll = poll,\n            createdAt = createdAt,\n            language = language\n        )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\entity\\Status.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Notification\nimport android.os.Bundle\npublic static NotificationsFragment newInstance() {\r\n    NotificationsFragment fragment = new NotificationsFragment();\r\n    Bundle arguments = new Bundle();\r", "choices": [{"text": "fragment.setArguments(arguments);\r\n    return fragment;\r\n}\n"}], "metadata": {"task_id": "Tusky/611", "ground_truth": "    fragment.setArguments(arguments);\r\n    return fragment;\r\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\fragment\\NotificationsFragment.java"}}
{"prompt": "\n import android.view.View\n@Override\r\npublic void onDestroyView() {\r", "choices": [{"text": "super.onDestroyView();\r\nif (mWebView!= null) {\r\nmWebView.loadDataWithBaseURL(null, \"\", \"text/html\", \"utf-8\", null);\r\nmWebView.clearHistory();\r\nmWebView.clearView();\r\nmWebView.removeAllViews();\r\nmWebView.destroy();\r\nmWebView = null;\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Tusky/612", "ground_truth": "    super.onDestroyView();\r\n    binding = null;\r\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\fragment\\NotificationsFragment.java"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport androidx.annotation.NonNull\nimport android.view.MenuItem\nimport android.view.Menu\n@Override\r\npublic boolean onMenuItemSelected(@NonNull MenuItem menuItem) {\r\n    if (menuItem.getItemId() == R.id.action_refresh) {\r\n        binding.swipeRefreshLayout.setRefreshing(true);\r\n        onRefresh();\r\n        return true;\r\n    } else if (menuItem.getItemId() == R.id.action_edit_notification_filter) {\r\n        showFilterMenu();\r\n        return true;\r\n    } else if (menuItem.getItemId() == R.id.action_clear_notifications) {\r", "choices": [{"text": "//        clearNotifications();\r\n        return true;\r\n    } else if (menuItem.getItemId() == R.id.action_settings) {\r\n        startActivity(new Intent(this, SettingsActivity.class));\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(menuItem);\r\n}\n"}], "metadata": {"task_id": "Tusky/613", "ground_truth": "        confirmClearNotifications();\r\n        return true;\r\n    }\r\n    return false;\r\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\fragment\\NotificationsFragment.java"}}
{"prompt": "\n import kotlin.collections.CollectionsKt\nimport java.util.Collections\nimport com.keylesspalace.tusky.util.Either\nimport com.keylesspalace.tusky.entity.Notification\nimport com.keylesspalace.tusky.R\nimport android.view.View\n@Override\r\npublic void onRefresh() {\r\n    binding.statusView.setVisibility(View.GONE);\r\n    this.showingError = false;\r\n    Either<Placeholder, Notification> first = CollectionsKt.firstOrNull(this.notifications);\r\n    String topId;\r\n    if (first != null && first.isRight()) {\r\n        topId = first.asRight().getId();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Tusky/614", "ground_truth": "    } else {\r\n        topId = null;\r\n    }\r\n    sendFetchNotificationsRequest(null, topId, FetchEnd.TOP, -1);\r\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\fragment\\NotificationsFragment.java"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Notification\nprivate void resetNotificationsLoad() {\r\n    disposables.clear();\r\n    bottomLoading = false;\r\n    topLoading = false;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Tusky/623", "ground_truth": "    // Disable load more\r\n    bottomId = null;\r\n    // Clear exists notifications\r\n    notifications.clear();\r\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\fragment\\NotificationsFragment.java"}}
{"prompt": "\n @Override\r\npublic void removeItem(int position) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.removeItem(position);\r\n}\r\n}\r\n\r\n"}], "metadata": {"task_id": "Tusky/627", "ground_truth": "    notifications.remove(position);\r\n    updateAdapter();\r\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\fragment\\NotificationsFragment.java"}}
{"prompt": "\n private Placeholder newPlaceholder() {\r\n    Placeholder placeholder = Placeholder.getInstance(maxPlaceholderId);\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Tusky/628", "ground_truth": "    maxPlaceholderId--;\r\n    return placeholder;\r\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\fragment\\NotificationsFragment.java"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Status\nimport com.keylesspalace.tusky.R\nprotected fun openReblog(status: Status?) {", "choices": [{"text": "    val intent = Intent(Intent.ACTION_VIEW, Uri.parse(status?.reblogUrl))\n    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\n    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\n    intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)\n    intent.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY)\n    intent.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS)\n    intent.addFlags(Intent.FLAG_ACTIVITY_MULTIPLE_TASK)\n    intent.addFlags("}], "metadata": {"task_id": "Tusky/637", "ground_truth": "        if (status == null) return\n        bottomSheetActivity.viewAccount(status.account.id)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\fragment\\SFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.keylesspalace.tusky.R\nimport androidx.lifecycle.lifecycleScope\nimport androidx.appcompat.app.AlertDialog\nimport android.os.Build\nimport android.content.DialogInterface\nimport android.content.Context\nprivate fun onBlock(accountId: String, accountUsername: String) {\n        AlertDialog.Builder(requireContext())\n            .setMessage(getString(R.string.dialog_block_warning, accountUsername))\n            .setPositiveButton(android.R.string.ok) { _: DialogInterface?, _: Int ->\n                lifecycleScope.launch {\n                    timelineCases.block(accountId)", "choices": [{"text": "\n import kotlinx.coroutines.launch\nimport com.keylesspalace.tusky.R\nimport androidx.lifecycle.lifecycleScope\nimport androidx.appcompat.app.AlertDialog\nimport android.os.Build\nimport android.content.DialogInterface\nimport android.content.Context\nprivate fun onBlock(accountId: String, accountUsername: String) {\n        AlertDialog.Builder(requireContext())\n           .setMessage(getString(R.string.dialog_block_warning, accountUsername))\n           .setPositiveButton(android.R.string.ok) { _: DialogInterface?, _: Int ->\n                lifecycleScope.launch {\n                    timelineCases.block(accountId)\n                }\n            }\n           .setNegativeButton(android.R.string.cancel, null)\n           .show()\n    }\nprivate fun onUnblock(accountId: String, accountUsername: String) {\n        AlertDialog.Builder(requireContext())\n           .setMessage(getString(R.string.dialog_unblock_warning, accountUsername))\n           .setPositiveButton(android.R.string.ok) { _: DialogInterface?, _: Int ->\n                lifecycleScope.launch {\n                    timelineCases.unblock(accountId)\n                }\n            }\n           .setNegativeButton(android.R.string.cancel, null)"}], "metadata": {"task_id": "Tusky/639", "ground_truth": "                }\n            }\n            .setNegativeButton(android.R.string.cancel, null)\n            .show()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\fragment\\SFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.interfaces.AccountSelectionListener\nimport com.keylesspalace.tusky.db.AccountEntity\nimport com.keylesspalace.tusky.BaseActivity\nprivate fun showOpenAsDialog(statusUrl: String?, dialogTitle: CharSequence?) {\n        if (statusUrl == null) {\n            return\n        }\n\n        (activity as BaseActivity).apply {\n            showAccountChooserDialog(\n                dialogTitle,\n                false,\n                object : AccountSelectionListener {\n                    override fun onAccountSelected(account: AccountEntity) {\n                        openAsAccount(statusUrl, account)", "choices": [{"text": "                    }\n                })\n        }\n    }\n\nprivate fun openAsAccount(statusUrl: String, account: AccountEntity) {\n        val intent = Intent(Intent.ACTION_VIEW)\n        intent.data = Uri.parse(statusUrl)\n        intent.putExtra(Intent.EXTRA_ACCOUNT, account)\n        startActivity(intent)\n    }\n\nprivate fun openAsAccount(statusUrl: String, account: AccountEntity, accountType: String) {\n        val intent = Intent(Intent.ACTION_VIEW)\n        intent.data = Uri.parse(statusUrl)\n        intent.putExtra(Intent.EXTRA_"}], "metadata": {"task_id": "Tusky/640", "ground_truth": "                    }\n                }\n            )\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\fragment\\SFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Status\nimport com.keylesspalace.tusky.db.AccountEntity\nprivate fun accountIsInMentions(\n            account: AccountEntity?,\n            mentions: List<Status.Mention>\n        ): Boolean {\n            return mentions.any { mention ->", "choices": [{"text": "                mention.id == account?.id\n            }\n        }\n\nprivate fun accountIsInMentions(\n            account: AccountEntity?,\n            mentions: List<Status.Mention>\n        ): Boolean {\n            return mentions.any { mention ->\n                mention.id == account?.id\n            }\n        }\n\nprivate fun accountIsInMentions(\n            account: AccountEntity?,\n            mentions: List<Status.Mention>\n        ): Boolean {\n            return mentions.any { mention ->\n                mention.id == account?.id\n            }\n        }\n\nprivate fun accountIsInMentions(\n            account: AccountEntity?,\n            mentions: List<"}], "metadata": {"task_id": "Tusky/641", "ground_truth": "                account?.username == mention.username && account.domain == Uri.parse(mention.url)?.host\n            }\n        }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\fragment\\SFragment.kt"}}
{"prompt": "\n import android.content.Context\noverride fun onAttach(context: Context) {", "choices": [{"text": "    super.onAttach(context)\n    if (context is OnFragmentInteractionListener) {\n        mListener = context\n    } else {\n        throw RuntimeException(context.toString() + \" must implement OnFragmentInteractionListener\")\n    }\n}\n\n"}], "metadata": {"task_id": "Tusky/642", "ground_truth": "        super.onAttach(context)\n        photoActionsListener = context as PhotoActionsListener\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\fragment\\ViewImageFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {", "choices": [{"text": "    super.onDestroyView()\n    binding = null\n}\n\n"}], "metadata": {"task_id": "Tusky/645", "ground_truth": "        transition.onComplete()\n        super.onDestroyView()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\fragment\\ViewImageFragment.kt"}}
{"prompt": "\n override fun onDestroyView() {", "choices": [{"text": " super.onDestroyView()\n binding = null\n }\n}\n\n"}], "metadata": {"task_id": "Tusky/647", "ground_truth": "        toolbarVisibilityDisposable?.invoke()\n        super.onDestroyView()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\fragment\\ViewMediaFragment.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.os.Build\noverride fun onResume() {\n        super.onResume()\n\n        if (Build.VERSION.SDK_INT <= 23 || player == null) {", "choices": [{"text": "            player = MediaPlayer.create(this, R.raw.music)\n            player!!.isLooping = true\n            player!!.start()\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/650", "ground_truth": "            initializePlayer()\n\n            binding.videoView.onResume()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\fragment\\ViewVideoFragment.kt"}}
{"prompt": "\n import androidx.media3.common.Player\nprivate fun releasePlayer() {\n        player?.let {\n            savedSeekPosition = it.currentPosition", "choices": [{"text": "            it.release()\n            player = null\n        }\n    }\n"}], "metadata": {"task_id": "Tusky/651", "ground_truth": "            it.release()\n            player = null\n            binding.videoView.player = null\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\fragment\\ViewVideoFragment.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {", "choices": [{"text": " super.onSaveInstanceState(outState)\n outState.putInt(\"key\", 1)\n}\n\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\n super.onRestoreInstanceState(savedInstanceState)\n val value = savedInstanceState.getInt(\"key\")\n}\n\n"}], "metadata": {"task_id": "Tusky/654", "ground_truth": "        super.onSaveInstanceState(outState)\n        outState.putLong(SEEK_POSITION, savedSeekPosition)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\fragment\\ViewVideoFragment.kt"}}
{"prompt": " import com.keylesspalace.tusky.util.hide\nvar videoActionsListener VideoActionsListener\nval hideToolbar\nvar suppressNextHideToolbar\nprivate fun hideToolbarAfterDelay(delayMilliseconds: Int) {", "choices": [{"text": "    if (suppressNextHideToolbar) {\n        suppressNextHideToolbar = false\n        return\n    }\n    hideToolbar = true\n    Handler().postDelayed({\n        if (hideToolbar) {\n            hideToolbar()\n        }\n    }, delayMilliseconds.toLong())\n}\n\nprivate fun hideToolbar() {\n    if (videoActionsListener.isPlaying) {\n        videoActionsListener.pause()\n    }\n    toolbar.hide()\n    videoActionsListener.hide()\n    hideToolbar = false\n}\n\nprivate fun showToolbar() {\n    toolbar.show()\n    videoActionsListener.show()\n}\n\nprivate fun hide"}], "metadata": {"task_id": "Tusky/655", "ground_truth": "        pendingHideToolbar = true\n        handler.postDelayed(hideToolbar, delayMilliseconds.toLong())\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\fragment\\ViewVideoFragment.kt"}}
{"prompt": "\n import java.lang.reflect.Type\nimport com.google.gson.JsonParseException\nimport com.google.gson.JsonElement\nimport com.google.gson.JsonDeserializationContext\n @Throws(JsonParseException::class)\n    override fun deserialize(\n        json: JsonElement,\n        typeOfT: Type,\n        context: JsonDeserializationContext\n    ): Boolean? {\n        return if (json.isJsonObject) {", "choices": [{"text": "            val jsonObject = json.asJsonObject\n            val value = jsonObject.get(\"value\")\n            if (value!= null && value.isJsonPrimitive) {\n                value.asBoolean\n            } else {\n                null\n            }\n        } else {\n            null\n        }\n    }\n}\n"}], "metadata": {"task_id": "Tusky/656", "ground_truth": "            null\n        } else {\n            json.asBoolean\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\json\\GuardedBooleanAdapter.kt"}}
{"prompt": "\n private fun padInt(buffer: StringBuilder, value: Int, length: Int) {\n    val strValue = value.toString()", "choices": [{"text": "    val padLength = length - strValue.length\n    if (padLength > 0) {\n        buffer.append(String(CharArray(padLength)).replace(0, padLength, \"0\"))\n    }\n    buffer.append(strValue)\n}\n\n"}], "metadata": {"task_id": "Tusky/657", "ground_truth": "    for (i in length - strValue.length downTo 1) {\n        buffer.append('0')\n    }\n    buffer.append(strValue)\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\json\\Iso8601Utils.kt"}}
{"prompt": "\n private fun indexOfNonDigit(string: String, offset: Int): Int {\n    for (i in offset until string.length) {", "choices": [{"text": "        if (!Character.isDigit(string[i])) {\n            return i\n        }\n    }\n    return string.length\n}\n\n"}], "metadata": {"task_id": "Tusky/658", "ground_truth": "        val c = string[i]\n        if (c < '0' || c > '9') return i\n    }\n    return string.length\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\json\\Iso8601Utils.kt"}}
{"prompt": "\n import java.util.Date\nimport java.io.IOException\nimport com.google.gson.stream.JsonWriter\n @Throws(IOException::class)\n    override fun write(writer: JsonWriter, date: Date?) {\n        if (date == null) {", "choices": [{"text": "            writer.nullValue()\n        } else {\n            writer.value(date.time)\n        }\n    }\n}\n"}], "metadata": {"task_id": "Tusky/659", "ground_truth": "            writer.nullValue()\n        } else {\n            writer.value(date.formatIsoDate())\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\json\\Rfc3339DateJsonAdapter.kt"}}
{"prompt": "\n import java.util.Date\nimport java.io.IOException\nimport com.google.gson.stream.JsonToken\nimport com.google.gson.stream.JsonReader\nimport com.google.gson.JsonParseException\nimport android.util.Log\n @Throws(IOException::class)\n    override fun read(reader: JsonReader): Date? {\n        return when (reader.peek()) {\n            JsonToken.NULL -> {\n                reader.nextNull()\n                null\n            }\n            else -> {\n                try {\n                    reader.nextString().parseIsoDate()\n                } catch (jpe: JsonParseException) {\n                    Log.w(\"Rfc3339DateJsonAdapter\", jpe)", "choices": [{"text": "                    null\n                }\n            }\n        }\n    }\n\n    override fun write(writer: JsonWriter, value: Date?) {\n        if (value == null) {\n            writer.nullValue()\n        } else {\n            writer.value(value.toIso8601String())\n        }\n    }\n}\n<file_sep>/app/src/main/java/com/example/android/sunshine/app/MainActivity.kt\npackage com.example.android.sunshine.app\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.support.v7.app"}], "metadata": {"task_id": "Tusky/660", "ground_truth": "                    null\n                }\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\json\\Rfc3339DateJsonAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.databinding.ActivityLicenseBinding\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        val binding = ActivityLicenseBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n\n        setSupportActionBar(binding.includedToolbar.toolbar)\n        supportActionBar?.run {\n            setDisplayHomeAsUpEnabled(true)\n            setDisplayShowHomeEnabled(true)\n        }", "choices": [{"text": "\n        binding.includedToolbar.toolbar.setNavigationOnClickListener {\n            onBackPressed()\n        }\n    }\n}\n<file_sep>/app/src/main/java/com/keylesspalace/tusky/ui/main/MainActivity.kt\npackage com.keylesspalace.tusky.ui.main\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.Menu\nimport android.view.MenuItem\nimport android.view.View\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.appcompat.widget.Toolbar\nimport androidx."}], "metadata": {"task_id": "Tusky/661", "ground_truth": "\n        setTitle(R.string.title_licenses)\n\n        loadFileIntoTextView(R.raw.apache, binding.licenseApacheTextView)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\LicenseActivity.kt"}}
{"prompt": "\n import java.io.InputStreamReader\nimport java.io.IOException\nimport java.io.BufferedReader\nimport androidx.annotation.RawRes\nimport android.widget.TextView\nimport android.util.Log\nprivate fun loadFileIntoTextView(@RawRes fileId: Int, textView: TextView) {\n        val sb = StringBuilder()\n\n        val br = BufferedReader(InputStreamReader(resources.openRawResource(fileId)))\n\n        try {\n            var line: String? = br.readLine()\n            while (line != null) {\n                sb.append(line)\n                sb.append('\\n')\n                line = br.readLine()\n            }\n        } catch (e: IOException) {\n            Log.w(\"LicenseActivity\", e)\n        }", "choices": [{"text": "\n import java.io.InputStreamReader\nimport java.io.IOException\nimport java.io.BufferedReader\nimport androidx.annotation.RawRes\nimport android.widget.TextView\nimport android.util.Log\nprivate fun loadFileIntoTextView(@RawRes fileId: Int, textView: TextView) {\n        val sb = StringBuilder()\n\n        val br = BufferedReader(InputStreamReader(resources.openRawResource(fileId)))\n\n        try {\n            var line: String? = br.readLine()\n            while (line!= null) {\n                sb.append(line)\n                sb.append('\\n')\n                line = br.readLine()\n            }\n        } catch (e: IOException) {\n            Log.w(\"LicenseActivity\", e)\n        } finally {\n            try {\n                br.close()\n            } catch (e: IOException) {\n                Log.w(\"LicenseActivity\", e)\n            }\n        }\n\n        textView.text = sb.toString()\n    }\n<file_sep>/app/src/main/java/com/example/android/sunshine/app/MainActivity.kt\npackage com.example.android.sunshine.app\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.support.v7.app.AppCompatActivity\nimport android.view.Menu\nimport android.view.MenuItem\nimport android."}], "metadata": {"task_id": "Tusky/662", "ground_truth": "\n        br.closeQuietly()\n\n        textView.text = sb.toString()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\LicenseActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.show\nimport com.google.android.material.snackbar.Snackbar\nimport androidx.annotation.StringRes\nprivate fun showMessage(@StringRes messageId: Int) {\n        Snackbar.make(", "choices": [{"text": "indViewById(android.R.id.content), messageId, Snackbar.LENGTH_LONG).show()\n}\n\nprivate fun showMessage(message: String) {\n        Snackbar.make(findViewById(android.R.id.content), message, Snackbar.LENGTH_LONG).show()\n}\n\nprivate fun showMessage(message: String, action: String, listener: (View) -> Unit) {\n        Snackbar.make(findViewById(android.R.id.content), message, Snackbar.LENGTH_LONG)\n               .setAction(action, listener).show()\n}\n\nprivate"}], "metadata": {"task_id": "Tusky/664", "ground_truth": "            binding.listsRecycler,\n            messageId,\n            Snackbar.LENGTH_SHORT\n        ).show()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\ListsActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.MastoList\nprivate fun onListSelected(list: MastoList) {\n        startActivityWithSlideInAnimation(", "choices": [{"text": "his, Intent(this, MastoListActivity::class.java).apply {\n            putExtra(MastoListActivity.EXTRA_LIST_ID, list.id)\n        })\n    }\n\n"}], "metadata": {"task_id": "Tusky/665", "ground_truth": "            StatusListActivity.newListIntent(this, list.id, list.title)\n        )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\ListsActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.visible\nimport com.keylesspalace.tusky.util.BindingHolder\nimport com.keylesspalace.tusky.databinding.ItemListBinding\nimport android.view.View\noverride fun onBindViewHolder(holder: BindingHolder<ItemListBinding>, position: Int) {\n            val item = getItem(position)\n            holder.binding.listName.text = item.title\n\n            holder.binding.moreButton.apply {\n                visible(true)\n                setOnClickListener {\n                    onMore(item, holder.binding.moreButton)\n                }\n            }", "choices": [{"text": "\n            holder.binding.listName.apply {\n                visible(true)\n                setOnClickListener {\n                    onItemClick(item)\n                }\n            }\n        }\n\n"}], "metadata": {"task_id": "Tusky/666", "ground_truth": "\n            holder.itemView.setOnClickListener {\n                onListSelected(item)\n            }\n        }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\ListsActivity.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport com.keylesspalace.tusky.util.show\nimport com.keylesspalace.tusky.entity.Account\nimport androidx.lifecycle.lifecycleScope\nimport androidx.core.view.isVisible\nprivate fun showDirectMessageBadge(showBadge: Boolean) {\n        directMessageTab?.let { tab ->\n            tab.badge?.isVisible = showBadge\n\n            // TODO a bit cumbersome (also for resetting)\n            lifecycleScope.launch(Dispatchers.IO) {\n                accountManager.activeAccount?.let {\n                    if (it.hasDirectMessageBadge != showBadge) {\n                        it.hasDirectMessageBadge = showBadge\n                        accountManager.saveAccount(it)", "choices": [{"text": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport com.keylesspalace.tusky.util.show\nimport com.keylesspalace.tusky.entity.Account\nimport androidx.lifecycle.lifecycleScope\nimport androidx.core.view.isVisible\nprivate fun showDirectMessageBadge(showBadge: Boolean) {\n        directMessageTab?.let { tab ->\n            tab.badge?.isVisible = showBadge\n\n            // TODO a bit cumbersome (also for resetting)\n            lifecycleScope.launch(Dispatchers.IO) {\n                accountManager.activeAccount?.let {\n                    if (it.hasDirectMessageBadge!= showBadge) {\n                        it.hasDirectMessageBadge = showBadge\n                        accountManager.saveAccount(it)\n                    }\n                }\n            }\n        }\n    }\n\nprivate fun showDirectMessageBadge() {\n        if (accountManager.activeAccount?.hasDirectMessageBadge == true) {\n            showDirectMessageBadge(true)\n        }\n    }\n\nprivate fun hideDirectMessageBadge() {\n        showDirectMessageBadge(false)\n    }\n\nprivate fun showDirectMessageBadge(account: Account) {\n        if (account.hasDirectMessageBadge == true) {\n            showDirectMessageBadge(true)\n        }\n    }\n\nprivate fun hideDirectMessageBadge(account: Account) {\n        showDirectMessageBadge("}], "metadata": {"task_id": "Tusky/668", "ground_truth": "                    }\n                }\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\MainActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.show\nimport androidx.core.view.isVisible\nimport androidx.core.view.forEach\nimport android.view.Menu\noverride fun onPrepareMenu(menu: Menu) {\n        super.onPrepareMenu(menu)\n\n        // If the main toolbar is hidden then there's no space in the top/bottomNav to show\n        // the menu items as icons, so forceably disable them\n        if (!binding.mainToolbar.isVisible) {\n            menu.forEach {\n                it.setShowAsAction(", "choices": [{"text": "enu.SHOW_AS_ACTION_NEVER)\n            }\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/670", "ground_truth": "                    SHOW_AS_ACTION_NEVER\n                )\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\MainActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.components.search.SearchActivity\nimport android.view.MenuItem\nimport android.view.Menu\nimport android.content.Intent\noverride fun onMenuItemSelected(item: MenuItem): Boolean {\n        return when (item.itemId) {\n            R.id.action_search -> {\n                startActivity(SearchActivity.getIntent(this@MainActivity))", "choices": [{"text": "                true\n            }\n            else -> super.onMenuItemSelected(item)\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/671", "ground_truth": "                true\n            }\n            else -> super.onOptionsItemSelected(item)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\MainActivity.kt"}}
{"prompt": "\n import de.c1710.filemojicompat_ui.helpers.EMOJI_PREFERENCE\nimport android.util.Log\noverride fun onResume() {\n        super.onResume()\n        val currentEmojiPack = preferences.getString(EMOJI_PREFERENCE, \"\")\n        if (currentEmojiPack != selectedEmojiPack) {\n            Log.d(\n                TAG,\n                \"onResume: EmojiPack has been changed from %s to %s\"\n                    .format(selectedEmojiPack, currentEmojiPack)", "choices": [{"text": "\n import de.c1710.filemojicompat_ui.helpers.EMOJI_PREFERENCE\nimport android.util.Log\noverride fun onResume() {\n        super.onResume()\n        val currentEmojiPack = preferences.getString(EMOJI_PREFERENCE, \"\")\n        if (currentEmojiPack!= selectedEmojiPack) {\n            Log.d(\n                TAG,\n                \"onResume: EmojiPack has been changed from %s to %s\"\n                   .format(selectedEmojiPack, currentEmojiPack)\n            )\n            selectedEmojiPack = currentEmojiPack\n            emojiAdapter.setEmojiPack(selectedEmojiPack)\n        }\n    }\n"}], "metadata": {"task_id": "Tusky/672", "ground_truth": "            )\n            selectedEmojiPack = currentEmojiPack\n            recreate()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\MainActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.show\nimport com.keylesspalace.tusky.util.hide\nimport com.keylesspalace.tusky.pager.MainPagerAdapter\nimport com.keylesspalace.tusky.interfaces.FabFragment\nprivate fun refreshComposeButtonState(adapter: MainPagerAdapter, tabPosition: Int) {\n        adapter.getFragment(tabPosition)?.also { fragment ->\n            if (fragment is FabFragment) {\n                if (fragment.isFabVisible()) {\n                    binding.composeButton.show()\n                } else {\n                    binding.composeButton.hide()\n                }", "choices": [{"text": "            }\n        }\n    }\n\nprivate fun refreshComposeButtonState(adapter: MainPagerAdapter) {\n    for (i in 0 until adapter.count) {\n        refreshComposeButtonState(adapter, i)\n    }\n}\n\nprivate fun refreshComposeButtonState(adapter: MainPagerAdapter, tabPosition: Int, isFabVisible: Boolean) {\n    adapter.getFragment(tabPosition)?.also { fragment ->\n        if (fragment is FabFragment) {\n            if (isFabVisible) {\n                fragment.showFab()\n            } else {\n                fragment.hideFab()\n            }\n        }\n   "}], "metadata": {"task_id": "Tusky/675", "ground_truth": "            } else {\n                binding.composeButton.show()\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\MainActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Account\nimport android.content.Intent\nimport android.content.Context\n @JvmStatic\n        fun accountSwitchIntent(context: Context, tuskyAccountId: Long): Intent {\n            return Intent(context, MainActivity::class.java).apply {", "choices": [{"text": "                putExtra(ACCOUNT_ID_KEY, tuskyAccountId)\n            }\n        }\n\n"}], "metadata": {"task_id": "Tusky/679", "ground_truth": "                putExtra(TUSKY_ACCOUNT_ID, tuskyAccountId)\n            }\n        }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\MainActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Notification\nimport com.keylesspalace.tusky.entity.Account\nimport android.content.Intent\nimport android.content.Context\n @JvmStatic\n        fun openNotificationIntent(\n            context: Context,\n            tuskyAccountId: Long,\n            type: Notification.Type\n        ): Intent {\n            return accountSwitchIntent(context, tuskyAccountId).apply {", "choices": [{"text": "                putExtra(Notification.EXTRA_TYPE, type)\n            }\n        }\n\n        @JvmStatic\n        fun accountSwitchIntent(context: Context, tuskyAccountId: Long): Intent {\n            return Intent(context, AccountSwitchActivity::class.java).apply {\n                putExtra(Account.EXTRA_TUSKY_ACCOUNT_ID, tuskyAccountId)\n            }\n        }\n<file_sep>/app/src/main/java/com/keylesspalace/tusky/ui/account/AccountSwitchActivity.kt\npackage com.keylesspalace.tusky.ui."}], "metadata": {"task_id": "Tusky/680", "ground_truth": "                putExtra(NOTIFICATION_TYPE, type.name)\n            }\n        }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\MainActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Account\nimport android.content.Intent\nimport android.content.Context\n @JvmStatic\n        fun redirectIntent(context: Context, tuskyAccountId: Long, url: String): Intent {\n            return accountSwitchIntent(context, tuskyAccountId).apply {\n                putExtra(REDIRECT_URL, url)", "choices": [{"text": "            }\n        }\n\n        @JvmStatic\n        fun accountSwitchIntent(context: Context, tuskyAccountId: Long): Intent {\n            return Intent(context, AccountSwitchActivity::class.java).apply {\n                putExtra(TUSKY_ACCOUNT_ID, tuskyAccountId)\n            }\n        }\n\n        @JvmStatic\n        fun accountSwitchIntent(context: Context, account: Account): Intent {\n            return accountSwitchIntent(context, account.id)\n        }\n\n        @JvmStatic\n        fun accountSwitchIntent(context: Context, account: Account?, tuskyAccountId: Long): Intent {\n            return account"}], "metadata": {"task_id": "Tusky/682", "ground_truth": "                flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK\n            }\n        }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\MainActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Account\nimport android.content.Intent\nimport android.content.Context\nfun draftIntent(context: Context, tuskyAccountId: Long): Intent {\n            return accountSwitchIntent(context, tuskyAccountId).apply {", "choices": [{"text": "                putExtra(Intent.EXTRA_TEXT, \"Draft\")\n            }\n        }\n\nfun accountSwitchIntent(context: Context, tuskyAccountId: Long): Intent {\n            return Intent(context, AccountSwitchActivity::class.java).apply {\n                putExtra(Intent.EXTRA_TEXT, tuskyAccountId)\n            }\n        }\n\nfun accountSwitchIntent(context: Context, tuskyAccountId: Long, draft: Boolean): Intent {\n            return Intent(context, AccountSwitchActivity::class.java).apply {\n                putExtra(Intent.EXTRA_TEXT, tuskyAccountId)\n               "}], "metadata": {"task_id": "Tusky/683", "ground_truth": "                putExtra(OPEN_DRAFTS, true)\n            }\n        }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\MainActivity.kt"}}
{"prompt": "\n import com.mikepenz.materialdrawer.model.PrimaryDrawerItem\nprivate inline fun primaryDrawerItem(block: PrimaryDrawerItem.() -> Unit): PrimaryDrawerItem {\n    return PrimaryDrawerItem()\n        .apply {", "choices": [{"text": "\n import com.mikepenz.materialdrawer.model.PrimaryDrawerItem\nprivate inline fun primaryDrawerItem(block: PrimaryDrawerItem.() -> Unit): PrimaryDrawerItem {\n    return PrimaryDrawerItem()\n       .apply { block() }\n}\n\nfun primaryDrawerItem(\n    icon: Int? = null,\n    name: String? = null,\n    identifier: Int? = null,\n    selected: Boolean? = null,\n    enabled: Boolean? = null,\n    iconTint: Int? = null,\n    iconAlwaysVisible: Boolean? = null,\n    selectedIconTint: Int? = null,\n    selectedIconTintRes: Int? = null,\n    selectedTextColor: Int? = null,\n    selectedTextColorRes: Int? = null,\n    textColor: Int? = null,\n    textColorRes: Int? = null,"}], "metadata": {"task_id": "Tusky/684", "ground_truth": "            isSelectable = false\n            isIconTinted = true\n        }\n        .apply(block)\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\MainActivity.kt"}}
{"prompt": "\n import com.mikepenz.materialdrawer.model.SecondaryDrawerItem\nprivate inline fun secondaryDrawerItem(block: SecondaryDrawerItem.() -> Unit): SecondaryDrawerItem {\n    return SecondaryDrawerItem()\n        .apply {", "choices": [{"text": "\n import com.mikepenz.materialdrawer.model.SecondaryDrawerItem\nprivate inline fun secondaryDrawerItem(block: SecondaryDrawerItem.() -> Unit): SecondaryDrawerItem {\n    return SecondaryDrawerItem()\n       .apply { block() }\n}\n\nfun Context.secondaryDrawerItem(block: SecondaryDrawerItem.() -> Unit): SecondaryDrawerItem {\n    return SecondaryDrawerItem()\n       .apply { block() }\n}\n\nfun Context.secondaryDrawerItem(\n    identifier: Int = 0,\n    name: String = \"\",\n    icon: Int = 0,\n    iconTint: Int = 0,\n    selectedIcon: Int = 0,\n    selectedIconTint: Int = 0,\n    checkable: Boolean = false,\n    checked: Boolean = false,\n    checkableTint: Int = 0,\n   "}], "metadata": {"task_id": "Tusky/685", "ground_truth": "            isSelectable = false\n            isIconTinted = true\n        }\n        .apply(block)\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\MainActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.FilterV1\nimport com.keylesspalace.tusky.entity.Filter\nfun initWithFilters(filters: List<FilterV1>) {", "choices": [{"text": "    filters.forEach {\n        val filter = Filter(it.id, it.name, it.description, it.type, it.value)\n        filter.save()\n    }\n}\n\nfun initWithFilter(filter: FilterV1) {\n    val filter = Filter(filter.id, filter.name, filter.description, filter.type, filter.value)\n    filter.save()\n}\n\nfun initWithFilter(filter: Filter) {\n    filter.save()\n}\n\nfun initWithFilters(filters: List<Filter>) {\n    filters.forEach {\n        it."}], "metadata": {"task_id": "Tusky/686", "ground_truth": "        v1 = true\n        this.pattern = makeFilter(filters)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\network\\FilterModel.kt"}}
{"prompt": "\n import java.util.regex.Pattern\nimport com.keylesspalace.tusky.entity.FilterV1\nimport com.keylesspalace.tusky.entity.Filter\nprivate fun filterToRegexToken(filter: FilterV1): String? {\n        val phrase = filter.phrase\n        val quotedPhrase = Pattern.quote(phrase)\n        return if (filter.wholeWord && ALPHANUMERIC.matcher(phrase).matches()) {", "choices": [{"text": "            \"\\\\b$quotedPhrase\\\\b\"\n        } else {\n            quotedPhrase\n        }\n    }\n\nprivate fun filterToRegex(filter: FilterV1): String? {\n        val phrase = filter.phrase\n        val quotedPhrase = Pattern.quote(phrase)\n        return if (filter.wholeWord && ALPHANUMERIC.matcher(phrase).matches()) {\n            \"\\\\b$quotedPhrase\\\\b\"\n        } else {\n            quotedPhrase\n        }\n    }\n\nprivate fun filterToRegex(filter: Filter): String? {\n        val phrase = filter.phrase\n        val quotedPhrase = Pattern.quote("}], "metadata": {"task_id": "Tusky/687", "ground_truth": "            String.format(\"(^|\\\\W)%s($|\\\\W)\", quotedPhrase)\n        } else {\n            quotedPhrase\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\network\\FilterModel.kt"}}
{"prompt": "\n override fun onTransitionEnd(position: Int) {", "choices": [{"text": " if (position == 0) {\n // do something\n }\n }\n}\n\n"}], "metadata": {"task_id": "Tusky/690", "ground_truth": "        this.didTransition = true\n        fragments[position]?.get()?.onTransitionEnd()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\pager\\ImagePagerAdapter.kt"}}
{"prompt": "\n import androidx.fragment.app.Fragment\noverride fun createFragment(position: Int): Fragment {", "choices": [{"text": " return when (position) {\n 0 -> {\n Fragment1()\n }\n 1 -> {\n Fragment2()\n }\n else -> {\n Fragment3()\n }\n }\n}\n\n"}], "metadata": {"task_id": "Tusky/691", "ground_truth": "        val tab = tabs[position]\n        return tab.fragment(tab.arguments)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\pager\\MainPagerAdapter.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport androidx.core.app.RemoteInput\nimport android.content.Intent\nprivate fun getReplyMessage(intent: Intent): CharSequence {\n        val remoteInput = RemoteInput.getResultsFromIntent(intent)", "choices": [{"text": "        return remoteInput?.getCharSequence(KEY_TEXT_REPLY)?: \"\"\n    }\n\nprivate fun getReplyMessage(intent: Intent): CharSequence {\n        val remoteInput = RemoteInput.getResultsFromIntent(intent)\n        return remoteInput?.getCharSequence(KEY_TEXT_REPLY)?: \"\"\n    }\n\nprivate fun getReplyMessage(intent: Intent): CharSequence {\n        val remoteInput = RemoteInput.getResultsFromIntent(intent)\n        return remoteInput?.getCharSequence(KEY_TEXT_REPLY)?: \"\"\n    }\n\nprivate fun getReplyMessage(intent: Intent): CharSequence {\n        val"}], "metadata": {"task_id": "Tusky/693", "ground_truth": "\n        return remoteInput?.getCharSequence(NotificationHelper.KEY_REPLY, \"\") ?: \"\"\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\receiver\\SendStatusBroadcastReceiver.kt"}}
{"prompt": "\n import android.content.Intent\nimport android.content.Context\noverride fun onReceive(context: Context, intent: Intent) {", "choices": [{"text": "    val action = intent.action\n    if (action == \"android.intent.action.BOOT_COMPLETED\") {\n        val intent = Intent(context, MainActivity::class.java)\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\n        context.startActivity(intent)\n    }\n}\n\n"}], "metadata": {"task_id": "Tusky/694", "ground_truth": "        super.onReceive(context, intent)\n        AndroidInjection.inject(this, context)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\receiver\\UnifiedPushBroadcastReceiver.kt"}}
{"prompt": "\n override fun onCreate() {", "choices": [{"text": " super.onCreate()\n // Initialize Firebase\n FirebaseApp.initializeApp(this)\n }\n}\n\n"}], "metadata": {"task_id": "Tusky/697", "ground_truth": "        AndroidInjection.inject(this)\n        super.onCreate()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\service\\SendStatusService.kt"}}
{"prompt": "\n import java.util.concurrent.TimeUnit\nprivate suspend fun retrySending(statusId: Int) {\n        // when statusToSend == null, sending has been canceled\n        val statusToSend = statusesToSend[statusId] ?: return\n\n        val backoff = TimeUnit.SECONDS.toMillis(\n            statusToSend.retries.toLong()", "choices": [{"text": "\n import java.util.concurrent.TimeUnit\nprivate suspend fun retrySending(statusId: Int) {\n        // when statusToSend == null, sending has been canceled\n        val statusToSend = statusesToSend[statusId]?: return\n\n        val backoff = TimeUnit.SECONDS.toMillis(\n            statusToSend.retries.toLong() * 2\n        )\n        val delay = if (statusToSend.retries == 0) 0L else backoff\n        delay(delay)\n        val response = sendStatus(statusToSend)\n        if (response.isSuccessful) {\n            statusesToSend.remove(statusId)\n        } else {\n            val newStatus = statusToSend.copy(\n                retries = statusToSend.retries + 1\n            )\n            statusesToSend[statusId] = newStatus\n            retrySending(statusId)\n        }\n    }\n"}], "metadata": {"task_id": "Tusky/699", "ground_truth": "        ).coerceAtMost(MAX_RETRY_INTERVAL)\n\n        delay(backoff)\n        sendStatus(statusId)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\service\\SendStatusService.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Status\nimport androidx.core.app.ServiceCompat\nimport android.app.Service\nprivate fun stopSelfWhenDone() {\n        if (statusesToSend.isEmpty()) {\n            ServiceCompat.stopForeground(\n                this@SendStatusService,", "choices": [{"text": "                Service.STOP_FOREGROUND_DETACH\n            )\n            stopSelf()\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/700", "ground_truth": "                ServiceCompat.STOP_FOREGROUND_REMOVE\n            )\n            stopSelf()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\service\\SendStatusService.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Status\nimport android.content.Intent\nimport android.app.Service\nimport android.app.PendingIntent\nprivate fun cancelSendingIntent(statusId: Int): PendingIntent {\n        val intent = Intent(this, SendStatusService::class.java)\n        intent.putExtra(KEY_CANCEL, statusId)\n        return PendingIntent.getService(\n            this,", "choices": [{"text": "            statusId,\n            intent,\n            PendingIntent.FLAG_CANCEL_CURRENT\n        )\n    }\n\nprivate fun cancelSendingIntent(statusId: Int): PendingIntent {\n        val intent = Intent(this, SendStatusService::class.java)\n        intent.putExtra(KEY_CANCEL, statusId)\n        return PendingIntent.getService(\n            this,\n            statusId,\n            intent,\n            PendingIntent.FLAG_CANCEL_CURRENT\n        )\n    }\n\nprivate fun cancelSendingIntent(statusId: Int): PendingIntent {\n        val intent = Intent(this, SendStatusService::class.java)\n        intent"}], "metadata": {"task_id": "Tusky/701", "ground_truth": "            statusId,\n            intent,\n            NotificationHelper.pendingIntentFlags(false)\n        )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\service\\SendStatusService.kt"}}
{"prompt": "\n override fun onDestroy() {", "choices": [{"text": " super.onDestroy()\n mPresenter.detachView()\n }\n}\n\n"}], "metadata": {"task_id": "Tusky/702", "ground_truth": "        super.onDestroy()\n        supervisorJob.cancel()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\service\\SendStatusService.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.components.compose.ComposeActivity\nimport com.keylesspalace.tusky.MainActivity\nimport android.content.Intent\noverride fun onClick() {\n        val intent = MainActivity.composeIntent(this, ComposeActivity.ComposeOptions())", "choices": [{"text": "        startActivity(intent)\n    }\n\n"}], "metadata": {"task_id": "Tusky/704", "ground_truth": "        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\n        startActivityAndCollapse(intent)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\service\\TuskyTileService.kt"}}
{"prompt": "\n import java.net.IDN\nfun create(hostname: String, port: Int): ProxyConfiguration? {\n            if (isValidHostname(IDN.toASCII(hostname)) && isValidProxyPort(port)) {\n                return ProxyConfiguration(hostname, port)", "choices": [{"text": "            }\n            return null\n        }\n\n"}], "metadata": {"task_id": "Tusky/705", "ground_truth": "            }\n            return null\n        }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\settings\\ProxyConfiguration.kt"}}
{"prompt": "\n import androidx.preference.Preference\ninline fun PreferenceParent.preference(builder: Preference.() -> Unit): Preference {\n    val pref = Preference(context)\n    builder(pref)", "choices": [{"text": "    addPreference(pref)\n    return pref\n}\n\n"}], "metadata": {"task_id": "Tusky/707", "ground_truth": "    addPref(pref)\n    return pref\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\settings\\SettingsDSL.kt"}}
{"prompt": "\n import androidx.preference.Preference\nimport androidx.preference.ListPreference\ninline fun PreferenceParent.listPreference(builder: ListPreference.() -> Unit): ListPreference {\n    val pref = ListPreference(context)\n    builder(pref)", "choices": [{"text": "    addPreference(pref)\n    return pref\n}\n\ninline fun PreferenceParent.preference(builder: Preference.() -> Unit): Preference {\n    val pref = Preference(context)\n    builder(pref)\n    addPreference(pref)\n    return pref\n}\n\ninline fun PreferenceParent.preferenceCategory(builder: PreferenceCategory.() -> Unit): PreferenceCategory {\n    val pref = PreferenceCategory(context)\n    builder(pref)\n    addPreference(pref)\n    return pref\n}\n\ninline fun PreferenceParent.switchPreference(builder: SwitchPreference.() -> Unit): SwitchPreference {\n    val pref = Switch"}], "metadata": {"task_id": "Tusky/708", "ground_truth": "    addPref(pref)\n    return pref\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\settings\\SettingsDSL.kt"}}
{"prompt": "\n import de.c1710.filemojicompat_ui.views.picker.preference.EmojiPickerPreference\nimport androidx.preference.Preference\nimport androidx.lifecycle.LifecycleOwner\nimport androidx.activity.result.ActivityResultRegistryOwner\nimport android.content.Context\ninline fun <A> PreferenceParent.emojiPreference(\n    activity: A,\n    builder: EmojiPickerPreference.() -> Unit\n): EmojiPickerPreference\n    where A : Context, A : ActivityResultRegistryOwner, A : LifecycleOwner {\n    val pref = EmojiPickerPreference.get(activity)\n    builder(pref)", "choices": [{"text": "    return pref\n}\n\ninline fun <A> PreferenceParent.emojiPreference(\n    activity: A,\n    builder: EmojiPickerPreference.() -> Unit\n): EmojiPickerPreference\n    where A : Context, A : ActivityResultRegistryOwner, A : LifecycleOwner {\n    val pref = EmojiPickerPreference.get(activity)\n    builder(pref)\n    return pref\n}\n\ninline fun <A> PreferenceParent.emojiPreference(\n    activity: A,\n    builder: EmojiPickerPreference.() -> Unit\n): EmojiPickerPreference\n    where A : Context, A : ActivityResultRegistryOwner, A : LifecycleOwner"}], "metadata": {"task_id": "Tusky/709", "ground_truth": "    addPref(pref)\n    return pref\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\settings\\SettingsDSL.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.view.SliderPreference\nimport androidx.preference.Preference\ninline fun PreferenceParent.sliderPreference(\n    builder: SliderPreference.() -> Unit\n): SliderPreference {\n    val pref = SliderPreference(context)\n    builder(pref)", "choices": [{"text": "    addPreference(pref)\n    return pref\n}\n\ninline fun PreferenceParent.switchPreference(\n    builder: SwitchPreference.() -> Unit\n): SwitchPreference {\n    val pref = SwitchPreference(context)\n    builder(pref)\n    addPreference(pref)\n    return pref\n}\n\ninline fun PreferenceParent.listPreference(\n    builder: ListPreference.() -> Unit\n): ListPreference {\n    val pref = ListPreference(context)\n    builder(pref)\n    addPreference(pref)\n    return pref\n}\n\ninline fun PreferenceParent.preference(\n    builder: Preference.() -> Unit\n):"}], "metadata": {"task_id": "Tusky/710", "ground_truth": "    addPref(pref)\n    return pref\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\settings\\SettingsDSL.kt"}}
{"prompt": "\n import androidx.preference.SwitchPreference\nimport androidx.preference.Preference\ninline fun PreferenceParent.switchPreference(\n    builder: SwitchPreference.() -> Unit\n): SwitchPreference {\n    val pref = SwitchPreference(context)\n    builder(pref)", "choices": [{"text": "    addPreference(pref)\n    return pref\n}\n\ninline fun PreferenceParent.switchPreference(\n    key: String,\n    title: String,\n    summary: String? = null,\n    defaultValue: Boolean = false,\n    builder: SwitchPreference.() -> Unit\n): SwitchPreference {\n    val pref = SwitchPreference(context).apply {\n        this.key = key\n        this.title = title\n        this.summary = summary\n        this.defaultValue = defaultValue\n    }\n    builder(pref)\n    addPreference(pref)\n    return pref\n}\n\ninline fun PreferenceParent.switchPreference(\n    key: String,"}], "metadata": {"task_id": "Tusky/711", "ground_truth": "    addPref(pref)\n    return pref\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\settings\\SettingsDSL.kt"}}
{"prompt": "\n import androidx.preference.PreferenceScreen\nimport androidx.preference.PreferenceFragmentCompat\nimport androidx.preference.Preference\nimport android.content.Context\ninline fun PreferenceFragmentCompat.makePreferenceScreen(\n    builder: PreferenceParent.() -> Unit\n): PreferenceScreen {\n    val context = requireContext()\n    val screen = preferenceManager.createPreferenceScreen(context)\n    val parent = PreferenceParent(context) { screen.addPreference(it) }\n    // For some functions (like dependencies) it's much easier for us if we attach screen first", "choices": [{"text": "    parent.builder()\n    return screen\n}\n\ninline fun PreferenceFragmentCompat.makePreference(\n    builder: Preference.() -> Unit\n): Preference {\n    val context = requireContext()\n    val preference = Preference(context)\n    preference.builder()\n    return preference\n}\n\ninline fun PreferenceFragmentCompat.makePreferenceCategory(\n    builder: PreferenceCategory.() -> Unit\n): PreferenceCategory {\n    val context = requireContext()\n    val category = PreferenceCategory(context)\n    category.builder()\n    return category\n}\n\ninline fun PreferenceFragmentCompat.makePreferenceSwitch(\n    builder: SwitchPreferenceCompat"}], "metadata": {"task_id": "Tusky/713", "ground_truth": "    // and change it later\n    preferenceScreen = screen\n    builder(parent)\n    return screen\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\settings\\SettingsDSL.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.components.timeline.viewmodel.TimelineViewModel.Kind\nimport android.content.Intent\nimport android.content.Context\nfun newListIntent(context: Context, listId: String, listTitle: String) =\n            Intent(context, StatusListActivity::class.java).apply {\n                putExtra(EXTRA_KIND, Kind.LIST.name)", "choices": [{"text": "                putExtra(EXTRA_LIST_ID, listId)\n                putExtra(EXTRA_LIST_TITLE, listTitle)\n            }\n\nfun newTimelineIntent(context: Context, timelineId: String, timelineTitle: String) =\n            Intent(context, StatusListActivity::class.java).apply {\n                putExtra(EXTRA_KIND, Kind.TIMELINE.name)\n                putExtra(EXTRA_TIMELINE_ID, timelineId)\n                putExtra(EXTRA_TIMELINE_TITLE, timelineTitle)\n            }\n\nfun newSearchIntent(context: Context, query: String) =\n            Intent"}], "metadata": {"task_id": "Tusky/718", "ground_truth": "                putExtra(EXTRA_LIST_ID, listId)\n                putExtra(EXTRA_LIST_TITLE, listTitle)\n            }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\StatusListActivity.kt"}}
{"prompt": "\n import android.content.Intent\nimport android.content.Context\n @JvmStatic\n        fun newHashtagIntent(context: Context, hashtag: String) =\n            Intent(context, StatusListActivity::class.java).apply {", "choices": [{"text": "                putExtra(EXTRA_HASHTAG, hashtag)\n            }\n"}], "metadata": {"task_id": "Tusky/719", "ground_truth": "                putExtra(EXTRA_KIND, Kind.TAG.name)\n                putExtra(EXTRA_HASHTAG, hashtag)\n            }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\StatusListActivity.kt"}}
{"prompt": "\n override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (javaClass != other?.javaClass) return false\n", "choices": [{"text": "\n override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (javaClass!= other?.javaClass) return false\n\n//        if (id!= other.id) return false\n//        if (name!= other.name) return false\n//        if (description!= other.description) return false\n//        if (price!= other.price) return false\n//        if (image!= other.image) return false\n//        if (category!= other.category) return false\n//        if (status!= other.status) return false\n//        if (created_at!= other.created_at) return false\n//        if (updated_at!= other.updated_at) return false\n\n        return true"}], "metadata": {"task_id": "Tusky/721", "ground_truth": "        other as TabData\n\n        if (id != other.id) return false\n        return arguments == other.arguments\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\TabData.kt"}}
{"prompt": "\n fun defaultTabs(): List<TabData> {\n    return listOf(\n        createTabDataFromId(HOME),", "choices": [{"text": "        createTabDataFromId(SEARCH),\n        createTabDataFromId(FAVORITES),\n        createTabDataFromId(SETTINGS)\n    )\n}\n\nfun createTabDataFromId(id: Int): TabData {\n    return TabData(\n        id = id,\n        icon = getTabIcon(id),\n        text = getTabText(id)\n    )\n}\n\nfun getTabIcon(id: Int): ImageResource {\n    return when (id) {\n        HOME -> R.drawable.ic_home\n        SEARCH -> R.drawable.ic_search\n        FAVORITES"}], "metadata": {"task_id": "Tusky/722", "ground_truth": "        createTabDataFromId(NOTIFICATIONS),\n        createTabDataFromId(LOCAL),\n        createTabDataFromId(DIRECT)\n    )\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\TabData.kt"}}
{"prompt": "\n override fun onTabRemoved(position: Int) {\n        currentTabs.removeAt(position)\n        currentTabsAdapter.notifyItemRemoved(position)", "choices": [{"text": "    }\n\n    override fun onTabReselected(position: Int) {\n        currentTabs.get(position).onTabReselected()\n    }\n\n    override fun onTabSelected(position: Int) {\n        currentTabs.get(position).onTabSelected()\n    }\n\n    override fun onTabUnselected(position: Int) {\n        currentTabs.get(position).onTabUnselected()\n    }\n\n    override fun onTabCreated(tab: Tab, position: Int) {\n        currentTabs.add(position, tab)\n        currentTabsAdapter.notifyItemInserted(position)\n    }\n\n    override fun onTab"}], "metadata": {"task_id": "Tusky/724", "ground_truth": "        updateAvailableTabs()\n        saveTabs()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\TabPreferenceActivity.kt"}}
{"prompt": "\n override fun onChipClicked(tab: TabData, tabPosition: Int, chipPosition: Int) {\n        val newArguments = tab.arguments.filterIndexed { i, _ -> i != chipPosition }\n        val newTab = tab.copy(arguments = newArguments)", "choices": [{"text": "\n override fun onChipClicked(tab: TabData, tabPosition: Int, chipPosition: Int) {\n        val newArguments = tab.arguments.filterIndexed { i, _ -> i!= chipPosition }\n        val newTab = tab.copy(arguments = newArguments)\n        val newTabs = tabs.filterIndexed { i, _ -> i!= tabPosition } + newTab\n        val newTabPosition = newTabs.indexOf(newTab)\n        val newTabData = newTabs.mapIndexed { i, tab ->\n            tab.copy(\n                arguments = tab.arguments.mapIndexed { j, argument ->\n                    if (j == chipPosition) {\n                        argument.copy(\n                            value = argument.value.replace(\n                                tab.arguments[chipPosition].value,\n                                newTab.arguments[0].value\n                            )\n                        )\n                    } else {\n                        argument\n                    }\n                }\n           "}], "metadata": {"task_id": "Tusky/725", "ground_truth": "        currentTabs[tabPosition] = newTab\n        saveTabs()\n\n        currentTabsAdapter.notifyItemChanged(tabPosition)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\TabPreferenceActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.components.account.list.ListSelectionFragment\nprivate fun showSelectListDialog() {\n        listSelectDialog = ListSelectionFragment.newInstance(null)\n        listSelectDialog?.show(supportFragmentManager, null)", "choices": [{"text": "    }\n"}], "metadata": {"task_id": "Tusky/726", "ground_truth": "\n        return\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\TabPreferenceActivity.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport androidx.lifecycle.lifecycleScope\nprivate fun saveTabs() {\n        accountManager.activeAccount?.let {\n            lifecycleScope.launch(Dispatchers.IO) {\n                it.tabPreferences = currentTabs", "choices": [{"text": "                it.save()\n            }\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/729", "ground_truth": "                accountManager.saveAccount(it)\n            }\n        }\n        tabsChanged = true\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\TabPreferenceActivity.kt"}}
{"prompt": "\n import java.util.TimeZone\nimport java.util.Date\nimport java.util.Calendar\nprivate fun isSameYear(dateOne: Date, dateTwo: Date, timeZone1: TimeZone): Boolean {\n            val calendarOne = Calendar.getInstance(timeZone1).apply { time = dateOne }\n            val calendarTwo = Calendar.getInstance(timeZone1).apply { time = dateTwo }", "choices": [{"text": "            return calendarOne.get(Calendar.YEAR) == calendarTwo.get(Calendar.YEAR)\n        }\n\n"}], "metadata": {"task_id": "Tusky/746", "ground_truth": "\n            return calendarOne.get(Calendar.YEAR) == calendarTwo.get(Calendar.YEAR)\n        }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\AbsoluteTimeFormatter.kt"}}
{"prompt": "\n import kotlinx.coroutines.suspendCancellableCoroutine\nimport kotlinx.coroutines.ExperimentalCoroutinesApi\nimport androidx.appcompat.app.AlertDialog\nimport android.content.DialogInterface\n\n@OptIn(ExperimentalCoroutinesApi::class)\nsuspend fun AlertDialog.await(\n    positiveText: String,\n    negativeText: String? = null,\n    neutralText: String? = null\n) = suspendCancellableCoroutine<Int> { cont ->\n    val listener = DialogInterface.OnClickListener { _, which ->\n        cont.resume(which) { dismiss() }\n    }\n\n    setButton(AlertDialog.BUTTON_POSITIVE, positiveText, listener)\n    negativeText?.let { setButton(AlertDialog.BUTTON_NEGATIVE, it, listener) }\n    neutralText?.let { setButton(AlertDialog.BUTTON_NEUTRAL, it, listener) }", "choices": [{"text": "\n    show()\n    cont.invokeOnCancellation { dismiss() }\n}\n<file_sep>/app/src/main/java/com/example/android/codelabs/paging/ui/main/MainFragment.kt\n/*\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless"}], "metadata": {"task_id": "Tusky/747", "ground_truth": "\n    setOnCancelListener { cont.cancel() }\n    cont.invokeOnCancellation { dismiss() }\n    show()\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\AlertDialogExtensions.kt"}}
{"prompt": "\n import androidx.appcompat.app.AlertDialog\nimport androidx.annotation.StringRes\nsuspend fun AlertDialog.await(\n    @StringRes positiveTextResource: Int,\n    @StringRes negativeTextResource: Int? = null,\n    @StringRes neutralTextResource: Int? = null\n) = await(\n    context.getString(positiveTextResource),", "choices": [{"text": "    context.getString(negativeTextResource),\n    context.getString(neutralTextResource)\n)\n\nsuspend fun AlertDialog.await(\n    positiveText: String,\n    negativeText: String? = null,\n    neutralText: String? = null\n) = await(\n    positiveText,\n    negativeText,\n    neutralText\n)\n\nsuspend fun AlertDialog.await(\n    positiveText: String,\n    negativeText: String? = null,\n    neutralText: String? = null,\n    positiveAction: () -> Unit,\n    negativeAction: () -> Unit,\n    neutralAction: () -> Unit\n) = await"}], "metadata": {"task_id": "Tusky/748", "ground_truth": "    negativeTextResource?.let { context.getString(it) },\n    neutralTextResource?.let { context.getString(it) }\n)", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\AlertDialogExtensions.kt"}}
{"prompt": "\n import kotlin.math.roundToInt\nprivate fun formatDuration(durationInSeconds: Double): String {\n    val seconds = durationInSeconds.roundToInt() % 60\n    val minutes = durationInSeconds.toInt() % 3600 / 60", "choices": [{"text": "    val hours = durationInSeconds.toInt() / 3600\n    return String.format(\n        Locale.getDefault(),\n        \"%02d:%02d:%02d\",\n        hours,\n        minutes,\n        seconds\n    )\n}\n\n"}], "metadata": {"task_id": "Tusky/750", "ground_truth": "    val hours = durationInSeconds.toInt() / 3600\n    return \"%d:%02d:%02d\".format(hours, minutes, seconds)\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\AttachmentHelper.kt"}}
{"prompt": "\n private fun decode83(str: String, from: Int = 0, to: Int = str.length): Int {\n        var result = 0\n        for (i in from until to) {\n            val index = charMap[str[i]] ?: -1\n            if (index != -1) {", "choices": [{"text": "\n private fun decode83(str: String, from: Int = 0, to: Int = str.length): Int {\n        var result = 0\n        for (i in from until to) {\n            val index = charMap[str[i]]?: -1\n            if (index!= -1) {\n                result = result * 83 + index\n            } else {\n                return -1\n            }\n        }\n        return result\n    }\n}\n<file_sep>/src/main/kotlin/com/github/hcsp/algorithm/IsPrime.kt\npackage com.github.hcsp.algorithm\n\n// \u5224\u65ad\u4e00\u4e2a\u6570\u5b57\u662f\u5426\u662f\u7d20\u6570\n// \u7d20\u6570\u6307\u7684\u662f\u53ea\u80fd\u88ab1\u548c\u81ea\u8eab\u6574\u9664\u7684\u6b63\u6574\u6570\n// \u4f8b\u5982\uff0c1\uff0c2\uff0c3\uff0c5\uff0c6\uff0c7\uff0c8\uff0c9\uff0c10\uff0c11\uff0c12\uff0c13\uff0c14\uff0c15\uff0c"}], "metadata": {"task_id": "Tusky/752", "ground_truth": "                result = result * 83 + index\n            }\n        }\n        return result\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\BlurHashDecoder.kt"}}
{"prompt": "\n private fun decodeDc(colorEnc: Int): FloatArray {\n        val r = colorEnc shr 16\n        val g = (colorEnc shr 8) and 255", "choices": [{"text": "        val b = colorEnc and 255\n        val a = (colorEnc shr 24) and 255\n        return floatArrayOf(r / 255f, g / 255f, b / 255f, a / 255f)\n    }\n\n    private fun decodeColor(colorEnc: Int): Int {\n        val r = colorEnc shr 16\n        val g = (colorEnc shr 8) and 255\n        val b = colorEnc and 255\n        val a = (colorEnc shr 24"}], "metadata": {"task_id": "Tusky/753", "ground_truth": "        val b = colorEnc and 255\n        return floatArrayOf(srgbToLinear(r), srgbToLinear(g), srgbToLinear(b))\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\BlurHashDecoder.kt"}}
{"prompt": "\n private fun srgbToLinear(colorEnc: Int): Float {\n        val v = colorEnc / 255f\n        return if (v <= 0.04045f) {", "choices": [{"text": "            v / 12.92f\n        } else {\n            (v + 0.055f) / 1.055f\n        }\n    }\n}\n<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.content.Intent\nimport android.graphics.Bitmap\nimport android.graphics.BitmapFactory\nimport android.graphics.Color\nimport android.graphics.drawable.BitmapDrawable\nimport android.net.Uri\nimport android.os.Bundle\nimport android.provider"}], "metadata": {"task_id": "Tusky/754", "ground_truth": "            (v / 12.92f)\n        } else {\n            ((v + 0.055f) / 1.055f).pow(2.4f)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\BlurHashDecoder.kt"}}
{"prompt": "\n override fun equals(other: Any?): Boolean {\n        if (other is CompositeWithOpaqueBackground) {\n            return other.backgroundColor == backgroundColor", "choices": [{"text": "        }\n        return false\n    }\n\n    override fun hashCode(): Int {\n        return backgroundColor.hashCode()\n    }\n}\n<file_sep>/compose/ui/ui/src/commonMain/kotlin/androidx/compose/ui/focus/FocusRequester.kt\n/*\n * Copyright 2020 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/"}], "metadata": {"task_id": "Tusky/757", "ground_truth": "        }\n        return false\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\CompositeWithOpaqueBackground.kt"}}
{"prompt": "\n private fun secureRandomBytes(len: Int): ByteArray {\n        val ret = ByteArray(len)", "choices": [{"text": "        SecureRandom().nextBytes(ret)\n        return ret\n    }\n}\n\n"}], "metadata": {"task_id": "Tusky/759", "ground_truth": "        SecureRandom.getInstance(\"SHA1PRNG\").nextBytes(ret)\n        return ret\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\CryptoUtil.kt"}}
{"prompt": "\n import android.graphics.Paint\noverride fun getSize(\n        paint: Paint,\n        text: CharSequence,\n        start: Int,\n        end: Int,\n        fm: Paint.FontMetricsInt?\n    ): Int {\n        if (fm != null) {\n            /* update FontMetricsInt or otherwise span does not get drawn when\n             * it covers the whole text */\n            val metrics = paint.fontMetricsInt\n            fm.top = metrics.top\n            fm.ascent = metrics.ascent\n            fm.descent = metrics.descent", "choices": [{"text": "\n import android.graphics.Paint\noverride fun getSize(\n        paint: Paint,\n        text: CharSequence,\n        start: Int,\n        end: Int,\n        fm: Paint.FontMetricsInt?\n    ): Int {\n        if (fm!= null) {\n            /* update FontMetricsInt or otherwise span does not get drawn when\n             * it covers the whole text */\n            val metrics = paint.fontMetricsInt\n            fm.top = metrics.top\n            fm.ascent = metrics.ascent\n            fm.descent = metrics.descent\n            fm.bottom = metrics.bottom\n        }\n        return super.getSize(paint, text, start, end, fm)\n    }\n}\n\n"}], "metadata": {"task_id": "Tusky/760", "ground_truth": "            fm.bottom = metrics.bottom\n        }\n\n        return (paint.textSize * 1.2).toInt()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\CustomEmojiHelper.kt"}}
{"prompt": "\n inline fun <N> map(crossinline mapper: (R) -> N): Either<L, N> {\n        return if (this.isLeft()) {", "choices": [{"text": "            this.left()\n        } else {\n            this.right().map(mapper)\n        }\n    }\n\n    inline fun <N> flatMap(crossinline mapper: (R) -> Either<L, N>): Either<L, N> {\n        return if (this.isLeft()) {\n            this.left()\n        } else {\n            this.right().flatMap(mapper)\n        }\n    }\n\n    inline fun <N> mapLeft(crossinline mapper: (L) -> N): Either<N, R> {\n        return if (this.isLeft()) {\n            this.left().mapLeft("}], "metadata": {"task_id": "Tusky/761", "ground_truth": "            Left(this.asLeft())\n        } else {\n            Right(mapper(this.asRight()))\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\Either.kt"}}
{"prompt": "\n override suspend fun load(params: LoadParams<Int>): LoadResult<Int, T> = LoadResult.Page(\n        emptyList(),", "choices": [{"text": "        LoadParams.KeyedLoadParams(params.key, params.key + 10)\n)\n\noverride suspend fun loadAfter(params: LoadParams<Int>, state: PagingState<Int, T>): LoadResult<Int, T> = LoadResult.Page(\n        emptyList(),\n        LoadParams.KeyedLoadParams(params.key + 10, params.key + 20)\n)\n\noverride suspend fun loadBefore(params: LoadParams<Int>, state: PagingState<Int, T>): LoadResult<Int, T> = LoadResult."}], "metadata": {"task_id": "Tusky/762", "ground_truth": "        null,\n        null\n    )", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\EmptyPagingSource.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.flow\nimport kotlinx.coroutines.flow.Flow\nimport kotlin.time.TimeSource\nimport kotlin.time.TimeMark\nimport kotlin.time.Duration\nfun <T> Flow<T>.throttleFirst(timeout: Duration, timeSource: TimeSource = TimeSource.Monotonic) =\n    flow {\n        var marker: TimeMark? = null\n        collect {\n            if (marker == null || marker!!.elapsedNow() >= timeout) {", "choices": [{"text": "                marker = timeSource.markNow()\n                emit(it)\n            }\n        }\n    }\n\nfun <T> Flow<T>.throttleFirst(timeout: Long, timeSource: TimeSource = TimeSource.Monotonic) =\n    flow {\n        var marker: TimeMark? = null\n        collect {\n            if (marker == null || marker!!.elapsedNow() >= timeout) {\n                marker = timeSource.markNow()\n                emit(it)\n            }\n        }\n    }\n\nfun <T> Flow<T>.throttleFirst(timeout: Int, timeSource: TimeSource = TimeSource.Mon"}], "metadata": {"task_id": "Tusky/763", "ground_truth": "                emit(it)\n                marker = timeSource.markNow()\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\FlowExtensions.kt"}}
{"prompt": "\n fun calculateScaling(\n        viewWidth: Float,\n        viewHeight: Float,\n        imageWidth: Float,\n        imageHeight: Float\n    ): Float {\n        return if (isVerticalCrop(viewWidth, viewHeight, imageWidth, imageHeight)) {", "choices": [{"text": "            viewWidth / imageWidth\n        } else {\n            viewHeight / imageHeight\n        }\n    }\n\n    private fun isVerticalCrop(\n        viewWidth: Float,\n        viewHeight: Float,\n        imageWidth: Float,\n        imageHeight: Float\n    ): Boolean {\n        return viewWidth / viewHeight > imageWidth / imageHeight\n    }\n}<file_sep>/app/src/main/java/com/example/imageviewer/ui/main/MainViewModel.kt\npackage com.example.imageviewer.ui.main\n\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx."}], "metadata": {"task_id": "Tusky/764", "ground_truth": "            viewWidth / imageWidth\n        } else { // horizontal crop:\n            viewHeight / imageHeight\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\FocalPointUtil.kt"}}
{"prompt": "\n fun isVerticalCrop(\n        viewWidth: Float,\n        viewHeight: Float,\n        imageWidth: Float,\n        imageHeight: Float\n    ): Boolean {\n        val viewRatio = viewWidth / viewHeight\n        val imageRatio = imageWidth / imageHeight", "choices": [{"text": "        return viewRatio < imageRatio\n    }\n\n"}], "metadata": {"task_id": "Tusky/765", "ground_truth": "\n        return viewRatio > imageRatio\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\FocalPointUtil.kt"}}
{"prompt": "\n private fun findEndOfQuotedString(line: String, start: Int): Int {\n            var i = start\n            while (i < line.length) {\n                val c = line[i]\n                if (c == '\\\\') {\n                    i += 1\n                } else if (c == '\"') {\n                    return i", "choices": [{"text": "                }\n                i += 1\n            }\n            return -1\n        }\n\n"}], "metadata": {"task_id": "Tusky/766", "ground_truth": "                }\n                i++\n            }\n            return -1\n        }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\HttpHeaderLink.kt"}}
{"prompt": "\n import com.mikepenz.iconics.utils.sizePx\nimport com.mikepenz.iconics.typeface.library.googlematerial.GoogleMaterial\nimport com.mikepenz.iconics.IconicsDrawable\nimport androidx.annotation.Px\nimport android.content.Context\nfun makeIcon(context: Context, icon: GoogleMaterial.Icon, @Px iconSize: Int): IconicsDrawable {\n    return IconicsDrawable(context, icon).apply {\n        sizePx = iconSize", "choices": [{"text": "    }\n}\n\nfun makeIcon(context: Context, icon: GoogleMaterial.Icon, @Px iconSize: Int, color: Int): IconicsDrawable {\n    return IconicsDrawable(context, icon).apply {\n        sizePx = iconSize\n        colorInt = color\n    }\n}\n\nfun makeIcon(context: Context, icon: GoogleMaterial.Icon, @Px iconSize: Int, color: Int, @Px iconPadding: Int): IconicsDrawable {\n    return IconicsDrawable(context, icon).apply {\n        sizePx = iconSize\n        colorInt = color\n        paddingDp"}], "metadata": {"task_id": "Tusky/768", "ground_truth": "        colorInt = MaterialColors.getColor(context, R.attr.iconColor, Color.BLACK)\n    }\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\IconUtils.kt"}}
{"prompt": "\n import java.io.Closeable\nfun Closeable?.closeQuietly() {\n    try {", "choices": [{"text": "        this?.close()\n    } catch (e: Exception) {\n        // ignore\n    }\n}\n\n"}], "metadata": {"task_id": "Tusky/769", "ground_truth": "        this?.close()\n    } catch (e: IOException) {\n        // intentionally unhandled\n    }\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\IOUtils.kt"}}
{"prompt": "\n import androidx.core.net.toUri\nimport android.net.Uri\nfun getDomain(urlString: String?): String {\n    val host = urlString?.toUri()?.host\n    return when {", "choices": [{"text": "        host == null -> \"\"\n        host.startsWith(\"www.\") -> host.substring(4)\n        else -> host\n    }\n}\n\n"}], "metadata": {"task_id": "Tusky/770", "ground_truth": "        host == null -> \"\"\n        host.startsWith(\"www.\") -> host.substring(4)\n        else -> host\n    }\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\LinkHelper.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.HashTag\nimport androidx.annotation.VisibleForTesting\n}\n\n@VisibleForTesting\nfun getTagName(text: CharSequence, tags: List<HashTag>?): String? {\n    val scrapedName = normalizeToASCII(text.subSequence(1, text.length)).toString()\n    return when (tags) {", "choices": [{"text": "        null -> scrapedName\n        else -> tags.find { it.name == scrapedName }?.name\n    }\n}\n\n@VisibleForTesting\nfun getTagId(text: CharSequence, tags: List<HashTag>?): Long? {\n    val scrapedName = normalizeToASCII(text.subSequence(1, text.length)).toString()\n    return when (tags) {\n        null -> null\n        else -> tags.find { it.name == scrapedName }?.id\n    }\n}\n\n@VisibleForTesting\nfun getTagId(text: CharSequence, tags: List<Hash"}], "metadata": {"task_id": "Tusky/772", "ground_truth": "        null -> scrapedName\n        else -> tags.firstOrNull { it.name.equals(scrapedName, true) }?.name\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\LinkHelper.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.interfaces.LinkListener\nimport com.keylesspalace.tusky.entity.HashTag\nimport com.keylesspalace.tusky.R\nimport android.text.style.URLSpan\nimport android.text.style.ClickableSpan\n\n\nprivate fun getCustomSpanForTag(\n    text: CharSequence,\n    tags: List<HashTag>?,\n    span: URLSpan,\n    listener: LinkListener\n): ClickableSpan? {\n    return getTagName(text, tags)?.let {\n        object : NoUnderlineURLSpan(span.url) {", "choices": [{"text": "            override fun onClick(widget: View) {\n                listener.onLinkClicked(it)\n            }\n        }\n    }\n}\n\nprivate fun getTagName(text: CharSequence, tags: List<HashTag>?): String? {\n    return tags?.firstOrNull {\n        text.contains(it.name)\n    }?.name\n}\n\nprivate fun getCustomSpanForMention(\n    text: CharSequence,\n    mentions: List<Mention>,\n    span: URLSpan,\n    listener: LinkListener\n): ClickableSpan? {\n    return getMentionName(text, mentions)?.let {\n        object : NoUnderline"}], "metadata": {"task_id": "Tusky/773", "ground_truth": "            override fun onClick(view: View) = listener.onViewTag(it)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\LinkHelper.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.interfaces.LinkListener\nimport com.keylesspalace.tusky.entity.Status.Mention\nimport android.text.style.ClickableSpan\n\n\nprivate fun getCustomSpanForMentionUrl(\n    url: String,\n    mentionId: String,\n    listener: LinkListener\n): ClickableSpan {", "choices": [{"text": "    return object : ClickableSpan() {\n        override fun onClick(widget: View) {\n            listener.onMentionUrlClicked(url, mentionId)\n        }\n\n        override fun updateDrawState(ds: TextPaint) {\n            super.updateDrawState(ds)\n            ds.isUnderlineText = false\n        }\n    }\n}\n\nfun String.getCustomMentionSpans(\n    mentionId: String,\n    listener: LinkListener\n): SpannableString {\n    val spannableString = SpannableString(this)\n    val matcher = Pattern.compile(MENTION_URL_PATTERN).matcher"}], "metadata": {"task_id": "Tusky/775", "ground_truth": "    return object : MentionSpan(url) {\n        override fun onClick(view: View) = listener.onViewAccount(mentionId)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\LinkHelper.kt"}}
{"prompt": "\n import androidx.preference.PreferenceManager\nimport androidx.core.net.toUri\nimport android.net.Uri\nimport android.content.Context\n/\nfun Context.openLink(url: String) {\n    val uri = url.toUri().normalizeScheme()\n    val useCustomTabs = PreferenceManager.getDefaultSharedPreferences(\n        this\n    ).getBoolean(\"customTabs\", false)\n", "choices": [{"text": "/    val useCustomTabs = true\n    if (useCustomTabs) {\n        val intent = Intent(Intent.ACTION_VIEW)\n        intent.data = uri\n        intent.setPackage(\"com.android.chrome\")\n        if (intent.resolveActivity(packageManager)!= null) {\n            startActivity(intent)\n        } else {\n            Toast.makeText(this, \"No browser found\", Toast.LENGTH_SHORT).show()\n        }\n    } else {\n        val intent = Intent(Intent.ACTION_VIEW)\n        intent.data = uri\n        if (intent.resolveActivity(packageManager)!= null)"}], "metadata": {"task_id": "Tusky/777", "ground_truth": "    if (useCustomTabs) {\n        openLinkInCustomTab(uri, this)\n    } else {\n        openLinkInBrowser(uri, this)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\LinkHelper.kt"}}
{"prompt": "\n import android.view.View\nprivate fun forceFocus(host: View) {\n        interrupt()\n        host.post {", "choices": [{"text": "            host.requestFocus()\n            host.findFocus()\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/780", "ground_truth": "            host.sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUSED)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\ListStatusAccessibilityDelegate.kt"}}
{"prompt": "\n import java.util.ArrayList\nfun <T> removeDuplicates(list: List<T>): ArrayList<T> {", "choices": [{"text": "    val newList = ArrayList<T>()\n    for (item in list) {\n        if (!newList.contains(item)) {\n            newList.add(item)\n        }\n    }\n    return newList\n}\n\n"}], "metadata": {"task_id": "Tusky/781", "ground_truth": "    val set = LinkedHashSet(list)\n    return ArrayList(set)\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\ListUtils.kt"}}
{"prompt": "\n inline fun <T> List<T>.withoutFirstWhich(predicate: (T) -> Boolean): List<T> {\n    val newList = toMutableList()\n    val index = newList.indexOfFirst(predicate)", "choices": [{"text": "    if (index!= -1) {\n        newList.removeAt(index)\n    }\n    return newList\n}\n\ninline fun <T> List<T>.withoutLastWhich(predicate: (T) -> Boolean): List<T> {\n    val newList = toMutableList()\n    val index = newList.indexOfLast(predicate)\n    if (index!= -1) {\n        newList.removeAt(index)\n    }\n    return newList\n}\n\ninline fun <T> List<T>.withoutFirst(element: T): List<T> {\n    val newList"}], "metadata": {"task_id": "Tusky/782", "ground_truth": "    if (index != -1) {\n        newList.removeAt(index)\n    }\n    return newList\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\ListUtils.kt"}}
{"prompt": "\n inline fun <T> List<T>.replacedFirstWhich(replacement: T, predicate: (T) -> Boolean): List<T> {\n    val newList = toMutableList()\n    val index = newList.indexOfFirst(predicate)", "choices": [{"text": "    if (index!= -1) {\n        newList[index] = replacement\n    }\n    return newList\n}\n\ninline fun <T> List<T>.replacedFirst(replacement: T): List<T> {\n    return replacedFirstWhich(replacement) { true }\n}\n\ninline fun <T> List<T>.replacedFirstWhich(replacement: T, predicate: (T) -> Boolean): List<T> {\n    val newList = toMutableList()\n    val index = newList.indexOfFirst(predicate)\n    if (index!= -1) {\n        newList"}], "metadata": {"task_id": "Tusky/783", "ground_truth": "    if (index != -1) {\n        newList[index] = replacement\n    }\n    return newList\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\ListUtils.kt"}}
{"prompt": "\n import java.util.Locale\nimport android.content.Context\nfun Locale.getTuskyDisplayName(context: Context): String {\n    return context.getString(", "choices": [{"text": "        when (this.language) {\n            \"en\" -> R.string.english\n            \"fr\" -> R.string.french\n            \"es\" -> R.string.spanish\n            \"pt\" -> R.string.portuguese\n            \"de\" -> R.string.german\n            \"it\" -> R.string.italian\n            \"ru\" -> R.string.russian\n            \"ar\" -> R.string.arabic\n            \"zh\" -> R.string.chinese\n            \"ja\" -> R.string.japanese\n            \"ko\" -> R.string.k"}], "metadata": {"task_id": "Tusky/784", "ground_truth": "        R.string.language_display_name_format,\n        displayLanguage,\n        getDisplayLanguage(this)\n    )\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\LocaleExtensions.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.os.Build\noverride fun putString(key: String?, value: String?) {\n        // if we are on Android < 13 we have to save the selected language so we can apply it at appstart\n        // on Android 13+ the system handles it for us\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.TIRAMISU) {\n            prefs.edit()", "choices": [{"text": "               .putString(key, value)\n               .apply()\n        } else {\n            val locale = Locale(value)\n            Locale.setDefault(locale)\n            val config = Configuration()\n            config.setLocale(locale)\n            context.createConfigurationContext(config)\n        }\n    }\n\noverride fun getString(key: String?): String? {\n        // if we are on Android < 13 we have to save the selected language so we can apply it at appstart\n        // on Android 13+ the system handles it for us\n        if (Build.VERSION.SDK_INT < Build.VERSION_CODES."}], "metadata": {"task_id": "Tusky/785", "ground_truth": "                .putString(PrefKeys.LANGUAGE, value)\n                .apply()\n        }\n        applyLanguageToApp(value)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\LocaleManager.kt"}}
{"prompt": "\n import java.util.Locale\nimport androidx.core.os.LocaleListCompat\nprivate fun LocaleListCompat.toList(): List<Locale> {\n    val list = mutableListOf<Locale>()", "choices": [{"text": "    for (i in 0 until this.size()) {\n        list.add(this.get(i))\n    }\n    return list\n}\n\nfun Context.getLocales(): List<Locale> {\n    val localeList = LocaleListCompat.getAdjustedDefault()\n    return localeList.toList()\n}\n\nfun Context.getLocalesString(): String {\n    val localeList = LocaleListCompat.getAdjustedDefault()\n    return localeList.toList().joinToString(separator = \",\") { it.toString() }\n}\n\nfun Context.setLocale(locale: Locale) {\n   "}], "metadata": {"task_id": "Tusky/787", "ground_truth": "    for (index in 0 until this.size()) {\n        this[index]?.let { list.add(it) }\n    }\n    return list\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\LocaleUtils.kt"}}
{"prompt": "\n import android.provider.OpenableColumns\nimport android.net.Uri\nimport android.database.Cursor\nimport android.content.ContentResolver\nfun getMediaSize(contentResolver: ContentResolver, uri: Uri?): Long {\n    if (uri == null) {\n        return MEDIA_SIZE_UNKNOWN\n    }\n\n    var mediaSize = MEDIA_SIZE_UNKNOWN\n    val cursor: Cursor?\n    try {\n        cursor = contentResolver.query(uri, null, null, null, null)\n    } catch (e: SecurityException) {\n        return MEDIA_SIZE_UNKNOWN\n    }\n    if (cursor != null) {\n        val sizeIndex = cursor.getColumnIndex(OpenableColumns.SIZE)\n        cursor.moveToFirst()", "choices": [{"text": "\n import android.provider.OpenableColumns\nimport android.net.Uri\nimport android.database.Cursor\nimport android.content.ContentResolver\nfun getMediaSize(contentResolver: ContentResolver, uri: Uri?): Long {\n    if (uri == null) {\n        return MEDIA_SIZE_UNKNOWN\n    }\n\n    var mediaSize = MEDIA_SIZE_UNKNOWN\n    val cursor: Cursor?\n    try {\n        cursor = contentResolver.query(uri, null, null, null, null)\n    } catch (e: SecurityException) {\n        return MEDIA_SIZE_UNKNOWN\n    }\n    if (cursor!= null) {\n        val sizeIndex = cursor.getColumnIndex(OpenableColumns.SIZE)\n        cursor.moveToFirst()\n        mediaSize = cursor.getLong(sizeIndex)\n        cursor.close()\n    }\n    return mediaSize\n}\n\n"}], "metadata": {"task_id": "Tusky/790", "ground_truth": "        mediaSize = cursor.getLong(sizeIndex)\n        cursor.close()\n    }\n    return mediaSize\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\MediaUtils.kt"}}
{"prompt": "\n import java.io.InputStream\nimport java.io.FileNotFoundException\nimport java.io.File\nimport android.net.Uri\nimport android.graphics.BitmapFactory\nimport android.graphics.Bitmap\nimport android.content.ContentResolver\n\n@Throws(FileNotFoundException::class)\nfun getImageSquarePixels(contentResolver: ContentResolver, uri: Uri): Long {\n    val input = contentResolver.openInputStream(uri)\n\n    val options = BitmapFactory.Options()\n    options.inJustDecodeBounds = true\n    BitmapFactory.decodeStream(input, null, options)", "choices": [{"text": "    input.close()\n\n    return options.outWidth * options.outHeight\n}\n\nfun getImageSquarePixels(file: File): Long {\n    val options = BitmapFactory.Options()\n    options.inJustDecodeBounds = true\n    BitmapFactory.decodeFile(file.absolutePath, options)\n\n    return options.outWidth * options.outHeight\n}\n\nfun getImageSquarePixels(inputStream: InputStream): Long {\n    val options = BitmapFactory.Options()\n    options.inJustDecodeBounds = true\n    BitmapFactory.decodeStream(inputStream, null, options)\n\n    return options.outWidth * options"}], "metadata": {"task_id": "Tusky/791", "ground_truth": "\n    input.closeQuietly()\n\n    return (options.outWidth * options.outHeight).toLong()\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\MediaUtils.kt"}}
{"prompt": "\n import java.util.Date\nimport java.text.SimpleDateFormat\nimport java.io.File\nfun getTemporaryMediaFilename(extension: String): String {\n    return \"${MEDIA_TEMP_PREFIX}_${SimpleDateFormat(\n        \"yyyyMMdd_HHmmss\",", "choices": [{"text": "        Locale.US\n    ).format(Date())}.${extension}\"\n}\n\nfun getTemporaryMediaFile(extension: String): File {\n    val filename = getTemporaryMediaFilename(extension)\n    return File(getMediaDirectory(), filename)\n}\n\nfun getMediaDirectory(): File {\n    val mediaDir = File(Environment.getExternalStoragePublicDirectory(\n        Environment.DIRECTORY_PICTURES\n    ), \"MyCameraApp\")\n    if (!mediaDir.exists()) {\n        mediaDir.mkdirs()\n    }\n    return mediaDir\n}\n\nfun getMediaFile(filename: String): File {"}], "metadata": {"task_id": "Tusky/792", "ground_truth": "        Locale.US\n    ).format(Date())}.$extension\"\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\MediaUtils.kt"}}
{"prompt": "\n import org.json.JSONArray\nimport com.keylesspalace.tusky.entity.Notification\nfun serialize(data: Set<Notification.Type>?): String {\n    val array = JSONArray()", "choices": [{"text": "    data?.forEach {\n        array.put(it.name)\n    }\n    return array.toString()\n}\n\nfun deserialize(data: String): Set<Notification.Type> {\n    val array = JSONArray(data)\n    val set = HashSet<Notification.Type>()\n    for (i in 0 until array.length()) {\n        set.add(Notification.Type.valueOf(array.getString(i)))\n    }\n    return set\n}<file_sep>/app/src/main/java/com/keylesspalace/tusky/ui/activity/MainActivity.kt\npackage com."}], "metadata": {"task_id": "Tusky/793", "ground_truth": "    data?.forEach {\n        array.put(it.presentation)\n    }\n    return array.toString()\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\NotificationTypeConverter.kt"}}
{"prompt": "\n import org.json.JSONArray\nimport com.keylesspalace.tusky.entity.Notification\nfun deserialize(data: String?): Set<Notification.Type> {\n    val ret = HashSet<Notification.Type>()\n    data?.let {\n        val array = JSONArray(data)\n        for (i in 0 until array.length()) {\n            val item = array.getString(i)\n            val type = Notification.Type.byString(item)\n            if (type != Notification.Type.UNKNOWN) {\n                ret.add(type)", "choices": [{"text": "\n import org.json.JSONArray\nimport com.keylesspalace.tusky.entity.Notification\nfun deserialize(data: String?): Set<Notification.Type> {\n    val ret = HashSet<Notification.Type>()\n    data?.let {\n        val array = JSONArray(data)\n        for (i in 0 until array.length()) {\n            val item = array.getString(i)\n            val type = Notification.Type.byString(item)\n            if (type!= Notification.Type.UNKNOWN) {\n                ret.add(type)\n            }\n        }\n    }\n    return ret\n}\n\nfun serialize(types: Set<Notification.Type>): String {\n    val array = JSONArray()\n    for (type in types) {\n        array.put(type.string)\n    }\n    return array.toString()\n}\n<file_sep>/app/src/main/java/com/keylesspalace/tusky/ui/activity/MainActivity.kt\npackage com.keylesspalace.tusky.ui.activity\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.support.v"}], "metadata": {"task_id": "Tusky/794", "ground_truth": "            }\n        }\n    }\n    return ret\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\NotificationTypeConverter.kt"}}
{"prompt": "\n import android.text.TextPaint\noverride fun updateDrawState(ds: TextPaint) {", "choices": [{"text": " ds.isFakeBoldText = true\n ds.isUnderlineText = true\n}\n\n"}], "metadata": {"task_id": "Tusky/795", "ground_truth": "        super.updateDrawState(ds)\n        ds.isUnderlineText = false\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\NoUnderlineURLSpan.kt"}}
{"prompt": "\n override fun set(index: Int, element: T): T {", "choices": [{"text": " val old = this[index]\n this[index] = element\n return old\n }\n}\n\n"}], "metadata": {"task_id": "Tusky/797", "ground_truth": "        synced[index] = mapper.apply(element)\n        return main.set(index, element)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\PairedList.kt"}}
{"prompt": "\n override fun add(element: T): Boolean {", "choices": [{"text": " if (element == null) {\n throw NullPointerException()\n }\n if (element in this) {\n return false\n }\n if (size == capacity) {\n resize(capacity \\* 2)\n }\n elements[size++] = element\n return true\n }\n\n override fun remove(element: T): Boolean {\n if (element == null) {\n throw NullPointerException()\n }\n val index = indexOf(element)\n if (index == -1) {\n return false\n }\n removeAt(index)\n return true\n }\n\n override fun contains(element: T): Boolean {\n"}], "metadata": {"task_id": "Tusky/798", "ground_truth": "        synced.add(mapper.apply(element))\n        return main.add(element)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\PairedList.kt"}}
{"prompt": "\n override fun add(index: Int, element: T) {", "choices": [{"text": " if (index < 0 || index > size) {\n throw IndexOutOfBoundsException(\"Index: $index, Size: $size\")\n }\n if (size == elements.size) {\n elements.add(element)\n } else {\n elements.add(index, element)\n }\n size++\n }\n\n override fun addAll(index: Int, elements: Collection<T>): Boolean {\n if (index < 0 || index > size) {\n throw IndexOutOfBoundsException(\"Index: $index, Size: $size\")\n }\n if (elements.isEmpty()) {\n return false\n }"}], "metadata": {"task_id": "Tusky/799", "ground_truth": "        synced.add(index, mapper.apply(element))\n        main.add(index, element)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\PairedList.kt"}}
{"prompt": "\n override fun removeAt(index: Int): T {", "choices": [{"text": " val removed = this[index]\n this.removeAt(index)\n return removed\n }\n}\n\n"}], "metadata": {"task_id": "Tusky/800", "ground_truth": "        synced.removeAt(index)\n        return main.removeAt(index)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\PairedList.kt"}}
{"prompt": "\n import android.text.Spannable\nprivate fun <T> clearSpans(text: Spannable, spanClass: Class<T>) {\n    for (span in text.getSpans(0, text.length, spanClass)) {", "choices": [{"text": "        text.removeSpan(span)\n    }\n}\n\n"}], "metadata": {"task_id": "Tusky/804", "ground_truth": "        text.removeSpan(span)\n    }\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\SpanUtils.kt"}}
{"prompt": "\n private fun isWordCharacters(codePoint: Int): Boolean {\n    return (codePoint in 0x30..0x39) || // [0-9]\n        (codePoint in 0x41..0x5a) || // [A-Z]", "choices": [{"text": "        (codePoint in 0x61..0x7a) || // [a-z]\n        (codePoint == 0x2d) || // -\n        (codePoint == 0x5f) || // _\n        (codePoint == 0x20) || // space\n        (codePoint == 0x21) || //!\n        (codePoint == 0x22) || // \"\n        (codePoint == 0x23) || // #\n        (codePoint == 0x24) || // $\n        (codePoint == 0"}], "metadata": {"task_id": "Tusky/806", "ground_truth": "        (codePoint == 0x5f) || // _\n        (codePoint in 0x61..0x7a) // [a-z]\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\SpanUtils.kt"}}
{"prompt": "\n import org.xml.sax.XMLReader\nimport android.text.style.TypefaceSpan\nimport android.text.SpannableStringBuilder\nimport android.text.Spannable\nimport android.text.Editable\noverride fun handleTag(opening: Boolean, tag: String, output: Editable, xmlReader: XMLReader) {\n        when (tag) {\n            \"code\" -> {\n                if (opening) {\n                    start(output as SpannableStringBuilder, Code())\n                } else {\n                    end(\n                        output as SpannableStringBuilder,\n                        Code::class.java,\n                        TypefaceSpan(\"monospace\")", "choices": [{"text": "                    )\n                }\n            }\n            \"strong\" -> {\n                if (opening) {\n                    start(output as SpannableStringBuilder, Bold())\n                } else {\n                    end(\n                        output as SpannableStringBuilder,\n                        Bold::class.java,\n                        TypefaceSpan(\"sans-serif-bold\")\n                    )\n                }\n            }\n            \"em\" -> {\n                if (opening) {\n                    start(output as SpannableStringBuilder, Italic())\n                } else {\n                    end(\n                        output as SpannableStringBuilder,\n                        Italic::class.java,\n                        TypefaceSpan(\"sans-serif-"}], "metadata": {"task_id": "Tusky/809", "ground_truth": "                    )\n                }\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\StatusParsingHelper.kt"}}
{"prompt": "\n import android.text.Spanned\nprotected fun <T> getLast(text: Spanned, kind: Class<T>): Any? {", "choices": [{"text": "    val matcher = Pattern.compile(kind.simpleName).matcher(text)\n    if (matcher.find()) {\n        val last = matcher.group(1)\n        return last?.let {\n            try {\n                kind.getConstructor(String::class.java).newInstance(last)\n            } catch (e: Exception) {\n                null\n            }\n        }\n    }\n    return null\n}\n\n"}], "metadata": {"task_id": "Tusky/810", "ground_truth": "        val spans = text.getSpans(0, text.length, kind)\n        return spans?.get(spans.size - 1)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\StatusParsingHelper.kt"}}
{"prompt": "\n import android.text.SpannableStringBuilder\nimport android.text.Spannable\nprotected fun start(text: SpannableStringBuilder, mark: Any) {", "choices": [{"text": "    text.setSpan(mark, 0, 0, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)\n}\n\nprotected fun end(text: SpannableStringBuilder, mark: Any) {\n    text.setSpan(mark, text.length, text.length, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)\n}\n\nprotected fun start(text: SpannableStringBuilder, mark: Any, start: Int, end: Int) {\n    text.setSpan(mark, start, end, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)\n}"}], "metadata": {"task_id": "Tusky/811", "ground_truth": "        val len = text.length\n        text.setSpan(mark, len, len, Spannable.SPAN_MARK_MARK)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\StatusParsingHelper.kt"}}
{"prompt": "\n fun String.isLessThan(other: String): Boolean {\n    return when {", "choices": [{"text": "        this.length < other.length -> true\n        this.length > other.length -> false\n        else -> this < other\n    }\n}\n\nfun String.isGreaterThan(other: String): Boolean {\n    return when {\n        this.length < other.length -> false\n        this.length > other.length -> true\n        else -> this > other\n    }\n}\n\nfun String.isBetween(other: String, other2: String): Boolean {\n    return when {\n        this.length < other.length -> false\n        this.length > other2.length -> false\n        else -> this in other"}], "metadata": {"task_id": "Tusky/816", "ground_truth": "        this.length < other.length -> true\n        this.length > other.length -> false\n        else -> this < other\n    }\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\StringUtils.kt"}}
{"prompt": "\n import android.text.Spanned\nfun Spanned.trimTrailingWhitespace(): Spanned {\n    var i = length", "choices": [{"text": "- 1\n    while (i >= 0 && getCharAt(i).isWhitespace()) {\n        i--\n    }\n    return subSequence(0, i + 1)\n}\n\n"}], "metadata": {"task_id": "Tusky/817", "ground_truth": "    do {\n        i--\n    } while (i >= 0 && get(i).isWhitespace())\n    return subSequence(0, i + 1) as Spanned\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\StringUtils.kt"}}
{"prompt": "\n import androidx.core.content.res.use\nimport androidx.annotation.AttrRes\nimport android.content.Context\nfun getDimension(context: Context, @AttrRes attribute: Int): Int {\n    return context.obtainStyledAttributes(intArrayOf(attribute)).use { array ->", "choices": [{"text": "        array.getDimension(0, 0f).toInt()\n    }\n}\n\nfun getDimensionPixelSize(context: Context, @AttrRes attribute: Int): Int {\n    return context.obtainStyledAttributes(intArrayOf(attribute)).use { array ->\n        array.getDimensionPixelSize(0, 0)\n    }\n}\n\nfun getDimensionPixelOffset(context: Context, @AttrRes attribute: Int): Int {\n    return context.obtainStyledAttributes(intArrayOf(attribute)).use { array ->\n        array.getDimensionPixelOffset(0, 0)\n    }\n}"}], "metadata": {"task_id": "Tusky/818", "ground_truth": "        array.getDimensionPixelSize(0, -1)\n    }\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\ThemeUtils.kt"}}
{"prompt": "\n import com.google.android.material.color.MaterialColors\nimport androidx.annotation.AttrRes\nimport android.graphics.drawable.Drawable\nimport android.graphics.Color\nimport android.content.Context\nfun setDrawableTint(context: Context, drawable: Drawable, @AttrRes attribute: Int) {\n    drawable.setColorFilter(\n        MaterialColors.getColor(context, attribute, Color.BLACK),", "choices": [{"text": "        PorterDuff.Mode.SRC_IN\n    )\n}\n\nfun setDrawableTint(context: Context, drawable: Drawable, @AttrRes attribute: Int, color: Int) {\n    drawable.setColorFilter(\n        color,\n        PorterDuff.Mode.SRC_IN\n    )\n}\n\nfun setDrawableTint(context: Context, drawable: Drawable, @AttrRes attribute: Int, color: Color) {\n    drawable.setColorFilter(\n        color,\n        PorterDuff.Mode.SRC_IN\n    )\n}\n\nfun setDrawableTint(context: Context,"}], "metadata": {"task_id": "Tusky/819", "ground_truth": "        PorterDuff.Mode.SRC_IN\n    )\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\ThemeUtils.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.settings.AppTheme\nimport android.content.res.Configuration\nfun isBlack(config: Configuration, theme: String?): Boolean {\n    return when (theme) {\n        AppTheme.BLACK.value -> true\n        AppTheme.AUTO_SYSTEM_BLACK.value -> when (config.uiMode and Configuration.UI_MODE_NIGHT_MASK) {\n            Configuration.UI_MODE_NIGHT_NO -> false\n            Configuration.UI_MODE_NIGHT_YES -> true", "choices": [{"text": "            else -> false\n        }\n        AppTheme.AUTO_SYSTEM_WHITE.value -> when (config.uiMode and Configuration.UI_MODE_NIGHT_MASK) {\n            Configuration.UI_MODE_NIGHT_NO -> true\n            Configuration.UI_MODE_NIGHT_YES -> false\n            else -> false\n        }\n        else -> false\n    }\n}\n<file_sep>/app/src/main/java/com/keylesspalace/tusky/ui/settings/SettingsFragment.kt\npackage com.keylesspalace.tusky.ui.settings\n\nimport"}], "metadata": {"task_id": "Tusky/820", "ground_truth": "            else -> false\n        }\n        else -> false\n    }\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\ThemeUtils.kt"}}
{"prompt": "\n import retrofit2.HttpException\nimport org.json.JSONObject\nimport org.json.JSONException\nimport com.keylesspalace.tusky.R\nfun Throwable.getServerErrorMessage(): String? {\n    if (this is HttpException) {\n        val errorResponse = response()?.errorBody()?.string()\n        return if (!errorResponse.isNullOrBlank()) {\n            try {\n                JSONObject(errorResponse).getString(\"error\")\n            } catch (e: JSONException) {\n                null\n            }\n        } else {", "choices": [{"text": "            null\n        }\n    }\n    return null\n}\n\nfun Throwable.getNetworkErrorMessage(): String? {\n    return if (this is IOException) {\n        context.getString(R.string.error_network)\n    } else {\n        null\n    }\n}\n\nfun Throwable.getUnknownErrorMessage(): String? {\n    return context.getString(R.string.error_unknown)\n}\n\nfun Throwable.getErrorMessage(): String? {\n    return getServerErrorMessage()?: getNetworkErrorMessage()?: getUnknownErrorMessage()\n}\n\nfun Throwable.getErrorMessage(context: Context): String? {\n   "}], "metadata": {"task_id": "Tusky/821", "ground_truth": "            null\n        }\n    }\n    return null\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\ThrowableExtensions.kt"}}
{"prompt": "\n import java.io.IOException\nimport com.keylesspalace.tusky.R\nfun Throwable.getDrawableRes(): Int = when (this) {\n    is IOException -> R.drawable.errorphant_offline", "choices": [{"text": "    else -> R.drawable.errorphant_generic\n}\n\nfun Throwable.getToastMessage(): String = when (this) {\n    is IOException -> \"No internet connection\"\n    else -> \"Something went wrong\"\n}\n\nfun Throwable.getToastMessage(context: Context): String = when (this) {\n    is IOException -> context.getString(R.string.no_internet_connection)\n    else -> context.getString(R.string.something_went_wrong)\n}\n\nfun Throwable.getToastMessage(context: Context, resId: Int): String = when"}], "metadata": {"task_id": "Tusky/822", "ground_truth": "    is HttpException -> R.drawable.errorphant_offline\n    else -> R.drawable.errorphant_error\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\ThrowableExtensions.kt"}}
{"prompt": "\n import android.content.Context\nfun Throwable.getErrorString(context: Context): String = getServerErrorMessage() ?: when (this) {", "choices": [{"text": "\n import android.content.Context\nfun Throwable.getErrorString(context: Context): String = getServerErrorMessage()?: when (this) {\n     is HttpException -> {\n         when (code()) {\n             in 400..499 -> context.getString(R.string.error_bad_request)\n             in 500..599 -> context.getString(R.string.error_server_error)\n             else -> context.getString(R.string.error_unknown)\n         }\n     }\n     is IOException -> context.getString(R.string.error_no_internet)\n     else -> context.getString(R.string.error_unknown)\n }\n<file_sep>/app/src/main/java/com"}], "metadata": {"task_id": "Tusky/823", "ground_truth": "    is IOException -> context.getString(R.string.error_network)\n    else -> context.getString(R.string.error_generic)\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\ThrowableExtensions.kt"}}
{"prompt": "\n import kotlin.reflect.KProperty\nimport androidx.lifecycle.LifecycleOwner\nimport androidx.lifecycle.Lifecycle\nimport androidx.fragment.app.Fragment\noverride fun getValue(thisRef: Fragment, property: KProperty<*>): T {\n        val binding = binding\n        if (binding != null) {\n            return binding\n        }\n\n        val lifecycle = fragment.viewLifecycleOwner.lifecycle\n        if (!lifecycle.currentState.isAtLeast(Lifecycle.State.INITIALIZED)) {\n            throw IllegalStateException(\n                \"Should not attempt to get bindings when Fragment views are destroyed.\"", "choices": [{"text": "\n import kotlin.reflect.KProperty\nimport androidx.lifecycle.LifecycleOwner\nimport androidx.lifecycle.Lifecycle\nimport androidx.fragment.app.Fragment\noverride fun getValue(thisRef: Fragment, property: KProperty<*>): T {\n        val binding = binding\n        if (binding!= null) {\n            return binding\n        }\n\n        val lifecycle = fragment.viewLifecycleOwner.lifecycle\n        if (!lifecycle.currentState.isAtLeast(Lifecycle.State.INITIALIZED)) {\n            throw IllegalStateException(\n                \"Should not attempt to get bindings when Fragment views are destroyed.\"\n            )\n        }\n\n        val view = fragment.view\n        if (view == null) {\n            throw IllegalStateException(\n                \"Should not attempt to get bindings when Fragment views are destroyed.\"\n            )\n        }\n\n        return FragmentBindingDelegate(view, fragment).get(property)\n    }\n}\n\nclass FragmentBindingDelegate<T : ViewDataBinding>(\n    private val view: View,\n    private val fragment: Fragment\n) {\n    private val binding: T? = DataBindingUtil.findBinding(view)\n\n    @Suppress(\"UNCHECKED_CAST\")\n    fun <T : ViewDataBinding> get(property:"}], "metadata": {"task_id": "Tusky/825", "ground_truth": "            )\n        }\n\n        return viewBindingFactory(thisRef.requireView()).also { this.binding = it }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\ViewBindingExtensions.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.viewdata.StatusViewData\nimport com.keylesspalace.tusky.entity.Status\nfun Status.toViewData(\n    isShowingContent: Boolean,\n    isExpanded: Boolean,\n    isCollapsed: Boolean,\n    isDetailed: Boolean = false\n): StatusViewData.Concrete {\n    return StatusViewData.Concrete(\n        status = this,\n        isShowingContent = isShowingContent,", "choices": [{"text": "        isExpanded = isExpanded,\n        isCollapsed = isCollapsed,\n        isDetailed = isDetailed\n    )\n}\n\nfun Status.toViewData(\n    isShowingContent: Boolean,\n    isExpanded: Boolean,\n    isCollapsed: Boolean,\n    isDetailed: Boolean = false,\n    isReply: Boolean = false\n): StatusViewData.Reply {\n    return StatusViewData.Reply(\n        status = this,\n        isShowingContent = isShowingContent,\n        isExpanded = isExpanded,\n        isCollapsed = isCollapsed,\n        isDetailed = isDetailed,\n        isReply = isReply\n    )\n}\n\nfun"}], "metadata": {"task_id": "Tusky/826", "ground_truth": "        isCollapsed = isCollapsed,\n        isExpanded = isExpanded,\n        isDetailed = isDetailed\n    )\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\ViewDataUtils.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.viewdata.NotificationViewData\nimport com.keylesspalace.tusky.entity.Notification\n\n@JvmName(\"notificationToViewData\")\nfun Notification.toViewData(\n    isShowingContent: Boolean,\n    isExpanded: Boolean,\n    isCollapsed: Boolean\n): NotificationViewData.Concrete {\n    return NotificationViewData.Concrete(\n        this.type,\n        this.id,", "choices": [{"text": "        this.title,\n        this.content,\n        this.isRead,\n        this.isUnread,\n        this.isStarred,\n        this.isUnstarred,\n        this.isImportant,\n        this.isUnimportant,\n        this.isArchived,\n        this.isUnarchived,\n        this.isDeleted,\n        this.isUndeleted,\n        this.isSpam,\n        this.isUnspam,\n        this.isDraft,\n        this.isUndraft,\n        this.isUnread,\n        this.isUnread,\n        this.isUnread,\n       "}], "metadata": {"task_id": "Tusky/827", "ground_truth": "        this.account,\n        this.status?.toViewData(isShowingContent, isExpanded, isCollapsed),\n        this.report\n    )\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\ViewDataUtils.kt"}}
{"prompt": "\n import android.widget.TextView\nimport android.view.View\nfun TextView.fixTextSelection() {", "choices": [{"text": "    setOnFocusChangeListener { _, hasFocus ->\n        if (hasFocus) {\n            setSelection(text.length)\n        }\n    }\n}\n\n"}], "metadata": {"task_id": "Tusky/829", "ground_truth": "    setTextIsSelectable(false)\n    post { setTextIsSelectable(true) }\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\util\\ViewExtensions.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.graphics.Rect\nprivate fun initializeVertices() {\n        sizeRect = Rect(0, 0, width, height)\n", "choices": [{"text": "\n\nprivate fun initializeVertices() {\n        sizeRect = Rect(0, 0, width, height)\n}\n\nprivate fun initializeVertices() {\n        sizeRect = Rect(0, 0, width, height)\n}\n\nprivate fun initializeVertices() {\n        sizeRect = Rect(0, 0, width, height)\n}\n\nprivate fun initializeVertices() {\n        sizeRect = Rect(0, 0, width, height)\n}\n\nprivate fun initializeVertices() {\n        sizeRect = Rect(0, 0, width, height)\n}\n\n"}], "metadata": {"task_id": "Tusky/835", "ground_truth": "        initLine(primaryLineData, primaryLinePath)\n        initLine(secondaryLineData, secondaryLinePath)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\view\\GraphView.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Attachment\nfun setFocalPoint(focus: Attachment.Focus?) {\n        this.focus = focus\n        super.setScaleType(ScaleType.MATRIX)", "choices": [{"text": "    }\n\n"}], "metadata": {"task_id": "Tusky/837", "ground_truth": "\n        if (focalMatrix == null) {\n            focalMatrix = Matrix()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\view\\MediaPreviewImageView.kt"}}
{"prompt": "\n fun removeFocalPoint() {", "choices": [{"text": " focalPoint = null\n }\n\n fun setFocalPoint(x: Float, y: Float) {\n focalPoint = PointF(x, y)\n }\n\n fun setFocalPoint(point: PointF) {\n focalPoint = point\n }\n\n fun setFocalPoint(point: Point) {\n focalPoint = PointF(point.x.toFloat(), point.y.toFloat())\n }\n\n fun setFocalPoint(x: Int, y: Int) {\n focalPoint = PointF(x.toFloat(), y.toFloat())\n }\n\n"}], "metadata": {"task_id": "Tusky/838", "ground_truth": "        super.setScaleType(ScaleType.CENTER_CROP)\n        focus = null\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\view\\MediaPreviewImageView.kt"}}
{"prompt": "\n override fun getScaleType(): ScaleType {\n        return if (focus != null) {", "choices": [{"text": "\n override fun getScaleType(): ScaleType {\n        return if (focus!= null) {\n            ScaleType.CENTER_CROP\n        } else {\n            ScaleType.FIT_CENTER\n        }\n    }\n\n    override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec)\n        if (focus!= null) {\n            val width = MeasureSpec.getSize(widthMeasureSpec)\n            val height = MeasureSpec.getSize(heightMeasureSpec)\n            val widthMode = MeasureSpec.getMode(widthMeasureSpec)\n            val heightMode = MeasureSpec.getMode(heightMeasureSpec)\n            val widthSize = if (width"}], "metadata": {"task_id": "Tusky/839", "ground_truth": "            ScaleType.CENTER_CROP\n        } else {\n            super.getScaleType()\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\view\\MediaPreviewImageView.kt"}}
{"prompt": "\n override fun setScaleType(type: ScaleType) {\n        if (focus != null) {", "choices": [{"text": "\n override fun setScaleType(type: ScaleType) {\n        if (focus!= null) {\n            focus.setScaleType(type)\n        }\n    }\n\n    override fun getScaleType(): ScaleType {\n        return if (focus!= null) {\n            focus.getScaleType()\n        } else {\n            ScaleType.FIT_CENTER\n        }\n    }\n\n    override fun setImageResource(resId: Int) {\n        if (focus!= null) {\n            focus.setImageResource(resId)\n        }\n    }\n\n    override fun setImageURI(uri: Uri?) {\n        if (focus!= null) {\n            focus.setImageURI(uri)\n        }\n    }\n\n    override fun setImageDrawable(drawable"}], "metadata": {"task_id": "Tusky/840", "ground_truth": "            super.setScaleType(ScaleType.MATRIX)\n        } else {\n            super.setScaleType(type)\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\view\\MediaPreviewImageView.kt"}}
{"prompt": "\n import com.bumptech.glide.request.target.Target\nimport com.bumptech.glide.load.DataSource\nimport android.graphics.drawable.Drawable\noverride fun onResourceReady(\n        resource: Drawable,\n        model: Any,\n        target: Target<Drawable>?,\n        dataSource: DataSource,\n        isFirstResource: Boolean\n    ): Boolean {", "choices": [{"text": "        return false\n    }\n}\n\n"}], "metadata": {"task_id": "Tusky/841", "ground_truth": "        recalculateMatrix(width, height, resource)\n        return false\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\view\\MediaPreviewImageView.kt"}}
{"prompt": "\n import android.graphics.Matrix\noverride fun onSizeChanged(width: Int, height: Int, oldWidth: Int, oldHeight: Int) {\n        recalculateMatrix(width, height, drawable)", "choices": [{"text": "        super.onSizeChanged(width, height, oldWidth, oldHeight)\n    }\n\n"}], "metadata": {"task_id": "Tusky/842", "ground_truth": "\n        super.onSizeChanged(width, height, oldWidth, oldHeight)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\view\\MediaPreviewImageView.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.util.FocalPointUtil\nimport com.keylesspalace.tusky.entity.Attachment\nimport android.graphics.drawable.Drawable\nimport android.graphics.Matrix\nprivate fun recalculateMatrix(width: Int, height: Int, drawable: Drawable?) {\n        if (drawable != null && focus != null && focalMatrix != null) {\n            scaleType = ScaleType.MATRIX\n            FocalPointUtil.updateFocalPointMatrix(\n                width.toFloat(),\n                height.toFloat(),\n                drawable.intrinsicWidth.toFloat(),\n                drawable.intrinsicHeight.toFloat(),\n                focus as Attachment.Focus,", "choices": [{"text": "\n import com.keylesspalace.tusky.util.FocalPointUtil\nimport com.keylesspalace.tusky.entity.Attachment\nimport android.graphics.drawable.Drawable\nimport android.graphics.Matrix\nprivate fun recalculateMatrix(width: Int, height: Int, drawable: Drawable?) {\n        if (drawable!= null && focus!= null && focalMatrix!= null) {\n            scaleType = ScaleType.MATRIX\n            FocalPointUtil.updateFocalPointMatrix(\n                width.toFloat(),\n                height.toFloat(),\n                drawable.intrinsicWidth.toFloat(),\n                drawable.intrinsicHeight.toFloat(),\n                focus as Attachment.Focus,\n                focalMatrix\n            )\n            imageMatrix = focalMatrix\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/843", "ground_truth": "                focalMatrix as Matrix\n            )\n            imageMatrix = focalMatrix\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\view\\MediaPreviewImageView.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport android.view.View\nprivate fun attachImageViews() {\n        removeAllViews()\n        for (i in 0 until aspectRatios.size.coerceAtMost(imageViewCache.size)) {", "choices": [{"text": "            val imageView = imageViewCache[i]\n            val aspectRatio = aspectRatios[i]\n            val params = LayoutParams(\n                LayoutParams.MATCH_PARENT,\n                LayoutParams.MATCH_PARENT\n            )\n            addView(imageView, params)\n            imageView.aspectRatio = aspectRatio\n        }\n    }\n\n"}], "metadata": {"task_id": "Tusky/844", "ground_truth": "            addView(imageViewCache[i])\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\view\\MediaPreviewLayout.kt"}}
{"prompt": "\n import kotlin.math.roundToInt\nimport android.view.View\nprivate fun View.measureToAspect(width: Int, aspect: Double): Int {\n    val height = (width / aspect).roundToInt()", "choices": [{"text": "    return if (height > 0) height else width\n}\n\nfun View.measureToAspect(aspect: Double): Int {\n    val width = this.width\n    return if (width > 0) measureToAspect(width, aspect) else 0\n}\n\nfun View.measureToAspect(width: Int, aspect: Double, height: Int): Int {\n    val height = (width / aspect).roundToInt()\n    return if (height > 0) height else height\n}\n\nfun View.measureToAspect(aspect: Double, height: Int): Int {\n    val"}], "metadata": {"task_id": "Tusky/846", "ground_truth": "    measureExactly(width, height)\n    return height\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\view\\MediaPreviewLayout.kt"}}
{"prompt": "\n import android.view.View\nprivate fun View.measureExactly(width: Int, height: Int) {\n    measure(\n        View.MeasureSpec.makeMeasureSpec(width, View.MeasureSpec.EXACTLY),", "choices": [{"text": "        View.MeasureSpec.makeMeasureSpec(height, View.MeasureSpec.EXACTLY)\n    )\n}\n\nfun View.measureExactly(width: Int) {\n    measureExactly(width, height)\n}\n\nfun View.measureExactly(height: Int) {\n    measureExactly(width, height)\n}\n\nfun View.measureExactly() {\n    measureExactly(width, height)\n}\n\nfun View.measureExactly(width: Int, height: Int, callback: (View) -> Unit) {\n    measureExactly(width, height)\n    callback(this)"}], "metadata": {"task_id": "Tusky/847", "ground_truth": "        View.MeasureSpec.makeMeasureSpec(height, View.MeasureSpec.EXACTLY)\n    )\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\view\\MediaPreviewLayout.kt"}}
{"prompt": "\n import com.google.android.material.slider.Slider\noverride fun onValueChange(slider: Slider, value: Float, fromUser: Boolean) {", "choices": [{"text": " if (fromUser) {\n val value = slider.value\n val value = slider.value\n val value = slider.value\n val value = slider.value\n val value = slider.value\n val value = slider.value\n val value = slider.value\n val value = slider.value\n val value = slider.value\n val value = slider.value\n val value = slider.value\n val value = slider.value\n val value = slider.value\n val value = slider.value\n val value = slider.value\n val value = slider.value\n val value = slider.value\n val"}], "metadata": {"task_id": "Tusky/848", "ground_truth": "        if (!fromUser) return\n        binding.summary.text = formatter(value)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\view\\SliderPreference.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Notification\n@Override\r\npublic boolean deepEquals(NotificationViewData other) {\r\n    if (!(other instanceof Placeholder))\r\n        return false;\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Tusky/851", "ground_truth": "    Placeholder that = (Placeholder) other;\r\n    return isLoading == that.isLoading && id == that.id;\r\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\viewdata\\NotificationViewData.java"}}
{"prompt": "\n fun calculatePercent(fraction: Int, totalVoters: Int?, totalVotes: Int): Int {\n    return if (fraction == 0) {\n        0", "choices": [{"text": "    } else {\n        (fraction * 100) / totalVoters!!\n    }\n}\n\n"}], "metadata": {"task_id": "Tusky/852", "ground_truth": "    } else {\n        val total = totalVoters ?: totalVotes\n        (fraction / total.toDouble() * 100).roundToInt()\n    }\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\viewdata\\PollViewData.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.R\nimport androidx.core.text.parseAsHtml\nimport android.text.Spanned\nimport android.text.SpannableStringBuilder\nimport android.content.Context\nfun buildDescription(title: String, percent: Int, voted: Boolean, context: Context): Spanned {\n    val builder =\n        SpannableStringBuilder(\n            context.getString(R.string.poll_percent_format, percent).parseAsHtml()\n        )\n    if (voted) {\n        builder.append(\" \u2713 \")", "choices": [{"text": "    } else {\n        builder.append(\" \")\n    }\n    builder.append(title)\n    return builder\n}<file_sep>/app/src/main/java/com/keylesspalace/tusky/ui/fragments/PollFragment.kt\npackage com.keylesspalace.tusky.ui.fragments\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModelProviders\nimport androidx."}], "metadata": {"task_id": "Tusky/853", "ground_truth": "    } else {\n        builder.append(\" \")\n    }\n    return builder.append(title)\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\viewdata\\PollViewData.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Poll\nfun Poll?.toViewData(): PollViewData? {\n    if (this == null) return null\n    return PollViewData(\n        id = id,\n        expiresAt = expiresAt,\n        expired = expired,\n        multiple = multiple,\n        votesCount = votesCount,\n        votersCount = votersCount,\n        options = options.mapIndexed { index, option ->\n            option.toViewData(\n                ownVotes?.contains(index) == true", "choices": [{"text": "\n                ownVotes?.contains(option.id) == true\n            )\n        }\n    )\n}\n\nfun PollOption.toViewData(ownVote: Boolean, ownVoteInOption: Boolean): PollOptionViewData {\n    return PollOptionViewData(\n        id = id,\n        text = text,\n        votesCount = votesCount,\n        ownVote = ownVote,\n        ownVoteInOption = ownVoteInOption\n    )\n}\n\nfun PollOptionViewData.toEntity(): PollOption {\n    return PollOption(\n        id = id,\n        text = text,\n        votesCount = votesCount\n    )\n}"}], "metadata": {"task_id": "Tusky/854", "ground_truth": "            )\n        },\n        voted = voted\n    )\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\viewdata\\PollViewData.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.PollOption\nimport com.keylesspalace.tusky.entity.Poll\nfun PollOption.toViewData(voted: Boolean): PollOptionViewData {\n    return PollOptionViewData(\n        title = title,", "choices": [{"text": "        votes = votes,\n        voted = voted\n    )\n}\n\nfun Poll.toViewData(voted: Boolean): PollViewData {\n    return PollViewData(\n        id = id,\n        title = title,\n        options = options.map { it.toViewData(voted) },\n        voted = voted\n    )\n}\n\nfun PollOption.toEntity(pollId: Long): PollOption {\n    return PollOption(\n        id = id,\n        title = title,\n        votes = votes,\n        pollId = pollId\n    )\n}\n\nfun Poll.toEntity(): Poll"}], "metadata": {"task_id": "Tusky/855", "ground_truth": "        votesCount = votesCount,\n        selected = false,\n        voted = voted\n    )\n}", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\viewdata\\PollViewData.kt"}}
{"prompt": "\n fun addToolbarVisibilityListener(listener: ToolbarVisibilityListener): Function0<Boolean> {\n        this.toolbarVisibilityListeners.add(listener)", "choices": [{"text": "        return {\n            this.toolbarVisibilityListeners.remove(listener)\n            true\n        }\n    }\n\n    private fun updateToolbarVisibility() {\n        val isVisible = this.toolbar.height > 0\n        for (listener in this.toolbarVisibilityListeners) {\n            listener.onToolbarVisibilityChanged(isVisible)\n        }\n    }\n\n    private fun updateToolbarHeight() {\n        val height = this.toolbar.height\n        for (listener in this.toolbarHeightListeners) {\n            listener.onToolbarHeightChanged(height)\n        }\n    }\n\n    private fun updateToolbarTitle() {\n        val title = this.toolbar.title\n       "}], "metadata": {"task_id": "Tusky/856", "ground_truth": "        listener(isToolbarVisible)\n        return { toolbarVisibilityListeners.remove(listener) }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\ViewMediaActivity.kt"}}
{"prompt": "\n import android.view.Menu\noverride fun onCreateOptionsMenu(menu: Menu): Boolean {\n        menuInflater.inflate(R.menu.view_media_toolbar, menu)\n        // We don't support 'open status' from single image views", "choices": [{"text": "        menu.findItem(R.id.action_open_status).isVisible = false\n        return true\n    }\n"}], "metadata": {"task_id": "Tusky/857", "ground_truth": "        menu.findItem(R.id.action_open_status)?.isVisible = (attachments != null)\n        return true\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\ViewMediaActivity.kt"}}
{"prompt": "\n import android.view.Menu\noverride fun onPrepareOptionsMenu(menu: Menu?): Boolean {", "choices": [{"text": " menu?.findItem(R.id.action\\_search)?.isVisible = false\n return super.onPrepareOptionsMenu(menu)\n}\n\n"}], "metadata": {"task_id": "Tusky/858", "ground_truth": "        menu?.findItem(R.id.action_share_media)?.isEnabled = !isCreating\n        return true\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\ViewMediaActivity.kt"}}
{"prompt": "\n private fun getPageTitle(position: Int): CharSequence {\n        if (attachments == null) {\n            return \"\"", "choices": [{"text": "        }\n        return attachments[position].title\n    }\n\n    override fun getPageCount(): Int {\n        return attachments.size\n    }\n\n    override fun getPageTitle(position: Int): CharSequence? {\n        return getPageTitle(position)\n    }\n\n    override fun instantiateItem(container: ViewGroup, position: Int): Any {\n        val view = inflater.inflate(R.layout.item_attachment, container, false)\n        val imageView = view.findViewById<ImageView>(R.id.image)\n        val title = view.findViewById<TextView>(R.id.title)\n        val description = view.findViewById<TextView"}], "metadata": {"task_id": "Tusky/859", "ground_truth": "        }\n        return String.format(Locale.getDefault(), \"%d/%d\", position + 1, attachments?.size)\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\ViewMediaActivity.kt"}}
{"prompt": "\n private fun onOpenStatus() {\n        val attach = attachments!![binding.viewPager.currentItem]\n        startActivityWithSlideInAnimation(", "choices": [{"text": "            Intent(this, AttachmentsActivity::class.java).putExtra(\n                AttachmentsActivity.EXTRA_ATTACH,\n                attach\n            )\n        )\n    }\n\n"}], "metadata": {"task_id": "Tusky/860", "ground_truth": "            ViewThreadActivity.startIntent(this, attach.statusId, attach.statusUrl)\n        )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\ViewMediaActivity.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.viewdata.AttachmentViewData\nimport com.keylesspalace.tusky.entity.Attachment\nimport android.view.View\nimport android.content.Intent\nimport android.content.Context\n @JvmStatic\n        fun newIntent(\n            context: Context?,\n            attachments: List<AttachmentViewData>,\n            index: Int\n        ): Intent {\n            val intent = Intent(context, ViewMediaActivity::class.java)\n            intent.putParcelableArrayListExtra(EXTRA_ATTACHMENTS, ArrayList(attachments))", "choices": [{"text": "            intent.putExtra(EXTRA_INDEX, index)\n            return intent\n        }\n\n        @JvmStatic\n        fun newIntent(\n            context: Context?,\n            attachments: List<AttachmentViewData>\n        ): Intent {\n            val intent = Intent(context, ViewMediaActivity::class.java)\n            intent.putParcelableArrayListExtra(EXTRA_ATTACHMENTS, ArrayList(attachments))\n            return intent\n        }\n\n        @JvmStatic\n        fun newIntent(\n            context: Context?,\n            attachment: AttachmentViewData\n        ): Intent {\n            val intent = Intent(context, ViewMediaActivity::class.java)\n            intent.putParcelableArrayListExtra(EXTRA"}], "metadata": {"task_id": "Tusky/864", "ground_truth": "            intent.putExtra(EXTRA_ATTACHMENT_INDEX, index)\n            return intent\n        }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\ViewMediaActivity.kt"}}
{"prompt": "\n import io.reactivex.rxjava3.core.Single\nimport android.view.View\nimport android.content.Intent\nimport android.content.Context\n @JvmStatic\n        fun newSingleImageIntent(context: Context, url: String): Intent {\n            val intent = Intent(context, ViewMediaActivity::class.java)", "choices": [{"text": "            intent.putExtra(ViewMediaActivity.EXTRA_URL, url)\n            return intent\n        }\n<file_sep>/app/src/main/java/com/example/myapplication/ui/view/ViewMediaActivity.kt\npackage com.example.myapplication.ui.view\n\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.databinding.DataBindingUtil\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModelProvider\nimport com.example.myapplication.R\nimport com."}], "metadata": {"task_id": "Tusky/865", "ground_truth": "            intent.putExtra(EXTRA_SINGLE_IMAGE_URL, url)\n            return intent\n        }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\ViewMediaActivity.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.keylesspalace.tusky.util.Either.Right\nimport com.keylesspalace.tusky.util.Either.Left\nimport at.connyduck.calladapter.networkresult.fold\nimport androidx.lifecycle.viewModelScope\nfun load(listId: String) {\n        val state = _state.value\n        if (state.accounts.isLeft() || state.accounts.asRight().isEmpty()) {\n            viewModelScope.launch {\n                api.getAccountsInList(listId, 0).fold(\n                    { accounts ->\n                        updateState { copy(accounts = Right(accounts)) }\n                    },\n                    { e ->\n                        updateState { copy(accounts = Left(e)) }", "choices": [{"text": "                    }\n                )\n            }\n        }\n    }\n\nfun load(listId: String, page: Int) {\n        val state = _state.value\n        if (state.accounts.isLeft() || state.accounts.asRight().isEmpty()) {\n            viewModelScope.launch {\n                api.getAccountsInList(listId, page).fold(\n                    { accounts ->\n                        updateState { copy(accounts = Right(accounts)) }\n                    },\n                    { e ->\n                        updateState { copy(accounts = Left(e)) }\n                    }\n                )\n            }\n        }\n    }\n\nfun load(listId"}], "metadata": {"task_id": "Tusky/866", "ground_truth": "                    }\n                )\n            }\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\viewmodel\\AccountsInListViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.keylesspalace.tusky.util.Success\nimport com.keylesspalace.tusky.util.Loading\nimport com.keylesspalace.tusky.util.Error\nimport com.keylesspalace.tusky.entity.Account\nimport at.connyduck.calladapter.networkresult.fold\nimport androidx.lifecycle.viewModelScope\nfun obtainProfile() = viewModelScope.launch {\n        if (profileData.value == null || profileData.value is Error) {\n            profileData.postValue(Loading())\n\n            mastodonApi.accountVerifyCredentials().fold(\n                { profile ->\n                    apiProfileAccount = profile\n                    profileData.postValue(Success(profile))\n                },\n                {", "choices": [{"text": "                    profileData.postValue(Error(it))\n                }\n            )\n        }\n    }\n\nfun obtainAccounts() = viewModelScope.launch {\n        if (accountsData.value == null || accountsData.value is Error) {\n            accountsData.postValue(Loading())\n\n            mastodonApi.accountGetAccounts(\n                limit = 100,\n                maxId = null,\n                sinceId = null,\n                local = false,\n                remote = false,\n                onlyRemote = false,\n                onlyLocal = false,\n                onlyFollowers = false,\n                onlyFollowing = false,\n                onlyMuted"}], "metadata": {"task_id": "Tusky/867", "ground_truth": "                    profileData.postValue(Error())\n                }\n            )\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\viewmodel\\EditProfileViewModel.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.Account\ninternal fun hasUnsavedChanges(newProfileData: ProfileDataInUi): Boolean {\n        val diff = getProfileDiff(apiProfileAccount, newProfileData)", "choices": [{"text": "        return diff.isNotEmpty()\n    }\n\ninternal fun getProfileDiff(oldProfile: ProfileDataInUi, newProfile: ProfileDataInUi): Map<String, Any?> {\n        val diff = mutableMapOf<String, Any?>()\n        if (oldProfile.name!= newProfile.name) {\n            diff[\"name\"] = newProfile.name\n        }\n        if (oldProfile.email!= newProfile.email) {\n            diff[\"email\"] = newProfile.email\n        }\n        if (oldProfile.password!= newProfile.password) {\n            diff[\"password\"] = newProfile.password"}], "metadata": {"task_id": "Tusky/868", "ground_truth": "\n        return diff.hasChanges()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\viewmodel\\EditProfileViewModel.kt"}}
{"prompt": "\n import com.keylesspalace.tusky.entity.StringField\nprivate fun calculateFieldToUpdate(\n        newField: StringField?,\n        fieldsUnchanged: Boolean\n    ): Pair<String, String>? {\n        if (fieldsUnchanged || newField == null) {\n            return null\n        }", "choices": [{"text": "        return Pair(newField.name, newField.value)\n    }\n\nprivate fun calculateFieldToUpdate(\n        newField: IntField?,\n        fieldsUnchanged: Boolean\n    ): Pair<String, String>? {\n        if (fieldsUnchanged || newField == null) {\n            return null\n        }\n        return Pair(newField.name, newField.value.toString())\n    }\n\nprivate fun calculateFieldToUpdate(\n        newField: BooleanField?,\n        fieldsUnchanged: Boolean\n    ): Pair<String, String>? {\n        if (fieldsUnchanged || newField == null) {\n            return null"}], "metadata": {"task_id": "Tusky/869", "ground_truth": "        return Pair(\n            newField.name,\n            newField.value\n        )\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\viewmodel\\EditProfileViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport at.connyduck.calladapter.networkresult.fold\nimport androidx.lifecycle.viewModelScope\nfun createNewList(listName: String, exclusive: Boolean, replyPolicy: String) {\n        viewModelScope.launch {\n            api.createList(listName, exclusive, replyPolicy).fold(\n                { list ->\n                    updateState {\n                        copy(lists = lists + list)\n                    }\n                },\n                {", "choices": [{"text": "                    updateState {\n                        copy(error = it)\n                    }\n                }\n            )\n        }\n    }\n\nfun deleteList(listId: String) {\n        viewModelScope.launch {\n            api.deleteList(listId).fold(\n                {\n                    updateState {\n                        copy(lists = lists.filter { it.id!= listId })\n                    }\n                },\n                {\n                    updateState {\n                        copy(error = it)\n                    }\n                }\n            )\n        }\n    }\n\nfun updateList(listId: String, listName: String, exclusive: Boolean, replyPolicy: String) {\n        viewModelScope"}], "metadata": {"task_id": "Tusky/870", "ground_truth": "                    sendEvent(Event.CREATE_ERROR)\n                }\n            )\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\viewmodel\\ListsViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.keylesspalace.tusky.util.replacedFirstWhich\nimport at.connyduck.calladapter.networkresult.fold\nimport androidx.lifecycle.viewModelScope\nfun updateList(listId: String, listName: String, exclusive: Boolean, replyPolicy: String) {\n        viewModelScope.launch {\n            api.updateList(listId, listName, exclusive, replyPolicy).fold(\n                { list ->\n                    updateState {\n                        copy(lists = lists.replacedFirstWhich(list) { it.id == listId })\n                    }\n                },\n                {", "choices": [{"text": "                    updateState {\n                        copy(error = it)\n                    }\n                }\n            )\n        }\n    }\n<file_sep>/app/src/main/java/com/keylesspalace/tusky/ui/settings/SettingsFragment.kt\npackage com.keylesspalace.tusky.ui.settings\n\nimport android.content.Context\nimport android.content.Intent\nimport android.content.SharedPreferences\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.appcompat.app.AppCompat"}], "metadata": {"task_id": "Tusky/871", "ground_truth": "                    sendEvent(Event.UPDATE_ERROR)\n                }\n            )\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\viewmodel\\ListsViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.keylesspalace.tusky.util.withoutFirstWhich\nimport at.connyduck.calladapter.networkresult.fold\nimport androidx.lifecycle.viewModelScope\nfun deleteList(listId: String) {\n        viewModelScope.launch {\n            api.deleteList(listId).fold(\n                {\n                    updateState {\n                        copy(lists = lists.withoutFirstWhich { it.id == listId })\n                    }\n                },\n                {", "choices": [{"text": "                    updateState {\n                        copy(lists = lists.withoutFirstWhich { it.id == listId })\n                    }\n                }\n            )\n        }\n    }\n\nfun deleteList(listId: String, listName: String) {\n        viewModelScope.launch {\n            api.deleteList(listId).fold(\n                {\n                    updateState {\n                        copy(lists = lists.withoutFirstWhich { it.id == listId })\n                    }\n                },\n                {\n                    updateState {\n                        copy(lists = lists.withoutFirstWhich { it.id == listId })\n                    }\n                }\n            )\n        }\n    }"}], "metadata": {"task_id": "Tusky/872", "ground_truth": "                    sendEvent(Event.DELETE_ERROR)\n                }\n            )\n        }\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\viewmodel\\ListsViewModel.kt"}}
{"prompt": " import com.keylesspalace.tusky.R\nval notification Notification\noverride suspend fun doWork(): Result {", "choices": [{"text": "    notification = NotificationCompat.Builder(applicationContext, \"tusky\")\n       .setSmallIcon(R.drawable.ic_launcher_foreground)\n       .setContentTitle(\"Tusky\")\n       .setContentText(\"Tusky is running\")\n       .setPriority(NotificationCompat.PRIORITY_DEFAULT)\n       .build()\n    with(NotificationManagerCompat.from(applicationContext)) {\n        notify(1, notification)\n    }\n    return Result.success()\n}\n\n"}], "metadata": {"task_id": "Tusky/873", "ground_truth": "        notificationsFetcher.fetchAndShow()\n        return Result.success()\n    }", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\worker\\NotificationWorker.kt"}}
{"prompt": "\n import androidx.work.ForegroundInfo\noverride suspend fun getForegroundInfo() = ForegroundInfo(", "choices": [{"text": ", \"MyWorker\", \"MyWorker\")\n"}], "metadata": {"task_id": "Tusky/874", "ground_truth": "        NOTIFICATION_ID_FETCH_NOTIFICATION,\n        notification\n    )", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\worker\\NotificationWorker.kt"}}
{"prompt": "\n import androidx.work.ForegroundInfo\noverride suspend fun getForegroundInfo() = ForegroundInfo(", "choices": [{"text": ", \"MyWorker\", \"MyWorker\")\n"}], "metadata": {"task_id": "Tusky/876", "ground_truth": "        NOTIFICATION_ID_PRUNE_CACHE,\n        notification\n    )", "fpath": "Tusky\\app\\src\\main\\java\\com\\keylesspalace\\tusky\\worker\\PruneCacheWorker.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.chat.RecentEmote\nimport androidx.room.Transaction\nimport androidx.room.Insert\n @Transaction\r\n    fun ensureMaxSizeAndInsert(emotes: Collection<RecentEmote>) {\r", "choices": [{"text": "//        val recentEmotes = emotes.take(MAX_SIZE)\r\n//        recentEmotes.forEach {\r\n//            insert(it)\r\n//        }\r\n    }\r\n}<file_sep>/app/src/main/java/com/github/andreyasadchy/xtra/model/chat/RecentEmote.kt\npackage com.github.andreyasadchy.xtra.model.chat\r\n\r\nimport androidx.room.Entity\r\nimport androidx.room.PrimaryKey\r\nimport com.github.andreyasadchy.x"}], "metadata": {"task_id": "Xtra/0", "ground_truth": "        insertAll(emotes)\r\n        deleteOld()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\db\\RecentEmotesDao.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\noverride fun hashCode(): Int {\r\n        var result = id.hashCode()\r\n        result = 31 * result + login.hashCode()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/11", "ground_truth": "        result = 31 * result + helixToken.hashCode()\r\n        return result\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\model\\Account.kt"}}
{"prompt": "\n override fun equals(other: Any?): Boolean {\r\n        if (this === other) return true\r\n        if (javaClass != other?.javaClass) return false\r\n\r\n        other as Chatter\r", "choices": [{"text": "\n override fun equals(other: Any?): Boolean {\r\n        if (this === other) return true\r\n        if (javaClass!= other?.javaClass) return false\r\n\r\n        other as Chatter\r\n//        if (id!= other.id) return false\r\n        if (name!= other.name) return false\r\n        if (email!= other.email) return false\r\n        if (password!= other.password) return false\r\n        if (phone!= other.phone) return false\r\n        if (address!= other.address) return false\r\n        if (gender!= other.gender) return false\r\n        if (age!= other.age) return false\r\n        if (image!= other.image) return false\r\n        if (status!= other.status) return false\r\n        if (role!= other.role) return false\r\n        if (created_"}], "metadata": {"task_id": "Xtra/12", "ground_truth": "\r\n        if (name != other.name) return false\r\n\r\n        return true\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\model\\chat\\Chatter.kt"}}
{"prompt": "\n override fun equals(other: Any?): Boolean {\r\n        if (this === other) return true\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/13", "ground_truth": "        if (other !is Emote || name != other.name) return false\r\n        return true\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\model\\chat\\Emote.kt"}}
{"prompt": "\n import java.util.List\n@Override\r\npublic void addListener(PlaylistEventListener listener) {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nlisteners.add(listener);\r\n}\r\n@Override\r\npublic void removeListener(PlaylistEventListener listener) {\r\n// TODO Auto-generated method stub\r\nlisteners.remove(listener);\r\n}\r\n@Override\r\npublic void play() {\r\n// TODO Auto-generated method stub\r\nfor(PlaylistEventListener listener:listeners){\r\nlistener.onPlay();\r\n}\r\n}\r\n@Override\r\npublic void pause() {\r\n// TODO Auto-generated method stub\r\nfor(PlaylistEventListener listener:listeners){"}], "metadata": {"task_id": "Xtra/17", "ground_truth": "    checkNotNull(listener);\r\n    listeners.add(listener);\r\n}", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\player\\lowlatency\\DefaultHlsPlaylistTracker.java"}}
{"prompt": "\n import androidx.media3.exoplayer.hls.playlist.HlsMediaPlaylist\nimport androidx.annotation.Nullable\nimport android.net.Uri\n@Override\r\n@Nullable\r\npublic HlsMediaPlaylist getPlaylistSnapshot(Uri url, boolean isForPlayback) {\r\n    @Nullable\r\n    HlsMediaPlaylist snapshot = playlistBundles.get(url).getPlaylistSnapshot();\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Xtra/18", "ground_truth": "    if (snapshot != null && isForPlayback) {\r\n        maybeSetPrimaryUrl(url);\r\n    }\r\n    return snapshot;\r\n}", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\player\\lowlatency\\DefaultHlsPlaylistTracker.java"}}
{"prompt": "\n import java.io.IOException\nimport androidx.media3.exoplayer.upstream.Loader\n@Override\r\npublic void maybeThrowPrimaryPlaylistRefreshError() throws IOException {\r\n    if (initialPlaylistLoader != null) {\r\n        initialPlaylistLoader.maybeThrowError();\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/19", "ground_truth": "    }\r\n    if (primaryMediaPlaylistUrl != null) {\r\n        maybeThrowPlaylistRefreshError(primaryMediaPlaylistUrl);\r\n    }\r\n}", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\player\\lowlatency\\DefaultHlsPlaylistTracker.java"}}
{"prompt": "\n import androidx.annotation.Nullable\nimport android.net.Uri\n@Override\r\npublic boolean excludeMediaPlaylist(Uri playlistUrl, long exclusionDurationMs) {\r\n    @Nullable\r\n    MediaPlaylistBundle bundle = playlistBundles.get(playlistUrl);\r", "choices": [{"text": "if (bundle == null) {\r\n    return false;\r\n}\r\nbundle.exclusionDurationMs = exclusionDurationMs;\r\nreturn true;\r\n}\r\n"}], "metadata": {"task_id": "Xtra/20", "ground_truth": "    if (bundle != null) {\r\n        return !bundle.excludePlaylist(exclusionDurationMs);\r\n    }\r\n    return false;\r\n}", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\player\\lowlatency\\DefaultHlsPlaylistTracker.java"}}
{"prompt": "\n import java.util.List\nimport androidx.media3.exoplayer.hls.playlist.HlsMultivariantPlaylist.Variant\nimport android.net.Uri\n/**\r\n * Returns whether any of the variants in the multivariant playlist have the specified playlist\r\n * URL.\r\n */\r\nprivate boolean isVariantUrl(Uri playlistUrl) {\r\n    List<Variant> variants = multivariantPlaylist.variants;\r\n    for (int i = 0; i < variants.size(); i++) {\r\n        if (playlistUrl.equals(variants.get(i).url)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/22", "ground_truth": "            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\player\\lowlatency\\DefaultHlsPlaylistTracker.java"}}
{"prompt": "\n import java.io.IOException\nimport androidx.media3.exoplayer.upstream.Loader\npublic void maybeThrowPlaylistRefreshError() throws IOException {\r\n    mediaPlaylistLoader.maybeThrowError();\r\n    if (playlistError != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/27", "ground_truth": "        throw playlistError;\r\n    }\r\n}", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\player\\lowlatency\\DefaultHlsPlaylistTracker.java"}}
{"prompt": "\n import androidx.media3.common.C\n@Override\r\npublic void onPlaylistChanged() {\r", "choices": [{"text": "super.onPlaylistChanged();\r\nif (mCurrentPlaylist!= null) {\r\nmCurrentPlaylist.removeOnPlaylistChangedListener(this);\r\n}\r\nmCurrentPlaylist = mPlayer.getPlaylist();\r\nmCurrentPlaylist.addOnPlaylistChangedListener(this);\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/30", "ground_truth": "    // Remove the temporary playlist listener that is waiting for the first playlist only.\r\n    listeners.remove(this);\r\n}", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\player\\lowlatency\\DefaultHlsPlaylistTracker.java"}}
{"prompt": "\n import java.io.IOException\nimport java.io.BufferedReader\nimport androidx.media3.common.util.Util\nimport androidx.media3.common.C\nprivate static int skipIgnorableWhitespace(BufferedReader reader, boolean skipLinebreaks, int c) throws IOException {\r\n    while (c != -1 && Character.isWhitespace(c) && (skipLinebreaks || !Util.isLinebreak(c))) {\r\n        c = reader.read();\r", "choices": [{"text": "\n import java.io.IOException\nimport java.io.BufferedReader\nimport androidx.media3.common.util.Util\nimport androidx.media3.common.C\nprivate static int skipIgnorableWhitespace(BufferedReader reader, boolean skipLinebreaks, int c) throws IOException {\r\n    while (c!= -1 && Character.isWhitespace(c) && (skipLinebreaks ||!Util.isLinebreak(c))) {\r\n        c = reader.read();\r\n}\r\nreturn c;\r\n}\n"}], "metadata": {"task_id": "Xtra/31", "ground_truth": "    }\r\n    return c;\r\n}", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\player\\lowlatency\\HlsPlaylistParser.java"}}
{"prompt": "\n import java.util.List\nimport java.util.ArrayList\nimport androidx.media3.exoplayer.hls.playlist.HlsMultivariantPlaylist.Variant\nimport androidx.annotation.Nullable\n@Nullable\r\nprivate static Variant getVariantWithAudioGroup(ArrayList<Variant> variants, String groupId) {\r\n    for (int i = 0; i < variants.size(); i++) {\r\n        Variant variant = variants.get(i);\r\n        if (groupId.equals(variant.audioGroupId)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/32", "ground_truth": "            return variant;\r\n        }\r\n    }\r\n    return null;\r\n}", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\player\\lowlatency\\HlsPlaylistParser.java"}}
{"prompt": "\n import java.util.List\nimport java.util.ArrayList\nimport androidx.media3.exoplayer.hls.playlist.HlsMultivariantPlaylist.Variant\nimport androidx.annotation.Nullable\n@Nullable\r\nprivate static Variant getVariantWithVideoGroup(ArrayList<Variant> variants, String groupId) {\r\n    for (int i = 0; i < variants.size(); i++) {\r\n        Variant variant = variants.get(i);\r\n        if (groupId.equals(variant.videoGroupId)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/33", "ground_truth": "            return variant;\r\n        }\r\n    }\r\n    return null;\r\n}", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\player\\lowlatency\\HlsPlaylistParser.java"}}
{"prompt": "\n import java.util.List\nimport java.util.ArrayList\nimport androidx.media3.exoplayer.hls.playlist.HlsMultivariantPlaylist.Variant\nimport androidx.annotation.Nullable\n@Nullable\r\nprivate static Variant getVariantWithSubtitleGroup(ArrayList<Variant> variants, String groupId) {\r\n    for (int i = 0; i < variants.size(); i++) {\r\n        Variant variant = variants.get(i);\r\n        if (groupId.equals(variant.subtitleGroupId)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/34", "ground_truth": "            return variant;\r\n        }\r\n    }\r\n    return null;\r\n}", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\player\\lowlatency\\HlsPlaylistParser.java"}}
{"prompt": "\n import java.util.regex.Pattern\nimport java.util.regex.Matcher\nprivate static int parseOptionalIntAttr(String line, Pattern pattern, int defaultValue) {\r\n    Matcher matcher = pattern.matcher(line);\r", "choices": [{"text": "if (matcher.find()) {\r\n    return Integer.parseInt(matcher.group(1));\r\n}\r\nreturn defaultValue;\r\n}\n"}], "metadata": {"task_id": "Xtra/38", "ground_truth": "    if (matcher.find()) {\r\n        return Integer.parseInt(checkNotNull(matcher.group(1)));\r\n    }\r\n    return defaultValue;\r\n}", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\player\\lowlatency\\HlsPlaylistParser.java"}}
{"prompt": "\n import java.util.regex.Pattern\nimport java.util.regex.Matcher\nprivate static long parseOptionalLongAttr(String line, Pattern pattern, long defaultValue) {\r\n    Matcher matcher = pattern.matcher(line);\r", "choices": [{"text": "if (matcher.matches()) {\r\n    return Long.parseLong(matcher.group(1));\r\n}\r\nreturn defaultValue;\r\n}\n"}], "metadata": {"task_id": "Xtra/39", "ground_truth": "    if (matcher.find()) {\r\n        return Long.parseLong(checkNotNull(matcher.group(1)));\r\n    }\r\n    return defaultValue;\r\n}", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\player\\lowlatency\\HlsPlaylistParser.java"}}
{"prompt": "\n import java.util.regex.Pattern\nimport java.util.regex.Matcher\nprivate static boolean parseOptionalBooleanAttribute(String line, Pattern pattern, boolean defaultValue) {\r\n    Matcher matcher = pattern.matcher(line);\r", "choices": [{"text": "if (matcher.matches()) {\r\n    return Boolean.parseBoolean(matcher.group(1));\r\n}\r\nreturn defaultValue;\r\n}\n"}], "metadata": {"task_id": "Xtra/44", "ground_truth": "    if (matcher.find()) {\r\n        return BOOLEAN_TRUE.equals(matcher.group(1));\r\n    }\r\n    return defaultValue;\r\n}", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\player\\lowlatency\\HlsPlaylistParser.java"}}
{"prompt": "\n import java.io.IOException\nimport org.checkerframework.checker.nullness.qual.EnsuresNonNullIf\nimport androidx.media3.common.util.Assertions\nimport androidx.media3.common.util.Assertions.checkNotNull\n@EnsuresNonNullIf(expression = \"next\", result = true)\r\npublic boolean hasNext() throws IOException {\r\n    if (next != null) {\r\n        return true;\r\n    }\r\n    if (!extraLines.isEmpty()) {\r\n        next = checkNotNull(extraLines.poll());\r\n        return true;\r\n    }\r\n    while ((next = reader.readLine()) != null) {\r\n        next = next.trim();\r\n        if (!next.isEmpty()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/45", "ground_truth": "            return true;\r\n        }\r\n    }\r\n    return false;\r\n}", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\player\\lowlatency\\HlsPlaylistParser.java"}}
{"prompt": "\n import java.util.NoSuchElementException\nimport java.io.IOException\n/**\r\n * Return the next line, or throw {@link NoSuchElementException} if none.\r\n */\r\npublic String next() throws IOException {\r\n    if (hasNext()) {\r\n        String result = next;\r\n        next = null;\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/46", "ground_truth": "        return result;\r\n    } else {\r\n        throw new NoSuchElementException();\r\n    }\r\n}", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\player\\lowlatency\\HlsPlaylistParser.java"}}
{"prompt": "\n import kotlinx.coroutines.withContext\nimport kotlinx.coroutines.Dispatchers\nimport com.github.andreyasadchy.xtra.util.TwitchApiHelper\nimport com.github.andreyasadchy.xtra.util.C\nsuspend fun deleteMessages(helixClientId: String?, helixToken: String?, channelId: String?, userId: String?, messageId: String? = null): String? = withContext(Dispatchers.IO) {\r\n        val response = helix.deleteMessages(helixClientId, helixToken?.let { TwitchApiHelper.addTokenPrefixHelix(it) }, channelId, userId, messageId)\r\n        if (response.isSuccessful) {\r", "choices": [{"text": "//            val body = response.body()\r\n//            if (body!= null) {\r\n//                return@withContext body.data.firstOrNull()?.id\r\n//            }\r\n            return@withContext response.body()?.data?.firstOrNull()?.id\r\n        }\r\n        return@withContext null\r\n    }\n<file_sep>/src/main/kotlin/com/github/andreyasadchy/xtra/util/TwitchApiHelper.kt\npackage com.github.andreyasadchy.xtra.util\n\nimport com.github.andreyasadchy"}], "metadata": {"task_id": "Xtra/52", "ground_truth": "            null\r\n        } else {\r\n            response.errorBody()?.string()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\ApiRepository.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.ui.Clip\nprivate suspend fun gqlLoad(params: LoadParams<Int>): List<Clip> {\r\n        val get = gqlApi.loadChannelClips(gqlHeaders, channelLogin, gqlPeriod, params.loadSize, offset)\r\n        offset = get.cursor\r", "choices": [{"text": "//        Log.d(\"gqlLoad\", \"offset = $offset\")\r\n        return get.items\r\n    }\n"}], "metadata": {"task_id": "Xtra/55", "ground_truth": "        nextPage = get.hasNextPage ?: true\r\n        return get.data\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\ChannelClipsDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.ui.Clip\nimport androidx.paging.PagingState\noverride fun getRefreshKey(state: PagingState<Int, Clip>): Int? {\r\n        return state.anchorPosition?.let { anchorPosition ->\r\n            val anchorPage = state.closestPageToPosition(anchorPosition)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/56", "ground_truth": "            anchorPage?.prevKey?.plus(1) ?: anchorPage?.nextKey?.minus(1)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\ChannelClipsDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.TwitchApiHelper\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.type.BroadcastType\nimport com.github.andreyasadchy.xtra.model.ui.Video\nprivate suspend fun helixLoad(params: LoadParams<Int>): List<Video> {\r\n        val get = helixApi.getVideos(\r\n            clientId = helixClientId,\r\n            token = helixToken?.let { TwitchApiHelper.addTokenPrefixHelix(it) },\r\n            channelId = channelId,\r\n            period = helixPeriod,\r\n            broadcastType = helixBroadcastTypes,\r\n            sort = helixSort,\r\n            limit = params.loadSize,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/57", "ground_truth": "            offset = offset\r\n        )\r\n        offset = get.cursor\r\n        return get.data\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\ChannelVideosDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.ui.Video\nprivate suspend fun gqlLoad(params: LoadParams<Int>): List<Video> {\r\n        val get = gqlApi.loadChannelVideos(gqlHeaders, channelLogin, gqlType, gqlSort, params.loadSize, offset)\r\n        offset = get.cursor\r", "choices": [{"text": "//        Log.d(\"gqlLoad\", \"offset = $offset\")\r\n        return get.videos.map { it.toVideo() }\r\n    }\r\n\r\n    private suspend fun gqlLoadAfter(params: LoadParams<Int>): List<Video> {\r\n        val get = gqlApi.loadChannelVideos(gqlHeaders, channelLogin, gqlType, gqlSort, params.loadSize, offset)\r\n        offset = get.cursor\r\n//        Log.d(\"gqlLoadAfter\", \"offset = $offset\")\r\n        return get.videos.map { it.toVideo() }\r\n    }\r\n\r\n    private suspend"}], "metadata": {"task_id": "Xtra/58", "ground_truth": "        nextPage = get.hasNextPage ?: true\r\n        return get.data\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\ChannelVideosDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.Video\nimport androidx.paging.PagingState\noverride fun getRefreshKey(state: PagingState<Int, Video>): Int? {\r\n        return state.anchorPosition?.let { anchorPosition ->\r\n            val anchorPage = state.closestPageToPosition(anchorPosition)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/59", "ground_truth": "            anchorPage?.prevKey?.plus(1) ?: anchorPage?.nextKey?.minus(1)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\ChannelVideosDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.TwitchApiHelper\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.ui.User\nprivate suspend fun helixLoad(): List<User> {\r\n        val get = helixApi.getUserFollows(\r\n            clientId = helixClientId,\r\n            token = helixToken?.let { TwitchApiHelper.addTokenPrefixHelix(it) },\r\n            userId = userId,\r\n            limit = 100,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/60", "ground_truth": "            offset = offset\r\n        )\r\n        offset = get.cursor\r\n        return get.data\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\FollowedChannelsDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.ui.User\nprivate suspend fun gqlLoad(): List<User> {\r\n        val get = gqlApi.loadFollowedChannels(gqlHeaders, 100, offset)\r\n        offset = get.cursor\r", "choices": [{"text": "//        Log.d(\"gqlLoad\", \"offset: $offset\")\r\n        return get.items\r\n    }\n"}], "metadata": {"task_id": "Xtra/61", "ground_truth": "        nextPage = get.hasNextPage ?: true\r\n        return get.data\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\FollowedChannelsDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.User\nimport androidx.paging.PagingState\noverride fun getRefreshKey(state: PagingState<Int, User>): Int? {\r\n        return state.anchorPosition?.let { anchorPosition ->\r\n            val anchorPage = state.closestPageToPosition(anchorPosition)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/62", "ground_truth": "            anchorPage?.prevKey?.plus(1) ?: anchorPage?.nextKey?.minus(1)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\FollowedChannelsDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.Game\nprivate suspend fun gqlLoad(): List<Game> {\r", "choices": [{"text": "-    val query = \"\"\"\r\n-        query {\r\n-            games {\r\n-                id\r\n-                name\r\n-                description\r\n-                image\r\n-                price\r\n-                rating\r\n-                releaseDate\r\n-                genres {\r\n-                    id\r\n-                    name\r\n-                }\r\n-                platforms {\r\n-                    id\r\n-                    name\r\n-                }\r\n-            }\r\n-        }\r\n-    \"\"\".trimIndent()\r\n-    val response = client.query("}], "metadata": {"task_id": "Xtra/63", "ground_truth": "        val get = gqlApi.loadFollowedGames(gqlHeaders, 100)\r\n        return get.data\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\FollowedGamesDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.Game\nimport androidx.paging.PagingState\noverride fun getRefreshKey(state: PagingState<Int, Game>): Int? {\r\n        return state.anchorPosition?.let { anchorPosition ->\r\n            val anchorPage = state.closestPageToPosition(anchorPosition)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/64", "ground_truth": "            anchorPage?.prevKey?.plus(1) ?: anchorPage?.nextKey?.minus(1)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\FollowedGamesDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.Stream\nprivate suspend fun gqlLoad(): List<Stream> {\r\n        val get = gqlApi.loadFollowedStreams(gqlHeaders, 100, offset)\r\n        offset = get.cursor\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/65", "ground_truth": "        nextPage = get.hasNextPage ?: true\r\n        return get.data\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\FollowedStreamsDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.Stream\nimport androidx.paging.PagingState\noverride fun getRefreshKey(state: PagingState<Int, Stream>): Int? {\r\n        return state.anchorPosition?.let { anchorPosition ->\r\n            val anchorPage = state.closestPageToPosition(anchorPosition)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/66", "ground_truth": "            anchorPage?.prevKey?.plus(1) ?: anchorPage?.nextKey?.minus(1)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\FollowedStreamsDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.Video\nprivate suspend fun gqlLoad(params: LoadParams<Int>): List<Video> {\r\n        val get = gqlApi.loadFollowedVideos(gqlHeaders, params.loadSize, offset)\r\n        offset = get.cursor\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/67", "ground_truth": "        nextPage = get.hasNextPage ?: true\r\n        return get.data\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\FollowedVideosDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.Video\nimport androidx.paging.PagingState\noverride fun getRefreshKey(state: PagingState<Int, Video>): Int? {\r\n        return state.anchorPosition?.let { anchorPosition ->\r\n            val anchorPage = state.closestPageToPosition(anchorPosition)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/68", "ground_truth": "            anchorPage?.prevKey?.plus(1) ?: anchorPage?.nextKey?.minus(1)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\FollowedVideosDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.ui.Clip\nprivate suspend fun gqlLoad(params: LoadParams<Int>): List<Clip> {\r\n        val get = gqlApi.loadGameClips(gqlHeaders, gameSlug, gqlPeriod, params.loadSize, offset)\r\n        offset = get.cursor\r\n        nextPage = get.hasNextPage ?: true\r\n        return get.data.onEach {\r", "choices": [{"text": "\n import com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.ui.Clip\nprivate suspend fun gqlLoad(params: LoadParams<Int>): List<Clip> {\r\n        val get = gqlApi.loadGameClips(gqlHeaders, gameSlug, gqlPeriod, params.loadSize, offset)\r\n        offset = get.cursor\r\n        nextPage = get.hasNextPage?: true\r\n        return get.data.onEach {\r\n//            it.clip.clipUrl = it.clip.clipUrl.replace(\"https://\", \"http://\")\r\n            it.clip.clipUrl = it.clip.clipUrl.replace(\"https://\", \"http://\")\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Xtra/69", "ground_truth": "            it.gameId = gameId\r\n            it.gameSlug = gameSlug\r\n            it.gameName = gameName\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\GameClipsDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.ui.Clip\nimport androidx.paging.PagingState\noverride fun getRefreshKey(state: PagingState<Int, Clip>): Int? {\r\n        return state.anchorPosition?.let { anchorPosition ->\r\n            val anchorPage = state.closestPageToPosition(anchorPosition)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/70", "ground_truth": "            anchorPage?.prevKey?.plus(1) ?: anchorPage?.nextKey?.minus(1)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\GameClipsDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.TwitchApiHelper\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.ui.Game\nprivate suspend fun helixLoad(params: LoadParams<Int>): List<Game> {\r\n        val get = helixApi.getTopGames(\r\n            clientId = helixClientId,\r\n            token = helixToken?.let { TwitchApiHelper.addTokenPrefixHelix(it) },\r\n            limit = params.loadSize,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/71", "ground_truth": "            offset = offset\r\n        )\r\n        offset = get.cursor\r\n        return get.data\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\GamesDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.Game\nprivate suspend fun gqlLoad(params: LoadParams<Int>): List<Game> {\r\n        val get = gqlApi.loadTopGames(gqlHeaders, tags, params.loadSize, offset)\r\n        offset = get.cursor\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/72", "ground_truth": "        nextPage = get.hasNextPage ?: true\r\n        return get.data\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\GamesDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.Game\nimport androidx.paging.PagingState\noverride fun getRefreshKey(state: PagingState<Int, Game>): Int? {\r\n        return state.anchorPosition?.let { anchorPosition ->\r\n            val anchorPage = state.closestPageToPosition(anchorPosition)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/73", "ground_truth": "            anchorPage?.prevKey?.plus(1) ?: anchorPage?.nextKey?.minus(1)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\GamesDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.Stream\nprivate suspend fun gqlLoad(params: LoadParams<Int>): List<Stream> {\r\n        val get = gqlApi.loadGameStreams(gqlHeaders, gameSlug, gqlSort?.value, tags, params.loadSize, offset)\r\n        offset = get.cursor\r\n        nextPage = get.hasNextPage ?: true\r\n        return get.data.onEach {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/74", "ground_truth": "            it.gameId = gameId\r\n            it.gameSlug = gameSlug\r\n            it.gameName = gameName\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\GameStreamsDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.Stream\nimport androidx.paging.PagingState\noverride fun getRefreshKey(state: PagingState<Int, Stream>): Int? {\r\n        return state.anchorPosition?.let { anchorPosition ->\r\n            val anchorPage = state.closestPageToPosition(anchorPosition)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/75", "ground_truth": "            anchorPage?.prevKey?.plus(1) ?: anchorPage?.nextKey?.minus(1)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\GameStreamsDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.Video\nprivate suspend fun gqlLoad(params: LoadParams<Int>): List<Video> {\r\n        val get = gqlApi.loadGameVideos(gqlHeaders, gameSlug, gqlType, gqlSort, params.loadSize, offset)\r\n        offset = get.cursor\r\n        nextPage = get.hasNextPage ?: true\r\n        return get.data.onEach {\r", "choices": [{"text": "\n import com.github.andreyasadchy.xtra.model.ui.Video\nprivate suspend fun gqlLoad(params: LoadParams<Int>): List<Video> {\r\n        val get = gqlApi.loadGameVideos(gqlHeaders, gameSlug, gqlType, gqlSort, params.loadSize, offset)\r\n        offset = get.cursor\r\n        nextPage = get.hasNextPage?: true\r\n        return get.data.onEach {\r\n//            it.thumbnail = it.thumbnail.replace(\"https://\", \"http://\")\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Xtra/76", "ground_truth": "            it.gameId = gameId\r\n            it.gameSlug = gameSlug\r\n            it.gameName = gameName\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\GameVideosDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.Video\nimport androidx.paging.PagingState\noverride fun getRefreshKey(state: PagingState<Int, Video>): Int? {\r\n        return state.anchorPosition?.let { anchorPosition ->\r\n            val anchorPage = state.closestPageToPosition(anchorPosition)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/77", "ground_truth": "            anchorPage?.prevKey?.plus(1) ?: anchorPage?.nextKey?.minus(1)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\GameVideosDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.TwitchApiHelper\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.ui.User\nprivate suspend fun helixLoad(params: LoadParams<Int>): List<User> {\r\n        val get = helixApi.getSearchChannels(\r\n            clientId = helixClientId,\r\n            token = helixToken?.let { TwitchApiHelper.addTokenPrefixHelix(it) },\r\n            query = query,\r\n            limit = params.loadSize,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/78", "ground_truth": "            offset = offset\r\n        )\r\n        offset = get.cursor\r\n        return get.data\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\SearchChannelsDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.ui.User\nprivate suspend fun gqlLoad(): List<User> {\r\n        val get = gqlApi.loadSearchChannels(gqlHeaders, query, offset)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Xtra/79", "ground_truth": "        offset = get.cursor\r\n        return get.data\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\SearchChannelsDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.User\nimport androidx.paging.PagingState\noverride fun getRefreshKey(state: PagingState<Int, User>): Int? {\r\n        return state.anchorPosition?.let { anchorPosition ->\r\n            val anchorPage = state.closestPageToPosition(anchorPosition)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/80", "ground_truth": "            anchorPage?.prevKey?.plus(1) ?: anchorPage?.nextKey?.minus(1)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\SearchChannelsDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.TwitchApiHelper\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.ui.Game\nprivate suspend fun helixLoad(params: LoadParams<Int>): List<Game> {\r\n        val get = helixApi.getSearchGames(\r\n            clientId = helixClientId,\r\n            token = helixToken?.let { TwitchApiHelper.addTokenPrefixHelix(it) },\r\n            query = query,\r\n            limit = params.loadSize,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/81", "ground_truth": "            offset = offset\r\n        )\r\n        offset = get.cursor\r\n        return get.data\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\SearchGamesDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.Game\nprivate suspend fun gqlLoad(): List<Game> {\r\n        val get = gqlApi.loadSearchGames(gqlHeaders, query, offset)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Xtra/82", "ground_truth": "        offset = get.cursor\r\n        return get.data\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\SearchGamesDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.Game\nimport androidx.paging.PagingState\noverride fun getRefreshKey(state: PagingState<Int, Game>): Int? {\r\n        return state.anchorPosition?.let { anchorPosition ->\r\n            val anchorPage = state.closestPageToPosition(anchorPosition)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/83", "ground_truth": "            anchorPage?.prevKey?.plus(1) ?: anchorPage?.nextKey?.minus(1)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\SearchGamesDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.Stream\nimport androidx.paging.PagingState\noverride fun getRefreshKey(state: PagingState<Int, Stream>): Int? {\r\n        return state.anchorPosition?.let { anchorPosition ->\r\n            val anchorPage = state.closestPageToPosition(anchorPosition)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/84", "ground_truth": "            anchorPage?.prevKey?.plus(1) ?: anchorPage?.nextKey?.minus(1)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\SearchStreamsDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.Video\nprivate suspend fun gqlLoad(): List<Video> {\r\n        val get = gqlApi.loadSearchVideos(gqlHeaders, query, offset)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Xtra/85", "ground_truth": "        offset = get.cursor\r\n        return get.data\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\SearchVideosDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.Video\nimport androidx.paging.PagingState\noverride fun getRefreshKey(state: PagingState<Int, Video>): Int? {\r\n        return state.anchorPosition?.let { anchorPosition ->\r\n            val anchorPage = state.closestPageToPosition(anchorPosition)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/86", "ground_truth": "            anchorPage?.prevKey?.plus(1) ?: anchorPage?.nextKey?.minus(1)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\SearchVideosDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.Stream\nprivate suspend fun gqlLoad(params: LoadParams<Int>): List<Stream> {\r\n        val get = gqlApi.loadTopStreams(gqlHeaders, tags, params.loadSize, offset)\r\n        offset = get.cursor\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/87", "ground_truth": "        nextPage = get.hasNextPage ?: true\r\n        return get.data\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\StreamsDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.Stream\nimport androidx.paging.PagingState\noverride fun getRefreshKey(state: PagingState<Int, Stream>): Int? {\r\n        return state.anchorPosition?.let { anchorPosition ->\r\n            val anchorPage = state.closestPageToPosition(anchorPosition)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/88", "ground_truth": "            anchorPage?.prevKey?.plus(1) ?: anchorPage?.nextKey?.minus(1)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\StreamsDataSource.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.Tag\noverride suspend fun load(params: LoadParams<Int>): LoadResult<Int, Tag> {\r\n        return try {\r\n            val response = if (query.isBlank()) listOf() else if (getGameTags) {\r\n                api.loadGameTags(gqlHeaders, query, 100).data\r\n            } else {\r\n                api.loadFreeformTags(gqlHeaders, query, 100).data\r\n            }\r\n            LoadResult.Page(\r\n                data = response,\r\n                prevKey = null,\r\n                nextKey = null\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/89", "ground_truth": "            )\r\n        } catch (e: Exception) {\r\n            LoadResult.Error(e)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\TagsDataSourceGQL.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.Tag\nimport androidx.paging.PagingState\noverride fun getRefreshKey(state: PagingState<Int, Tag>): Int? {\r\n        return state.anchorPosition?.let { anchorPosition ->\r\n            val anchorPage = state.closestPageToPosition(anchorPosition)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/90", "ground_truth": "            anchorPage?.prevKey?.plus(1) ?: anchorPage?.nextKey?.minus(1)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\datasource\\TagsDataSourceGQL.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.prefs\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.XtraApp\nimport android.content.Context\nfun updateVideoPosition(id: Int, position: Long) {\r\n        val appContext = XtraApp.INSTANCE.applicationContext\r\n        if (appContext.prefs().getBoolean(C.PLAYER_USE_VIDEOPOSITIONS, true)) {\r", "choices": [{"text": "//            val videoPosition = appContext.prefs().getLong(C.PLAYER_VIDEOPOSITIONS + id, 0)\r\n//            if (videoPosition!= position) {\r\n//                appContext.prefs().edit().putLong(C.PLAYER_VIDEOPOSITIONS + id, position).apply()\r\n//            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Xtra/93", "ground_truth": "            GlobalScope.launch { videosDao.updatePosition(id, position) }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\OfflineRepository.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.GlobalScope\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.ui.download.DownloadService\nimport com.github.andreyasadchy.xtra.model.offline.Request\nimport android.content.Context\nfun resumeDownloads(context: Context) {\r\n        GlobalScope.launch {\r\n            requestsDao.getAll().forEach {\r\n                if (DownloadService.activeRequests.add(it.offlineVideoId)) {\r", "choices": [{"text": "//                    Log.d(C.TAG, \"resumeDownloads: ${it.offlineVideoId}\")\r\n                    DownloadService.enqueue(context, it)\r\n                }\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Xtra/94", "ground_truth": "                    DownloadUtils.download(context, it)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\OfflineRepository.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.prefs\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.VideoPosition\nimport com.github.andreyasadchy.xtra.XtraApp\nfun saveVideoPosition(position: VideoPosition) {\r\n        val appContext = XtraApp.INSTANCE.applicationContext\r\n        if (appContext.prefs().getBoolean(C.PLAYER_USE_VIDEOPOSITIONS, true)) {\r", "choices": [{"text": "//            val videoPosition = VideoPosition(position.videoId, position.position)\r\n//            val videoPositionDao = appContext.videoPositionDao()\r\n//            videoPositionDao.insert(videoPosition)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Xtra/97", "ground_truth": "            GlobalScope.launch {\r\n                videoPositions.insert(position)\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\repository\\PlayerRepository.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.ui.videos.channel.ChannelVideosFragment\nimport com.github.andreyasadchy.xtra.ui.clips.common.ClipsFragment\nimport com.github.andreyasadchy.xtra.ui.chat.ChatFragment\nimport androidx.fragment.app.Fragment\noverride fun createFragment(position: Int): Fragment {\r\n        return when (position) {\r\n            0 -> ChannelVideosFragment().apply { arguments = fragment.arguments }\r\n            1 -> ClipsFragment().apply { arguments = fragment.arguments }\r\n            else -> ChatFragment.newInstance(\r\n                channelId = args.channelId,\r\n                channelLogin = args.channelLogin,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/98", "ground_truth": "                channelName = args.channelName,\r\n                streamId = args.streamId\r\n            )\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\channel\\ChannelPagerAdapter.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/99", "ground_truth": "        _binding = FragmentChannelBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\channel\\ChannelPagerFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.R\nimport android.content.res.Configuration\noverride fun onConfigurationChanged(newConfig: Configuration) {\r\n        super.onConfigurationChanged(newConfig)\r\n        if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {\r", "choices": [{"text": "//            val params = window.attributes\r\n//            params.width = WindowManager.LayoutParams.MATCH_PARENT\r\n//            params.height = WindowManager.LayoutParams.MATCH_PARENT\r\n//            window.attributes = params\r\n            val params = window.attributes\r\n            params.width = WindowManager.LayoutParams.MATCH_PARENT\r\n            params.height = WindowManager.LayoutParams.MATCH_PARENT\r\n            window.attributes = params\r\n        } else {\r\n            val params = window.attributes\r\n            params.width = WindowManager.LayoutParams.MATCH_PARENT\r\n            params.height = WindowManager.LayoutParams.MATCH_PARENT\r\n            window"}], "metadata": {"task_id": "Xtra/100", "ground_truth": "            binding.appBar.setExpanded(false, false)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\channel\\ChannelPagerFragment.kt"}}
{"prompt": "\n override fun scrollToTop() {\r", "choices": [{"text": "//    val scrollView = findViewById<ScrollView>(R.id.scrollView)\r\n//    scrollView.fullScroll(ScrollView.FOCUS_UP)\r\n    val recyclerView = findViewById<RecyclerView>(R.id.recyclerView)\r\n    recyclerView.smoothScrollToPosition(0)\r\n}\r\n"}], "metadata": {"task_id": "Xtra/102", "ground_truth": "        binding.appBar.setExpanded(true, true)\r\n        (currentFragment as? Scrollable)?.scrollToTop()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\channel\\ChannelPagerFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/103", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\channel\\ChannelPagerFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.ui.User\nimport com.github.andreyasadchy.xtra.model.ui.Stream\nimport androidx.lifecycle.viewModelScope\nfun loadStream(helixClientId: String?, helixToken: String?, gqlHeaders: Map<String, String>, checkIntegrity: Boolean) {\r\n        if (!_stream.isInitialized) {\r\n            viewModelScope.launch {\r\n                try {\r\n                    repository.loadUserChannelPage(args.channelId, args.channelLogin, helixClientId, helixToken, gqlHeaders, checkIntegrity)?.let { _stream.postValue(it) }\r\n                } catch (e: Exception) {\r\n                    if (e.message == \"failed integrity check\") {\r\n                        _integrity.postValue(true)\r", "choices": [{"text": "//                        _stream.postValue(null)\r\n                    } else {\r\n                        _error.postValue(e.message)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Xtra/104", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\channel\\ChannelPagerViewModel.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/107", "ground_truth": "        _binding = FragmentChatBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\chat\\ChatFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.hideKeyboard\nfun hideKeyboard() {\r", "choices": [{"text": "hideKeyboard(this)\r\n}\r\n"}], "metadata": {"task_id": "Xtra/111", "ground_truth": "        binding.chatView.hideKeyboard()\r\n        binding.chatView.clearFocus()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\chat\\ChatFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.R\noverride fun onNetworkRestored() {\r\n        if (isResumed) {\r", "choices": [{"text": "//            Snackbar.make(view, R.string.network_restored, Snackbar.LENGTH_SHORT).show()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Xtra/113", "ground_truth": "            viewModel.start()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\chat\\ChatFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.prefs\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.R\noverride fun onMovedToBackground() {\r\n        if (!requireArguments().getBoolean(KEY_IS_LIVE) || !requireContext().prefs().getBoolean(C.PLAYER_KEEP_CHAT_OPEN, false) || requireContext().prefs().getBoolean(C.CHAT_DISABLE, false)) {\r", "choices": [{"text": "\n import com.github.andreyasadchy.xtra.util.prefs\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.R\noverride fun onMovedToBackground() {\r\n        if (!requireArguments().getBoolean(KEY_IS_LIVE) ||!requireContext().prefs().getBoolean(C.PLAYER_KEEP_CHAT_OPEN, false) || requireContext().prefs().getBoolean(C.CHAT_DISABLE, false)) {\r\n//            requireActivity().finish()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Xtra/114", "ground_truth": "            viewModel.stop()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\chat\\ChatFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.prefs\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.R\noverride fun onMovedToForeground() {\r\n        if (!requireArguments().getBoolean(KEY_IS_LIVE) || !requireContext().prefs().getBoolean(C.PLAYER_KEEP_CHAT_OPEN, false) || requireContext().prefs().getBoolean(C.CHAT_DISABLE, false)) {\r", "choices": [{"text": "\n import com.github.andreyasadchy.xtra.util.prefs\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.R\noverride fun onMovedToForeground() {\r\n        if (!requireArguments().getBoolean(KEY_IS_LIVE) ||!requireContext().prefs().getBoolean(C.PLAYER_KEEP_CHAT_OPEN, false) || requireContext().prefs().getBoolean(C.CHAT_DISABLE, false)) {\r\n//            requireActivity().finish()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Xtra/115", "ground_truth": "            viewModel.start()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\chat\\ChatFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/116", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\chat\\ChatFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.chat.Raid\nimport com.github.andreyasadchy.xtra.util.C\noverride fun onRaidClicked() {\r", "choices": [{"text": "if (C.isRaid) {\r\nC.isRaid = false\r\nC.raid = null\r\n} else {\r\nC.isRaid = true\r\nC.raid = Raid(C.player.name, C.player.uuid)\r\n}\r\n}\n"}], "metadata": {"task_id": "Xtra/118", "ground_truth": "        raidAutoSwitch = false\r\n        raidClicked.postValue(true)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\chat\\ChatViewModel.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.chat.Raid\nimport com.github.andreyasadchy.xtra.util.C\noverride fun onRaidClose() {\r", "choices": [{"text": "}\r\noverride fun onRaidOpen() {\r\n}\r\noverride fun onRaidUpdate(raid: Raid) {\r\n}\r\noverride fun onRaidUpdate(raid: Raid, isNew: Boolean) {\r\n}\r\noverride fun onRaidUpdate(raid: Raid, isNew: Boolean, isRemoved: Boolean) {\r\n}\r\noverride fun onRaidUpdate(raid: Raid, isNew: Boolean, isRemoved: Boolean, isUpdated: Boolean) {\r\n}\r\noverride fun onRaidUpdate(raid:"}], "metadata": {"task_id": "Xtra/119", "ground_truth": "        raidAutoSwitch = false\r\n        raidClosed = true\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\chat\\ChatViewModel.kt"}}
{"prompt": " import com.github.andreyasadchy.xtra.util.C\nvar chat ChatController?\nvar chatReadWebSocket ChatReadWebSocket?\nval chatters Collection<Chatter>?\noverride fun onCleared() {\r", "choices": [{"text": "super.onCleared()\r\nchatReadWebSocket?.close()\r\n}\n"}], "metadata": {"task_id": "Xtra/120", "ground_truth": "        chat?.stop()\r\n        super.onCleared()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\chat\\ChatViewModel.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\noverride fun pause() {\r\n            chatReadIRC?.disconnect() ?: chatReadWebSocket?.disconnect()\r", "choices": [{"text": "\n import com.github.andreyasadchy.xtra.util.C\noverride fun pause() {\r\n            chatReadIRC?.disconnect()?: chatReadWebSocket?.disconnect()\r\n}\n"}], "metadata": {"task_id": "Xtra/123", "ground_truth": "            chatWriteIRC?.disconnect() ?: chatWriteWebSocket?.disconnect()\r\n            pubSub?.disconnect()\r\n        }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\chat\\ChatViewModel.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.chat.ChatMessage\noverride fun onMessage(message: ChatMessage) {\r", "choices": [{"text": "//    val message = message.message\r\n//    val messageType = message.type\r\n//    val messageText = message.text\r\n//    val messageDate = message.date\r\n//    val messageSender = message.sender\r\n//    val messageSenderId = message.senderId\r\n//    val messageSenderName = message.senderName\r\n//    val messageSenderAvatar = message.senderAvatar\r\n//    val messageSenderAvatarColor = message.senderAvatarColor\r\n//    val messageSenderAvatarColorName = message.senderAvatarColorName\r\n//   "}], "metadata": {"task_id": "Xtra/124", "ground_truth": "            super.onMessage(message)\r\n            addChatter(message.userName)\r\n        }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\chat\\ChatViewModel.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.chat.Emote\noverride fun onUserState(emoteSets: List<String>?) {\r\n            if (savedEmoteSets != emoteSets) {\r\n                savedEmoteSets = emoteSets\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/125", "ground_truth": "                if (!loadedUserEmotes) {\r\n                    loadEmoteSets()\r\n                }\r\n            }\r\n        }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\chat\\ChatViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.github.andreyasadchy.xtra.util.C\nimport androidx.lifecycle.viewModelScope\nimport android.util.Log\noverride fun onClaimAvailable() {\r\n            if (!gqlHeaders[C.HEADER_TOKEN].isNullOrBlank()) {\r\n                viewModelScope.launch {\r\n                    try {\r\n                        repository.loadClaimPoints(gqlHeaders, channelId, channelLogin)\r\n                    } catch (e: Exception) {\r\n                        if (e.message == \"failed integrity check\") {\r\n                            _integrity.postValue(true)\r", "choices": [{"text": "//                            _error.postValue(e.message)\r\n                        } else {\r\n                            _error.postValue(e.message)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\n"}], "metadata": {"task_id": "Xtra/127", "ground_truth": "                        }\r\n                    }\r\n                }\r\n            }\r\n        }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\chat\\ChatViewModel.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.chat.ChatMessage\noverride fun onMessage(message: ChatMessage) {\r", "choices": [{"text": "//    val message = message.message\r\n//    val messageType = message.type\r\n//    val messageText = message.text\r\n//    val messageDate = message.date\r\n//    val messageSender = message.sender\r\n//    val messageSenderId = message.senderId\r\n//    val messageSenderName = message.senderName\r\n//    val messageSenderAvatar = message.senderAvatar\r\n//    val messageSenderAvatarColor = message.senderAvatarColor\r\n//    val messageSenderAvatarColorName = message.senderAvatarColorName\r\n//   "}], "metadata": {"task_id": "Xtra/132", "ground_truth": "            _chatMessages.value?.add(message)\r\n            _newMessage.postValue(message)\r\n        }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\chat\\ChatViewModel.kt"}}
{"prompt": "\nvar lastSelectedItem Clip?\n override fun showDownloadDialog() {\r\n        lastSelectedItem?.let {\r", "choices": [{"text": "//            val dialog = DownloadDialog(it)\r\n//            dialog.show(supportFragmentManager, \"download\")\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Xtra/133", "ground_truth": "            ClipDownloadDialog.newInstance(it).show(childFragmentManager, null)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\clips\\BaseClipsFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/136", "ground_truth": "        _binding = CommonRecyclerViewLayoutBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\clips\\common\\ClipsFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/137", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\clips\\common\\ClipsFragment.kt"}}
{"prompt": "\n override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        if (enableNetworkCheck) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/139", "ground_truth": "            isInitialized = false\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\common\\BaseNetworkFragment.kt"}}
{"prompt": "\nvar created\nvar isInitialized\nval CREATED_KEY\n private fun init() {\r\n        initialize()\r", "choices": [{"text": "}\r\nprivate fun initialize() {\r\n        if (isInitialized) {\r\n            return\r\n        }\r\n        synchronized(this) {\r\n            if (isInitialized) {\r\n                return\r\n            }\r\n            created = true\r\n            isInitialized = true\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Xtra/141", "ground_truth": "        isInitialized = true\r\n        created = true\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\common\\BaseNetworkFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.chat.Image\nimport com.github.andreyasadchy.xtra.R\nimport androidx.recyclerview.widget.RecyclerView\nimport androidx.core.text.getSpans\nimport android.widget.TextView\nimport android.view.View\nimport android.text.style.ImageSpan\nimport android.text.Spannable\nimport android.graphics.drawable.Animatable\noverride fun onDetachedFromRecyclerView(recyclerView: RecyclerView) {\r\n        val childCount = recyclerView.childCount\r\n        if (animateGifs) {\r\n            for (i in 0 until childCount) {\r\n                ((recyclerView.getChildAt(i) as TextView).text as? Spannable)?.getSpans<ImageSpan>()?.forEach {\r\n                    (it.drawable as? Animatable)?.stop()\r", "choices": [{"text": "//                    it.drawable.stop()\r\n                }\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Xtra/144", "ground_truth": "                }\r\n            }\r\n        }\r\n        super.onDetachedFromRecyclerView(recyclerView)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\common\\ChatAdapter.kt"}}
{"prompt": "\n import java.util.Random\nimport com.github.andreyasadchy.xtra.R\nimport android.graphics.Color\nprivate fun getRandomColor(): Int =\r\n        if (randomColor) {\r\n            twitchColors[random.nextInt(twitchColors.size)]\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/145", "ground_truth": "        } else {\r\n            noColor\r\n        }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\common\\ChatAdapter.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\nimport android.graphics.Rect\noverride fun getItemOffsets(outRect: Rect, view: View, parent: RecyclerView, state: RecyclerView.State) {\r\n        with(outRect) {\r\n            val position = parent.getChildAdapterPosition(view)\r\n            if (position >= columnCount) {\r\n                top = sizeDp\r\n            }\r\n            if ((position + 1) % columnCount != 0) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/147", "ground_truth": "                right = sizeDp\r\n            }\r\n            bottom = sizeDp\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\common\\MarginItemDecoration.kt"}}
{"prompt": "\n import android.content.Context\noverride fun onAttach(context: Context) {\r", "choices": [{"text": "super.onAttach(context)\r\nval activity = context as Activity\r\nactivity.window.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/150", "ground_truth": "        super.onAttach(context)\r\n        listenerSort = parentFragment as OnSortOptionChanged\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\common\\RadioButtonDialogFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.ui.Clip\nimport android.app.Dialog\nfun newInstance(clip: Clip, qualities: Map<String, String>? = null): ClipDownloadDialog {\r\n            return ClipDownloadDialog().apply {\r", "choices": [{"text": "arguments = Bundle().apply {\r\nputParcelable(C.CLIP, clip)\r\nputSerializable(C.QUALITIES, qualities)\r\n}\r\n}\r\n}\r\nclass ClipDownloadDialog : DialogFragment() {\r\noverride fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\r\nval clip = arguments!!.getParcelable<Clip>(C.CLIP)\r\nval qualities = arguments!!.getSerializable(C.QUALITIES) as? Map<String, String>\r\nval builder = AlertDialog.Builder(activity)\r\nbuilder.setTitle(R.string.download_clip"}], "metadata": {"task_id": "Xtra/151", "ground_truth": "                arguments = bundleOf(KEY_CLIP to clip, KEY_QUALITIES to qualities)\r\n            }\r\n        }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\download\\ClipDownloadDialog.kt"}}
{"prompt": "\n override fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\n_binding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/152", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\download\\ClipDownloadDialog.kt"}}
{"prompt": "\n override fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\n_binding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/158", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\download\\VideoDownloadDialog.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.Video\nimport com.github.andreyasadchy.xtra.model.VideoDownloadInfo\nfun setVideoInfo(videoInfo: VideoDownloadInfo) {\r\n        if (_videoInfo.value != videoInfo) {\r", "choices": [{"text": "\n import com.github.andreyasadchy.xtra.model.ui.Video\nimport com.github.andreyasadchy.xtra.model.VideoDownloadInfo\nfun setVideoInfo(videoInfo: VideoDownloadInfo) {\r\n        if (_videoInfo.value!= videoInfo) {\r\n//            _videoInfo.value = videoInfo\r\n            _videoInfo.postValue(videoInfo)\r\n        }\r\n    }\r\nfun setVideoInfo(videoInfo: Video) {\r\n        if (_videoInfo.value!= videoInfo) {\r\n//            _videoInfo.value = videoInfo\r\n            _videoInfo.postValue(videoInfo)\r\n        }\r\n    }\r\nfun setVideoInfo(videoInfo: VideoDownloadInfo?) {\r\n        if (_videoInfo.value!= videoInfo) {\r\n//            _videoInfo.value = videoInfo\r\n            _videoInfo.postValue(videoInfo)"}], "metadata": {"task_id": "Xtra/159", "ground_truth": "            _videoInfo.value = videoInfo\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\download\\VideoDownloadViewModel.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/161", "ground_truth": "        _binding = CommonRecyclerViewLayoutBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\follow\\channels\\FollowedChannelsFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Xtra/162", "ground_truth": "        pagingAdapter = FollowedChannelsAdapter(this)\r\n        setAdapter(binding.recyclerView, pagingAdapter)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\follow\\channels\\FollowedChannelsFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.visible\nimport com.github.andreyasadchy.xtra.util.prefs\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.databinding.SortBarBinding\nimport com.github.andreyasadchy.xtra.R\noverride fun setupSortBar(sortBar: SortBarBinding) {\r\n        sortBar.root.visible()\r\n        sortBar.root.setOnClickListener {\r\n            FollowedChannelsSortDialog.newInstance(\r\n                sort = viewModel.sort,\r\n                order = viewModel.order,\r\n                saveDefault = requireContext().prefs().getBoolean(C.SORT_DEFAULT_FOLLOWED_CHANNELS, false)\r\n            ).show(childFragmentManager, null)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Xtra/163", "ground_truth": "        }\r\n        viewModel.sortText.observe(viewLifecycleOwner) {\r\n            sortBar.sortText.text = it\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\follow\\channels\\FollowedChannelsFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.ui.common.FragmentHost\nimport com.github.andreyasadchy.xtra.model.ui.FollowSortEnum\nimport com.github.andreyasadchy.xtra.model.ui.FollowOrderEnum\nimport com.github.andreyasadchy.xtra.R\nimport androidx.paging.PagingData\nimport androidx.lifecycle.lifecycleScope\noverride fun onChange(sort: FollowSortEnum, sortText: CharSequence, order: FollowOrderEnum, orderText: CharSequence, saveDefault: Boolean) {\r\n        if ((parentFragment as? FragmentHost)?.currentFragment == this) {\r\n            viewLifecycleOwner.lifecycleScope.launch {\r\n                pagingAdapter.submitData(PagingData.empty())\r\n                viewModel.filter(\r\n                    sort = sort,\r\n                    order = order,\r\n                    text = getString(R.string.sort_and_order, sortText, orderText),\r", "choices": [{"text": "//                    saveDefault = saveDefault\r\n                )\r\n            }\r\n        }\r\n    }\n}\n"}], "metadata": {"task_id": "Xtra/164", "ground_truth": "                    saveDefault = saveDefault\r\n                )\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\follow\\channels\\FollowedChannelsFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/165", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\follow\\channels\\FollowedChannelsFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.FollowSortEnum\nimport com.github.andreyasadchy.xtra.model.ui.FollowOrderEnum\nfun newInstance(sort: FollowSortEnum, order: FollowOrderEnum, saveDefault: Boolean = false): FollowedChannelsSortDialog {\r\n            return FollowedChannelsSortDialog().apply {\r", "choices": [{"text": "//                arguments = Bundle().apply {\r\n//                    putSerializable(ARG_SORT, sort)\r\n//                    putSerializable(ARG_ORDER, order)\r\n//                    putBoolean(ARG_SAVE_DEFAULT, saveDefault)\r\n//                }\r\n            }\r\n        }\n"}], "metadata": {"task_id": "Xtra/166", "ground_truth": "                arguments = bundleOf(SORT to sort, ORDER to order, SAVE_DEFAULT to saveDefault)\r\n            }\r\n        }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\follow\\channels\\FollowedChannelsSortDialog.kt"}}
{"prompt": "\n import android.content.Context\noverride fun onAttach(context: Context) {\r", "choices": [{"text": "super.onAttach(context)\r\nval activity = context as Activity\r\nactivity.window.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/167", "ground_truth": "        super.onAttach(context)\r\n        listener = parentFragment as OnFilter\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\follow\\channels\\FollowedChannelsSortDialog.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/168", "ground_truth": "        _binding = DialogFollowedChannelsSortBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\follow\\channels\\FollowedChannelsSortDialog.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/169", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\follow\\channels\\FollowedChannelsSortDialog.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval intent = Intent(this, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\nval button = findViewById<Button>(R.id.button)"}], "metadata": {"task_id": "Xtra/170", "ground_truth": "        super.onCreate(savedInstanceState)\r\n        previousItem = savedInstanceState?.getInt(\"previousItem\", -1) ?: -1\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\follow\\FollowMediaFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/171", "ground_truth": "        _binding = FragmentMediaBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\follow\\FollowMediaFragment.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r", "choices": [{"text": "super.onSaveInstanceState(outState)\r\noutState.putInt(\"key\", 1)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\nsuper.onRestoreInstanceState(savedInstanceState)\r\nval value = savedInstanceState.getInt(\"key\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/173", "ground_truth": "        outState.putInt(\"previousItem\", previousItem)\r\n        super.onSaveInstanceState(outState)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\follow\\FollowMediaFragment.kt"}}
{"prompt": "\n override fun scrollToTop() {\r", "choices": [{"text": "//    val scrollView = findViewById<ScrollView>(R.id.scrollView)\r\n//    scrollView.fullScroll(ScrollView.FOCUS_UP)\r\n    val recyclerView = findViewById<RecyclerView>(R.id.recyclerView)\r\n    recyclerView.smoothScrollToPosition(0)\r\n}\r\n"}], "metadata": {"task_id": "Xtra/175", "ground_truth": "        binding.appBar.setExpanded(true, true)\r\n        (currentFragment as? Scrollable)?.scrollToTop()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\follow\\FollowMediaFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/176", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\follow\\FollowMediaFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval intent = Intent(this, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\nval button = findViewById<Button>(R.id.button)"}], "metadata": {"task_id": "Xtra/178", "ground_truth": "        super.onCreate(savedInstanceState)\r\n        firstLaunch = savedInstanceState == null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\follow\\FollowPagerFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/179", "ground_truth": "        _binding = FragmentMediaPagerBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\follow\\FollowPagerFragment.kt"}}
{"prompt": "\n override fun scrollToTop() {\r", "choices": [{"text": "//    val scrollView = findViewById<ScrollView>(R.id.scrollView)\r\n//    scrollView.fullScroll(ScrollView.FOCUS_UP)\r\n    val recyclerView = findViewById<RecyclerView>(R.id.recyclerView)\r\n    recyclerView.smoothScrollToPosition(0)\r\n}\r\n"}], "metadata": {"task_id": "Xtra/181", "ground_truth": "        binding.appBar.setExpanded(true, true)\r\n        (currentFragment as? Scrollable)?.scrollToTop()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\follow\\FollowPagerFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/182", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\follow\\FollowPagerFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/184", "ground_truth": "        _binding = CommonRecyclerViewLayoutBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\follow\\games\\FollowedGamesFragment.kt"}}
{"prompt": "\n import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r", "choices": [{"text": "}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n}\r\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\noverride fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)\r\n}\r\noverride fun onViewStateRestored(savedInstanceState: Bundle?) {\r\n        super.onViewStateRestored(savedInstanceState)\r\n}\r\noverride fun onStart() {\r\n        super"}], "metadata": {"task_id": "Xtra/185", "ground_truth": "        pagingAdapter = FollowedGamesAdapter(this)\r\n        setAdapter(binding.recyclerView, pagingAdapter)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\follow\\games\\FollowedGamesFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/186", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\follow\\games\\FollowedGamesFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval intent = Intent(this, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\nval button = findViewById<Button>(R.id.button)"}], "metadata": {"task_id": "Xtra/187", "ground_truth": "        super.onCreate(savedInstanceState)\r\n        previousItem = savedInstanceState?.getInt(\"previousItem\", -1) ?: -1\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\games\\GameMediaFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/188", "ground_truth": "        _binding = FragmentMediaBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\games\\GameMediaFragment.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r", "choices": [{"text": "super.onSaveInstanceState(outState)\r\noutState.putInt(\"key\", 1)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\nsuper.onRestoreInstanceState(savedInstanceState)\r\nval value = savedInstanceState.getInt(\"key\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/191", "ground_truth": "        outState.putInt(\"previousItem\", previousItem)\r\n        super.onSaveInstanceState(outState)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\games\\GameMediaFragment.kt"}}
{"prompt": "\n override fun scrollToTop() {\r", "choices": [{"text": "//    val scrollView = findViewById<ScrollView>(R.id.scrollView)\r\n//    scrollView.fullScroll(ScrollView.FOCUS_UP)\r\n    val recyclerView = findViewById<RecyclerView>(R.id.recyclerView)\r\n    recyclerView.smoothScrollToPosition(0)\r\n}\r\n"}], "metadata": {"task_id": "Xtra/193", "ground_truth": "        binding.appBar.setExpanded(true, true)\r\n        (currentFragment as? Scrollable)?.scrollToTop()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\games\\GameMediaFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/194", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\games\\GameMediaFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval intent = Intent(this, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\nval button = findViewById<Button>(R.id.button)"}], "metadata": {"task_id": "Xtra/196", "ground_truth": "        super.onCreate(savedInstanceState)\r\n        firstLaunch = savedInstanceState == null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\games\\GamePagerFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/197", "ground_truth": "        _binding = FragmentMediaPagerBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\games\\GamePagerFragment.kt"}}
{"prompt": "\n override fun scrollToTop() {\r", "choices": [{"text": "//    val scrollView = findViewById<ScrollView>(R.id.scrollView)\r\n//    scrollView.fullScroll(ScrollView.FOCUS_UP)\r\n    val recyclerView = findViewById<RecyclerView>(R.id.recyclerView)\r\n    recyclerView.smoothScrollToPosition(0)\r\n}\r\n"}], "metadata": {"task_id": "Xtra/200", "ground_truth": "        binding.appBar.setExpanded(true, true)\r\n        (currentFragment as? Scrollable)?.scrollToTop()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\games\\GamePagerFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/201", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\games\\GamePagerFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/203", "ground_truth": "        _binding = FragmentGamesBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\games\\GamesFragment.kt"}}
{"prompt": "\n override fun scrollToTop() {\r\n        with(binding) {\r\n            appBar.setExpanded(true, true)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/205", "ground_truth": "            recyclerViewLayout.recyclerView.scrollToPosition(0)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\games\\GamesFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/207", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\games\\GamesFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/208", "ground_truth": "        binding.webView.loadUrl(\"about:blank\")\r\n        super.onDestroy()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\login\\LoginActivity.kt"}}
{"prompt": "\n import android.content.DialogInterface\nimport android.app.Dialog\noverride fun onDismiss(dialog: DialogInterface) {\r", "choices": [{"text": "super.onDismiss(dialog)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/209", "ground_truth": "        binding.webView.loadUrl(\"about:blank\")\r\n        super.onDismiss(dialog)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\main\\IntegrityDialog.kt"}}
{"prompt": "\n override fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\n_binding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/210", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\main\\IntegrityDialog.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.R\noverride fun onResume() {\r", "choices": [{"text": "super.onResume()\r\nval intent = Intent(this, MainActivity::class.java)\r\nstartActivity(intent)\r\nfinish()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/212", "ground_truth": "        super.onResume()\r\n        restorePlayerFragment()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\main\\MainActivity.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.R\noverride fun onDestroy() {\r\n        unregisterReceiver(networkReceiver)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Xtra/213", "ground_truth": "        if (isFinishing) {\r\n            playerFragment?.onClose()\r\n        }\r\n        super.onDestroy()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\main\\MainActivity.kt"}}
{"prompt": "\n import android.content.Intent\noverride fun onNewIntent(intent: Intent?) {\r", "choices": [{"text": "super.onNewIntent(intent)\r\nsetIntent(intent)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/214", "ground_truth": "        super.onNewIntent(intent)\r\n        handleIntent(intent)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\main\\MainActivity.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.Stream\nfun startStream(stream: Stream) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Xtra/215", "ground_truth": "//        playerFragment?.play(stream)\r\n        startPlayer(StreamPlayerFragment.newInstance(stream))\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\main\\MainActivity.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.prefs\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.ui.player.BasePlayerFragment\nimport com.github.andreyasadchy.xtra.R\nimport androidx.core.view.isVisible\nprivate fun restorePlayerFragment() {\r\n        if (viewModel.isPlayerOpened) {\r\n            if (playerFragment == null) {\r\n                playerFragment = supportFragmentManager.findFragmentById(R.id.playerContainer) as BasePlayerFragment?\r\n            } else {\r\n                if (playerFragment?.slidingLayout?.secondView?.isVisible == false && prefs.getString(C.PLAYER_BACKGROUND_PLAYBACK, \"0\") == \"0\") {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/216", "ground_truth": "                    playerFragment?.maximize()\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\main\\MainActivity.kt"}}
{"prompt": "\n fun onPlayerStarted() {\r", "choices": [{"text": "//     Log.d(TAG, \"onPlayerStarted\")\r\n//     mPlayer?.playWhenReady = true\r\n//     mPlayer?.seekTo(mCurrentWindow, mPlaybackPosition)\r\n//     mPlaybackPosition = 0\r\n//     mPlayer?.prepare()\r\n// }\r\n"}], "metadata": {"task_id": "Xtra/217", "ground_truth": "        isPlayerOpened = true\r\n        isPlayerMaximized = true\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\main\\MainViewModel.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nfun onPlayerClosed() {\r", "choices": [{"text": "C.log(\"onPlayerClosed\")\r\n}\r\n"}], "metadata": {"task_id": "Xtra/218", "ground_truth": "        isPlayerOpened = false\r\n        isPlayerMaximized = false\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\main\\MainViewModel.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nfun setNetworkAvailable(available: Boolean) {\r\n        if (_isNetworkAvailable.value?.peekContent() != available) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/219", "ground_truth": "            _isNetworkAvailable.value = Event(available)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\main\\MainViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.ui.Video\nimport androidx.lifecycle.viewModelScope\nfun loadVideo(videoId: String?, helixClientId: String? = null, helixToken: String? = null, gqlHeaders: Map<String, String>, checkIntegrity: Boolean) {\r\n        _video.value = null\r\n        viewModelScope.launch {\r\n            try {\r\n                repository.loadVideo(videoId, helixClientId, helixToken, gqlHeaders, checkIntegrity)?.let { _video.postValue(it) }\r\n            } catch (e: Exception) {\r\n                if (e.message == \"failed integrity check\") {\r", "choices": [{"text": "//                    _video.postValue(Video(id = videoId, title = \"Failed integrity check\", description = \"Failed integrity check\", thumbnail = \"https://i.ytimg.com/vi/dQw4w9WgXcQ/maxresdefault.jpg\"))\r\n                } else {\r\n                    _error.postValue(e.message)\r\n                }\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Xtra/220", "ground_truth": "                    _integrity.postValue(true)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\main\\MainViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.ui.Clip\nimport androidx.lifecycle.viewModelScope\nfun loadClip(clipId: String?, helixClientId: String? = null, helixToken: String? = null, gqlHeaders: Map<String, String>, checkIntegrity: Boolean) {\r\n        _clip.value = null\r\n        viewModelScope.launch {\r\n            try {\r\n                repository.loadClip(clipId, helixClientId, helixToken, gqlHeaders, checkIntegrity)?.let { _clip.postValue(it) }\r\n            } catch (e: Exception) {\r\n                if (e.message == \"failed integrity check\") {\r", "choices": [{"text": "//                    _clip.postValue(Clip(clipId, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,"}], "metadata": {"task_id": "Xtra/221", "ground_truth": "                    _integrity.postValue(true)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\main\\MainViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.ui.User\nimport androidx.lifecycle.viewModelScope\nfun loadUser(login: String? = null, helixClientId: String? = null, helixToken: String? = null, gqlHeaders: Map<String, String>, checkIntegrity: Boolean) {\r\n        _user.value = null\r\n        viewModelScope.launch {\r\n            try {\r\n                repository.loadCheckUser(channelLogin = login, helixClientId = helixClientId, helixToken = helixToken, gqlHeaders = gqlHeaders, checkIntegrity = checkIntegrity)?.let { _user.postValue(it) }\r\n            } catch (e: Exception) {\r\n                if (e.message == \"failed integrity check\") {\r", "choices": [{"text": "//                    _user.postValue(User(login = login, helixClientId = helixClientId, helixToken = helixToken, gqlHeaders = gqlHeaders))\r\n                } else {\r\n                    _error.postValue(e.message)\r\n                }\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Xtra/222", "ground_truth": "                    _integrity.postValue(true)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\main\\MainViewModel.kt"}}
{"prompt": "\n override fun initialize() {\r\n        if (player != null && !viewModel.started) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/225", "ground_truth": "            startPlayer()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\BasePlayerFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\noverride fun onClose() {\r\n        player?.pause()\r", "choices": [{"text": "}\r\noverride fun onResume() {\r\n        player?.play()\r\n}\r\noverride fun onPause() {\r\n        player?.pause()\r\n}\r\noverride fun onStop() {\r\n        player?.pause()\r\n}\r\noverride fun onDestroy() {\r\n        player?.release()\r\n}\r\noverride fun onBackPressed() {\r\n        player?.pause()\r\n}\r\noverride fun onConfigurationChanged(newConfig: Configuration) {\r\n        super.onConfigurationChanged(newConfig)\r\n        player?.onConfigurationChanged(newConfig)\r\n}\r\noverride fun onSaveInstanceState("}], "metadata": {"task_id": "Xtra/226", "ground_truth": "        player?.stop()\r\n        releaseController()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\BasePlayerFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.R\nfun setResizeMode() {\r\n        resizeMode = (resizeMode + 1).let { if (it < 5) it else 0 }\r", "choices": [{"text": "}\r\nfun setFitMode() {\r\n        fitMode = (fitMode + 1).let { if (it < 3) it else 0 }\r\n}\r\nfun setScaleType() {\r\n        scaleType = (scaleType + 1).let { if (it < 3) it else 0 }\r\n}\r\nfun setImage() {\r\n        image = (image + 1).let { if (it < 3) it else 0 }\r\n}\r\nfun setImageResource() {\r\n        imageResource = (imageResource + 1).let {"}], "metadata": {"task_id": "Xtra/227", "ground_truth": "        playerView.resizeMode = resizeMode\r\n        prefs.edit { putInt(C.ASPECT_RATIO_LANDSCAPE, resizeMode) }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\BasePlayerFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.delay\nimport com.github.andreyasadchy.xtra.util.shortToast\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.R\nimport androidx.media3.common.Player\nimport androidx.media3.common.PlaybackException\nimport androidx.lifecycle.lifecycleScope\nimport androidx.lifecycle.Lifecycle\nimport android.util.Log\nimport android.content.Context\nopen fun onError(error: PlaybackException) {\r\n        Log.e(tag, \"Player error\", error)\r\n        requireContext().shortToast(R.string.player_error)\r\n        viewLifecycleOwner.lifecycleScope.launch {\r\n            delay(1500L)\r", "choices": [{"text": "//            requireActivity().finish()\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "Xtra/233", "ground_truth": "            try {\r\n                player?.prepare()\r\n            } catch (e: Exception) {}\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\BasePlayerFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.Job\nfun stop() {\r\n        offsetJob.cancel()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Xtra/235", "ground_truth": "        nextJob?.cancel()\r\n        timer.cancel()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\ChatReplayManager.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval intent = Intent(this, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\nval button = findViewById<Button>(R.id.button)"}], "metadata": {"task_id": "Xtra/236", "ground_truth": "        super.onCreate(savedInstanceState)\r\n        clip = requireArguments().getParcelable(KEY_CLIP)!!\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\clip\\ClipPlayerFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.ui.Clip\nimport com.github.andreyasadchy.xtra.databinding.FragmentPlayerClipBinding\nimport com.github.andreyasadchy.xtra.R\nimport android.widget.LinearLayout\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r\n        _binding = FragmentPlayerClipBinding.inflate(inflater, container, false).also {\r\n            (it.slidingLayout as LinearLayout).orientation = if (isPortrait) LinearLayout.VERTICAL else LinearLayout.HORIZONTAL\r", "choices": [{"text": "//            it.slidingLayout.setBackgroundColor(Color.parseColor(\"#000000\"))\r\n        }\r\n        return _binding.root\r\n    }\n"}], "metadata": {"task_id": "Xtra/237", "ground_truth": "        }\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\clip\\ClipPlayerFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.R\noverride fun onNetworkRestored() {\r\n        if (isResumed) {\r", "choices": [{"text": "//            Snackbar.make(view, R.string.network_restored, Snackbar.LENGTH_SHORT).show()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Xtra/239", "ground_truth": "            player?.prepare()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\clip\\ClipPlayerFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.R\noverride fun onNetworkLost() {\r\n        if (isResumed) {\r", "choices": [{"text": "//            Toast.makeText(this, \"Network lost\", Toast.LENGTH_SHORT).show()\r\n            val snackbar = Snackbar.make(findViewById(R.id.main_layout), \"Network lost\", Snackbar.LENGTH_LONG)\r\n            snackbar.setAction(\"Retry\") {\r\n                snackbar.dismiss()\r\n                if (isResumed) {\r\n                    if (isNetworkAvailable()) {\r\n                        Toast.makeText(this, \"Network reconnected\", Toast.LENGTH_SHORT).show()\r\n                    } else {\r\n                        Toast.makeText(this, \"Network not available\", Toast.LENGTH_SHORT).show()\r\n                   "}], "metadata": {"task_id": "Xtra/240", "ground_truth": "            player?.stop()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\clip\\ClipPlayerFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/241", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\clip\\ClipPlayerFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun load(gqlHeaders: Map<String, String>, id: String?) {\r\n        if (result.value == null) {\r\n            viewModelScope.launch {\r\n                try {\r\n                    graphQLRepository.loadClipUrls(gqlHeaders, id)\r\n                } catch (e: Exception) {\r\n                    if (e.message == \"failed integrity check\") {\r\n                        _integrity.postValue(true)\r\n                    }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/242", "ground_truth": "                    null\r\n                }.let { result.postValue(it) }\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\clip\\ClipPlayerViewModel.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        enableNetworkCheck = false\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Xtra/243", "ground_truth": "        super.onCreate(savedInstanceState)\r\n        video = requireArguments().getParcelable(KEY_VIDEO)!!\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\offline\\OfflinePlayerFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.databinding.FragmentPlayerOfflineBinding\nimport com.github.andreyasadchy.xtra.R\nimport android.widget.LinearLayout\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r\n        _binding = FragmentPlayerOfflineBinding.inflate(inflater, container, false).also {\r\n            (it.slidingLayout as LinearLayout).orientation = if (isPortrait) LinearLayout.VERTICAL else LinearLayout.HORIZONTAL\r", "choices": [{"text": "//            it.slidingLayout.setBackgroundColor(Color.parseColor(\"#000000\"))\r\n        }\r\n        return _binding.root\r\n    }\n"}], "metadata": {"task_id": "Xtra/244", "ground_truth": "        }\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\offline\\OfflinePlayerFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.R\noverride fun onClose() {\r\n        if (prefs.getBoolean(C.PLAYER_USE_VIDEOPOSITIONS, true)) {\r\n            player?.currentPosition?.let { position ->\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/246", "ground_truth": "                viewModel.savePosition(video.id, position)\r\n            }\r\n        }\r\n        super.onClose()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\offline\\OfflinePlayerFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/247", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\offline\\OfflinePlayerFragment.kt"}}
{"prompt": "\n fun savePosition(id: Int, position: Long) {\r\n        if (loaded.value == true) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/248", "ground_truth": "            offlineRepository.updateVideoPosition(id, position)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\offline\\OfflinePlayerViewModel.kt"}}
{"prompt": "\n private fun changeQuality(index: Int) {\r\n        previousIndex = qualityIndex\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/249", "ground_truth": "        qualityIndex = index\r\n        setVideoQuality()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\PlaybackService.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.R\nimport android.content.Intent\noverride fun onTaskRemoved(rootIntent: Intent?) {\r\n        savePosition()\r\n        mediaSession?.player?.pause()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Xtra/250", "ground_truth": "        mediaSession?.player?.stop()\r\n        stopSelf()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\PlaybackService.kt"}}
{"prompt": "\n override fun onDestroy() {\r\n        mediaSession?.run {\r\n            player.release()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/251", "ground_truth": "            release()\r\n            mediaSession = null\r\n        }\r\n        super.onDestroy()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\PlaybackService.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.content.Context\noverride fun onAttach(context: Context) {\r", "choices": [{"text": "super.onAttach(context)\r\nval activity = context as Activity\r\nval fragmentManager = activity.supportFragmentManager\r\nval fragmentTransaction = fragmentManager.beginTransaction()\r\nval fragment = fragmentManager.findFragmentByTag(C.FRAGMENT_TAG)\r\nif (fragment == null) {\r\nfragmentTransaction.add(R.id.container, MainFragment(), C.FRAGMENT_TAG)\r\nfragmentTransaction.commit()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/253", "ground_truth": "        super.onAttach(context)\r\n        listener = parentFragment as PlayerSeekListener\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\PlayerGamesDialog.kt"}}
{"prompt": "\n fun newInstance(speedText: String?, vodGames: Boolean): PlayerSettingsDialog {\r\n            return PlayerSettingsDialog().apply {\r", "choices": [{"text": "//                arguments = Bundle().apply {\r\n//                    putString(SPEED_TEXT, speedText)\r\n//                    putBoolean(VOD_GAMES, vodGames)\r\n//                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setStyle(DialogFragment.STYLE_NORMAL, R.style.FullScreenDialogStyle)\r\n    }\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        return inflater.inflate(R.layout.dialog_player_settings, container"}], "metadata": {"task_id": "Xtra/255", "ground_truth": "                arguments = bundleOf(SPEED to speedText, VOD_GAMES to vodGames)\r\n            }\r\n        }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\PlayerSettingsDialog.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/256", "ground_truth": "        _binding = PlayerSettingsBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\PlayerSettingsDialog.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.visible\nimport com.github.andreyasadchy.xtra.util.C\nimport androidx.core.view.isVisible\nfun setQuality(text: String?) {\r\n        with(binding) {\r\n            if (!text.isNullOrBlank() && menuQuality.isVisible) {\r\n                qualityValue.visible()\r\n                qualityValue.text = text\r\n                menuQuality.setOnClickListener {\r\n                    (parentFragment as? BasePlayerFragment)?.showQualityDialog()\r", "choices": [{"text": "//                    (parentFragment as? BasePlayerFragment)?.showQualityDialog()\r\n                }\r\n            } else {\r\n                qualityValue.gone()\r\n                menuQuality.gone()\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Xtra/257", "ground_truth": "                    dismiss()\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\PlayerSettingsDialog.kt"}}
{"prompt": "\n import androidx.core.view.isVisible\nfun setSpeed(text: String?) {\r\n        with(binding) {\r\n            if (!text.isNullOrBlank() && menuSpeed.isVisible) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/258", "ground_truth": "                speedValue.visible()\r\n                speedValue.text = text\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\PlayerSettingsDialog.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.visible\nimport com.github.andreyasadchy.xtra.util.prefs\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.ui.player.video.VideoPlayerFragment\nimport com.github.andreyasadchy.xtra.R\nfun setVodGames() {\r\n        with(binding) {\r\n            if (requireContext().prefs().getBoolean(C.PLAYER_MENU_GAMES, false)) {\r\n                menuVodGames.visible()\r\n                menuVodGames.setOnClickListener {\r\n                    (parentFragment as? VideoPlayerFragment)?.showVodGames()\r", "choices": [{"text": "//                    (parentFragment as? VideoPlayerFragment)?.showVodGames()\r\n                }\r\n            } else {\r\n                menuVodGames.gone()\r\n            }\r\n        }\r\n    }<file_sep>/app/src/main/java/com/github/andreyasadchy/xtra/ui/player/video/VideoPlayerFragment.kt\npackage com.github.andreyasadchy.xtra.ui.player.video\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app"}], "metadata": {"task_id": "Xtra/259", "ground_truth": "                    dismiss()\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\PlayerSettingsDialog.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/261", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\PlayerSettingsDialog.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.repository.ApiRepository\nimport com.github.andreyasadchy.xtra.R\nimport android.view.View\nfun newInstance(login: String, repository: ApiRepository): PlayerViewerListDialog {\r\n            return PlayerViewerListDialog(repository).apply {\r", "choices": [{"text": "//                arguments = Bundle().apply {\r\n//                    putString(ARG_LOGIN, login)\r\n//                }\r\n            }\r\n        }\n\nclass PlayerViewerListDialog(private val repository: ApiRepository) : DialogFragment() {\n\n    private lateinit var binding: DialogPlayerViewerListBinding\n    private lateinit var adapter: PlayerViewerListAdapter\n    private lateinit var viewModel: PlayerViewerListViewModel\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        binding = DialogPlayerViewerListBinding.inflate(inflater, container, false)\n        return binding.root\n    }"}], "metadata": {"task_id": "Xtra/262", "ground_truth": "                arguments = bundleOf(LOGIN to login)\r\n            }\r\n        }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\PlayerViewerListDialog.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/263", "ground_truth": "        _binding = FragmentViewerListBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\PlayerViewerListDialog.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/264", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\PlayerViewerListDialog.kt"}}
{"prompt": "\n import android.view.View\noverride fun onBindViewHolder(holder: ViewHolder, position: Int) {\r", "choices": [{"text": "val item = items[position]\r\nholder.bind(item)\r\n}\r\n}\r\nclass ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\nfun bind(item: Item) {\r\nitemView.text.text = item.text\r\n}\r\n}\r\n}\r\nclass Item(val text: String)\r\n}\r\n"}], "metadata": {"task_id": "Xtra/266", "ground_truth": "            val item = mData[position]\r\n            holder.textView.text = item\r\n        }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\PlayerViewerListDialog.kt"}}
{"prompt": "\n import kotlin.concurrent.schedule\nimport java.util.Timer\nfun setTimer(duration: Long) {\r\n        timer?.let {\r\n            it.cancel()\r\n            timerEndTime = 0L\r\n            timer = null\r\n        }\r\n        if (duration > 0L) {\r\n            timer = Timer().apply {\r\n                timerEndTime = System.currentTimeMillis() + duration\r\n                schedule(duration) {\r", "choices": [{"text": "//                    timer?.cancel()\r\n//                    timerEndTime = 0L\r\n//                    timer = null\r\n                    timer?.cancel()\r\n                    timerEndTime = 0L\r\n                    timer = null\r\n                }\r\n            }\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Xtra/267", "ground_truth": "                    _sleepTimer.postValue(true)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\PlayerViewModel.kt"}}
{"prompt": "\n fun newInstance(volume: Float?): PlayerVolumeDialog {\r\n            return PlayerVolumeDialog().apply {\r", "choices": [{"text": "//                arguments = Bundle().apply {\r\n//                    putFloat(ARG_PARAM1, volume)\r\n//                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\r\n        val builder = AlertDialog.Builder(context)\r\n        builder.setTitle(R.string.volume)\r\n        builder.setPositiveButton(R.string.ok) { _, _ ->\r\n            val volume = volumeSeekBar.progress / 100f\r\n            listener?.onVolumeChanged(volume)\r\n        }\r\n        builder.setNegativeButton(R.string.cancel) { _, _ ->\r\n           "}], "metadata": {"task_id": "Xtra/268", "ground_truth": "                arguments = bundleOf(VOLUME to volume)\r\n            }\r\n        }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\PlayerVolumeDialog.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.content.Context\noverride fun onAttach(context: Context) {\r", "choices": [{"text": "super.onAttach(context)\r\nval activity = context as Activity\r\nval fragmentManager = activity.supportFragmentManager\r\nval fragmentTransaction = fragmentManager.beginTransaction()\r\nval fragment = fragmentManager.findFragmentByTag(C.FRAGMENT_TAG)\r\nif (fragment == null) {\r\nfragmentTransaction.add(R.id.container, MainFragment(), C.FRAGMENT_TAG)\r\nfragmentTransaction.commit()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/269", "ground_truth": "        super.onAttach(context)\r\n        listener = parentFragment as PlayerVolumeListener\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\PlayerVolumeDialog.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/270", "ground_truth": "        _binding = PlayerVolumeBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\PlayerVolumeDialog.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/271", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\PlayerVolumeDialog.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.content.Context\noverride fun onAttach(context: Context) {\r", "choices": [{"text": "super.onAttach(context)\r\nval activity = context as Activity\r\nval fragmentManager = activity.supportFragmentManager\r\nval fragmentTransaction = fragmentManager.beginTransaction()\r\nval fragment = fragmentManager.findFragmentByTag(C.FRAGMENT_TAG)\r\nif (fragment == null) {\r\nfragmentTransaction.add(R.id.container, MainFragment(), C.FRAGMENT_TAG)\r\nfragmentTransaction.commit()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/272", "ground_truth": "        super.onAttach(context)\r\n        listener = parentFragment as OnSleepTimerStartedListener\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\SleepTimerDialog.kt"}}
{"prompt": "\n override fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\n_binding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/273", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\SleepTimerDialog.kt"}}
{"prompt": "\n import androidx.fragment.app.FragmentManager\nimport androidx.core.os.bundleOf\nimport android.app.Dialog\nfun show(fragmentManager: FragmentManager, timeLeft: Long) {\r\n            SleepTimerDialog().apply {\r\n                arguments = bundleOf(KEY_TIME_LEFT to timeLeft)\r", "choices": [{"text": "//                show(fragmentManager, \"sleepTimerDialog\")\r\n            }\r\n        }\n"}], "metadata": {"task_id": "Xtra/274", "ground_truth": "                show(fragmentManager, null)\r\n            }\r\n        }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\SleepTimerDialog.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval intent = Intent(this, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\nval button = findViewById<Button>(R.id.button)"}], "metadata": {"task_id": "Xtra/275", "ground_truth": "        super.onCreate(savedInstanceState)\r\n        stream = requireArguments().getParcelable(KEY_STREAM)!!\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\stream\\StreamPlayerFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.ui.Stream\nimport com.github.andreyasadchy.xtra.databinding.FragmentPlayerStreamBinding\nimport com.github.andreyasadchy.xtra.R\nimport android.widget.LinearLayout\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r\n        _binding = FragmentPlayerStreamBinding.inflate(inflater, container, false).also {\r\n            (it.slidingLayout as LinearLayout).orientation = if (isPortrait) LinearLayout.VERTICAL else LinearLayout.HORIZONTAL\r", "choices": [{"text": "//            it.slidingLayout.setBackgroundColor(Color.parseColor(\"#000000\"))\r\n        }\r\n        return _binding.root\r\n    }\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        _binding.slidingLayout.setBackgroundColor(Color.parseColor(\"#000000\"))\r\n        _binding.slidingLayout.setBackgroundColor(Color.parseColor(\"#000000\"))\r\n        _binding.slidingLayout.setBackgroundColor(Color.parseColor(\"#00000"}], "metadata": {"task_id": "Xtra/276", "ground_truth": "        }\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\stream\\StreamPlayerFragment.kt"}}
{"prompt": "\n import android.util.Log\nfun updateLive(live: Boolean?, uptimeMs: Long?, channelLogin: String?) {\r\n        if (channelLogin == stream.channelLogin) {\r\n            live?.let {\r\n                if (live) {\r\n                    restartPlayer()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/279", "ground_truth": "                }\r\n                updateUptime(uptimeMs)\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\stream\\StreamPlayerFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.ui.player.PlayerMode\nfun restartPlayer() {\r\n        if (viewModel.playerMode != PlayerMode.DISABLED) {\r", "choices": [{"text": "\n import com.github.andreyasadchy.xtra.ui.player.PlayerMode\nfun restartPlayer() {\r\n        if (viewModel.playerMode!= PlayerMode.DISABLED) {\r\n//            viewModel.playerMode = PlayerMode.DISABLED\r\n            viewModel.playerMode = PlayerMode.PLAYING\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Xtra/280", "ground_truth": "            loadStream(stream)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\stream\\StreamPlayerFragment.kt"}}
{"prompt": "\n override fun onMinimize() {\r", "choices": [{"text": "// TODO Auto-generated method stub\r\nsuper.onMinimize();\r\n}\r\n@Override\r\npublic void onDestroy() {\r\n// TODO Auto-generated method stub\r\nsuper.onDestroy();\r\n}\r\n@Override\r\npublic void onPause() {\r\n// TODO Auto-generated method stub\r\nsuper.onPause();\r\n}\r\n@Override\r\npublic void onResume() {\r\n// TODO Auto-generated method stub\r\nsuper.onResume();\r\n}\r\n@Override\r\npublic void onStop() {\r\n// TODO"}], "metadata": {"task_id": "Xtra/281", "ground_truth": "        super.onMinimize()\r\n        chatFragment.hideKeyboard()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\stream\\StreamPlayerFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.R\noverride fun onNetworkRestored() {\r\n        if (isResumed) {\r", "choices": [{"text": "//            Snackbar.make(view, R.string.network_restored, Snackbar.LENGTH_SHORT).show()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Xtra/282", "ground_truth": "            restartPlayer()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\stream\\StreamPlayerFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/283", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\stream\\StreamPlayerFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval intent = Intent(this, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\nval button = findViewById<Button>(R.id.button)"}], "metadata": {"task_id": "Xtra/284", "ground_truth": "        super.onCreate(savedInstanceState)\r\n        video = requireArguments().getParcelable(KEY_VIDEO)!!\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\video\\VideoPlayerFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.ui.Video\nimport com.github.andreyasadchy.xtra.databinding.FragmentPlayerVideoBinding\nimport com.github.andreyasadchy.xtra.R\nimport android.widget.LinearLayout\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r\n        _binding = FragmentPlayerVideoBinding.inflate(inflater, container, false).also {\r\n            (it.slidingLayout as LinearLayout).orientation = if (isPortrait) LinearLayout.VERTICAL else LinearLayout.HORIZONTAL\r", "choices": [{"text": "//            it.slidingLayout.setBackgroundColor(Color.parseColor(\"#000000\"))\r\n        }\r\n        return _binding.root\r\n    }\n"}], "metadata": {"task_id": "Xtra/285", "ground_truth": "        }\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\video\\VideoPlayerFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.R\noverride fun onNetworkRestored() {\r\n        if (isResumed) {\r", "choices": [{"text": "//            Snackbar.make(view, R.string.network_restored, Snackbar.LENGTH_SHORT).show()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Xtra/287", "ground_truth": "            player?.prepare()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\video\\VideoPlayerFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.R\noverride fun onNetworkLost() {\r\n        if (isResumed) {\r", "choices": [{"text": "//            Toast.makeText(this, \"Network lost\", Toast.LENGTH_SHORT).show()\r\n            val snackbar = Snackbar.make(findViewById(R.id.main_layout), \"Network lost\", Snackbar.LENGTH_LONG)\r\n            snackbar.setAction(\"Retry\") {\r\n                snackbar.dismiss()\r\n                if (isResumed) {\r\n                    if (isNetworkAvailable()) {\r\n                        Toast.makeText(this, \"Network reconnected\", Toast.LENGTH_SHORT).show()\r\n                    } else {\r\n                        Toast.makeText(this, \"Network not available\", Toast.LENGTH_SHORT).show()\r\n                   "}], "metadata": {"task_id": "Xtra/288", "ground_truth": "            player?.stop()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\video\\VideoPlayerFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.prefs\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.R\noverride fun onClose() {\r\n        if (prefs.getBoolean(C.PLAYER_USE_VIDEOPOSITIONS, true)) {\r\n            video.id?.toLongOrNull()?.let { id ->\r\n                player?.currentPosition?.let { position ->\r\n                    viewModel.savePosition(id, position)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/289", "ground_truth": "                }\r\n            }\r\n        }\r\n        super.onClose()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\video\\VideoPlayerFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/290", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\video\\VideoPlayerFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.ui.Video\nimport androidx.lifecycle.viewModelScope\nfun load(gqlHeaders: Map<String, String>, videoId: String?, playerType: String?, supportedCodecs: String?) {\r\n        viewModelScope.launch {\r\n            try {\r\n                playerRepository.loadVideoPlaylistUrl(gqlHeaders, videoId, playerType, supportedCodecs)\r\n            } catch (e: Exception) {\r\n                if (e.message == \"failed integrity check\") {\r\n                    _integrity.postValue(true)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/292", "ground_truth": "                }\r\n                null\r\n            }.let { result.postValue(it) }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\video\\VideoPlayerViewModel.kt"}}
{"prompt": "\n fun savePosition(id: Long, position: Long) {\r\n        if (loaded.value == true) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/293", "ground_truth": "            playerRepository.saveVideoPosition(VideoPosition(id, position))\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\video\\VideoPlayerViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.github.andreyasadchy.xtra.model.ui.Video\nimport com.github.andreyasadchy.xtra.model.ui.Game\nimport androidx.lifecycle.viewModelScope\nfun loadGamesList(gqlHeaders: Map<String, String>, videoId: String?) {\r\n        if (!gamesList.isInitialized) {\r\n            viewModelScope.launch {\r\n                try {\r\n                    val get = repository.loadVideoGames(gqlHeaders, videoId)\r\n                    gamesList.postValue(get)\r\n                } catch (e: Exception) {\r\n                    if (e.message == \"failed integrity check\") {\r\n                        _integrity.postValue(true)\r", "choices": [{"text": "//                        _gamesList.postValue(null)\r\n                    } else {\r\n                        _error.postValue(e.message)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\n\nfun loadGame(gqlHeaders: Map<String, String>, gameId: String) {\r\n        if (!game.isInitialized) {\r\n            viewModelScope.launch {\r\n                try {\r\n                    val get = repository.loadGame(gqlHeaders, gameId)\r\n                    game.postValue(get)\r\n                } catch (e: Exception) {\r\n                    if (e.message == \"failed integrity check\") {\r\n                        _integrity.postValue"}], "metadata": {"task_id": "Xtra/294", "ground_truth": "                    }\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\video\\VideoPlayerViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.github.andreyasadchy.xtra.model.offline.Bookmark\nimport androidx.lifecycle.viewModelScope\nfun checkBookmark(id: String) {\r\n        viewModelScope.launch {\r", "choices": [{"text": "//            val bookmark = repository.getBookmark(id)\r\n//            if (bookmark!= null) {\r\n//                _bookmark.value = bookmark\r\n//            } else {\r\n//                _bookmark.value = null\r\n//            }\r\n        }\r\n    }<file_sep>package com.github.andreyasadchy.xtra.ui.main.home\n\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.fragment.app.Fragment\nimport androidx.lifecycle.ViewModelProvider\n"}], "metadata": {"task_id": "Xtra/295", "ground_truth": "            bookmarkItem.postValue(bookmarksRepository.getBookmarkByVideoId(id))\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\player\\video\\VideoPlayerViewModel.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.ui.Video\nfun setVideoPositions(positions: Map<Long, Long>) {\r\n        this.positions = positions\r\n        if (itemCount != 0) {\r", "choices": [{"text": "\n import com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.ui.Video\nfun setVideoPositions(positions: Map<Long, Long>) {\r\n        this.positions = positions\r\n        if (itemCount!= 0) {\r\n//            notifyItemRangeChanged(0, itemCount)\r\n        }\r\n    }\r\n\r\n    override fun getItemCount(): Int {\r\n        return itemCount\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\r\n        if (holder is VideoViewHolder) {\r\n            val video = videos[position]\r\n            holder.bind(video)\r\n        }\r\n    }\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_video, parent, false)\r\n        return VideoViewHolder(view"}], "metadata": {"task_id": "Xtra/297", "ground_truth": "            notifyDataSetChanged()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\saved\\bookmarks\\BookmarksAdapter.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.offline.VodBookmarkIgnoredUser\nimport com.github.andreyasadchy.xtra.model.offline.Bookmark\nfun setIgnoredUsers(list: List<VodBookmarkIgnoredUser>) {\r\n        this.ignored = list\r\n        if (itemCount != 0) {\r", "choices": [{"text": "\n import com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.offline.VodBookmarkIgnoredUser\nimport com.github.andreyasadchy.xtra.model.offline.Bookmark\nfun setIgnoredUsers(list: List<VodBookmarkIgnoredUser>) {\r\n        this.ignored = list\r\n        if (itemCount!= 0) {\r\n//            notifyItemRangeChanged(0, itemCount)\r\n        }\r\n    }\r\n\r\n    fun addIgnoredUsers(list: List<VodBookmarkIgnoredUser>) {\r\n        this.ignored.addAll(list)\r\n        if (itemCount!= 0) {\r\n//            notifyItemRangeChanged(0, itemCount)\r\n        }\r\n    }\r\n\r\n    fun removeIgnoredUsers(list: List<VodBookmarkIgnoredUser>) {\r\n        this.ignored.removeAll(list)\r\n        if (itemCount!= 0) {\r\n//            notifyItemRangeChanged(0, itemCount)\r\n        }\r\n    }\r\n\r\n    fun addBookmark("}], "metadata": {"task_id": "Xtra/298", "ground_truth": "            notifyDataSetChanged()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\saved\\bookmarks\\BookmarksAdapter.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/299", "ground_truth": "        _binding = CommonRecyclerViewLayoutBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\saved\\bookmarks\\BookmarksFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/300", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\saved\\bookmarks\\BookmarksFragment.kt"}}
{"prompt": "\n import android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/303", "ground_truth": "        _binding = CommonRecyclerViewLayoutBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\saved\\downloads\\DownloadsFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/304", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\saved\\downloads\\DownloadsFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval intent = Intent(this, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\nval button = findViewById<Button>(R.id.button)"}], "metadata": {"task_id": "Xtra/305", "ground_truth": "        super.onCreate(savedInstanceState)\r\n        previousItem = savedInstanceState?.getInt(\"previousItem\", -1) ?: -1\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\saved\\SavedMediaFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/306", "ground_truth": "        _binding = FragmentMediaBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\saved\\SavedMediaFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.ui.saved.bookmarks.BookmarksFragment\nimport androidx.fragment.app.Fragment\nprivate fun onSpinnerItemSelected(position: Int): Fragment {\r\n        return when (position) {\r\n            0 -> BookmarksFragment()\r", "choices": [{"text": "//            1 -> SavedFragment()\r\n//            2 -> FavoritesFragment()\r\n//            3 -> HistoryFragment()\r\n//            4 -> SettingsFragment()\r\n            else -> BookmarksFragment()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Xtra/307", "ground_truth": "            else -> DownloadsFragment()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\saved\\SavedMediaFragment.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r", "choices": [{"text": "super.onSaveInstanceState(outState)\r\noutState.putInt(\"key\", 1)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\nsuper.onRestoreInstanceState(savedInstanceState)\r\nval value = savedInstanceState.getInt(\"key\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/308", "ground_truth": "        outState.putInt(\"previousItem\", previousItem)\r\n        super.onSaveInstanceState(outState)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\saved\\SavedMediaFragment.kt"}}
{"prompt": "\n override fun scrollToTop() {\r", "choices": [{"text": "//    val scrollView = findViewById<ScrollView>(R.id.scrollView)\r\n//    scrollView.fullScroll(ScrollView.FOCUS_UP)\r\n    val recyclerView = findViewById<RecyclerView>(R.id.recyclerView)\r\n    recyclerView.smoothScrollToPosition(0)\r\n}\r\n"}], "metadata": {"task_id": "Xtra/310", "ground_truth": "        binding.appBar.setExpanded(true, true)\r\n        (currentFragment as? Scrollable)?.scrollToTop()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\saved\\SavedMediaFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/311", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\saved\\SavedMediaFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.ui.saved.bookmarks.BookmarksFragment\nimport androidx.fragment.app.Fragment\noverride fun createFragment(position: Int): Fragment {\r\n        return when (position) {\r\n            0 -> BookmarksFragment()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/312", "ground_truth": "            else -> DownloadsFragment()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\saved\\SavedPagerAdapter.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval intent = Intent(this, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\nval button = findViewById<Button>(R.id.button)"}], "metadata": {"task_id": "Xtra/313", "ground_truth": "        super.onCreate(savedInstanceState)\r\n        firstLaunch = savedInstanceState == null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\saved\\SavedPagerFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/314", "ground_truth": "        _binding = FragmentMediaPagerBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\saved\\SavedPagerFragment.kt"}}
{"prompt": "\n override fun scrollToTop() {\r", "choices": [{"text": "//    val scrollView = findViewById<ScrollView>(R.id.scrollView)\r\n//    scrollView.fullScroll(ScrollView.FOCUS_UP)\r\n    val recyclerView = findViewById<RecyclerView>(R.id.recyclerView)\r\n    recyclerView.smoothScrollToPosition(0)\r\n}\r\n"}], "metadata": {"task_id": "Xtra/316", "ground_truth": "        binding.appBar.setExpanded(true, true)\r\n        (currentFragment as? Scrollable)?.scrollToTop()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\saved\\SavedPagerFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/317", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\saved\\SavedPagerFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/319", "ground_truth": "        _binding = CommonRecyclerViewLayoutBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\search\\channels\\ChannelSearchFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Xtra/320", "ground_truth": "        pagingAdapter = ChannelSearchAdapter(this)\r\n        setAdapter(binding.recyclerView, pagingAdapter)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\search\\channels\\ChannelSearchFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/321", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\search\\channels\\ChannelSearchFragment.kt"}}
{"prompt": "\n fun setQuery(query: String) {\r\n        if (this.query.value != query) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/322", "ground_truth": "            this.query.value = query\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\search\\channels\\ChannelSearchViewModel.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/323", "ground_truth": "        _binding = CommonRecyclerViewLayoutBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\search\\games\\GameSearchFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Xtra/324", "ground_truth": "        pagingAdapter = GamesAdapter(this)\r\n        setAdapter(binding.recyclerView, pagingAdapter)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\search\\games\\GameSearchFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/325", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\search\\games\\GameSearchFragment.kt"}}
{"prompt": "\n fun setQuery(query: String) {\r\n        if (this.query.value != query) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/326", "ground_truth": "            this.query.value = query\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\search\\games\\GameSearchViewModel.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval intent = Intent(this, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\nval button = findViewById<Button>(R.id.button)"}], "metadata": {"task_id": "Xtra/328", "ground_truth": "        super.onCreate(savedInstanceState)\r\n        firstLaunch = savedInstanceState == null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\search\\SearchPagerFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/329", "ground_truth": "        _binding = FragmentSearchBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\search\\SearchPagerFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/331", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\search\\SearchPagerFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/332", "ground_truth": "        _binding = CommonRecyclerViewLayoutBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\search\\streams\\StreamSearchFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.prefs\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.ui.streams.StreamsCompactAdapter\nimport com.github.andreyasadchy.xtra.model.ui.Stream\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        pagingAdapter = if (requireContext().prefs().getString(C.COMPACT_STREAMS, \"disabled\") == \"all\") {\r\n            StreamsCompactAdapter(this)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/333", "ground_truth": "        } else {\r\n            StreamsAdapter(this)\r\n        }\r\n        setAdapter(binding.recyclerView, pagingAdapter)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\search\\streams\\StreamSearchFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/334", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\search\\streams\\StreamSearchFragment.kt"}}
{"prompt": "\n fun setQuery(query: String) {\r\n        if (this.query.value != query) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/335", "ground_truth": "            this.query.value = query\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\search\\streams\\StreamSearchViewModel.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/337", "ground_truth": "        _binding = FragmentSearchTagsBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\search\\tags\\TagSearchFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/338", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\search\\tags\\TagSearchFragment.kt"}}
{"prompt": "\n fun setQuery(query: String) {\r\n        if (this.query.value != query) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/339", "ground_truth": "            this.query.value = query\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\search\\tags\\TagSearchViewModel.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/340", "ground_truth": "        _binding = CommonRecyclerViewLayoutBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\search\\videos\\VideoSearchFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/342", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\search\\videos\\VideoSearchFragment.kt"}}
{"prompt": "\n fun setQuery(query: String) {\r\n        if (this.query.value != query) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/343", "ground_truth": "            this.query.value = query\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\search\\videos\\VideoSearchViewModel.kt"}}
{"prompt": "\n import android.view.View\nimport android.app.Dialog\noverride fun onBindDialogView(view: View) {\r", "choices": [{"text": "val dialog = Dialog(view.context)\r\ndialog.setContentView(R.layout.dialog_layout)\r\ndialog.show()\r\n}\r\n"}], "metadata": {"task_id": "Xtra/344", "ground_truth": "        super.onBindDialogView(view)\r\n        mEditText = view.findViewById(android.R.id.edit)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\settings\\MaterialEditTextPreference.kt"}}
{"prompt": "\n import android.widget.EditText\nimport android.view.inputmethod.InputMethodManager\nimport android.content.Context\nprivate fun scheduleShowSoftInputInner() {\r\n        mEditText?.let { mEditText ->\r\n            if (mEditText.isFocused) {\r\n                val imm = mEditText.context.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\r\n                if (!imm.showSoftInput(mEditText, 0)) {\r\n                    mEditText.removeCallbacks(mShowSoftInputRunnable)\r", "choices": [{"text": "//                    mEditText.postDelayed(mShowSoftInputRunnable, 100)\r\n                }\r\n            }\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Xtra/345", "ground_truth": "                    mEditText.postDelayed(mShowSoftInputRunnable, 50)\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\settings\\MaterialEditTextPreference.kt"}}
{"prompt": "\n import android.content.DialogInterface\nimport android.app.Dialog\noverride fun onDismiss(dialog: DialogInterface) {\r", "choices": [{"text": "super.onDismiss(dialog)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/347", "ground_truth": "        super.onDismiss(dialog)\r\n        onDialogClosed(mWhichButtonClicked == DialogInterface.BUTTON_POSITIVE)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\settings\\MaterialEditTextPreference.kt"}}
{"prompt": "\n import android.content.DialogInterface\nimport android.app.Dialog\noverride fun onDismiss(dialog: DialogInterface) {\r", "choices": [{"text": "super.onDismiss(dialog)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/348", "ground_truth": "        super.onDismiss(dialog)\r\n        onDialogClosed(mWhichButtonClicked == DialogInterface.BUTTON_POSITIVE)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\settings\\MaterialListPreference.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.prefs\nimport com.github.andreyasadchy.xtra.util.C\nimport androidx.preference.Preference\nimport androidx.preference.ListPreference\nimport androidx.preference.EditTextPreference\noverride fun onDisplayPreferenceDialog(preference: Preference) {\r\n        if (requireContext().prefs().getBoolean(C.UI_THEME_MATERIAL3, true)) {\r\n            when (preference) {\r\n                is ListPreference -> showPreferenceDialog(preference, MaterialListPreference())\r\n                is EditTextPreference -> showPreferenceDialog(preference, MaterialEditTextPreference())\r\n                else -> super.onDisplayPreferenceDialog(preference)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/349", "ground_truth": "            }\r\n        } else {\r\n            super.onDisplayPreferenceDialog(preference)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\settings\\MaterialPreferenceFragment.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r", "choices": [{"text": "super.onSaveInstanceState(outState)\r\noutState.putInt(\"key\", 1)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\nsuper.onRestoreInstanceState(savedInstanceState)\r\nval value = savedInstanceState.getInt(\"key\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/352", "ground_truth": "            outState.putBoolean(KEY_CHANGED, changed)\r\n            super.onSaveInstanceState(outState)\r\n        }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\settings\\SettingsActivity.kt"}}
{"prompt": " import com.github.andreyasadchy.xtra.R\nvar binding ActivitySettingsBinding\nvar changed\nval mText TextView\nprivate fun setResult() {\r\n            if (!changed) {\r\n                changed = true\r", "choices": [{"text": "//                setResult(Activity.RESULT_OK)\r\n            }\r\n        }\n"}], "metadata": {"task_id": "Xtra/353", "ground_truth": "                requireActivity().setResult(Activity.RESULT_OK)\r\n            }\r\n        }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\settings\\SettingsActivity.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.GlobalScope\nfun deletePositions() {\r\n        GlobalScope.launch {\r\n            videoPositions.deleteAll()\r", "choices": [{"text": "//            videoPositions.deleteAll()\r\n        }\r\n    }<file_sep>/app/src/main/java/com/example/videoplayer/MainActivity.kt\npackage com.example.videoplayer\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.Menu\r\nimport android.view.MenuItem\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.example.videoplayer.adapter.VideoAdapter\r\nimport com.example.videop"}], "metadata": {"task_id": "Xtra/360", "ground_truth": "            videos.deletePositions()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\settings\\SettingsViewModel.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/361", "ground_truth": "        _binding = CommonRecyclerViewLayoutBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\streams\\common\\StreamsFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.ui.common.FragmentHost\nimport com.github.andreyasadchy.xtra.model.ui.StreamSortEnum\nimport com.github.andreyasadchy.xtra.model.ui.Stream\nimport androidx.paging.PagingData\nimport androidx.lifecycle.lifecycleScope\noverride fun onChange(sort: StreamSortEnum) {\r\n        if ((parentFragment as? FragmentHost)?.currentFragment == this) {\r\n            viewLifecycleOwner.lifecycleScope.launch {\r\n                pagingAdapter.submitData(PagingData.empty())\r\n                viewModel.filter(\r", "choices": [{"text": "//                    sort,\r\n                    sort.value,\r\n                    C.DEFAULT_PAGE_SIZE,\r\n                    C.DEFAULT_PAGE_SIZE\r\n                )\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Xtra/363", "ground_truth": "                    sort = sort\r\n                )\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\streams\\common\\StreamsFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/364", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\streams\\common\\StreamsFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.model.ui.StreamSortEnum\nimport com.github.andreyasadchy.xtra.R\nfun newInstance(sort: StreamSortEnum? = StreamSortEnum.VIEWERS_HIGH): StreamsSortDialog {\r\n            return StreamsSortDialog().apply {\r", "choices": [{"text": "//                arguments = Bundle().apply {\r\n//                    putSerializable(ARG_SORT, sort)\r\n//                }\r\n            }\r\n        }\n"}], "metadata": {"task_id": "Xtra/365", "ground_truth": "                arguments = bundleOf(SORT to sort)\r\n            }\r\n        }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\streams\\common\\StreamsSortDialog.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.content.Context\noverride fun onAttach(context: Context) {\r", "choices": [{"text": "super.onAttach(context)\r\nval activity = context as Activity\r\nval fragmentManager = activity.supportFragmentManager\r\nval fragmentTransaction = fragmentManager.beginTransaction()\r\nval fragment = fragmentManager.findFragmentByTag(C.FRAGMENT_TAG)\r\nif (fragment == null) {\r\nfragmentTransaction.add(R.id.container, MainFragment(), C.FRAGMENT_TAG)\r\nfragmentTransaction.commit()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/366", "ground_truth": "        super.onAttach(context)\r\n        listener = parentFragment as OnFilter\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\streams\\common\\StreamsSortDialog.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/367", "ground_truth": "        _binding = DialogStreamsSortBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\streams\\common\\StreamsSortDialog.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/368", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\streams\\common\\StreamsSortDialog.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/369", "ground_truth": "        _binding = CommonRecyclerViewLayoutBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\streams\\followed\\FollowedStreamsFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.prefs\nimport com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.ui.streams.StreamsCompactAdapter\nimport com.github.andreyasadchy.xtra.model.ui.Stream\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        pagingAdapter = if (requireContext().prefs().getString(C.COMPACT_STREAMS, \"disabled\") != \"disabled\") {\r\n            StreamsCompactAdapter(this)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/370", "ground_truth": "        } else {\r\n            StreamsAdapter(this)\r\n        }\r\n        setAdapter(binding.recyclerView, pagingAdapter)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\streams\\followed\\FollowedStreamsFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/371", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\streams\\followed\\FollowedStreamsFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval intent = Intent(this, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\nval button = findViewById<Button>(R.id.button)"}], "metadata": {"task_id": "Xtra/374", "ground_truth": "        super.onCreate(savedInstanceState)\r\n        previousItem = savedInstanceState?.getInt(\"previousItem\", -1) ?: -1\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\top\\TopFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/375", "ground_truth": "        _binding = FragmentMediaBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\top\\TopFragment.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onSaveInstanceState(outState: Bundle) {\r", "choices": [{"text": "super.onSaveInstanceState(outState)\r\noutState.putInt(\"key\", 1)\r\n}\r\noverride fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\nsuper.onRestoreInstanceState(savedInstanceState)\r\nval value = savedInstanceState.getInt(\"key\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/376", "ground_truth": "        outState.putInt(\"previousItem\", previousItem)\r\n        super.onSaveInstanceState(outState)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\top\\TopFragment.kt"}}
{"prompt": "\n override fun scrollToTop() {\r", "choices": [{"text": "//    val scrollView = findViewById<ScrollView>(R.id.scrollView)\r\n//    scrollView.fullScroll(ScrollView.FOCUS_UP)\r\n    val recyclerView = findViewById<RecyclerView>(R.id.recyclerView)\r\n    recyclerView.smoothScrollToPosition(0)\r\n}\r\n"}], "metadata": {"task_id": "Xtra/378", "ground_truth": "        binding.appBar.setExpanded(true, true)\r\n        (currentFragment as? Scrollable)?.scrollToTop()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\top\\TopFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/379", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\top\\TopFragment.kt"}}
{"prompt": "\n fun setVideoPositions(positions: Map<Long, Long>) {\r\n        this.positions = positions\r\n        if (itemCount != 0) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/381", "ground_truth": "            notifyDataSetChanged()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\videos\\BaseVideosAdapter.kt"}}
{"prompt": "\nvar lastSelectedItem Video?\n override fun showDownloadDialog() {\r\n        lastSelectedItem?.let {\r", "choices": [{"text": "//            val dialog = DownloadDialog(it)\r\n//            dialog.show(supportFragmentManager, \"download\")\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Xtra/383", "ground_truth": "            VideoDownloadDialog.newInstance(it).show(childFragmentManager, null)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\videos\\BaseVideosFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/385", "ground_truth": "        _binding = CommonRecyclerViewLayoutBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\videos\\channel\\ChannelVideosFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/388", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\videos\\channel\\ChannelVideosFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/389", "ground_truth": "        _binding = CommonRecyclerViewLayoutBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\videos\\followed\\FollowedVideosFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/392", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\videos\\followed\\FollowedVideosFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/393", "ground_truth": "        _binding = CommonRecyclerViewLayoutBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\videos\\game\\GameVideosFragment.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/395", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\videos\\game\\GameVideosFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.content.Context\noverride fun onAttach(context: Context) {\r", "choices": [{"text": "super.onAttach(context)\r\nval activity = context as Activity\r\nval fragmentManager = activity.supportFragmentManager\r\nval fragmentTransaction = fragmentManager.beginTransaction()\r\nval fragment = fragmentManager.findFragmentByTag(C.FRAGMENT_TAG)\r\nif (fragment == null) {\r\nfragmentTransaction.add(R.id.container, MainFragment(), C.FRAGMENT_TAG)\r\nfragmentTransaction.commit()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/398", "ground_truth": "        super.onAttach(context)\r\n        listener = parentFragment as OnFilter\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\videos\\VideosSortDialog.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/399", "ground_truth": "        _binding = DialogVideosSortBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\videos\\VideosSortDialog.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\noverride fun onChange(requestCode: Int, index: Int, text: CharSequence, tag: Int?) {\r\n        when (requestCode) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/400", "ground_truth": "            REQUEST_CODE_LANGUAGE -> {\r\n                langIndex = index\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\videos\\VideosSortDialog.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/401", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\videos\\VideosSortDialog.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.chat.Raid\nimport com.github.andreyasadchy.xtra.R\nfun hideRaid() {\r\n        with(binding) {\r\n            raidLayout.gone()\r", "choices": [{"text": "//            raidLayout.visibility = View.GONE\r\n        }\r\n    }\r\n\r\nfun showRaid() {\r\n        with(binding) {\r\n            raidLayout.visible()\r\n//            raidLayout.visibility = View.VISIBLE\r\n        }\r\n    }\r\n\r\nfun showRaid(raid: Raid) {\r\n        with(binding) {\r\n            raidLayout.visible()\r\n            raidName.text = raid.name\r\n            raidTime.text = raid.time\r\n            raidDescription.text = raid.description\r\n            raidImage.load(raid.image)\r\n        }\r\n    }"}], "metadata": {"task_id": "Xtra/403", "ground_truth": "            raidImage.gone()\r\n            raidText.gone()\r\n            raidClose.gone()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\chat\\ChatView.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.R\nfun setRecentEmotes(list: List<Emote>?) {\r\n        if (!list.isNullOrEmpty()) {\r", "choices": [{"text": "//            val adapter = EmoteAdapter(list)\r\n//            binding.emoteList.adapter = adapter\r\n//            binding.emoteList.layoutManager = LinearLayoutManager(context)\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Xtra/405", "ground_truth": "            hasRecentEmotes = true\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\chat\\ChatView.kt"}}
{"prompt": "\nvar isChatTouched\nvar adapter ChatAdapter\nvar showFlexbox\n fun addGlobalStvEmotes(list: List<Emote>?) {\r", "choices": [{"text": "//    if (list == null) return\r\n//    for (emote in list) {\r\n//        if (emote.type == \"stv\") {\r\n//            stvEmotes.add(emote)\r\n//        }\r\n//    }\r\n}\r\n\r\nfun addGlobalStvEmotes(list: List<Emote>?) {\r\n    if (list == null) return\r\n    for (emote in list) {\r\n        if (emote.type == \"stv\") {\r\n            stvEmotes.add(emote)\r\n        }\r\n    }\r"}], "metadata": {"task_id": "Xtra/406", "ground_truth": "        adapter.addGlobalStvEmotes(list)\r\n        addToAutoCompleteList(list)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\chat\\ChatView.kt"}}
{"prompt": "\nvar adapter ChatAdapter\nvar autoCompleteList\nvar isChatTouched\n fun addChannelStvEmotes(list: List<Emote>?) {\r", "choices": [{"text": "if (list!= null) {\r\nfor (emote in list) {\r\nif (emote.type == \"stv\") {\r\nadapter.addEmote(emote)\r\n}\r\n}\r\n}\r\n}\r\nfun addChannelEmotes(list: List<Emote>?) {\r\nif (list!= null) {\r\nfor (emote in list) {\r\nif (emote.type == \"gif\") {\r\nadapter.addEmote(emote)\r\n}\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/407", "ground_truth": "        adapter.addChannelStvEmotes(list)\r\n        addToAutoCompleteList(list)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\chat\\ChatView.kt"}}
{"prompt": "\nvar adapter ChatAdapter\nvar showFlexbox\nvar hasRecentEmotes Boolean?\n fun addGlobalBttvEmotes(list: List<Emote>?) {\r", "choices": [{"text": "if (list == null) return\r\nfor (emote in list) {\r\nif (emote.id == null) continue\r\nif (emote.id.startsWith(\"bttv-\")) {\r\nif (emote.id.startsWith(\"bttv-\")) {\r\nif (emote.id.startsWith(\"bttv-\")) {\r\nif (emote.id.startsWith(\"bttv-\")) {\r\nif (emote.id.startsWith(\"bttv-\")) {\r\nif (emote.id.startsWith(\"btt"}], "metadata": {"task_id": "Xtra/408", "ground_truth": "        adapter.addGlobalBttvEmotes(list)\r\n        addToAutoCompleteList(list)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\chat\\ChatView.kt"}}
{"prompt": "\nvar adapter ChatAdapter\nvar isChatTouched\nvar hasRecentEmotes Boolean?\n fun addChannelBttvEmotes(list: List<Emote>?) {\r", "choices": [{"text": "if (list!= null) {\r\nfor (emote in list) {\r\nif (emote.id == null) {\r\ncontinue\r\n}\r\nif (emote.image!= null) {\r\nval emoteImage = emote.image\r\nval emoteId = emote.id\r\nval emoteName = emote.name\r\nval emoteChannel = emote.channel\r\nval emoteChannelId = emote.channelId\r\nval emoteChannelName = emote.channelName\r\nval emoteChannelUrl = emote."}], "metadata": {"task_id": "Xtra/409", "ground_truth": "        adapter.addChannelBttvEmotes(list)\r\n        addToAutoCompleteList(list)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\chat\\ChatView.kt"}}
{"prompt": "\nvar adapter ChatAdapter\nvar showFlexbox\nvar hasRecentEmotes Boolean?\n fun addGlobalFfzEmotes(list: List<Emote>?) {\r", "choices": [{"text": "if (list == null) return\r\nfor (emote in list) {\r\nif (emote.id == null) continue\r\nif (emote.id == 0) continue\r\nif (emote.id == 1) continue\r\nif (emote.id == 2) continue\r\nif (emote.id == 3) continue\r\nif (emote.id == 4) continue\r\nif (emote.id == 5) continue\r\nif (emote.id == 6) continue\r\nif (emote."}], "metadata": {"task_id": "Xtra/410", "ground_truth": "        adapter.addGlobalFfzEmotes(list)\r\n        addToAutoCompleteList(list)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\chat\\ChatView.kt"}}
{"prompt": "\nvar adapter ChatAdapter\nvar isChatTouched\nvar hasRecentEmotes Boolean?\n fun addChannelFfzEmotes(list: List<Emote>?) {\r", "choices": [{"text": "if (list!= null) {\r\nfor (emote in list) {\r\nif (emote.name.contains(\"ffz\")) {\r\nadapter.addEmote(emote)\r\n}\r\n}\r\n}\r\n}\r\nfun addChannelBttvEmotes(list: List<Emote>?) {\r\nif (list!= null) {\r\nfor (emote in list) {\r\nif (emote.name.contains(\"bttv\")) {\r\nadapter.addEmote(emote)\r\n}\r\n}"}], "metadata": {"task_id": "Xtra/411", "ground_truth": "        adapter.addChannelFfzEmotes(list)\r\n        addToAutoCompleteList(list)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\chat\\ChatView.kt"}}
{"prompt": "\nval TYPE_EMOTE\nvar isChatTouched\nvar adapter ChatAdapter\n fun toggleEmoteMenu(enable: Boolean) {\r\n        if (enable) {\r\n            binding.emoteMenu.visible()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/412", "ground_truth": "        } else {\r\n            binding.emoteMenu.gone()\r\n        }\r\n        toggleBackPressedCallback(enable)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\chat\\ChatView.kt"}}
{"prompt": "\n import androidx.core.content.res.use\nimport android.annotation.SuppressLint\n @SuppressLint(\"SetTextI18n\")\r\n    fun reply(userName: CharSequence) {\r\n        val text = \"@$userName \"\r\n        binding.editText.apply {\r", "choices": [{"text": "//            setText(text)\r\n            setSelection(text.length)\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Xtra/414", "ground_truth": "            setText(text)\r\n            setSelection(text.length)\r\n            showKeyboard()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\chat\\ChatView.kt"}}
{"prompt": "\n override fun onDetachedFromWindow() {\r", "choices": [{"text": "super.onDetachedFromWindow()\r\nif (mHandler!= null) {\r\nmHandler.removeCallbacksAndMessages(null)\r\nmHandler = null\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/415", "ground_truth": "        binding.recyclerView.adapter = null\r\n        super.onDetachedFromWindow()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\chat\\ChatView.kt"}}
{"prompt": "\n override fun findTokenStart(text: CharSequence, cursor: Int): Int {\r\n            var i = cursor\r\n\r\n            while (i > 0 && text[i - 1] != ' ') {\r\n                i--\r\n            }\r\n            while (i < cursor && text[i] == ' ') {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/417", "ground_truth": "                i++\r\n            }\r\n\r\n            return i\r\n        }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\chat\\ChatView.kt"}}
{"prompt": "\n override fun findTokenEnd(text: CharSequence, cursor: Int): Int {\r\n            var i = cursor\r\n            val len = text.length\r\n\r\n            while (i < len) {\r\n                if (text[i] == ' ') {\r\n                    return i\r\n                } else {\r\n                    i++\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/418", "ground_truth": "                }\r\n            }\r\n\r\n            return len\r\n        }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\chat\\ChatView.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.content.Context\noverride fun onAttach(context: Context) {\r", "choices": [{"text": "super.onAttach(context)\r\nval activity = context as Activity\r\nval fragmentManager = activity.supportFragmentManager\r\nval fragmentTransaction = fragmentManager.beginTransaction()\r\nval fragment = fragmentManager.findFragmentByTag(C.FRAGMENT_TAG)\r\nif (fragment == null) {\r\nfragmentTransaction.add(R.id.container, MainFragment(), C.FRAGMENT_TAG)\r\nfragmentTransaction.commit()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/420", "ground_truth": "        super.onAttach(context)\r\n        listener = (requireParentFragment() as ChatFragment)::appendEmote\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\chat\\EmotesFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.content.res.Configuration\noverride fun onConfigurationChanged(newConfig: Configuration) {\r", "choices": [{"text": "super.onConfigurationChanged(newConfig)\r\nif (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {\r\n// do something\r\n} else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {\r\n// do something else\r\n}\r\n}\n"}], "metadata": {"task_id": "Xtra/421", "ground_truth": "        super.onConfigurationChanged(newConfig)\r\n        layoutManager.updateWidth()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\chat\\EmotesFragment.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.content.Context\noverride fun onAttach(context: Context) {\r", "choices": [{"text": "super.onAttach(context)\r\nval activity = context as Activity\r\nval fragmentManager = activity.supportFragmentManager\r\nval fragmentTransaction = fragmentManager.beginTransaction()\r\nval fragment = fragmentManager.findFragmentByTag(C.FRAGMENT_TAG)\r\nif (fragment == null) {\r\nfragmentTransaction.add(R.id.container, MainFragment(), C.FRAGMENT_TAG)\r\nfragmentTransaction.commit()\r\n}\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/422", "ground_truth": "        super.onAttach(context)\r\n        listener = parentFragment as OnButtonClickListener\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\chat\\MessageClickedDialog.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r", "choices": [{"text": "return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/423", "ground_truth": "        _binding = DialogChatMessageClickBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\chat\\MessageClickedDialog.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.ui.User\nprivate fun extractUserName(text: CharSequence): String {\r\n        val userName = StringBuilder()\r\n        for (c in text) {\r\n            if (!c.isWhitespace()) {\r\n                if (c != ':') {\r\n                    userName.append(c)\r\n                } else {\r\n                    break\r", "choices": [{"text": "\n import com.github.andreyasadchy.xtra.util.C\nimport com.github.andreyasadchy.xtra.model.ui.User\nprivate fun extractUserName(text: CharSequence): String {\r\n        val userName = StringBuilder()\r\n        for (c in text) {\r\n            if (!c.isWhitespace()) {\r\n                if (c!= ':') {\r\n                    userName.append(c)\r\n                } else {\r\n                    break\r\r\n                }\r\n            }\r\n        }\r\n        return userName.toString()\r\n    }\n\n"}], "metadata": {"task_id": "Xtra/424", "ground_truth": "                }\r\n            }\r\n        }\r\n        return userName.toString()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\chat\\MessageClickedDialog.kt"}}
{"prompt": "\n import android.view.View\noverride fun onDestroyView() {\r", "choices": [{"text": "super.onDestroyView()\r\nbinding = null\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/425", "ground_truth": "        super.onDestroyView()\r\n        _binding = null\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\chat\\MessageClickedDialog.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.ui.isClick\nimport android.view.MotionEvent\nimport android.annotation.SuppressLint\n @SuppressLint(\"ClickableViewAccessibility\")\r\n    override fun onTouchEvent(ev: MotionEvent): Boolean {\r\n        if (ev.isClick(downTouchLocation)) {\r\n            val currentTime = System.currentTimeMillis()\r\n            postDelayed(clickCallback, DOUBLE_TAP_THRESHOLD)\r\n            if (currentTime - lastClickTime < DOUBLE_TAP_THRESHOLD) {\r\n                removeCallbacks(clickCallback)\r\n                listener()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/426", "ground_truth": "            }\r\n            lastClickTime = currentTime\r\n        }\r\n        return true\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\CustomPlayerView.kt"}}
{"prompt": "\n fun setColumnWidth(width: Int) {\r\n        if (width <= 0) {\r\n            throw IllegalArgumentException(\"Width should be more than 0. Provided $width\")\r\n        }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/428", "ground_truth": "        if (columnWidth != width) {\r\n            columnWidth = width\r\n            widthChanged = true\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\GridAutofitLayoutManager.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.util.C\nimport android.view.View\noverride fun onFinishInflate() {\r\n        super.onFinishInflate()\r\n        dragView = getChildAt(0)\r", "choices": [{"text": "}\r\noverride fun onLayout(changed: Boolean, l: Int, t: Int, r: Int, b: Int) {\r\n        super.onLayout(changed, l, t, r, b)\r\n        if (dragView.width == 0) {\r\n            dragView.layout(0, 0, r - l, b - t)\r\n        }\r\n}\r\noverride fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec: Int) {\r\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec)\r\n        if (dragView.width == 0) {"}], "metadata": {"task_id": "Xtra/431", "ground_truth": "        secondView = getChildAt(1)\r\n        init()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\SlidingLayout.kt"}}
{"prompt": " import com.github.andreyasadchy.xtra.util.C\nvar debug\nvar secondView View?\nvar topBound\noverride fun performClick(): Boolean {\r", "choices": [{"text": "if (debug) {\r\nprintln(\r\n\"\"\"\r\n|${__FUNCTION__} [${C.t()}]\r\n|    ${this.javaClass.simpleName}\r\n|    ${this.javaClass.name}\r\n|    ${this.javaClass.canonicalName}\r\n|    ${this.javaClass.superclass}\r\n|    ${this.javaClass.superclass?.canonicalName}\r\n|    ${this.javaClass.superclass?.superclass}\r\n|    ${this.javaClass.superclass?.superclass?.canonical"}], "metadata": {"task_id": "Xtra/433", "ground_truth": "        super.performClick()\r\n        return true\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\SlidingLayout.kt"}}
{"prompt": "\n override fun computeScroll() {\r\n        if (viewDragHelper.continueSettling(true)) {\r", "choices": [{"text": "ViewCompat.postInvalidateOnAnimation(this)\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Xtra/434", "ground_truth": "            postInvalidateOnAnimation()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\SlidingLayout.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.R\nimport android.view.View\nimport android.os.Parcelable\nimport android.os.Bundle\noverride fun onRestoreInstanceState(state: Parcelable?) {\r\n        super.onRestoreInstanceState(state.let {\r\n            if (it is Bundle) {\r\n                isMaximized = it.getBoolean(\"isMaximized\")\r\n                maximizedSecondViewVisibility = it.getInt(\"secondViewVisibility\")\r\n                it.getParcelable(\"superState\")\r", "choices": [{"text": "} else it })\r\n    }\r\n    override fun onSaveInstanceState(outState: Bundle) {\r\n        outState.putBoolean(\"isMaximized\", isMaximized)\r\n        outState.putInt(\"secondViewVisibility\", maximizedSecondViewVisibility)\r\n        super.onSaveInstanceState(outState.putParcelable(\"superState\", super.onSaveInstanceState()))\r\n    }\n<file_sep>/app/src/main/java/com/github/andreyasadchy/xtra/MainActivity.kt\npackage com.github.andreyasadchy.xtra\n\nimport android.os."}], "metadata": {"task_id": "Xtra/436", "ground_truth": "            } else {\r\n                it\r\n            }\r\n        })\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\SlidingLayout.kt"}}
{"prompt": "\n import android.view.View\nfun maximize() {\r\n        isMaximized = true\r\n        secondView?.apply {\r\n            requestLayout()\r\n            visibility = if (isPortrait) {\r\n                View.VISIBLE\r\n            } else {\r\n                shouldUpdateDragLayout = true\r\n                maximizedSecondViewVisibility!!\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/437", "ground_truth": "            }\r\n        }\r\n        animate(1f, 1f)\r\n        listeners.forEach { it.onMaximize() }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\SlidingLayout.kt"}}
{"prompt": "\n import android.animation.PropertyValuesHolder\nimport android.animation.ObjectAnimator\nimport android.animation.Animator\nprivate fun animate(scaleX: Float, scaleY: Float) {\r\n        val sclX = PropertyValuesHolder.ofFloat(\"scaleX\", scaleX)\r\n        val sclY = PropertyValuesHolder.ofFloat(\"scaleY\", scaleY)\r\n        ObjectAnimator.ofPropertyValuesHolder(this, sclX, sclY).apply {\r", "choices": [{"text": "//            duration = 1000\r\n            start()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Xtra/439", "ground_truth": "            duration = ANIMATION_DURATION\r\n            addListener(animatorListener)\r\n            start()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\SlidingLayout.kt"}}
{"prompt": "\n import android.view.View\nprivate fun smoothSlideTo(left: Int, top: Int) {\r\n        if (viewDragHelper.smoothSlideViewTo(dragView, left, top)) {\r", "choices": [{"text": "//            ViewCompat.postInvalidateOnAnimation(this)\r\n        }\r\n    }\r\n"}], "metadata": {"task_id": "Xtra/440", "ground_truth": "            postInvalidateOnAnimation()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\SlidingLayout.kt"}}
{"prompt": "\nvar debug\nvar topBound\nvar savedInsets Insets?\n private fun closeTo(left: Int) {\r", "choices": [{"text": "val leftBound = left - 10\r\nval rightBound = left + 10\r\nif (leftBound < 0) {\r\ndebug(\"left bound is negative\")\r\nreturn\r\n}\r\nif (rightBound > topBound) {\r\ndebug(\"right bound is greater than top bound\")\r\nreturn\r\n}\r\ndebug(\"left bound is $leftBound, right bound is $rightBound\")\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Xtra/441", "ground_truth": "        smoothSlideTo(left, dragViewTop)\r\n        listeners.forEach { it.onClose() }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\SlidingLayout.kt"}}
{"prompt": "\n override fun onSelectionChanged(start: Int, end: Int) {\r\n        val length = text!!.length\r\n        if (start != length || end != length) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/443", "ground_truth": "            setSelection(length, length)\r\n            return\r\n        }\r\n        super.onSelectionChanged(start, end)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\ui\\view\\StrictEditText.kt"}}
{"prompt": "\n import androidx.localbroadcastmanager.content.LocalBroadcastManager\nimport android.content.Intent\nimport android.content.Context\noverride fun onDisabled(context: Context, intent: Intent) {\r\n        super.onDisabled(context, intent)\r\n        LocalBroadcastManager.getInstance(context).sendBroadcast(\r", "choices": [{"text": "Intent(ACTION_STOP_SERVICE))\r\n    }\n"}], "metadata": {"task_id": "Xtra/444", "ground_truth": "            Intent(ACTION_DISABLED)\r\n        )\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\AdminReceiver.kt"}}
{"prompt": "\n import androidx.localbroadcastmanager.content.LocalBroadcastManager\nimport android.content.Intent\nimport android.content.Context\noverride fun onEnabled(context: Context, intent: Intent) {\r\n        super.onEnabled(context, intent)\r\n        LocalBroadcastManager.getInstance(context).sendBroadcast(\r", "choices": [{"text": "Intent(ACTION_ENABLED))\r\n    }\n"}], "metadata": {"task_id": "Xtra/445", "ground_truth": "            Intent(ACTION_ENABLED)\r\n        )\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\AdminReceiver.kt"}}
{"prompt": "\n override fun onCommand(message: String, duration: String?, type: String?, fullMsg: String?) {\r\n        callback.onCommand(Command(\r\n            message = message,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/446", "ground_truth": "            duration = duration,\r\n            type = type,\r\n            fullMsg = fullMsg\r\n        ))\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\chat\\ChatListenerImpl.kt"}}
{"prompt": "\n override fun onNotice(message: String) {\r\n        val parts = message.substring(1).split(\" \".toRegex(), 2)\r\n        val prefixes = splitAndMakeMap(parts[0], \";\", \"=\")\r\n        val messageInfo = parts[1]\r\n        val msgId = prefixes[\"msg-id\"]\r\n        callback.onCommand(Command(\r\n            message = messageInfo.substring(messageInfo.indexOf(\":\", messageInfo.indexOf(\":\") + 1) + 1),\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/447", "ground_truth": "            duration = msgId,\r\n            type = \"notice\",\r\n            fullMsg = message\r\n        ))\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\chat\\ChatListenerImpl.kt"}}
{"prompt": "\n fun disconnect() {\r\n        if (isActive) {\r\n            val thread = Thread {\r\n                isActive = false\r\n                close()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/451", "ground_truth": "            }\r\n            thread.start()\r\n            thread.join()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\chat\\ChatReadIRC.kt"}}
{"prompt": "\nvar socket WebSocket?\nval hashChannelName String\nvar isActive\n fun disconnect() {\r", "choices": [{"text": "socket?.close()\r\n}\r\nfun connect() {\r\nsocket = WebSocket(URI(\"wss://api.bitfinex.com/ws/2\"))\r\nsocket?.connect()\r\nsocket?.addListener(object : WebSocketAdapter() {\r\noverride fun onTextMessage(message: String) {\r\nval json = JSONObject(message)\r\nif (json.has(\"event\")) {\r\nif (json.getString(\"event\") == \"subscribed\") {\r\nval channel = json.getJSONObject(\"chanId\")\r\nhashChannelName = channel.getString(\"chanId\")\r"}], "metadata": {"task_id": "Xtra/453", "ground_truth": "        isActive = false\r\n        socket?.close(1000, null)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\chat\\ChatReadWebSocket.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nprivate fun reconnect() {\r\n        if (isActive) {\r\n            coroutineScope.launch {\r\n                disconnect()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/454", "ground_truth": "                delay(1000)\r\n                connect()\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\chat\\ChatReadWebSocket.kt"}}
{"prompt": "\nvar socket WebSocket?\nval hashChannelName String\nvar isActive\n private fun ping() {\r\n        if (isActive) {\r\n            write(\"PING\")\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/455", "ground_truth": "            checkPong()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\chat\\ChatReadWebSocket.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.onCompletion\nprivate fun checkPong() {\r\n        tickerFlowPong().onCompletion {\r\n            if (isActive) {\r\n                if (pongReceived) {\r\n                    pongReceived = false\r\n                    checkPongWait()\r\n                } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/456", "ground_truth": "                    reconnect()\r\n                }\r\n            }\r\n        }.launchIn(coroutineScope)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\chat\\ChatReadWebSocket.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.flow\nprivate fun tickerFlowPong() = flow {\r\n        for (i in 10 downTo 0) {\r\n            if (pongReceived || !isActive) {\r\n                emit(i downTo 0)\r\n            } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/457", "ground_truth": "                emit(i)\r\n                delay(1000)\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\chat\\ChatReadWebSocket.kt"}}
{"prompt": " import kotlinx.coroutines.flow.onCompletion\nvar pongReceived\nvar socket WebSocket?\nval hashChannelName String\nprivate fun checkPongWait() {\r\n        tickerFlowActive(270).onCompletion {\r", "choices": [{"text": "//            if (pongReceived) {\r\n//                pongReceived = false\r\n//                return@onCompletion\r\n//            }\r\n            socket?.close(1000, \"Pong timeout\")\r\n        }.collect {\r\n            pongReceived = true\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "Xtra/458", "ground_truth": "            if (isActive) {\r\n                ping()\r\n            }\r\n        }.launchIn(coroutineScope)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\chat\\ChatReadWebSocket.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.flow\nprivate fun tickerFlowActive(seconds: Int) = flow {\r\n        for (i in seconds downTo 0) {\r\n            if (!isActive) {\r\n                emit(i downTo 0)\r\n            } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/459", "ground_truth": "                emit(i)\r\n                delay(1000)\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\chat\\ChatReadWebSocket.kt"}}
{"prompt": "\n fun disconnect() {\r\n        if (isActive) {\r\n            val thread = Thread {\r\n                isActive = false\r\n                close()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/461", "ground_truth": "            }\r\n            thread.start()\r\n            thread.join()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\chat\\ChatWriteIRC.kt"}}
{"prompt": "\nvar socket WebSocket?\nval hashChannelName String\nvar isActive\n fun disconnect() {\r", "choices": [{"text": "socket?.close()\r\n}\r\nfun connect() {\r\nsocket = WebSocket(URI(\"wss://api.bitfinex.com/ws/2\"))\r\nsocket?.connect()\r\nsocket?.addListener(object : WebSocketAdapter() {\r\noverride fun onTextMessage(message: String) {\r\nval json = JSONObject(message)\r\nif (json.has(\"event\")) {\r\nif (json.getString(\"event\") == \"subscribed\") {\r\nval channel = json.getJSONObject(\"chanId\")\r\nhashChannelName = channel.getString(\"chanId\")\r"}], "metadata": {"task_id": "Xtra/464", "ground_truth": "        isActive = false\r\n        socket?.close(1000, null)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\chat\\ChatWriteWebSocket.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nprivate fun reconnect() {\r\n        if (isActive) {\r\n            coroutineScope.launch {\r\n                disconnect()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/465", "ground_truth": "                delay(1000)\r\n                connect()\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\chat\\ChatWriteWebSocket.kt"}}
{"prompt": "\nvar socket WebSocket?\nval hashChannelName String\nvar isActive\n private fun ping() {\r\n        if (isActive) {\r\n            write(\"PING\")\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/466", "ground_truth": "            checkPong()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\chat\\ChatWriteWebSocket.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.onCompletion\nprivate fun checkPong() {\r\n        tickerFlowPong().onCompletion {\r\n            if (isActive) {\r\n                if (pongReceived) {\r\n                    pongReceived = false\r\n                    checkPongWait()\r\n                } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/467", "ground_truth": "                    reconnect()\r\n                }\r\n            }\r\n        }.launchIn(coroutineScope)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\chat\\ChatWriteWebSocket.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.flow\nprivate fun tickerFlowPong() = flow {\r\n        for (i in 10 downTo 0) {\r\n            if (pongReceived || !isActive) {\r\n                emit(i downTo 0)\r\n            } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/468", "ground_truth": "                emit(i)\r\n                delay(1000)\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\chat\\ChatWriteWebSocket.kt"}}
{"prompt": " import kotlinx.coroutines.flow.onCompletion\nvar pongReceived\nvar socket WebSocket?\nval hashChannelName String\nprivate fun checkPongWait() {\r\n        tickerFlowActive(270).onCompletion {\r", "choices": [{"text": "//            if (pongReceived) {\r\n//                pongReceived = false\r\n//                return@onCompletion\r\n//            }\r\n            socket?.close(1000, \"Pong timeout\")\r\n        }.collect {\r\n            pongReceived = true\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "Xtra/469", "ground_truth": "            if (isActive) {\r\n                ping()\r\n            }\r\n        }.launchIn(coroutineScope)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\chat\\ChatWriteWebSocket.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.flow\nprivate fun tickerFlowActive(seconds: Int) = flow {\r\n        for (i in seconds downTo 0) {\r\n            if (!isActive) {\r\n                emit(i downTo 0)\r\n            } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/470", "ground_truth": "                emit(i)\r\n                delay(1000)\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\chat\\ChatWriteWebSocket.kt"}}
{"prompt": "\nvar socket WebSocket?\nvar isActive\nvar pongReceived\n fun disconnect() {\r", "choices": [{"text": "socket?.close(1000, \"Goodbye\")\r\nsocket = null\r\n}\r\nfun connect() {\r\nsocket = WebSocket(URI(\"ws://localhost:8080/ws\"))\r\nsocket?.connect()\r\nsocket?.addListener(object : WebSocketListener() {\r\noverride fun onText(message: String, binary: Boolean) {\r\nLog.d(\"WebSocket\", \"onText: $message\")\r\n}\r\noverride fun onOpen(handshake: ServerHandshake) {\r\nLog.d(\"WebSocket\", \"onOpen: $handshake\")\r"}], "metadata": {"task_id": "Xtra/472", "ground_truth": "        isActive = false\r\n        socket?.close(1000, null)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\chat\\PubSubWebSocket.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nprivate fun reconnect() {\r\n        if (isActive) {\r\n            coroutineScope.launch {\r\n                disconnect()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/473", "ground_truth": "                delay(1000)\r\n                connect()\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\chat\\PubSubWebSocket.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.onCompletion\nprivate fun checkPong() {\r\n        tickerFlowPong().onCompletion {\r\n            if (isActive) {\r\n                if (pongReceived) {\r\n                    pongReceived = false\r\n                    checkPongWait()\r\n                } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/475", "ground_truth": "                    reconnect()\r\n                }\r\n            }\r\n        }.launchIn(coroutineScope)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\chat\\PubSubWebSocket.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.flow\nprivate fun tickerFlowPong() = flow {\r\n        for (i in 10 downTo 0) {\r\n            if (pongReceived || !isActive) {\r\n                emit(i downTo 0)\r\n            } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/476", "ground_truth": "                emit(i)\r\n                delay(1000)\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\chat\\PubSubWebSocket.kt"}}
{"prompt": " import kotlinx.coroutines.flow.onCompletion\nvar socket WebSocket?\nvar isActive\nvar pongReceived\nprivate fun checkPongWait() {\r\n        tickerFlowActive(270).onCompletion {\r", "choices": [{"text": "//            if (!pongReceived) {\r\n//                socket?.close(CloseReason(CloseReason.Codes.PROTOCOL_ERROR, \"No pong received\"))\r\n//            }\r\n        }.launchIn(Dispatchers.IO)\r\n    }\n\n"}], "metadata": {"task_id": "Xtra/477", "ground_truth": "            if (isActive) {\r\n                ping()\r\n            }\r\n        }.launchIn(coroutineScope)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\chat\\PubSubWebSocket.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.flow\nprivate fun tickerFlowActive(seconds: Int) = flow {\r\n        for (i in seconds downTo 0) {\r\n            if (!isActive) {\r\n                emit(i downTo 0)\r\n            } else {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/479", "ground_truth": "                emit(i)\r\n                delay(1000)\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\chat\\PubSubWebSocket.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.R\nimport androidx.appcompat.app.AlertDialog\nimport android.os.Build\nimport android.content.Context\nfun Context.getAlertDialogBuilder(): AlertDialog.Builder {\r\n    return if (prefs().getBoolean(C.UI_THEME_MATERIAL3, true)) {\r", "choices": [{"text": "//        MaterialAlertDialogBuilder(this)\r\n        AlertDialog.Builder(this, R.style.ThemeOverlay_MaterialComponents_MaterialAlertDialog_Centered)\r\n    } else {\r\n        AlertDialog.Builder(this)\r\n    }\r\n}\n"}], "metadata": {"task_id": "Xtra/481", "ground_truth": "        MaterialAlertDialogBuilder(this)\r\n    } else {\r\n        AlertDialog.Builder(this)\r\n    }\r\n}", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\ContextExtensions.kt"}}
{"prompt": "\n import android.content.Context\nfun calculateLandscapeWidthByPercent(context: Context, percent: Int): Int {\r\n        val deviceLandscapeWidth = with(context.resources.displayMetrics) {\r\n            if (heightPixels > widthPixels) heightPixels else widthPixels\r", "choices": [{"text": "}\r\n        return (deviceLandscapeWidth * percent / 100).toInt()\r\n    }\n"}], "metadata": {"task_id": "Xtra/482", "ground_truth": "        }\r\n        return (deviceLandscapeWidth * (percent / 100f)).toInt()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\DisplayUtils.kt"}}
{"prompt": "\n import android.content.Context\nfun calculatePortraitHeightByPercent(context: Context, percent: Int): Int {\r\n        val devicePortraitHeight = with(context.resources.displayMetrics) {\r\n            if (widthPixels > heightPixels) widthPixels else heightPixels\r", "choices": [{"text": "}\r\n        return (devicePortraitHeight * percent / 100).toInt()\r\n    }\n"}], "metadata": {"task_id": "Xtra/483", "ground_truth": "        }\r\n        return (devicePortraitHeight * (percent / 100f)).toInt()\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\DisplayUtils.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.ui.download.DownloadService.Companion.KEY_REQUEST\nimport com.github.andreyasadchy.xtra.ui.download.DownloadService\nimport com.github.andreyasadchy.xtra.model.offline.Request\nimport com.github.andreyasadchy.xtra.R\nimport android.content.Intent\nimport android.content.Context\nfun download(context: Context, request: Request) {\r\n        val intent = Intent(context, DownloadService::class.java)\r\n                .putExtra(KEY_REQUEST, request)\r", "choices": [{"text": "\n import com.github.andreyasadchy.xtra.ui.download.DownloadService.Companion.KEY_REQUEST\nimport com.github.andreyasadchy.xtra.ui.download.DownloadService\nimport com.github.andreyasadchy.xtra.model.offline.Request\nimport com.github.andreyasadchy.xtra.R\nimport android.content.Intent\nimport android.content.Context\nfun download(context: Context, request: Request) {\r\n        val intent = Intent(context, DownloadService::class.java)\r\n               .putExtra(KEY_REQUEST, request)\r\ncontext.startService(intent)\r\n}<file_sep>/app/src/main/java/com/github/andreyasadchy/xtra/ui/download/DownloadService.kt\npackage com.github.andreyasadchy.xtra.ui.download\n\nimport android.app.IntentService\nimport android.content.Intent\nimport android.os.Environment\nimport android.util.Log\nimport com.github.andreyasadchy.xtra.model.offline.Request\nimport com.github.andreyasadchy.xtra"}], "metadata": {"task_id": "Xtra/484", "ground_truth": "        context.startService(intent)\r\n        DownloadService.activeRequests.add(request.offlineVideoId)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\DownloadUtils.kt"}}
{"prompt": "\n import java.io.FileOutputStream\nimport java.io.File\nimport android.graphics.Bitmap\nimport android.content.Context\nfun savePng(context: Context, folder: String, fileName: String, bitmap: Bitmap) {\r\n        val outputStream: FileOutputStream\r\n        try {\r\n            val path = context.filesDir.toString() + File.separator + folder + File.separator + \"$fileName.png\"\r\n            File(context.filesDir, folder).mkdir()\r\n            outputStream = FileOutputStream(File(path))\r\n            bitmap.compress(Bitmap.CompressFormat.PNG, 100, outputStream)\r", "choices": [{"text": "//            outputStream.flush()\r\n            outputStream.close()\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.content.Intent\nimport android.graphics.Bitmap\nimport android.graphics.BitmapFactory\nimport android.os.Bundle\nimport android.os.Environment\nimport android.provider.MediaStore\nimport android.util.Log\nimport android.view.View\nimport android.widget.Button\nimport android."}], "metadata": {"task_id": "Xtra/485", "ground_truth": "            outputStream.close()\r\n        } catch (e: Exception) {\r\n\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\DownloadUtils.kt"}}
{"prompt": "\n fun getContentIfNotHandled(): T? {\r\n        return if (hasBeenHandled) {\r\n            null\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/486", "ground_truth": "        } else {\r\n            hasBeenHandled = true\r\n            content\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\Event.kt"}}
{"prompt": "\n import com.tonyodev.fetch2.Fetch\nimport com.github.andreyasadchy.xtra.XtraApp\nfun get(videoId: Int? = null): Fetch {\r\n        if (instance == null || instance!!.isClosed) {\r\n            instance = Fetch.getInstance(\r\n                configurationBuilder.apply {\r\n                    XtraApp.INSTANCE.applicationContext.prefs().getInt(C.DOWNLOAD_CONCURRENT_LIMIT, 10).let { setDownloadConcurrentLimit(it) }\r", "choices": [{"text": "//                    setDownloadConcurrentLimit(10)\r\n                    setDownloadMaxRetryCount(3)\r\n                    setDownloadMaxRetryWaitTime(10000)\r\n                    setDownloadMaxRetryWaitTimeMultiplier(1.5)\r\n                    setDownloadMaxRetryWaitTimeUnit(TimeUnit.SECONDS)\r\n                    setDownloadRetryEnabled(true)\r\n                    setDownloadMaxConnectionPerServer(10)\r\n                    setDownloadMaxConnectionPerServerPerRoute(10)\r\n                    setDownloadMaxRetryCount(3)\r\n                    setDownloadMaxRetryWaitTime(10000)\r\n                    setDownloadMaxRetryWaitTimeMultiplier(1.5)\r\n                   "}], "metadata": {"task_id": "Xtra/487", "ground_truth": "                    setNamespace(\"Fetch #$videoId\")\r\n                }.build())\r\n        }\r\n        return instance!!\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\FetchProvider.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.ui.common.RadioButtonDialogFragment\nimport com.github.andreyasadchy.xtra.R\nimport androidx.fragment.app.FragmentManager\nfun showRadioButtonDialogFragment(fragmentManager: FragmentManager, labels: Collection<CharSequence>, checkedIndex: Int, requestCode: Int = 0) {\r\n        RadioButtonDialogFragment.newInstance(\r\n            requestCode,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/489", "ground_truth": "            labels,\r\n            null,\r\n            checkedIndex\r\n        ).show(fragmentManager, \"closeOnPip\")\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\FragmentUtils.kt"}}
{"prompt": "\n import androidx.lifecycle.Observer\nimport androidx.lifecycle.LifecycleOwner\nimport android.util.Log\noverride fun observe(owner: LifecycleOwner, observer: Observer<in T>) {\r\n        if (hasActiveObservers()) {\r\n            Log.w(TAG, \"Multiple observers registered but only one will be notified of changes.\")\r\n        }\r\n\r\n        super.observe(owner, Observer<T> { t ->\r", "choices": [{"text": "//            Log.d(TAG, \"observe: $t\")\r\n            observer.onChanged(t)\r\n        })\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Xtra/491", "ground_truth": "            if (pending.compareAndSet(true, false)) {\r\n                observer.onChanged(t)\r\n            }\r\n        })\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\SingleLiveEvent.kt"}}
{"prompt": "\n override fun setValue(t: T?) {\r", "choices": [{"text": "// \u8fd9\u91cc\u662f\u5c06\u6570\u636e\u4fdd\u5b58\u5230\u672c\u5730\u7684\u64cd\u4f5c\r\n }\r\n}\r\n"}], "metadata": {"task_id": "Xtra/492", "ground_truth": "        pending.set(true)\r\n        super.setValue(t)\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\SingleLiveEvent.kt"}}
{"prompt": "\n import java.util.Locale\nimport java.util.Date\nimport java.text.SimpleDateFormat\nfun getTimestamp(input: Long, timestampFormat: String?): String? {\r\n        val pattern = when (timestampFormat) {\r\n            \"0\" -> \"H:mm\"\r\n            \"1\" -> \"HH:mm\"\r\n            \"2\" -> \"H:mm:ss\"\r\n            \"3\" -> \"HH:mm:ss\"\r\n            \"4\" -> \"h:mm a\"\r\n            \"5\" -> \"hh:mm a\"\r\n            \"6\" -> \"h:mm:ss a\"\r\n            else -> \"hh:mm:ss a\"\r\n        }\r\n        val format = SimpleDateFormat(pattern, Locale.getDefault())\r\n        return try {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/495", "ground_truth": "            format.format(Date(input))\r\n        } catch (e: Exception) {\r\n            null\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\TwitchApiHelper.kt"}}
{"prompt": "\n import java.util.Locale\nimport java.util.Date\nimport java.text.SimpleDateFormat\nimport java.text.ParseException\nfun parseIso8601Date(date: String): Long? {\r\n        return try {\r\n            SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Locale.getDefault()).parse(date)?.time?.takeIf { it > 0 }\r\n        } catch (e: ParseException) {\r\n            try {\r\n                SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'\", Locale.getDefault()).parse(date)?.time?.takeIf { it > 0 }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/497", "ground_truth": "            } catch (e: ParseException) {\r\n                null\r\n            }\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\TwitchApiHelper.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.R\nfun parseClipOffset(url: String): Double {\r\n        val time = url.substringAfterLast('=').split(\"\\\\D\".toRegex())\r\n        var offset = 0.0\r\n        var multiplier = 1.0\r\n        for (i in time.lastIndex - 1 downTo 0) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Xtra/499", "ground_truth": "            offset += time[i].toDouble() * multiplier\r\n            multiplier *= 60\r\n        }\r\n        return offset\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\TwitchApiHelper.kt"}}
{"prompt": "\n import com.github.andreyasadchy.xtra.R\nimport android.content.Context\nfun formatCount(context: Context, count: Int): String {\r\n        return if (count > 1000 && context.prefs().getBoolean(C.UI_TRUNCATEVIEWCOUNT, false)) {\r", "choices": [{"text": "//            val formatter = NumberFormat.getInstance(Locale.getDefault())\r\n//            formatter.maximumFractionDigits = 1\r\n//            formatter.format(count / 1000.0) + \"k\"\r\n            context.getString(R.string.format_count_k, count / 1000)\r\n        } else {\r\n            count.toString()\r\n        }\r\n    }\n<file_sep>/app/src/main/java/com/github/andreyasadchy/xtra/ui/settings/SettingsFragment.kt\npackage com.github.andreyasad"}], "metadata": {"task_id": "Xtra/502", "ground_truth": "            formatCountIfMoreThanAThousand(count)\r\n        } else {\r\n            count.toString()\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\TwitchApiHelper.kt"}}
{"prompt": "\n import com.bumptech.glide.load.resource.bitmap.BitmapTransitionOptions\nimport com.bumptech.glide.Glide\nimport android.widget.ImageView\nimport android.view.View\nfun ImageView.loadBitmap(url: String) {\r\n    if (context.isActivityResumed) {\r\n        try {\r\n            Glide.with(context)\r\n                    .asBitmap()\r\n                    .load(url)\r\n                    .transition(BitmapTransitionOptions.withCrossFade())\r", "choices": [{"text": "\n import com.bumptech.glide.load.resource.bitmap.BitmapTransitionOptions\nimport com.bumptech.glide.Glide\nimport android.widget.ImageView\nimport android.view.View\nfun ImageView.loadBitmap(url: String) {\r\n    if (context.isActivityResumed) {\r\n        try {\r\n            Glide.with(context)\r\n                   .asBitmap()\r\n                   .load(url)\r\n                   .transition(BitmapTransitionOptions.withCrossFade())\r\n//                   .placeholder(R.drawable.ic_placeholder)\r\n                   .into(this)\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n}\n"}], "metadata": {"task_id": "Xtra/507", "ground_truth": "                    .into(this)\r\n        } catch (e: IllegalArgumentException) {\r\n        }\r\n    }\r\n}", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\ViewExtensions.kt"}}
{"prompt": "\n import androidx.appcompat.widget.SearchView\nimport android.view.inputmethod.InputMethodManager\nimport android.view.View\nimport android.content.Context\nfun SearchView.showKeyboard() {\r\n    val imm: InputMethodManager? = context.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager?\r", "choices": [{"text": "imm?.showSoftInput(this, InputMethodManager.SHOW_IMPLICIT)\r\n}\r\nfun SearchView.hideKeyboard() {\r\n    val imm: InputMethodManager? = context.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager?\r\nimm?.hideSoftInputFromWindow(this.windowToken, 0)\r\n}\n"}], "metadata": {"task_id": "Xtra/509", "ground_truth": "    this.postDelayed({\r\n        this.isIconified = false\r\n        imm?.showSoftInput(this, 0)\r\n    }, 100)\r\n}", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\ViewExtensions.kt"}}
{"prompt": "\n import androidx.annotation.ColorRes\nimport android.widget.ImageView\nimport android.view.View\nimport android.graphics.Color\nfun ImageView.setTint(@ColorRes tint: Int) {\r", "choices": [{"text": "setTint(ContextCompat.getColor(context, tint))\r\n}\r\nfun View.setTint(@ColorRes tint: Int) {\r\nsetBackgroundColor(ContextCompat.getColor(context, tint))\r\n}\r\nfun View.setTint(color: Int) {\r\nsetBackgroundColor(color)\r\n}\r\nfun View.setTint(color: Color) {\r\nsetBackgroundColor(color)\r\n}\r\nfun View.setTint(color: String) {\r\nsetBackgroundColor(Color.parseColor(color))\r\n}\r\nfun"}], "metadata": {"task_id": "Xtra/510", "ground_truth": "    val color = ContextCompat.getColor(context, tint)\r\n    drawable.setTint(color)\r\n}", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\ViewExtensions.kt"}}
{"prompt": "\n import android.widget.ImageView\nimport android.view.View\nfun ImageView.enable() {\r", "choices": [{"text": "this.isEnabled = true\r\nthis.alpha = 1.0f\r\n}\r\n\r\nfun ImageView.disable() {\r\nthis.isEnabled = false\r\nthis.alpha = 0.5f\r\n}\r\n\r\nfun View.enable() {\r\nthis.isEnabled = true\r\nthis.alpha = 1.0f\r\n}\r\n\r\nfun View.disable() {\r\nthis.isEnabled = false\r\nthis.alpha = 0.5f\r\n}\r\n"}], "metadata": {"task_id": "Xtra/511", "ground_truth": "    isEnabled = true\r\n    setColorFilter(Color.WHITE)\r\n}", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\ViewExtensions.kt"}}
{"prompt": "\n import android.widget.ImageView\nimport android.view.View\nfun ImageView.disable() {\r", "choices": [{"text": "this.isEnabled = false\r\nthis.alpha = 0.5f\r\n}\r\n\r\nfun ImageView.enable() {\r\nthis.isEnabled = true\r\nthis.alpha = 1f\r\n}\r\n\r\nfun ImageView.setTint(color: Int) {\r\nthis.setColorFilter(color, PorterDuff.Mode.SRC_IN)\r\n}\r\n\r\nfun ImageView.setTint(color: ColorStateList) {\r\nthis.imageTintList = color\r\n}\r\n\r\nfun ImageView.setTint(color: Int, mode: PorterDuff"}], "metadata": {"task_id": "Xtra/512", "ground_truth": "    isEnabled = false\r\n    setColorFilter(Color.GRAY)\r\n}", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\ViewExtensions.kt"}}
{"prompt": "\n import android.graphics.Canvas\noverride fun draw(canvas: Canvas) {\r\n        for (i in 0..6) {\r", "choices": [{"text": "canvas.drawCircle(100f, 100f, 100f, paint)\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Xtra/514", "ground_truth": "            super.draw(canvas)\r\n        }\r\n    }", "fpath": "Xtra\\app\\src\\main\\java\\com\\github\\andreyasadchy\\xtra\\util\\ViewExtensions.kt"}}
{"prompt": "\n import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\n@Override\r\npublic void setAdapter(Adapter adapterNew) {\r\n    final RecyclerView.Adapter adapterOld = getAdapter();\r\n    if (adapterOld != null) {\r\n        adapterOld.unregisterAdapterDataObserver(mObserver);\r\n    }\r\n    super.setAdapter(adapterNew);\r", "choices": [{"text": "\n import androidx.recyclerview.widget.RecyclerView\nimport android.view.View\n@Override\r\npublic void setAdapter(Adapter adapterNew) {\r\n    final RecyclerView.Adapter adapterOld = getAdapter();\r\n    if (adapterOld!= null) {\r\n        adapterOld.unregisterAdapterDataObserver(mObserver);\r\n    }\r\n    super.setAdapter(adapterNew);\r\n}\r\n"}], "metadata": {"task_id": "simplenote-android/612", "ground_truth": "    if (adapterNew != null) {\r\n        adapterNew.registerAdapterDataObserver(mObserver);\r\n    }\r\n    toggleEmptyView();\r\n}", "fpath": "simplenote-android\\Simplenote\\src\\main\\java\\com\\automattic\\simplenote\\widgets\\EmptyViewRecyclerView.java"}}
{"prompt": "\n import dev.leonlatsch.photok.model.database.entity.Photo\noverride fun prepareViewModel(items: List<Photo>?) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Photok/0", "ground_truth": "        super.prepareViewModel(items)\r\n        viewModel.uri = uri\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\BackupBottomSheetDialogFragment.kt"}}
{"prompt": "\n override suspend fun preProcess() {\r\n        items = photoRepository.getAll()\r\n        elementsToProcess = items.size\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Photok/1", "ground_truth": "        openZipFile()\r\n        super.preProcess()\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\BackupViewModel.kt"}}
{"prompt": " import java.util.zip.ZipEntry\nimport dev.leonlatsch.photok.model.database.entity.Photo\nvar uri Uri\nval gson Gson\nvar backedUpPhotos\noverride suspend fun processItem(item: Photo) {\r\n        val success = writePhotoToZipEntry(item)\r\n        if (success) {\r", "choices": [{"text": "//            item.isBackedUp = true\r\n            item.backedUp = true\r\n            item.backedUpDate = Date()\r\n            item.backedUpDateLong = item.backedUpDate!!.time\r\n            item.backedUpDateString = item.backedUpDate!!.toString()\r\n            item.backedUpDateLongString = item.backedUpDate!!.toString()\r\n            item.backedUpDateString = item.backedUpDate!!.toString()\r\n            item.backedUpDateStringLong = item.backedUpDate!!.toString()\r\n            item.backedUpDateStringLongString ="}], "metadata": {"task_id": "Photok/2", "ground_truth": "            backedUpPhotos.add(item)\r\n        } else {\r\n            failuresOccurred = true\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\BackupViewModel.kt"}}
{"prompt": "\nvar zipOutputStream ZipOutputStream\nvar backedUpPhotos\nval gson Gson\n private fun openZipFile() {\r", "choices": [{"text": "val file = File(Environment.getExternalStorageDirectory().toString() + \"/backup.zip\")\r\nzipOutputStream = ZipOutputStream(FileOutputStream(file))\r\n}\r\nprivate fun closeZipFile() {\r\nzipOutputStream.close()\r\n}\r\nprivate fun backupPhotos() {\r\nval file = File(Environment.getExternalStorageDirectory().toString() + \"/backup.zip\")\r\nval fileInputStream = FileInputStream(file)\r\nval bufferedInputStream = BufferedInputStream(fileInputStream)\r\nval bufferedOutputStream = BufferedOutputStream(zipOutputStream)\r\nval buffer = ByteArray(1"}], "metadata": {"task_id": "Photok/4", "ground_truth": "        val out = app.contentResolver.openOutputStream(uri)\r\n        zipOutputStream = ZipOutputStream(out)\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\BackupViewModel.kt"}}
{"prompt": "\n import java.util.zip.ZipEntry\nimport java.io.InputStream\nprivate fun writeZipEntry(fileName: String, inputStream: InputStream?): Boolean {\r\n        inputStream ?: return false\r\n\r\n        return try {\r\n            val entry = ZipEntry(fileName)\r\n            zipOutputStream.putNextEntry(entry)\r\n            inputStream.copyTo(zipOutputStream)\r\n            zipOutputStream.closeEntry()\r\n            true\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/5", "ground_truth": "        } catch (e: IOException) {\r\n            Timber.d(\"Cloud not write to backup: $e\")\r\n            false\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\BackupViewModel.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.databinding.DialogRestoreBackupBinding\nimport dev.leonlatsch.photok.R\noverride fun bind(binding: DialogRestoreBackupBinding) {\r\n        super.bind(binding)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Photok/7", "ground_truth": "        binding.context = this\r\n        binding.viewModel = viewModel\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\RestoreBackupDialogFragment.kt"}}
{"prompt": "\n private fun getVersion(): Int {\r\n        metaData?.let {\r\n            return if (it.backupVersion == 0) { // Treat legacy version 0 as 1\r\n                1\r\n            } else {\r\n                it.backupVersion\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/8", "ground_truth": "            }\r\n        }\r\n\r\n        return -1\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\RestoreBackupViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport androidx.lifecycle.viewModelScope\nimport android.net.Uri\nfun restoreBackup(origPassword: String) = viewModelScope.launch(Dispatchers.IO) {\r\n        restoreState = RestoreState.RESTORING\r\n\r\n        createStream(fileUri)?.use {\r\n            when (backupVersion) {\r\n                1 -> restoreVersion1(it, origPassword)\r\n                2 -> restoreVersion2(it, origPassword)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/9", "ground_truth": "            }\r\n\r\n            restoreState = RestoreState.FINISHED\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\RestoreBackupViewModel.kt"}}
{"prompt": "\n import java.util.zip.ZipInputStream\nimport java.io.IOException\nimport timber.log.Timber\nimport android.net.Uri\nprivate fun createStream(uri: Uri): ZipInputStream? {\r\n        val inputStream = try {\r\n            app.contentResolver.openInputStream(uri)\r\n        } catch (e: IOException) {\r\n            Timber.d(\"Error opening backup at: $uri\")\r\n            null\r\n        }\r\n        return if (inputStream != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/10", "ground_truth": "            ZipInputStream(BufferedInputStream(inputStream))\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\RestoreBackupViewModel.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.other.extensions.hide\nfun onUnlock() {\r\n        binding.unlockBackupWrongPasswordWarning.hide()\r\n        viewModel.verifyPassword(backupPassword) {\r\n            if (it) {\r\n                dismiss()\r\n                onUnlockSuccess(viewModel.password)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/12", "ground_truth": "            } else {\r\n                binding.unlockBackupWrongPasswordWarning.show()\r\n            }\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\UnlockBackupDialogFragment.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.databinding.DialogBackupUnlockBinding\noverride fun bind(binding: DialogBackupUnlockBinding) {\r\n        super.bind(binding)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Photok/13", "ground_truth": "        binding.viewModel = viewModel\r\n        binding.context = this\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\UnlockBackupDialogFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun verifyPassword(backupPassword: String, result: (valid: Boolean) -> Unit) =\r\n        viewModelScope.launch {\r", "choices": [{"text": "//            val result = withContext(Dispatchers.IO) {\r\n//                val result = withContext(Dispatchers.IO) {\r\n//                    val result = withContext(Dispatchers.IO) {\r\n//                        val result = withContext(Dispatchers.IO) {\r\n//                            val result = withContext(Dispatchers.IO) {\r\n//                                val result = withContext(Dispatchers.IO) {\r\n//                                    val result = withContext(Dispatchers.IO) {\r\n//                                        val result = withContext(Dispatchers.IO) {\r"}], "metadata": {"task_id": "Photok/14", "ground_truth": "            val valid = passwordManager.checkPassword(password, backupPassword)\r\n            result(valid)\r\n        }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\backup\\ui\\UnlockBackupViewModel.kt"}}
{"prompt": "\n import timber.log.Timber\nimport dev.leonlatsch.photok.settings.data.Config\noverride fun onCreate() {\r\n        super.onCreate()\r\n\r\n        if (BuildConfig.DEBUG) {\r\n            Timber.plant(Timber.DebugTree())\r\n        }\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Photok/15", "ground_truth": "\r\n        ProcessLifecycleOwner.get().lifecycle.addObserver(this)\r\n\r\n        setAppDesign(config.systemDesign)\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\BaseApplication.kt"}}
{"prompt": "\nval dateFormat SimpleDateFormat\nval BYTES_SUFFIX\nval KB_SUFFIX\n fun millisToFormattedDateConverter(millis: Long): String? {\r", "choices": [{"text": "return dateFormat.format(Date(millis))\r\n}\r\n"}], "metadata": {"task_id": "Photok/18", "ground_truth": "        val date = Date(millis)\r\n        return dateFormat.format(date)\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\databinding\\BindingConverters.kt"}}
{"prompt": "\n import javax.inject.Singleton\nimport dev.leonlatsch.photok.model.database.PhotokDatabase\nimport dagger.hilt.android.qualifiers.ApplicationContext\nimport dagger.Provides\nimport androidx.room.Room\nimport android.content.Context\n @Provides\r\n    @Singleton\r\n    fun providePhotokDatabase(@ApplicationContext app: Context) = Room.databaseBuilder(\r\n        app,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/19", "ground_truth": "        PhotokDatabase::class.java,\r\n        DATABASE_NAME\r\n    ).build()", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\di\\AppModule.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        viewModel.navigationEvent.observe(this) {\r", "choices": [{"text": "//            when (it) {\r\n//                NavigationEvent.GoToLogin -> {\r\n//                    startActivity(Intent(this, LoginActivity::class.java))\r\n//                    finish()\r\n//                }\r\n//                NavigationEvent.GoToHome -> {\r\n//                    startActivity(Intent(this, HomeActivity::class.java))\r\n//                    finish()\r\n//                }\r\n//                NavigationEvent.GoToRegister -> {\r\n//                    startActivity(Intent(this, RegisterActivity::class.java))\r\n//                    finish()\r\n//                }"}], "metadata": {"task_id": "Photok/21", "ground_truth": "            navigator.navigate(it, this)\r\n        }\r\n\r\n        viewModel.evaluateNavigation()\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\forwarddialer\\ForwardDialerActivity.kt"}}
{"prompt": "\n fun navigate(navigationEvent: NavigationEvent, activity: ForwardDialerActivity) {\r\n        when (navigationEvent) {\r\n            NavigationEvent.ForwardToDialer -> navigateForwardToDialer(activity)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/22", "ground_truth": "            NavigationEvent.OpenRecoveryMenu -> navigateOpenRecoveryMenu(activity)\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\forwarddialer\\ForwardDialerNavigator.kt"}}
{"prompt": "\n import timber.log.Timber\nimport dev.leonlatsch.photok.recoverymenu.RecoveryMenuActivity\nimport android.content.Intent\nprivate fun navigateOpenRecoveryMenu(activity: ForwardDialerActivity) {\r\n        Timber.d(\"opening recovery menu\")\r\n        val intent = Intent(activity, RecoveryMenuActivity::class.java)\r", "choices": [{"text": "//        intent.putExtra(RecoveryMenuActivity.EXTRA_RECOVERY_MENU_TYPE, RecoveryMenuActivity.RecoveryMenuType.FORWARD_DIALER)\r\n        activity.startActivity(intent)\r\n    }\n"}], "metadata": {"task_id": "Photok/23", "ground_truth": "        activity.apply {\r\n            startActivity(intent)\r\n            finish()\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\forwarddialer\\ForwardDialerNavigator.kt"}}
{"prompt": "\n import android.content.Intent\nprivate fun navigateForwardToDialer(activity: ForwardDialerActivity) {\r\n        val dialIntent = Intent(Intent.ACTION_DIAL).apply {\r\n            flags = Intent.FLAG_ACTIVITY_CLEAR_TOP\r\n        }\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Photok/24", "ground_truth": "        activity.apply {\r\n            startActivity(dialIntent)\r\n            finishAndRemoveTask()\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\forwarddialer\\ForwardDialerNavigator.kt"}}
{"prompt": "\n import android.provider.Settings\noperator fun invoke(): Boolean {\r\n        return Settings.System.getInt(\r", "choices": [{"text": ")\r\n}<file_sep>/src/main/java/com/github/jonathanxd/kores/base/comment/Comment.kt\n/*\n *      Kores - Java source and Bytecode generation framework <https://github.com/JonathanxD/Kores>\n *\n *         The MIT License (MIT)\n *\n *      Copyright (c) 2021 TheRealBuggy/JonathanxD (https://github.com/JonathanxD/) <<EMAIL>>\n *      Copyright (c) contributors\n *\n *\n *      Permission is hereby granted, free"}], "metadata": {"task_id": "Photok/25", "ground_truth": "            context.contentResolver,\r\n            Settings.Global.AIRPLANE_MODE_ON,\r\n            0\r\n        ) != 0\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\forwarddialer\\usecase\\IsAirplaneModeOnUseCase.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.R\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.foundation.layout.Row\n\r\n@Preview\r\n@Composable\r\nprivate fun GalleryInteractionsPreview() {\r\n    MaterialTheme {\r\n        GalleryInteractionsRow(\r\n            onClose = {},\r\n            onSelectAll = {},\r", "choices": [{"text": "//            onDeselectAll = {},\r\n            onToggleSelection = {},\r\n            onToggleFavorite = {},\r\n            onToggleHidden = {},\r\n            onToggleHidden = {},\r\n            onToggleHidden = {},\r\n            onToggleHidden = {},\r\n            onToggleHidden = {},\r\n            onToggleHidden = {},\r\n            onToggleHidden = {},\r\n            onToggleHidden = {},\r\n            onToggleHidden = {},\r\n            onToggleHidden = {},\r\n            onToggleHidden = {},\r\n            onToggleHidden = {},\r\n            onToggleHidden = {},\r\n            onToggleHidden = {},\r\n            onToggleHidden = {},\r\n            onToggleHidden = {},\r\n            onToggleHidden = {},\r\n            onToggleHidden = {},"}], "metadata": {"task_id": "Photok/26", "ground_truth": "            onDelete = {},\r\n            onExport = {},\r\n        )\r\n    }\r\n}", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\compose\\GalleryInteractionsRow.kt"}}
{"prompt": "\n import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\n\r\n@Preview(showBackground = true, backgroundColor = 0xFFFFFF)\r\n@Composable\r\nprivate fun GalleryPlaceholderPreview() {\r\n    MaterialTheme {\r", "choices": [{"text": "//        GalleryPlaceholder()\r\n    }\r\n}\r\n<file_sep>/app/src/main/java/com/example/androiddevchallenge/ui/theme/Color.kt\n/*\n * Copyright 2021 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or"}], "metadata": {"task_id": "Photok/27", "ground_truth": "        GalleryPlaceholder {}\r\n    }\r\n}", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\compose\\GalleryPlaceholder.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.gallery.ui.GalleryViewModel\nimport dev.leonlatsch.photok.gallery.ui.GalleryUiState\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\n\r\n@Composable\r\nfun GalleryScreen(viewModel: GalleryViewModel) {\r\n\r\n    val uiState by viewModel.uiState.collectAsState()\r\n\r\n    MaterialTheme {\r\n        when (uiState) {\r\n            is GalleryUiState.Empty -> GalleryPlaceholder { viewModel.handleUiEvent(it) }\r\n\r\n            is GalleryUiState.Content -> GalleryContent(\r\n                uiState as GalleryUiState.Content,\r", "choices": [{"text": "//                onImageClick = { viewModel.handleUiEvent(GalleryUiEvent.ImageClicked(it)) },\r\n                onImageClick = { viewModel.handleUiEvent(GalleryUiEvent.ImageClicked(it)) },\r\n                onImageLongClick = { viewModel.handleUiEvent(GalleryUiEvent.ImageLongClicked(it)) },\r\n                onImageDelete = { viewModel.handleUiEvent(GalleryUiEvent.ImageDelete(it)) },\r\n                onImageShare = { viewModel.handleUiEvent(GalleryUiEvent.ImageShare(it)) },\r\n                onImageDownload = { viewModel.handleUiEvent(GalleryUi"}], "metadata": {"task_id": "Photok/28", "ground_truth": "                handleUiEvent = { viewModel.handleUiEvent(it) }\r\n            )\r\n        }\r\n    }\r\n}", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\compose\\GalleryScreen.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.R\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.res.colorResource\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.Modifier\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.FloatingActionButton\n\r\n@Composable\r\nfun ImportButton(\r\n    onClick: () -> Unit,\r\n    modifier: Modifier = Modifier,\r\n) {\r\n    FloatingActionButton(\r\n        onClick = onClick,\r\n        containerColor = colorResource(R.color.colorPrimary),\r\n        modifier = modifier,\r\n    ) {\r\n        Icon(\r\n            painter = painterResource(R.drawable.ic_add),\r", "choices": [{"text": "//            contentDescription = \"Add\",\r\n            tint = Color.White,\r\n        )\r\n    }\r\n}<file_sep>/app/src/main/java/dev/leonlatsch/photok/ui/theme/Color.kt\npackage dev.leonlatsch.photok.ui.theme\n\nimport androidx.compose.ui.graphics.Color\n\nval Purple200 = Color(0xFFBB86FC)\nval Purple500 = Color(0xFF6200EE)\nval Purple700 = Color(0xFF37"}], "metadata": {"task_id": "Photok/29", "ground_truth": "            contentDescription = null,\r\n            tint = Color.White\r\n        )\r\n    }\r\n}", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\compose\\ImportButton.kt"}}
{"prompt": "\n import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\n\r\n@Preview\r\n@Composable\r\nprivate fun ImportButtonPreview() {\r\n    ImportButton(\r", "choices": [{"text": ")\r\n}\r\n\n"}], "metadata": {"task_id": "Photok/30", "ground_truth": "        onClick = {}\r\n    )\r\n}", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\compose\\ImportButton.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.imageloading.compose.LocalEncryptedImageLoader\nimport androidx.compose.ui.platform.ComposeView\nimport androidx.compose.runtime.CompositionLocalProvider\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View = ComposeView(requireContext()).apply {\r\n        setContent {\r\n            CompositionLocalProvider(\r\n                LocalEncryptedImageLoader provides viewModel.encryptedImageLoader\r", "choices": [{"text": ") {\r\n                PhotoDetailScreen(\r\n                    photo = viewModel.photo,\r\n                    onBackPressed = viewModel::onBackPressed\r\n                )\r\n            }\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Photok/32", "ground_truth": "            ) {\r\n                GalleryScreen(viewModel)\r\n            }\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\GalleryFragment.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.other.extensions.launchLifecycleAwareJob\nimport androidx.navigation.fragment.findNavController\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        launchLifecycleAwareJob {\r\n            viewModel.eventsFlow.collect { event ->\r\n                navigator.navigate(event, findNavController(), this)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/33", "ground_truth": "            }\r\n        }\r\n\r\n        viewModel.checkForNewFeatures()\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\GalleryFragment.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.settings.data.Config\nimport android.content.res.Configuration\noverride fun onConfigurationChanged(newConfig: Configuration) {\r\n        super.onConfigurationChanged(newConfig)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Photok/34", "ground_truth": "\r\n        viewModel.onConfigurationChanged()\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\GalleryFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.flow.update\nprivate fun onPhotoLongPressed(item: PhotoTile) {\r\n        if (multiSelectionState.value.isActive.not()) {\r\n            multiSelectionState.update {\r\n                it.copy(\r\n                    isActive = true,\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/39", "ground_truth": "                    selectedItemUUIDs = listOf(item.uuid)\r\n                )\r\n            }\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\GalleryViewModel.kt"}}
{"prompt": " import dev.leonlatsch.photok.uicomponnets.Chooser\nval REQ_CONTENT_PHOTOS\nval REQ_CONTENT_BACKUP\nval REQ_CONTENT_VIDEOS\nfun startSelectBackup() = Chooser.Builder()\r\n        .message(\"Select Backup\")\r", "choices": [{"text": " import dev.leonlatsch.photok.uicomponnets.Chooser\nval REQ_CONTENT_PHOTOS\nval REQ_CONTENT_BACKUP\nval REQ_CONTENT_VIDEOS\nfun startSelectBackup() = Chooser.Builder()\r\n       .message(\"Select Backup\")\r\n//       .title(\"Select Backup\")\r\n       .type(Chooser.Type.FILE_DIR)\r\n       .start(this, REQ_CONTENT_BACKUP)\nfun startSelectPhotos() = Chooser.Builder()\r\n       .message(\"Select Photos\")\r\n//       .title(\"Select Photos\")\r\n       .type(Chooser.Type.FILE_DIR)\r\n       .start(this, REQ_CONTENT_PHOTOS)\nfun startSelectVideos() = Chooser.Builder()\r\n       .message(\"Select Videos\")\r\n//       .title(\"Select Videos\")\r\n       .type(Chooser.Type"}], "metadata": {"task_id": "Photok/44", "ground_truth": "        .mimeType(\"application/zip\")\r\n        .requestCode(REQ_CONTENT_BACKUP)\r\n        .show(this)", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\importing\\ImportMenuDialog.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.R\nimport android.content.Intent\nimport android.app.Activity\noverride fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n\r\n        if (resultCode == Activity.RESULT_OK) {\r\n            when (requestCode) {\r\n                REQ_CONTENT_PHOTOS -> dispatchPhotoImportRequest(data)\r\n                REQ_CONTENT_VIDEOS -> dispatchVideosImportRequest(data)\r\n                REQ_CONTENT_BACKUP -> dispatchBackupImportRequest(data)\r", "choices": [{"text": "//                REQ_CONTENT_PHOTOS_FROM_CAMERA -> dispatchPhotoImportRequest(data)\r\n//                REQ_CONTENT_VIDEOS_FROM_CAMERA -> dispatchVideosImportRequest(data)\r\n//                REQ_CONTENT_BACKUP_FROM_CAMERA -> dispatchBackupImportRequest(data)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun dispatchPhotoImportRequest(data: Intent?) {\r\n        val intent = Intent(this, PhotoImportActivity::class.java)\r\n        intent.putExtras(data)\r\n        startActivity(intent)\r\n    }\r\n\r\n    private fun dispatchVideosImportRequest(data: Intent?) {"}], "metadata": {"task_id": "Photok/45", "ground_truth": "            }\r\n        }\r\n\r\n        dismiss()\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\importing\\ImportMenuDialog.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.R\nimport android.content.Intent\nprivate fun dispatchBackupImportRequest(data: Intent?) = data?.let {\r\n        it.data?.let { uri ->\r", "choices": [{"text": "//            val file = File(uri.path)\r\n//            val file = File(uri.path)\r\n//            val file = File(uri.path)\r\n//            val file = File(uri.path)\r\n//            val file = File(uri.path)\r\n//            val file = File(uri.path)\r\n//            val file = File(uri.path)\r\n//            val file = File(uri.path)\r\n//            val file = File(uri.path)\r\n//            val file = File(uri.path"}], "metadata": {"task_id": "Photok/46", "ground_truth": "            RestoreBackupDialogFragment(uri).show(requireActivity().supportFragmentManager)\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\importing\\ImportMenuDialog.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.R\nimport android.net.Uri\nimport android.content.Intent\nprivate fun dispatchMediaElementsImportRequest(data: Intent?) = data?.let {\r\n        val mediaUris = resolveUrisFromIntent(it)\r\n        if (mediaUris.isNotEmpty()) {\r", "choices": [{"text": "//            val mediaElements = mediaUris.map { MediaElement(it) }\r\n//            val mediaElements = mediaUris.map { MediaElement(it) }\r\n//            val mediaElements = mediaUris.map { MediaElement(it) }\r\n//            val mediaElements = mediaUris.map { MediaElement(it) }\r\n//            val mediaElements = mediaUris.map { MediaElement(it) }\r\n//            val mediaElements = mediaUris.map { MediaElement(it) }\r\n//            val mediaElements = media"}], "metadata": {"task_id": "Photok/47", "ground_truth": "            ImportBottomSheetDialogFragment(mediaUris).show(requireActivity().supportFragmentManager)\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\importing\\ImportMenuDialog.kt"}}
{"prompt": "\n import android.net.Uri\nimport android.content.Intent\nprivate fun resolveUrisFromIntent(data: Intent): MutableList<Uri> {\r\n        val uris = mutableListOf<Uri>()\r\n        if (data.clipData != null) {\r\n            val count = data.clipData!!.itemCount\r\n            for (i in 0 until count) {\r\n                val uri = data.clipData!!.getItemAt(i).uri\r\n                uris.add(uri)\r\n            }\r\n        } else if (data.data != null) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/48", "ground_truth": "            val uri = data.data!!\r\n            uris.add(uri)\r\n        }\r\n        return uris\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\importing\\ImportMenuDialog.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.databinding.DialogImportMenuBinding\noverride fun bind(binding: DialogImportMenuBinding) {\r", "choices": [{"text": "binding.importButton.setOnClickListener {\r\n    val intent = Intent(Intent.ACTION_OPEN_DOCUMENT)\r\n    intent.addCategory(Intent.CATEGORY_OPENABLE)\r\n    intent.type = \"image/*\"\r\n    startActivityForResult(intent, REQUEST_CODE_IMPORT)\r\n}\r\nbinding.importButton.setOnClickListener {\r\n    val intent = Intent(Intent.ACTION_OPEN_DOCUMENT)\r\n    intent.addCategory(Intent.CATEGORY_OPENABLE)\r\n    intent.type = \"image/*\"\r\n    startActivityForResult(intent, REQUEST_CODE_IMPORT)\r\n}\r\nbinding.importButton."}], "metadata": {"task_id": "Photok/49", "ground_truth": "        super.bind(binding)\r\n        binding.context = this\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\importing\\ImportMenuDialog.kt"}}
{"prompt": "\n import android.net.Uri\noverride suspend fun processItem(item: Uri) {\r\n        val success = photoRepository.safeImportPhoto(item)\r\n        if (!success) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/50", "ground_truth": "            failuresOccurred = true\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\importing\\ImportViewModel.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.model.database.entity.Photo\noverride suspend fun processItem(item: Photo) {\r\n        val result = photoRepository.exportPhoto(item)\r\n        if (!result) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/52", "ground_truth": "            failuresOccurred = true\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\gallery\\ui\\menu\\ExportViewModel.kt"}}
{"prompt": "\n import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onViewCreated(view, savedInstanceState)\r\nview.findViewById<View>(R.id.button).setOnClickListener {\r\nval intent = Intent(activity, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Photok/57", "ground_truth": "        super.onViewCreated(view, savedInstanceState)\r\n        photo ?: dismiss()\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\imageviewer\\ui\\DetailsBottomSheetDialog.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.databinding.DialogBottomSheetDetailsBinding\noverride fun bind(binding: DialogBottomSheetDetailsBinding) {\r", "choices": [{"text": ""}], "metadata": {"task_id": "Photok/58", "ground_truth": "        super.bind(binding)\r\n        binding.context = this\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\imageviewer\\ui\\DetailsBottomSheetDialog.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.R\nimport android.view.View\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean = when (item.itemId) {\r\n        R.id.menuViewPhotoInfo -> {\r", "choices": [{"text": "//            val intent = Intent(this, PhotoInfoActivity::class.java)\r\n//            startActivity(intent)\r\n            true\r\n        }\r\n        else -> super.onOptionsItemSelected(item)\r\n    }\n"}], "metadata": {"task_id": "Photok/60", "ground_truth": "            onDetails()\r\n            true\r\n        }\r\n        else -> false\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\imageviewer\\ui\\ImageViewerFragment.kt"}}
{"prompt": "\nval viewModel ImageViewerViewModel\nvar systemUiVisible\nvar config Config\n private fun toggleSystemUI() {\r\n        if (systemUiVisible) {\r", "choices": [{"text": "//            window.decorView.systemUiVisibility = View.SYSTEM_UI_FLAG_VISIBLE\r\n            systemUiVisible = false\r\n        } else {\r\n//            window.decorView.systemUiVisibility = View.SYSTEM_UI_FLAG_FULLSCREEN\r\n            systemUiVisible = true\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Photok/61", "ground_truth": "            requireActivity().hideSystemUI()\r\n        } else {\r\n            requireActivity().showSystemUI()\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\imageviewer\\ui\\ImageViewerFragment.kt"}}
{"prompt": "\n override fun onDestroy() {\r", "choices": [{"text": "super.onDestroy()\r\nmPresenter.detachView()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Photok/62", "ground_truth": "        super.onDestroy()\r\n        requireActivity().showSystemUI()\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\imageviewer\\ui\\ImageViewerFragment.kt"}}
{"prompt": " import dev.leonlatsch.photok.databinding.FragmentImageViewerBinding\nimport android.view.View\nval viewModel ImageViewerViewModel\nvar systemUiVisible\nvar config Config\noverride fun bind(binding: FragmentImageViewerBinding) {\r\n        super.bind(binding)\r", "choices": [{"text": "}\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n}\noverride fun onDestroyView() {\r\n        super.onDestroyView()\r\n}\noverride fun onDestroy() {\r\n        super.onDestroy()\r\n}\noverride fun onDetach() {\r\n        super.onDetach()\r\n}\noverride fun onPause() {\r\n        super.onPause()\r\n}\noverride fun onResume() {\r\n        super.onResume()\r\n}\noverride fun onStart() {\r\n        super.onStart()\r\n}"}], "metadata": {"task_id": "Photok/63", "ground_truth": "        binding.context = this\r\n        binding.viewModel = viewModel\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\imageviewer\\ui\\ImageViewerFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun preloadData(onFinished: (List<String>) -> Unit) = viewModelScope.launch {\r\n        if (uuids.isEmpty()) {\r\n            uuids = photoRepository.getAllUUIDs()\r", "choices": [{"text": "//            uuids = photoRepository.getAllUUIDs()\r\n            onFinished(uuids)\r\n        }\r\n    }\n\n"}], "metadata": {"task_id": "Photok/64", "ground_truth": "        }\r\n        onFinished(uuids)\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\imageviewer\\ui\\ImageViewerViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun updateDetails(position: Int) = viewModelScope.launch {\r", "choices": [{"text": "}<file_sep>/app/src/main/java/com/example/myapplication/ui/home/HomeFragment.kt\npackage com.example.myapplication.ui.home\r\n\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.example."}], "metadata": {"task_id": "Photok/65", "ground_truth": "        val photo = photoRepository.get(uuids[position])\r\n        currentPhoto = photo\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\imageviewer\\ui\\ImageViewerViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport dev.leonlatsch.photok.model.database.entity.Photo\nimport androidx.lifecycle.viewModelScope\nfun deletePhoto(onSuccess: () -> Unit, onError: () -> Unit) =\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            currentPhoto ?: return@launch\r\n            currentPhoto!!.id ?: return@launch\r\n\r\n            photoRepository.safeDeletePhoto(currentPhoto!!).let {\r", "choices": [{"text": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport dev.leonlatsch.photok.model.database.entity.Photo\nimport androidx.lifecycle.viewModelScope\nfun deletePhoto(onSuccess: () -> Unit, onError: () -> Unit) =\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            currentPhoto?: return@launch\r\n            currentPhoto!!.id?: return@launch\r\n\r\n            photoRepository.safeDeletePhoto(currentPhoto!!).let {\r\n//                if (it) {\r\n//                    onSuccess()\r\n//                } else {\r\n//                    onError()\r\n//                }\r\n            }\r\n        }\n"}], "metadata": {"task_id": "Photok/66", "ground_truth": "                onMain {\r\n                    if (it) onSuccess() else onError()\r\n                }\r\n            }\r\n        }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\imageviewer\\ui\\ImageViewerViewModel.kt"}}
{"prompt": "\nval imageView TouchImageView\nval playButton ImageView\nvar photoUUID String\n fun bindTo(uuid: String?) {\r\n        uuid ?: return\r\n        photoUUID = uuid\r", "choices": [{"text": "\nval imageView TouchImageView\nval playButton ImageView\nvar photoUUID String\n fun bindTo(uuid: String?) {\r\n        uuid?: return\r\n        photoUUID = uuid\r\n}\n"}], "metadata": {"task_id": "Photok/68", "ground_truth": "\r\n        loadPhoto()\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\imageviewer\\ui\\PhotoViewHolder.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r", "choices": [{"text": "super.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_main)\r\nval button = findViewById<Button>(R.id.button)\r\nbutton.setOnClickListener {\r\nval intent = Intent(this, SecondActivity::class.java)\r\nstartActivity(intent)\r\n}\r\n}\r\n}\r\nclass SecondActivity : AppCompatActivity() {\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nsetContentView(R.layout.activity_second)\r\nval button = findViewById<Button>(R.id.button)"}], "metadata": {"task_id": "Photok/70", "ground_truth": "        enableEdgeToEdge()\r\n        super.onCreate(savedInstanceState)\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\main\\ui\\MainActivity.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.uicomponnets.Dialogs\nimport dev.leonlatsch.photok.R\nprivate fun confirmImport(amount: Int, onImportConfirmed: () -> Unit) {\r\n        Dialogs.showConfirmDialog(\r\n            this,\r\n            String.format(\r\n                getString(R.string.import_sharted_question),\r\n                amount\r", "choices": [{"text": "           ),\r\n            getString(R.string.import_shared_title),\r\n            getString(R.string.import_shared_button),\r\n            getString(R.string.import_shared_cancel),\r\n            onImportConfirmed\r\n        )\r\n    }\n"}], "metadata": {"task_id": "Photok/72", "ground_truth": "            )\r\n        ) { _, _ ->\r\n            onImportConfirmed()\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\main\\ui\\MainActivity.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.settings.data.Config\nimport android.content.res.Configuration\noverride fun onConfigurationChanged(newConfig: Configuration) {\r\n        super.onConfigurationChanged(newConfig)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Photok/73", "ground_truth": "\r\n        onOrientationChanged(newConfig.orientation)\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\main\\ui\\MainActivity.kt"}}
{"prompt": " import android.net.Uri\nval _mainMenuUiState\nval mainMenuUiState\nval consumedUrisFromStore\nfun consumeSharedUris() {\r", "choices": [{"text": "val consumedUris = consumedUrisFromStore\r\nif (consumedUris.isNotEmpty()) {\r\nval uri = consumedUris.first()\r\nconsumedUris.remove(uri)\r\nval intent = Intent(Intent.ACTION_VIEW, uri)\r\nintent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\nintent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)\r\nintent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION)\r\nintent.addFlags(Intent.FLAG_GRANT_PERSIST"}], "metadata": {"task_id": "Photok/75", "ground_truth": "        consumedUrisFromStore.value = sharedUrisStore.getUris()\r\n        sharedUrisStore.clear()\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\main\\ui\\MainViewModel.kt"}}
{"prompt": "\n import androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.runtime.Composable\nimport androidx.compose.material3.MaterialTheme\n\r\n@Preview\r\n@Composable\r\nprivate fun MainMenuPreview() {\r\n    MaterialTheme {\r\n        MainMenu(\r", "choices": [{"text": "//            modifier = Modifier.fillMaxSize(),\r\n            modifier = Modifier.fillMaxSize(),\r\n            onBackPressed = {},\r\n            onMenuPressed = {},\r\n            onSettingsPressed = {},\r\n            onHomePressed = {},\r\n            onSearchPressed = {},\r\n            onProfilePressed = {},\r\n            onLogoutPressed = {},\r\n            onLoginPressed = {},\r\n            onRegisterPressed = {},\r\n            onAboutPressed = {},\r\n            onContactPressed = {},\r\n            onTermsAndConditionsPressed = {},\r\n            onPrivacyPolicyPressed = {},\r\n            onHelpPressed = {},\r\n            onRateAppPressed = {},\r\n            onShareAppPressed = {},\r\n            onShareAppWithFriendsPressed = {},"}], "metadata": {"task_id": "Photok/76", "ground_truth": "            uiState = MainMenuUiState(R.id.galleryFragment),\r\n            onNavigationItemClicked = {}\r\n        )\r\n    }\r\n}", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\main\\ui\\navigation\\MainMenu.kt"}}
{"prompt": "\n fun internalDeleteFile(fileName: String): Boolean {\r\n        val success = app.deleteFile(fileName)\r\n        if (!success) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/81", "ground_truth": "            Timber.d(\"Error deleting internal file: $fileName\")\r\n        }\r\n\r\n        return success\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\model\\io\\EncryptedStorageManager.kt"}}
{"prompt": "\n private fun internalRenameFile(currentFileName: String, newFileName: String): Boolean {\r\n        val currentFile = app.getFileStreamPath(currentFileName)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/82", "ground_truth": "        val newFile = app.getFileStreamPath(newFileName)\r\n        return currentFile.renameTo(newFile)\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\model\\io\\EncryptedStorageManager.kt"}}
{"prompt": "\n import java.io.InputStream\nimport dev.leonlatsch.photok.model.database.entity.Photo\nimport android.net.Uri\nsuspend fun safeCreatePhoto(\r\n        photo: Photo,\r\n        source: InputStream?,\r\n        origUri: Uri? = null\r\n    ): Boolean {\r\n        val fileLen = createPhotoFile(photo, source)\r\n        var success = fileLen != -1L\r\n\r\n        if (success) {\r\n            photo.size = fileLen\r\n\r\n            if (origUri != null) {\r\n                createThumbnail(photo, origUri)\r\n                if (photo.type.isVideo) {\r\n                    createVideoPreview(photo, origUri)\r\n                }\r\n            }\r\n\r\n            val photoId = insert(photo)\r", "choices": [{"text": "\n import java.io.InputStream\nimport dev.leonlatsch.photok.model.database.entity.Photo\nimport android.net.Uri\nsuspend fun safeCreatePhoto(\r\n        photo: Photo,\r\n        source: InputStream?,\r\n        origUri: Uri? = null\r\n    ): Boolean {\r\n        val fileLen = createPhotoFile(photo, source)\r\n        var success = fileLen!= -1L\r\n\r\n        if (success) {\r\n            photo.size = fileLen\r\n\r\n            if (origUri!= null) {\r\n                createThumbnail(photo, origUri)\r\n                if (photo.type.isVideo) {\r\n                    createVideoPreview(photo, origUri)\r\n                }\r\n            }\r\n\r\n            val photoId = insert(photo)\r\n//            if (photoId == -1L) {\r\n//                success = false\r\n//            }\r\n        }\r\n\r\n        return success\r\n    }\r\n\r\n    private suspend fun createPhotoFile(\r\n        photo: Photo,\r\n        source: InputStream?\r\n    ): Long {\r\n        val fileLen = source?.available()?.toLong()?: -1L\r\n        if (fileLen > 0) {\r\n            val file = File(photo.path)\r\n            if (!file.exists()) {\r\n                file.createNewFile()\r\n            }\r\n            val out = FileOutputStream(file)\r\n            val buffer = ByteArray(1024)\r\n            var len"}], "metadata": {"task_id": "Photok/86", "ground_truth": "            success = photoId != -1L\r\n        }\r\n\r\n        return success\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\model\\repositories\\PhotoRepository.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.model.database.entity.Photo\nfun loadPhoto(photo: Photo): ByteArray? {\r\n        encryptedStorageManager.internalOpenEncryptedFileInput(photo.internalFileName)?.use {\r", "choices": [{"text": "return it.readBytes()\r\n        }\r\n        return null\r\n    }\n"}], "metadata": {"task_id": "Photok/90", "ground_truth": "            return it.readBytes()\r\n        }\r\n\r\n        return null\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\model\\repositories\\PhotoRepository.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.model.database.entity.Photo\nfun loadThumbnail(photo: Photo): ByteArray? {\r\n        encryptedStorageManager.internalOpenEncryptedFileInput(photo.internalThumbnailFileName)\r\n            ?.use {\r", "choices": [{"text": "\n import dev.leonlatsch.photok.model.database.entity.Photo\nfun loadThumbnail(photo: Photo): ByteArray? {\r\n        encryptedStorageManager.internalOpenEncryptedFileInput(photo.internalThumbnailFileName)\r\n           ?.use {\r\n//                val thumbnail = it.readBytes()\r\n//                return thumbnail\r\n            }\r\n        return null\r\n    }\n"}], "metadata": {"task_id": "Photok/91", "ground_truth": "                return it.readBytes()\r\n            }\r\n\r\n        return null\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\model\\repositories\\PhotoRepository.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.model.database.entity.Photo\nfun loadVideoPreview(photo: Photo): ByteArray? {\r\n        encryptedStorageManager.internalOpenEncryptedFileInput(photo.internalVideoPreviewFileName)\r\n            ?.use {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/92", "ground_truth": "                return it.readBytes()\r\n            }\r\n\r\n        return null\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\model\\repositories\\PhotoRepository.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.model.database.entity.Photo\nsuspend fun safeDeletePhoto(photo: Photo): Boolean {\r\n        val deletedElements = delete(photo)\r\n        val success = deletedElements != -1\r\n\r\n        if (success) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/93", "ground_truth": "            deleteInternalPhotoData(photo)\r\n        }\r\n\r\n        return success\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\model\\repositories\\PhotoRepository.kt"}}
{"prompt": "\n fun openChangelog() {\r", "choices": [{"text": "-    val changelog = File(project.projectDir, \"CHANGELOG.md\")\r\n-    if (changelog.exists()) {\r\n-        val changelogUrl = \"https://github.com/username_1/gradle-git-properties/blob/master/CHANGELOG.md\"\r\n-        val changelogTitle = \"Changelog\"\r\n-        val changelogText = \"Changelog\"\r\n-        val changelogIcon = \"https://raw.githubusercontent.com/username_1/gradle-git-properties/master/src/main/resources/changelog.png\"\r\n-"}], "metadata": {"task_id": "Photok/97", "ground_truth": "        val url = getString(R.string.news_changelog_url)\r\n        openUrl(url)\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\news\\newfeatures\\ui\\NewFeaturesDialog.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.news.newfeatures.ui.model.NewFeatureViewData\nimport dev.leonlatsch.photok.R\nimport android.view.View\nprivate fun getNewFeaturesViewData(): List<NewFeatureViewData> {\r\n        val titles = resources.getStringArray(R.array.newsTitles)\r\n        val summaries = resources.getStringArray(R.array.newsSummaries)\r\n\r\n        return if (titles.size == summaries.size) {\r\n            val viewDataList = mutableListOf<NewFeatureViewData>()\r\n            for (i in 0..titles.lastIndex) {\r\n                viewDataList.add(NewFeatureViewData(titles[i], summaries[i]))\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/98", "ground_truth": "            viewDataList\r\n        } else {\r\n            listOf()\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\news\\newfeatures\\ui\\NewFeaturesDialog.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.databinding.DialogNewsBinding\noverride fun bind(binding: DialogNewsBinding) {\r", "choices": [{"text": "binding.news.text = \"News\"\r\n}\r\n"}], "metadata": {"task_id": "Photok/99", "ground_truth": "        super.bind(binding)\r\n        binding.context = this\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\news\\newfeatures\\ui\\NewFeaturesDialog.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.news.newfeatures.ui.model.NewFeatureViewData\nfun bindTo(viewData: NewFeatureViewData) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Photok/100", "ground_truth": "        binding.itemNewsTitle.text = viewData.title\r\n        binding.itemNewsSummary.text = viewData.summary\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\news\\newfeatures\\ui\\NewFeaturesViewHolder.kt"}}
{"prompt": "\n import androidx.viewpager.widget.ViewPager\nimport android.view.View\nfun buttonClicked() {\r\n        if (isLastPage) {\r\n            finish()\r\n        } else {\r\n            binding.onBoardingViewPager.setCurrentItem(\r", "choices": [{"text": "binding.onBoardingViewPager.currentItem + 1, true)\r\n        }\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Photok/101", "ground_truth": "                binding.onBoardingViewPager.currentItem + 1,\r\n                true\r\n            )\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\onboarding\\ui\\OnBoardingFragment.kt"}}
{"prompt": " import dev.leonlatsch.photok.databinding.FragmentOnboardingBinding\nimport androidx.fragment.app.Fragment\nvar config Config\nvar isLastPage\nval onPageChangeListener\noverride fun bind(binding: FragmentOnboardingBinding) {\r", "choices": [{"text": "binding.lifecycleOwner = this\r\nbinding.viewModel = viewModel\r\n}\r\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\nsuper.onViewCreated(view, savedInstanceState)\r\nval sharedPref = requireActivity().getSharedPreferences(\r\n\"com.example.photok\", Context.MODE_PRIVATE)\r\nval editor = sharedPref.edit()\r\neditor.putBoolean(\"isFirstTime\", false)\r\neditor.apply()\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r"}], "metadata": {"task_id": "Photok/103", "ground_truth": "        super.bind(binding)\r\n        binding.context = this\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\onboarding\\ui\\OnBoardingFragment.kt"}}
{"prompt": "\n import androidx.fragment.app.Fragment\nimport android.content.Intent\nfun Fragment.startActivityForResultAndIgnoreTimer(intent: Intent, reqCode: Int) {\r", "choices": [{"text": "//    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n//        startActivityForResult(intent, reqCode, ActivityOptions.makeCustomAnimation(requireContext(), R.anim.slide_in_right, R.anim.slide_out_left).toBundle())\r\n//    } else {\r\n//        startActivityForResult(intent, reqCode)\r\n//    }\r\n    startActivityForResult(intent, reqCode)\r\n}<file_sep>/app/src/main/java/com/example/myapplication/ui/main/Main"}], "metadata": {"task_id": "Photok/106", "ground_truth": "    startActivityForResult(intent, reqCode)\r\n    requireActivity().getBaseApplication().ignoreNextTimeout()\r\n}", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\extensions\\FragmentExtensions.kt"}}
{"prompt": "\n import javax.crypto.CipherInputStream\nimport java.io.InputStream\nfun CipherInputStream.forceSkip(bytesToSkip: Long): Long {\r\n    var processedBytes = 0L\r\n    while (processedBytes < bytesToSkip) {\r\n        read()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/107", "ground_truth": "        processedBytes++\r\n    }\r\n\r\n    return processedBytes\r\n}", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\extensions\\IOExtensions.kt"}}
{"prompt": "\n import timber.log.Timber\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.LifecycleOwner\nimport androidx.annotation.MainThread\n @MainThread\r\n    override fun observe(owner: LifecycleOwner, observer: Observer<in T>) {\r\n        if (hasActiveObservers()) {\r\n            Timber.w(\"Multiple observers on SingleLiveEvent. Only one will be notified\")\r\n        }\r\n\r\n        super.observe(owner) {\r", "choices": [{"text": "//            Timber.d(\"SingleLiveEvent: $it\")\r\n            observer.onChanged(it)\r\n        }\r\n    }\r\n}<file_sep>/app/src/main/java/com/example/myapplication/ui/main/MainViewModel.kt\npackage com.example.myapplication.ui.main\r\n\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.ViewModel\r\nimport com.example.myapplication.data.model.User\r\nimport com.example.myapplication.data.repository.UserRepository\r\nimport com.example"}], "metadata": {"task_id": "Photok/108", "ground_truth": "            if (pending.compareAndSet(true, false)) {\r\n                observer.onChanged(it)\r\n            }\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\SingleLiveEvent.kt"}}
{"prompt": "\n import androidx.annotation.MainThread\n @MainThread\r\n    override fun setValue(value: T?) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/109", "ground_truth": "        pending.set(true)\r\n        super.setValue(value)\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\SingleLiveEvent.kt"}}
{"prompt": "\n import android.provider.MediaStore\nimport android.net.Uri\nimport android.content.ContentResolver\nfun getFileName(contentResolver: ContentResolver, uri: Uri): String? {\r\n    val projection = arrayOf(MediaStore.MediaColumns.DISPLAY_NAME)\r\n    contentResolver.query(uri, projection, null, null, null)?.use {\r\n        if (it.moveToFirst()) {\r\n            return it.getString(0)\r", "choices": [{"text": "       }\r\n    }\r\n    return null\r\n}\n"}], "metadata": {"task_id": "Photok/110", "ground_truth": "\r\n        }\r\n    }\r\n    return null\r\n}", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\Utils.kt"}}
{"prompt": "\n import android.net.Uri\nimport android.content.ContentResolver\nfun getFileSize(contentResolver: ContentResolver, uri: Uri): Long {\r\n    contentResolver.openFileDescriptor(uri, \"r\")?.use {\r", "choices": [{"text": "//        val file = File(it.fileDescriptor)\r\n        val file = it.fileDescriptor\r\n        val length = file.length()\r\n        return length\r\n    }\r\n    return 0\r\n}\n"}], "metadata": {"task_id": "Photok/111", "ground_truth": "        return it.statSize\r\n    }\r\n\r\n    return -1L\r\n}", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\Utils.kt"}}
{"prompt": "\n import androidx.appcompat.app.AppCompatDelegate\nfun setAppDesign(design: String?) {\r\n    design ?: return\r\n\r\n    val nightMode = when (design) {\r\n        \"system\" -> AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM\r\n        \"light\" -> AppCompatDelegate.MODE_NIGHT_NO\r\n        \"dark\" -> AppCompatDelegate.MODE_NIGHT_YES\r\n        else -> null\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/112", "ground_truth": "    }\r\n\r\n    nightMode ?: return\r\n    AppCompatDelegate.setDefaultNightMode(nightMode)\r\n}", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\Utils.kt"}}
{"prompt": "\n import androidx.fragment.app.Fragment\nimport android.content.Intent\nfun Fragment.openUrl(url: String?) {\r\n    url ?: return\r\n    val intent = Intent(Intent.ACTION_VIEW)\r", "choices": [{"text": "\n import androidx.fragment.app.Fragment\nimport android.content.Intent\nfun Fragment.openUrl(url: String?) {\r\n    url?: return\r\n    val intent = Intent(Intent.ACTION_VIEW)\r\nintent.data = Uri.parse(url)\r\nstartActivity(intent)\r\n}\n"}], "metadata": {"task_id": "Photok/113", "ground_truth": "    intent.data = Uri.parse(url)\r\n    startActivity(intent)\r\n}", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\Utils.kt"}}
{"prompt": "\n import android.view.WindowInsets\nimport android.view.View\nfun View.statusBarPadding() {\r\n    setOnApplyWindowInsetsListener { v, insets ->\r\n        v.setPadding(0, insets.top(), 0, 0)\r", "choices": [{"text": "//        v.setPadding(0, insets.systemWindowInsetTop, 0, 0)\r\n        insets.consumeSystemWindowInsets()\r\n    }\r\n}\n"}], "metadata": {"task_id": "Photok/115", "ground_truth": "        insets\r\n    }\r\n}", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\Utils.kt"}}
{"prompt": "\n import android.view.WindowInsets\nimport android.view.View\nfun View.systemBarsPadding() {\r\n    setOnApplyWindowInsetsListener { v, insets ->\r\n        v.setPadding(0, insets.top(), 0, insets.bottom())\r", "choices": [{"text": "//        v.setPadding(insets.systemWindowInsetLeft, insets.top(), insets.systemWindowInsetRight, insets.bottom())\r\n        insets\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Photok/116", "ground_truth": "        insets\r\n    }\r\n}", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\Utils.kt"}}
{"prompt": "\n import android.view.WindowInsets\nimport android.os.Build\nfun WindowInsets.top(): Int =\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\r\n        this.getInsets(WindowInsets.Type.systemBars()).top\r", "choices": [{"text": "} else {\r\n    this.systemWindowInsetTop\r\n}\n"}], "metadata": {"task_id": "Photok/117", "ground_truth": "\r\n    } else {\r\n        @Suppress(\"DEPRECATION\")\r\n        this.systemWindowInsetTop\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\Utils.kt"}}
{"prompt": "\n import android.view.WindowInsets\nimport android.os.Build\nfun WindowInsets.bottom(): Int =\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {\r\n        this.getInsets(WindowInsets.Type.systemBars()).bottom\r", "choices": [{"text": "} else {\r\n    this.systemWindowInsetBottom\r\n}<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.view.isVisible\nimport com.example.myapplication.databinding.ActivityMainBinding\nimport com.example.myapplication.databinding."}], "metadata": {"task_id": "Photok/118", "ground_truth": "\r\n    } else {\r\n        @Suppress(\"DEPRECATION\")\r\n        this.systemWindowInsetBottom\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\other\\Utils.kt"}}
{"prompt": "\n import android.os.Build\nimport android.Manifest\nfun getReadVideosPermission() =\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n        Manifest.permission.READ_MEDIA_VIDEO\r", "choices": [{"text": "} else {\r\n        Manifest.permission.READ_EXTERNAL_STORAGE\r\n}<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.Manifest\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.net.Uri\nimport android.os.Build\nimport android.os.Bundle\nimport android.provider.Settings\nimport android.util.Log\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.app.ActivityCompat"}], "metadata": {"task_id": "Photok/119", "ground_truth": "    } else {\r\n        Manifest.permission.READ_EXTERNAL_STORAGE\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\permissions\\MediaPermissions.kt"}}
{"prompt": "\n import android.os.Build\nimport android.Manifest\nfun getReadImagesPermission() =\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\r\n        Manifest.permission.READ_MEDIA_IMAGES\r", "choices": [{"text": "} else {\r\n        Manifest.permission.READ_EXTERNAL_STORAGE\r\n}<file_sep>/app/src/main/java/com/example/myapplication/MainActivity.kt\npackage com.example.myapplication\n\nimport android.Manifest\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.net.Uri\nimport android.os.Build\nimport android.os.Bundle\nimport android.provider.MediaStore\nimport android.util.Log\nimport android.widget.Button\nimport android.widget.ImageView\nimport android.widget.Toast\nimport androidx."}], "metadata": {"task_id": "Photok/120", "ground_truth": "    } else {\r\n        Manifest.permission.READ_EXTERNAL_STORAGE\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\permissions\\MediaPermissions.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Photok/121", "ground_truth": "\r\n        viewModel.navigationEvent.observe(this) {\r\n            navigator.navigate(it, this)\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\recoverymenu\\RecoveryMenuActivity.kt"}}
{"prompt": " import dev.leonlatsch.photok.databinding.ActivityRecoveryMenuBinding\nimport dev.leonlatsch.photok.R\nvar config Config\nvar navigator RecoveryMenuNavigator\nval viewModel RecoveryMenuViewModel\noverride fun bind(binding: ActivityRecoveryMenuBinding) {\r", "choices": [{"text": "binding.viewModel = viewModel\r\n}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\nsuper.onCreate(savedInstanceState)\r\nconfig = Config(this)\r\nnavigator = RecoveryMenuNavigator(this)\r\nviewModel = RecoveryMenuViewModel(navigator)\r\n}\r\n}<file_sep>/app/src/main/java/dev/leonlatsch/photok/ui/recovery/menu/RecoveryMenuNavigator.kt\npackage dev.leonlatsch.photok.ui.recovery.menu\n\nimport android.content.Context\nimport android.content.Intent\nimport dev"}], "metadata": {"task_id": "Photok/122", "ground_truth": "        super.bind(binding)\r\n        binding.viewModel = viewModel\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\recoverymenu\\RecoveryMenuActivity.kt"}}
{"prompt": "\n import androidx.appcompat.app.AppCompatActivity\nfun navigate(navigationEvent: NavigationEvent, activity: AppCompatActivity) {\r\n        when (navigationEvent) {\r\n            NavigationEvent.OpenPhotok -> navigateOpenPhotok(activity)\r", "choices": [{"text": "//            NavigationEvent.OpenPhotok -> navigateOpenPhotok(activity)\r\n            NavigationEvent.OpenPhotok -> navigateOpenPhotok(activity)\r\n            NavigationEvent.OpenPhotok -> navigateOpenPhotok(activity)\r\n            NavigationEvent.OpenPhotok -> navigateOpenPhotok(activity)\r\n            NavigationEvent.OpenPhotok -> navigateOpenPhotok(activity)\r\n            NavigationEvent.OpenPhotok -> navigateOpenPhotok(activity)\r\n            NavigationEvent.OpenPhotok -> navigateOpenPhotok(activity)\r\n            NavigationEvent.OpenPhot"}], "metadata": {"task_id": "Photok/123", "ground_truth": "            NavigationEvent.AfterResetHideApp -> navigateAfterResetHideApp(activity)\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\recoverymenu\\RecoveryMenuNavigator.kt"}}
{"prompt": "\nval navigationEvent\n fun resetHidePhotoSetting() {\r\n        toggleMainComponentUseCase()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Photok/125", "ground_truth": "\r\n        navigationEvent.value = RecoveryMenuNavigator.NavigationEvent.AfterResetHideApp\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\recoverymenu\\RecoveryMenuViewModel.kt"}}
{"prompt": "\nvar ivParameterSpec IvParameterSpec?\nvar isReady Boolean\nval encodedKey ByteArray\n fun reset() {\r\n        encryptionKey = null\r", "choices": [{"text": "}\r\n fun setKey(key: ByteArray) {\r\n        encryptionKey = key\r\n}\r\n fun setIv(iv: ByteArray) {\r\n        ivParameterSpec = IvParameterSpec(iv)\r\n}\r\n fun getEncodedKey(): ByteArray {\r\n        if (encryptionKey == null) {\r\n            throw IllegalStateException(\"Key must be set before encoding\")\r\n        }\r\n        return encryptionKey!!\r\n}\r\n fun getEncodedIv(): ByteArray {\r\n        if (ivParameterSpec == null) {\r\n            throw IllegalStateException(\"IV must be set before encoding\")\r\n        }\r\n        return ivParameterSpec!!.encoded\r\n}\r\n fun getEncoded"}], "metadata": {"task_id": "Photok/127", "ground_truth": "        ivParameterSpec = null\r\n        isReady = false\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\security\\EncryptionManager.kt"}}
{"prompt": "\n import javax.crypto.CipherInputStream\nimport javax.crypto.Cipher\nimport java.security.GeneralSecurityException\nimport java.io.InputStream\nimport timber.log.Timber\nfun createCipherInputStream(\r\n        origInputStream: InputStream,\r\n        password: String? = null\r\n    ): CipherInputStream? {\r\n        return if (isReady) try {\r\n            val cipher = if (password == null) {\r\n                createCipher(Cipher.DECRYPT_MODE)\r\n            } else {\r\n                createCipher(Cipher.DECRYPT_MODE, password)\r\n            }\r\n\r\n            CipherInputStream(origInputStream, cipher)\r\n        } catch (e: GeneralSecurityException) {\r\n            Timber.d(\"Error creating encrypted input stream: $e\")\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/128", "ground_truth": "            null\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\security\\EncryptionManager.kt"}}
{"prompt": "\n import javax.crypto.CipherOutputStream\nimport javax.crypto.Cipher\nimport java.security.GeneralSecurityException\nimport java.io.OutputStream\nimport timber.log.Timber\nfun createCipherOutputStream(\r\n        origOutputStream: OutputStream,\r\n        password: String? = null\r\n    ): CipherOutputStream? {\r\n        return if (isReady) try {\r\n            val cipher = if (password == null) {\r\n                createCipher(Cipher.ENCRYPT_MODE)\r\n            } else {\r\n                createCipher(Cipher.ENCRYPT_MODE, password)\r\n            }\r\n\r\n            CipherOutputStream(origOutputStream, cipher)\r\n        } catch (e: GeneralSecurityException) {\r\n            Timber.d(\"Error creating encrypted output stream: $e\")\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/129", "ground_truth": "            null\r\n        } else {\r\n            null\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\security\\EncryptionManager.kt"}}
{"prompt": "\n import javax.crypto.Cipher\nprivate fun createCipher(mode: Int, password: String): Cipher? {\r\n        val key = genSecKey(password)\r\n        val iv = genIv(password)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/130", "ground_truth": "\r\n        return createCipher(mode, key, iv)\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\security\\EncryptionManager.kt"}}
{"prompt": "\n import javax.crypto.spec.SecretKeySpec\nimport java.security.MessageDigest\nimport dev.leonlatsch.photok.other.SHA_256\nprivate fun genSecKey(password: String): SecretKeySpec {\r\n        val md = MessageDigest.getInstance(SHA_256)\r", "choices": [{"text": "//        val md = MessageDigest.getInstance(\"SHA-256\")\r\n        md.update(password.toByteArray())\r\n        return SecretKeySpec(md.digest(), \"AES\")\r\n    }\n"}], "metadata": {"task_id": "Photok/132", "ground_truth": "        val bytes = md.digest(password.toByteArray(StandardCharsets.UTF_8))\r\n        return SecretKeySpec(bytes, AES)\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\security\\EncryptionManager.kt"}}
{"prompt": "\n import javax.crypto.spec.IvParameterSpec\nprivate fun genIv(password: String): IvParameterSpec {\r\n        val iv = ByteArray(16)\r\n        val charArray = password.toCharArray()\r\n        val firstChars = charArray.take(16)\r\n        for (i in firstChars.indices) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/133", "ground_truth": "            iv[i] = firstChars[i].toByte()\r\n        }\r\n\r\n        return IvParameterSpec(iv)\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\security\\EncryptionManager.kt"}}
{"prompt": "\n fun storePassword(password: String) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Photok/134", "ground_truth": "        val hashedPw = BCrypt.hashpw(password, BCrypt.gensalt())\r\n        config.securityPassword = hashedPw\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\security\\PasswordManager.kt"}}
{"prompt": "\n private fun getIntFromString(key: String, default: Int): Int {\r", "choices": [{"text": "-    return try {\r\n-        Integer.parseInt(getString(key, default.toString()))\r\n-    } catch (e: NumberFormatException) {\r\n-        default\r\n-    }\r\n+    return try {\r\n+        Integer.parseInt(getString(key, default.toString()))\r\n+    } catch (e: NumberFormatException) {\r\n+        default\r\n+    }\r\n }\r\n \r\n private fun getBooleanFromString(key: String, default: Boolean): Boolean {\r\n-    return try {\r\n-        Boolean.parseBoolean(getString"}], "metadata": {"task_id": "Photok/135", "ground_truth": "        val stringValue = preferences.getString(key, default.toString())\r\n        return stringValue?.toInt() ?: default\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\data\\Config.kt"}}
{"prompt": "\n private fun putString(key: String, value: String) {\r\n        val edit = preferences.edit()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/136", "ground_truth": "        edit.putString(key, value)\r\n        edit.apply()\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\data\\Config.kt"}}
{"prompt": "\n private fun putInt(key: String, value: Int) {\r\n        val edit = preferences.edit()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/137", "ground_truth": "        edit.putInt(key, value)\r\n        edit.apply()\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\data\\Config.kt"}}
{"prompt": "\n private fun putBoolean(key: String, value: Boolean) {\r\n        val edit = preferences.edit()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/138", "ground_truth": "        edit.putBoolean(key, value)\r\n        edit.apply()\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\data\\Config.kt"}}
{"prompt": "\n private fun putLong(key: String, value: Long) {\r\n        val edit = preferences.edit()\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/139", "ground_truth": "        edit.putLong(key, value)\r\n        edit.apply()\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\data\\Config.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.other.systemBarsPadding\nimport android.view.View\nimport android.view.Menu\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        view.systemBarsPadding()\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        setHasOptionsMenu(true)\r\n        setToolbar(binding.aboutToolbar)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Photok/140", "ground_truth": "        binding.aboutToolbar.setNavigationOnClickListener {\r\n            findNavController().navigateUp()\r\n        }\r\n\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\AboutFragment.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.other.extensions.show\nimport dev.leonlatsch.photok.news.newfeatures.ui.NewFeaturesDialog\nimport dev.leonlatsch.photok.R\nimport android.view.MenuItem\nimport android.view.Menu\noverride fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        when (item.itemId) {\r\n            R.id.menuAboutNews -> NewFeaturesDialog().show(childFragmentManager)\r", "choices": [{"text": "//            R.id.menuAbout -> AboutDialog().show(childFragmentManager)\r\n            R.id.menuSettings -> SettingsDialog().show(childFragmentManager)\r\n            R.id.menuAbout -> AboutDialog().show(childFragmentManager)\r\n            R.id.menuAboutNews -> NewFeaturesDialog().show(childFragmentManager)\r\n            R.id.menuAbout -> AboutDialog().show(childFragmentManager)\r\n            R.id.menuAboutNews -> NewFeaturesDialog().show(childFragmentManager)\r\n            R.id.menuAbout -> AboutDialog().show(childFragmentManager)\r\n            R.id.menuAboutNews -> New"}], "metadata": {"task_id": "Photok/141", "ground_truth": "        }\r\n        return true\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\AboutFragment.kt"}}
{"prompt": " import dev.leonlatsch.photok.databinding.FragmentAboutBinding\nval version\noverride fun bind(binding: FragmentAboutBinding) {\r", "choices": [{"text": "version = BuildConfig.VERSION_NAME\r\nbinding.version.text = version\r\n}\r\n"}], "metadata": {"task_id": "Photok/142", "ground_truth": "        super.bind(binding)\r\n        binding.context = this\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\AboutFragment.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.databinding.DialogChangePasswordBinding\noverride fun bind(binding: DialogChangePasswordBinding) {\r\n        super.bind(binding)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Photok/145", "ground_truth": "        binding.context = this\r\n        binding.viewModel = viewModel\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\changepassword\\ChangePasswordDialog.kt"}}
{"prompt": "\n import org.mindrot.jbcrypt.BCrypt\nimport kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun checkOld() = viewModelScope.launch {\r\n        changePasswordState = ChangePasswordState.CHECKING_OLD\r\n\r\n        val storedPassword = config.securityPassword\r\n        storedPassword ?: return@launch\r\n\r\n        changePasswordState = if (BCrypt.checkpw(oldPassword, storedPassword)) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/147", "ground_truth": "            ChangePasswordState.OLD_VALID\r\n        } else {\r\n            ChangePasswordState.OLD_INVALID\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\changepassword\\ChangePasswordViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport dev.leonlatsch.photok.security.PasswordUtils\nimport androidx.lifecycle.viewModelScope\nfun checkNew() = viewModelScope.launch {\r\n        changePasswordState = if (PasswordUtils.validatePasswords(\r\n                newPassword,\r\n                newPasswordConfirm\r\n            )\r\n        ) {\r", "choices": [{"text": "//            val newPassword = <PASSWORD>\r\n//            val newPasswordConfirm = <PASSWORD>\r\n//            val oldPassword = <PASSWORD>\r\n//            val oldPasswordConfirm = <PASSWORD>\r\n            val newPassword = <PASSWORD>\r\n            val newPasswordConfirm = <PASSWORD>\r\n            val oldPassword = <PASSWORD>\r\n            val oldPasswordConfirm = <PASSWORD>\r\n            val newPasswordHash = PasswordUtils.hashPassword(newPassword)\r\n            val oldPasswordHash = PasswordUtils.hashPassword(oldPassword)\r\n            val newPasswordHashConfirm = PasswordUtils.hashPassword(newPasswordConfirm)\r\n            val oldPasswordHashConfirm = PasswordUtils."}], "metadata": {"task_id": "Photok/148", "ground_truth": "            ChangePasswordState.NEW_VALID\r\n        } else {\r\n            ChangePasswordState.NEW_INVALID\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\changepassword\\ChangePasswordViewModel.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.model.database.entity.Photo\noverride fun prepareViewModel(items: List<Photo>?) {\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Photok/149", "ground_truth": "        super.prepareViewModel(items)\r\n        viewModel.newPassword = newPassword\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\changepassword\\ReEncryptBottomSheetDialogFragment.kt"}}
{"prompt": "\n override suspend fun preProcess() {\r\n        items = photoRepository.getAll()\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Photok/150", "ground_truth": "        elementsToProcess = items.size\r\n        super.preProcess()\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\changepassword\\ReEncryptViewModel.kt"}}
{"prompt": "\nvar newPassword String\n override suspend fun postProcess() {\r\n        super.postProcess()\r", "choices": [{"text": "newPassword = <PASSWORD>\r\n}\r\n"}], "metadata": {"task_id": "Photok/151", "ground_truth": "        passwordManager.storePassword(newPassword)\r\n        encryptionManager.initialize(newPassword)\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\changepassword\\ReEncryptViewModel.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.R\nimport android.text.Spanned\nprivate fun loadIconCredits(): Spanned {\r\n        val bytes = context.assets.open(ICON_CREDITS_FILE).readBytes()\r", "choices": [{"text": "return HtmlCompat.fromHtml(String(bytes), HtmlCompat.FROM_HTML_MODE_LEGACY)\r\n    }\n"}], "metadata": {"task_id": "Photok/152", "ground_truth": "        val rawText = String(bytes)\r\n        return HtmlCompat.fromHtml(rawText, HtmlCompat.FROM_HTML_MODE_COMPACT)\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\credits\\CreditEntryViewHolder.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.other.extensions.empty\nprivate fun prettifyWebsite(website: String) = when {\r\n        website.contains(\"http://\") -> website.replace(\"http://\", String.empty)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/153", "ground_truth": "        website.contains(\"https://\") -> website.replace(\"https://\", String.empty)\r\n        else -> website\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\credits\\CreditEntryViewHolder.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.R\noverride fun getItemViewType(position: Int) =\r\n        when {\r\n            creditEntries[position].isHeader -> ENTRY_HEADER_TYPE\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/155", "ground_truth": "            creditEntries[position].isFooter -> ENTRY_FOOTER_TYPE\r\n            else -> ENTRY_VIEW_TYPE\r\n        }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\credits\\CreditsAdapter.kt"}}
{"prompt": "\n import android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r", "choices": [{"text": "}\r\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n}\r\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        return inflater.inflate(R.layout.fragment_main, container, false)\r\n}\r\noverride fun onActivityCreated(savedInstanceState: Bundle?) {\r\n        super.onActivityCreated(savedInstanceState)\r\n}\r\noverride fun onViewStateRestored(savedInstanceState: Bundle?) {\r\n        super.onViewStateRestored(savedInstanceState)\r\n}\r\noverride fun onStart() {\r\n        super"}], "metadata": {"task_id": "Photok/156", "ground_truth": "        useViewModel(viewModel)\r\n        setupLayout()\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\hideapp\\ToggleAppVisibilityDialog.kt"}}
{"prompt": " import dev.leonlatsch.photok.uicomponnets.Dialogs\nval viewModel ToggleAppVisibilityViewModel\nfun toggleAppVisibility() {\r\n        Dialogs.showConfirmDialog(requireContext(), viewModel.confirmText) { _, _ ->\r\n            viewModel.toggleMainComponent()\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Photok/158", "ground_truth": "            dismiss()\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\hideapp\\ToggleAppVisibilityDialog.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.databinding.DialogToggleAppVisibilityBinding\noverride fun bind(binding: DialogToggleAppVisibilityBinding) {\r\n        super.bind(binding)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Photok/159", "ground_truth": "        binding.context = this\r\n        binding.viewModel = viewModel\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\hideapp\\ToggleAppVisibilityDialog.kt"}}
{"prompt": "\n fun isMainComponentDisabled(): Boolean {\r\n        val enabledSetting = app.packageManager.getComponentEnabledSetting(\r\n            MAIN_LAUNCHER_COMPONENT\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/161", "ground_truth": "        )\r\n        return enabledSetting == PackageManager.COMPONENT_ENABLED_STATE_DISABLED\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\hideapp\\usecase\\ToggleMainComponentUseCase.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.other.statusBarPadding\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        view.statusBarPadding()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Photok/162", "ground_truth": "\r\n        toolbar = view.findViewById(R.id.settingsToolbar)\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\SettingsFragment.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.settings.data.Config\nimport androidx.preference.Preference\nimport androidx.preference.ListPreference\nprivate fun setupAppCategory() {\r\n        addCallbackTo<ListPreference>(Config.SYSTEM_DESIGN) {\r", "choices": [{"text": "//            if (it.value == \"1\") {\r\n//                it.summary = \"System UI\"\r\n//            } else {\r\n//                it.summary = \"System UI\"\r\n//            }\r\n        }\r\n        addCallbackTo<ListPreference>(Config.SYSTEM_DESIGN) {\r\n//            if (it.value == \"1\") {\r\n//                it.summary = \"System UI\"\r\n//            } else {\r\n//                it.summary = \"System UI\"\r\n//            }\r\n        }\r\n        addCallbackTo<ListPreference>(Config"}], "metadata": {"task_id": "Photok/164", "ground_truth": "            setAppDesign(it as String)\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\SettingsFragment.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.settings.ui.changepassword.ChangePasswordDialog\nimport dev.leonlatsch.photok.other.extensions.show\nimport dev.leonlatsch.photok.R\nprivate fun setupSecurityCategory() {\r\n        addActionTo(KEY_ACTION_CHANGE_PASSWORD) {\r\n            ChangePasswordDialog().show(childFragmentManager)\r\n        }\r\n\r\n        addActionTo(KEY_ACTION_HIDE_APP) {\r", "choices": [{"text": "//            val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS)\r\n//            val uri = Uri.fromParts(\"package\", context.packageName, null)\r\n//            intent.data = uri\r\n//            startActivity(intent)\r\n        }\r\n\r\n        addActionTo(KEY_ACTION_LOGOUT) {\r\n            logout()\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Photok/165", "ground_truth": "            ToggleAppVisibilityDialog().show(childFragmentManager)\r\n        }\r\n\r\n        configurePhoneDialPreference()\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\SettingsFragment.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.settings.data.Config\nimport dev.leonlatsch.photok.R\nimport androidx.preference.Preference\nimport androidx.preference.EditTextPreference\nimport androidx.core.widget.addTextChangedListener\nimport android.text.InputType\nprivate fun configurePhoneDialPreference() {\r\n        val dialPreference = findPreference<EditTextPreference>(Config.SECURITY_DIAL_LAUNCH_CODE)\r\n        dialPreference?.setOnBindEditTextListener {\r\n            it.inputType = InputType.TYPE_CLASS_NUMBER or InputType.TYPE_NUMBER_FLAG_DECIMAL\r\n            it.addTextChangedListener { editable ->\r\n                if (editable?.length!! < 1) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/166", "ground_truth": "                    it.setText(0.toString())\r\n                }\r\n            }\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\SettingsFragment.kt"}}
{"prompt": "\n import androidx.preference.Preference\nprivate fun addActionTo(preferenceId: String, action: () -> Unit) {\r\n        preferenceManager\r\n            .findPreference<Preference>(preferenceId)\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/168", "ground_truth": "            ?.setOnPreferenceClickListener {\r\n                action()\r\n                true\r\n            }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\SettingsFragment.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.other.systemBarsPadding\nimport android.view.View\nimport android.os.Bundle\noverride fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        binding.root.systemBarsPadding()\r\n\r\n        binding.ossToolbar.setNavigationOnClickListener {\r", "choices": [{"text": "//            findNavController().navigate(R.id.action_ossFragment_to_mainFragment)\r\n        }\r\n    }\n}\n"}], "metadata": {"task_id": "Photok/171", "ground_truth": "            findNavController().navigateUp()\r\n        }\r\n\r\n        binding.ossRecycler.initialize(LICENSE_REPORT_FILE)\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\settings\\ui\\thirdparty\\OssLicensesFragment.kt"}}
{"prompt": " import dev.leonlatsch.photok.databinding.FragmentSetupBinding\nval viewModel SetupViewModel\noverride fun bind(binding: FragmentSetupBinding) {\r", "choices": [{"text": "viewModel = binding.viewModel\r\n}\n"}], "metadata": {"task_id": "Photok/173", "ground_truth": "        super.bind(binding)\r\n        binding.viewModel = viewModel\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\setup\\ui\\SetupFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun savePassword() = viewModelScope.launch {\r\n        setupState = SetupState.LOADING\r\n\r\n        setupState = if (validateBothPasswords()) {\r\n            passwordManager.storePassword(password)\r\n            encryptionManager.initialize(this@SetupViewModel.password)\r", "choices": [{"text": "//            encryptionManager.initialize(this@SetupViewModel.password)\r\n            SetupState.SUCCESS\r\n        } else {\r\n            SetupState.ERROR\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Photok/174", "ground_truth": "            SetupState.FINISHED\r\n        } else {\r\n            SetupState.SETUP\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\setup\\ui\\SetupViewModel.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nimport android.app.Application\nfun checkApplicationState() = viewModelScope.launch {\r\n\r\n        // First start\r\n        if (config.systemFirstStart) {\r\n            appStartState = AppStartState.FIRST_START\r\n            return@launch\r\n        }\r\n\r\n        // Unlock or Setup\r\n        val password = config.securityPassword\r\n        appStartState = if (password == null || password.isEmpty()) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/175", "ground_truth": "            AppStartState.SETUP\r\n        } else {\r\n            AppStartState.LOCKED\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\splashscreen\\ui\\SplashScreenViewModel.kt"}}
{"prompt": "\n import androidx.appcompat.widget.Toolbar\nimport androidx.appcompat.app.AppCompatActivity\ninternal fun setToolbar(toolbar: Toolbar, showTitle: Boolean = false) {\r\n        val activity = (requireActivity() as AppCompatActivity)\r\n        activity.setSupportActionBar(toolbar)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Photok/182", "ground_truth": "\r\n        activity.supportActionBar?.setDisplayShowTitleEnabled(showTitle)\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\BaseFragment.kt"}}
{"prompt": "\n import android.view.View\nopen fun prepareViewModel(items: List<T>?) {\r\n        if (items != null) {\r\n            viewModel.items = items\r", "choices": [{"text": "\n import android.view.View\nopen fun prepareViewModel(items: List<T>?) {\r\n        if (items!= null) {\r\n            viewModel.items = items\r\n}\r\n}\n"}], "metadata": {"task_id": "Photok/185", "ground_truth": "            viewModel.elementsToProcess = items.size\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\processdialogs\\BaseProcessBottomSheetDialogFragment.kt"}}
{"prompt": "\n import androidx.core.content.ContextCompat\nimport android.view.View\nprivate fun setStatusIcon(drawable: Int?, color: Int = 0) {\r\n        if (drawable == null) {\r\n            binding.processStatusImageView.setImageDrawable(null)\r\n            return\r\n        }\r\n\r\n        binding.processStatusImageView.setImageDrawable(\r\n            ContextCompat.getDrawable(\r\n                requireContext(),\r\n                drawable\r\n            )\r\n        )\r\n        binding.processStatusImageView.setColorFilter(\r\n            ContextCompat.getColor(\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/186", "ground_truth": "                requireContext(),\r\n                color\r\n            )\r\n        )\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\processdialogs\\BaseProcessBottomSheetDialogFragment.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.databinding.DialogBottomSheetProcessBinding\noverride fun bind(binding: DialogBottomSheetProcessBinding) {\r\n        super.bind(binding)\r", "choices": [{"text": "}\r\n"}], "metadata": {"task_id": "Photok/187", "ground_truth": "        binding.context = this\r\n        binding.viewModel = viewModel\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\processdialogs\\BaseProcessBottomSheetDialogFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport kotlinx.coroutines.Dispatchers\nimport androidx.lifecycle.viewModelScope\nfun runProcessing() = viewModelScope.launch(Dispatchers.IO) {\r\n        preProcess()\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Photok/188", "ground_truth": "        processLoop()\r\n        postProcess()\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\processdialogs\\BaseProcessViewModel.kt"}}
{"prompt": "\nvar current Int\nvar processState ProcessState\nvar progressPercent Int\n open suspend fun preProcess() {\r", "choices": [{"text": "}\r\n open suspend fun postProcess() {\r\n}\r\n open suspend fun process() {\r\n}\r\n open suspend fun process(current: Int) {\r\n}\r\n open suspend fun process(current: Int, processState: ProcessState) {\r\n}\r\n open suspend fun process(current: Int, processState: ProcessState, progressPercent: Int) {\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Photok/189", "ground_truth": "        processState = ProcessState.PROCESSING\r\n        updateProgress()\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\processdialogs\\BaseProcessViewModel.kt"}}
{"prompt": "\n private suspend fun processLoop() {\r\n        for (item in items) {\r\n            if (processState == ProcessState.ABORTED) {\r\n                return\r\n            }\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/190", "ground_truth": "\r\n            processItem(item)\r\n            itemProcessed()\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\processdialogs\\BaseProcessViewModel.kt"}}
{"prompt": "\nvar processState ProcessState\nvar elementsToProcess\nvar progressPercent Int\n open suspend fun postProcess() {\r\n        if (processState != ProcessState.ABORTED) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/191", "ground_truth": "            processState = ProcessState.FINISHED\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\processdialogs\\BaseProcessViewModel.kt"}}
{"prompt": "\nvar elementsToProcess\nvar items List<T>\nvar progressPercent Int\n private fun itemProcessed() {\r", "choices": [{"text": "progressPercent = (items.size - elementsToProcess) * 100 / items.size\r\n}\n"}], "metadata": {"task_id": "Photok/192", "ground_truth": "        current++\r\n        updateProgress()\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\processdialogs\\BaseProcessViewModel.kt"}}
{"prompt": "\n private fun updateProgress() {\r\n        if (elementsToProcess == 0) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/193", "ground_truth": "            return\r\n        }\r\n\r\n        progressPercent = (current * 100) / elementsToProcess\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\base\\processdialogs\\BaseProcessViewModel.kt"}}
{"prompt": "\n import android.os.Bundle\noverride fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Photok/194", "ground_truth": "        binding = DataBindingUtil.setContentView(this, layout)\r\n        bind(binding)\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\bindings\\BindableActivity.kt"}}
{"prompt": "\n import androidx.databinding.DataBindingUtil\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = DataBindingUtil.inflate(inflater, layout, container, false)\r", "choices": [{"text": "//        binding.setVariable(BR.viewModel, viewModel)\r\n        binding.setVariable(BR.viewModel, viewModel)\r\n        binding.lifecycleOwner = this\r\n        return binding.root\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Photok/195", "ground_truth": "        bind(binding)\r\n        return binding.root\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\bindings\\BindableBottomSheetDialogFragment.kt"}}
{"prompt": "\n import androidx.databinding.DataBindingUtil\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = DataBindingUtil.inflate(inflater, layout, container, false)\r", "choices": [{"text": "//        binding.setVariable(BR.viewModel, viewModel)\r\n        binding.setVariable(BR.viewModel, viewModel)\r\n        binding.lifecycleOwner = this\r\n        return binding.root\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Photok/196", "ground_truth": "        bind(binding)\r\n        return binding.root\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\bindings\\BindableDialogFragment.kt"}}
{"prompt": "\n import androidx.databinding.DataBindingUtil\nimport android.view.ViewGroup\nimport android.view.View\nimport android.view.LayoutInflater\nimport android.os.Bundle\noverride fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = DataBindingUtil.inflate(inflater, layout, container, false)\r", "choices": [{"text": "//        binding.setVariable(BR.viewModel, viewModel)\r\n        binding.setVariable(BR.viewModel, viewModel)\r\n        binding.lifecycleOwner = this\r\n        return binding.root\r\n    }\r\n}\r\n"}], "metadata": {"task_id": "Photok/197", "ground_truth": "        bind(binding)\r\n        return binding.root\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\bindings\\BindableFragment.kt"}}
{"prompt": "\n fun notifyCallbacks(property: Int, newValue: Any?) {\r\n        callbacks.forEach {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/199", "ground_truth": "            it.onCallback(property, newValue)\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\bindings\\PropertyValueChangeRegistry.kt"}}
{"prompt": " import dev.leonlatsch.photok.uicomponnets.Chooser.Builder\nvar message String?\nvar permission String?\nval chooser\nfun message(message: String): Builder {\r", "choices": [{"text": "this.message = message\r\nreturn this\r\n}\nfun permission(permission: String): Builder {\r\nthis.permission = permission\r\nreturn this\r\n}\nfun build(): Builder {\r\nreturn this\r\n}\n}\n\nclass Chooser {\r\nprivate val context: Context\r\nprivate val builder: Builder\r\nprivate val chooser: Intent\r\nprivate val chooserTitle: String\r\nprivate val chooserIntent: Intent\r\nprivate val chooserIntentTitle: String\r\nprivate val chooserIntentAction: String\r\nprivate val chooserIntentType: String"}], "metadata": {"task_id": "Photok/200", "ground_truth": "            chooser.message = message\r\n            return this\r\n        }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\Chooser.kt"}}
{"prompt": " import dev.leonlatsch.photok.uicomponnets.Chooser.Builder\nvar mimeType String?\nvar permissionRequestCode Int\nvar message String?\nfun mimeType(mimeType: String): Builder {\r", "choices": [{"text": "this.mimeType = mimeType\r\nreturn this\r\n}\n\nfun permissionRequestCode(permissionRequestCode: Int): Builder {\r\nthis.permissionRequestCode = permissionRequestCode\r\nreturn this\r\n}\n\nfun message(message: String): Builder {\r\nthis.message = message\r\nreturn this\r\n}\n\nfun build(): Chooser {\r\nreturn Chooser(mimeType, permissionRequestCode, message)\r\n}\n\n}\n\nclass Chooser(mimeType: String?, permissionRequestCode: Int, message: String?) {\r\nval mimeType:"}], "metadata": {"task_id": "Photok/201", "ground_truth": "            chooser.mimeType = mimeType\r\n            return this\r\n        }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\Chooser.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.uicomponnets.Chooser.Builder\nfun requestCode(requestCode: Int): Builder {\r", "choices": [{"text": "return Builder(requestCode)\r\n}\r\n"}], "metadata": {"task_id": "Photok/202", "ground_truth": "            chooser.requestCode = requestCode\r\n            return this\r\n        }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\Chooser.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.uicomponnets.Chooser.Builder\nfun permissionCode(permissionCode: Int): Builder {\r", "choices": [{"text": "return Builder(permissionCode)\r\n}\r\n"}], "metadata": {"task_id": "Photok/203", "ground_truth": "            chooser.permissionRequestCode = permissionCode\r\n            return this\r\n        }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\Chooser.kt"}}
{"prompt": " import dev.leonlatsch.photok.uicomponnets.Chooser.Builder\nvar permission String?\nvar message String?\nval chooser\nfun permission(permission: String): Builder {\r", "choices": [{"text": "this.permission = permission\r\nreturn this\r\n}\nfun message(message: String): Builder {\r\nthis.message = message\r\nreturn this\r\n}\nfun build(): Builder {\r\nreturn this\r\n}\n}\n\nclass Chooser {\r\nvar permission: String? = null\r\nvar message: String? = null\r\nvar chooser: Chooser? = null\r\nfun permission(permission: String): Chooser {\r\nthis.permission = permission\r\nreturn this\r\n}\nfun message(message: String): Chooser {\r\nthis."}], "metadata": {"task_id": "Photok/204", "ground_truth": "            chooser.permission = permission\r\n            return this\r\n        }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\Chooser.kt"}}
{"prompt": " import dev.leonlatsch.photok.uicomponnets.Chooser.Builder\nvar allowMultiple Boolean\nvar permission String?\nval chooser\nfun allowMultiple(): Builder {\r", "choices": [{"text": "allowMultiple = true\r\nreturn this\r\n}\r\nfun permission(permission: String): Builder {\r\nthis.permission = permission\r\nreturn this\r\n}\r\nfun build(): Chooser {\r\nreturn Chooser(allowMultiple, permission)\r\n}\r\n}\r\nclass Chooser(allowMultiple: Boolean, permission: String?) {\r\nval allowMultiple: Boolean\r\nval permission: String?\r\nfun choose(activity: Activity, requestCode: Int, callback: (List<Uri>) -> Unit) {\r\nval intent = Intent(Intent.ACTION_"}], "metadata": {"task_id": "Photok/205", "ground_truth": "            chooser.allowMultiple = true\r\n            return this\r\n        }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\Chooser.kt"}}
{"prompt": "\n import android.view.Window\nimport android.content.Context\nimport android.app.Activity\nprivate tailrec fun Context.findWindow(): Window? =\r\n    when (this) {\r\n        is Activity -> window\r", "choices": [{"text": "//        is ContextWrapper -> base.findWindow()\r\n        else -> null\r\n    }\r\n\r\nfun Context.findWindowOrNull(): Window? =\r\n    findWindow()\r\n\r\nfun Context.findWindowOrThrow(): Window =\r\n    findWindow()?: throw IllegalStateException(\"No window found\")\r\n\r\nfun Context.findWindowOrNullOrThrow(): Window =\r\n    findWindowOrNull()?: throw IllegalStateException(\"No window found\")\r\n\r\nfun Context.findWindowOrThrow(message: String): Window =\r\n    findWindowOrThrow().apply {\r\n        throw IllegalStateException(message)\r\n    }\r\n\r\nfun Context.findWindowOrNullOrThrow(message: String): Window ="}], "metadata": {"task_id": "Photok/207", "ground_truth": "        is ContextWrapper -> baseContext.findWindow()\r\n        else -> null\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\compose\\Window.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.other.onMain\nimport android.widget.Toast\nimport android.content.Context\nfun showLongToast(context: Context, message: String) {\r\n        onMain {\r", "choices": [{"text": "Toast.makeText(context, message, Toast.LENGTH_LONG).show()\r\n        }\r\n}\n"}], "metadata": {"task_id": "Photok/209", "ground_truth": "            Toast.makeText(context, message, Toast.LENGTH_LONG).show()\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\Dialogs.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.other.onMain\nimport android.widget.Toast\nimport android.content.Context\nfun showShortToast(context: Context, message: String) {\r\n        onMain {\r", "choices": [{"text": "Toast.makeText(context, message, Toast.LENGTH_SHORT).show()\r\n        }\r\n}\n"}], "metadata": {"task_id": "Photok/210", "ground_truth": "            Toast.makeText(context, message, Toast.LENGTH_SHORT).show()\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\Dialogs.kt"}}
{"prompt": "\nval getTextValue String\nval INPUT_TYPE_TEXT\nval INPUT_TYPE_PASSWORD\n fun setTextValue(value: String) {\r", "choices": [{"text": "val text = findViewById(R.id.text) as EditText\r\ntext.setText(value)\r\n}\r\nfun getTextValue(): String {\r\nval text = findViewById(R.id.text) as EditText\r\nreturn text.text.toString()\r\n}\r\nfun setInputType(type: Int) {\r\nval text = findViewById(R.id.text) as EditText\r\ntext.inputType = type\r\n}\r\nfun getInputType(): Int {\r\nval text = findViewById(R.id.text) as EditText\r\nreturn text.inputType\r"}], "metadata": {"task_id": "Photok/211", "ground_truth": "        binding.passwordEditTextValue.setText(value)\r\n        binding.passwordEditTextValue.setSelection(value.length)\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\PasswordEditText.kt"}}
{"prompt": " import androidx.fragment.app.Fragment\nval fragmentList\nval fragmentTitleList\nprivate fun addFragment(fragment: Fragment, title: String) {\r", "choices": [{"text": "fragmentList.add(fragment)\r\nfragmentTitleList.add(title)\r\n}\n"}], "metadata": {"task_id": "Photok/213", "ground_truth": "        fragmentList.add(fragment)\r\n        fragmentTitleList.add(title)\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\uicomponnets\\ViewPagerAdapter.kt"}}
{"prompt": " import dev.leonlatsch.photok.databinding.FragmentUnlockBinding\nval viewModel UnlockViewModel\noverride fun bind(binding: FragmentUnlockBinding) {\r\n        super.bind(binding)\r", "choices": [{"text": "}\n"}], "metadata": {"task_id": "Photok/215", "ground_truth": "        binding.context = this\r\n        binding.viewModel = viewModel\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\unlock\\ui\\UnlockFragment.kt"}}
{"prompt": "\n import kotlinx.coroutines.launch\nimport androidx.lifecycle.viewModelScope\nfun unlock() = viewModelScope.launch {\r\n        unlockState = UnlockState.CHECKING\r\n\r\n        unlockState = if (passwordManager.checkPassword(password)) {\r\n            encryptionManager.initialize(password)\r", "choices": [{"text": "//            encryptionManager.initialize(password)\r\n            UnlockState.UNLOCKED\r\n        } else {\r\n            UnlockState.WRONG_PASSWORD\r\n        }\r\n    }\n"}], "metadata": {"task_id": "Photok/216", "ground_truth": "            UnlockState.UNLOCKED\r\n        } else {\r\n            UnlockState.LOCKED\r\n        }\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\unlock\\ui\\UnlockViewModel.kt"}}
{"prompt": "\n import javax.crypto.CipherInputStream\nimport java.io.File\nimport com.google.android.exoplayer2.upstream.DataSpec\noverride fun open(dataSpec: DataSpec): Long {\r\n        uri = dataSpec.uri\r\n        uri.path ?: return 0\r\n\r\n        val file = File(uri.path!!).canonicalFile\r\n        inputStream = encryptionManager.createCipherInputStream(file.inputStream())\r\n        if (dataSpec.position != 0L) {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/217", "ground_truth": "            inputStream?.forceSkip(dataSpec.position)\r\n        }\r\n\r\n        return dataSpec.length\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\videoplayer\\data\\AesDataSource.kt"}}
{"prompt": "\n import java.io.IOException\n @Throws(IOException::class)\r\n    override fun read(target: ByteArray, offset: Int, length: Int): Int =\r\n        if (length == 0) {\r\n            0\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/218", "ground_truth": "        } else {\r\n            inputStream?.read(target, offset, length) ?: 0\r\n        }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\videoplayer\\data\\AesDataSource.kt"}}
{"prompt": " import dev.leonlatsch.photok.databinding.FragmentVideoPlayerBinding\nval viewModel VideoPlayerViewModel\noverride fun bind(binding: FragmentVideoPlayerBinding) {\r", "choices": [{"text": "viewModel = binding.viewModel\r\n}\n"}], "metadata": {"task_id": "Photok/219", "ground_truth": "        super.bind(binding)\r\n        binding.context = this\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\videoplayer\\ui\\VideoPlayerFragment.kt"}}
{"prompt": "\n import dev.leonlatsch.photok.videoplayer.data.AesDataSource\nimport com.google.android.exoplayer2.upstream.DataSource\nimport com.google.android.exoplayer2.source.MediaSourceFactory\nprivate fun createMediaSourceFactory(): MediaSourceFactory {\r\n        val aesDataSource = AesDataSource(encryptionManager)\r\n\r\n        val factory = DataSource.Factory {\r", "choices": [{"text": "\n"}], "metadata": {"task_id": "Photok/220", "ground_truth": "            aesDataSource\r\n        }\r\n\r\n        return ProgressiveMediaSource.Factory(factory)\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\videoplayer\\ui\\VideoPlayerViewModel.kt"}}
{"prompt": "\nvar player SimpleExoPlayer?\n fun releasePlayer() {\r", "choices": [{"text": "if (player!= null) {\r\nplayer!!.release()\r\nplayer = null\r\n}\r\n}\r\noverride fun onPause() {\r\nsuper.onPause()\r\nreleasePlayer()\r\n}\r\noverride fun onStop() {\r\nsuper.onStop()\r\nreleasePlayer()\r\n}\r\noverride fun onDestroy() {\r\nsuper.onDestroy()\r\nreleasePlayer()\r\n}\r\noverride fun onResume() {\r\nsuper.onResume()\r\nif (player == null) {\r\nplayer = ExoPlayerFactory.new"}], "metadata": {"task_id": "Photok/222", "ground_truth": "        player?.release()\r\n        player = null\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\videoplayer\\ui\\VideoPlayerViewModel.kt"}}
{"prompt": "\nvar player SimpleExoPlayer?\n override fun onCleared() {\r", "choices": [{"text": "super.onCleared()\r\nplayer?.release()\r\n}\r\n}\r\n"}], "metadata": {"task_id": "Photok/223", "ground_truth": "        super.onCleared()\r\n        releasePlayer()\r\n    }", "fpath": "Photok\\app\\src\\main\\java\\dev\\leonlatsch\\photok\\videoplayer\\ui\\VideoPlayerViewModel.kt"}}
